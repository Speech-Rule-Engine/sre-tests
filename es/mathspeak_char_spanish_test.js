// Copyright 2019 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract class for test cases of single characters.
 * @author Volker.Sorge@gmail.com (Volker Sorge)
 */

goog.provide('sre.MathspeakCharSpanishTest');

goog.require('sre.AbstractCharacterTest');



/**
 * @constructor
 * @extends {sre.AbstractCharacterTest}
 */
sre.MathspeakCharSpanishTest = function() {
  sre.MathspeakCharSpanishTest.base(this, 'constructor');

  this.locale = 'es';
  this.domain = 'mathspeak';
  this.semantics = true;
  
  /**
   * @type {Array.<string>}
   */
  this.styles = ['default', 'brief', 'sbrief'];

  this.setActive('MathspeakCharactersSpanish');
};
goog.inherits(sre.MathspeakCharSpanishTest, sre.AbstractCharacterTest);


sre.MathspeakCharSpanishTest.prototype.testMathspeakChars = function() {
  this.executeCharTest("0", ["0", "0", "0"]);
  this.executeCharTest("1", ["1", "1", "1"]);
  this.executeCharTest("2", ["2", "2", "2"]);
  this.executeCharTest("3", ["3", "3", "3"]);
  this.executeCharTest("4", ["4", "4", "4"]);
  this.executeCharTest("5", ["5", "5", "5"]);
  this.executeCharTest("6", ["6", "6", "6"]);
  this.executeCharTest("7", ["7", "7", "7"]);
  this.executeCharTest("8", ["8", "8", "8"]);
  this.executeCharTest("9", ["9", "9", "9"]);
  this.executeCharTest("𝐀", ["negrita mayúscula A", "negrita mayúscula A", "negrita mayúscula A"]);
  this.executeCharTest("𝐁", ["negrita mayúscula B", "negrita mayúscula B", "negrita mayúscula B"]);
  this.executeCharTest("𝐂", ["negrita mayúscula C", "negrita mayúscula C", "negrita mayúscula C"]);
  this.executeCharTest("𝐃", ["negrita mayúscula D", "negrita mayúscula D", "negrita mayúscula D"]);
  this.executeCharTest("𝐄", ["negrita mayúscula E", "negrita mayúscula E", "negrita mayúscula E"]);
  this.executeCharTest("𝐅", ["negrita mayúscula F", "negrita mayúscula F", "negrita mayúscula F"]);
  this.executeCharTest("𝐆", ["negrita mayúscula G", "negrita mayúscula G", "negrita mayúscula G"]);
  this.executeCharTest("𝐇", ["negrita mayúscula H", "negrita mayúscula H", "negrita mayúscula H"]);
  this.executeCharTest("𝐈", ["negrita mayúscula I", "negrita mayúscula I", "negrita mayúscula I"]);
  this.executeCharTest("𝐉", ["negrita mayúscula J", "negrita mayúscula J", "negrita mayúscula J"]);
  this.executeCharTest("𝐊", ["negrita mayúscula K", "negrita mayúscula K", "negrita mayúscula K"]);
  this.executeCharTest("𝐋", ["negrita mayúscula L", "negrita mayúscula L", "negrita mayúscula L"]);
  this.executeCharTest("𝐌", ["negrita mayúscula M", "negrita mayúscula M", "negrita mayúscula M"]);
  this.executeCharTest("𝐍", ["negrita mayúscula N", "negrita mayúscula N", "negrita mayúscula N"]);
  this.executeCharTest("𝐎", ["negrita mayúscula O", "negrita mayúscula O", "negrita mayúscula O"]);
  this.executeCharTest("𝐏", ["negrita mayúscula P", "negrita mayúscula P", "negrita mayúscula P"]);
  this.executeCharTest("𝐐", ["negrita mayúscula Q", "negrita mayúscula Q", "negrita mayúscula Q"]);
  this.executeCharTest("𝐑", ["negrita mayúscula R", "negrita mayúscula R", "negrita mayúscula R"]);
  this.executeCharTest("𝐒", ["negrita mayúscula S", "negrita mayúscula S", "negrita mayúscula S"]);
  this.executeCharTest("𝐓", ["negrita mayúscula T", "negrita mayúscula T", "negrita mayúscula T"]);
  this.executeCharTest("𝐔", ["negrita mayúscula U", "negrita mayúscula U", "negrita mayúscula U"]);
  this.executeCharTest("𝐕", ["negrita mayúscula V", "negrita mayúscula V", "negrita mayúscula V"]);
  this.executeCharTest("𝐖", ["negrita mayúscula W", "negrita mayúscula W", "negrita mayúscula W"]);
  this.executeCharTest("𝐗", ["negrita mayúscula X", "negrita mayúscula X", "negrita mayúscula X"]);
  this.executeCharTest("𝐘", ["negrita mayúscula Y", "negrita mayúscula Y", "negrita mayúscula Y"]);
  this.executeCharTest("𝐙", ["negrita mayúscula Z", "negrita mayúscula Z", "negrita mayúscula Z"]);
  this.executeCharTest("𝐚", ["negrita a", "negrita a", "negrita a"]);
  this.executeCharTest("𝐛", ["negrita b", "negrita b", "negrita b"]);
  this.executeCharTest("𝐜", ["negrita c", "negrita c", "negrita c"]);
  this.executeCharTest("𝐝", ["negrita d", "negrita d", "negrita d"]);
  this.executeCharTest("𝐞", ["negrita e", "negrita e", "negrita e"]);
  this.executeCharTest("𝐟", ["negrita f", "negrita f", "negrita f"]);
  this.executeCharTest("𝐠", ["negrita g", "negrita g", "negrita g"]);
  this.executeCharTest("𝐡", ["negrita h", "negrita h", "negrita h"]);
  this.executeCharTest("𝐢", ["negrita i", "negrita i", "negrita i"]);
  this.executeCharTest("𝐣", ["negrita j", "negrita j", "negrita j"]);
  this.executeCharTest("𝐤", ["negrita k", "negrita k", "negrita k"]);
  this.executeCharTest("𝐥", ["negrita l", "negrita l", "negrita l"]);
  this.executeCharTest("𝐦", ["negrita m", "negrita m", "negrita m"]);
  this.executeCharTest("𝐧", ["negrita n", "negrita n", "negrita n"]);
  this.executeCharTest("𝐨", ["negrita o", "negrita o", "negrita o"]);
  this.executeCharTest("𝐩", ["negrita p", "negrita p", "negrita p"]);
  this.executeCharTest("𝐪", ["negrita q", "negrita q", "negrita q"]);
  this.executeCharTest("𝐫", ["negrita r", "negrita r", "negrita r"]);
  this.executeCharTest("𝐬", ["negrita s", "negrita s", "negrita s"]);
  this.executeCharTest("𝐭", ["negrita t", "negrita t", "negrita t"]);
  this.executeCharTest("𝐮", ["negrita u", "negrita u", "negrita u"]);
  this.executeCharTest("𝐯", ["negrita v", "negrita v", "negrita v"]);
  this.executeCharTest("𝐰", ["negrita w", "negrita w", "negrita w"]);
  this.executeCharTest("𝐱", ["negrita x", "negrita x", "negrita x"]);
  this.executeCharTest("𝐲", ["negrita y", "negrita y", "negrita y"]);
  this.executeCharTest("𝐳", ["negrita z", "negrita z", "negrita z"]);
  this.executeCharTest("𝕬", ["negrita Fraktur mayúscula A", "negrita Fraktur mayúscula A", "negrita Fraktur mayúscula A"]);
  this.executeCharTest("𝕭", ["negrita Fraktur mayúscula B", "negrita Fraktur mayúscula B", "negrita Fraktur mayúscula B"]);
  this.executeCharTest("𝕮", ["negrita Fraktur mayúscula C", "negrita Fraktur mayúscula C", "negrita Fraktur mayúscula C"]);
  this.executeCharTest("𝕯", ["negrita Fraktur mayúscula D", "negrita Fraktur mayúscula D", "negrita Fraktur mayúscula D"]);
  this.executeCharTest("𝕰", ["negrita Fraktur mayúscula E", "negrita Fraktur mayúscula E", "negrita Fraktur mayúscula E"]);
  this.executeCharTest("𝕱", ["negrita Fraktur mayúscula F", "negrita Fraktur mayúscula F", "negrita Fraktur mayúscula F"]);
  this.executeCharTest("𝕲", ["negrita Fraktur mayúscula G", "negrita Fraktur mayúscula G", "negrita Fraktur mayúscula G"]);
  this.executeCharTest("𝕳", ["negrita Fraktur mayúscula H", "negrita Fraktur mayúscula H", "negrita Fraktur mayúscula H"]);
  this.executeCharTest("𝕴", ["negrita Fraktur mayúscula I", "negrita Fraktur mayúscula I", "negrita Fraktur mayúscula I"]);
  this.executeCharTest("𝕵", ["negrita Fraktur mayúscula J", "negrita Fraktur mayúscula J", "negrita Fraktur mayúscula J"]);
  this.executeCharTest("𝕶", ["negrita Fraktur mayúscula K", "negrita Fraktur mayúscula K", "negrita Fraktur mayúscula K"]);
  this.executeCharTest("𝕷", ["negrita Fraktur mayúscula L", "negrita Fraktur mayúscula L", "negrita Fraktur mayúscula L"]);
  this.executeCharTest("𝕸", ["negrita Fraktur mayúscula M", "negrita Fraktur mayúscula M", "negrita Fraktur mayúscula M"]);
  this.executeCharTest("𝕹", ["negrita Fraktur mayúscula N", "negrita Fraktur mayúscula N", "negrita Fraktur mayúscula N"]);
  this.executeCharTest("𝕺", ["negrita Fraktur mayúscula O", "negrita Fraktur mayúscula O", "negrita Fraktur mayúscula O"]);
  this.executeCharTest("𝕻", ["negrita Fraktur mayúscula P", "negrita Fraktur mayúscula P", "negrita Fraktur mayúscula P"]);
  this.executeCharTest("𝕼", ["negrita Fraktur mayúscula Q", "negrita Fraktur mayúscula Q", "negrita Fraktur mayúscula Q"]);
  this.executeCharTest("𝕽", ["negrita Fraktur mayúscula R", "negrita Fraktur mayúscula R", "negrita Fraktur mayúscula R"]);
  this.executeCharTest("𝕾", ["negrita Fraktur mayúscula S", "negrita Fraktur mayúscula S", "negrita Fraktur mayúscula S"]);
  this.executeCharTest("𝕿", ["negrita Fraktur mayúscula T", "negrita Fraktur mayúscula T", "negrita Fraktur mayúscula T"]);
  this.executeCharTest("𝖀", ["negrita Fraktur mayúscula U", "negrita Fraktur mayúscula U", "negrita Fraktur mayúscula U"]);
  this.executeCharTest("𝖁", ["negrita Fraktur mayúscula V", "negrita Fraktur mayúscula V", "negrita Fraktur mayúscula V"]);
  this.executeCharTest("𝖂", ["negrita Fraktur mayúscula W", "negrita Fraktur mayúscula W", "negrita Fraktur mayúscula W"]);
  this.executeCharTest("𝖃", ["negrita Fraktur mayúscula X", "negrita Fraktur mayúscula X", "negrita Fraktur mayúscula X"]);
  this.executeCharTest("𝖄", ["negrita Fraktur mayúscula Y", "negrita Fraktur mayúscula Y", "negrita Fraktur mayúscula Y"]);
  this.executeCharTest("𝖅", ["negrita Fraktur mayúscula Z", "negrita Fraktur mayúscula Z", "negrita Fraktur mayúscula Z"]);
  this.executeCharTest("𝖆", ["negrita Fraktur a", "negrita Fraktur a", "negrita Fraktur a"]);
  this.executeCharTest("𝖇", ["negrita Fraktur b", "negrita Fraktur b", "negrita Fraktur b"]);
  this.executeCharTest("𝖈", ["negrita Fraktur c", "negrita Fraktur c", "negrita Fraktur c"]);
  this.executeCharTest("𝖉", ["negrita Fraktur d", "negrita Fraktur d", "negrita Fraktur d"]);
  this.executeCharTest("𝖊", ["negrita Fraktur e", "negrita Fraktur e", "negrita Fraktur e"]);
  this.executeCharTest("𝖋", ["negrita Fraktur f", "negrita Fraktur f", "negrita Fraktur f"]);
  this.executeCharTest("𝖌", ["negrita Fraktur g", "negrita Fraktur g", "negrita Fraktur g"]);
  this.executeCharTest("𝖍", ["negrita Fraktur h", "negrita Fraktur h", "negrita Fraktur h"]);
  this.executeCharTest("𝖎", ["negrita Fraktur i", "negrita Fraktur i", "negrita Fraktur i"]);
  this.executeCharTest("𝖏", ["negrita Fraktur j", "negrita Fraktur j", "negrita Fraktur j"]);
  this.executeCharTest("𝖐", ["negrita Fraktur k", "negrita Fraktur k", "negrita Fraktur k"]);
  this.executeCharTest("𝖑", ["negrita Fraktur l", "negrita Fraktur l", "negrita Fraktur l"]);
  this.executeCharTest("𝖒", ["negrita Fraktur m", "negrita Fraktur m", "negrita Fraktur m"]);
  this.executeCharTest("𝖓", ["negrita Fraktur n", "negrita Fraktur n", "negrita Fraktur n"]);
  this.executeCharTest("𝖔", ["negrita Fraktur o", "negrita Fraktur o", "negrita Fraktur o"]);
  this.executeCharTest("𝖕", ["negrita Fraktur p", "negrita Fraktur p", "negrita Fraktur p"]);
  this.executeCharTest("𝖖", ["negrita Fraktur q", "negrita Fraktur q", "negrita Fraktur q"]);
  this.executeCharTest("𝖗", ["negrita Fraktur r", "negrita Fraktur r", "negrita Fraktur r"]);
  this.executeCharTest("𝖘", ["negrita Fraktur s", "negrita Fraktur s", "negrita Fraktur s"]);
  this.executeCharTest("𝖙", ["negrita Fraktur t", "negrita Fraktur t", "negrita Fraktur t"]);
  this.executeCharTest("𝖚", ["negrita Fraktur u", "negrita Fraktur u", "negrita Fraktur u"]);
  this.executeCharTest("𝖛", ["negrita Fraktur v", "negrita Fraktur v", "negrita Fraktur v"]);
  this.executeCharTest("𝖜", ["negrita Fraktur w", "negrita Fraktur w", "negrita Fraktur w"]);
  this.executeCharTest("𝖝", ["negrita Fraktur x", "negrita Fraktur x", "negrita Fraktur x"]);
  this.executeCharTest("𝖞", ["negrita Fraktur y", "negrita Fraktur y", "negrita Fraktur y"]);
  this.executeCharTest("𝖟", ["negrita Fraktur z", "negrita Fraktur z", "negrita Fraktur z"]);
  this.executeCharTest("𝑨", ["negrita cursiva mayúscula A", "negrita cursiva mayúscula A", "negrita cursiva mayúscula A"]);
  this.executeCharTest("𝑩", ["negrita cursiva mayúscula B", "negrita cursiva mayúscula B", "negrita cursiva mayúscula B"]);
  this.executeCharTest("𝑪", ["negrita cursiva mayúscula C", "negrita cursiva mayúscula C", "negrita cursiva mayúscula C"]);
  this.executeCharTest("𝑫", ["negrita cursiva mayúscula D", "negrita cursiva mayúscula D", "negrita cursiva mayúscula D"]);
  this.executeCharTest("𝑬", ["negrita cursiva mayúscula E", "negrita cursiva mayúscula E", "negrita cursiva mayúscula E"]);
  this.executeCharTest("𝑭", ["negrita cursiva mayúscula F", "negrita cursiva mayúscula F", "negrita cursiva mayúscula F"]);
  this.executeCharTest("𝑮", ["negrita cursiva mayúscula G", "negrita cursiva mayúscula G", "negrita cursiva mayúscula G"]);
  this.executeCharTest("𝑯", ["negrita cursiva mayúscula H", "negrita cursiva mayúscula H", "negrita cursiva mayúscula H"]);
  this.executeCharTest("𝑰", ["negrita cursiva mayúscula I", "negrita cursiva mayúscula I", "negrita cursiva mayúscula I"]);
  this.executeCharTest("𝑱", ["negrita cursiva mayúscula J", "negrita cursiva mayúscula J", "negrita cursiva mayúscula J"]);
  this.executeCharTest("𝑲", ["negrita cursiva mayúscula K", "negrita cursiva mayúscula K", "negrita cursiva mayúscula K"]);
  this.executeCharTest("𝑳", ["negrita cursiva mayúscula L", "negrita cursiva mayúscula L", "negrita cursiva mayúscula L"]);
  this.executeCharTest("𝑴", ["negrita cursiva mayúscula M", "negrita cursiva mayúscula M", "negrita cursiva mayúscula M"]);
  this.executeCharTest("𝑵", ["negrita cursiva mayúscula N", "negrita cursiva mayúscula N", "negrita cursiva mayúscula N"]);
  this.executeCharTest("𝑶", ["negrita cursiva mayúscula O", "negrita cursiva mayúscula O", "negrita cursiva mayúscula O"]);
  this.executeCharTest("𝑷", ["negrita cursiva mayúscula P", "negrita cursiva mayúscula P", "negrita cursiva mayúscula P"]);
  this.executeCharTest("𝑸", ["negrita cursiva mayúscula Q", "negrita cursiva mayúscula Q", "negrita cursiva mayúscula Q"]);
  this.executeCharTest("𝑹", ["negrita cursiva mayúscula R", "negrita cursiva mayúscula R", "negrita cursiva mayúscula R"]);
  this.executeCharTest("𝑺", ["negrita cursiva mayúscula S", "negrita cursiva mayúscula S", "negrita cursiva mayúscula S"]);
  this.executeCharTest("𝑻", ["negrita cursiva mayúscula T", "negrita cursiva mayúscula T", "negrita cursiva mayúscula T"]);
  this.executeCharTest("𝑼", ["negrita cursiva mayúscula U", "negrita cursiva mayúscula U", "negrita cursiva mayúscula U"]);
  this.executeCharTest("𝑽", ["negrita cursiva mayúscula V", "negrita cursiva mayúscula V", "negrita cursiva mayúscula V"]);
  this.executeCharTest("𝑾", ["negrita cursiva mayúscula W", "negrita cursiva mayúscula W", "negrita cursiva mayúscula W"]);
  this.executeCharTest("𝑿", ["negrita cursiva mayúscula X", "negrita cursiva mayúscula X", "negrita cursiva mayúscula X"]);
  this.executeCharTest("𝒀", ["negrita cursiva mayúscula Y", "negrita cursiva mayúscula Y", "negrita cursiva mayúscula Y"]);
  this.executeCharTest("𝒁", ["negrita cursiva mayúscula Z", "negrita cursiva mayúscula Z", "negrita cursiva mayúscula Z"]);
  this.executeCharTest("𝒂", ["negrita cursiva a", "negrita cursiva a", "negrita cursiva a"]);
  this.executeCharTest("𝒃", ["negrita cursiva b", "negrita cursiva b", "negrita cursiva b"]);
  this.executeCharTest("𝒄", ["negrita cursiva c", "negrita cursiva c", "negrita cursiva c"]);
  this.executeCharTest("𝒅", ["negrita cursiva d", "negrita cursiva d", "negrita cursiva d"]);
  this.executeCharTest("𝒆", ["negrita cursiva e", "negrita cursiva e", "negrita cursiva e"]);
  this.executeCharTest("𝒇", ["negrita cursiva f", "negrita cursiva f", "negrita cursiva f"]);
  this.executeCharTest("𝒈", ["negrita cursiva g", "negrita cursiva g", "negrita cursiva g"]);
  this.executeCharTest("𝒉", ["negrita cursiva h", "negrita cursiva h", "negrita cursiva h"]);
  this.executeCharTest("𝒊", ["negrita cursiva i", "negrita cursiva i", "negrita cursiva i"]);
  this.executeCharTest("𝒋", ["negrita cursiva j", "negrita cursiva j", "negrita cursiva j"]);
  this.executeCharTest("𝒌", ["negrita cursiva k", "negrita cursiva k", "negrita cursiva k"]);
  this.executeCharTest("𝒍", ["negrita cursiva l", "negrita cursiva l", "negrita cursiva l"]);
  this.executeCharTest("𝒎", ["negrita cursiva m", "negrita cursiva m", "negrita cursiva m"]);
  this.executeCharTest("𝒏", ["negrita cursiva n", "negrita cursiva n", "negrita cursiva n"]);
  this.executeCharTest("𝒐", ["negrita cursiva o", "negrita cursiva o", "negrita cursiva o"]);
  this.executeCharTest("𝒑", ["negrita cursiva p", "negrita cursiva p", "negrita cursiva p"]);
  this.executeCharTest("𝒒", ["negrita cursiva q", "negrita cursiva q", "negrita cursiva q"]);
  this.executeCharTest("𝒓", ["negrita cursiva r", "negrita cursiva r", "negrita cursiva r"]);
  this.executeCharTest("𝒔", ["negrita cursiva s", "negrita cursiva s", "negrita cursiva s"]);
  this.executeCharTest("𝒕", ["negrita cursiva t", "negrita cursiva t", "negrita cursiva t"]);
  this.executeCharTest("𝒖", ["negrita cursiva u", "negrita cursiva u", "negrita cursiva u"]);
  this.executeCharTest("𝒗", ["negrita cursiva v", "negrita cursiva v", "negrita cursiva v"]);
  this.executeCharTest("𝒘", ["negrita cursiva w", "negrita cursiva w", "negrita cursiva w"]);
  this.executeCharTest("𝒙", ["negrita cursiva x", "negrita cursiva x", "negrita cursiva x"]);
  this.executeCharTest("𝒚", ["negrita cursiva y", "negrita cursiva y", "negrita cursiva y"]);
  this.executeCharTest("𝒛", ["negrita cursiva z", "negrita cursiva z", "negrita cursiva z"]);
  this.executeCharTest("𝓐", ["negrita script mayúscula A", "negrita script mayúscula A", "negrita script mayúscula A"]);
  this.executeCharTest("𝓑", ["negrita script mayúscula B", "negrita script mayúscula B", "negrita script mayúscula B"]);
  this.executeCharTest("𝓒", ["negrita script mayúscula C", "negrita script mayúscula C", "negrita script mayúscula C"]);
  this.executeCharTest("𝓓", ["negrita script mayúscula D", "negrita script mayúscula D", "negrita script mayúscula D"]);
  this.executeCharTest("𝓔", ["negrita script mayúscula E", "negrita script mayúscula E", "negrita script mayúscula E"]);
  this.executeCharTest("𝓕", ["negrita script mayúscula F", "negrita script mayúscula F", "negrita script mayúscula F"]);
  this.executeCharTest("𝓖", ["negrita script mayúscula G", "negrita script mayúscula G", "negrita script mayúscula G"]);
  this.executeCharTest("𝓗", ["negrita script mayúscula H", "negrita script mayúscula H", "negrita script mayúscula H"]);
  this.executeCharTest("𝓘", ["negrita script mayúscula I", "negrita script mayúscula I", "negrita script mayúscula I"]);
  this.executeCharTest("𝓙", ["negrita script mayúscula J", "negrita script mayúscula J", "negrita script mayúscula J"]);
  this.executeCharTest("𝓚", ["negrita script mayúscula K", "negrita script mayúscula K", "negrita script mayúscula K"]);
  this.executeCharTest("𝓛", ["negrita script mayúscula L", "negrita script mayúscula L", "negrita script mayúscula L"]);
  this.executeCharTest("𝓜", ["negrita script mayúscula M", "negrita script mayúscula M", "negrita script mayúscula M"]);
  this.executeCharTest("𝓝", ["negrita script mayúscula N", "negrita script mayúscula N", "negrita script mayúscula N"]);
  this.executeCharTest("𝓞", ["negrita script mayúscula O", "negrita script mayúscula O", "negrita script mayúscula O"]);
  this.executeCharTest("𝓟", ["negrita script mayúscula P", "negrita script mayúscula P", "negrita script mayúscula P"]);
  this.executeCharTest("𝓠", ["negrita script mayúscula Q", "negrita script mayúscula Q", "negrita script mayúscula Q"]);
  this.executeCharTest("𝓡", ["negrita script mayúscula R", "negrita script mayúscula R", "negrita script mayúscula R"]);
  this.executeCharTest("𝓢", ["negrita script mayúscula S", "negrita script mayúscula S", "negrita script mayúscula S"]);
  this.executeCharTest("𝓣", ["negrita script mayúscula T", "negrita script mayúscula T", "negrita script mayúscula T"]);
  this.executeCharTest("𝓤", ["negrita script mayúscula U", "negrita script mayúscula U", "negrita script mayúscula U"]);
  this.executeCharTest("𝓥", ["negrita script mayúscula V", "negrita script mayúscula V", "negrita script mayúscula V"]);
  this.executeCharTest("𝓦", ["negrita script mayúscula W", "negrita script mayúscula W", "negrita script mayúscula W"]);
  this.executeCharTest("𝓧", ["negrita script mayúscula X", "negrita script mayúscula X", "negrita script mayúscula X"]);
  this.executeCharTest("𝓨", ["negrita script mayúscula Y", "negrita script mayúscula Y", "negrita script mayúscula Y"]);
  this.executeCharTest("𝓩", ["negrita script mayúscula Z", "negrita script mayúscula Z", "negrita script mayúscula Z"]);
  this.executeCharTest("𝓪", ["negrita script a", "negrita script a", "negrita script a"]);
  this.executeCharTest("𝓫", ["negrita script b", "negrita script b", "negrita script b"]);
  this.executeCharTest("𝓬", ["negrita script c", "negrita script c", "negrita script c"]);
  this.executeCharTest("𝓭", ["negrita script d", "negrita script d", "negrita script d"]);
  this.executeCharTest("𝓮", ["negrita script e", "negrita script e", "negrita script e"]);
  this.executeCharTest("𝓯", ["negrita script f", "negrita script f", "negrita script f"]);
  this.executeCharTest("𝓰", ["negrita script g", "negrita script g", "negrita script g"]);
  this.executeCharTest("𝓱", ["negrita script h", "negrita script h", "negrita script h"]);
  this.executeCharTest("𝓲", ["negrita script i", "negrita script i", "negrita script i"]);
  this.executeCharTest("𝓳", ["negrita script j", "negrita script j", "negrita script j"]);
  this.executeCharTest("𝓴", ["negrita script k", "negrita script k", "negrita script k"]);
  this.executeCharTest("𝓵", ["negrita script l", "negrita script l", "negrita script l"]);
  this.executeCharTest("𝓶", ["negrita script m", "negrita script m", "negrita script m"]);
  this.executeCharTest("𝓷", ["negrita script n", "negrita script n", "negrita script n"]);
  this.executeCharTest("𝓸", ["negrita script o", "negrita script o", "negrita script o"]);
  this.executeCharTest("𝓹", ["negrita script p", "negrita script p", "negrita script p"]);
  this.executeCharTest("𝓺", ["negrita script q", "negrita script q", "negrita script q"]);
  this.executeCharTest("𝓻", ["negrita script r", "negrita script r", "negrita script r"]);
  this.executeCharTest("𝓼", ["negrita script s", "negrita script s", "negrita script s"]);
  this.executeCharTest("𝓽", ["negrita script t", "negrita script t", "negrita script t"]);
  this.executeCharTest("𝓾", ["negrita script u", "negrita script u", "negrita script u"]);
  this.executeCharTest("𝓿", ["negrita script v", "negrita script v", "negrita script v"]);
  this.executeCharTest("𝔀", ["negrita script w", "negrita script w", "negrita script w"]);
  this.executeCharTest("𝔁", ["negrita script x", "negrita script x", "negrita script x"]);
  this.executeCharTest("𝔂", ["negrita script y", "negrita script y", "negrita script y"]);
  this.executeCharTest("𝔃", ["negrita script z", "negrita script z", "negrita script z"]);
  this.executeCharTest("𝔸", ["negrita de pizarra mayúscula A", "negrita de pizarra mayúscula A", "negrita de pizarra mayúscula A"]);
  this.executeCharTest("𝔹", ["negrita de pizarra mayúscula B", "negrita de pizarra mayúscula B", "negrita de pizarra mayúscula B"]);
  this.executeCharTest("ℂ", ["negrita de pizarra mayúscula C", "negrita de pizarra mayúscula C", "negrita de pizarra mayúscula C"]);
  this.executeCharTest("𝔻", ["negrita de pizarra mayúscula D", "negrita de pizarra mayúscula D", "negrita de pizarra mayúscula D"]);
  this.executeCharTest("𝔼", ["negrita de pizarra mayúscula E", "negrita de pizarra mayúscula E", "negrita de pizarra mayúscula E"]);
  this.executeCharTest("𝔽", ["negrita de pizarra mayúscula F", "negrita de pizarra mayúscula F", "negrita de pizarra mayúscula F"]);
  this.executeCharTest("𝔾", ["negrita de pizarra mayúscula G", "negrita de pizarra mayúscula G", "negrita de pizarra mayúscula G"]);
  this.executeCharTest("ℍ", ["negrita de pizarra mayúscula H", "negrita de pizarra mayúscula H", "negrita de pizarra mayúscula H"]);
  this.executeCharTest("𝕀", ["negrita de pizarra mayúscula I", "negrita de pizarra mayúscula I", "negrita de pizarra mayúscula I"]);
  this.executeCharTest("𝕁", ["negrita de pizarra mayúscula J", "negrita de pizarra mayúscula J", "negrita de pizarra mayúscula J"]);
  this.executeCharTest("𝕂", ["negrita de pizarra mayúscula K", "negrita de pizarra mayúscula K", "negrita de pizarra mayúscula K"]);
  this.executeCharTest("𝕃", ["negrita de pizarra mayúscula L", "negrita de pizarra mayúscula L", "negrita de pizarra mayúscula L"]);
  this.executeCharTest("𝕄", ["negrita de pizarra mayúscula M", "negrita de pizarra mayúscula M", "negrita de pizarra mayúscula M"]);
  this.executeCharTest("ℕ", ["negrita de pizarra mayúscula N", "negrita de pizarra mayúscula N", "negrita de pizarra mayúscula N"]);
  this.executeCharTest("𝕆", ["negrita de pizarra mayúscula O", "negrita de pizarra mayúscula O", "negrita de pizarra mayúscula O"]);
  this.executeCharTest("ℙ", ["negrita de pizarra mayúscula P", "negrita de pizarra mayúscula P", "negrita de pizarra mayúscula P"]);
  this.executeCharTest("ℚ", ["negrita de pizarra mayúscula Q", "negrita de pizarra mayúscula Q", "negrita de pizarra mayúscula Q"]);
  this.executeCharTest("ℝ", ["negrita de pizarra mayúscula R", "negrita de pizarra mayúscula R", "negrita de pizarra mayúscula R"]);
  this.executeCharTest("𝕊", ["negrita de pizarra mayúscula S", "negrita de pizarra mayúscula S", "negrita de pizarra mayúscula S"]);
  this.executeCharTest("𝕋", ["negrita de pizarra mayúscula T", "negrita de pizarra mayúscula T", "negrita de pizarra mayúscula T"]);
  this.executeCharTest("𝕌", ["negrita de pizarra mayúscula U", "negrita de pizarra mayúscula U", "negrita de pizarra mayúscula U"]);
  this.executeCharTest("𝕍", ["negrita de pizarra mayúscula V", "negrita de pizarra mayúscula V", "negrita de pizarra mayúscula V"]);
  this.executeCharTest("𝕎", ["negrita de pizarra mayúscula W", "negrita de pizarra mayúscula W", "negrita de pizarra mayúscula W"]);
  this.executeCharTest("𝕏", ["negrita de pizarra mayúscula X", "negrita de pizarra mayúscula X", "negrita de pizarra mayúscula X"]);
  this.executeCharTest("𝕐", ["negrita de pizarra mayúscula Y", "negrita de pizarra mayúscula Y", "negrita de pizarra mayúscula Y"]);
  this.executeCharTest("ℤ", ["negrita de pizarra mayúscula Z", "negrita de pizarra mayúscula Z", "negrita de pizarra mayúscula Z"]);
  this.executeCharTest("𝕒", ["negrita de pizarra a", "negrita de pizarra a", "negrita de pizarra a"]);
  this.executeCharTest("𝕓", ["negrita de pizarra b", "negrita de pizarra b", "negrita de pizarra b"]);
  this.executeCharTest("𝕔", ["negrita de pizarra c", "negrita de pizarra c", "negrita de pizarra c"]);
  this.executeCharTest("𝕕", ["negrita de pizarra d", "negrita de pizarra d", "negrita de pizarra d"]);
  this.executeCharTest("𝕖", ["negrita de pizarra e", "negrita de pizarra e", "negrita de pizarra e"]);
  this.executeCharTest("𝕗", ["negrita de pizarra f", "negrita de pizarra f", "negrita de pizarra f"]);
  this.executeCharTest("𝕘", ["negrita de pizarra g", "negrita de pizarra g", "negrita de pizarra g"]);
  this.executeCharTest("𝕙", ["negrita de pizarra h", "negrita de pizarra h", "negrita de pizarra h"]);
  this.executeCharTest("𝕚", ["negrita de pizarra i", "negrita de pizarra i", "negrita de pizarra i"]);
  this.executeCharTest("𝕛", ["negrita de pizarra j", "negrita de pizarra j", "negrita de pizarra j"]);
  this.executeCharTest("𝕜", ["negrita de pizarra k", "negrita de pizarra k", "negrita de pizarra k"]);
  this.executeCharTest("𝕝", ["negrita de pizarra l", "negrita de pizarra l", "negrita de pizarra l"]);
  this.executeCharTest("𝕞", ["negrita de pizarra m", "negrita de pizarra m", "negrita de pizarra m"]);
  this.executeCharTest("𝕟", ["negrita de pizarra n", "negrita de pizarra n", "negrita de pizarra n"]);
  this.executeCharTest("𝕠", ["negrita de pizarra o", "negrita de pizarra o", "negrita de pizarra o"]);
  this.executeCharTest("𝕡", ["negrita de pizarra p", "negrita de pizarra p", "negrita de pizarra p"]);
  this.executeCharTest("𝕢", ["negrita de pizarra q", "negrita de pizarra q", "negrita de pizarra q"]);
  this.executeCharTest("𝕣", ["negrita de pizarra r", "negrita de pizarra r", "negrita de pizarra r"]);
  this.executeCharTest("𝕤", ["negrita de pizarra s", "negrita de pizarra s", "negrita de pizarra s"]);
  this.executeCharTest("𝕥", ["negrita de pizarra t", "negrita de pizarra t", "negrita de pizarra t"]);
  this.executeCharTest("𝕦", ["negrita de pizarra u", "negrita de pizarra u", "negrita de pizarra u"]);
  this.executeCharTest("𝕧", ["negrita de pizarra v", "negrita de pizarra v", "negrita de pizarra v"]);
  this.executeCharTest("𝕨", ["negrita de pizarra w", "negrita de pizarra w", "negrita de pizarra w"]);
  this.executeCharTest("𝕩", ["negrita de pizarra x", "negrita de pizarra x", "negrita de pizarra x"]);
  this.executeCharTest("𝕪", ["negrita de pizarra y", "negrita de pizarra y", "negrita de pizarra y"]);
  this.executeCharTest("𝕫", ["negrita de pizarra z", "negrita de pizarra z", "negrita de pizarra z"]);
  this.executeCharTest("𝔄", ["Fraktur mayúscula A", "Fraktur mayúscula A", "Fraktur mayúscula A"]);
  this.executeCharTest("𝔅", ["Fraktur mayúscula B", "Fraktur mayúscula B", "Fraktur mayúscula B"]);
  this.executeCharTest("ℭ", ["Fraktur mayúscula C", "Fraktur mayúscula C", "Fraktur mayúscula C"]);
  this.executeCharTest("𝔇", ["Fraktur mayúscula D", "Fraktur mayúscula D", "Fraktur mayúscula D"]);
  this.executeCharTest("𝔈", ["Fraktur mayúscula E", "Fraktur mayúscula E", "Fraktur mayúscula E"]);
  this.executeCharTest("𝔉", ["Fraktur mayúscula F", "Fraktur mayúscula F", "Fraktur mayúscula F"]);
  this.executeCharTest("𝔊", ["Fraktur mayúscula G", "Fraktur mayúscula G", "Fraktur mayúscula G"]);
  this.executeCharTest("ℌ", ["Fraktur mayúscula H", "Fraktur mayúscula H", "Fraktur mayúscula H"]);
  this.executeCharTest("ℑ", ["Fraktur mayúscula I", "Fraktur mayúscula I", "Fraktur mayúscula I"]);
  this.executeCharTest("𝔍", ["Fraktur mayúscula J", "Fraktur mayúscula J", "Fraktur mayúscula J"]);
  this.executeCharTest("𝔎", ["Fraktur mayúscula K", "Fraktur mayúscula K", "Fraktur mayúscula K"]);
  this.executeCharTest("𝔏", ["Fraktur mayúscula L", "Fraktur mayúscula L", "Fraktur mayúscula L"]);
  this.executeCharTest("𝔐", ["Fraktur mayúscula M", "Fraktur mayúscula M", "Fraktur mayúscula M"]);
  this.executeCharTest("𝔑", ["Fraktur mayúscula N", "Fraktur mayúscula N", "Fraktur mayúscula N"]);
  this.executeCharTest("𝔒", ["Fraktur mayúscula O", "Fraktur mayúscula O", "Fraktur mayúscula O"]);
  this.executeCharTest("𝔓", ["Fraktur mayúscula P", "Fraktur mayúscula P", "Fraktur mayúscula P"]);
  this.executeCharTest("𝔔", ["Fraktur mayúscula Q", "Fraktur mayúscula Q", "Fraktur mayúscula Q"]);
  this.executeCharTest("ℜ", ["Fraktur mayúscula R", "Fraktur mayúscula R", "Fraktur mayúscula R"]);
  this.executeCharTest("𝔖", ["Fraktur mayúscula S", "Fraktur mayúscula S", "Fraktur mayúscula S"]);
  this.executeCharTest("𝔗", ["Fraktur mayúscula T", "Fraktur mayúscula T", "Fraktur mayúscula T"]);
  this.executeCharTest("𝔘", ["Fraktur mayúscula U", "Fraktur mayúscula U", "Fraktur mayúscula U"]);
  this.executeCharTest("𝔙", ["Fraktur mayúscula V", "Fraktur mayúscula V", "Fraktur mayúscula V"]);
  this.executeCharTest("𝔚", ["Fraktur mayúscula W", "Fraktur mayúscula W", "Fraktur mayúscula W"]);
  this.executeCharTest("𝔛", ["Fraktur mayúscula X", "Fraktur mayúscula X", "Fraktur mayúscula X"]);
  this.executeCharTest("𝔜", ["Fraktur mayúscula Y", "Fraktur mayúscula Y", "Fraktur mayúscula Y"]);
  this.executeCharTest("ℨ", ["Fraktur mayúscula Z", "Fraktur mayúscula Z", "Fraktur mayúscula Z"]);
  this.executeCharTest("𝔞", ["Fraktur a", "Fraktur a", "Fraktur a"]);
  this.executeCharTest("𝔟", ["Fraktur b", "Fraktur b", "Fraktur b"]);
  this.executeCharTest("𝔠", ["Fraktur c", "Fraktur c", "Fraktur c"]);
  this.executeCharTest("𝔡", ["Fraktur d", "Fraktur d", "Fraktur d"]);
  this.executeCharTest("𝔢", ["Fraktur e", "Fraktur e", "Fraktur e"]);
  this.executeCharTest("𝔣", ["Fraktur f", "Fraktur f", "Fraktur f"]);
  this.executeCharTest("𝔤", ["Fraktur g", "Fraktur g", "Fraktur g"]);
  this.executeCharTest("𝔥", ["Fraktur h", "Fraktur h", "Fraktur h"]);
  this.executeCharTest("𝔦", ["Fraktur i", "Fraktur i", "Fraktur i"]);
  this.executeCharTest("𝔧", ["Fraktur j", "Fraktur j", "Fraktur j"]);
  this.executeCharTest("𝔨", ["Fraktur k", "Fraktur k", "Fraktur k"]);
  this.executeCharTest("𝔩", ["Fraktur l", "Fraktur l", "Fraktur l"]);
  this.executeCharTest("𝔪", ["Fraktur m", "Fraktur m", "Fraktur m"]);
  this.executeCharTest("𝔫", ["Fraktur n", "Fraktur n", "Fraktur n"]);
  this.executeCharTest("𝔬", ["Fraktur o", "Fraktur o", "Fraktur o"]);
  this.executeCharTest("𝔭", ["Fraktur p", "Fraktur p", "Fraktur p"]);
  this.executeCharTest("𝔮", ["Fraktur q", "Fraktur q", "Fraktur q"]);
  this.executeCharTest("𝔯", ["Fraktur r", "Fraktur r", "Fraktur r"]);
  this.executeCharTest("𝔰", ["Fraktur s", "Fraktur s", "Fraktur s"]);
  this.executeCharTest("𝔱", ["Fraktur t", "Fraktur t", "Fraktur t"]);
  this.executeCharTest("𝔲", ["Fraktur u", "Fraktur u", "Fraktur u"]);
  this.executeCharTest("𝔳", ["Fraktur v", "Fraktur v", "Fraktur v"]);
  this.executeCharTest("𝔴", ["Fraktur w", "Fraktur w", "Fraktur w"]);
  this.executeCharTest("𝔵", ["Fraktur x", "Fraktur x", "Fraktur x"]);
  this.executeCharTest("𝔶", ["Fraktur y", "Fraktur y", "Fraktur y"]);
  this.executeCharTest("𝔷", ["Fraktur z", "Fraktur z", "Fraktur z"]);
  this.executeCharTest("Ａ", ["mayúscula A", "mayúscula A", "mayúscula A"]);
  this.executeCharTest("Ｂ", ["mayúscula B", "mayúscula B", "mayúscula B"]);
  this.executeCharTest("Ｃ", ["mayúscula C", "mayúscula C", "mayúscula C"]);
  this.executeCharTest("Ｄ", ["mayúscula D", "mayúscula D", "mayúscula D"]);
  this.executeCharTest("Ｅ", ["mayúscula E", "mayúscula E", "mayúscula E"]);
  this.executeCharTest("Ｆ", ["mayúscula F", "mayúscula F", "mayúscula F"]);
  this.executeCharTest("Ｇ", ["mayúscula G", "mayúscula G", "mayúscula G"]);
  this.executeCharTest("Ｈ", ["mayúscula H", "mayúscula H", "mayúscula H"]);
  this.executeCharTest("Ｉ", ["mayúscula I", "mayúscula I", "mayúscula I"]);
  this.executeCharTest("Ｊ", ["mayúscula J", "mayúscula J", "mayúscula J"]);
  this.executeCharTest("Ｋ", ["mayúscula K", "mayúscula K", "mayúscula K"]);
  this.executeCharTest("Ｌ", ["mayúscula L", "mayúscula L", "mayúscula L"]);
  this.executeCharTest("Ｍ", ["mayúscula M", "mayúscula M", "mayúscula M"]);
  this.executeCharTest("Ｎ", ["mayúscula N", "mayúscula N", "mayúscula N"]);
  this.executeCharTest("Ｏ", ["mayúscula O", "mayúscula O", "mayúscula O"]);
  this.executeCharTest("Ｐ", ["mayúscula P", "mayúscula P", "mayúscula P"]);
  this.executeCharTest("Ｑ", ["mayúscula Q", "mayúscula Q", "mayúscula Q"]);
  this.executeCharTest("Ｒ", ["mayúscula R", "mayúscula R", "mayúscula R"]);
  this.executeCharTest("Ｓ", ["mayúscula S", "mayúscula S", "mayúscula S"]);
  this.executeCharTest("Ｔ", ["mayúscula T", "mayúscula T", "mayúscula T"]);
  this.executeCharTest("Ｕ", ["mayúscula U", "mayúscula U", "mayúscula U"]);
  this.executeCharTest("Ｖ", ["mayúscula V", "mayúscula V", "mayúscula V"]);
  this.executeCharTest("Ｗ", ["mayúscula W", "mayúscula W", "mayúscula W"]);
  this.executeCharTest("Ｘ", ["mayúscula X", "mayúscula X", "mayúscula X"]);
  this.executeCharTest("Ｙ", ["mayúscula Y", "mayúscula Y", "mayúscula Y"]);
  this.executeCharTest("Ｚ", ["mayúscula Z", "mayúscula Z", "mayúscula Z"]);
  this.executeCharTest("ａ", ["a", "a", "a"]);
  this.executeCharTest("ｂ", ["b", "b", "b"]);
  this.executeCharTest("ｃ", ["c", "c", "c"]);
  this.executeCharTest("ｄ", ["d", "d", "d"]);
  this.executeCharTest("ｅ", ["e", "e", "e"]);
  this.executeCharTest("ｆ", ["f", "f", "f"]);
  this.executeCharTest("ｇ", ["g", "g", "g"]);
  this.executeCharTest("ｈ", ["h", "h", "h"]);
  this.executeCharTest("ｉ", ["i", "i", "i"]);
  this.executeCharTest("ｊ", ["j", "j", "j"]);
  this.executeCharTest("ｋ", ["k", "k", "k"]);
  this.executeCharTest("ｌ", ["l", "l", "l"]);
  this.executeCharTest("ｍ", ["m", "m", "m"]);
  this.executeCharTest("ｎ", ["n", "n", "n"]);
  this.executeCharTest("ｏ", ["o", "o", "o"]);
  this.executeCharTest("ｐ", ["p", "p", "p"]);
  this.executeCharTest("ｑ", ["q", "q", "q"]);
  this.executeCharTest("ｒ", ["r", "r", "r"]);
  this.executeCharTest("ｓ", ["s", "s", "s"]);
  this.executeCharTest("ｔ", ["t", "t", "t"]);
  this.executeCharTest("ｕ", ["u", "u", "u"]);
  this.executeCharTest("ｖ", ["v", "v", "v"]);
  this.executeCharTest("ｗ", ["w", "w", "w"]);
  this.executeCharTest("ｘ", ["x", "x", "x"]);
  this.executeCharTest("ｙ", ["y", "y", "y"]);
  this.executeCharTest("ｚ", ["z", "z", "z"]);
  this.executeCharTest("𝐴", ["cursiva mayúscula A", "cursiva mayúscula A", "cursiva mayúscula A"]);
  this.executeCharTest("𝐵", ["cursiva mayúscula B", "cursiva mayúscula B", "cursiva mayúscula B"]);
  this.executeCharTest("𝐶", ["cursiva mayúscula C", "cursiva mayúscula C", "cursiva mayúscula C"]);
  this.executeCharTest("𝐷", ["cursiva mayúscula D", "cursiva mayúscula D", "cursiva mayúscula D"]);
  this.executeCharTest("𝐸", ["cursiva mayúscula E", "cursiva mayúscula E", "cursiva mayúscula E"]);
  this.executeCharTest("𝐹", ["cursiva mayúscula F", "cursiva mayúscula F", "cursiva mayúscula F"]);
  this.executeCharTest("𝐺", ["cursiva mayúscula G", "cursiva mayúscula G", "cursiva mayúscula G"]);
  this.executeCharTest("𝐻", ["cursiva mayúscula H", "cursiva mayúscula H", "cursiva mayúscula H"]);
  this.executeCharTest("𝐼", ["cursiva mayúscula I", "cursiva mayúscula I", "cursiva mayúscula I"]);
  this.executeCharTest("𝐽", ["cursiva mayúscula J", "cursiva mayúscula J", "cursiva mayúscula J"]);
  this.executeCharTest("𝐾", ["cursiva mayúscula K", "cursiva mayúscula K", "cursiva mayúscula K"]);
  this.executeCharTest("𝐿", ["cursiva mayúscula L", "cursiva mayúscula L", "cursiva mayúscula L"]);
  this.executeCharTest("𝑀", ["cursiva mayúscula M", "cursiva mayúscula M", "cursiva mayúscula M"]);
  this.executeCharTest("𝑁", ["cursiva mayúscula N", "cursiva mayúscula N", "cursiva mayúscula N"]);
  this.executeCharTest("𝑂", ["cursiva mayúscula O", "cursiva mayúscula O", "cursiva mayúscula O"]);
  this.executeCharTest("𝑃", ["cursiva mayúscula P", "cursiva mayúscula P", "cursiva mayúscula P"]);
  this.executeCharTest("𝑄", ["cursiva mayúscula Q", "cursiva mayúscula Q", "cursiva mayúscula Q"]);
  this.executeCharTest("𝑅", ["cursiva mayúscula R", "cursiva mayúscula R", "cursiva mayúscula R"]);
  this.executeCharTest("𝑆", ["cursiva mayúscula S", "cursiva mayúscula S", "cursiva mayúscula S"]);
  this.executeCharTest("𝑇", ["cursiva mayúscula T", "cursiva mayúscula T", "cursiva mayúscula T"]);
  this.executeCharTest("𝑈", ["cursiva mayúscula U", "cursiva mayúscula U", "cursiva mayúscula U"]);
  this.executeCharTest("𝑉", ["cursiva mayúscula V", "cursiva mayúscula V", "cursiva mayúscula V"]);
  this.executeCharTest("𝑊", ["cursiva mayúscula W", "cursiva mayúscula W", "cursiva mayúscula W"]);
  this.executeCharTest("𝑋", ["cursiva mayúscula X", "cursiva mayúscula X", "cursiva mayúscula X"]);
  this.executeCharTest("𝑌", ["cursiva mayúscula Y", "cursiva mayúscula Y", "cursiva mayúscula Y"]);
  this.executeCharTest("𝑍", ["cursiva mayúscula Z", "cursiva mayúscula Z", "cursiva mayúscula Z"]);
  this.executeCharTest("𝑎", ["cursiva a", "cursiva a", "cursiva a"]);
  this.executeCharTest("𝑏", ["cursiva b", "cursiva b", "cursiva b"]);
  this.executeCharTest("𝑐", ["cursiva c", "cursiva c", "cursiva c"]);
  this.executeCharTest("𝑑", ["cursiva d", "cursiva d", "cursiva d"]);
  this.executeCharTest("𝑒", ["cursiva e", "cursiva e", "cursiva e"]);
  this.executeCharTest("𝑓", ["cursiva f", "cursiva f", "cursiva f"]);
  this.executeCharTest("𝑔", ["cursiva g", "cursiva g", "cursiva g"]);
  this.executeCharTest("ℎ", ["constante de planck", "constante de planck", "constante de planck"]);
  this.executeCharTest("𝑖", ["cursiva i", "cursiva i", "cursiva i"]);
  this.executeCharTest("𝑗", ["cursiva j", "cursiva j", "cursiva j"]);
  this.executeCharTest("𝑘", ["cursiva k", "cursiva k", "cursiva k"]);
  this.executeCharTest("𝑙", ["cursiva l", "cursiva l", "cursiva l"]);
  this.executeCharTest("𝑚", ["cursiva m", "cursiva m", "cursiva m"]);
  this.executeCharTest("𝑛", ["cursiva n", "cursiva n", "cursiva n"]);
  this.executeCharTest("𝑜", ["cursiva o", "cursiva o", "cursiva o"]);
  this.executeCharTest("𝑝", ["cursiva p", "cursiva p", "cursiva p"]);
  this.executeCharTest("𝑞", ["cursiva q", "cursiva q", "cursiva q"]);
  this.executeCharTest("𝑟", ["cursiva r", "cursiva r", "cursiva r"]);
  this.executeCharTest("𝑠", ["cursiva s", "cursiva s", "cursiva s"]);
  this.executeCharTest("𝑡", ["cursiva t", "cursiva t", "cursiva t"]);
  this.executeCharTest("𝑢", ["cursiva u", "cursiva u", "cursiva u"]);
  this.executeCharTest("𝑣", ["cursiva v", "cursiva v", "cursiva v"]);
  this.executeCharTest("𝑤", ["cursiva w", "cursiva w", "cursiva w"]);
  this.executeCharTest("𝑥", ["cursiva x", "cursiva x", "cursiva x"]);
  this.executeCharTest("𝑦", ["cursiva y", "cursiva y", "cursiva y"]);
  this.executeCharTest("𝑧", ["cursiva z", "cursiva z", "cursiva z"]);
  this.executeCharTest("𝙰", ["monoespacio mayúscula A", "monoespacio mayúscula A", "monoespacio mayúscula A"]);
  this.executeCharTest("𝙱", ["monoespacio mayúscula B", "monoespacio mayúscula B", "monoespacio mayúscula B"]);
  this.executeCharTest("𝙲", ["monoespacio mayúscula C", "monoespacio mayúscula C", "monoespacio mayúscula C"]);
  this.executeCharTest("𝙳", ["monoespacio mayúscula D", "monoespacio mayúscula D", "monoespacio mayúscula D"]);
  this.executeCharTest("𝙴", ["monoespacio mayúscula E", "monoespacio mayúscula E", "monoespacio mayúscula E"]);
  this.executeCharTest("𝙵", ["monoespacio mayúscula F", "monoespacio mayúscula F", "monoespacio mayúscula F"]);
  this.executeCharTest("𝙶", ["monoespacio mayúscula G", "monoespacio mayúscula G", "monoespacio mayúscula G"]);
  this.executeCharTest("𝙷", ["monoespacio mayúscula H", "monoespacio mayúscula H", "monoespacio mayúscula H"]);
  this.executeCharTest("𝙸", ["monoespacio mayúscula I", "monoespacio mayúscula I", "monoespacio mayúscula I"]);
  this.executeCharTest("𝙹", ["monoespacio mayúscula J", "monoespacio mayúscula J", "monoespacio mayúscula J"]);
  this.executeCharTest("𝙺", ["monoespacio mayúscula K", "monoespacio mayúscula K", "monoespacio mayúscula K"]);
  this.executeCharTest("𝙻", ["monoespacio mayúscula L", "monoespacio mayúscula L", "monoespacio mayúscula L"]);
  this.executeCharTest("𝙼", ["monoespacio mayúscula M", "monoespacio mayúscula M", "monoespacio mayúscula M"]);
  this.executeCharTest("𝙽", ["monoespacio mayúscula N", "monoespacio mayúscula N", "monoespacio mayúscula N"]);
  this.executeCharTest("𝙾", ["monoespacio mayúscula O", "monoespacio mayúscula O", "monoespacio mayúscula O"]);
  this.executeCharTest("𝙿", ["monoespacio mayúscula P", "monoespacio mayúscula P", "monoespacio mayúscula P"]);
  this.executeCharTest("𝚀", ["monoespacio mayúscula Q", "monoespacio mayúscula Q", "monoespacio mayúscula Q"]);
  this.executeCharTest("𝚁", ["monoespacio mayúscula R", "monoespacio mayúscula R", "monoespacio mayúscula R"]);
  this.executeCharTest("𝚂", ["monoespacio mayúscula S", "monoespacio mayúscula S", "monoespacio mayúscula S"]);
  this.executeCharTest("𝚃", ["monoespacio mayúscula T", "monoespacio mayúscula T", "monoespacio mayúscula T"]);
  this.executeCharTest("𝚄", ["monoespacio mayúscula U", "monoespacio mayúscula U", "monoespacio mayúscula U"]);
  this.executeCharTest("𝚅", ["monoespacio mayúscula V", "monoespacio mayúscula V", "monoespacio mayúscula V"]);
  this.executeCharTest("𝚆", ["monoespacio mayúscula W", "monoespacio mayúscula W", "monoespacio mayúscula W"]);
  this.executeCharTest("𝚇", ["monoespacio mayúscula X", "monoespacio mayúscula X", "monoespacio mayúscula X"]);
  this.executeCharTest("𝚈", ["monoespacio mayúscula Y", "monoespacio mayúscula Y", "monoespacio mayúscula Y"]);
  this.executeCharTest("𝚉", ["monoespacio mayúscula Z", "monoespacio mayúscula Z", "monoespacio mayúscula Z"]);
  this.executeCharTest("𝚊", ["monoespacio a", "monoespacio a", "monoespacio a"]);
  this.executeCharTest("𝚋", ["monoespacio b", "monoespacio b", "monoespacio b"]);
  this.executeCharTest("𝚌", ["monoespacio c", "monoespacio c", "monoespacio c"]);
  this.executeCharTest("𝚍", ["monoespacio d", "monoespacio d", "monoespacio d"]);
  this.executeCharTest("𝚎", ["monoespacio e", "monoespacio e", "monoespacio e"]);
  this.executeCharTest("𝚏", ["monoespacio f", "monoespacio f", "monoespacio f"]);
  this.executeCharTest("𝚐", ["monoespacio g", "monoespacio g", "monoespacio g"]);
  this.executeCharTest("𝚑", ["monoespacio h", "monoespacio h", "monoespacio h"]);
  this.executeCharTest("𝚒", ["monoespacio i", "monoespacio i", "monoespacio i"]);
  this.executeCharTest("𝚓", ["monoespacio j", "monoespacio j", "monoespacio j"]);
  this.executeCharTest("𝚔", ["monoespacio k", "monoespacio k", "monoespacio k"]);
  this.executeCharTest("𝚕", ["monoespacio l", "monoespacio l", "monoespacio l"]);
  this.executeCharTest("𝚖", ["monoespacio m", "monoespacio m", "monoespacio m"]);
  this.executeCharTest("𝚗", ["monoespacio n", "monoespacio n", "monoespacio n"]);
  this.executeCharTest("𝚘", ["monoespacio o", "monoespacio o", "monoespacio o"]);
  this.executeCharTest("𝚙", ["monoespacio p", "monoespacio p", "monoespacio p"]);
  this.executeCharTest("𝚚", ["monoespacio q", "monoespacio q", "monoespacio q"]);
  this.executeCharTest("𝚛", ["monoespacio r", "monoespacio r", "monoespacio r"]);
  this.executeCharTest("𝚜", ["monoespacio s", "monoespacio s", "monoespacio s"]);
  this.executeCharTest("𝚝", ["monoespacio t", "monoespacio t", "monoespacio t"]);
  this.executeCharTest("𝚞", ["monoespacio u", "monoespacio u", "monoespacio u"]);
  this.executeCharTest("𝚟", ["monoespacio v", "monoespacio v", "monoespacio v"]);
  this.executeCharTest("𝚠", ["monoespacio w", "monoespacio w", "monoespacio w"]);
  this.executeCharTest("𝚡", ["monoespacio x", "monoespacio x", "monoespacio x"]);
  this.executeCharTest("𝚢", ["monoespacio y", "monoespacio y", "monoespacio y"]);
  this.executeCharTest("𝚣", ["monoespacio z", "monoespacio z", "monoespacio z"]);
  this.executeCharTest("A", ["mayúscula A", "mayúscula A", "mayúscula A"]);
  this.executeCharTest("B", ["mayúscula B", "mayúscula B", "mayúscula B"]);
  this.executeCharTest("C", ["mayúscula C", "mayúscula C", "mayúscula C"]);
  this.executeCharTest("D", ["mayúscula D", "mayúscula D", "mayúscula D"]);
  this.executeCharTest("E", ["mayúscula E", "mayúscula E", "mayúscula E"]);
  this.executeCharTest("F", ["mayúscula F", "mayúscula F", "mayúscula F"]);
  this.executeCharTest("G", ["mayúscula G", "mayúscula G", "mayúscula G"]);
  this.executeCharTest("H", ["mayúscula H", "mayúscula H", "mayúscula H"]);
  this.executeCharTest("I", ["mayúscula I", "mayúscula I", "mayúscula I"]);
  this.executeCharTest("J", ["mayúscula J", "mayúscula J", "mayúscula J"]);
  this.executeCharTest("K", ["mayúscula K", "mayúscula K", "mayúscula K"]);
  this.executeCharTest("L", ["mayúscula L", "mayúscula L", "mayúscula L"]);
  this.executeCharTest("M", ["mayúscula M", "mayúscula M", "mayúscula M"]);
  this.executeCharTest("N", ["mayúscula N", "mayúscula N", "mayúscula N"]);
  this.executeCharTest("O", ["mayúscula O", "mayúscula O", "mayúscula O"]);
  this.executeCharTest("P", ["mayúscula P", "mayúscula P", "mayúscula P"]);
  this.executeCharTest("Q", ["mayúscula Q", "mayúscula Q", "mayúscula Q"]);
  this.executeCharTest("R", ["mayúscula R", "mayúscula R", "mayúscula R"]);
  this.executeCharTest("S", ["mayúscula S", "mayúscula S", "mayúscula S"]);
  this.executeCharTest("T", ["mayúscula T", "mayúscula T", "mayúscula T"]);
  this.executeCharTest("U", ["mayúscula U", "mayúscula U", "mayúscula U"]);
  this.executeCharTest("V", ["mayúscula V", "mayúscula V", "mayúscula V"]);
  this.executeCharTest("W", ["mayúscula W", "mayúscula W", "mayúscula W"]);
  this.executeCharTest("X", ["mayúscula X", "mayúscula X", "mayúscula X"]);
  this.executeCharTest("Y", ["mayúscula Y", "mayúscula Y", "mayúscula Y"]);
  this.executeCharTest("Z", ["mayúscula Z", "mayúscula Z", "mayúscula Z"]);
  this.executeCharTest("a", ["a", "a", "a"]);
  this.executeCharTest("b", ["b", "b", "b"]);
  this.executeCharTest("c", ["c", "c", "c"]);
  this.executeCharTest("d", ["d", "d", "d"]);
  this.executeCharTest("e", ["e", "e", "e"]);
  this.executeCharTest("f", ["f", "f", "f"]);
  this.executeCharTest("g", ["g", "g", "g"]);
  this.executeCharTest("h", ["h", "h", "h"]);
  this.executeCharTest("i", ["i", "i", "i"]);
  this.executeCharTest("j", ["j", "j", "j"]);
  this.executeCharTest("k", ["k", "k", "k"]);
  this.executeCharTest("l", ["l", "l", "l"]);
  this.executeCharTest("m", ["m", "m", "m"]);
  this.executeCharTest("n", ["n", "n", "n"]);
  this.executeCharTest("o", ["o", "o", "o"]);
  this.executeCharTest("p", ["p", "p", "p"]);
  this.executeCharTest("q", ["q", "q", "q"]);
  this.executeCharTest("r", ["r", "r", "r"]);
  this.executeCharTest("s", ["s", "s", "s"]);
  this.executeCharTest("t", ["t", "t", "t"]);
  this.executeCharTest("u", ["u", "u", "u"]);
  this.executeCharTest("v", ["v", "v", "v"]);
  this.executeCharTest("w", ["w", "w", "w"]);
  this.executeCharTest("x", ["x", "x", "x"]);
  this.executeCharTest("y", ["y", "y", "y"]);
  this.executeCharTest("z", ["z", "z", "z"]);
  this.executeCharTest("𝒜", ["script mayúscula A", "script mayúscula A", "script mayúscula A"]);
  this.executeCharTest("ℬ", ["script mayúscula B", "script mayúscula B", "script mayúscula B"]);
  this.executeCharTest("𝒞", ["script mayúscula C", "script mayúscula C", "script mayúscula C"]);
  this.executeCharTest("𝒟", ["script mayúscula D", "script mayúscula D", "script mayúscula D"]);
  this.executeCharTest("ℰ", ["script mayúscula E", "script mayúscula E", "script mayúscula E"]);
  this.executeCharTest("ℱ", ["script mayúscula F", "script mayúscula F", "script mayúscula F"]);
  this.executeCharTest("𝒢", ["script mayúscula G", "script mayúscula G", "script mayúscula G"]);
  this.executeCharTest("ℋ", ["script mayúscula H", "script mayúscula H", "script mayúscula H"]);
  this.executeCharTest("ℐ", ["script mayúscula I", "script mayúscula I", "script mayúscula I"]);
  this.executeCharTest("𝒥", ["script mayúscula J", "script mayúscula J", "script mayúscula J"]);
  this.executeCharTest("𝒦", ["script mayúscula K", "script mayúscula K", "script mayúscula K"]);
  this.executeCharTest("ℒ", ["script mayúscula L", "script mayúscula L", "script mayúscula L"]);
  this.executeCharTest("ℳ", ["script mayúscula M", "script mayúscula M", "script mayúscula M"]);
  this.executeCharTest("𝒩", ["script mayúscula N", "script mayúscula N", "script mayúscula N"]);
  this.executeCharTest("𝒪", ["script mayúscula O", "script mayúscula O", "script mayúscula O"]);
  this.executeCharTest("𝒫", ["script mayúscula P", "script mayúscula P", "script mayúscula P"]);
  this.executeCharTest("𝒬", ["script mayúscula Q", "script mayúscula Q", "script mayúscula Q"]);
  this.executeCharTest("ℛ", ["script mayúscula R", "script mayúscula R", "script mayúscula R"]);
  this.executeCharTest("𝒮", ["script mayúscula S", "script mayúscula S", "script mayúscula S"]);
  this.executeCharTest("𝒯", ["script mayúscula T", "script mayúscula T", "script mayúscula T"]);
  this.executeCharTest("𝒰", ["script mayúscula U", "script mayúscula U", "script mayúscula U"]);
  this.executeCharTest("𝒱", ["script mayúscula V", "script mayúscula V", "script mayúscula V"]);
  this.executeCharTest("𝒲", ["script mayúscula W", "script mayúscula W", "script mayúscula W"]);
  this.executeCharTest("𝒳", ["script mayúscula X", "script mayúscula X", "script mayúscula X"]);
  this.executeCharTest("𝒴", ["script mayúscula Y", "script mayúscula Y", "script mayúscula Y"]);
  this.executeCharTest("𝒵", ["script mayúscula Z", "script mayúscula Z", "script mayúscula Z"]);
  this.executeCharTest("𝒶", ["script a", "script a", "script a"]);
  this.executeCharTest("𝒷", ["script b", "script b", "script b"]);
  this.executeCharTest("𝒸", ["script c", "script c", "script c"]);
  this.executeCharTest("𝒹", ["script d", "script d", "script d"]);
  this.executeCharTest("ℯ", ["script e", "script e", "script e"]);
  this.executeCharTest("𝒻", ["script f", "script f", "script f"]);
  this.executeCharTest("ℊ", ["script g", "script g", "script g"]);
  this.executeCharTest("𝒽", ["script h", "script h", "script h"]);
  this.executeCharTest("𝒾", ["script i", "script i", "script i"]);
  this.executeCharTest("𝒿", ["script j", "script j", "script j"]);
  this.executeCharTest("𝓀", ["script k", "script k", "script k"]);
  this.executeCharTest("𝓁", ["script l", "script l", "script l"]);
  this.executeCharTest("𝓂", ["script m", "script m", "script m"]);
  this.executeCharTest("𝓃", ["script n", "script n", "script n"]);
  this.executeCharTest("ℴ", ["script o", "script o", "script o"]);
  this.executeCharTest("𝓅", ["script p", "script p", "script p"]);
  this.executeCharTest("𝓆", ["script q", "script q", "script q"]);
  this.executeCharTest("𝓇", ["script r", "script r", "script r"]);
  this.executeCharTest("𝓈", ["script s", "script s", "script s"]);
  this.executeCharTest("𝓉", ["script t", "script t", "script t"]);
  this.executeCharTest("𝓊", ["script u", "script u", "script u"]);
  this.executeCharTest("𝓋", ["script v", "script v", "script v"]);
  this.executeCharTest("𝓌", ["script w", "script w", "script w"]);
  this.executeCharTest("𝓍", ["script x", "script x", "script x"]);
  this.executeCharTest("𝓎", ["script y", "script y", "script y"]);
  this.executeCharTest("𝓏", ["script z", "script z", "script z"]);
  this.executeCharTest("𝖠", ["sans serif mayúscula A", "sans serif mayúscula A", "sans serif mayúscula A"]);
  this.executeCharTest("𝖡", ["sans serif mayúscula B", "sans serif mayúscula B", "sans serif mayúscula B"]);
  this.executeCharTest("𝖢", ["sans serif mayúscula C", "sans serif mayúscula C", "sans serif mayúscula C"]);
  this.executeCharTest("𝖣", ["sans serif mayúscula D", "sans serif mayúscula D", "sans serif mayúscula D"]);
  this.executeCharTest("𝖤", ["sans serif mayúscula E", "sans serif mayúscula E", "sans serif mayúscula E"]);
  this.executeCharTest("𝖥", ["sans serif mayúscula F", "sans serif mayúscula F", "sans serif mayúscula F"]);
  this.executeCharTest("𝖦", ["sans serif mayúscula G", "sans serif mayúscula G", "sans serif mayúscula G"]);
  this.executeCharTest("𝖧", ["sans serif mayúscula H", "sans serif mayúscula H", "sans serif mayúscula H"]);
  this.executeCharTest("𝖨", ["sans serif mayúscula I", "sans serif mayúscula I", "sans serif mayúscula I"]);
  this.executeCharTest("𝖩", ["sans serif mayúscula J", "sans serif mayúscula J", "sans serif mayúscula J"]);
  this.executeCharTest("𝖪", ["sans serif mayúscula K", "sans serif mayúscula K", "sans serif mayúscula K"]);
  this.executeCharTest("𝖫", ["sans serif mayúscula L", "sans serif mayúscula L", "sans serif mayúscula L"]);
  this.executeCharTest("𝖬", ["sans serif mayúscula M", "sans serif mayúscula M", "sans serif mayúscula M"]);
  this.executeCharTest("𝖭", ["sans serif mayúscula N", "sans serif mayúscula N", "sans serif mayúscula N"]);
  this.executeCharTest("𝖮", ["sans serif mayúscula O", "sans serif mayúscula O", "sans serif mayúscula O"]);
  this.executeCharTest("𝖯", ["sans serif mayúscula P", "sans serif mayúscula P", "sans serif mayúscula P"]);
  this.executeCharTest("𝖰", ["sans serif mayúscula Q", "sans serif mayúscula Q", "sans serif mayúscula Q"]);
  this.executeCharTest("𝖱", ["sans serif mayúscula R", "sans serif mayúscula R", "sans serif mayúscula R"]);
  this.executeCharTest("𝖲", ["sans serif mayúscula S", "sans serif mayúscula S", "sans serif mayúscula S"]);
  this.executeCharTest("𝖳", ["sans serif mayúscula T", "sans serif mayúscula T", "sans serif mayúscula T"]);
  this.executeCharTest("𝖴", ["sans serif mayúscula U", "sans serif mayúscula U", "sans serif mayúscula U"]);
  this.executeCharTest("𝖵", ["sans serif mayúscula V", "sans serif mayúscula V", "sans serif mayúscula V"]);
  this.executeCharTest("𝖶", ["sans serif mayúscula W", "sans serif mayúscula W", "sans serif mayúscula W"]);
  this.executeCharTest("𝖷", ["sans serif mayúscula X", "sans serif mayúscula X", "sans serif mayúscula X"]);
  this.executeCharTest("𝖸", ["sans serif mayúscula Y", "sans serif mayúscula Y", "sans serif mayúscula Y"]);
  this.executeCharTest("𝖹", ["sans serif mayúscula Z", "sans serif mayúscula Z", "sans serif mayúscula Z"]);
  this.executeCharTest("𝖺", ["sans serif a", "sans serif a", "sans serif a"]);
  this.executeCharTest("𝖻", ["sans serif b", "sans serif b", "sans serif b"]);
  this.executeCharTest("𝖼", ["sans serif c", "sans serif c", "sans serif c"]);
  this.executeCharTest("𝖽", ["sans serif d", "sans serif d", "sans serif d"]);
  this.executeCharTest("𝖾", ["sans serif e", "sans serif e", "sans serif e"]);
  this.executeCharTest("𝖿", ["sans serif f", "sans serif f", "sans serif f"]);
  this.executeCharTest("𝗀", ["sans serif g", "sans serif g", "sans serif g"]);
  this.executeCharTest("𝗁", ["sans serif h", "sans serif h", "sans serif h"]);
  this.executeCharTest("𝗂", ["sans serif i", "sans serif i", "sans serif i"]);
  this.executeCharTest("𝗃", ["sans serif j", "sans serif j", "sans serif j"]);
  this.executeCharTest("𝗄", ["sans serif k", "sans serif k", "sans serif k"]);
  this.executeCharTest("𝗅", ["sans serif l", "sans serif l", "sans serif l"]);
  this.executeCharTest("𝗆", ["sans serif m", "sans serif m", "sans serif m"]);
  this.executeCharTest("𝗇", ["sans serif n", "sans serif n", "sans serif n"]);
  this.executeCharTest("𝗈", ["sans serif o", "sans serif o", "sans serif o"]);
  this.executeCharTest("𝗉", ["sans serif p", "sans serif p", "sans serif p"]);
  this.executeCharTest("𝗊", ["sans serif q", "sans serif q", "sans serif q"]);
  this.executeCharTest("𝗋", ["sans serif r", "sans serif r", "sans serif r"]);
  this.executeCharTest("𝗌", ["sans serif s", "sans serif s", "sans serif s"]);
  this.executeCharTest("𝗍", ["sans serif t", "sans serif t", "sans serif t"]);
  this.executeCharTest("𝗎", ["sans serif u", "sans serif u", "sans serif u"]);
  this.executeCharTest("𝗏", ["sans serif v", "sans serif v", "sans serif v"]);
  this.executeCharTest("𝗐", ["sans serif w", "sans serif w", "sans serif w"]);
  this.executeCharTest("𝗑", ["sans serif x", "sans serif x", "sans serif x"]);
  this.executeCharTest("𝗒", ["sans serif y", "sans serif y", "sans serif y"]);
  this.executeCharTest("𝗓", ["sans serif z", "sans serif z", "sans serif z"]);
  this.executeCharTest("𝘈", ["sans serif cursiva mayúscula A", "sans serif cursiva mayúscula A", "sans serif cursiva mayúscula A"]);
  this.executeCharTest("𝘉", ["sans serif cursiva mayúscula B", "sans serif cursiva mayúscula B", "sans serif cursiva mayúscula B"]);
  this.executeCharTest("𝘊", ["sans serif cursiva mayúscula C", "sans serif cursiva mayúscula C", "sans serif cursiva mayúscula C"]);
  this.executeCharTest("𝘋", ["sans serif cursiva mayúscula D", "sans serif cursiva mayúscula D", "sans serif cursiva mayúscula D"]);
  this.executeCharTest("𝘌", ["sans serif cursiva mayúscula E", "sans serif cursiva mayúscula E", "sans serif cursiva mayúscula E"]);
  this.executeCharTest("𝘍", ["sans serif cursiva mayúscula F", "sans serif cursiva mayúscula F", "sans serif cursiva mayúscula F"]);
  this.executeCharTest("𝘎", ["sans serif cursiva mayúscula G", "sans serif cursiva mayúscula G", "sans serif cursiva mayúscula G"]);
  this.executeCharTest("𝘏", ["sans serif cursiva mayúscula H", "sans serif cursiva mayúscula H", "sans serif cursiva mayúscula H"]);
  this.executeCharTest("𝘐", ["sans serif cursiva mayúscula I", "sans serif cursiva mayúscula I", "sans serif cursiva mayúscula I"]);
  this.executeCharTest("𝘑", ["sans serif cursiva mayúscula J", "sans serif cursiva mayúscula J", "sans serif cursiva mayúscula J"]);
  this.executeCharTest("𝘒", ["sans serif cursiva mayúscula K", "sans serif cursiva mayúscula K", "sans serif cursiva mayúscula K"]);
  this.executeCharTest("𝘓", ["sans serif cursiva mayúscula L", "sans serif cursiva mayúscula L", "sans serif cursiva mayúscula L"]);
  this.executeCharTest("𝘔", ["sans serif cursiva mayúscula M", "sans serif cursiva mayúscula M", "sans serif cursiva mayúscula M"]);
  this.executeCharTest("𝘕", ["sans serif cursiva mayúscula N", "sans serif cursiva mayúscula N", "sans serif cursiva mayúscula N"]);
  this.executeCharTest("𝘖", ["sans serif cursiva mayúscula O", "sans serif cursiva mayúscula O", "sans serif cursiva mayúscula O"]);
  this.executeCharTest("𝘗", ["sans serif cursiva mayúscula P", "sans serif cursiva mayúscula P", "sans serif cursiva mayúscula P"]);
  this.executeCharTest("𝘘", ["sans serif cursiva mayúscula Q", "sans serif cursiva mayúscula Q", "sans serif cursiva mayúscula Q"]);
  this.executeCharTest("𝘙", ["sans serif cursiva mayúscula R", "sans serif cursiva mayúscula R", "sans serif cursiva mayúscula R"]);
  this.executeCharTest("𝘚", ["sans serif cursiva mayúscula S", "sans serif cursiva mayúscula S", "sans serif cursiva mayúscula S"]);
  this.executeCharTest("𝘛", ["sans serif cursiva mayúscula T", "sans serif cursiva mayúscula T", "sans serif cursiva mayúscula T"]);
  this.executeCharTest("𝘜", ["sans serif cursiva mayúscula U", "sans serif cursiva mayúscula U", "sans serif cursiva mayúscula U"]);
  this.executeCharTest("𝘝", ["sans serif cursiva mayúscula V", "sans serif cursiva mayúscula V", "sans serif cursiva mayúscula V"]);
  this.executeCharTest("𝘞", ["sans serif cursiva mayúscula W", "sans serif cursiva mayúscula W", "sans serif cursiva mayúscula W"]);
  this.executeCharTest("𝘟", ["sans serif cursiva mayúscula X", "sans serif cursiva mayúscula X", "sans serif cursiva mayúscula X"]);
  this.executeCharTest("𝘠", ["sans serif cursiva mayúscula Y", "sans serif cursiva mayúscula Y", "sans serif cursiva mayúscula Y"]);
  this.executeCharTest("𝘡", ["sans serif cursiva mayúscula Z", "sans serif cursiva mayúscula Z", "sans serif cursiva mayúscula Z"]);
  this.executeCharTest("𝘢", ["sans serif cursiva a", "sans serif cursiva a", "sans serif cursiva a"]);
  this.executeCharTest("𝘣", ["sans serif cursiva b", "sans serif cursiva b", "sans serif cursiva b"]);
  this.executeCharTest("𝘤", ["sans serif cursiva c", "sans serif cursiva c", "sans serif cursiva c"]);
  this.executeCharTest("𝘥", ["sans serif cursiva d", "sans serif cursiva d", "sans serif cursiva d"]);
  this.executeCharTest("𝘦", ["sans serif cursiva e", "sans serif cursiva e", "sans serif cursiva e"]);
  this.executeCharTest("𝘧", ["sans serif cursiva f", "sans serif cursiva f", "sans serif cursiva f"]);
  this.executeCharTest("𝘨", ["sans serif cursiva g", "sans serif cursiva g", "sans serif cursiva g"]);
  this.executeCharTest("𝘩", ["sans serif cursiva h", "sans serif cursiva h", "sans serif cursiva h"]);
  this.executeCharTest("𝘪", ["sans serif cursiva i", "sans serif cursiva i", "sans serif cursiva i"]);
  this.executeCharTest("𝘫", ["sans serif cursiva j", "sans serif cursiva j", "sans serif cursiva j"]);
  this.executeCharTest("𝘬", ["sans serif cursiva k", "sans serif cursiva k", "sans serif cursiva k"]);
  this.executeCharTest("𝘭", ["sans serif cursiva l", "sans serif cursiva l", "sans serif cursiva l"]);
  this.executeCharTest("𝘮", ["sans serif cursiva m", "sans serif cursiva m", "sans serif cursiva m"]);
  this.executeCharTest("𝘯", ["sans serif cursiva n", "sans serif cursiva n", "sans serif cursiva n"]);
  this.executeCharTest("𝘰", ["sans serif cursiva o", "sans serif cursiva o", "sans serif cursiva o"]);
  this.executeCharTest("𝘱", ["sans serif cursiva p", "sans serif cursiva p", "sans serif cursiva p"]);
  this.executeCharTest("𝘲", ["sans serif cursiva q", "sans serif cursiva q", "sans serif cursiva q"]);
  this.executeCharTest("𝘳", ["sans serif cursiva r", "sans serif cursiva r", "sans serif cursiva r"]);
  this.executeCharTest("𝘴", ["sans serif cursiva s", "sans serif cursiva s", "sans serif cursiva s"]);
  this.executeCharTest("𝘵", ["sans serif cursiva t", "sans serif cursiva t", "sans serif cursiva t"]);
  this.executeCharTest("𝘶", ["sans serif cursiva u", "sans serif cursiva u", "sans serif cursiva u"]);
  this.executeCharTest("𝘷", ["sans serif cursiva v", "sans serif cursiva v", "sans serif cursiva v"]);
  this.executeCharTest("𝘸", ["sans serif cursiva w", "sans serif cursiva w", "sans serif cursiva w"]);
  this.executeCharTest("𝘹", ["sans serif cursiva x", "sans serif cursiva x", "sans serif cursiva x"]);
  this.executeCharTest("𝘺", ["sans serif cursiva y", "sans serif cursiva y", "sans serif cursiva y"]);
  this.executeCharTest("𝘻", ["sans serif cursiva z", "sans serif cursiva z", "sans serif cursiva z"]);
  this.executeCharTest("𝗔", ["sans serif negrita mayúscula A", "sans serif negrita mayúscula A", "sans serif negrita mayúscula A"]);
  this.executeCharTest("𝗕", ["sans serif negrita mayúscula B", "sans serif negrita mayúscula B", "sans serif negrita mayúscula B"]);
  this.executeCharTest("𝗖", ["sans serif negrita mayúscula C", "sans serif negrita mayúscula C", "sans serif negrita mayúscula C"]);
  this.executeCharTest("𝗗", ["sans serif negrita mayúscula D", "sans serif negrita mayúscula D", "sans serif negrita mayúscula D"]);
  this.executeCharTest("𝗘", ["sans serif negrita mayúscula E", "sans serif negrita mayúscula E", "sans serif negrita mayúscula E"]);
  this.executeCharTest("𝗙", ["sans serif negrita mayúscula F", "sans serif negrita mayúscula F", "sans serif negrita mayúscula F"]);
  this.executeCharTest("𝗚", ["sans serif negrita mayúscula G", "sans serif negrita mayúscula G", "sans serif negrita mayúscula G"]);
  this.executeCharTest("𝗛", ["sans serif negrita mayúscula H", "sans serif negrita mayúscula H", "sans serif negrita mayúscula H"]);
  this.executeCharTest("𝗜", ["sans serif negrita mayúscula I", "sans serif negrita mayúscula I", "sans serif negrita mayúscula I"]);
  this.executeCharTest("𝗝", ["sans serif negrita mayúscula J", "sans serif negrita mayúscula J", "sans serif negrita mayúscula J"]);
  this.executeCharTest("𝗞", ["sans serif negrita mayúscula K", "sans serif negrita mayúscula K", "sans serif negrita mayúscula K"]);
  this.executeCharTest("𝗟", ["sans serif negrita mayúscula L", "sans serif negrita mayúscula L", "sans serif negrita mayúscula L"]);
  this.executeCharTest("𝗠", ["sans serif negrita mayúscula M", "sans serif negrita mayúscula M", "sans serif negrita mayúscula M"]);
  this.executeCharTest("𝗡", ["sans serif negrita mayúscula N", "sans serif negrita mayúscula N", "sans serif negrita mayúscula N"]);
  this.executeCharTest("𝗢", ["sans serif negrita mayúscula O", "sans serif negrita mayúscula O", "sans serif negrita mayúscula O"]);
  this.executeCharTest("𝗣", ["sans serif negrita mayúscula P", "sans serif negrita mayúscula P", "sans serif negrita mayúscula P"]);
  this.executeCharTest("𝗤", ["sans serif negrita mayúscula Q", "sans serif negrita mayúscula Q", "sans serif negrita mayúscula Q"]);
  this.executeCharTest("𝗥", ["sans serif negrita mayúscula R", "sans serif negrita mayúscula R", "sans serif negrita mayúscula R"]);
  this.executeCharTest("𝗦", ["sans serif negrita mayúscula S", "sans serif negrita mayúscula S", "sans serif negrita mayúscula S"]);
  this.executeCharTest("𝗧", ["sans serif negrita mayúscula T", "sans serif negrita mayúscula T", "sans serif negrita mayúscula T"]);
  this.executeCharTest("𝗨", ["sans serif negrita mayúscula U", "sans serif negrita mayúscula U", "sans serif negrita mayúscula U"]);
  this.executeCharTest("𝗩", ["sans serif negrita mayúscula V", "sans serif negrita mayúscula V", "sans serif negrita mayúscula V"]);
  this.executeCharTest("𝗪", ["sans serif negrita mayúscula W", "sans serif negrita mayúscula W", "sans serif negrita mayúscula W"]);
  this.executeCharTest("𝗫", ["sans serif negrita mayúscula X", "sans serif negrita mayúscula X", "sans serif negrita mayúscula X"]);
  this.executeCharTest("𝗬", ["sans serif negrita mayúscula Y", "sans serif negrita mayúscula Y", "sans serif negrita mayúscula Y"]);
  this.executeCharTest("𝗭", ["sans serif negrita mayúscula Z", "sans serif negrita mayúscula Z", "sans serif negrita mayúscula Z"]);
  this.executeCharTest("𝗮", ["sans serif negrita a", "sans serif negrita a", "sans serif negrita a"]);
  this.executeCharTest("𝗯", ["sans serif negrita b", "sans serif negrita b", "sans serif negrita b"]);
  this.executeCharTest("𝗰", ["sans serif negrita c", "sans serif negrita c", "sans serif negrita c"]);
  this.executeCharTest("𝗱", ["sans serif negrita d", "sans serif negrita d", "sans serif negrita d"]);
  this.executeCharTest("𝗲", ["sans serif negrita e", "sans serif negrita e", "sans serif negrita e"]);
  this.executeCharTest("𝗳", ["sans serif negrita f", "sans serif negrita f", "sans serif negrita f"]);
  this.executeCharTest("𝗴", ["sans serif negrita g", "sans serif negrita g", "sans serif negrita g"]);
  this.executeCharTest("𝗵", ["sans serif negrita h", "sans serif negrita h", "sans serif negrita h"]);
  this.executeCharTest("𝗶", ["sans serif negrita i", "sans serif negrita i", "sans serif negrita i"]);
  this.executeCharTest("𝗷", ["sans serif negrita j", "sans serif negrita j", "sans serif negrita j"]);
  this.executeCharTest("𝗸", ["sans serif negrita k", "sans serif negrita k", "sans serif negrita k"]);
  this.executeCharTest("𝗹", ["sans serif negrita l", "sans serif negrita l", "sans serif negrita l"]);
  this.executeCharTest("𝗺", ["sans serif negrita m", "sans serif negrita m", "sans serif negrita m"]);
  this.executeCharTest("𝗻", ["sans serif negrita n", "sans serif negrita n", "sans serif negrita n"]);
  this.executeCharTest("𝗼", ["sans serif negrita o", "sans serif negrita o", "sans serif negrita o"]);
  this.executeCharTest("𝗽", ["sans serif negrita p", "sans serif negrita p", "sans serif negrita p"]);
  this.executeCharTest("𝗾", ["sans serif negrita q", "sans serif negrita q", "sans serif negrita q"]);
  this.executeCharTest("𝗿", ["sans serif negrita r", "sans serif negrita r", "sans serif negrita r"]);
  this.executeCharTest("𝘀", ["sans serif negrita s", "sans serif negrita s", "sans serif negrita s"]);
  this.executeCharTest("𝘁", ["sans serif negrita t", "sans serif negrita t", "sans serif negrita t"]);
  this.executeCharTest("𝘂", ["sans serif negrita u", "sans serif negrita u", "sans serif negrita u"]);
  this.executeCharTest("𝘃", ["sans serif negrita v", "sans serif negrita v", "sans serif negrita v"]);
  this.executeCharTest("𝘄", ["sans serif negrita w", "sans serif negrita w", "sans serif negrita w"]);
  this.executeCharTest("𝘅", ["sans serif negrita x", "sans serif negrita x", "sans serif negrita x"]);
  this.executeCharTest("𝘆", ["sans serif negrita y", "sans serif negrita y", "sans serif negrita y"]);
  this.executeCharTest("𝘇", ["sans serif negrita z", "sans serif negrita z", "sans serif negrita z"]);
  this.executeCharTest("𝘼", ["sans serif negrita cursiva mayúscula A", "sans serif negrita cursiva mayúscula A", "sans serif negrita cursiva mayúscula A"]);
  this.executeCharTest("𝘽", ["sans serif negrita cursiva mayúscula B", "sans serif negrita cursiva mayúscula B", "sans serif negrita cursiva mayúscula B"]);
  this.executeCharTest("𝘾", ["sans serif negrita cursiva mayúscula C", "sans serif negrita cursiva mayúscula C", "sans serif negrita cursiva mayúscula C"]);
  this.executeCharTest("𝘿", ["sans serif negrita cursiva mayúscula D", "sans serif negrita cursiva mayúscula D", "sans serif negrita cursiva mayúscula D"]);
  this.executeCharTest("𝙀", ["sans serif negrita cursiva mayúscula E", "sans serif negrita cursiva mayúscula E", "sans serif negrita cursiva mayúscula E"]);
  this.executeCharTest("𝙁", ["sans serif negrita cursiva mayúscula F", "sans serif negrita cursiva mayúscula F", "sans serif negrita cursiva mayúscula F"]);
  this.executeCharTest("𝙂", ["sans serif negrita cursiva mayúscula G", "sans serif negrita cursiva mayúscula G", "sans serif negrita cursiva mayúscula G"]);
  this.executeCharTest("𝙃", ["sans serif negrita cursiva mayúscula H", "sans serif negrita cursiva mayúscula H", "sans serif negrita cursiva mayúscula H"]);
  this.executeCharTest("𝙄", ["sans serif negrita cursiva mayúscula I", "sans serif negrita cursiva mayúscula I", "sans serif negrita cursiva mayúscula I"]);
  this.executeCharTest("𝙅", ["sans serif negrita cursiva mayúscula J", "sans serif negrita cursiva mayúscula J", "sans serif negrita cursiva mayúscula J"]);
  this.executeCharTest("𝙆", ["sans serif negrita cursiva mayúscula K", "sans serif negrita cursiva mayúscula K", "sans serif negrita cursiva mayúscula K"]);
  this.executeCharTest("𝙇", ["sans serif negrita cursiva mayúscula L", "sans serif negrita cursiva mayúscula L", "sans serif negrita cursiva mayúscula L"]);
  this.executeCharTest("𝙈", ["sans serif negrita cursiva mayúscula M", "sans serif negrita cursiva mayúscula M", "sans serif negrita cursiva mayúscula M"]);
  this.executeCharTest("𝙉", ["sans serif negrita cursiva mayúscula N", "sans serif negrita cursiva mayúscula N", "sans serif negrita cursiva mayúscula N"]);
  this.executeCharTest("𝙊", ["sans serif negrita cursiva mayúscula O", "sans serif negrita cursiva mayúscula O", "sans serif negrita cursiva mayúscula O"]);
  this.executeCharTest("𝙋", ["sans serif negrita cursiva mayúscula P", "sans serif negrita cursiva mayúscula P", "sans serif negrita cursiva mayúscula P"]);
  this.executeCharTest("𝙌", ["sans serif negrita cursiva mayúscula Q", "sans serif negrita cursiva mayúscula Q", "sans serif negrita cursiva mayúscula Q"]);
  this.executeCharTest("𝙍", ["sans serif negrita cursiva mayúscula R", "sans serif negrita cursiva mayúscula R", "sans serif negrita cursiva mayúscula R"]);
  this.executeCharTest("𝙎", ["sans serif negrita cursiva mayúscula S", "sans serif negrita cursiva mayúscula S", "sans serif negrita cursiva mayúscula S"]);
  this.executeCharTest("𝙏", ["sans serif negrita cursiva mayúscula T", "sans serif negrita cursiva mayúscula T", "sans serif negrita cursiva mayúscula T"]);
  this.executeCharTest("𝙐", ["sans serif negrita cursiva mayúscula U", "sans serif negrita cursiva mayúscula U", "sans serif negrita cursiva mayúscula U"]);
  this.executeCharTest("𝙑", ["sans serif negrita cursiva mayúscula V", "sans serif negrita cursiva mayúscula V", "sans serif negrita cursiva mayúscula V"]);
  this.executeCharTest("𝙒", ["sans serif negrita cursiva mayúscula W", "sans serif negrita cursiva mayúscula W", "sans serif negrita cursiva mayúscula W"]);
  this.executeCharTest("𝙓", ["sans serif negrita cursiva mayúscula X", "sans serif negrita cursiva mayúscula X", "sans serif negrita cursiva mayúscula X"]);
  this.executeCharTest("𝙔", ["sans serif negrita cursiva mayúscula Y", "sans serif negrita cursiva mayúscula Y", "sans serif negrita cursiva mayúscula Y"]);
  this.executeCharTest("𝙕", ["sans serif negrita cursiva mayúscula Z", "sans serif negrita cursiva mayúscula Z", "sans serif negrita cursiva mayúscula Z"]);
  this.executeCharTest("𝙖", ["sans serif negrita cursiva a", "sans serif negrita cursiva a", "sans serif negrita cursiva a"]);
  this.executeCharTest("𝙗", ["sans serif negrita cursiva b", "sans serif negrita cursiva b", "sans serif negrita cursiva b"]);
  this.executeCharTest("𝙘", ["sans serif negrita cursiva c", "sans serif negrita cursiva c", "sans serif negrita cursiva c"]);
  this.executeCharTest("𝙙", ["sans serif negrita cursiva d", "sans serif negrita cursiva d", "sans serif negrita cursiva d"]);
  this.executeCharTest("𝙚", ["sans serif negrita cursiva e", "sans serif negrita cursiva e", "sans serif negrita cursiva e"]);
  this.executeCharTest("𝙛", ["sans serif negrita cursiva f", "sans serif negrita cursiva f", "sans serif negrita cursiva f"]);
  this.executeCharTest("𝙜", ["sans serif negrita cursiva g", "sans serif negrita cursiva g", "sans serif negrita cursiva g"]);
  this.executeCharTest("𝙝", ["sans serif negrita cursiva h", "sans serif negrita cursiva h", "sans serif negrita cursiva h"]);
  this.executeCharTest("𝙞", ["sans serif negrita cursiva i", "sans serif negrita cursiva i", "sans serif negrita cursiva i"]);
  this.executeCharTest("𝙟", ["sans serif negrita cursiva j", "sans serif negrita cursiva j", "sans serif negrita cursiva j"]);
  this.executeCharTest("𝙠", ["sans serif negrita cursiva k", "sans serif negrita cursiva k", "sans serif negrita cursiva k"]);
  this.executeCharTest("𝙡", ["sans serif negrita cursiva l", "sans serif negrita cursiva l", "sans serif negrita cursiva l"]);
  this.executeCharTest("𝙢", ["sans serif negrita cursiva m", "sans serif negrita cursiva m", "sans serif negrita cursiva m"]);
  this.executeCharTest("𝙣", ["sans serif negrita cursiva n", "sans serif negrita cursiva n", "sans serif negrita cursiva n"]);
  this.executeCharTest("𝙤", ["sans serif negrita cursiva o", "sans serif negrita cursiva o", "sans serif negrita cursiva o"]);
  this.executeCharTest("𝙥", ["sans serif negrita cursiva p", "sans serif negrita cursiva p", "sans serif negrita cursiva p"]);
  this.executeCharTest("𝙦", ["sans serif negrita cursiva q", "sans serif negrita cursiva q", "sans serif negrita cursiva q"]);
  this.executeCharTest("𝙧", ["sans serif negrita cursiva r", "sans serif negrita cursiva r", "sans serif negrita cursiva r"]);
  this.executeCharTest("𝙨", ["sans serif negrita cursiva s", "sans serif negrita cursiva s", "sans serif negrita cursiva s"]);
  this.executeCharTest("𝙩", ["sans serif negrita cursiva t", "sans serif negrita cursiva t", "sans serif negrita cursiva t"]);
  this.executeCharTest("𝙪", ["sans serif negrita cursiva u", "sans serif negrita cursiva u", "sans serif negrita cursiva u"]);
  this.executeCharTest("𝙫", ["sans serif negrita cursiva v", "sans serif negrita cursiva v", "sans serif negrita cursiva v"]);
  this.executeCharTest("𝙬", ["sans serif negrita cursiva w", "sans serif negrita cursiva w", "sans serif negrita cursiva w"]);
  this.executeCharTest("𝙭", ["sans serif negrita cursiva x", "sans serif negrita cursiva x", "sans serif negrita cursiva x"]);
  this.executeCharTest("𝙮", ["sans serif negrita cursiva y", "sans serif negrita cursiva y", "sans serif negrita cursiva y"]);
  this.executeCharTest("𝙯", ["sans serif negrita cursiva z", "sans serif negrita cursiva z", "sans serif negrita cursiva z"]);
  this.executeCharTest("Α", ["mayúscula Alfa", "mayúscula Alfa", "mayúscula Alfa"]);
  this.executeCharTest("Β", ["mayúscula Beta", "mayúscula Beta", "mayúscula Beta"]);
  this.executeCharTest("Γ", ["mayúscula Gamma", "mayúscula Gamma", "mayúscula Gamma"]);
  this.executeCharTest("Δ", ["mayúscula Delta", "mayúscula Delta", "mayúscula Delta"]);
  this.executeCharTest("Ε", ["mayúscula Épsilon", "mayúscula Épsilon", "mayúscula Épsilon"]);
  this.executeCharTest("Ζ", ["mayúscula Zeta", "mayúscula Zeta", "mayúscula Zeta"]);
  this.executeCharTest("Η", ["mayúscula Eta", "mayúscula Eta", "mayúscula Eta"]);
  this.executeCharTest("Θ", ["mayúscula Theta", "mayúscula Theta", "mayúscula Theta"]);
  this.executeCharTest("Ι", ["mayúscula Iota", "mayúscula Iota", "mayúscula Iota"]);
  this.executeCharTest("Κ", ["mayúscula Kappa", "mayúscula Kappa", "mayúscula Kappa"]);
  this.executeCharTest("Λ", ["mayúscula Lambda", "mayúscula Lambda", "mayúscula Lambda"]);
  this.executeCharTest("Μ", ["mayúscula Mi", "mayúscula Mi", "mayúscula Mi"]);
  this.executeCharTest("Ν", ["mayúscula Ni", "mayúscula Ni", "mayúscula Ni"]);
  this.executeCharTest("Ξ", ["mayúscula Xi", "mayúscula Xi", "mayúscula Xi"]);
  this.executeCharTest("Ο", ["mayúscula Ómicron", "mayúscula Ómicron", "mayúscula Ómicron"]);
  this.executeCharTest("Π", ["mayúscula Pi", "mayúscula Pi", "mayúscula Pi"]);
  this.executeCharTest("Ρ", ["mayúscula Rho", "mayúscula Rho", "mayúscula Rho"]);
  this.executeCharTest("ϴ", ["mayúscula Theta", "mayúscula Theta", "mayúscula Theta"]);
  this.executeCharTest("Σ", ["mayúscula Sigma", "mayúscula Sigma", "mayúscula Sigma"]);
  this.executeCharTest("Τ", ["mayúscula Tau", "mayúscula Tau", "mayúscula Tau"]);
  this.executeCharTest("Υ", ["mayúscula Ípsilon", "mayúscula Ípsilon", "mayúscula Ípsilon"]);
  this.executeCharTest("Φ", ["mayúscula Phi", "mayúscula Phi", "mayúscula Phi"]);
  this.executeCharTest("Χ", ["mayúscula Ji", "mayúscula Ji", "mayúscula Ji"]);
  this.executeCharTest("Ψ", ["mayúscula Psi", "mayúscula Psi", "mayúscula Psi"]);
  this.executeCharTest("Ω", ["mayúscula Omega", "mayúscula Omega", "mayúscula Omega"]);
  this.executeCharTest("∇", ["nabla", "nabla", "nabla"]);
  this.executeCharTest("α", ["alfa", "alfa", "alfa"]);
  this.executeCharTest("β", ["beta", "beta", "beta"]);
  this.executeCharTest("γ", ["gamma", "gamma", "gamma"]);
  this.executeCharTest("δ", ["delta", "delta", "delta"]);
  this.executeCharTest("ε", ["épsilon", "épsilon", "épsilon"]);
  this.executeCharTest("ζ", ["zeta", "zeta", "zeta"]);
  this.executeCharTest("η", ["eta", "eta", "eta"]);
  this.executeCharTest("θ", ["theta", "theta", "theta"]);
  this.executeCharTest("ι", ["iota", "iota", "iota"]);
  this.executeCharTest("κ", ["kappa", "kappa", "kappa"]);
  this.executeCharTest("λ", ["lambda", "lambda", "lambda"]);
  this.executeCharTest("μ", ["mi", "mi", "mi"]);
  this.executeCharTest("ν", ["ni", "ni", "ni"]);
  this.executeCharTest("ξ", ["xi", "xi", "xi"]);
  this.executeCharTest("ο", ["ómicron", "ómicron", "ómicron"]);
  this.executeCharTest("π", ["pi", "pi", "pi"]);
  this.executeCharTest("ρ", ["rho", "rho", "rho"]);
  this.executeCharTest("ς", ["sigma final", "sigma final", "sigma final"]);
  this.executeCharTest("σ", ["sigma", "sigma", "sigma"]);
  this.executeCharTest("τ", ["tau", "tau", "tau"]);
  this.executeCharTest("υ", ["ípsilon", "ípsilon", "ípsilon"]);
  this.executeCharTest("φ", ["phi", "phi", "phi"]);
  this.executeCharTest("χ", ["ji", "ji", "ji"]);
  this.executeCharTest("ψ", ["psi", "psi", "psi"]);
  this.executeCharTest("ω", ["omega", "omega", "omega"]);
  this.executeCharTest("∂", ["diferencial parcial", "diferencial parcial", "diferencial parcial"]);
  this.executeCharTest("ϵ", ["épsilon", "épsilon", "épsilon"]);
  this.executeCharTest("ϑ", ["theta", "theta", "theta"]);
  this.executeCharTest("ϰ", ["kappa", "kappa", "kappa"]);
  this.executeCharTest("ϕ", ["phi", "phi", "phi"]);
  this.executeCharTest("ϱ", ["rho", "rho", "rho"]);
  this.executeCharTest("ϖ", ["pi", "pi", "pi"]);
  this.executeCharTest("𝚨", ["negrita mayúscula Alfa", "negrita mayúscula Alfa", "negrita mayúscula Alfa"]);
  this.executeCharTest("𝚩", ["negrita mayúscula Beta", "negrita mayúscula Beta", "negrita mayúscula Beta"]);
  this.executeCharTest("𝚪", ["negrita mayúscula Gamma", "negrita mayúscula Gamma", "negrita mayúscula Gamma"]);
  this.executeCharTest("𝚫", ["negrita mayúscula Delta", "negrita mayúscula Delta", "negrita mayúscula Delta"]);
  this.executeCharTest("𝚬", ["negrita mayúscula Épsilon", "negrita mayúscula Épsilon", "negrita mayúscula Épsilon"]);
  this.executeCharTest("𝚭", ["negrita mayúscula Zeta", "negrita mayúscula Zeta", "negrita mayúscula Zeta"]);
  this.executeCharTest("𝚮", ["negrita mayúscula Eta", "negrita mayúscula Eta", "negrita mayúscula Eta"]);
  this.executeCharTest("𝚯", ["negrita mayúscula Theta", "negrita mayúscula Theta", "negrita mayúscula Theta"]);
  this.executeCharTest("𝚰", ["negrita mayúscula Iota", "negrita mayúscula Iota", "negrita mayúscula Iota"]);
  this.executeCharTest("𝚱", ["negrita mayúscula Kappa", "negrita mayúscula Kappa", "negrita mayúscula Kappa"]);
  this.executeCharTest("𝚲", ["negrita mayúscula Lambda", "negrita mayúscula Lambda", "negrita mayúscula Lambda"]);
  this.executeCharTest("𝚳", ["negrita mayúscula Mi", "negrita mayúscula Mi", "negrita mayúscula Mi"]);
  this.executeCharTest("𝚴", ["negrita mayúscula Ni", "negrita mayúscula Ni", "negrita mayúscula Ni"]);
  this.executeCharTest("𝚵", ["negrita mayúscula Xi", "negrita mayúscula Xi", "negrita mayúscula Xi"]);
  this.executeCharTest("𝚶", ["negrita mayúscula Ómicron", "negrita mayúscula Ómicron", "negrita mayúscula Ómicron"]);
  this.executeCharTest("𝚷", ["negrita mayúscula Pi", "negrita mayúscula Pi", "negrita mayúscula Pi"]);
  this.executeCharTest("𝚸", ["negrita mayúscula Rho", "negrita mayúscula Rho", "negrita mayúscula Rho"]);
  this.executeCharTest("𝚹", ["negrita mayúscula Theta", "negrita mayúscula Theta", "negrita mayúscula Theta"]);
  this.executeCharTest("𝚺", ["negrita mayúscula Sigma", "negrita mayúscula Sigma", "negrita mayúscula Sigma"]);
  this.executeCharTest("𝚻", ["negrita mayúscula Tau", "negrita mayúscula Tau", "negrita mayúscula Tau"]);
  this.executeCharTest("𝚼", ["negrita mayúscula Ípsilon", "negrita mayúscula Ípsilon", "negrita mayúscula Ípsilon"]);
  this.executeCharTest("𝚽", ["negrita mayúscula Phi", "negrita mayúscula Phi", "negrita mayúscula Phi"]);
  this.executeCharTest("𝚾", ["negrita mayúscula Ji", "negrita mayúscula Ji", "negrita mayúscula Ji"]);
  this.executeCharTest("𝚿", ["negrita mayúscula Psi", "negrita mayúscula Psi", "negrita mayúscula Psi"]);
  this.executeCharTest("𝛀", ["negrita mayúscula Omega", "negrita mayúscula Omega", "negrita mayúscula Omega"]);
  this.executeCharTest("𝛁", ["negrita nabla", "negrita nabla", "negrita nabla"]);
  this.executeCharTest("𝛂", ["negrita alfa", "negrita alfa", "negrita alfa"]);
  this.executeCharTest("𝛃", ["negrita beta", "negrita beta", "negrita beta"]);
  this.executeCharTest("𝛄", ["negrita gamma", "negrita gamma", "negrita gamma"]);
  this.executeCharTest("𝛅", ["negrita delta", "negrita delta", "negrita delta"]);
  this.executeCharTest("𝛆", ["negrita épsilon", "negrita épsilon", "negrita épsilon"]);
  this.executeCharTest("𝛇", ["negrita zeta", "negrita zeta", "negrita zeta"]);
  this.executeCharTest("𝛈", ["negrita eta", "negrita eta", "negrita eta"]);
  this.executeCharTest("𝛉", ["negrita theta", "negrita theta", "negrita theta"]);
  this.executeCharTest("𝛊", ["negrita iota", "negrita iota", "negrita iota"]);
  this.executeCharTest("𝛋", ["negrita kappa", "negrita kappa", "negrita kappa"]);
  this.executeCharTest("𝛌", ["negrita lambda", "negrita lambda", "negrita lambda"]);
  this.executeCharTest("𝛍", ["negrita mi", "negrita mi", "negrita mi"]);
  this.executeCharTest("𝛎", ["negrita ni", "negrita ni", "negrita ni"]);
  this.executeCharTest("𝛏", ["negrita xi", "negrita xi", "negrita xi"]);
  this.executeCharTest("𝛐", ["negrita ómicron", "negrita ómicron", "negrita ómicron"]);
  this.executeCharTest("𝛑", ["negrita pi", "negrita pi", "negrita pi"]);
  this.executeCharTest("𝛒", ["negrita rho", "negrita rho", "negrita rho"]);
  this.executeCharTest("𝛓", ["negrita sigma final", "negrita sigma final", "negrita sigma final"]);
  this.executeCharTest("𝛔", ["negrita sigma", "negrita sigma", "negrita sigma"]);
  this.executeCharTest("𝛕", ["negrita tau", "negrita tau", "negrita tau"]);
  this.executeCharTest("𝛖", ["negrita ípsilon", "negrita ípsilon", "negrita ípsilon"]);
  this.executeCharTest("𝛗", ["negrita phi", "negrita phi", "negrita phi"]);
  this.executeCharTest("𝛘", ["negrita ji", "negrita ji", "negrita ji"]);
  this.executeCharTest("𝛙", ["negrita psi", "negrita psi", "negrita psi"]);
  this.executeCharTest("𝛚", ["negrita omega", "negrita omega", "negrita omega"]);
  this.executeCharTest("𝛛", ["negrita diferencial parcial", "negrita diferencial parcial", "negrita diferencial parcial"]);
  this.executeCharTest("𝛜", ["negrita épsilon", "negrita épsilon", "negrita épsilon"]);
  this.executeCharTest("𝛝", ["negrita theta", "negrita theta", "negrita theta"]);
  this.executeCharTest("𝛞", ["negrita kappa", "negrita kappa", "negrita kappa"]);
  this.executeCharTest("𝛟", ["negrita phi", "negrita phi", "negrita phi"]);
  this.executeCharTest("𝛠", ["negrita rho", "negrita rho", "negrita rho"]);
  this.executeCharTest("𝛡", ["negrita pi", "negrita pi", "negrita pi"]);
  this.executeCharTest("𝛢", ["cursiva mayúscula Alfa", "cursiva mayúscula Alfa", "cursiva mayúscula Alfa"]);
  this.executeCharTest("𝛣", ["cursiva mayúscula Beta", "cursiva mayúscula Beta", "cursiva mayúscula Beta"]);
  this.executeCharTest("𝛤", ["cursiva mayúscula Gamma", "cursiva mayúscula Gamma", "cursiva mayúscula Gamma"]);
  this.executeCharTest("𝛥", ["cursiva mayúscula Delta", "cursiva mayúscula Delta", "cursiva mayúscula Delta"]);
  this.executeCharTest("𝛦", ["cursiva mayúscula Épsilon", "cursiva mayúscula Épsilon", "cursiva mayúscula Épsilon"]);
  this.executeCharTest("𝛧", ["cursiva mayúscula Zeta", "cursiva mayúscula Zeta", "cursiva mayúscula Zeta"]);
  this.executeCharTest("𝛨", ["cursiva mayúscula Eta", "cursiva mayúscula Eta", "cursiva mayúscula Eta"]);
  this.executeCharTest("𝛩", ["cursiva mayúscula Theta", "cursiva mayúscula Theta", "cursiva mayúscula Theta"]);
  this.executeCharTest("𝛪", ["cursiva mayúscula Iota", "cursiva mayúscula Iota", "cursiva mayúscula Iota"]);
  this.executeCharTest("𝛫", ["cursiva mayúscula Kappa", "cursiva mayúscula Kappa", "cursiva mayúscula Kappa"]);
  this.executeCharTest("𝛬", ["cursiva mayúscula Lambda", "cursiva mayúscula Lambda", "cursiva mayúscula Lambda"]);
  this.executeCharTest("𝛭", ["cursiva mayúscula Mi", "cursiva mayúscula Mi", "cursiva mayúscula Mi"]);
  this.executeCharTest("𝛮", ["cursiva mayúscula Ni", "cursiva mayúscula Ni", "cursiva mayúscula Ni"]);
  this.executeCharTest("𝛯", ["cursiva mayúscula Xi", "cursiva mayúscula Xi", "cursiva mayúscula Xi"]);
  this.executeCharTest("𝛰", ["cursiva mayúscula Ómicron", "cursiva mayúscula Ómicron", "cursiva mayúscula Ómicron"]);
  this.executeCharTest("𝛱", ["cursiva mayúscula Pi", "cursiva mayúscula Pi", "cursiva mayúscula Pi"]);
  this.executeCharTest("𝛲", ["cursiva mayúscula Rho", "cursiva mayúscula Rho", "cursiva mayúscula Rho"]);
  this.executeCharTest("𝛳", ["cursiva mayúscula Theta", "cursiva mayúscula Theta", "cursiva mayúscula Theta"]);
  this.executeCharTest("𝛴", ["cursiva mayúscula Sigma", "cursiva mayúscula Sigma", "cursiva mayúscula Sigma"]);
  this.executeCharTest("𝛵", ["cursiva mayúscula Tau", "cursiva mayúscula Tau", "cursiva mayúscula Tau"]);
  this.executeCharTest("𝛶", ["cursiva mayúscula Ípsilon", "cursiva mayúscula Ípsilon", "cursiva mayúscula Ípsilon"]);
  this.executeCharTest("𝛷", ["cursiva mayúscula Phi", "cursiva mayúscula Phi", "cursiva mayúscula Phi"]);
  this.executeCharTest("𝛸", ["cursiva mayúscula Ji", "cursiva mayúscula Ji", "cursiva mayúscula Ji"]);
  this.executeCharTest("𝛹", ["cursiva mayúscula Psi", "cursiva mayúscula Psi", "cursiva mayúscula Psi"]);
  this.executeCharTest("𝛺", ["cursiva mayúscula Omega", "cursiva mayúscula Omega", "cursiva mayúscula Omega"]);
  this.executeCharTest("𝛻", ["cursiva nabla", "cursiva nabla", "cursiva nabla"]);
  this.executeCharTest("𝛼", ["cursiva alfa", "cursiva alfa", "cursiva alfa"]);
  this.executeCharTest("𝛽", ["cursiva beta", "cursiva beta", "cursiva beta"]);
  this.executeCharTest("𝛾", ["cursiva gamma", "cursiva gamma", "cursiva gamma"]);
  this.executeCharTest("𝛿", ["cursiva delta", "cursiva delta", "cursiva delta"]);
  this.executeCharTest("𝜀", ["cursiva épsilon", "cursiva épsilon", "cursiva épsilon"]);
  this.executeCharTest("𝜁", ["cursiva zeta", "cursiva zeta", "cursiva zeta"]);
  this.executeCharTest("𝜂", ["cursiva eta", "cursiva eta", "cursiva eta"]);
  this.executeCharTest("𝜃", ["cursiva theta", "cursiva theta", "cursiva theta"]);
  this.executeCharTest("𝜄", ["cursiva iota", "cursiva iota", "cursiva iota"]);
  this.executeCharTest("𝜅", ["cursiva kappa", "cursiva kappa", "cursiva kappa"]);
  this.executeCharTest("𝜆", ["cursiva lambda", "cursiva lambda", "cursiva lambda"]);
  this.executeCharTest("𝜇", ["cursiva mi", "cursiva mi", "cursiva mi"]);
  this.executeCharTest("𝜈", ["cursiva ni", "cursiva ni", "cursiva ni"]);
  this.executeCharTest("𝜉", ["cursiva xi", "cursiva xi", "cursiva xi"]);
  this.executeCharTest("𝜊", ["cursiva ómicron", "cursiva ómicron", "cursiva ómicron"]);
  this.executeCharTest("𝜋", ["cursiva pi", "cursiva pi", "cursiva pi"]);
  this.executeCharTest("𝜌", ["cursiva rho", "cursiva rho", "cursiva rho"]);
  this.executeCharTest("𝜍", ["cursiva sigma final", "cursiva sigma final", "cursiva sigma final"]);
  this.executeCharTest("𝜎", ["cursiva sigma", "cursiva sigma", "cursiva sigma"]);
  this.executeCharTest("𝜏", ["cursiva tau", "cursiva tau", "cursiva tau"]);
  this.executeCharTest("𝜐", ["cursiva ípsilon", "cursiva ípsilon", "cursiva ípsilon"]);
  this.executeCharTest("𝜑", ["cursiva phi", "cursiva phi", "cursiva phi"]);
  this.executeCharTest("𝜒", ["cursiva ji", "cursiva ji", "cursiva ji"]);
  this.executeCharTest("𝜓", ["cursiva psi", "cursiva psi", "cursiva psi"]);
  this.executeCharTest("𝜔", ["cursiva omega", "cursiva omega", "cursiva omega"]);
  this.executeCharTest("𝜕", ["cursiva diferencial parcial", "cursiva diferencial parcial", "cursiva diferencial parcial"]);
  this.executeCharTest("𝜖", ["cursiva épsilon", "cursiva épsilon", "cursiva épsilon"]);
  this.executeCharTest("𝜗", ["cursiva theta", "cursiva theta", "cursiva theta"]);
  this.executeCharTest("𝜘", ["cursiva kappa", "cursiva kappa", "cursiva kappa"]);
  this.executeCharTest("𝜙", ["cursiva phi", "cursiva phi", "cursiva phi"]);
  this.executeCharTest("𝜚", ["cursiva rho", "cursiva rho", "cursiva rho"]);
  this.executeCharTest("𝜛", ["cursiva pi", "cursiva pi", "cursiva pi"]);
  this.executeCharTest("𝜜", ["negrita cursiva mayúscula Alfa", "negrita cursiva mayúscula Alfa", "negrita cursiva mayúscula Alfa"]);
  this.executeCharTest("𝜝", ["negrita cursiva mayúscula Beta", "negrita cursiva mayúscula Beta", "negrita cursiva mayúscula Beta"]);
  this.executeCharTest("𝜞", ["negrita cursiva mayúscula Gamma", "negrita cursiva mayúscula Gamma", "negrita cursiva mayúscula Gamma"]);
  this.executeCharTest("𝜟", ["negrita cursiva mayúscula Delta", "negrita cursiva mayúscula Delta", "negrita cursiva mayúscula Delta"]);
  this.executeCharTest("𝜠", ["negrita cursiva mayúscula Épsilon", "negrita cursiva mayúscula Épsilon", "negrita cursiva mayúscula Épsilon"]);
  this.executeCharTest("𝜡", ["negrita cursiva mayúscula Zeta", "negrita cursiva mayúscula Zeta", "negrita cursiva mayúscula Zeta"]);
  this.executeCharTest("𝜢", ["negrita cursiva mayúscula Eta", "negrita cursiva mayúscula Eta", "negrita cursiva mayúscula Eta"]);
  this.executeCharTest("𝜣", ["negrita cursiva mayúscula Theta", "negrita cursiva mayúscula Theta", "negrita cursiva mayúscula Theta"]);
  this.executeCharTest("𝜤", ["negrita cursiva mayúscula Iota", "negrita cursiva mayúscula Iota", "negrita cursiva mayúscula Iota"]);
  this.executeCharTest("𝜥", ["negrita cursiva mayúscula Kappa", "negrita cursiva mayúscula Kappa", "negrita cursiva mayúscula Kappa"]);
  this.executeCharTest("𝜦", ["negrita cursiva mayúscula Lambda", "negrita cursiva mayúscula Lambda", "negrita cursiva mayúscula Lambda"]);
  this.executeCharTest("𝜧", ["negrita cursiva mayúscula Mi", "negrita cursiva mayúscula Mi", "negrita cursiva mayúscula Mi"]);
  this.executeCharTest("𝜨", ["negrita cursiva mayúscula Ni", "negrita cursiva mayúscula Ni", "negrita cursiva mayúscula Ni"]);
  this.executeCharTest("𝜩", ["negrita cursiva mayúscula Xi", "negrita cursiva mayúscula Xi", "negrita cursiva mayúscula Xi"]);
  this.executeCharTest("𝜪", ["negrita cursiva mayúscula Ómicron", "negrita cursiva mayúscula Ómicron", "negrita cursiva mayúscula Ómicron"]);
  this.executeCharTest("𝜫", ["negrita cursiva mayúscula Pi", "negrita cursiva mayúscula Pi", "negrita cursiva mayúscula Pi"]);
  this.executeCharTest("𝜬", ["negrita cursiva mayúscula Rho", "negrita cursiva mayúscula Rho", "negrita cursiva mayúscula Rho"]);
  this.executeCharTest("𝜭", ["negrita cursiva mayúscula Theta", "negrita cursiva mayúscula Theta", "negrita cursiva mayúscula Theta"]);
  this.executeCharTest("𝜮", ["negrita cursiva mayúscula Sigma", "negrita cursiva mayúscula Sigma", "negrita cursiva mayúscula Sigma"]);
  this.executeCharTest("𝜯", ["negrita cursiva mayúscula Tau", "negrita cursiva mayúscula Tau", "negrita cursiva mayúscula Tau"]);
  this.executeCharTest("𝜰", ["negrita cursiva mayúscula Ípsilon", "negrita cursiva mayúscula Ípsilon", "negrita cursiva mayúscula Ípsilon"]);
  this.executeCharTest("𝜱", ["negrita cursiva mayúscula Phi", "negrita cursiva mayúscula Phi", "negrita cursiva mayúscula Phi"]);
  this.executeCharTest("𝜲", ["negrita cursiva mayúscula Ji", "negrita cursiva mayúscula Ji", "negrita cursiva mayúscula Ji"]);
  this.executeCharTest("𝜳", ["negrita cursiva mayúscula Psi", "negrita cursiva mayúscula Psi", "negrita cursiva mayúscula Psi"]);
  this.executeCharTest("𝜴", ["negrita cursiva mayúscula Omega", "negrita cursiva mayúscula Omega", "negrita cursiva mayúscula Omega"]);
  this.executeCharTest("𝜵", ["negrita cursiva nabla", "negrita cursiva nabla", "negrita cursiva nabla"]);
  this.executeCharTest("𝜶", ["negrita cursiva alfa", "negrita cursiva alfa", "negrita cursiva alfa"]);
  this.executeCharTest("𝜷", ["negrita cursiva beta", "negrita cursiva beta", "negrita cursiva beta"]);
  this.executeCharTest("𝜸", ["negrita cursiva gamma", "negrita cursiva gamma", "negrita cursiva gamma"]);
  this.executeCharTest("𝜹", ["negrita cursiva delta", "negrita cursiva delta", "negrita cursiva delta"]);
  this.executeCharTest("𝜺", ["negrita cursiva épsilon", "negrita cursiva épsilon", "negrita cursiva épsilon"]);
  this.executeCharTest("𝜻", ["negrita cursiva zeta", "negrita cursiva zeta", "negrita cursiva zeta"]);
  this.executeCharTest("𝜼", ["negrita cursiva eta", "negrita cursiva eta", "negrita cursiva eta"]);
  this.executeCharTest("𝜽", ["negrita cursiva theta", "negrita cursiva theta", "negrita cursiva theta"]);
  this.executeCharTest("𝜾", ["negrita cursiva iota", "negrita cursiva iota", "negrita cursiva iota"]);
  this.executeCharTest("𝜿", ["negrita cursiva kappa", "negrita cursiva kappa", "negrita cursiva kappa"]);
  this.executeCharTest("𝝀", ["negrita cursiva lambda", "negrita cursiva lambda", "negrita cursiva lambda"]);
  this.executeCharTest("𝝁", ["negrita cursiva mi", "negrita cursiva mi", "negrita cursiva mi"]);
  this.executeCharTest("𝝂", ["negrita cursiva ni", "negrita cursiva ni", "negrita cursiva ni"]);
  this.executeCharTest("𝝃", ["negrita cursiva xi", "negrita cursiva xi", "negrita cursiva xi"]);
  this.executeCharTest("𝝄", ["negrita cursiva ómicron", "negrita cursiva ómicron", "negrita cursiva ómicron"]);
  this.executeCharTest("𝝅", ["negrita cursiva pi", "negrita cursiva pi", "negrita cursiva pi"]);
  this.executeCharTest("𝝆", ["negrita cursiva rho", "negrita cursiva rho", "negrita cursiva rho"]);
  this.executeCharTest("𝝇", ["negrita cursiva sigma final", "negrita cursiva sigma final", "negrita cursiva sigma final"]);
  this.executeCharTest("𝝈", ["negrita cursiva sigma", "negrita cursiva sigma", "negrita cursiva sigma"]);
  this.executeCharTest("𝝉", ["negrita cursiva tau", "negrita cursiva tau", "negrita cursiva tau"]);
  this.executeCharTest("𝝊", ["negrita cursiva ípsilon", "negrita cursiva ípsilon", "negrita cursiva ípsilon"]);
  this.executeCharTest("𝝋", ["negrita cursiva phi", "negrita cursiva phi", "negrita cursiva phi"]);
  this.executeCharTest("𝝌", ["negrita cursiva ji", "negrita cursiva ji", "negrita cursiva ji"]);
  this.executeCharTest("𝝍", ["negrita cursiva psi", "negrita cursiva psi", "negrita cursiva psi"]);
  this.executeCharTest("𝝎", ["negrita cursiva omega", "negrita cursiva omega", "negrita cursiva omega"]);
  this.executeCharTest("𝝏", ["negrita cursiva diferencial parcial", "negrita cursiva diferencial parcial", "negrita cursiva diferencial parcial"]);
  this.executeCharTest("𝝐", ["negrita cursiva épsilon", "negrita cursiva épsilon", "negrita cursiva épsilon"]);
  this.executeCharTest("𝝑", ["negrita cursiva theta", "negrita cursiva theta", "negrita cursiva theta"]);
  this.executeCharTest("𝝒", ["negrita cursiva kappa", "negrita cursiva kappa", "negrita cursiva kappa"]);
  this.executeCharTest("𝝓", ["negrita cursiva phi", "negrita cursiva phi", "negrita cursiva phi"]);
  this.executeCharTest("𝝔", ["negrita cursiva rho", "negrita cursiva rho", "negrita cursiva rho"]);
  this.executeCharTest("𝝕", ["negrita cursiva pi", "negrita cursiva pi", "negrita cursiva pi"]);
  this.executeCharTest("𝝖", ["sans serif negrita mayúscula Alfa", "sans serif negrita mayúscula Alfa", "sans serif negrita mayúscula Alfa"]);
  this.executeCharTest("𝝗", ["sans serif negrita mayúscula Beta", "sans serif negrita mayúscula Beta", "sans serif negrita mayúscula Beta"]);
  this.executeCharTest("𝝘", ["sans serif negrita mayúscula Gamma", "sans serif negrita mayúscula Gamma", "sans serif negrita mayúscula Gamma"]);
  this.executeCharTest("𝝙", ["sans serif negrita mayúscula Delta", "sans serif negrita mayúscula Delta", "sans serif negrita mayúscula Delta"]);
  this.executeCharTest("𝝚", ["sans serif negrita mayúscula Épsilon", "sans serif negrita mayúscula Épsilon", "sans serif negrita mayúscula Épsilon"]);
  this.executeCharTest("𝝛", ["sans serif negrita mayúscula Zeta", "sans serif negrita mayúscula Zeta", "sans serif negrita mayúscula Zeta"]);
  this.executeCharTest("𝝜", ["sans serif negrita mayúscula Eta", "sans serif negrita mayúscula Eta", "sans serif negrita mayúscula Eta"]);
  this.executeCharTest("𝝝", ["sans serif negrita mayúscula Theta", "sans serif negrita mayúscula Theta", "sans serif negrita mayúscula Theta"]);
  this.executeCharTest("𝝞", ["sans serif negrita mayúscula Iota", "sans serif negrita mayúscula Iota", "sans serif negrita mayúscula Iota"]);
  this.executeCharTest("𝝟", ["sans serif negrita mayúscula Kappa", "sans serif negrita mayúscula Kappa", "sans serif negrita mayúscula Kappa"]);
  this.executeCharTest("𝝠", ["sans serif negrita mayúscula Lambda", "sans serif negrita mayúscula Lambda", "sans serif negrita mayúscula Lambda"]);
  this.executeCharTest("𝝡", ["sans serif negrita mayúscula Mi", "sans serif negrita mayúscula Mi", "sans serif negrita mayúscula Mi"]);
  this.executeCharTest("𝝢", ["sans serif negrita mayúscula Ni", "sans serif negrita mayúscula Ni", "sans serif negrita mayúscula Ni"]);
  this.executeCharTest("𝝣", ["sans serif negrita mayúscula Xi", "sans serif negrita mayúscula Xi", "sans serif negrita mayúscula Xi"]);
  this.executeCharTest("𝝤", ["sans serif negrita mayúscula Ómicron", "sans serif negrita mayúscula Ómicron", "sans serif negrita mayúscula Ómicron"]);
  this.executeCharTest("𝝥", ["sans serif negrita mayúscula Pi", "sans serif negrita mayúscula Pi", "sans serif negrita mayúscula Pi"]);
  this.executeCharTest("𝝦", ["sans serif negrita mayúscula Rho", "sans serif negrita mayúscula Rho", "sans serif negrita mayúscula Rho"]);
  this.executeCharTest("𝝧", ["sans serif negrita mayúscula Theta", "sans serif negrita mayúscula Theta", "sans serif negrita mayúscula Theta"]);
  this.executeCharTest("𝝨", ["sans serif negrita mayúscula Sigma", "sans serif negrita mayúscula Sigma", "sans serif negrita mayúscula Sigma"]);
  this.executeCharTest("𝝩", ["sans serif negrita mayúscula Tau", "sans serif negrita mayúscula Tau", "sans serif negrita mayúscula Tau"]);
  this.executeCharTest("𝝪", ["sans serif negrita mayúscula Ípsilon", "sans serif negrita mayúscula Ípsilon", "sans serif negrita mayúscula Ípsilon"]);
  this.executeCharTest("𝝫", ["sans serif negrita mayúscula Phi", "sans serif negrita mayúscula Phi", "sans serif negrita mayúscula Phi"]);
  this.executeCharTest("𝝬", ["sans serif negrita mayúscula Ji", "sans serif negrita mayúscula Ji", "sans serif negrita mayúscula Ji"]);
  this.executeCharTest("𝝭", ["sans serif negrita mayúscula Psi", "sans serif negrita mayúscula Psi", "sans serif negrita mayúscula Psi"]);
  this.executeCharTest("𝝮", ["sans serif negrita mayúscula Omega", "sans serif negrita mayúscula Omega", "sans serif negrita mayúscula Omega"]);
  this.executeCharTest("𝝯", ["sans serif negrita nabla", "sans serif negrita nabla", "sans serif negrita nabla"]);
  this.executeCharTest("𝝰", ["sans serif negrita alfa", "sans serif negrita alfa", "sans serif negrita alfa"]);
  this.executeCharTest("𝝱", ["sans serif negrita beta", "sans serif negrita beta", "sans serif negrita beta"]);
  this.executeCharTest("𝝲", ["sans serif negrita gamma", "sans serif negrita gamma", "sans serif negrita gamma"]);
  this.executeCharTest("𝝳", ["sans serif negrita delta", "sans serif negrita delta", "sans serif negrita delta"]);
  this.executeCharTest("𝝴", ["sans serif negrita épsilon", "sans serif negrita épsilon", "sans serif negrita épsilon"]);
  this.executeCharTest("𝝵", ["sans serif negrita zeta", "sans serif negrita zeta", "sans serif negrita zeta"]);
  this.executeCharTest("𝝶", ["sans serif negrita eta", "sans serif negrita eta", "sans serif negrita eta"]);
  this.executeCharTest("𝝷", ["sans serif negrita theta", "sans serif negrita theta", "sans serif negrita theta"]);
  this.executeCharTest("𝝸", ["sans serif negrita iota", "sans serif negrita iota", "sans serif negrita iota"]);
  this.executeCharTest("𝝹", ["sans serif negrita kappa", "sans serif negrita kappa", "sans serif negrita kappa"]);
  this.executeCharTest("𝝺", ["sans serif negrita lambda", "sans serif negrita lambda", "sans serif negrita lambda"]);
  this.executeCharTest("𝝻", ["sans serif negrita mi", "sans serif negrita mi", "sans serif negrita mi"]);
  this.executeCharTest("𝝼", ["sans serif negrita ni", "sans serif negrita ni", "sans serif negrita ni"]);
  this.executeCharTest("𝝽", ["sans serif negrita xi", "sans serif negrita xi", "sans serif negrita xi"]);
  this.executeCharTest("𝝾", ["sans serif negrita ómicron", "sans serif negrita ómicron", "sans serif negrita ómicron"]);
  this.executeCharTest("𝝿", ["sans serif negrita pi", "sans serif negrita pi", "sans serif negrita pi"]);
  this.executeCharTest("𝞀", ["sans serif negrita rho", "sans serif negrita rho", "sans serif negrita rho"]);
  this.executeCharTest("𝞁", ["sans serif negrita sigma final", "sans serif negrita sigma final", "sans serif negrita sigma final"]);
  this.executeCharTest("𝞂", ["sans serif negrita sigma", "sans serif negrita sigma", "sans serif negrita sigma"]);
  this.executeCharTest("𝞃", ["sans serif negrita tau", "sans serif negrita tau", "sans serif negrita tau"]);
  this.executeCharTest("𝞄", ["sans serif negrita ípsilon", "sans serif negrita ípsilon", "sans serif negrita ípsilon"]);
  this.executeCharTest("𝞅", ["sans serif negrita phi", "sans serif negrita phi", "sans serif negrita phi"]);
  this.executeCharTest("𝞆", ["sans serif negrita ji", "sans serif negrita ji", "sans serif negrita ji"]);
  this.executeCharTest("𝞇", ["sans serif negrita psi", "sans serif negrita psi", "sans serif negrita psi"]);
  this.executeCharTest("𝞈", ["sans serif negrita omega", "sans serif negrita omega", "sans serif negrita omega"]);
  this.executeCharTest("𝞉", ["sans serif negrita diferencial parcial", "sans serif negrita diferencial parcial", "sans serif negrita diferencial parcial"]);
  this.executeCharTest("𝞊", ["sans serif negrita épsilon", "sans serif negrita épsilon", "sans serif negrita épsilon"]);
  this.executeCharTest("𝞋", ["sans serif negrita theta", "sans serif negrita theta", "sans serif negrita theta"]);
  this.executeCharTest("𝞌", ["sans serif negrita kappa", "sans serif negrita kappa", "sans serif negrita kappa"]);
  this.executeCharTest("𝞍", ["sans serif negrita phi", "sans serif negrita phi", "sans serif negrita phi"]);
  this.executeCharTest("𝞎", ["sans serif negrita rho", "sans serif negrita rho", "sans serif negrita rho"]);
  this.executeCharTest("𝞏", ["sans serif negrita pi", "sans serif negrita pi", "sans serif negrita pi"]);
  this.executeCharTest("𝞐", ["sans serif negrita cursiva mayúscula Alfa", "sans serif negrita cursiva mayúscula Alfa", "sans serif negrita cursiva mayúscula Alfa"]);
  this.executeCharTest("𝞑", ["sans serif negrita cursiva mayúscula Beta", "sans serif negrita cursiva mayúscula Beta", "sans serif negrita cursiva mayúscula Beta"]);
  this.executeCharTest("𝞒", ["sans serif negrita cursiva mayúscula Gamma", "sans serif negrita cursiva mayúscula Gamma", "sans serif negrita cursiva mayúscula Gamma"]);
  this.executeCharTest("𝞓", ["sans serif negrita cursiva mayúscula Delta", "sans serif negrita cursiva mayúscula Delta", "sans serif negrita cursiva mayúscula Delta"]);
  this.executeCharTest("𝞔", ["sans serif negrita cursiva mayúscula Épsilon", "sans serif negrita cursiva mayúscula Épsilon", "sans serif negrita cursiva mayúscula Épsilon"]);
  this.executeCharTest("𝞕", ["sans serif negrita cursiva mayúscula Zeta", "sans serif negrita cursiva mayúscula Zeta", "sans serif negrita cursiva mayúscula Zeta"]);
  this.executeCharTest("𝞖", ["sans serif negrita cursiva mayúscula Eta", "sans serif negrita cursiva mayúscula Eta", "sans serif negrita cursiva mayúscula Eta"]);
  this.executeCharTest("𝞗", ["sans serif negrita cursiva mayúscula Theta", "sans serif negrita cursiva mayúscula Theta", "sans serif negrita cursiva mayúscula Theta"]);
  this.executeCharTest("𝞘", ["sans serif negrita cursiva mayúscula Iota", "sans serif negrita cursiva mayúscula Iota", "sans serif negrita cursiva mayúscula Iota"]);
  this.executeCharTest("𝞙", ["sans serif negrita cursiva mayúscula Kappa", "sans serif negrita cursiva mayúscula Kappa", "sans serif negrita cursiva mayúscula Kappa"]);
  this.executeCharTest("𝞚", ["sans serif negrita cursiva mayúscula Lambda", "sans serif negrita cursiva mayúscula Lambda", "sans serif negrita cursiva mayúscula Lambda"]);
  this.executeCharTest("𝞛", ["sans serif negrita cursiva mayúscula Mi", "sans serif negrita cursiva mayúscula Mi", "sans serif negrita cursiva mayúscula Mi"]);
  this.executeCharTest("𝞜", ["sans serif negrita cursiva mayúscula Ni", "sans serif negrita cursiva mayúscula Ni", "sans serif negrita cursiva mayúscula Ni"]);
  this.executeCharTest("𝞝", ["sans serif negrita cursiva mayúscula Xi", "sans serif negrita cursiva mayúscula Xi", "sans serif negrita cursiva mayúscula Xi"]);
  this.executeCharTest("𝞞", ["sans serif negrita cursiva mayúscula Ómicron", "sans serif negrita cursiva mayúscula Ómicron", "sans serif negrita cursiva mayúscula Ómicron"]);
  this.executeCharTest("𝞟", ["sans serif negrita cursiva mayúscula Pi", "sans serif negrita cursiva mayúscula Pi", "sans serif negrita cursiva mayúscula Pi"]);
  this.executeCharTest("𝞠", ["sans serif negrita cursiva mayúscula Rho", "sans serif negrita cursiva mayúscula Rho", "sans serif negrita cursiva mayúscula Rho"]);
  this.executeCharTest("𝞡", ["sans serif negrita cursiva mayúscula Theta", "sans serif negrita cursiva mayúscula Theta", "sans serif negrita cursiva mayúscula Theta"]);
  this.executeCharTest("𝞢", ["sans serif negrita cursiva mayúscula Sigma", "sans serif negrita cursiva mayúscula Sigma", "sans serif negrita cursiva mayúscula Sigma"]);
  this.executeCharTest("𝞣", ["sans serif negrita cursiva mayúscula Tau", "sans serif negrita cursiva mayúscula Tau", "sans serif negrita cursiva mayúscula Tau"]);
  this.executeCharTest("𝞤", ["sans serif negrita cursiva mayúscula Ípsilon", "sans serif negrita cursiva mayúscula Ípsilon", "sans serif negrita cursiva mayúscula Ípsilon"]);
  this.executeCharTest("𝞥", ["sans serif negrita cursiva mayúscula Phi", "sans serif negrita cursiva mayúscula Phi", "sans serif negrita cursiva mayúscula Phi"]);
  this.executeCharTest("𝞦", ["sans serif negrita cursiva mayúscula Ji", "sans serif negrita cursiva mayúscula Ji", "sans serif negrita cursiva mayúscula Ji"]);
  this.executeCharTest("𝞧", ["sans serif negrita cursiva mayúscula Psi", "sans serif negrita cursiva mayúscula Psi", "sans serif negrita cursiva mayúscula Psi"]);
  this.executeCharTest("𝞨", ["sans serif negrita cursiva mayúscula Omega", "sans serif negrita cursiva mayúscula Omega", "sans serif negrita cursiva mayúscula Omega"]);
  this.executeCharTest("𝞩", ["sans serif negrita cursiva nabla", "sans serif negrita cursiva nabla", "sans serif negrita cursiva nabla"]);
  this.executeCharTest("𝞪", ["sans serif negrita cursiva alfa", "sans serif negrita cursiva alfa", "sans serif negrita cursiva alfa"]);
  this.executeCharTest("𝞫", ["sans serif negrita cursiva beta", "sans serif negrita cursiva beta", "sans serif negrita cursiva beta"]);
  this.executeCharTest("𝞬", ["sans serif negrita cursiva gamma", "sans serif negrita cursiva gamma", "sans serif negrita cursiva gamma"]);
  this.executeCharTest("𝞭", ["sans serif negrita cursiva delta", "sans serif negrita cursiva delta", "sans serif negrita cursiva delta"]);
  this.executeCharTest("𝞮", ["sans serif negrita cursiva épsilon", "sans serif negrita cursiva épsilon", "sans serif negrita cursiva épsilon"]);
  this.executeCharTest("𝞯", ["sans serif negrita cursiva zeta", "sans serif negrita cursiva zeta", "sans serif negrita cursiva zeta"]);
  this.executeCharTest("𝞰", ["sans serif negrita cursiva eta", "sans serif negrita cursiva eta", "sans serif negrita cursiva eta"]);
  this.executeCharTest("𝞱", ["sans serif negrita cursiva theta", "sans serif negrita cursiva theta", "sans serif negrita cursiva theta"]);
  this.executeCharTest("𝞲", ["sans serif negrita cursiva iota", "sans serif negrita cursiva iota", "sans serif negrita cursiva iota"]);
  this.executeCharTest("𝞳", ["sans serif negrita cursiva kappa", "sans serif negrita cursiva kappa", "sans serif negrita cursiva kappa"]);
  this.executeCharTest("𝞴", ["sans serif negrita cursiva lambda", "sans serif negrita cursiva lambda", "sans serif negrita cursiva lambda"]);
  this.executeCharTest("𝞵", ["sans serif negrita cursiva mi", "sans serif negrita cursiva mi", "sans serif negrita cursiva mi"]);
  this.executeCharTest("𝞶", ["sans serif negrita cursiva ni", "sans serif negrita cursiva ni", "sans serif negrita cursiva ni"]);
  this.executeCharTest("𝞷", ["sans serif negrita cursiva xi", "sans serif negrita cursiva xi", "sans serif negrita cursiva xi"]);
  this.executeCharTest("𝞸", ["sans serif negrita cursiva ómicron", "sans serif negrita cursiva ómicron", "sans serif negrita cursiva ómicron"]);
  this.executeCharTest("𝞹", ["sans serif negrita cursiva pi", "sans serif negrita cursiva pi", "sans serif negrita cursiva pi"]);
  this.executeCharTest("𝞺", ["sans serif negrita cursiva rho", "sans serif negrita cursiva rho", "sans serif negrita cursiva rho"]);
  this.executeCharTest("𝞻", ["sans serif negrita cursiva sigma final", "sans serif negrita cursiva sigma final", "sans serif negrita cursiva sigma final"]);
  this.executeCharTest("𝞼", ["sans serif negrita cursiva sigma", "sans serif negrita cursiva sigma", "sans serif negrita cursiva sigma"]);
  this.executeCharTest("𝞽", ["sans serif negrita cursiva tau", "sans serif negrita cursiva tau", "sans serif negrita cursiva tau"]);
  this.executeCharTest("𝞾", ["sans serif negrita cursiva ípsilon", "sans serif negrita cursiva ípsilon", "sans serif negrita cursiva ípsilon"]);
  this.executeCharTest("𝞿", ["sans serif negrita cursiva phi", "sans serif negrita cursiva phi", "sans serif negrita cursiva phi"]);
  this.executeCharTest("𝟀", ["sans serif negrita cursiva ji", "sans serif negrita cursiva ji", "sans serif negrita cursiva ji"]);
  this.executeCharTest("𝟁", ["sans serif negrita cursiva psi", "sans serif negrita cursiva psi", "sans serif negrita cursiva psi"]);
  this.executeCharTest("𝟂", ["sans serif negrita cursiva omega", "sans serif negrita cursiva omega", "sans serif negrita cursiva omega"]);
  this.executeCharTest("𝟃", ["sans serif negrita cursiva diferencial parcial", "sans serif negrita cursiva diferencial parcial", "sans serif negrita cursiva diferencial parcial"]);
  this.executeCharTest("𝟄", ["sans serif negrita cursiva épsilon", "sans serif negrita cursiva épsilon", "sans serif negrita cursiva épsilon"]);
  this.executeCharTest("𝟅", ["sans serif negrita cursiva theta", "sans serif negrita cursiva theta", "sans serif negrita cursiva theta"]);
  this.executeCharTest("𝟆", ["sans serif negrita cursiva kappa", "sans serif negrita cursiva kappa", "sans serif negrita cursiva kappa"]);
  this.executeCharTest("𝟇", ["sans serif negrita cursiva phi", "sans serif negrita cursiva phi", "sans serif negrita cursiva phi"]);
  this.executeCharTest("𝟈", ["sans serif negrita cursiva rho", "sans serif negrita cursiva rho", "sans serif negrita cursiva rho"]);
  this.executeCharTest("𝟉", ["sans serif negrita cursiva pi", "sans serif negrita cursiva pi", "sans serif negrita cursiva pi"]);
  this.executeCharTest("⁰", ["superíndice 0", "superíndice 0", "superíndice 0"]);
  this.executeCharTest("¹", ["superíndice 1", "superíndice 1", "superíndice 1"]);
  this.executeCharTest("²", ["al cuadrado", "al cuadrado", "al cuadrado"]);
  this.executeCharTest("³", ["al cubo", "al cubo", "al cubo"]);
  this.executeCharTest("⁴", ["superíndice 4", "superíndice 4", "superíndice 4"]);
  this.executeCharTest("⁵", ["superíndice 5", "superíndice 5", "superíndice 5"]);
  this.executeCharTest("⁶", ["superíndice 6", "superíndice 6", "superíndice 6"]);
  this.executeCharTest("⁷", ["superíndice 7", "superíndice 7", "superíndice 7"]);
  this.executeCharTest("⁸", ["superíndice 8", "superíndice 8", "superíndice 8"]);
  this.executeCharTest("⁹", ["superíndice 9", "superíndice 9", "superíndice 9"]);
  this.executeCharTest("₀", ["subíndice 0", "subíndice 0", "subíndice 0"]);
  this.executeCharTest("₁", ["subíndice 1", "subíndice 1", "subíndice 1"]);
  this.executeCharTest("₂", ["subíndice 2", "subíndice 2", "subíndice 2"]);
  this.executeCharTest("₃", ["subíndice 3", "subíndice 3", "subíndice 3"]);
  this.executeCharTest("₄", ["subíndice 4", "subíndice 4", "subíndice 4"]);
  this.executeCharTest("₅", ["subíndice 5", "subíndice 5", "subíndice 5"]);
  this.executeCharTest("₆", ["subíndice 6", "subíndice 6", "subíndice 6"]);
  this.executeCharTest("₇", ["subíndice 7", "subíndice 7", "subíndice 7"]);
  this.executeCharTest("₈", ["subíndice 8", "subíndice 8", "subíndice 8"]);
  this.executeCharTest("₉", ["subíndice 9", "subíndice 9", "subíndice 9"]);
  this.executeCharTest("⓪", ["0 en circulo", "0 en circulo", "0 en circulo"]);
  this.executeCharTest("①", ["1 en circulo", "1 en circulo", "1 en circulo"]);
  this.executeCharTest("②", ["2 en circulo", "2 en circulo", "2 en circulo"]);
  this.executeCharTest("③", ["3 en circulo", "3 en circulo", "3 en circulo"]);
  this.executeCharTest("④", ["4 en circulo", "4 en circulo", "4 en circulo"]);
  this.executeCharTest("⑤", ["5 en circulo", "5 en circulo", "5 en circulo"]);
  this.executeCharTest("⑥", ["6 en circulo", "6 en circulo", "6 en circulo"]);
  this.executeCharTest("⑦", ["7 en circulo", "7 en circulo", "7 en circulo"]);
  this.executeCharTest("⑧", ["8 en circulo", "8 en circulo", "8 en circulo"]);
  this.executeCharTest("⑨", ["9 en circulo", "9 en circulo", "9 en circulo"]);
  this.executeCharTest("⑩", ["10 en circulo", "10 en circulo", "10 en circulo"]);
  this.executeCharTest("⑪", ["11 en circulo", "11 en circulo", "11 en circulo"]);
  this.executeCharTest("⑫", ["12 en circulo", "12 en circulo", "12 en circulo"]);
  this.executeCharTest("⑬", ["13 en circulo", "13 en circulo", "13 en circulo"]);
  this.executeCharTest("⑭", ["14 en circulo", "14 en circulo", "14 en circulo"]);
  this.executeCharTest("⑮", ["15 en circulo", "15 en circulo", "15 en circulo"]);
  this.executeCharTest("⑯", ["16 en circulo", "16 en circulo", "16 en circulo"]);
  this.executeCharTest("⑰", ["17 en circulo", "17 en circulo", "17 en circulo"]);
  this.executeCharTest("⑱", ["18 en circulo", "18 en circulo", "18 en circulo"]);
  this.executeCharTest("⑲", ["19 en circulo", "19 en circulo", "19 en circulo"]);
  this.executeCharTest("⑳", ["20 en circulo", "20 en circulo", "20 en circulo"]);
  this.executeCharTest("㉑", ["21 en circulo", "21 en circulo", "21 en circulo"]);
  this.executeCharTest("㉒", ["22 en circulo", "22 en circulo", "22 en circulo"]);
  this.executeCharTest("㉓", ["23 en circulo", "23 en circulo", "23 en circulo"]);
  this.executeCharTest("㉔", ["24 en circulo", "24 en circulo", "24 en circulo"]);
  this.executeCharTest("㉕", ["25 en circulo", "25 en circulo", "25 en circulo"]);
  this.executeCharTest("㉖", ["26 en circulo", "26 en circulo", "26 en circulo"]);
  this.executeCharTest("㉗", ["27 en circulo", "27 en circulo", "27 en circulo"]);
  this.executeCharTest("㉘", ["28 en circulo", "28 en circulo", "28 en circulo"]);
  this.executeCharTest("㉙", ["29 en circulo", "29 en circulo", "29 en circulo"]);
  this.executeCharTest("㉚", ["30 en circulo", "30 en circulo", "30 en circulo"]);
  this.executeCharTest("㉛", ["31 en circulo", "31 en circulo", "31 en circulo"]);
  this.executeCharTest("㉜", ["32 en circulo", "32 en circulo", "32 en circulo"]);
  this.executeCharTest("㉝", ["33 en circulo", "33 en circulo", "33 en circulo"]);
  this.executeCharTest("㉞", ["34 en circulo", "34 en circulo", "34 en circulo"]);
  this.executeCharTest("㉟", ["35 en circulo", "35 en circulo", "35 en circulo"]);
  this.executeCharTest("㊱", ["36 en circulo", "36 en circulo", "36 en circulo"]);
  this.executeCharTest("㊲", ["37 en circulo", "37 en circulo", "37 en circulo"]);
  this.executeCharTest("㊳", ["38 en circulo", "38 en circulo", "38 en circulo"]);
  this.executeCharTest("㊴", ["39 en circulo", "39 en circulo", "39 en circulo"]);
  this.executeCharTest("㊵", ["40 en circulo", "40 en circulo", "40 en circulo"]);
  this.executeCharTest("㊶", ["41 en circulo", "41 en circulo", "41 en circulo"]);
  this.executeCharTest("㊷", ["42 en circulo", "42 en circulo", "42 en circulo"]);
  this.executeCharTest("㊸", ["43 en circulo", "43 en circulo", "43 en circulo"]);
  this.executeCharTest("㊹", ["44 en circulo", "44 en circulo", "44 en circulo"]);
  this.executeCharTest("㊺", ["45 en circulo", "45 en circulo", "45 en circulo"]);
  this.executeCharTest("㊻", ["46 en circulo", "46 en circulo", "46 en circulo"]);
  this.executeCharTest("㊼", ["47 en circulo", "47 en circulo", "47 en circulo"]);
  this.executeCharTest("㊽", ["48 en circulo", "48 en circulo", "48 en circulo"]);
  this.executeCharTest("㊾", ["49 en circulo", "49 en circulo", "49 en circulo"]);
  this.executeCharTest("㊿", ["50 en circulo", "50 en circulo", "50 en circulo"]);
  this.executeCharTest("⑴", ["1 entre paréntesis", "1 entre paréntesis", "1 entre paréntesis"]);
  this.executeCharTest("⑵", ["2 entre paréntesis", "2 entre paréntesis", "2 entre paréntesis"]);
  this.executeCharTest("⑶", ["3 entre paréntesis", "3 entre paréntesis", "3 entre paréntesis"]);
  this.executeCharTest("⑷", ["4 entre paréntesis", "4 entre paréntesis", "4 entre paréntesis"]);
  this.executeCharTest("⑸", ["5 entre paréntesis", "5 entre paréntesis", "5 entre paréntesis"]);
  this.executeCharTest("⑹", ["6 entre paréntesis", "6 entre paréntesis", "6 entre paréntesis"]);
  this.executeCharTest("⑺", ["7 entre paréntesis", "7 entre paréntesis", "7 entre paréntesis"]);
  this.executeCharTest("⑻", ["8 entre paréntesis", "8 entre paréntesis", "8 entre paréntesis"]);
  this.executeCharTest("⑼", ["9 entre paréntesis", "9 entre paréntesis", "9 entre paréntesis"]);
  this.executeCharTest("⑽", ["10 entre paréntesis", "10 entre paréntesis", "10 entre paréntesis"]);
  this.executeCharTest("⑾", ["11 entre paréntesis", "11 entre paréntesis", "11 entre paréntesis"]);
  this.executeCharTest("⑿", ["12 entre paréntesis", "12 entre paréntesis", "12 entre paréntesis"]);
  this.executeCharTest("⒀", ["13 entre paréntesis", "13 entre paréntesis", "13 entre paréntesis"]);
  this.executeCharTest("⒁", ["14 entre paréntesis", "14 entre paréntesis", "14 entre paréntesis"]);
  this.executeCharTest("⒂", ["15 entre paréntesis", "15 entre paréntesis", "15 entre paréntesis"]);
  this.executeCharTest("⒃", ["16 entre paréntesis", "16 entre paréntesis", "16 entre paréntesis"]);
  this.executeCharTest("⒄", ["17 entre paréntesis", "17 entre paréntesis", "17 entre paréntesis"]);
  this.executeCharTest("⒅", ["18 entre paréntesis", "18 entre paréntesis", "18 entre paréntesis"]);
  this.executeCharTest("⒆", ["19 entre paréntesis", "19 entre paréntesis", "19 entre paréntesis"]);
  this.executeCharTest("⒇", ["20 entre paréntesis", "20 entre paréntesis", "20 entre paréntesis"]);
  this.executeCharTest("🄀", ["0 punto", "0 punto", "0 punto"]);
  this.executeCharTest("⒈", ["1 punto", "1 punto", "1 punto"]);
  this.executeCharTest("⒉", ["2 punto", "2 punto", "2 punto"]);
  this.executeCharTest("⒊", ["3 punto", "3 punto", "3 punto"]);
  this.executeCharTest("⒋", ["4 punto", "4 punto", "4 punto"]);
  this.executeCharTest("⒌", ["5 punto", "5 punto", "5 punto"]);
  this.executeCharTest("⒍", ["6 punto", "6 punto", "6 punto"]);
  this.executeCharTest("⒎", ["7 punto", "7 punto", "7 punto"]);
  this.executeCharTest("⒏", ["8 punto", "8 punto", "8 punto"]);
  this.executeCharTest("⒐", ["9 punto", "9 punto", "9 punto"]);
  this.executeCharTest("⒑", ["10 punto", "10 punto", "10 punto"]);
  this.executeCharTest("⒒", ["11 punto", "11 punto", "11 punto"]);
  this.executeCharTest("⒓", ["12 punto", "12 punto", "12 punto"]);
  this.executeCharTest("⒔", ["13 punto", "13 punto", "13 punto"]);
  this.executeCharTest("⒕", ["14 punto", "14 punto", "14 punto"]);
  this.executeCharTest("⒖", ["15 punto", "15 punto", "15 punto"]);
  this.executeCharTest("⒗", ["16 punto", "16 punto", "16 punto"]);
  this.executeCharTest("⒘", ["17 punto", "17 punto", "17 punto"]);
  this.executeCharTest("⒙", ["18 punto", "18 punto", "18 punto"]);
  this.executeCharTest("⒚", ["19 punto", "19 punto", "19 punto"]);
  this.executeCharTest("⒛", ["20 punto", "20 punto", "20 punto"]);
  this.executeCharTest("⓿", ["0 en circulo negro", "0 en circulo negro", "0 en circulo negro"]);
  this.executeCharTest("❶", ["1 en circulo negro", "1 en circulo negro", "1 en circulo negro"]);
  this.executeCharTest("❷", ["2 en circulo negro", "2 en circulo negro", "2 en circulo negro"]);
  this.executeCharTest("❸", ["3 en circulo negro", "3 en circulo negro", "3 en circulo negro"]);
  this.executeCharTest("❹", ["4 en circulo negro", "4 en circulo negro", "4 en circulo negro"]);
  this.executeCharTest("❺", ["5 en circulo negro", "5 en circulo negro", "5 en circulo negro"]);
  this.executeCharTest("❻", ["6 en circulo negro", "6 en circulo negro", "6 en circulo negro"]);
  this.executeCharTest("❼", ["7 en circulo negro", "7 en circulo negro", "7 en circulo negro"]);
  this.executeCharTest("❽", ["8 en circulo negro", "8 en circulo negro", "8 en circulo negro"]);
  this.executeCharTest("❾", ["9 en circulo negro", "9 en circulo negro", "9 en circulo negro"]);
  this.executeCharTest("❿", ["10 en circulo negro", "10 en circulo negro", "10 en circulo negro"]);
  this.executeCharTest("⓫", ["11 en circulo negro", "11 en circulo negro", "11 en circulo negro"]);
  this.executeCharTest("⓬", ["12 en circulo negro", "12 en circulo negro", "12 en circulo negro"]);
  this.executeCharTest("⓭", ["13 en circulo negro", "13 en circulo negro", "13 en circulo negro"]);
  this.executeCharTest("⓮", ["14 en circulo negro", "14 en circulo negro", "14 en circulo negro"]);
  this.executeCharTest("⓯", ["15 en circulo negro", "15 en circulo negro", "15 en circulo negro"]);
  this.executeCharTest("⓰", ["16 en circulo negro", "16 en circulo negro", "16 en circulo negro"]);
  this.executeCharTest("⓱", ["17 en circulo negro", "17 en circulo negro", "17 en circulo negro"]);
  this.executeCharTest("⓲", ["18 en circulo negro", "18 en circulo negro", "18 en circulo negro"]);
  this.executeCharTest("⓳", ["19 en circulo negro", "19 en circulo negro", "19 en circulo negro"]);
  this.executeCharTest("⓴", ["20 en circulo negro", "20 en circulo negro", "20 en circulo negro"]);
  this.executeCharTest("⓵", ["1 en doble circulo", "1 en doble circulo", "1 en doble circulo"]);
  this.executeCharTest("⓶", ["2 en doble circulo", "2 en doble circulo", "2 en doble circulo"]);
  this.executeCharTest("⓷", ["3 en doble circulo", "3 en doble circulo", "3 en doble circulo"]);
  this.executeCharTest("⓸", ["4 en doble circulo", "4 en doble circulo", "4 en doble circulo"]);
  this.executeCharTest("⓹", ["5 en doble circulo", "5 en doble circulo", "5 en doble circulo"]);
  this.executeCharTest("⓺", ["6 en doble circulo", "6 en doble circulo", "6 en doble circulo"]);
  this.executeCharTest("⓻", ["7 en doble circulo", "7 en doble circulo", "7 en doble circulo"]);
  this.executeCharTest("⓼", ["8 en doble circulo", "8 en doble circulo", "8 en doble circulo"]);
  this.executeCharTest("⓽", ["9 en doble circulo", "9 en doble circulo", "9 en doble circulo"]);
  this.executeCharTest("⓾", ["10 en doble circulo", "10 en doble circulo", "10 en doble circulo"]);
  this.executeCharTest("🄋", ["sans serif 0 en circulo", "sans serif 0 en circulo", "sans serif 0 en circulo"]);
  this.executeCharTest("➀", ["sans serif 1 en circulo", "sans serif 1 en circulo", "sans serif 1 en circulo"]);
  this.executeCharTest("➁", ["sans serif 2 en circulo", "sans serif 2 en circulo", "sans serif 2 en circulo"]);
  this.executeCharTest("➂", ["sans serif 3 en circulo", "sans serif 3 en circulo", "sans serif 3 en circulo"]);
  this.executeCharTest("➃", ["sans serif 4 en circulo", "sans serif 4 en circulo", "sans serif 4 en circulo"]);
  this.executeCharTest("➄", ["sans serif 5 en circulo", "sans serif 5 en circulo", "sans serif 5 en circulo"]);
  this.executeCharTest("➅", ["sans serif 6 en circulo", "sans serif 6 en circulo", "sans serif 6 en circulo"]);
  this.executeCharTest("➆", ["sans serif 7 en circulo", "sans serif 7 en circulo", "sans serif 7 en circulo"]);
  this.executeCharTest("➇", ["sans serif 8 en circulo", "sans serif 8 en circulo", "sans serif 8 en circulo"]);
  this.executeCharTest("➈", ["sans serif 9 en circulo", "sans serif 9 en circulo", "sans serif 9 en circulo"]);
  this.executeCharTest("➉", ["sans serif 10 en circulo", "sans serif 10 en circulo", "sans serif 10 en circulo"]);
  this.executeCharTest("🄌", ["sans serif 0 en circulo negro", "sans serif 0 en circulo negro", "sans serif 0 en circulo negro"]);
  this.executeCharTest("➊", ["sans serif 1 en circulo negro", "sans serif 1 en circulo negro", "sans serif 1 en circulo negro"]);
  this.executeCharTest("➋", ["sans serif 2 en circulo negro", "sans serif 2 en circulo negro", "sans serif 2 en circulo negro"]);
  this.executeCharTest("➌", ["sans serif 3 en circulo negro", "sans serif 3 en circulo negro", "sans serif 3 en circulo negro"]);
  this.executeCharTest("➍", ["sans serif 4 en circulo negro", "sans serif 4 en circulo negro", "sans serif 4 en circulo negro"]);
  this.executeCharTest("➎", ["sans serif 5 en circulo negro", "sans serif 5 en circulo negro", "sans serif 5 en circulo negro"]);
  this.executeCharTest("➏", ["sans serif 6 en circulo negro", "sans serif 6 en circulo negro", "sans serif 6 en circulo negro"]);
  this.executeCharTest("➐", ["sans serif 7 en circulo negro", "sans serif 7 en circulo negro", "sans serif 7 en circulo negro"]);
  this.executeCharTest("➑", ["sans serif 8 en circulo negro", "sans serif 8 en circulo negro", "sans serif 8 en circulo negro"]);
  this.executeCharTest("➒", ["sans serif 9 en circulo negro", "sans serif 9 en circulo negro", "sans serif 9 en circulo negro"]);
  this.executeCharTest("➓", ["sans serif 10 en circulo negro", "sans serif 10 en circulo negro", "sans serif 10 en circulo negro"]);
  this.executeCharTest("０", ["0", "0", "0"]);
  this.executeCharTest("１", ["1", "1", "1"]);
  this.executeCharTest("２", ["2", "2", "2"]);
  this.executeCharTest("３", ["3", "3", "3"]);
  this.executeCharTest("４", ["4", "4", "4"]);
  this.executeCharTest("５", ["5", "5", "5"]);
  this.executeCharTest("６", ["6", "6", "6"]);
  this.executeCharTest("７", ["7", "7", "7"]);
  this.executeCharTest("８", ["8", "8", "8"]);
  this.executeCharTest("９", ["9", "9", "9"]);
  this.executeCharTest("𝟎", ["negrita 0", "negrita 0", "negrita 0"]);
  this.executeCharTest("𝟏", ["negrita 1", "negrita 1", "negrita 1"]);
  this.executeCharTest("𝟐", ["negrita 2", "negrita 2", "negrita 2"]);
  this.executeCharTest("𝟑", ["negrita 3", "negrita 3", "negrita 3"]);
  this.executeCharTest("𝟒", ["negrita 4", "negrita 4", "negrita 4"]);
  this.executeCharTest("𝟓", ["negrita 5", "negrita 5", "negrita 5"]);
  this.executeCharTest("𝟔", ["negrita 6", "negrita 6", "negrita 6"]);
  this.executeCharTest("𝟕", ["negrita 7", "negrita 7", "negrita 7"]);
  this.executeCharTest("𝟖", ["negrita 8", "negrita 8", "negrita 8"]);
  this.executeCharTest("𝟗", ["negrita 9", "negrita 9", "negrita 9"]);
  this.executeCharTest("𝟘", ["negrita de pizarra 0", "negrita de pizarra 0", "negrita de pizarra 0"]);
  this.executeCharTest("𝟙", ["negrita de pizarra 1", "negrita de pizarra 1", "negrita de pizarra 1"]);
  this.executeCharTest("𝟚", ["negrita de pizarra 2", "negrita de pizarra 2", "negrita de pizarra 2"]);
  this.executeCharTest("𝟛", ["negrita de pizarra 3", "negrita de pizarra 3", "negrita de pizarra 3"]);
  this.executeCharTest("𝟜", ["negrita de pizarra 4", "negrita de pizarra 4", "negrita de pizarra 4"]);
  this.executeCharTest("𝟝", ["negrita de pizarra 5", "negrita de pizarra 5", "negrita de pizarra 5"]);
  this.executeCharTest("𝟞", ["negrita de pizarra 6", "negrita de pizarra 6", "negrita de pizarra 6"]);
  this.executeCharTest("𝟟", ["negrita de pizarra 7", "negrita de pizarra 7", "negrita de pizarra 7"]);
  this.executeCharTest("𝟠", ["negrita de pizarra 8", "negrita de pizarra 8", "negrita de pizarra 8"]);
  this.executeCharTest("𝟡", ["negrita de pizarra 9", "negrita de pizarra 9", "negrita de pizarra 9"]);
  this.executeCharTest("𝟢", ["sans serif 0", "sans serif 0", "sans serif 0"]);
  this.executeCharTest("𝟣", ["sans serif 1", "sans serif 1", "sans serif 1"]);
  this.executeCharTest("𝟤", ["sans serif 2", "sans serif 2", "sans serif 2"]);
  this.executeCharTest("𝟥", ["sans serif 3", "sans serif 3", "sans serif 3"]);
  this.executeCharTest("𝟦", ["sans serif 4", "sans serif 4", "sans serif 4"]);
  this.executeCharTest("𝟧", ["sans serif 5", "sans serif 5", "sans serif 5"]);
  this.executeCharTest("𝟨", ["sans serif 6", "sans serif 6", "sans serif 6"]);
  this.executeCharTest("𝟩", ["sans serif 7", "sans serif 7", "sans serif 7"]);
  this.executeCharTest("𝟪", ["sans serif 8", "sans serif 8", "sans serif 8"]);
  this.executeCharTest("𝟫", ["sans serif 9", "sans serif 9", "sans serif 9"]);
  this.executeCharTest("𝟬", ["sans serif negrita 0", "sans serif negrita 0", "sans serif negrita 0"]);
  this.executeCharTest("𝟭", ["sans serif negrita 1", "sans serif negrita 1", "sans serif negrita 1"]);
  this.executeCharTest("𝟮", ["sans serif negrita 2", "sans serif negrita 2", "sans serif negrita 2"]);
  this.executeCharTest("𝟯", ["sans serif negrita 3", "sans serif negrita 3", "sans serif negrita 3"]);
  this.executeCharTest("𝟰", ["sans serif negrita 4", "sans serif negrita 4", "sans serif negrita 4"]);
  this.executeCharTest("𝟱", ["sans serif negrita 5", "sans serif negrita 5", "sans serif negrita 5"]);
  this.executeCharTest("𝟲", ["sans serif negrita 6", "sans serif negrita 6", "sans serif negrita 6"]);
  this.executeCharTest("𝟳", ["sans serif negrita 7", "sans serif negrita 7", "sans serif negrita 7"]);
  this.executeCharTest("𝟴", ["sans serif negrita 8", "sans serif negrita 8", "sans serif negrita 8"]);
  this.executeCharTest("𝟵", ["sans serif negrita 9", "sans serif negrita 9", "sans serif negrita 9"]);
  this.executeCharTest("𝟶", ["monoespacio 0", "monoespacio 0", "monoespacio 0"]);
  this.executeCharTest("𝟷", ["monoespacio 1", "monoespacio 1", "monoespacio 1"]);
  this.executeCharTest("𝟸", ["monoespacio 2", "monoespacio 2", "monoespacio 2"]);
  this.executeCharTest("𝟹", ["monoespacio 3", "monoespacio 3", "monoespacio 3"]);
  this.executeCharTest("𝟺", ["monoespacio 4", "monoespacio 4", "monoespacio 4"]);
  this.executeCharTest("𝟻", ["monoespacio 5", "monoespacio 5", "monoespacio 5"]);
  this.executeCharTest("𝟼", ["monoespacio 6", "monoespacio 6", "monoespacio 6"]);
  this.executeCharTest("𝟽", ["monoespacio 7", "monoespacio 7", "monoespacio 7"]);
  this.executeCharTest("𝟾", ["monoespacio 8", "monoespacio 8", "monoespacio 8"]);
  this.executeCharTest("𝟿", ["monoespacio 9", "monoespacio 9", "monoespacio 9"]);
  this.executeCharTest("🄁", ["0 coma", "0 coma", "0 coma"]);
  this.executeCharTest("🄂", ["1 coma", "1 coma", "1 coma"]);
  this.executeCharTest("🄃", ["2 coma", "2 coma", "2 coma"]);
  this.executeCharTest("🄄", ["3 coma", "3 coma", "3 coma"]);
  this.executeCharTest("🄅", ["4 coma", "4 coma", "4 coma"]);
  this.executeCharTest("🄆", ["5 coma", "5 coma", "5 coma"]);
  this.executeCharTest("🄇", ["6 coma", "6 coma", "6 coma"]);
  this.executeCharTest("🄈", ["7 coma", "7 coma", "7 coma"]);
  this.executeCharTest("🄉", ["8 coma", "8 coma", "8 coma"]);
  this.executeCharTest("🄊", ["9 coma", "9 coma", "9 coma"]);
  this.executeCharTest("Ⓐ", ["mayúscula A en circulo", "mayúscula A en circulo", "mayúscula A en circulo"]);
  this.executeCharTest("Ⓑ", ["mayúscula B en circulo", "mayúscula B en circulo", "mayúscula B en circulo"]);
  this.executeCharTest("Ⓒ", ["mayúscula C en circulo", "mayúscula C en circulo", "mayúscula C en circulo"]);
  this.executeCharTest("Ⓓ", ["mayúscula D en circulo", "mayúscula D en circulo", "mayúscula D en circulo"]);
  this.executeCharTest("Ⓔ", ["mayúscula E en circulo", "mayúscula E en circulo", "mayúscula E en circulo"]);
  this.executeCharTest("Ⓕ", ["mayúscula F en circulo", "mayúscula F en circulo", "mayúscula F en circulo"]);
  this.executeCharTest("Ⓖ", ["mayúscula G en circulo", "mayúscula G en circulo", "mayúscula G en circulo"]);
  this.executeCharTest("Ⓗ", ["mayúscula H en circulo", "mayúscula H en circulo", "mayúscula H en circulo"]);
  this.executeCharTest("Ⓘ", ["mayúscula I en circulo", "mayúscula I en circulo", "mayúscula I en circulo"]);
  this.executeCharTest("Ⓙ", ["mayúscula J en circulo", "mayúscula J en circulo", "mayúscula J en circulo"]);
  this.executeCharTest("Ⓚ", ["mayúscula K en circulo", "mayúscula K en circulo", "mayúscula K en circulo"]);
  this.executeCharTest("Ⓛ", ["mayúscula L en circulo", "mayúscula L en circulo", "mayúscula L en circulo"]);
  this.executeCharTest("Ⓜ", ["mayúscula M en circulo", "mayúscula M en circulo", "mayúscula M en circulo"]);
  this.executeCharTest("Ⓝ", ["mayúscula N en circulo", "mayúscula N en circulo", "mayúscula N en circulo"]);
  this.executeCharTest("Ⓞ", ["mayúscula O en circulo", "mayúscula O en circulo", "mayúscula O en circulo"]);
  this.executeCharTest("Ⓟ", ["mayúscula P en circulo", "mayúscula P en circulo", "mayúscula P en circulo"]);
  this.executeCharTest("Ⓠ", ["mayúscula Q en circulo", "mayúscula Q en circulo", "mayúscula Q en circulo"]);
  this.executeCharTest("Ⓡ", ["mayúscula R en circulo", "mayúscula R en circulo", "mayúscula R en circulo"]);
  this.executeCharTest("Ⓢ", ["mayúscula S en circulo", "mayúscula S en circulo", "mayúscula S en circulo"]);
  this.executeCharTest("Ⓣ", ["mayúscula T en circulo", "mayúscula T en circulo", "mayúscula T en circulo"]);
  this.executeCharTest("Ⓤ", ["mayúscula U en circulo", "mayúscula U en circulo", "mayúscula U en circulo"]);
  this.executeCharTest("Ⓥ", ["mayúscula V en circulo", "mayúscula V en circulo", "mayúscula V en circulo"]);
  this.executeCharTest("Ⓦ", ["mayúscula W en circulo", "mayúscula W en circulo", "mayúscula W en circulo"]);
  this.executeCharTest("Ⓧ", ["mayúscula X en circulo", "mayúscula X en circulo", "mayúscula X en circulo"]);
  this.executeCharTest("Ⓨ", ["mayúscula Y en circulo", "mayúscula Y en circulo", "mayúscula Y en circulo"]);
  this.executeCharTest("Ⓩ", ["mayúscula Z en circulo", "mayúscula Z en circulo", "mayúscula Z en circulo"]);
  this.executeCharTest("ⓐ", ["a en circulo", "a en circulo", "a en circulo"]);
  this.executeCharTest("ⓑ", ["b en circulo", "b en circulo", "b en circulo"]);
  this.executeCharTest("ⓒ", ["c en circulo", "c en circulo", "c en circulo"]);
  this.executeCharTest("ⓓ", ["d en circulo", "d en circulo", "d en circulo"]);
  this.executeCharTest("ⓔ", ["e en circulo", "e en circulo", "e en circulo"]);
  this.executeCharTest("ⓕ", ["f en circulo", "f en circulo", "f en circulo"]);
  this.executeCharTest("ⓖ", ["g en circulo", "g en circulo", "g en circulo"]);
  this.executeCharTest("ⓗ", ["h en circulo", "h en circulo", "h en circulo"]);
  this.executeCharTest("ⓘ", ["i en circulo", "i en circulo", "i en circulo"]);
  this.executeCharTest("ⓙ", ["j en circulo", "j en circulo", "j en circulo"]);
  this.executeCharTest("ⓚ", ["k en circulo", "k en circulo", "k en circulo"]);
  this.executeCharTest("ⓛ", ["l en circulo", "l en circulo", "l en circulo"]);
  this.executeCharTest("ⓜ", ["m en circulo", "m en circulo", "m en circulo"]);
  this.executeCharTest("ⓝ", ["n en circulo", "n en circulo", "n en circulo"]);
  this.executeCharTest("ⓞ", ["o en circulo", "o en circulo", "o en circulo"]);
  this.executeCharTest("ⓟ", ["p en circulo", "p en circulo", "p en circulo"]);
  this.executeCharTest("ⓠ", ["q en circulo", "q en circulo", "q en circulo"]);
  this.executeCharTest("ⓡ", ["r en circulo", "r en circulo", "r en circulo"]);
  this.executeCharTest("ⓢ", ["s en circulo", "s en circulo", "s en circulo"]);
  this.executeCharTest("ⓣ", ["t en circulo", "t en circulo", "t en circulo"]);
  this.executeCharTest("ⓤ", ["u en circulo", "u en circulo", "u en circulo"]);
  this.executeCharTest("ⓥ", ["v en circulo", "v en circulo", "v en circulo"]);
  this.executeCharTest("ⓦ", ["w en circulo", "w en circulo", "w en circulo"]);
  this.executeCharTest("ⓧ", ["x en circulo", "x en circulo", "x en circulo"]);
  this.executeCharTest("ⓨ", ["y en circulo", "y en circulo", "y en circulo"]);
  this.executeCharTest("ⓩ", ["z en circulo", "z en circulo", "z en circulo"]);
  this.executeCharTest("🄐", ["mayúscula A entre paréntesis", "mayúscula A entre paréntesis", "mayúscula A entre paréntesis"]);
  this.executeCharTest("🄑", ["mayúscula B entre paréntesis", "mayúscula B entre paréntesis", "mayúscula B entre paréntesis"]);
  this.executeCharTest("🄒", ["mayúscula C entre paréntesis", "mayúscula C entre paréntesis", "mayúscula C entre paréntesis"]);
  this.executeCharTest("🄓", ["mayúscula D entre paréntesis", "mayúscula D entre paréntesis", "mayúscula D entre paréntesis"]);
  this.executeCharTest("🄔", ["mayúscula E entre paréntesis", "mayúscula E entre paréntesis", "mayúscula E entre paréntesis"]);
  this.executeCharTest("🄕", ["mayúscula F entre paréntesis", "mayúscula F entre paréntesis", "mayúscula F entre paréntesis"]);
  this.executeCharTest("🄖", ["mayúscula G entre paréntesis", "mayúscula G entre paréntesis", "mayúscula G entre paréntesis"]);
  this.executeCharTest("🄗", ["mayúscula H entre paréntesis", "mayúscula H entre paréntesis", "mayúscula H entre paréntesis"]);
  this.executeCharTest("🄘", ["mayúscula I entre paréntesis", "mayúscula I entre paréntesis", "mayúscula I entre paréntesis"]);
  this.executeCharTest("🄙", ["mayúscula J entre paréntesis", "mayúscula J entre paréntesis", "mayúscula J entre paréntesis"]);
  this.executeCharTest("🄚", ["mayúscula K entre paréntesis", "mayúscula K entre paréntesis", "mayúscula K entre paréntesis"]);
  this.executeCharTest("🄛", ["mayúscula L entre paréntesis", "mayúscula L entre paréntesis", "mayúscula L entre paréntesis"]);
  this.executeCharTest("🄜", ["mayúscula M entre paréntesis", "mayúscula M entre paréntesis", "mayúscula M entre paréntesis"]);
  this.executeCharTest("🄝", ["mayúscula N entre paréntesis", "mayúscula N entre paréntesis", "mayúscula N entre paréntesis"]);
  this.executeCharTest("🄞", ["mayúscula O entre paréntesis", "mayúscula O entre paréntesis", "mayúscula O entre paréntesis"]);
  this.executeCharTest("🄟", ["mayúscula P entre paréntesis", "mayúscula P entre paréntesis", "mayúscula P entre paréntesis"]);
  this.executeCharTest("🄠", ["mayúscula Q entre paréntesis", "mayúscula Q entre paréntesis", "mayúscula Q entre paréntesis"]);
  this.executeCharTest("🄡", ["mayúscula R entre paréntesis", "mayúscula R entre paréntesis", "mayúscula R entre paréntesis"]);
  this.executeCharTest("🄢", ["mayúscula S entre paréntesis", "mayúscula S entre paréntesis", "mayúscula S entre paréntesis"]);
  this.executeCharTest("🄣", ["mayúscula T entre paréntesis", "mayúscula T entre paréntesis", "mayúscula T entre paréntesis"]);
  this.executeCharTest("🄤", ["mayúscula U entre paréntesis", "mayúscula U entre paréntesis", "mayúscula U entre paréntesis"]);
  this.executeCharTest("🄥", ["mayúscula V entre paréntesis", "mayúscula V entre paréntesis", "mayúscula V entre paréntesis"]);
  this.executeCharTest("🄦", ["mayúscula W entre paréntesis", "mayúscula W entre paréntesis", "mayúscula W entre paréntesis"]);
  this.executeCharTest("🄧", ["mayúscula X entre paréntesis", "mayúscula X entre paréntesis", "mayúscula X entre paréntesis"]);
  this.executeCharTest("🄨", ["mayúscula Y entre paréntesis", "mayúscula Y entre paréntesis", "mayúscula Y entre paréntesis"]);
  this.executeCharTest("🄩", ["mayúscula Z entre paréntesis", "mayúscula Z entre paréntesis", "mayúscula Z entre paréntesis"]);
  this.executeCharTest("⒜", ["a entre paréntesis", "a entre paréntesis", "a entre paréntesis"]);
  this.executeCharTest("⒝", ["b entre paréntesis", "b entre paréntesis", "b entre paréntesis"]);
  this.executeCharTest("⒞", ["c entre paréntesis", "c entre paréntesis", "c entre paréntesis"]);
  this.executeCharTest("⒟", ["d entre paréntesis", "d entre paréntesis", "d entre paréntesis"]);
  this.executeCharTest("⒠", ["e entre paréntesis", "e entre paréntesis", "e entre paréntesis"]);
  this.executeCharTest("⒡", ["f entre paréntesis", "f entre paréntesis", "f entre paréntesis"]);
  this.executeCharTest("⒢", ["g entre paréntesis", "g entre paréntesis", "g entre paréntesis"]);
  this.executeCharTest("⒣", ["h entre paréntesis", "h entre paréntesis", "h entre paréntesis"]);
  this.executeCharTest("⒤", ["i entre paréntesis", "i entre paréntesis", "i entre paréntesis"]);
  this.executeCharTest("⒥", ["j entre paréntesis", "j entre paréntesis", "j entre paréntesis"]);
  this.executeCharTest("⒦", ["k entre paréntesis", "k entre paréntesis", "k entre paréntesis"]);
  this.executeCharTest("⒧", ["l entre paréntesis", "l entre paréntesis", "l entre paréntesis"]);
  this.executeCharTest("⒨", ["m entre paréntesis", "m entre paréntesis", "m entre paréntesis"]);
  this.executeCharTest("⒩", ["n entre paréntesis", "n entre paréntesis", "n entre paréntesis"]);
  this.executeCharTest("⒪", ["o entre paréntesis", "o entre paréntesis", "o entre paréntesis"]);
  this.executeCharTest("⒫", ["p entre paréntesis", "p entre paréntesis", "p entre paréntesis"]);
  this.executeCharTest("⒬", ["q entre paréntesis", "q entre paréntesis", "q entre paréntesis"]);
  this.executeCharTest("⒭", ["r entre paréntesis", "r entre paréntesis", "r entre paréntesis"]);
  this.executeCharTest("⒮", ["s entre paréntesis", "s entre paréntesis", "s entre paréntesis"]);
  this.executeCharTest("⒯", ["t entre paréntesis", "t entre paréntesis", "t entre paréntesis"]);
  this.executeCharTest("⒰", ["u entre paréntesis", "u entre paréntesis", "u entre paréntesis"]);
  this.executeCharTest("⒱", ["v entre paréntesis", "v entre paréntesis", "v entre paréntesis"]);
  this.executeCharTest("⒲", ["w entre paréntesis", "w entre paréntesis", "w entre paréntesis"]);
  this.executeCharTest("⒳", ["x entre paréntesis", "x entre paréntesis", "x entre paréntesis"]);
  this.executeCharTest("⒴", ["y entre paréntesis", "y entre paréntesis", "y entre paréntesis"]);
  this.executeCharTest("⒵", ["z entre paréntesis", "z entre paréntesis", "z entre paréntesis"]);
  this.executeCharTest("🄰", ["mayúscula A en cuadrado", "mayúscula A en cuadrado", "mayúscula A en cuadrado"]);
  this.executeCharTest("🄱", ["mayúscula B en cuadrado", "mayúscula B en cuadrado", "mayúscula B en cuadrado"]);
  this.executeCharTest("🄲", ["mayúscula C en cuadrado", "mayúscula C en cuadrado", "mayúscula C en cuadrado"]);
  this.executeCharTest("🄳", ["mayúscula D en cuadrado", "mayúscula D en cuadrado", "mayúscula D en cuadrado"]);
  this.executeCharTest("🄴", ["mayúscula E en cuadrado", "mayúscula E en cuadrado", "mayúscula E en cuadrado"]);
  this.executeCharTest("🄵", ["mayúscula F en cuadrado", "mayúscula F en cuadrado", "mayúscula F en cuadrado"]);
  this.executeCharTest("🄶", ["mayúscula G en cuadrado", "mayúscula G en cuadrado", "mayúscula G en cuadrado"]);
  this.executeCharTest("🄷", ["mayúscula H en cuadrado", "mayúscula H en cuadrado", "mayúscula H en cuadrado"]);
  this.executeCharTest("🄸", ["mayúscula I en cuadrado", "mayúscula I en cuadrado", "mayúscula I en cuadrado"]);
  this.executeCharTest("🄹", ["mayúscula J en cuadrado", "mayúscula J en cuadrado", "mayúscula J en cuadrado"]);
  this.executeCharTest("🄺", ["mayúscula K en cuadrado", "mayúscula K en cuadrado", "mayúscula K en cuadrado"]);
  this.executeCharTest("🄻", ["mayúscula L en cuadrado", "mayúscula L en cuadrado", "mayúscula L en cuadrado"]);
  this.executeCharTest("🄼", ["mayúscula M en cuadrado", "mayúscula M en cuadrado", "mayúscula M en cuadrado"]);
  this.executeCharTest("🄽", ["mayúscula N en cuadrado", "mayúscula N en cuadrado", "mayúscula N en cuadrado"]);
  this.executeCharTest("🄾", ["mayúscula O en cuadrado", "mayúscula O en cuadrado", "mayúscula O en cuadrado"]);
  this.executeCharTest("🄿", ["mayúscula P en cuadrado", "mayúscula P en cuadrado", "mayúscula P en cuadrado"]);
  this.executeCharTest("🅀", ["mayúscula Q en cuadrado", "mayúscula Q en cuadrado", "mayúscula Q en cuadrado"]);
  this.executeCharTest("🅁", ["mayúscula R en cuadrado", "mayúscula R en cuadrado", "mayúscula R en cuadrado"]);
  this.executeCharTest("🅂", ["mayúscula S en cuadrado", "mayúscula S en cuadrado", "mayúscula S en cuadrado"]);
  this.executeCharTest("🅃", ["mayúscula T en cuadrado", "mayúscula T en cuadrado", "mayúscula T en cuadrado"]);
  this.executeCharTest("🅄", ["mayúscula U en cuadrado", "mayúscula U en cuadrado", "mayúscula U en cuadrado"]);
  this.executeCharTest("🅅", ["mayúscula V en cuadrado", "mayúscula V en cuadrado", "mayúscula V en cuadrado"]);
  this.executeCharTest("🅆", ["mayúscula W en cuadrado", "mayúscula W en cuadrado", "mayúscula W en cuadrado"]);
  this.executeCharTest("🅇", ["mayúscula X en cuadrado", "mayúscula X en cuadrado", "mayúscula X en cuadrado"]);
  this.executeCharTest("🅈", ["mayúscula Y en cuadrado", "mayúscula Y en cuadrado", "mayúscula Y en cuadrado"]);
  this.executeCharTest("🅉", ["mayúscula Z en cuadrado", "mayúscula Z en cuadrado", "mayúscula Z en cuadrado"]);
  this.executeCharTest("🅰", ["mayúscula A en cuadrado negro", "mayúscula A en cuadrado negro", "mayúscula A en cuadrado negro"]);
  this.executeCharTest("🅱", ["mayúscula B en cuadrado negro", "mayúscula B en cuadrado negro", "mayúscula B en cuadrado negro"]);
  this.executeCharTest("🅲", ["mayúscula C en cuadrado negro", "mayúscula C en cuadrado negro", "mayúscula C en cuadrado negro"]);
  this.executeCharTest("🅳", ["mayúscula D en cuadrado negro", "mayúscula D en cuadrado negro", "mayúscula D en cuadrado negro"]);
  this.executeCharTest("🅴", ["mayúscula E en cuadrado negro", "mayúscula E en cuadrado negro", "mayúscula E en cuadrado negro"]);
  this.executeCharTest("🅵", ["mayúscula F en cuadrado negro", "mayúscula F en cuadrado negro", "mayúscula F en cuadrado negro"]);
  this.executeCharTest("🅶", ["mayúscula G en cuadrado negro", "mayúscula G en cuadrado negro", "mayúscula G en cuadrado negro"]);
  this.executeCharTest("🅷", ["mayúscula H en cuadrado negro", "mayúscula H en cuadrado negro", "mayúscula H en cuadrado negro"]);
  this.executeCharTest("🅸", ["mayúscula I en cuadrado negro", "mayúscula I en cuadrado negro", "mayúscula I en cuadrado negro"]);
  this.executeCharTest("🅹", ["mayúscula J en cuadrado negro", "mayúscula J en cuadrado negro", "mayúscula J en cuadrado negro"]);
  this.executeCharTest("🅺", ["mayúscula K en cuadrado negro", "mayúscula K en cuadrado negro", "mayúscula K en cuadrado negro"]);
  this.executeCharTest("🅻", ["mayúscula L en cuadrado negro", "mayúscula L en cuadrado negro", "mayúscula L en cuadrado negro"]);
  this.executeCharTest("🅼", ["mayúscula M en cuadrado negro", "mayúscula M en cuadrado negro", "mayúscula M en cuadrado negro"]);
  this.executeCharTest("🅽", ["mayúscula N en cuadrado negro", "mayúscula N en cuadrado negro", "mayúscula N en cuadrado negro"]);
  this.executeCharTest("🅾", ["mayúscula O en cuadrado negro", "mayúscula O en cuadrado negro", "mayúscula O en cuadrado negro"]);
  this.executeCharTest("🅿", ["mayúscula P en cuadrado negro", "mayúscula P en cuadrado negro", "mayúscula P en cuadrado negro"]);
  this.executeCharTest("🆀", ["mayúscula Q en cuadrado negro", "mayúscula Q en cuadrado negro", "mayúscula Q en cuadrado negro"]);
  this.executeCharTest("🆁", ["mayúscula R en cuadrado negro", "mayúscula R en cuadrado negro", "mayúscula R en cuadrado negro"]);
  this.executeCharTest("🆂", ["mayúscula S en cuadrado negro", "mayúscula S en cuadrado negro", "mayúscula S en cuadrado negro"]);
  this.executeCharTest("🆃", ["mayúscula T en cuadrado negro", "mayúscula T en cuadrado negro", "mayúscula T en cuadrado negro"]);
  this.executeCharTest("🆄", ["mayúscula U en cuadrado negro", "mayúscula U en cuadrado negro", "mayúscula U en cuadrado negro"]);
  this.executeCharTest("🆅", ["mayúscula V en cuadrado negro", "mayúscula V en cuadrado negro", "mayúscula V en cuadrado negro"]);
  this.executeCharTest("🆆", ["mayúscula W en cuadrado negro", "mayúscula W en cuadrado negro", "mayúscula W en cuadrado negro"]);
  this.executeCharTest("🆇", ["mayúscula X en cuadrado negro", "mayúscula X en cuadrado negro", "mayúscula X en cuadrado negro"]);
  this.executeCharTest("🆈", ["mayúscula Y en cuadrado negro", "mayúscula Y en cuadrado negro", "mayúscula Y en cuadrado negro"]);
  this.executeCharTest("🆉", ["mayúscula Z en cuadrado negro", "mayúscula Z en cuadrado negro", "mayúscula Z en cuadrado negro"]);
  this.executeCharTest("🅐", ["mayúscula A en circulo negro", "mayúscula A en circulo negro", "mayúscula A en circulo negro"]);
  this.executeCharTest("🅑", ["mayúscula B en circulo negro", "mayúscula B en circulo negro", "mayúscula B en circulo negro"]);
  this.executeCharTest("🅒", ["mayúscula C en circulo negro", "mayúscula C en circulo negro", "mayúscula C en circulo negro"]);
  this.executeCharTest("🅓", ["mayúscula D en circulo negro", "mayúscula D en circulo negro", "mayúscula D en circulo negro"]);
  this.executeCharTest("🅔", ["mayúscula E en circulo negro", "mayúscula E en circulo negro", "mayúscula E en circulo negro"]);
  this.executeCharTest("🅕", ["mayúscula F en circulo negro", "mayúscula F en circulo negro", "mayúscula F en circulo negro"]);
  this.executeCharTest("🅖", ["mayúscula G en circulo negro", "mayúscula G en circulo negro", "mayúscula G en circulo negro"]);
  this.executeCharTest("🅗", ["mayúscula H en circulo negro", "mayúscula H en circulo negro", "mayúscula H en circulo negro"]);
  this.executeCharTest("🅘", ["mayúscula I en circulo negro", "mayúscula I en circulo negro", "mayúscula I en circulo negro"]);
  this.executeCharTest("🅙", ["mayúscula J en circulo negro", "mayúscula J en circulo negro", "mayúscula J en circulo negro"]);
  this.executeCharTest("🅚", ["mayúscula K en circulo negro", "mayúscula K en circulo negro", "mayúscula K en circulo negro"]);
  this.executeCharTest("🅛", ["mayúscula L en circulo negro", "mayúscula L en circulo negro", "mayúscula L en circulo negro"]);
  this.executeCharTest("🅜", ["mayúscula M en circulo negro", "mayúscula M en circulo negro", "mayúscula M en circulo negro"]);
  this.executeCharTest("🅝", ["mayúscula N en circulo negro", "mayúscula N en circulo negro", "mayúscula N en circulo negro"]);
  this.executeCharTest("🅞", ["mayúscula O en circulo negro", "mayúscula O en circulo negro", "mayúscula O en circulo negro"]);
  this.executeCharTest("🅟", ["mayúscula P en circulo negro", "mayúscula P en circulo negro", "mayúscula P en circulo negro"]);
  this.executeCharTest("🅠", ["mayúscula Q en circulo negro", "mayúscula Q en circulo negro", "mayúscula Q en circulo negro"]);
  this.executeCharTest("🅡", ["mayúscula R en circulo negro", "mayúscula R en circulo negro", "mayúscula R en circulo negro"]);
  this.executeCharTest("🅢", ["mayúscula S en circulo negro", "mayúscula S en circulo negro", "mayúscula S en circulo negro"]);
  this.executeCharTest("🅣", ["mayúscula T en circulo negro", "mayúscula T en circulo negro", "mayúscula T en circulo negro"]);
  this.executeCharTest("🅤", ["mayúscula U en circulo negro", "mayúscula U en circulo negro", "mayúscula U en circulo negro"]);
  this.executeCharTest("🅥", ["mayúscula V en circulo negro", "mayúscula V en circulo negro", "mayúscula V en circulo negro"]);
  this.executeCharTest("🅦", ["mayúscula W en circulo negro", "mayúscula W en circulo negro", "mayúscula W en circulo negro"]);
  this.executeCharTest("🅧", ["mayúscula X en circulo negro", "mayúscula X en circulo negro", "mayúscula X en circulo negro"]);
  this.executeCharTest("🅨", ["mayúscula Y en circulo negro", "mayúscula Y en circulo negro", "mayúscula Y en circulo negro"]);
  this.executeCharTest("🅩", ["mayúscula Z en circulo negro", "mayúscula Z en circulo negro", "mayúscula Z en circulo negro"]);
  this.executeCharTest("ᴦ", ["pequeño mayúscula gamma", "pequeño mayúscula gamma", "pequeño mayúscula gamma"]);
  this.executeCharTest("ᴧ", ["pequeña mayúscula lamda", "pequeña mayúscula lamda", "pequeña mayúscula lamda"]);
  this.executeCharTest("ᴨ", ["pequeña mayúscula Pi", "pequeña mayúscula Pi", "pequeña mayúscula Pi"]);
  this.executeCharTest("ᴩ", ["pequeña mayúscula Rho", "pequeña mayúscula Rho", "pequeña mayúscula Rho"]);
  this.executeCharTest("ᴪ", ["pequeña mayúscula Psi", "pequeña mayúscula Psi", "pequeña mayúscula Psi"]);
  this.executeCharTest("ᵞ", ["modificador de pequeño gamma", "modificador de pequeño gamma", "modificador de pequeño gamma"]);
  this.executeCharTest("ᵠ", ["modificador de pequeño phi", "modificador de pequeño phi", "modificador de pequeño phi"]);
  this.executeCharTest("ᵦ", ["subscripción pequeña beta", "subscripción pequeña beta", "subscripción pequeña beta"]);
  this.executeCharTest("ᵧ", ["subíndice pequeña gamma", "subíndice pequeña gamma", "subíndice pequeña gamma"]);
  this.executeCharTest("ᵨ", ["subíndice rho", "subíndice rho", "subíndice rho"]);
  this.executeCharTest("ᵩ", ["subíndice phi", "subíndice phi", "subíndice phi"]);
  this.executeCharTest("ᵪ", ["subscripción chi", "subscripción chi", "subscripción chi"]);
  this.executeCharTest("ϐ", ["símbolo beta", "símbolo beta", "símbolo beta"]);
  this.executeCharTest("ϗ", ["símbolo kai griego", "símbolo kai griego", "símbolo kai griego"]);
  this.executeCharTest("϶", ["épsilon invertido", "épsilon invertido", "épsilon invertido"]);
  this.executeCharTest("𝟊", ["Matemática Bold Capital Digamma", "Matemática Bold Capital Digamma", "Matemática Bold Capital Digamma"]);
  this.executeCharTest("𝟋", ["Matemática negrita pequeño digamma", "Matemática negrita pequeño digamma", "Matemática negrita pequeño digamma"]);
  this.executeCharTest("ℵ", ["alef", "alef", "alef"]);
  this.executeCharTest("ℶ", ["bet", "bet", "bet"]);
  this.executeCharTest("ℷ", ["guímel", "guímel", "guímel"]);
  this.executeCharTest("ℸ", ["dálet", "dálet", "dálet"]);
  this.executeCharTest("ǖ", ["u con diéresis y macron", "u con diéresis y macron", "u con diéresis y macron"]);
  this.executeCharTest("ǘ", ["u con diéresis y acento agudo", "u con diéresis y acento agudo", "u con diéresis y acento agudo"]);
  this.executeCharTest("ǚ", ["u con diéresis y acento", "u con diéresis y acento", "u con diéresis y acento"]);
  this.executeCharTest("ǜ", ["u con diéresis y grave", "u con diéresis y grave", "u con diéresis y grave"]);
  this.executeCharTest("ǟ", ["a con diéresis y macron", "a con diéresis y macron", "a con diéresis y macron"]);
  this.executeCharTest("ǡ", ["a con punto arriba y macron", "a con punto arriba y macron", "a con punto arriba y macron"]);
  this.executeCharTest("ǭ", ["o con pecíolo y macron", "o con pecíolo y macron", "o con pecíolo y macron"]);
  this.executeCharTest("ǻ", ["a con ring above y acento agudo", "a con ring above y acento agudo", "a con ring above y acento agudo"]);
  this.executeCharTest("ȫ", ["o con diéresis y macron", "o con diéresis y macron", "o con diéresis y macron"]);
  this.executeCharTest("ȭ", ["o con tilde y macron", "o con tilde y macron", "o con tilde y macron"]);
  this.executeCharTest("ȱ", ["o con Dot Above y Macron", "o con Dot Above y Macron", "o con Dot Above y Macron"]);
  this.executeCharTest("ḉ", ["c con cedilla y agudo", "c con cedilla y agudo", "c con cedilla y agudo"]);
  this.executeCharTest("ḕ", ["e con macrón y grave", "e con macrón y grave", "e con macrón y grave"]);
  this.executeCharTest("ḗ", ["e con macrón y agudo", "e con macrón y agudo", "e con macrón y agudo"]);
  this.executeCharTest("ḝ", ["e con cedilla y breve", "e con cedilla y breve", "e con cedilla y breve"]);
  this.executeCharTest("ḯ", ["i con diéresis y agudo", "i con diéresis y agudo", "i con diéresis y agudo"]);
  this.executeCharTest("ḹ", ["l con punto debajo y macrón", "l con punto debajo y macrón", "l con punto debajo y macrón"]);
  this.executeCharTest("ṍ", ["o con tilde y acute", "o con tilde y acute", "o con tilde y acute"]);
  this.executeCharTest("ṏ", ["o con tilde y diéresis", "o con tilde y diéresis", "o con tilde y diéresis"]);
  this.executeCharTest("ṑ", ["o con macrón y grave", "o con macrón y grave", "o con macrón y grave"]);
  this.executeCharTest("ṓ", ["o con macrón y agudo", "o con macrón y agudo", "o con macrón y agudo"]);
  this.executeCharTest("ṝ", ["r con punto debajo y macrón", "r con punto debajo y macrón", "r con punto debajo y macrón"]);
  this.executeCharTest("ṥ", ["s con agudo y punto arriba", "s con agudo y punto arriba", "s con agudo y punto arriba"]);
  this.executeCharTest("ṧ", ["s con carón y punto arriba", "s con carón y punto arriba", "s con carón y punto arriba"]);
  this.executeCharTest("ṩ", ["s con punto debajo y punto arriba", "s con punto debajo y punto arriba", "s con punto debajo y punto arriba"]);
  this.executeCharTest("ṹ", ["u con tilde y agudo", "u con tilde y agudo", "u con tilde y agudo"]);
  this.executeCharTest("ṻ", ["u con macrón y diéresis", "u con macrón y diéresis", "u con macrón y diéresis"]);
  this.executeCharTest("ấ", ["a con acento circunflejo y agudo", "a con acento circunflejo y agudo", "a con acento circunflejo y agudo"]);
  this.executeCharTest("ầ", ["a con acento circunflejo y grave", "a con acento circunflejo y grave", "a con acento circunflejo y grave"]);
  this.executeCharTest("ẩ", ["a con acento circunflejo y gancho arriba", "a con acento circunflejo y gancho arriba", "a con acento circunflejo y gancho arriba"]);
  this.executeCharTest("ẫ", ["a con acento circunflejo y tilde", "a con acento circunflejo y tilde", "a con acento circunflejo y tilde"]);
  this.executeCharTest("ậ", ["a con acento circunflejo y punto debajo", "a con acento circunflejo y punto debajo", "a con acento circunflejo y punto debajo"]);
  this.executeCharTest("ắ", ["a con breve y agudo", "a con breve y agudo", "a con breve y agudo"]);
  this.executeCharTest("ằ", ["a con breve y grave", "a con breve y grave", "a con breve y grave"]);
  this.executeCharTest("ẳ", ["a con breve y gancho arriba", "a con breve y gancho arriba", "a con breve y gancho arriba"]);
  this.executeCharTest("ẵ", ["a con breve y tilde", "a con breve y tilde", "a con breve y tilde"]);
  this.executeCharTest("ặ", ["a con breve y punto debajo", "a con breve y punto debajo", "a con breve y punto debajo"]);
  this.executeCharTest("ế", ["e con acento circunflejo y agudo", "e con acento circunflejo y agudo", "e con acento circunflejo y agudo"]);
  this.executeCharTest("ề", ["e con acento circunflejo y grave", "e con acento circunflejo y grave", "e con acento circunflejo y grave"]);
  this.executeCharTest("ể", ["e con acento circunflejo y gancho arriba", "e con acento circunflejo y gancho arriba", "e con acento circunflejo y gancho arriba"]);
  this.executeCharTest("ễ", ["e con acento circunflejo y tilde", "e con acento circunflejo y tilde", "e con acento circunflejo y tilde"]);
  this.executeCharTest("ệ", ["e con acento circunflejo y punto debajo", "e con acento circunflejo y punto debajo", "e con acento circunflejo y punto debajo"]);
  this.executeCharTest("ố", ["o con acento circunflejo y agudo", "o con acento circunflejo y agudo", "o con acento circunflejo y agudo"]);
  this.executeCharTest("ồ", ["o con acento circunflejo y grave", "o con acento circunflejo y grave", "o con acento circunflejo y grave"]);
  this.executeCharTest("ổ", ["o con acento circunflejo y gancho arriba", "o con acento circunflejo y gancho arriba", "o con acento circunflejo y gancho arriba"]);
  this.executeCharTest("ỗ", ["o con acento circunflejo y tilde", "o con acento circunflejo y tilde", "o con acento circunflejo y tilde"]);
  this.executeCharTest("ộ", ["o con acento circunflejo y punto debajo", "o con acento circunflejo y punto debajo", "o con acento circunflejo y punto debajo"]);
  this.executeCharTest("ớ", ["o with horn and acute", "o with horn and acute", "o with horn and acute"]);
  this.executeCharTest("ờ", ["o with horn and grave", "o with horn and grave", "o with horn and grave"]);
  this.executeCharTest("ở", ["o with horn and hook above", "o with horn and hook above", "o with horn and hook above"]);
  this.executeCharTest("ỡ", ["o with horn and tilde", "o with horn and tilde", "o with horn and tilde"]);
  this.executeCharTest("ợ", ["o con cuerno y punto debajo", "o con cuerno y punto debajo", "o con cuerno y punto debajo"]);
  this.executeCharTest("ứ", ["u con cuerno y agudo", "u con cuerno y agudo", "u con cuerno y agudo"]);
  this.executeCharTest("ừ", ["u con cuerno y grave", "u con cuerno y grave", "u con cuerno y grave"]);
  this.executeCharTest("ử", ["u con cuerno y gancho arriba", "u con cuerno y gancho arriba", "u con cuerno y gancho arriba"]);
  this.executeCharTest("ữ", ["u con cuerno y tilde", "u con cuerno y tilde", "u con cuerno y tilde"]);
  this.executeCharTest("ự", ["u con cuerno y punto debajo", "u con cuerno y punto debajo", "u con cuerno y punto debajo"]);
  this.executeCharTest("ø", ["o barrada", "o barrada", "o barrada"]);
  this.executeCharTest("đ", ["d con barra", "d con barra", "d con barra"]);
  this.executeCharTest("ħ", ["h con guión", "h con guión", "h con guión"]);
  this.executeCharTest("ł", ["l con guión", "l con guión", "l con guión"]);
  this.executeCharTest("ŧ", ["t con guión", "t con guión", "t con guión"]);
  this.executeCharTest("ƀ", ["b con línea", "b con línea", "b con línea"]);
  this.executeCharTest("ƛ", ["lambda tachada", "lambda tachada", "lambda tachada"]);
  this.executeCharTest("ƶ", ["z con línea", "z con línea", "z con línea"]);
  this.executeCharTest("ƾ", ["parada glotal invertida con línea", "parada glotal invertida con línea", "parada glotal invertida con línea"]);
  this.executeCharTest("ǥ", ["g con línea", "g con línea", "g con línea"]);
  this.executeCharTest("ǿ", ["o con línea y acento agudo", "o con línea y acento agudo", "o con línea y acento agudo"]);
  this.executeCharTest("ȼ", ["c con trazo", "c con trazo", "c con trazo"]);
  this.executeCharTest("ɇ", ["pequeña e con trazo", "pequeña e con trazo", "pequeña e con trazo"]);
  this.executeCharTest("ɉ", ["j con trazo", "j con trazo", "j con trazo"]);
  this.executeCharTest("ɍ", ["con trazo", "con trazo", "con trazo"]);
  this.executeCharTest("ɏ", ["y con trazo", "y con trazo", "y con trazo"]);
  this.executeCharTest("ɟ", ["pequeña sin puntos j con trazo", "pequeña sin puntos j con trazo", "pequeña sin puntos j con trazo"]);
  this.executeCharTest("ɨ", ["i con trazo", "i con trazo", "i con trazo"]);
  this.executeCharTest("ʄ", ["pequeña sin puntos j con trazo y gancho", "pequeña sin puntos j con trazo y gancho", "pequeña sin puntos j con trazo y gancho"]);
  this.executeCharTest("ʡ", ["parada glotal con trazo", "parada glotal con trazo", "parada glotal con trazo"]);
  this.executeCharTest("ʢ", ["parada invertida glotal con trazo", "parada invertida glotal con trazo", "parada invertida glotal con trazo"]);
  this.executeCharTest("ᴓ", ["de lado O con trazo", "de lado O con trazo", "de lado O con trazo"]);
  this.executeCharTest("ᵼ", ["iota con trazo", "iota con trazo", "iota con trazo"]);
  this.executeCharTest("ᵽ", ["p con trazo", "p con trazo", "p con trazo"]);
  this.executeCharTest("ᵿ", ["upsilon con trazo", "upsilon con trazo", "upsilon con trazo"]);
  this.executeCharTest("ẜ", ["larga s con trazo diagonal", "larga s con trazo diagonal", "larga s con trazo diagonal"]);
  this.executeCharTest("ẝ", ["pequeña s larga con trazo alto", "pequeña s larga con trazo alto", "pequeña s larga con trazo alto"]);
  this.executeCharTest("ƍ", ["delta convertido", "delta convertido", "delta convertido"]);
  this.executeCharTest("ẛ", ["s larga con punto arriba", "s larga con punto arriba", "s larga con punto arriba"]);
  this.executeCharTest("ẟ", ["delta pequeña latina", "delta pequeña latina", "delta pequeña latina"]);
  this.executeCharTest("ĸ", ["kra", "kra", "kra"]);
  this.executeCharTest("ſ", ["s larga", "s larga", "s larga"]);
  this.executeCharTest("ƃ", ["b con barra encima", "b con barra encima", "b con barra encima"]);
  this.executeCharTest("ƅ", ["tono seis", "tono seis", "tono seis"]);
  this.executeCharTest("ƈ", ["c con gancho", "c con gancho", "c con gancho"]);
  this.executeCharTest("ƌ", ["d con barra encima", "d con barra encima", "d con barra encima"]);
  this.executeCharTest("ƒ", ["f con gancho", "f con gancho", "f con gancho"]);
  this.executeCharTest("ƕ", ["hv", "hv", "hv"]);
  this.executeCharTest("ƙ", ["k con gancho", "k con gancho", "k con gancho"]);
  this.executeCharTest("ƚ", ["l con barra", "l con barra", "l con barra"]);
  this.executeCharTest("ƞ", ["n con pierna derecha larga", "n con pierna derecha larga", "n con pierna derecha larga"]);
  this.executeCharTest("ơ", ["o con cuerno", "o con cuerno", "o con cuerno"]);
  this.executeCharTest("ƣ", ["oi", "oi", "oi"]);
  this.executeCharTest("ƥ", ["p con gancho", "p con gancho", "p con gancho"]);
  this.executeCharTest("ƨ", ["dos tonos", "dos tonos", "dos tonos"]);
  this.executeCharTest("ƪ", ["latin letter invertido Esh bucle", "latin letter invertido Esh bucle", "latin letter invertido Esh bucle"]);
  this.executeCharTest("ƫ", ["t con palatal gancho", "t con palatal gancho", "t con palatal gancho"]);
  this.executeCharTest("ƭ", ["t con gancho", "t con gancho", "t con gancho"]);
  this.executeCharTest("ư", ["u con horn", "u con horn", "u con horn"]);
  this.executeCharTest("ƴ", ["y con gancho", "y con gancho", "y con gancho"]);
  this.executeCharTest("ƹ", ["ezh invertido", "ezh invertido", "ezh invertido"]);
  this.executeCharTest("ƺ", ["ezh con cola", "ezh con cola", "ezh con cola"]);
  this.executeCharTest("ƽ", ["tono cinco", "tono cinco", "tono cinco"]);
  this.executeCharTest("ƿ", ["wynn", "wynn", "wynn"]);
  this.executeCharTest("ǆ", ["dz con acento", "dz con acento", "dz con acento"]);
  this.executeCharTest("ǉ", ["lj", "lj", "lj"]);
  this.executeCharTest("ǌ", ["nj", "nj", "nj"]);
  this.executeCharTest("ǣ", ["ae con macron", "ae con macron", "ae con macron"]);
  this.executeCharTest("ǯ", ["ezh con acento", "ezh con acento", "ezh con acento"]);
  this.executeCharTest("ǳ", ["dz", "dz", "dz"]);
  this.executeCharTest("ȝ", ["latín letra pequeña yogh", "latín letra pequeña yogh", "latín letra pequeña yogh"]);
  this.executeCharTest("ɮ", ["lezh letra pequeña latina", "lezh letra pequeña latina", "lezh letra pequeña latina"]);
  this.executeCharTest("ʒ", ["ezh", "ezh", "ezh"]);
  this.executeCharTest("ʓ", ["pequeña Ezh con Curl", "pequeña Ezh con Curl", "pequeña Ezh con Curl"]);
  this.executeCharTest("ʤ", ["latín letra pequeña Dezh Digraph", "latín letra pequeña Dezh Digraph", "latín letra pequeña Dezh Digraph"]);
  this.executeCharTest("ǝ", ["e convertido", "e convertido", "e convertido"]);
  this.executeCharTest("ǽ", ["ae con acento agudo", "ae con acento agudo", "ae con acento agudo"]);
  this.executeCharTest("ȡ", ["d con rizo", "d con rizo", "d con rizo"]);
  this.executeCharTest("ȣ", ["ou", "ou", "ou"]);
  this.executeCharTest("ȥ", ["z con gancho", "z con gancho", "z con gancho"]);
  this.executeCharTest("ȴ", ["l con rizo", "l con rizo", "l con rizo"]);
  this.executeCharTest("ȵ", ["n con rizo", "n con rizo", "n con rizo"]);
  this.executeCharTest("ȶ", ["t con rizo", "t con rizo", "t con rizo"]);
  this.executeCharTest("ȸ", ["letra pequeña latina db digraph", "letra pequeña latina db digraph", "letra pequeña latina db digraph"]);
  this.executeCharTest("ȹ", ["latín letra pequeña Qp Digraph", "latín letra pequeña Qp Digraph", "latín letra pequeña Qp Digraph"]);
  this.executeCharTest("ȿ", ["s con cola cruzada", "s con cola cruzada", "s con cola cruzada"]);
  this.executeCharTest("ɀ", ["z con cola swash", "z con cola swash", "z con cola swash"]);
  this.executeCharTest("ɂ", ["latín letra pequeña parada glotal", "latín letra pequeña parada glotal", "latín letra pequeña parada glotal"]);
  this.executeCharTest("ɋ", ["q con cola de gancho", "q con cola de gancho", "q con cola de gancho"]);
  this.executeCharTest("ɐ", ["convertida en una", "convertida en una", "convertida en una"]);
  this.executeCharTest("ɑ", ["alfa minúscula latina", "alfa minúscula latina", "alfa minúscula latina"]);
  this.executeCharTest("ɒ", ["convertida en alfa", "convertida en alfa", "convertida en alfa"]);
  this.executeCharTest("ɓ", ["b con gancho", "b con gancho", "b con gancho"]);
  this.executeCharTest("ɔ", ["abierta o", "abierta o", "abierta o"]);
  this.executeCharTest("ɕ", ["c con rizo", "c con rizo", "c con rizo"]);
  this.executeCharTest("ɖ", ["d con cola", "d con cola", "d con cola"]);
  this.executeCharTest("ɗ", ["d con gancho", "d con gancho", "d con gancho"]);
  this.executeCharTest("ɘ", ["invertida E", "invertida E", "invertida E"]);
  this.executeCharTest("ə", ["schwa", "schwa", "schwa"]);
  this.executeCharTest("ɚ", ["pequeña Schwa con gancho", "pequeña Schwa con gancho", "pequeña Schwa con gancho"]);
  this.executeCharTest("ɛ", ["e abierta", "e abierta", "e abierta"]);
  this.executeCharTest("ɜ", ["invertida abierta E", "invertida abierta E", "invertida abierta E"]);
  this.executeCharTest("ɝ", ["letra pequeña latina invertida E abierta con gancho", "letra pequeña latina invertida E abierta con gancho", "letra pequeña latina invertida E abierta con gancho"]);
  this.executeCharTest("ɞ", ["cerrada invertida abierta E", "cerrada invertida abierta E", "cerrada invertida abierta E"]);
  this.executeCharTest("ɠ", ["g con gancho", "g con gancho", "g con gancho"]);
  this.executeCharTest("ɡ", ["escritura latina de letras pequeñas G", "escritura latina de letras pequeñas G", "escritura latina de letras pequeñas G"]);
  this.executeCharTest("ɣ", ["latín letra pequeña gamma", "latín letra pequeña gamma", "latín letra pequeña gamma"]);
  this.executeCharTest("ɤ", ["cuerno de carnero de letra pequeña latina", "cuerno de carnero de letra pequeña latina", "cuerno de carnero de letra pequeña latina"]);
  this.executeCharTest("ɥ", ["girada h", "girada h", "girada h"]);
  this.executeCharTest("ɦ", ["h con gancho", "h con gancho", "h con gancho"]);
  this.executeCharTest("ɧ", ["pequeña letra latina Heng con gancho", "pequeña letra latina Heng con gancho", "pequeña letra latina Heng con gancho"]);
  this.executeCharTest("ɩ", ["latín letra minúscula Iota", "latín letra minúscula Iota", "latín letra minúscula Iota"]);
  this.executeCharTest("ɫ", ["l con tilde medio", "l con tilde medio", "l con tilde medio"]);
  this.executeCharTest("ɬ", ["l con cinturón", "l con cinturón", "l con cinturón"]);
  this.executeCharTest("ɭ", ["letra L latina pequeña con gancho Retroflex", "letra L latina pequeña con gancho Retroflex", "letra L latina pequeña con gancho Retroflex"]);
  this.executeCharTest("ɯ", ["girada m", "girada m", "girada m"]);
  this.executeCharTest("ɰ", ["vuelta M con pierna larga", "vuelta M con pierna larga", "vuelta M con pierna larga"]);
  this.executeCharTest("ɱ", ["m con gancho", "m con gancho", "m con gancho"]);
  this.executeCharTest("ɲ", ["n con gancho izquierdo", "n con gancho izquierdo", "n con gancho izquierdo"]);
  this.executeCharTest("ɳ", ["n con gancho retroflex", "n con gancho retroflex", "n con gancho retroflex"]);
  this.executeCharTest("ɵ", ["letra minúscula omega", "letra minúscula omega", "letra minúscula omega"]);
  this.executeCharTest("ɷ", ["latin Small Letter Closed Omega", "latin Small Letter Closed Omega", "latin Small Letter Closed Omega"]);
  this.executeCharTest("ɸ", ["Letra pequeña latina", "Letra pequeña latina", "Letra pequeña latina"]);
  this.executeCharTest("ɹ", ["vuelta r", "vuelta r", "vuelta r"]);
  this.executeCharTest("ɺ", ["vuelta R con pierna larga", "vuelta R con pierna larga", "vuelta R con pierna larga"]);
  this.executeCharTest("ɻ", ["vuelta R con gancho", "vuelta R con gancho", "vuelta R con gancho"]);
  this.executeCharTest("ɼ", ["R con pierna larga", "R con pierna larga", "R con pierna larga"]);
  this.executeCharTest("ɽ", ["R con cola", "R con cola", "R con cola"]);
  this.executeCharTest("ɾ", ["R con anzuelo", "R con anzuelo", "R con anzuelo"]);
  this.executeCharTest("ɿ", ["invertida R con anzuelo", "invertida R con anzuelo", "invertida R con anzuelo"]);
  this.executeCharTest("ʂ", ["S con gancho", "S con gancho", "S con gancho"]);
  this.executeCharTest("ʃ", ["Pequeña letra latina esh", "Pequeña letra latina esh", "Pequeña letra latina esh"]);
  this.executeCharTest("ʅ", ["Latín letra pequeña en cuclillas invertida Esh", "Latín letra pequeña en cuclillas invertida Esh", "Latín letra pequeña en cuclillas invertida Esh"]);
  this.executeCharTest("ʆ", ["Esh minúscula latina con rizo", "Esh minúscula latina con rizo", "Esh minúscula latina con rizo"]);
  this.executeCharTest("ʇ", ["vuelta t", "vuelta t", "vuelta t"]);
  this.executeCharTest("ʈ", ["T con gancho retroflex", "T con gancho retroflex", "T con gancho retroflex"]);
  this.executeCharTest("ʉ", ["Letra de letra pequeña latina U", "Letra de letra pequeña latina U", "Letra de letra pequeña latina U"]);
  this.executeCharTest("ʊ", ["Upsilon", "Upsilon", "Upsilon"]);
  this.executeCharTest("ʋ", ["V con gancho", "V con gancho", "V con gancho"]);
  this.executeCharTest("ʌ", ["convertida V", "convertida V", "convertida V"]);
  this.executeCharTest("ʍ", ["girada w", "girada w", "girada w"]);
  this.executeCharTest("ʎ", ["vuelta y", "vuelta y", "vuelta y"]);
  this.executeCharTest("ʐ", ["Z con gancho retroflex", "Z con gancho retroflex", "Z con gancho retroflex"]);
  this.executeCharTest("ʑ", ["z con rizo", "z con rizo", "z con rizo"]);
  this.executeCharTest("ʕ", ["faríngea con voz fricativa", "faríngea con voz fricativa", "faríngea con voz fricativa"]);
  this.executeCharTest("ʖ", ["invertida parada glotal", "invertida parada glotal", "invertida parada glotal"]);
  this.executeCharTest("ʗ", ["estirada c", "estirada c", "estirada c"]);
  this.executeCharTest("ʘ", ["Carta Bilabial Click", "Carta Bilabial Click", "Carta Bilabial Click"]);
  this.executeCharTest("ʚ", ["cerrada abierta e", "cerrada abierta e", "cerrada abierta e"]);
  this.executeCharTest("ʞ", ["vuelta k", "vuelta k", "vuelta k"]);
  this.executeCharTest("ʠ", ["q con gancho", "q con gancho", "q con gancho"]);
  this.executeCharTest("ʣ", ["pequeña letra Dz Digraph", "pequeña letra Dz Digraph", "pequeña letra Dz Digraph"]);
  this.executeCharTest("ʥ", ["Letra pequeña latina Dz Digraph con Curl", "Letra pequeña latina Dz Digraph con Curl", "Letra pequeña latina Dz Digraph con Curl"]);
  this.executeCharTest("ʦ", ["Latín letra pequeña Ts Digraph", "Latín letra pequeña Ts Digraph", "Latín letra pequeña Ts Digraph"]);
  this.executeCharTest("ʧ", ["Letra pequeña latina Tesh Digraph", "Letra pequeña latina Tesh Digraph", "Letra pequeña latina Tesh Digraph"]);
  this.executeCharTest("ʨ", ["Latín letra pequeña Tc Digraph con Curl", "Latín letra pequeña Tc Digraph con Curl", "Latín letra pequeña Tc Digraph con Curl"]);
  this.executeCharTest("ʩ", ["Letra pequeña latina Feng Digraph", "Letra pequeña latina Feng Digraph", "Letra pequeña latina Feng Digraph"]);
  this.executeCharTest("ʪ", ["pequeña letra Ls Digraph", "pequeña letra Ls Digraph", "pequeña letra Ls Digraph"]);
  this.executeCharTest("ʫ", ["pequeña letra Lz Digraph", "pequeña letra Lz Digraph", "pequeña letra Lz Digraph"]);
  this.executeCharTest("ʬ", ["percusion bilabial", "percusion bilabial", "percusion bilabial"]);
  this.executeCharTest("ʭ", ["de percusión bidental", "de percusión bidental", "de percusión bidental"]);
  this.executeCharTest("ʮ", ["convertida en H con anzuelo", "convertida en H con anzuelo", "convertida en H con anzuelo"]);
  this.executeCharTest("ʯ", ["convertida en H con anzuelo y cola", "convertida en H con anzuelo y cola", "convertida en H con anzuelo y cola"]);
  this.executeCharTest("ᴂ", ["vuelta ae", "vuelta ae", "vuelta ae"]);
  this.executeCharTest("ᴈ", ["convertida abierta E", "convertida abierta E", "convertida abierta E"]);
  this.executeCharTest("ᴉ", ["convertida i", "convertida i", "convertida i"]);
  this.executeCharTest("ᴑ", ["de lado O", "de lado O", "de lado O"]);
  this.executeCharTest("ᴒ", ["de lado abierto O", "de lado abierto O", "de lado abierto O"]);
  this.executeCharTest("ᴔ", ["vuelta oe", "vuelta oe", "vuelta oe"]);
  this.executeCharTest("ᴖ", ["mitad superior O", "mitad superior O", "mitad superior O"]);
  this.executeCharTest("ᴗ", ["Letra latina, letra inferior, mitad inferior O", "Letra latina, letra inferior, mitad inferior O", "Letra latina, letra inferior, mitad inferior O"]);
  this.executeCharTest("ᴝ", ["hacia los lados U", "hacia los lados U", "hacia los lados U"]);
  this.executeCharTest("ᴞ", ["de lado diaeresizada U", "de lado diaeresizada U", "de lado diaeresizada U"]);
  this.executeCharTest("ᴟ", ["girada hacia los lados M", "girada hacia los lados M", "girada hacia los lados M"]);
  this.executeCharTest("ᴤ", ["Carta latina expresada espirante laríngeo", "Carta latina expresada espirante laríngeo", "Carta latina expresada espirante laríngeo"]);
  this.executeCharTest("ᴥ", ["ain", "ain", "ain"]);
  this.executeCharTest("ᵫ", ["ue", "ue", "ue"]);
  this.executeCharTest("ᵬ", ["B con tilde medio", "B con tilde medio", "B con tilde medio"]);
  this.executeCharTest("ᵭ", ["D con tilde medio", "D con tilde medio", "D con tilde medio"]);
  this.executeCharTest("ᵮ", ["F con tilde medio", "F con tilde medio", "F con tilde medio"]);
  this.executeCharTest("ᵯ", ["M con tilde medio", "M con tilde medio", "M con tilde medio"]);
  this.executeCharTest("ᵰ", ["N con tilde medio", "N con tilde medio", "N con tilde medio"]);
  this.executeCharTest("ᵱ", ["P con tilde medio", "P con tilde medio", "P con tilde medio"]);
  this.executeCharTest("ᵲ", ["R con tilde medio", "R con tilde medio", "R con tilde medio"]);
  this.executeCharTest("ᵳ", ["R con anzuelo y tilde medio", "R con anzuelo y tilde medio", "R con anzuelo y tilde medio"]);
  this.executeCharTest("ᵴ", ["S con tilde medio", "S con tilde medio", "S con tilde medio"]);
  this.executeCharTest("ᵵ", ["T con tilde medio", "T con tilde medio", "T con tilde medio"]);
  this.executeCharTest("ᵶ", ["z con tilde media", "z con tilde media", "z con tilde media"]);
  this.executeCharTest("ᵷ", ["girada g", "girada g", "girada g"]);
  this.executeCharTest("ᵹ", ["insular g", "insular g", "insular g"]);
  this.executeCharTest("ᵺ", ["th con tachado", "th con tachado", "th con tachado"]);
  this.executeCharTest("ᶀ", ["B con gancho palatal", "B con gancho palatal", "B con gancho palatal"]);
  this.executeCharTest("ᶁ", ["D con gancho palatal", "D con gancho palatal", "D con gancho palatal"]);
  this.executeCharTest("ᶂ", ["F con gancho palatino", "F con gancho palatino", "F con gancho palatino"]);
  this.executeCharTest("ᶃ", ["G con gancho palatal", "G con gancho palatal", "G con gancho palatal"]);
  this.executeCharTest("ᶄ", ["K con gancho palatino", "K con gancho palatino", "K con gancho palatino"]);
  this.executeCharTest("ᶅ", ["L con gancho palatino", "L con gancho palatino", "L con gancho palatino"]);
  this.executeCharTest("ᶆ", ["M con gancho palatino", "M con gancho palatino", "M con gancho palatino"]);
  this.executeCharTest("ᶇ", ["N con gancho palatal", "N con gancho palatal", "N con gancho palatal"]);
  this.executeCharTest("ᶈ", ["P con gancho palatino", "P con gancho palatino", "P con gancho palatino"]);
  this.executeCharTest("ᶉ", ["R con gancho palatal", "R con gancho palatal", "R con gancho palatal"]);
  this.executeCharTest("ᶊ", ["S con gancho palatal", "S con gancho palatal", "S con gancho palatal"]);
  this.executeCharTest("ᶋ", ["Pequeña letra latina Esh con gancho palatal", "Pequeña letra latina Esh con gancho palatal", "Pequeña letra latina Esh con gancho palatal"]);
  this.executeCharTest("ᶌ", ["V con gancho palatal", "V con gancho palatal", "V con gancho palatal"]);
  this.executeCharTest("ᶍ", ["X con gancho palatal", "X con gancho palatal", "X con gancho palatal"]);
  this.executeCharTest("ᶎ", ["Z con gancho palatal", "Z con gancho palatal", "Z con gancho palatal"]);
  this.executeCharTest("ᶏ", ["a con gancho retroflex", "a con gancho retroflex", "a con gancho retroflex"]);
  this.executeCharTest("ᶐ", ["Alfa latina pequeña letra con gancho retroflex", "Alfa latina pequeña letra con gancho retroflex", "Alfa latina pequeña letra con gancho retroflex"]);
  this.executeCharTest("ᶑ", ["D con gancho y cola", "D con gancho y cola", "D con gancho y cola"]);
  this.executeCharTest("ᶒ", ["pequeña E con gancho retroflex", "pequeña E con gancho retroflex", "pequeña E con gancho retroflex"]);
  this.executeCharTest("ᶓ", ["E Pequeña Open con Gancho Retroflex", "E Pequeña Open con Gancho Retroflex", "E Pequeña Open con Gancho Retroflex"]);
  this.executeCharTest("ᶔ", ["E abierta invertido con gancho retroflex", "E abierta invertido con gancho retroflex", "E abierta invertido con gancho retroflex"]);
  this.executeCharTest("ᶕ", ["pequeña Schwa con gancho retroflex", "pequeña Schwa con gancho retroflex", "pequeña Schwa con gancho retroflex"]);
  this.executeCharTest("ᶖ", ["I con gancho retroflex", "I con gancho retroflex", "I con gancho retroflex"]);
  this.executeCharTest("ᶗ", ["pequeña latina Open O con gancho retroflex", "pequeña latina Open O con gancho retroflex", "pequeña latina Open O con gancho retroflex"]);
  this.executeCharTest("ᶘ", ["Esh de letra pequeña latina con gancho retroflex", "Esh de letra pequeña latina con gancho retroflex", "Esh de letra pequeña latina con gancho retroflex"]);
  this.executeCharTest("ᶙ", ["U con gancho retroflex", "U con gancho retroflex", "U con gancho retroflex"]);
  this.executeCharTest("ᶚ", ["pequeña Ezh con gancho retroflex", "pequeña Ezh con gancho retroflex", "pequeña Ezh con gancho retroflex"]);
  this.executeCharTest("ŉ", ["n precedida por apóstrofe", "n precedida por apóstrofe", "n precedida por apóstrofe"]);
  this.executeCharTest("ŋ", ["eng", "eng", "eng"]);
  this.executeCharTest("à", ["a grave", "a grave", "a grave"]);
  this.executeCharTest("á", ["a aguda", "a aguda", "a aguda"]);
  this.executeCharTest("â", ["a acento circunflejo", "a acento circunflejo", "a acento circunflejo"]);
  this.executeCharTest("ã", ["a con tilde", "a con tilde", "a con tilde"]);
  this.executeCharTest("ä", ["a diéresis", "a diéresis", "a diéresis"]);
  this.executeCharTest("å", ["a con anillo", "a con anillo", "a con anillo"]);
  this.executeCharTest("ç", ["c cedilla", "c cedilla", "c cedilla"]);
  this.executeCharTest("è", ["e grave", "e grave", "e grave"]);
  this.executeCharTest("é", ["e aguda", "e aguda", "e aguda"]);
  this.executeCharTest("ê", ["e acento circunflejo", "e acento circunflejo", "e acento circunflejo"]);
  this.executeCharTest("ë", ["e diéresis", "e diéresis", "e diéresis"]);
  this.executeCharTest("ì", ["i grave", "i grave", "i grave"]);
  this.executeCharTest("í", ["i aguda", "i aguda", "i aguda"]);
  this.executeCharTest("î", ["i acento circunflejo", "i acento circunflejo", "i acento circunflejo"]);
  this.executeCharTest("ï", ["i diéresis", "i diéresis", "i diéresis"]);
  this.executeCharTest("ñ", ["eñe", "eñe", "eñe"]);
  this.executeCharTest("ò", ["o grave", "o grave", "o grave"]);
  this.executeCharTest("ó", ["o aguda", "o aguda", "o aguda"]);
  this.executeCharTest("ô", ["o acento circunflejo", "o acento circunflejo", "o acento circunflejo"]);
  this.executeCharTest("õ", ["o con tilde", "o con tilde", "o con tilde"]);
  this.executeCharTest("ö", ["o diéresis", "o diéresis", "o diéresis"]);
  this.executeCharTest("ù", ["u grave", "u grave", "u grave"]);
  this.executeCharTest("ú", ["u aguda", "u aguda", "u aguda"]);
  this.executeCharTest("û", ["u acento circunflejo", "u acento circunflejo", "u acento circunflejo"]);
  this.executeCharTest("ü", ["u diéresis", "u diéresis", "u diéresis"]);
  this.executeCharTest("ý", ["Y aguda", "Y aguda", "Y aguda"]);
  this.executeCharTest("ÿ", ["y diéresis", "y diéresis", "y diéresis"]);
  this.executeCharTest("ā", ["a barra", "a barra", "a barra"]);
  this.executeCharTest("ă", ["a con breve", "a con breve", "a con breve"]);
  this.executeCharTest("ą", ["a con ogonek", "a con ogonek", "a con ogonek"]);
  this.executeCharTest("ć", ["c con agudo", "c con agudo", "c con agudo"]);
  this.executeCharTest("ĉ", ["c con acento circunflejo", "c con acento circunflejo", "c con acento circunflejo"]);
  this.executeCharTest("ċ", ["c con punto arriba", "c con punto arriba", "c con punto arriba"]);
  this.executeCharTest("č", ["c con carón", "c con carón", "c con carón"]);
  this.executeCharTest("ď", ["d con carón", "d con carón", "d con carón"]);
  this.executeCharTest("ē", ["e barra", "e barra", "e barra"]);
  this.executeCharTest("ĕ", ["e con breve", "e con breve", "e con breve"]);
  this.executeCharTest("ė", ["e con punto arriba", "e con punto arriba", "e con punto arriba"]);
  this.executeCharTest("ę", ["e con ogonek", "e con ogonek", "e con ogonek"]);
  this.executeCharTest("ě", ["e con carón", "e con carón", "e con carón"]);
  this.executeCharTest("ĝ", ["g con acento circunflejo", "g con acento circunflejo", "g con acento circunflejo"]);
  this.executeCharTest("ğ", ["g con breve", "g con breve", "g con breve"]);
  this.executeCharTest("ġ", ["g con punto arriba", "g con punto arriba", "g con punto arriba"]);
  this.executeCharTest("ģ", ["g con cedilla", "g con cedilla", "g con cedilla"]);
  this.executeCharTest("ĥ", ["h con acento circunflejo", "h con acento circunflejo", "h con acento circunflejo"]);
  this.executeCharTest("ĩ", ["i con tilde", "i con tilde", "i con tilde"]);
  this.executeCharTest("ī", ["i barra", "i barra", "i barra"]);
  this.executeCharTest("ĭ", ["i con breve", "i con breve", "i con breve"]);
  this.executeCharTest("į", ["i con ogonek", "i con ogonek", "i con ogonek"]);
  this.executeCharTest("ı", ["i sin punto", "i sin punto", "i sin punto"]);
  this.executeCharTest("ĵ", ["j con acento circunflejo", "j con acento circunflejo", "j con acento circunflejo"]);
  this.executeCharTest("ķ", ["k con cedilla", "k con cedilla", "k con cedilla"]);
  this.executeCharTest("ĺ", ["l con agudo", "l con agudo", "l con agudo"]);
  this.executeCharTest("ļ", ["l con cedilla", "l con cedilla", "l con cedilla"]);
  this.executeCharTest("ľ", ["l con carón", "l con carón", "l con carón"]);
  this.executeCharTest("ŀ", ["l con punto mediano", "l con punto mediano", "l con punto mediano"]);
  this.executeCharTest("ń", ["n con agudo", "n con agudo", "n con agudo"]);
  this.executeCharTest("ņ", ["n con cedilla", "n con cedilla", "n con cedilla"]);
  this.executeCharTest("ň", ["n con carón", "n con carón", "n con carón"]);
  this.executeCharTest("ō", ["o barra", "o barra", "o barra"]);
  this.executeCharTest("ŏ", ["o con breve", "o con breve", "o con breve"]);
  this.executeCharTest("ő", ["o con doble acento agudo", "o con doble acento agudo", "o con doble acento agudo"]);
  this.executeCharTest("ŕ", ["r con agudo", "r con agudo", "r con agudo"]);
  this.executeCharTest("ŗ", ["r con cedilla", "r con cedilla", "r con cedilla"]);
  this.executeCharTest("ř", ["r con carón", "r con carón", "r con carón"]);
  this.executeCharTest("ś", ["s con agudo", "s con agudo", "s con agudo"]);
  this.executeCharTest("ŝ", ["s con acento circunflejo", "s con acento circunflejo", "s con acento circunflejo"]);
  this.executeCharTest("ş", ["s con cedilla", "s con cedilla", "s con cedilla"]);
  this.executeCharTest("š", ["s con carón", "s con carón", "s con carón"]);
  this.executeCharTest("ţ", ["t con cedilla", "t con cedilla", "t con cedilla"]);
  this.executeCharTest("ť", ["t con carón", "t con carón", "t con carón"]);
  this.executeCharTest("ũ", ["u con tilde", "u con tilde", "u con tilde"]);
  this.executeCharTest("ū", ["u barra", "u barra", "u barra"]);
  this.executeCharTest("ŭ", ["u con breve", "u con breve", "u con breve"]);
  this.executeCharTest("ů", ["u con anillo arriba", "u con anillo arriba", "u con anillo arriba"]);
  this.executeCharTest("ű", ["u con doble acento agudo", "u con doble acento agudo", "u con doble acento agudo"]);
  this.executeCharTest("ų", ["u con ogonek", "u con ogonek", "u con ogonek"]);
  this.executeCharTest("ŵ", ["w con circunflejo", "w con circunflejo", "w con circunflejo"]);
  this.executeCharTest("ŷ", ["y con circunflejo", "y con circunflejo", "y con circunflejo"]);
  this.executeCharTest("ź", ["z con agudo", "z con agudo", "z con agudo"]);
  this.executeCharTest("ż", ["z con punto", "z con punto", "z con punto"]);
  this.executeCharTest("ž", ["z con carón", "z con carón", "z con carón"]);
  this.executeCharTest("ǎ", ["a con acento", "a con acento", "a con acento"]);
  this.executeCharTest("ǐ", ["i con acento", "i con acento", "i con acento"]);
  this.executeCharTest("ǒ", ["o con acento", "o con acento", "o con acento"]);
  this.executeCharTest("ǔ", ["u con acento", "u con acento", "u con acento"]);
  this.executeCharTest("ǧ", ["g con acento", "g con acento", "g con acento"]);
  this.executeCharTest("ǩ", ["k con acento", "k con acento", "k con acento"]);
  this.executeCharTest("ǫ", ["o con pecíolo", "o con pecíolo", "o con pecíolo"]);
  this.executeCharTest("ǰ", ["j con acento", "j con acento", "j con acento"]);
  this.executeCharTest("ǵ", ["g con agudo", "g con agudo", "g con agudo"]);
  this.executeCharTest("ǹ", ["n con grave", "n con grave", "n con grave"]);
  this.executeCharTest("ȁ", ["a con doble tumba", "a con doble tumba", "a con doble tumba"]);
  this.executeCharTest("ȃ", ["a con letras invertidas", "a con letras invertidas", "a con letras invertidas"]);
  this.executeCharTest("ȅ", ["e con doble tumba", "e con doble tumba", "e con doble tumba"]);
  this.executeCharTest("ȇ", ["e con letras invertidas", "e con letras invertidas", "e con letras invertidas"]);
  this.executeCharTest("ȉ", ["i con doble tumba", "i con doble tumba", "i con doble tumba"]);
  this.executeCharTest("ȋ", ["i con Breve invertida", "i con Breve invertida", "i con Breve invertida"]);
  this.executeCharTest("ȍ", ["o con doble tumba", "o con doble tumba", "o con doble tumba"]);
  this.executeCharTest("ȏ", ["o con letras invertidas", "o con letras invertidas", "o con letras invertidas"]);
  this.executeCharTest("ȑ", ["r con doble sepulcro", "r con doble sepulcro", "r con doble sepulcro"]);
  this.executeCharTest("ȓ", ["r con letras invertidas", "r con letras invertidas", "r con letras invertidas"]);
  this.executeCharTest("ȕ", ["u con doble tumba", "u con doble tumba", "u con doble tumba"]);
  this.executeCharTest("ȗ", ["u con letras invertidas", "u con letras invertidas", "u con letras invertidas"]);
  this.executeCharTest("ș", ["s con coma debajo", "s con coma debajo", "s con coma debajo"]);
  this.executeCharTest("ț", ["t con coma debajo", "t con coma debajo", "t con coma debajo"]);
  this.executeCharTest("ȟ", ["h con caron", "h con caron", "h con caron"]);
  this.executeCharTest("ȧ", ["con un punto arriba", "con un punto arriba", "con un punto arriba"]);
  this.executeCharTest("ȩ", ["e con cedilla", "e con cedilla", "e con cedilla"]);
  this.executeCharTest("ȯ", ["o con punto arriba", "o con punto arriba", "o con punto arriba"]);
  this.executeCharTest("ȳ", ["y con Macron", "y con Macron", "y con Macron"]);
  this.executeCharTest("ȷ", ["s in punto j", "s in punto j", "s in punto j"]);
  this.executeCharTest("ḁ", ["a con anillo debajo", "a con anillo debajo", "a con anillo debajo"]);
  this.executeCharTest("ḃ", ["b con punto arriba", "b con punto arriba", "b con punto arriba"]);
  this.executeCharTest("ḅ", ["b con punto debajo", "b con punto debajo", "b con punto debajo"]);
  this.executeCharTest("ḇ", ["b con línea debajo", "b con línea debajo", "b con línea debajo"]);
  this.executeCharTest("ḋ", ["d con punto arriba", "d con punto arriba", "d con punto arriba"]);
  this.executeCharTest("ḍ", ["d con punto debajo", "d con punto debajo", "d con punto debajo"]);
  this.executeCharTest("ḏ", ["d con línea debajo", "d con línea debajo", "d con línea debajo"]);
  this.executeCharTest("ḑ", ["d con cedilla", "d con cedilla", "d con cedilla"]);
  this.executeCharTest("ḓ", ["d con acento circunflejo debajo", "d con acento circunflejo debajo", "d con acento circunflejo debajo"]);
  this.executeCharTest("ḙ", ["e con acento circunflejo debajo", "e con acento circunflejo debajo", "e con acento circunflejo debajo"]);
  this.executeCharTest("ḛ", ["e con tilde debajo", "e con tilde debajo", "e con tilde debajo"]);
  this.executeCharTest("ḟ", ["f con punto arriba", "f con punto arriba", "f con punto arriba"]);
  this.executeCharTest("ḡ", ["g con macrón", "g con macrón", "g con macrón"]);
  this.executeCharTest("ḣ", ["h con punto arriba", "h con punto arriba", "h con punto arriba"]);
  this.executeCharTest("ḥ", ["h con punto debajo", "h con punto debajo", "h con punto debajo"]);
  this.executeCharTest("ḧ", ["h con diéresis", "h con diéresis", "h con diéresis"]);
  this.executeCharTest("ḩ", ["h con cedilla", "h con cedilla", "h con cedilla"]);
  this.executeCharTest("ḫ", ["h con breve debajo", "h con breve debajo", "h con breve debajo"]);
  this.executeCharTest("ḭ", ["i con tilde debajo", "i con tilde debajo", "i con tilde debajo"]);
  this.executeCharTest("ḱ", ["k con agudo", "k con agudo", "k con agudo"]);
  this.executeCharTest("ḳ", ["k con punto debajo", "k con punto debajo", "k con punto debajo"]);
  this.executeCharTest("ḵ", ["k con línea debajo", "k con línea debajo", "k con línea debajo"]);
  this.executeCharTest("ḷ", ["l con punto debajo", "l con punto debajo", "l con punto debajo"]);
  this.executeCharTest("ḻ", ["l con línea debajo", "l con línea debajo", "l con línea debajo"]);
  this.executeCharTest("ḽ", ["l con acento circunflejo debajo", "l con acento circunflejo debajo", "l con acento circunflejo debajo"]);
  this.executeCharTest("ḿ", ["m con agudo", "m con agudo", "m con agudo"]);
  this.executeCharTest("ṁ", ["m con punto arriba", "m con punto arriba", "m con punto arriba"]);
  this.executeCharTest("ṃ", ["m con punto debajo", "m con punto debajo", "m con punto debajo"]);
  this.executeCharTest("ṅ", ["n con punto arriba", "n con punto arriba", "n con punto arriba"]);
  this.executeCharTest("ṇ", ["n con punto debajo", "n con punto debajo", "n con punto debajo"]);
  this.executeCharTest("ṉ", ["n con línea debajo", "n con línea debajo", "n con línea debajo"]);
  this.executeCharTest("ṋ", ["n con acento circunflejo debajo", "n con acento circunflejo debajo", "n con acento circunflejo debajo"]);
  this.executeCharTest("ṕ", ["p con agudo", "p con agudo", "p con agudo"]);
  this.executeCharTest("ṗ", ["p con punto arriba", "p con punto arriba", "p con punto arriba"]);
  this.executeCharTest("ṙ", ["r con punto arriba", "r con punto arriba", "r con punto arriba"]);
  this.executeCharTest("ṛ", ["r con punto debajo", "r con punto debajo", "r con punto debajo"]);
  this.executeCharTest("ṟ", ["r con línea debajo", "r con línea debajo", "r con línea debajo"]);
  this.executeCharTest("ṡ", ["s con punto arriba", "s con punto arriba", "s con punto arriba"]);
  this.executeCharTest("ṣ", ["s con punto debajo", "s con punto debajo", "s con punto debajo"]);
  this.executeCharTest("ṫ", ["t con punto arriba", "t con punto arriba", "t con punto arriba"]);
  this.executeCharTest("ṭ", ["t con punto debajo", "t con punto debajo", "t con punto debajo"]);
  this.executeCharTest("ṯ", ["t con línea debajo", "t con línea debajo", "t con línea debajo"]);
  this.executeCharTest("ṱ", ["t con acento circunflejo debajo", "t con acento circunflejo debajo", "t con acento circunflejo debajo"]);
  this.executeCharTest("ṳ", ["u con diéresis debajo", "u con diéresis debajo", "u con diéresis debajo"]);
  this.executeCharTest("ṵ", ["u con tilde debajo", "u con tilde debajo", "u con tilde debajo"]);
  this.executeCharTest("ṷ", ["u con acento circunflejo debajo", "u con acento circunflejo debajo", "u con acento circunflejo debajo"]);
  this.executeCharTest("ṽ", ["v con tilde", "v con tilde", "v con tilde"]);
  this.executeCharTest("ṿ", ["v con punto debajo", "v con punto debajo", "v con punto debajo"]);
  this.executeCharTest("ẁ", ["w con grave", "w con grave", "w con grave"]);
  this.executeCharTest("ẃ", ["w con agudo", "w con agudo", "w con agudo"]);
  this.executeCharTest("ẅ", ["w con diéresis", "w con diéresis", "w con diéresis"]);
  this.executeCharTest("ẇ", ["w con punto arriba", "w con punto arriba", "w con punto arriba"]);
  this.executeCharTest("ẉ", ["w con punto debajo", "w con punto debajo", "w con punto debajo"]);
  this.executeCharTest("ẋ", ["x con punto arriba", "x con punto arriba", "x con punto arriba"]);
  this.executeCharTest("ẍ", ["x con diéresis", "x con diéresis", "x con diéresis"]);
  this.executeCharTest("ẏ", ["y con punto arriba", "y con punto arriba", "y con punto arriba"]);
  this.executeCharTest("ẑ", ["z con acento circunflejo", "z con acento circunflejo", "z con acento circunflejo"]);
  this.executeCharTest("ẓ", ["z con punto debajo", "z con punto debajo", "z con punto debajo"]);
  this.executeCharTest("ẕ", ["z con línea debajo", "z con línea debajo", "z con línea debajo"]);
  this.executeCharTest("ẖ", ["h con línea debajo", "h con línea debajo", "h con línea debajo"]);
  this.executeCharTest("ẗ", ["t con diéresis", "t con diéresis", "t con diéresis"]);
  this.executeCharTest("ẘ", ["w con anillo arriba", "w con anillo arriba", "w con anillo arriba"]);
  this.executeCharTest("ẙ", ["y con anillo arriba", "y con anillo arriba", "y con anillo arriba"]);
  this.executeCharTest("ẚ", ["a con medio derecho de anillo", "a con medio derecho de anillo", "a con medio derecho de anillo"]);
  this.executeCharTest("ạ", ["a con punto debajo", "a con punto debajo", "a con punto debajo"]);
  this.executeCharTest("ả", ["a con gancho arriba", "a con gancho arriba", "a con gancho arriba"]);
  this.executeCharTest("ẹ", ["e con punto debajo", "e con punto debajo", "e con punto debajo"]);
  this.executeCharTest("ẻ", ["e con gancho arriba", "e con gancho arriba", "e con gancho arriba"]);
  this.executeCharTest("ẽ", ["e con tilde", "e con tilde", "e con tilde"]);
  this.executeCharTest("ỉ", ["i con gancho arriba", "i con gancho arriba", "i con gancho arriba"]);
  this.executeCharTest("ị", ["i con punto debajo", "i con punto debajo", "i con punto debajo"]);
  this.executeCharTest("ọ", ["o con punto debajo", "o con punto debajo", "o con punto debajo"]);
  this.executeCharTest("ỏ", ["o con gancho arriba", "o con gancho arriba", "o con gancho arriba"]);
  this.executeCharTest("ụ", ["u con punto debajo", "u con punto debajo", "u con punto debajo"]);
  this.executeCharTest("ủ", ["u con gancho arriba", "u con gancho arriba", "u con gancho arriba"]);
  this.executeCharTest("ỳ", ["y con grave", "y con grave", "y con grave"]);
  this.executeCharTest("ỵ", ["y con punto debajo", "y con punto debajo", "y con punto debajo"]);
  this.executeCharTest("ỷ", ["y con gancho arriba", "y con gancho arriba", "y con gancho arriba"]);
  this.executeCharTest("ỹ", ["y con tilde", "y con tilde", "y con tilde"]);
  this.executeCharTest("ͣ", ["combinando a", "combinando a", "combinando a"]);
  this.executeCharTest("ͤ", ["combinando e", "combinando e", "combinando e"]);
  this.executeCharTest("ͥ", ["combinando i", "combinando i", "combinando i"]);
  this.executeCharTest("ͦ", ["combinando o", "combinando o", "combinando o"]);
  this.executeCharTest("ͧ", ["combinando u", "combinando u", "combinando u"]);
  this.executeCharTest("ͨ", ["combinando c", "combinando c", "combinando c"]);
  this.executeCharTest("ͩ", ["combinando d", "combinando d", "combinando d"]);
  this.executeCharTest("ͪ", ["combinando h", "combinando h", "combinando h"]);
  this.executeCharTest("ͫ", ["combinando m", "combinando m", "combinando m"]);
  this.executeCharTest("ͬ", ["combinando r", "combinando r", "combinando r"]);
  this.executeCharTest("ͭ", ["combinando t", "combinando t", "combinando t"]);
  this.executeCharTest("ͮ", ["combinando v", "combinando v", "combinando v"]);
  this.executeCharTest("ͯ", ["combinando x", "combinando x", "combinando x"]);
  this.executeCharTest("ᵢ", ["subíndice i", "subíndice i", "subíndice i"]);
  this.executeCharTest("ᵣ", ["subíndice r", "subíndice r", "subíndice r"]);
  this.executeCharTest("ᵤ", ["subíndice u", "subíndice u", "subíndice u"]);
  this.executeCharTest("ᵥ", ["subíndice latino letra pequeña V", "subíndice latino letra pequeña V", "subíndice latino letra pequeña V"]);
  this.executeCharTest("᷊", ["combinando r abajo", "combinando r abajo", "combinando r abajo"]);
  this.executeCharTest("ᷓ", ["combinando letra minúscula en latín, aplanado, abierto arriba", "combinando letra minúscula en latín, aplanado, abierto arriba", "combinando letra minúscula en latín, aplanado, abierto arriba"]);
  this.executeCharTest("ᷔ", ["combinando ae", "combinando ae", "combinando ae"]);
  this.executeCharTest("ᷕ", ["combinando ao", "combinando ao", "combinando ao"]);
  this.executeCharTest("ᷖ", ["combinando av", "combinando av", "combinando av"]);
  this.executeCharTest("ᷗ", ["combinando Letra Pequeña Latina C Cedilla", "combinando Letra Pequeña Latina C Cedilla", "combinando Letra Pequeña Latina C Cedilla"]);
  this.executeCharTest("ᷘ", ["combinando insular d", "combinando insular d", "combinando insular d"]);
  this.executeCharTest("ᷙ", ["combinando la eth", "combinando la eth", "combinando la eth"]);
  this.executeCharTest("ᷚ", ["combinando g", "combinando g", "combinando g"]);
  this.executeCharTest("ᷛ", ["combinando pequeña mayúscula G", "combinando pequeña mayúscula G", "combinando pequeña mayúscula G"]);
  this.executeCharTest("ᷜ", ["combinando k", "combinando k", "combinando k"]);
  this.executeCharTest("ᷝ", ["combinando l", "combinando l", "combinando l"]);
  this.executeCharTest("ᷞ", ["combinando pequeña mayúscula L", "combinando pequeña mayúscula L", "combinando pequeña mayúscula L"]);
  this.executeCharTest("ᷟ", ["combinando pequeña mayúscula M", "combinando pequeña mayúscula M", "combinando pequeña mayúscula M"]);
  this.executeCharTest("ᷠ", ["combinando n", "combinando n", "combinando n"]);
  this.executeCharTest("ᷡ", ["combinando pequeña mayúscula N", "combinando pequeña mayúscula N", "combinando pequeña mayúscula N"]);
  this.executeCharTest("ᷢ", ["combinando pequeña mayúscula R", "combinando pequeña mayúscula R", "combinando pequeña mayúscula R"]);
  this.executeCharTest("ᷣ", ["combinando pequeña r rotunda", "combinando pequeña r rotunda", "combinando pequeña r rotunda"]);
  this.executeCharTest("ᷤ", ["combinando s", "combinando s", "combinando s"]);
  this.executeCharTest("ᷥ", ["combinando larga s", "combinando larga s", "combinando larga s"]);
  this.executeCharTest("ᷦ", ["combinando z", "combinando z", "combinando z"]);
  this.executeCharTest("ⁱ", ["superíndice i", "superíndice i", "superíndice i"]);
  this.executeCharTest("ⁿ", ["superíndice n", "superíndice n", "superíndice n"]);
  this.executeCharTest("ₐ", ["subíndice a", "subíndice a", "subíndice a"]);
  this.executeCharTest("ₑ", ["subíndice e", "subíndice e", "subíndice e"]);
  this.executeCharTest("ₒ", ["subíndice o", "subíndice o", "subíndice o"]);
  this.executeCharTest("ₓ", ["subíndice x", "subíndice x", "subíndice x"]);
  this.executeCharTest("ₔ", ["subíndice schwa", "subíndice schwa", "subíndice schwa"]);
  this.executeCharTest("ₕ", ["subíndice h", "subíndice h", "subíndice h"]);
  this.executeCharTest("ₖ", ["subíndice k", "subíndice k", "subíndice k"]);
  this.executeCharTest("ₗ", ["subíndice l", "subíndice l", "subíndice l"]);
  this.executeCharTest("ₘ", ["subíndice m", "subíndice m", "subíndice m"]);
  this.executeCharTest("ₙ", ["subíndice n", "subíndice n", "subíndice n"]);
  this.executeCharTest("ₚ", ["subíndice p", "subíndice p", "subíndice p"]);
  this.executeCharTest("ₛ", ["subíndice s", "subíndice s", "subíndice s"]);
  this.executeCharTest("ₜ", ["subíndice t", "subíndice t", "subíndice t"]);
  this.executeCharTest("ⱼ", ["subíndice j", "subíndice j", "subíndice j"]);
  this.executeCharTest("🄪", ["concha de tortuga con corchetes mayúscula S", "concha de tortuga con corchetes mayúscula S", "concha de tortuga con corchetes mayúscula S"]);
  this.executeCharTest("🄫", ["círculo itálico mayúscula C", "círculo itálico mayúscula C", "círculo itálico mayúscula C"]);
  this.executeCharTest("🄬", ["círculo itálico mayúscula R", "círculo itálico mayúscula R", "círculo itálico mayúscula R"]);
  this.executeCharTest("🆊", ["cruzada negativa cuadrada Mayúscula P", "cruzada negativa cuadrada Mayúscula P", "cruzada negativa cuadrada Mayúscula P"]);
  this.executeCharTest("Ǖ", ["mayúscula U con diéresis y macron", "mayúscula U con diéresis y macron", "mayúscula U con diéresis y macron"]);
  this.executeCharTest("Ǘ", ["mayúscula U con diéresis y acento agudo", "mayúscula U con diéresis y acento agudo", "mayúscula U con diéresis y acento agudo"]);
  this.executeCharTest("Ǚ", ["mayúscula U con diéresis y acento", "mayúscula U con diéresis y acento", "mayúscula U con diéresis y acento"]);
  this.executeCharTest("Ǜ", ["mayúscula U con diéresis y grave", "mayúscula U con diéresis y grave", "mayúscula U con diéresis y grave"]);
  this.executeCharTest("Ǟ", ["mayúscula A con diéresis y macron", "mayúscula A con diéresis y macron", "mayúscula A con diéresis y macron"]);
  this.executeCharTest("Ǡ", ["mayúscula A con punto arriba y macron", "mayúscula A con punto arriba y macron", "mayúscula A con punto arriba y macron"]);
  this.executeCharTest("Ǭ", ["mayúscula O con pecíolo y macron", "mayúscula O con pecíolo y macron", "mayúscula O con pecíolo y macron"]);
  this.executeCharTest("Ǻ", ["mayúscula A con ring above y acento agudo", "mayúscula A con ring above y acento agudo", "mayúscula A con ring above y acento agudo"]);
  this.executeCharTest("Ȫ", ["mayúscula O con diaéresis y macron", "mayúscula O con diaéresis y macron", "mayúscula O con diaéresis y macron"]);
  this.executeCharTest("Ȭ", ["mayúscula O con tilde y macron", "mayúscula O con tilde y macron", "mayúscula O con tilde y macron"]);
  this.executeCharTest("Ȱ", ["mayúscula O con dot above y macron", "mayúscula O con dot above y macron", "mayúscula O con dot above y macron"]);
  this.executeCharTest("Ḉ", ["mayúscula C con cedilla y agudo", "mayúscula C con cedilla y agudo", "mayúscula C con cedilla y agudo"]);
  this.executeCharTest("Ḕ", ["mayúscula E con macrón y grave", "mayúscula E con macrón y grave", "mayúscula E con macrón y grave"]);
  this.executeCharTest("Ḗ", ["mayúscula E con macrón y agudo", "mayúscula E con macrón y agudo", "mayúscula E con macrón y agudo"]);
  this.executeCharTest("Ḝ", ["mayúscula E with cedilla and breve", "mayúscula E with cedilla and breve", "mayúscula E with cedilla and breve"]);
  this.executeCharTest("Ḯ", ["mayúscula I con diéresis y agudo", "mayúscula I con diéresis y agudo", "mayúscula I con diéresis y agudo"]);
  this.executeCharTest("Ḹ", ["mayúscula L con punto debajo y macrón", "mayúscula L con punto debajo y macrón", "mayúscula L con punto debajo y macrón"]);
  this.executeCharTest("Ṍ", ["mayúscula O con tilde y acute", "mayúscula O con tilde y acute", "mayúscula O con tilde y acute"]);
  this.executeCharTest("Ṏ", ["mayúscula O con tilde y diéresis", "mayúscula O con tilde y diéresis", "mayúscula O con tilde y diéresis"]);
  this.executeCharTest("Ṑ", ["mayúscula O con macrón y grave", "mayúscula O con macrón y grave", "mayúscula O con macrón y grave"]);
  this.executeCharTest("Ṓ", ["mayúscula O con macrón y agudo", "mayúscula O con macrón y agudo", "mayúscula O con macrón y agudo"]);
  this.executeCharTest("Ṝ", ["mayúscula R con punto debajo y macrón", "mayúscula R con punto debajo y macrón", "mayúscula R con punto debajo y macrón"]);
  this.executeCharTest("Ṥ", ["mayúscula S con agudo y punto arriba", "mayúscula S con agudo y punto arriba", "mayúscula S con agudo y punto arriba"]);
  this.executeCharTest("Ṧ", ["mayúscula S con carón y punto arriba", "mayúscula S con carón y punto arriba", "mayúscula S con carón y punto arriba"]);
  this.executeCharTest("Ṩ", ["mayúscula S con punto debajo y punto arriba", "mayúscula S con punto debajo y punto arriba", "mayúscula S con punto debajo y punto arriba"]);
  this.executeCharTest("Ṹ", ["mayúscula U con tilde y agudo", "mayúscula U con tilde y agudo", "mayúscula U con tilde y agudo"]);
  this.executeCharTest("Ṻ", ["mayúscula U con macrón y diéresis", "mayúscula U con macrón y diéresis", "mayúscula U con macrón y diéresis"]);
  this.executeCharTest("Ấ", ["mayúscula A con acento circunflejo y agudo", "mayúscula A con acento circunflejo y agudo", "mayúscula A con acento circunflejo y agudo"]);
  this.executeCharTest("Ầ", ["mayúscula A con acento circunflejo y grave", "mayúscula A con acento circunflejo y grave", "mayúscula A con acento circunflejo y grave"]);
  this.executeCharTest("Ẩ", ["mayúscula A con acento circunflejo y gancho arriba", "mayúscula A con acento circunflejo y gancho arriba", "mayúscula A con acento circunflejo y gancho arriba"]);
  this.executeCharTest("Ẫ", ["mayúscula A con acento circunflejo y tilde", "mayúscula A con acento circunflejo y tilde", "mayúscula A con acento circunflejo y tilde"]);
  this.executeCharTest("Ậ", ["mayúscula A con acento circunflejo y punto debajo", "mayúscula A con acento circunflejo y punto debajo", "mayúscula A con acento circunflejo y punto debajo"]);
  this.executeCharTest("Ắ", ["mayúscula A con breve y agudo", "mayúscula A con breve y agudo", "mayúscula A con breve y agudo"]);
  this.executeCharTest("Ằ", ["mayúscula A con breve y grave", "mayúscula A con breve y grave", "mayúscula A con breve y grave"]);
  this.executeCharTest("Ẳ", ["mayúscula A con breve y gancho arriba", "mayúscula A con breve y gancho arriba", "mayúscula A con breve y gancho arriba"]);
  this.executeCharTest("Ẵ", ["mayúscula A con breve y tilde", "mayúscula A con breve y tilde", "mayúscula A con breve y tilde"]);
  this.executeCharTest("Ặ", ["mayúscula A con breve y punto debajo", "mayúscula A con breve y punto debajo", "mayúscula A con breve y punto debajo"]);
  this.executeCharTest("Ế", ["mayúscula E con acento circunflejo y agudo", "mayúscula E con acento circunflejo y agudo", "mayúscula E con acento circunflejo y agudo"]);
  this.executeCharTest("Ề", ["mayúscula E con acento circunflejo y grave", "mayúscula E con acento circunflejo y grave", "mayúscula E con acento circunflejo y grave"]);
  this.executeCharTest("Ể", ["mayúscula E con acento circunflejo y gancho arriba", "mayúscula E con acento circunflejo y gancho arriba", "mayúscula E con acento circunflejo y gancho arriba"]);
  this.executeCharTest("Ễ", ["mayúscula E con acento circunflejo y tilde", "mayúscula E con acento circunflejo y tilde", "mayúscula E con acento circunflejo y tilde"]);
  this.executeCharTest("Ệ", ["mayúscula E con acento circunflejo y punto debajo", "mayúscula E con acento circunflejo y punto debajo", "mayúscula E con acento circunflejo y punto debajo"]);
  this.executeCharTest("Ố", ["mayúscula O con acento circunflejo y agudo", "mayúscula O con acento circunflejo y agudo", "mayúscula O con acento circunflejo y agudo"]);
  this.executeCharTest("Ồ", ["mayúscula O con acento circunflejo y grave", "mayúscula O con acento circunflejo y grave", "mayúscula O con acento circunflejo y grave"]);
  this.executeCharTest("Ổ", ["mayúscula O con acento circunflejo y gancho arriba", "mayúscula O con acento circunflejo y gancho arriba", "mayúscula O con acento circunflejo y gancho arriba"]);
  this.executeCharTest("Ỗ", ["mayúscula O con acento circunflejo y tilde", "mayúscula O con acento circunflejo y tilde", "mayúscula O con acento circunflejo y tilde"]);
  this.executeCharTest("Ộ", ["mayúscula O con acento circunflejo y punto debajo", "mayúscula O con acento circunflejo y punto debajo", "mayúscula O con acento circunflejo y punto debajo"]);
  this.executeCharTest("Ớ", ["mayúscula O with horn and acute", "mayúscula O with horn and acute", "mayúscula O with horn and acute"]);
  this.executeCharTest("Ờ", ["mayúscula O with horn and grave", "mayúscula O with horn and grave", "mayúscula O with horn and grave"]);
  this.executeCharTest("Ở", ["mayúscula O with horn and hook above", "mayúscula O with horn and hook above", "mayúscula O with horn and hook above"]);
  this.executeCharTest("Ỡ", ["mayúscula O with horn and tilde", "mayúscula O with horn and tilde", "mayúscula O with horn and tilde"]);
  this.executeCharTest("Ợ", ["mayúscula O con cuerno y punto debajo", "mayúscula O con cuerno y punto debajo", "mayúscula O con cuerno y punto debajo"]);
  this.executeCharTest("Ứ", ["mayúscula U con cuerno y agudo", "mayúscula U con cuerno y agudo", "mayúscula U con cuerno y agudo"]);
  this.executeCharTest("Ừ", ["mayúscula U con cuerno y grave", "mayúscula U con cuerno y grave", "mayúscula U con cuerno y grave"]);
  this.executeCharTest("Ử", ["mayúscula U con cuerno y gancho arriba", "mayúscula U con cuerno y gancho arriba", "mayúscula U con cuerno y gancho arriba"]);
  this.executeCharTest("Ữ", ["mayúscula U con cuerno y tilde", "mayúscula U con cuerno y tilde", "mayúscula U con cuerno y tilde"]);
  this.executeCharTest("Ự", ["mayúscula U con cuerno y punto debajo", "mayúscula U con cuerno y punto debajo", "mayúscula U con cuerno y punto debajo"]);
  this.executeCharTest("À", ["mayúscula A grave", "mayúscula A grave", "mayúscula A grave"]);
  this.executeCharTest("Á", ["mayúscula A aguda", "mayúscula A aguda", "mayúscula A aguda"]);
  this.executeCharTest("Â", ["mayúscula A acento circunflejo", "mayúscula A acento circunflejo", "mayúscula A acento circunflejo"]);
  this.executeCharTest("Ã", ["mayúscula A con tilde", "mayúscula A con tilde", "mayúscula A con tilde"]);
  this.executeCharTest("Ä", ["mayúscula A diéresis", "mayúscula A diéresis", "mayúscula A diéresis"]);
  this.executeCharTest("Å", ["mayúscula A con anillo", "mayúscula A con anillo", "mayúscula A con anillo"]);
  this.executeCharTest("Ç", ["mayúscula C cedilla", "mayúscula C cedilla", "mayúscula C cedilla"]);
  this.executeCharTest("È", ["mayúscula E grave", "mayúscula E grave", "mayúscula E grave"]);
  this.executeCharTest("É", ["mayúscula E aguda", "mayúscula E aguda", "mayúscula E aguda"]);
  this.executeCharTest("Ê", ["mayúscula E acento circunflejo", "mayúscula E acento circunflejo", "mayúscula E acento circunflejo"]);
  this.executeCharTest("Ë", ["mayúscula E diéresis", "mayúscula E diéresis", "mayúscula E diéresis"]);
  this.executeCharTest("Ì", ["mayúscula I grave", "mayúscula I grave", "mayúscula I grave"]);
  this.executeCharTest("Í", ["mayúscula I aguda", "mayúscula I aguda", "mayúscula I aguda"]);
  this.executeCharTest("Î", ["mayúscula I acento circumflejo", "mayúscula I acento circumflejo", "mayúscula I acento circumflejo"]);
  this.executeCharTest("Ï", ["mayúscula I diéresis", "mayúscula I diéresis", "mayúscula I diéresis"]);
  this.executeCharTest("Ñ", ["mayúscula Ñ", "mayúscula Ñ", "mayúscula Ñ"]);
  this.executeCharTest("Ò", ["mayúscula O grave", "mayúscula O grave", "mayúscula O grave"]);
  this.executeCharTest("Ó", ["mayúscula O aguda", "mayúscula O aguda", "mayúscula O aguda"]);
  this.executeCharTest("Ô", ["mayúscula O acento circunflejo", "mayúscula O acento circunflejo", "mayúscula O acento circunflejo"]);
  this.executeCharTest("Õ", ["mayúscula O con tilde", "mayúscula O con tilde", "mayúscula O con tilde"]);
  this.executeCharTest("Ö", ["mayúscula O diéresis", "mayúscula O diéresis", "mayúscula O diéresis"]);
  this.executeCharTest("Ù", ["mayúscula U grave", "mayúscula U grave", "mayúscula U grave"]);
  this.executeCharTest("Ú", ["mayúscula U aguda", "mayúscula U aguda", "mayúscula U aguda"]);
  this.executeCharTest("Û", ["mayúscula U acento circunflejo", "mayúscula U acento circunflejo", "mayúscula U acento circunflejo"]);
  this.executeCharTest("Ü", ["mayúscula U diéresis", "mayúscula U diéresis", "mayúscula U diéresis"]);
  this.executeCharTest("Ý", ["mayúscula Y aguda", "mayúscula Y aguda", "mayúscula Y aguda"]);
  this.executeCharTest("Ā", ["mayúscula A barra", "mayúscula A barra", "mayúscula A barra"]);
  this.executeCharTest("Ă", ["mayúscula A con breve", "mayúscula A con breve", "mayúscula A con breve"]);
  this.executeCharTest("Ą", ["mayúscula A con ogonek", "mayúscula A con ogonek", "mayúscula A con ogonek"]);
  this.executeCharTest("Ć", ["mayúscula C con agudo", "mayúscula C con agudo", "mayúscula C con agudo"]);
  this.executeCharTest("Ĉ", ["mayúscula C con acento circunflejo", "mayúscula C con acento circunflejo", "mayúscula C con acento circunflejo"]);
  this.executeCharTest("Ċ", ["mayúscula C con punto arriba", "mayúscula C con punto arriba", "mayúscula C con punto arriba"]);
  this.executeCharTest("Č", ["mayúscula C con carón", "mayúscula C con carón", "mayúscula C con carón"]);
  this.executeCharTest("Ď", ["mayúscula D con carón", "mayúscula D con carón", "mayúscula D con carón"]);
  this.executeCharTest("Ē", ["mayúscula E barra", "mayúscula E barra", "mayúscula E barra"]);
  this.executeCharTest("Ĕ", ["mayúscula E con breve", "mayúscula E con breve", "mayúscula E con breve"]);
  this.executeCharTest("Ė", ["mayúscula E con punto arriba", "mayúscula E con punto arriba", "mayúscula E con punto arriba"]);
  this.executeCharTest("Ę", ["mayúscula E con ogonek", "mayúscula E con ogonek", "mayúscula E con ogonek"]);
  this.executeCharTest("Ě", ["mayúscula E con carón", "mayúscula E con carón", "mayúscula E con carón"]);
  this.executeCharTest("Ĝ", ["mayúscula G con acento circunflejo", "mayúscula G con acento circunflejo", "mayúscula G con acento circunflejo"]);
  this.executeCharTest("Ğ", ["mayúscula G con breve", "mayúscula G con breve", "mayúscula G con breve"]);
  this.executeCharTest("Ġ", ["mayúscula G con punto arriba", "mayúscula G con punto arriba", "mayúscula G con punto arriba"]);
  this.executeCharTest("Ģ", ["mayúscula G con cedilla", "mayúscula G con cedilla", "mayúscula G con cedilla"]);
  this.executeCharTest("Ĥ", ["mayúscula H con acento circunflejo", "mayúscula H con acento circunflejo", "mayúscula H con acento circunflejo"]);
  this.executeCharTest("Ĩ", ["mayúscula I con tilde", "mayúscula I con tilde", "mayúscula I con tilde"]);
  this.executeCharTest("Ī", ["mayúscula I barra", "mayúscula I barra", "mayúscula I barra"]);
  this.executeCharTest("Ĭ", ["mayúscula I con breve", "mayúscula I con breve", "mayúscula I con breve"]);
  this.executeCharTest("Į", ["mayúscula I con ogonek", "mayúscula I con ogonek", "mayúscula I con ogonek"]);
  this.executeCharTest("İ", ["mayúscula I con punto arriba", "mayúscula I con punto arriba", "mayúscula I con punto arriba"]);
  this.executeCharTest("Ĵ", ["mayúscula J con acento circunflejo", "mayúscula J con acento circunflejo", "mayúscula J con acento circunflejo"]);
  this.executeCharTest("Ķ", ["mayúscula K con cedilla", "mayúscula K con cedilla", "mayúscula K con cedilla"]);
  this.executeCharTest("Ĺ", ["mayúscula L con agudo", "mayúscula L con agudo", "mayúscula L con agudo"]);
  this.executeCharTest("Ļ", ["mayúscula L con cedilla", "mayúscula L con cedilla", "mayúscula L con cedilla"]);
  this.executeCharTest("Ľ", ["mayúscula L con carón", "mayúscula L con carón", "mayúscula L con carón"]);
  this.executeCharTest("Ŀ", ["mayúscula L con punto mediano", "mayúscula L con punto mediano", "mayúscula L con punto mediano"]);
  this.executeCharTest("Ń", ["mayúscula N con agudo", "mayúscula N con agudo", "mayúscula N con agudo"]);
  this.executeCharTest("Ņ", ["mayúscula N con cedilla", "mayúscula N con cedilla", "mayúscula N con cedilla"]);
  this.executeCharTest("Ň", ["mayúscula n con carón", "mayúscula n con carón", "mayúscula n con carón"]);
  this.executeCharTest("Ō", ["mayúscula O barra", "mayúscula O barra", "mayúscula O barra"]);
  this.executeCharTest("Ŏ", ["mayúscula O con breve", "mayúscula O con breve", "mayúscula O con breve"]);
  this.executeCharTest("Ő", ["mayúscula O con doble acento agudo ", "mayúscula O con doble acento agudo ", "mayúscula O con doble acento agudo "]);
  this.executeCharTest("Ŕ", ["mayúscula R con agudo", "mayúscula R con agudo", "mayúscula R con agudo"]);
  this.executeCharTest("Ŗ", ["mayúscula R con cedilla", "mayúscula R con cedilla", "mayúscula R con cedilla"]);
  this.executeCharTest("Ř", ["mayúscula R con carón", "mayúscula R con carón", "mayúscula R con carón"]);
  this.executeCharTest("Ś", ["mayúscula S con agudo", "mayúscula S con agudo", "mayúscula S con agudo"]);
  this.executeCharTest("Ŝ", ["mayúscula S con acento circunflejo", "mayúscula S con acento circunflejo", "mayúscula S con acento circunflejo"]);
  this.executeCharTest("Ş", ["mayúscula S con cedilla", "mayúscula S con cedilla", "mayúscula S con cedilla"]);
  this.executeCharTest("Š", ["mayúscula S con carón", "mayúscula S con carón", "mayúscula S con carón"]);
  this.executeCharTest("Ţ", ["mayúscula T con cedilla", "mayúscula T con cedilla", "mayúscula T con cedilla"]);
  this.executeCharTest("Ť", ["mayúscula T con carón", "mayúscula T con carón", "mayúscula T con carón"]);
  this.executeCharTest("Ũ", ["mayúscula U con tilde", "mayúscula U con tilde", "mayúscula U con tilde"]);
  this.executeCharTest("Ū", ["mayúscula U barra", "mayúscula U barra", "mayúscula U barra"]);
  this.executeCharTest("Ŭ", ["mayúscula U con breve", "mayúscula U con breve", "mayúscula U con breve"]);
  this.executeCharTest("Ů", ["mayúscula U con anillo arriba", "mayúscula U con anillo arriba", "mayúscula U con anillo arriba"]);
  this.executeCharTest("Ű", ["mayúscula U con doble acento agudo", "mayúscula U con doble acento agudo", "mayúscula U con doble acento agudo"]);
  this.executeCharTest("Ų", ["mayúscula U con ogonek", "mayúscula U con ogonek", "mayúscula U con ogonek"]);
  this.executeCharTest("Ŵ", ["mayúscula W con acento circunflejo", "mayúscula W con acento circunflejo", "mayúscula W con acento circunflejo"]);
  this.executeCharTest("Ŷ", ["mayúscula Y con circunflejo", "mayúscula Y con circunflejo", "mayúscula Y con circunflejo"]);
  this.executeCharTest("Ÿ", ["mayúscula Y diéresis", "mayúscula Y diéresis", "mayúscula Y diéresis"]);
  this.executeCharTest("Ź", ["mayúscula Z con agudo", "mayúscula Z con agudo", "mayúscula Z con agudo"]);
  this.executeCharTest("Ż", ["mayúscula Z con punto", "mayúscula Z con punto", "mayúscula Z con punto"]);
  this.executeCharTest("Ž", ["mayúscula Z con carón", "mayúscula Z con carón", "mayúscula Z con carón"]);
  this.executeCharTest("Ǎ", ["mayúscula A con acento", "mayúscula A con acento", "mayúscula A con acento"]);
  this.executeCharTest("Ǐ", ["mayúscula I con acento", "mayúscula I con acento", "mayúscula I con acento"]);
  this.executeCharTest("Ǒ", ["mayúscula O con acento", "mayúscula O con acento", "mayúscula O con acento"]);
  this.executeCharTest("Ǔ", ["mayúscula U con acento", "mayúscula U con acento", "mayúscula U con acento"]);
  this.executeCharTest("Ǧ", ["mayúscula G con acento", "mayúscula G con acento", "mayúscula G con acento"]);
  this.executeCharTest("Ǩ", ["mayúscula K con acento", "mayúscula K con acento", "mayúscula K con acento"]);
  this.executeCharTest("Ǫ", ["mayúscula O con pecíolo", "mayúscula O con pecíolo", "mayúscula O con pecíolo"]);
  this.executeCharTest("Ǵ", ["mayúscula G con acento agudo", "mayúscula G con acento agudo", "mayúscula G con acento agudo"]);
  this.executeCharTest("Ǹ", ["mayúscula N con grave", "mayúscula N con grave", "mayúscula N con grave"]);
  this.executeCharTest("Ȁ", ["mayúscula con doble tumba", "mayúscula con doble tumba", "mayúscula con doble tumba"]);
  this.executeCharTest("Ȃ", ["mayúscula a con breve invertido", "mayúscula a con breve invertido", "mayúscula a con breve invertido"]);
  this.executeCharTest("Ȅ", ["mayúscula E con doble tumba", "mayúscula E con doble tumba", "mayúscula E con doble tumba"]);
  this.executeCharTest("Ȇ", ["mayúscula E con Breve invertido", "mayúscula E con Breve invertido", "mayúscula E con Breve invertido"]);
  this.executeCharTest("Ȉ", ["mayúscula I con doble tumba", "mayúscula I con doble tumba", "mayúscula I con doble tumba"]);
  this.executeCharTest("Ȋ", ["mayúscula I con Breve invertido", "mayúscula I con Breve invertido", "mayúscula I con Breve invertido"]);
  this.executeCharTest("Ȍ", ["mayúscula O con doble tumba", "mayúscula O con doble tumba", "mayúscula O con doble tumba"]);
  this.executeCharTest("Ȏ", ["mayúscula O con Breve invertido", "mayúscula O con Breve invertido", "mayúscula O con Breve invertido"]);
  this.executeCharTest("Ȑ", ["mayúscula R con doble tumba", "mayúscula R con doble tumba", "mayúscula R con doble tumba"]);
  this.executeCharTest("Ȓ", ["mayúscula R con breve invertido", "mayúscula R con breve invertido", "mayúscula R con breve invertido"]);
  this.executeCharTest("Ȕ", ["mayúscula U con doble tumba", "mayúscula U con doble tumba", "mayúscula U con doble tumba"]);
  this.executeCharTest("Ȗ", ["mayúscula U con breve invertido", "mayúscula U con breve invertido", "mayúscula U con breve invertido"]);
  this.executeCharTest("Ș", ["mayúscula S con coma debajo", "mayúscula S con coma debajo", "mayúscula S con coma debajo"]);
  this.executeCharTest("Ț", ["mayúscula T con coma debajo", "mayúscula T con coma debajo", "mayúscula T con coma debajo"]);
  this.executeCharTest("Ȟ", ["mayúscula H con Caron", "mayúscula H con Caron", "mayúscula H con Caron"]);
  this.executeCharTest("Ȧ", ["mayúscula con un punto arriba", "mayúscula con un punto arriba", "mayúscula con un punto arriba"]);
  this.executeCharTest("Ȩ", ["mayúscula E con cedilla", "mayúscula E con cedilla", "mayúscula E con cedilla"]);
  this.executeCharTest("Ȯ", ["mayúscula O con punto arriba", "mayúscula O con punto arriba", "mayúscula O con punto arriba"]);
  this.executeCharTest("Ȳ", ["Mayúscula Y con Macron", "Mayúscula Y con Macron", "Mayúscula Y con Macron"]);
  this.executeCharTest("Ḁ", ["mayúscula A con anillo debajo", "mayúscula A con anillo debajo", "mayúscula A con anillo debajo"]);
  this.executeCharTest("Ḃ", ["mayúscula B con punto arriba", "mayúscula B con punto arriba", "mayúscula B con punto arriba"]);
  this.executeCharTest("Ḅ", ["mayúscula B con punto debajo", "mayúscula B con punto debajo", "mayúscula B con punto debajo"]);
  this.executeCharTest("Ḇ", ["mayúscula B con línea debajo", "mayúscula B con línea debajo", "mayúscula B con línea debajo"]);
  this.executeCharTest("Ḋ", ["mayúscula D con punto arriba", "mayúscula D con punto arriba", "mayúscula D con punto arriba"]);
  this.executeCharTest("Ḍ", ["mayúscula D con punto debajo", "mayúscula D con punto debajo", "mayúscula D con punto debajo"]);
  this.executeCharTest("Ḏ", ["mayúscula D con línea debajo", "mayúscula D con línea debajo", "mayúscula D con línea debajo"]);
  this.executeCharTest("Ḑ", ["mayúscula D con cedilla", "mayúscula D con cedilla", "mayúscula D con cedilla"]);
  this.executeCharTest("Ḓ", ["mayúscula D con acento circunflejo debajo", "mayúscula D con acento circunflejo debajo", "mayúscula D con acento circunflejo debajo"]);
  this.executeCharTest("Ḙ", ["mayúscula E con acento circunflejo debajo", "mayúscula E con acento circunflejo debajo", "mayúscula E con acento circunflejo debajo"]);
  this.executeCharTest("Ḛ", ["mayúscula E con tilde debajo", "mayúscula E con tilde debajo", "mayúscula E con tilde debajo"]);
  this.executeCharTest("Ḟ", ["mayúscula F con punto arriba", "mayúscula F con punto arriba", "mayúscula F con punto arriba"]);
  this.executeCharTest("Ḡ", ["mayúscula G con macrón", "mayúscula G con macrón", "mayúscula G con macrón"]);
  this.executeCharTest("Ḣ", ["mayúscula H con punto arriba", "mayúscula H con punto arriba", "mayúscula H con punto arriba"]);
  this.executeCharTest("Ḥ", ["mayúscula H con punto debajo", "mayúscula H con punto debajo", "mayúscula H con punto debajo"]);
  this.executeCharTest("Ḧ", ["mayúscula H con diéresis", "mayúscula H con diéresis", "mayúscula H con diéresis"]);
  this.executeCharTest("Ḩ", ["mayúscula H con cedilla", "mayúscula H con cedilla", "mayúscula H con cedilla"]);
  this.executeCharTest("Ḫ", ["mayúscula H con breve debajo", "mayúscula H con breve debajo", "mayúscula H con breve debajo"]);
  this.executeCharTest("Ḭ", ["mayúscula I con tilde debajo", "mayúscula I con tilde debajo", "mayúscula I con tilde debajo"]);
  this.executeCharTest("Ḱ", ["mayúscula K con agudo", "mayúscula K con agudo", "mayúscula K con agudo"]);
  this.executeCharTest("Ḳ", ["mayúscula K con punto debajo", "mayúscula K con punto debajo", "mayúscula K con punto debajo"]);
  this.executeCharTest("Ḵ", ["mayúscula K con línea debajo", "mayúscula K con línea debajo", "mayúscula K con línea debajo"]);
  this.executeCharTest("Ḷ", ["mayúscula L con punto debajo", "mayúscula L con punto debajo", "mayúscula L con punto debajo"]);
  this.executeCharTest("Ḻ", ["mayúscula L con línea debajo", "mayúscula L con línea debajo", "mayúscula L con línea debajo"]);
  this.executeCharTest("Ḽ", ["mayúscula L con acento circunflejo debajo", "mayúscula L con acento circunflejo debajo", "mayúscula L con acento circunflejo debajo"]);
  this.executeCharTest("Ḿ", ["mayúscula M con agudo", "mayúscula M con agudo", "mayúscula M con agudo"]);
  this.executeCharTest("Ṁ", ["mayúscula M con punto arriba", "mayúscula M con punto arriba", "mayúscula M con punto arriba"]);
  this.executeCharTest("Ṃ", ["mayúscula M con punto debajo", "mayúscula M con punto debajo", "mayúscula M con punto debajo"]);
  this.executeCharTest("Ṅ", ["mayúscula N con punto arriba", "mayúscula N con punto arriba", "mayúscula N con punto arriba"]);
  this.executeCharTest("Ṇ", ["mayúscula N con punto debajo", "mayúscula N con punto debajo", "mayúscula N con punto debajo"]);
  this.executeCharTest("Ṉ", ["mayúscula N con línea debajo", "mayúscula N con línea debajo", "mayúscula N con línea debajo"]);
  this.executeCharTest("Ṋ", ["mayúscula N con acento circunflejo debajo", "mayúscula N con acento circunflejo debajo", "mayúscula N con acento circunflejo debajo"]);
  this.executeCharTest("Ṕ", ["mayúscula P con agudo", "mayúscula P con agudo", "mayúscula P con agudo"]);
  this.executeCharTest("Ṗ", ["mayúscula P con punto arriba", "mayúscula P con punto arriba", "mayúscula P con punto arriba"]);
  this.executeCharTest("Ṙ", ["mayúscula R con punto arriba", "mayúscula R con punto arriba", "mayúscula R con punto arriba"]);
  this.executeCharTest("Ṛ", ["mayúscula R con punto debajo", "mayúscula R con punto debajo", "mayúscula R con punto debajo"]);
  this.executeCharTest("Ṟ", ["mayúscula R con línea debajo", "mayúscula R con línea debajo", "mayúscula R con línea debajo"]);
  this.executeCharTest("Ṡ", ["mayúscula S con punto arriba", "mayúscula S con punto arriba", "mayúscula S con punto arriba"]);
  this.executeCharTest("Ṣ", ["mayúscula S con punto debajo", "mayúscula S con punto debajo", "mayúscula S con punto debajo"]);
  this.executeCharTest("Ṫ", ["mayúscula T con punto arriba", "mayúscula T con punto arriba", "mayúscula T con punto arriba"]);
  this.executeCharTest("Ṭ", ["mayúscula T con punto debajo", "mayúscula T con punto debajo", "mayúscula T con punto debajo"]);
  this.executeCharTest("Ṯ", ["mayúscula T con línea debajo", "mayúscula T con línea debajo", "mayúscula T con línea debajo"]);
  this.executeCharTest("Ṱ", ["mayúscula T con acento circunflejo debajo", "mayúscula T con acento circunflejo debajo", "mayúscula T con acento circunflejo debajo"]);
  this.executeCharTest("Ṳ", ["mayúscula U con diéresis debajo", "mayúscula U con diéresis debajo", "mayúscula U con diéresis debajo"]);
  this.executeCharTest("Ṵ", ["mayúscula U con tilde debajo", "mayúscula U con tilde debajo", "mayúscula U con tilde debajo"]);
  this.executeCharTest("Ṷ", ["mayúscula U con acento circunflejo debajo", "mayúscula U con acento circunflejo debajo", "mayúscula U con acento circunflejo debajo"]);
  this.executeCharTest("Ṽ", ["mayúscula V con tilde", "mayúscula V con tilde", "mayúscula V con tilde"]);
  this.executeCharTest("Ṿ", ["mayúscula V con punto debajo", "mayúscula V con punto debajo", "mayúscula V con punto debajo"]);
  this.executeCharTest("Ẁ", ["mayúscula W con grave", "mayúscula W con grave", "mayúscula W con grave"]);
  this.executeCharTest("Ẃ", ["mayúscula W con agudo", "mayúscula W con agudo", "mayúscula W con agudo"]);
  this.executeCharTest("Ẅ", ["mayúscula W con diéresis", "mayúscula W con diéresis", "mayúscula W con diéresis"]);
  this.executeCharTest("Ẇ", ["mayúscula W con punto arriba", "mayúscula W con punto arriba", "mayúscula W con punto arriba"]);
  this.executeCharTest("Ẉ", ["mayúscula W con punto debajo", "mayúscula W con punto debajo", "mayúscula W con punto debajo"]);
  this.executeCharTest("Ẋ", ["mayúscula X con punto arriba", "mayúscula X con punto arriba", "mayúscula X con punto arriba"]);
  this.executeCharTest("Ẍ", ["mayúscula X con diéresis", "mayúscula X con diéresis", "mayúscula X con diéresis"]);
  this.executeCharTest("Ẏ", ["mayúscula Y con punto arriba", "mayúscula Y con punto arriba", "mayúscula Y con punto arriba"]);
  this.executeCharTest("Ẑ", ["mayúscula Z con acento circunflejo", "mayúscula Z con acento circunflejo", "mayúscula Z con acento circunflejo"]);
  this.executeCharTest("Ẓ", ["mayúscula Z con punto debajo", "mayúscula Z con punto debajo", "mayúscula Z con punto debajo"]);
  this.executeCharTest("Ẕ", ["mayúscula Z with line below", "mayúscula Z with line below", "mayúscula Z with line below"]);
  this.executeCharTest("Ạ", ["mayúscula A con punto debajo", "mayúscula A con punto debajo", "mayúscula A con punto debajo"]);
  this.executeCharTest("Ả", ["mayúscula A con gancho arriba", "mayúscula A con gancho arriba", "mayúscula A con gancho arriba"]);
  this.executeCharTest("Ẹ", ["mayúscula E con punto debajo", "mayúscula E con punto debajo", "mayúscula E con punto debajo"]);
  this.executeCharTest("Ẻ", ["mayúscula E con gancho arriba", "mayúscula E con gancho arriba", "mayúscula E con gancho arriba"]);
  this.executeCharTest("Ẽ", ["mayúscula E con tilde", "mayúscula E con tilde", "mayúscula E con tilde"]);
  this.executeCharTest("Ỉ", ["mayúscula I con gancho arriba", "mayúscula I con gancho arriba", "mayúscula I con gancho arriba"]);
  this.executeCharTest("Ị", ["mayúscula I con punto debajo", "mayúscula I con punto debajo", "mayúscula I con punto debajo"]);
  this.executeCharTest("Ọ", ["mayúscula O con punto debajo", "mayúscula O con punto debajo", "mayúscula O con punto debajo"]);
  this.executeCharTest("Ỏ", ["mayúscula O con gancho arriba", "mayúscula O con gancho arriba", "mayúscula O con gancho arriba"]);
  this.executeCharTest("Ụ", ["mayúscula U con punto debajo", "mayúscula U con punto debajo", "mayúscula U con punto debajo"]);
  this.executeCharTest("Ủ", ["mayúscula U con gancho arriba", "mayúscula U con gancho arriba", "mayúscula U con gancho arriba"]);
  this.executeCharTest("Ỳ", ["mayúscula Y con grave", "mayúscula Y con grave", "mayúscula Y con grave"]);
  this.executeCharTest("Ỵ", ["mayúscula Y con punto debajo", "mayúscula Y con punto debajo", "mayúscula Y con punto debajo"]);
  this.executeCharTest("Ỷ", ["mayúscula Y con gancho arriba", "mayúscula Y con gancho arriba", "mayúscula Y con gancho arriba"]);
  this.executeCharTest("Ỹ", ["mayúscula Y con tilde", "mayúscula Y con tilde", "mayúscula Y con tilde"]);
  this.executeCharTest("⊾", ["ángulo recto con arco", "ángulo recto con arco", "ángulo recto con arco"]);
  this.executeCharTest("⍼", ["ángulo recto con flecha zigzag hacia abajo", "ángulo recto con flecha zigzag hacia abajo", "ángulo recto con flecha zigzag hacia abajo"]);
  this.executeCharTest("⟀", ["ángulo sólido", "ángulo sólido", "ángulo sólido"]);
  this.executeCharTest("⦛", ["Ángulo medido de apertura a la izquierda", "Ángulo medido de apertura a la izquierda", "Ángulo medido de apertura a la izquierda"]);
  this.executeCharTest("⦜", ["Variante de ángulo recto con cuadrado", "Variante de ángulo recto con cuadrado", "Variante de ángulo recto con cuadrado"]);
  this.executeCharTest("⦝", ["ángulo recto medido con punto", "ángulo recto medido con punto", "ángulo recto medido con punto"]);
  this.executeCharTest("⦞", ["Ángulo con S dentro", "Ángulo con S dentro", "Ángulo con S dentro"]);
  this.executeCharTest("⦟", ["Ángulo agudo", "Ángulo agudo", "Ángulo agudo"]);
  this.executeCharTest("⦠", ["Ángulo esférico de apertura a la izquierda", "Ángulo esférico de apertura a la izquierda", "Ángulo esférico de apertura a la izquierda"]);
  this.executeCharTest("⦡", ["Apertura de ángulo esférico", "Apertura de ángulo esférico", "Apertura de ángulo esférico"]);
  this.executeCharTest("⦢", ["Ángulo de giro", "Ángulo de giro", "Ángulo de giro"]);
  this.executeCharTest("⦣", ["Ángulo invertido", "Ángulo invertido", "Ángulo invertido"]);
  this.executeCharTest("⦤", ["ángulo con barra inferior", "ángulo con barra inferior", "ángulo con barra inferior"]);
  this.executeCharTest("⦥", ["ángulo inverso con barra inferior", "ángulo inverso con barra inferior", "ángulo inverso con barra inferior"]);
  this.executeCharTest("⦦", ["ángulo oblicuo hacia arriba", "ángulo oblicuo hacia arriba", "ángulo oblicuo hacia arriba"]);
  this.executeCharTest("⦧", ["ángulo oblicuo hacia abajo", "ángulo oblicuo hacia abajo", "ángulo oblicuo hacia abajo"]);
  this.executeCharTest("⦨", ["measured angle with open arm ending in arrow pointing up and to the right", "measured angle with open arm ending in arrow pointing up and to the right", "measured angle with open arm ending in arrow pointing up and to the right"]);
  this.executeCharTest("⦩", ["measured angle with open arm ending in arrow pointing up and to the left", "measured angle with open arm ending in arrow pointing up and to the left", "measured angle with open arm ending in arrow pointing up and to the left"]);
  this.executeCharTest("⦪", ["measured angle with open arm ending in arrow pointing down and to the right", "measured angle with open arm ending in arrow pointing down and to the right", "measured angle with open arm ending in arrow pointing down and to the right"]);
  this.executeCharTest("⦫", ["measured angle with open arm ending in arrow pointing down and to the left", "measured angle with open arm ending in arrow pointing down and to the left", "measured angle with open arm ending in arrow pointing down and to the left"]);
  this.executeCharTest("⦬", ["measured angle with open arm ending in arrow pointing right and up", "measured angle with open arm ending in arrow pointing right and up", "measured angle with open arm ending in arrow pointing right and up"]);
  this.executeCharTest("⦭", ["measured angle with open arm ending in arrow pointing left and up", "measured angle with open arm ending in arrow pointing left and up", "measured angle with open arm ending in arrow pointing left and up"]);
  this.executeCharTest("⦮", ["measured angle with open arm ending in arrow pointing right and down", "measured angle with open arm ending in arrow pointing right and down", "measured angle with open arm ending in arrow pointing right and down"]);
  this.executeCharTest("⦯", ["measured angle with open arm ending in arrow pointing left and down", "measured angle with open arm ending in arrow pointing left and down", "measured angle with open arm ending in arrow pointing left and down"]);
  this.executeCharTest("←", ["flecha izquierda", "flecha izquierda", "flecha izquierda"]);
  this.executeCharTest("↑", ["flecha arriba", "flecha arriba", "flecha arriba"]);
  this.executeCharTest("→", ["flecha derecha", "flecha derecha", "flecha derecha"]);
  this.executeCharTest("↓", ["flecha abajo", "flecha abajo", "flecha abajo"]);
  this.executeCharTest("↔", ["flecha izquierda y derecha", "flecha izquierda y derecha", "flecha izquierda y derecha"]);
  this.executeCharTest("↕", ["flecha arriba y abajo", "flecha arriba y abajo", "flecha arriba y abajo"]);
  this.executeCharTest("↖", ["flecha a noroeste", "flecha a noroeste", "flecha a noroeste"]);
  this.executeCharTest("↗", ["flecha a nordeste", "flecha a nordeste", "flecha a nordeste"]);
  this.executeCharTest("↘", ["flecha a sureste", "flecha a sureste", "flecha a sureste"]);
  this.executeCharTest("↙", ["flecha a suroeste", "flecha a suroeste", "flecha a suroeste"]);
  this.executeCharTest("↚", ["flecha izquierda tachada", "flecha izquierda tachada", "flecha izquierda tachada"]);
  this.executeCharTest("↛", ["flecha tachada", "flecha tachada", "flecha tachada"]);
  this.executeCharTest("↜", ["flecha ondulada izquierda", "flecha ondulada izquierda", "flecha ondulada izquierda"]);
  this.executeCharTest("↝", ["flecha ondulada", "flecha ondulada", "flecha ondulada"]);
  this.executeCharTest("↞", ["flecha izquierda con doble punta", "flecha izquierda con doble punta", "flecha izquierda con doble punta"]);
  this.executeCharTest("↟", ["flecha con doble punta hacia arriba", "flecha con doble punta hacia arriba", "flecha con doble punta hacia arriba"]);
  this.executeCharTest("↠", ["flecha derechaa con doble punta", "flecha derechaa con doble punta", "flecha derechaa con doble punta"]);
  this.executeCharTest("↡", ["flecha con doble punta hacia abajo", "flecha con doble punta hacia abajo", "flecha con doble punta hacia abajo"]);
  this.executeCharTest("↢", ["flecha izquierda con cola", "flecha izquierda con cola", "flecha izquierda con cola"]);
  this.executeCharTest("↣", ["flecha derecha con cola", "flecha derecha con cola", "flecha derecha con cola"]);
  this.executeCharTest("↤", ["flecha izquierda de barra", "flecha izquierda de barra", "flecha izquierda de barra"]);
  this.executeCharTest("↥", ["barra con flecha", "barra con flecha", "barra con flecha"]);
  this.executeCharTest("↦", ["flecha derecha de barra", "flecha derecha de barra", "flecha derecha de barra"]);
  this.executeCharTest("↧", ["flecha con barra", "flecha con barra", "flecha con barra"]);
  this.executeCharTest("↨", ["flecha arriba y abajo con base", "flecha arriba y abajo con base", "flecha arriba y abajo con base"]);
  this.executeCharTest("↩", ["flecha izquierda con gancho", "flecha izquierda con gancho", "flecha izquierda con gancho"]);
  this.executeCharTest("↪", ["flecha con gancho", "flecha con gancho", "flecha con gancho"]);
  this.executeCharTest("↫", ["flecha izquierda con lazo", "flecha izquierda con lazo", "flecha izquierda con lazo"]);
  this.executeCharTest("↬", ["flecha con lazo", "flecha con lazo", "flecha con lazo"]);
  this.executeCharTest("↭", ["flecha ondulada izquierda y derecha", "flecha ondulada izquierda y derecha", "flecha ondulada izquierda y derecha"]);
  this.executeCharTest("↮", ["flecha izquierda y derecha tachada", "flecha izquierda y derecha tachada", "flecha izquierda y derecha tachada"]);
  this.executeCharTest("↯", ["flecha zigzag abajo", "flecha zigzag abajo", "flecha zigzag abajo"]);
  this.executeCharTest("↰", ["flecha arriba con punta izquierda", "flecha arriba con punta izquierda", "flecha arriba con punta izquierda"]);
  this.executeCharTest("↱", ["flecha arriba con punta derecha", "flecha arriba con punta derecha", "flecha arriba con punta derecha"]);
  this.executeCharTest("↲", ["flecha abajo con punta izquierda", "flecha abajo con punta izquierda", "flecha abajo con punta izquierda"]);
  this.executeCharTest("↳", ["flecha abajo con punta derecha", "flecha abajo con punta derecha", "flecha abajo con punta derecha"]);
  this.executeCharTest("↴", ["flecha derecha desde esquina inferior", "flecha derecha desde esquina inferior", "flecha derecha desde esquina inferior"]);
  this.executeCharTest("↵", ["flecha hacia abajo desde esquina izquierda", "flecha hacia abajo desde esquina izquierda", "flecha hacia abajo desde esquina izquierda"]);
  this.executeCharTest("↶", ["flecha semicircular superior en sentido antihorario", "flecha semicircular superior en sentido antihorario", "flecha semicircular superior en sentido antihorario"]);
  this.executeCharTest("↷", ["flecha semicircular superior en sentido horario", "flecha semicircular superior en sentido horario", "flecha semicircular superior en sentido horario"]);
  this.executeCharTest("↸", ["flecha noroeste a barra larga", "flecha noroeste a barra larga", "flecha noroeste a barra larga"]);
  this.executeCharTest("↹", ["flecha izquierda a barra arriba de flecha derecha a barra", "flecha izquierda a barra arriba de flecha derecha a barra", "flecha izquierda a barra arriba de flecha derecha a barra"]);
  this.executeCharTest("↺", ["flecha circular abierta en sentido antihorario", "flecha circular abierta en sentido antihorario", "flecha circular abierta en sentido antihorario"]);
  this.executeCharTest("↻", ["flecha circular abierta en sentido horario", "flecha circular abierta en sentido horario", "flecha circular abierta en sentido horario"]);
  this.executeCharTest("⇄", ["flecha derecha arriba de flecha izquierda", "flecha derecha arriba de flecha izquierda", "flecha derecha arriba de flecha izquierda"]);
  this.executeCharTest("⇅", ["flecha arriba a la izquierda de flecha abajo", "flecha arriba a la izquierda de flecha abajo", "flecha arriba a la izquierda de flecha abajo"]);
  this.executeCharTest("⇆", ["flecha izquierda arriba de flecha derecha", "flecha izquierda arriba de flecha derecha", "flecha izquierda arriba de flecha derecha"]);
  this.executeCharTest("⇇", ["dos flechas hacia la izquierda", "dos flechas hacia la izquierda", "dos flechas hacia la izquierda"]);
  this.executeCharTest("⇈", ["dos flechas hacia arriba", "dos flechas hacia arriba", "dos flechas hacia arriba"]);
  this.executeCharTest("⇉", ["dos flechas", "dos flechas", "dos flechas"]);
  this.executeCharTest("⇊", ["dos flechas hacia abajo", "dos flechas hacia abajo", "dos flechas hacia abajo"]);
  this.executeCharTest("⇍", ["flecha doble izquierda tachada", "flecha doble izquierda tachada", "flecha doble izquierda tachada"]);
  this.executeCharTest("⇎", ["flecha doble izquierda y derecha tachada", "flecha doble izquierda y derecha tachada", "flecha doble izquierda y derecha tachada"]);
  this.executeCharTest("⇏", ["flecha doble tachada", "flecha doble tachada", "flecha doble tachada"]);
  this.executeCharTest("⇐", ["flecha doble hacia la izquierda", "flecha doble hacia la izquierda", "flecha doble hacia la izquierda"]);
  this.executeCharTest("⇑", ["flecha doble hacia arriba", "flecha doble hacia arriba", "flecha doble hacia arriba"]);
  this.executeCharTest("⇒", ["flecha doble", "flecha doble", "flecha doble"]);
  this.executeCharTest("⇓", ["flecha doble hacia abajo", "flecha doble hacia abajo", "flecha doble hacia abajo"]);
  this.executeCharTest("⇔", ["flecha doble izquierda-derecha", "flecha doble izquierda-derecha", "flecha doble izquierda-derecha"]);
  this.executeCharTest("⇕", ["flecha doble vertical", "flecha doble vertical", "flecha doble vertical"]);
  this.executeCharTest("⇖", ["flecha doble hacia noroeste", "flecha doble hacia noroeste", "flecha doble hacia noroeste"]);
  this.executeCharTest("⇗", ["flecha doble hacia nordeste", "flecha doble hacia nordeste", "flecha doble hacia nordeste"]);
  this.executeCharTest("⇘", ["flecha doble hacia sudeste", "flecha doble hacia sudeste", "flecha doble hacia sudeste"]);
  this.executeCharTest("⇙", ["flecha doble hacia sudoeste", "flecha doble hacia sudoeste", "flecha doble hacia sudoeste"]);
  this.executeCharTest("⇚", ["flecha triple izquierda", "flecha triple izquierda", "flecha triple izquierda"]);
  this.executeCharTest("⇛", ["flecha triple", "flecha triple", "flecha triple"]);
  this.executeCharTest("⇜", ["flecha ondulada izquierda", "flecha ondulada izquierda", "flecha ondulada izquierda"]);
  this.executeCharTest("⇝", ["flecha ondulada", "flecha ondulada", "flecha ondulada"]);
  this.executeCharTest("⇞", ["flecha hacia arriba con doble tachado", "flecha hacia arriba con doble tachado", "flecha hacia arriba con doble tachado"]);
  this.executeCharTest("⇟", ["flecha hacia abajo con doble tachado", "flecha hacia abajo con doble tachado", "flecha hacia abajo con doble tachado"]);
  this.executeCharTest("⇠", ["flecha de puntos hacia la izquierda", "flecha de puntos hacia la izquierda", "flecha de puntos hacia la izquierda"]);
  this.executeCharTest("⇡", ["flecha de puntos hacia arriba", "flecha de puntos hacia arriba", "flecha de puntos hacia arriba"]);
  this.executeCharTest("⇢", ["flecha de puntos", "flecha de puntos", "flecha de puntos"]);
  this.executeCharTest("⇣", ["flecha de puntos hacia abajo", "flecha de puntos hacia abajo", "flecha de puntos hacia abajo"]);
  this.executeCharTest("⇤", ["flecha izquierda a barra", "flecha izquierda a barra", "flecha izquierda a barra"]);
  this.executeCharTest("⇥", ["flecha derecha a barra", "flecha derecha a barra", "flecha derecha a barra"]);
  this.executeCharTest("⇦", ["flecha vacía hacia la izquierda", "flecha vacía hacia la izquierda", "flecha vacía hacia la izquierda"]);
  this.executeCharTest("⇧", ["flecha vacía hacia arriba", "flecha vacía hacia arriba", "flecha vacía hacia arriba"]);
  this.executeCharTest("⇨", ["flecha vacía", "flecha vacía", "flecha vacía"]);
  this.executeCharTest("⇩", ["flecha vacía hacia abajo", "flecha vacía hacia abajo", "flecha vacía hacia abajo"]);
  this.executeCharTest("⇪", ["flecha vacía hacia arriba desde barra", "flecha vacía hacia arriba desde barra", "flecha vacía hacia arriba desde barra"]);
  this.executeCharTest("⇫", ["flecha blanca hacia arriba en el pedestal", "flecha blanca hacia arriba en el pedestal", "flecha blanca hacia arriba en el pedestal"]);
  this.executeCharTest("⇬", ["flecha blanca hacia arriba sobre pedestal con barra horizontal", "flecha blanca hacia arriba sobre pedestal con barra horizontal", "flecha blanca hacia arriba sobre pedestal con barra horizontal"]);
  this.executeCharTest("⇭", ["flecha blanca hacia arriba sobre pedestal con barra vertical", "flecha blanca hacia arriba sobre pedestal con barra vertical", "flecha blanca hacia arriba sobre pedestal con barra vertical"]);
  this.executeCharTest("⇮", ["flecha doble hacia arriba blanca", "flecha doble hacia arriba blanca", "flecha doble hacia arriba blanca"]);
  this.executeCharTest("⇯", ["flecha doble hacia arriba blanca en pedestal", "flecha doble hacia arriba blanca en pedestal", "flecha doble hacia arriba blanca en pedestal"]);
  this.executeCharTest("⇰", ["flecha blanca hacia la derecha de la pared", "flecha blanca hacia la derecha de la pared", "flecha blanca hacia la derecha de la pared"]);
  this.executeCharTest("⇱", ["flecha del noroeste a la esquina", "flecha del noroeste a la esquina", "flecha del noroeste a la esquina"]);
  this.executeCharTest("⇲", ["flecha del sudeste a la esquina", "flecha del sudeste a la esquina", "flecha del sudeste a la esquina"]);
  this.executeCharTest("⇳", ["arriba abajo flecha blanca", "arriba abajo flecha blanca", "arriba abajo flecha blanca"]);
  this.executeCharTest("⇴", ["flecha derecha con círculo pequeño", "flecha derecha con círculo pequeño", "flecha derecha con círculo pequeño"]);
  this.executeCharTest("⇵", ["upwards arrow to the right of downwards arrow", "upwards arrow to the right of downwards arrow", "upwards arrow to the right of downwards arrow"]);
  this.executeCharTest("⇶", ["tres flechas a la derecha", "tres flechas a la derecha", "tres flechas a la derecha"]);
  this.executeCharTest("⇷", ["flecha hacia la izquierda con trazo vertical", "flecha hacia la izquierda con trazo vertical", "flecha hacia la izquierda con trazo vertical"]);
  this.executeCharTest("⇸", ["flecha hacia la derecha con trazo vertical", "flecha hacia la derecha con trazo vertical", "flecha hacia la derecha con trazo vertical"]);
  this.executeCharTest("⇹", ["flecha izquierda derecha con trazo vertical", "flecha izquierda derecha con trazo vertical", "flecha izquierda derecha con trazo vertical"]);
  this.executeCharTest("⇺", ["flecha hacia la izquierda con doble trazo vertical", "flecha hacia la izquierda con doble trazo vertical", "flecha hacia la izquierda con doble trazo vertical"]);
  this.executeCharTest("⇻", ["flecha hacia la derecha con doble trazo vertical", "flecha hacia la derecha con doble trazo vertical", "flecha hacia la derecha con doble trazo vertical"]);
  this.executeCharTest("⇼", ["flecha izquierda derecha con doble trazo vertical", "flecha izquierda derecha con doble trazo vertical", "flecha izquierda derecha con doble trazo vertical"]);
  this.executeCharTest("⇽", ["flecha izquierda con punta vacía", "flecha izquierda con punta vacía", "flecha izquierda con punta vacía"]);
  this.executeCharTest("⇾", ["flecha izquierda con punta vacía", "flecha izquierda con punta vacía", "flecha izquierda con punta vacía"]);
  this.executeCharTest("⇿", ["flecha izquierda derecha con punta vacía", "flecha izquierda derecha con punta vacía", "flecha izquierda derecha con punta vacía"]);
  this.executeCharTest("⌁", ["flecha electrica", "flecha electrica", "flecha electrica"]);
  this.executeCharTest("⌃", ["flecha arriba", "flecha arriba", "flecha arriba"]);
  this.executeCharTest("⌄", ["flecha hacia abajo", "flecha hacia abajo", "flecha hacia abajo"]);
  this.executeCharTest("⌤", ["flecha arriba entre dos barras horizontales", "flecha arriba entre dos barras horizontales", "flecha arriba entre dos barras horizontales"]);
  this.executeCharTest("⎋", ["círculo roto con la flecha del noroeste", "círculo roto con la flecha del noroeste", "círculo roto con la flecha del noroeste"]);
  this.executeCharTest("➔", ["flecha hacia la derecha con cabeza ancha", "flecha hacia la derecha con cabeza ancha", "flecha hacia la derecha con cabeza ancha"]);
  this.executeCharTest("➘", ["flecha Sureste pesada", "flecha Sureste pesada", "flecha Sureste pesada"]);
  this.executeCharTest("➙", ["flecha hacia la derecha pesada", "flecha hacia la derecha pesada", "flecha hacia la derecha pesada"]);
  this.executeCharTest("➚", ["flecha pesada del noreste", "flecha pesada del noreste", "flecha pesada del noreste"]);
  this.executeCharTest("➛", ["punto de dibujo Flecha hacia la derecha", "punto de dibujo Flecha hacia la derecha", "punto de dibujo Flecha hacia la derecha"]);
  this.executeCharTest("➜", ["flecha hacia la derecha con punta redonda redonda", "flecha hacia la derecha con punta redonda redonda", "flecha hacia la derecha con punta redonda redonda"]);
  this.executeCharTest("➝", ["flecha hacia la derecha con forma de triángulo", "flecha hacia la derecha con forma de triángulo", "flecha hacia la derecha con forma de triángulo"]);
  this.executeCharTest("➞", ["flecha hacia la derecha con forma de triángulo pesado", "flecha hacia la derecha con forma de triángulo pesado", "flecha hacia la derecha con forma de triángulo pesado"]);
  this.executeCharTest("➟", ["triángulo punteado hacia la flecha hacia la derecha", "triángulo punteado hacia la flecha hacia la derecha", "triángulo punteado hacia la flecha hacia la derecha"]);
  this.executeCharTest("➠", ["flecha hacia la derecha con forma de triángulo de trazo pesado", "flecha hacia la derecha con forma de triángulo de trazo pesado", "flecha hacia la derecha con forma de triángulo de trazo pesado"]);
  this.executeCharTest("➡", ["flecha hacia la derecha negra", "flecha hacia la derecha negra", "flecha hacia la derecha negra"]);
  this.executeCharTest("➢", ["punta de flecha tridimensional hacia la derecha hacia arriba", "punta de flecha tridimensional hacia la derecha hacia arriba", "punta de flecha tridimensional hacia la derecha hacia arriba"]);
  this.executeCharTest("➣", ["punta de flecha hacia la derecha con iluminación inferior en tres dimensiones", "punta de flecha hacia la derecha con iluminación inferior en tres dimensiones", "punta de flecha hacia la derecha con iluminación inferior en tres dimensiones"]);
  this.executeCharTest("➤", ["punta de flecha negra hacia la derecha", "punta de flecha negra hacia la derecha", "punta de flecha negra hacia la derecha"]);
  this.executeCharTest("➥", ["pesado negro curvado hacia abajo y hacia la derecha flecha", "pesado negro curvado hacia abajo y hacia la derecha flecha", "pesado negro curvado hacia abajo y hacia la derecha flecha"]);
  this.executeCharTest("➦", ["pesado negro curvado hacia arriba y hacia la derecha flecha", "pesado negro curvado hacia arriba y hacia la derecha flecha", "pesado negro curvado hacia arriba y hacia la derecha flecha"]);
  this.executeCharTest("➧", ["squat Black Arrow hacia la derecha", "squat Black Arrow hacia la derecha", "squat Black Arrow hacia la derecha"]);
  this.executeCharTest("➨", ["flecha hacia la derecha de color negro cóncava puntiaguda pesada", "flecha hacia la derecha de color negro cóncava puntiaguda pesada", "flecha hacia la derecha de color negro cóncava puntiaguda pesada"]);
  this.executeCharTest("➩", ["sombra derecha flecha blanca hacia la derecha", "sombra derecha flecha blanca hacia la derecha", "sombra derecha flecha blanca hacia la derecha"]);
  this.executeCharTest("➪", ["sombra hacia la izquierda blanca a la izquierda", "sombra hacia la izquierda blanca a la izquierda", "sombra hacia la izquierda blanca a la izquierda"]);
  this.executeCharTest("➫", ["back-Tilted Shadowed White Right Arrow", "back-Tilted Shadowed White Right Arrow", "back-Tilted Shadowed White Right Arrow"]);
  this.executeCharTest("➬", ["flecha hacia la derecha blanca sombreada inclinada hacia delante", "flecha hacia la derecha blanca sombreada inclinada hacia delante", "flecha hacia la derecha blanca sombreada inclinada hacia delante"]);
  this.executeCharTest("➭", ["flecha hacia la derecha pesada inferior, sombreada a la derecha, blanca", "flecha hacia la derecha pesada inferior, sombreada a la derecha, blanca", "flecha hacia la derecha pesada inferior, sombreada a la derecha, blanca"]);
  this.executeCharTest("➮", ["flecha hacia la derecha blanca superior derecha sombreada pesada", "flecha hacia la derecha blanca superior derecha sombreada pesada", "flecha hacia la derecha blanca superior derecha sombreada pesada"]);
  this.executeCharTest("➯", ["con muesca, flecha derecha hacia abajo, a la derecha, hacia la derecha", "con muesca, flecha derecha hacia abajo, a la derecha, hacia la derecha", "con muesca, flecha derecha hacia abajo, a la derecha, hacia la derecha"]);
  this.executeCharTest("➱", ["con muescas, flecha derecha hacia arriba, a la derecha, hacia la derecha", "con muescas, flecha derecha hacia arriba, a la derecha, hacia la derecha", "con muescas, flecha derecha hacia arriba, a la derecha, hacia la derecha"]);
  this.executeCharTest("➲", ["círculo pesado blanco flecha hacia la derecha", "círculo pesado blanco flecha hacia la derecha", "círculo pesado blanco flecha hacia la derecha"]);
  this.executeCharTest("➳", ["flecha hacia la derecha con plumas blancas", "flecha hacia la derecha con plumas blancas", "flecha hacia la derecha con plumas blancas"]);
  this.executeCharTest("➴", ["flecha suroriental de plumas negras", "flecha suroriental de plumas negras", "flecha suroriental de plumas negras"]);
  this.executeCharTest("➵", ["flecha hacia la derecha con plumas negras", "flecha hacia la derecha con plumas negras", "flecha hacia la derecha con plumas negras"]);
  this.executeCharTest("➶", ["flecha del noreste con plumas negras", "flecha del noreste con plumas negras", "flecha del noreste con plumas negras"]);
  this.executeCharTest("➷", ["flecha suroriental con plumas negras pesadas", "flecha suroriental con plumas negras pesadas", "flecha suroriental con plumas negras pesadas"]);
  this.executeCharTest("➸", ["flecha derecha pesada con plumas negras", "flecha derecha pesada con plumas negras", "flecha derecha pesada con plumas negras"]);
  this.executeCharTest("➹", ["flecha del noreste con plumas negras pesadas", "flecha del noreste con plumas negras pesadas", "flecha del noreste con plumas negras pesadas"]);
  this.executeCharTest("➺", ["lágrima-flecha de flecha hacia la derecha", "lágrima-flecha de flecha hacia la derecha", "lágrima-flecha de flecha hacia la derecha"]);
  this.executeCharTest("➻", ["flecha hacia la derecha con forma de lágrima pesada", "flecha hacia la derecha con forma de lágrima pesada", "flecha hacia la derecha con forma de lágrima pesada"]);
  this.executeCharTest("➼", ["flecha hacia la derecha de cola de cuña", "flecha hacia la derecha de cola de cuña", "flecha hacia la derecha de cola de cuña"]);
  this.executeCharTest("➽", ["flecha hacia la derecha de cola de cuña pesada", "flecha hacia la derecha de cola de cuña pesada", "flecha hacia la derecha de cola de cuña pesada"]);
  this.executeCharTest("➾", ["open-Outlined Outward Arrow", "open-Outlined Outward Arrow", "open-Outlined Outward Arrow"]);
  this.executeCharTest("⟰", ["flecha cuádruple hacia arriba", "flecha cuádruple hacia arriba", "flecha cuádruple hacia arriba"]);
  this.executeCharTest("⟱", ["flecha cuádruple hacia abajo", "flecha cuádruple hacia abajo", "flecha cuádruple hacia abajo"]);
  this.executeCharTest("⟲", ["flecha hacia la izquierda desde círculo", "flecha hacia la izquierda desde círculo", "flecha hacia la izquierda desde círculo"]);
  this.executeCharTest("⟳", ["flecha hacia la derecha desde círculo", "flecha hacia la derecha desde círculo", "flecha hacia la derecha desde círculo"]);
  this.executeCharTest("⟴", ["flecha con más en círculo", "flecha con más en círculo", "flecha con más en círculo"]);
  this.executeCharTest("⟵", ["flecha larga hacia la izquierda", "flecha larga hacia la izquierda", "flecha larga hacia la izquierda"]);
  this.executeCharTest("⟶", ["flecha larga", "flecha larga", "flecha larga"]);
  this.executeCharTest("⟷", ["flecha larga hacia izquierda y derecha", "flecha larga hacia izquierda y derecha", "flecha larga hacia izquierda y derecha"]);
  this.executeCharTest("⟸", ["doble flecha larga hacia la izquierda", "doble flecha larga hacia la izquierda", "doble flecha larga hacia la izquierda"]);
  this.executeCharTest("⟹", ["doble flecha larga", "doble flecha larga", "doble flecha larga"]);
  this.executeCharTest("⟺", ["doble flecha larga hacia izquierda y derecha", "doble flecha larga hacia izquierda y derecha", "doble flecha larga hacia izquierda y derecha"]);
  this.executeCharTest("⟻", ["flecha larga hacia la izquierda, desde barra", "flecha larga hacia la izquierda, desde barra", "flecha larga hacia la izquierda, desde barra"]);
  this.executeCharTest("⟼", ["flecha larga desde barra", "flecha larga desde barra", "flecha larga desde barra"]);
  this.executeCharTest("⟽", ["doble flecha larga hacia la izquierda desde barra", "doble flecha larga hacia la izquierda desde barra", "doble flecha larga hacia la izquierda desde barra"]);
  this.executeCharTest("⟾", ["doble flecha larga desde barra", "doble flecha larga desde barra", "doble flecha larga desde barra"]);
  this.executeCharTest("⟿", ["flecha larga en zigzag", "flecha larga en zigzag", "flecha larga en zigzag"]);
  this.executeCharTest("⤀", ["flecha de dos cabezas hacia la derecha con trazo vertical", "flecha de dos cabezas hacia la derecha con trazo vertical", "flecha de dos cabezas hacia la derecha con trazo vertical"]);
  this.executeCharTest("⤁", ["flecha de dos cabezas hacia la derecha con doble movimiento vertical", "flecha de dos cabezas hacia la derecha con doble movimiento vertical", "flecha de dos cabezas hacia la derecha con doble movimiento vertical"]);
  this.executeCharTest("⤂", ["doble flecha hacia la izquierda con trazo vertical", "doble flecha hacia la izquierda con trazo vertical", "doble flecha hacia la izquierda con trazo vertical"]);
  this.executeCharTest("⤃", ["doble flecha hacia la derecha con trazo vertical", "doble flecha hacia la derecha con trazo vertical", "doble flecha hacia la derecha con trazo vertical"]);
  this.executeCharTest("⤄", ["izquierda Derecha Doble Flecha con Trazo Vertical", "izquierda Derecha Doble Flecha con Trazo Vertical", "izquierda Derecha Doble Flecha con Trazo Vertical"]);
  this.executeCharTest("⤅", ["rightwards two headed arrow from bar", "rightwards two headed arrow from bar", "rightwards two headed arrow from bar"]);
  this.executeCharTest("⤆", ["doble flecha hacia la izquierda de la barra", "doble flecha hacia la izquierda de la barra", "doble flecha hacia la izquierda de la barra"]);
  this.executeCharTest("⤇", ["flecha doble hacia la derecha de la barra", "flecha doble hacia la derecha de la barra", "flecha doble hacia la derecha de la barra"]);
  this.executeCharTest("⤈", ["flecha hacia abajo con trazo horizontal", "flecha hacia abajo con trazo horizontal", "flecha hacia abajo con trazo horizontal"]);
  this.executeCharTest("⤉", ["flecha hacia arriba con trazo horizontal", "flecha hacia arriba con trazo horizontal", "flecha hacia arriba con trazo horizontal"]);
  this.executeCharTest("⤊", ["flecha triple hacia arriba", "flecha triple hacia arriba", "flecha triple hacia arriba"]);
  this.executeCharTest("⤋", ["triple flecha hacia abajo", "triple flecha hacia abajo", "triple flecha hacia abajo"]);
  this.executeCharTest("⤌", ["leftwards double dash arrow", "leftwards double dash arrow", "leftwards double dash arrow"]);
  this.executeCharTest("⤍", ["rightwards double dash arrow", "rightwards double dash arrow", "rightwards double dash arrow"]);
  this.executeCharTest("⤎", ["leftwards triple dash arrow", "leftwards triple dash arrow", "leftwards triple dash arrow"]);
  this.executeCharTest("⤏", ["rightwards triple dash arrow", "rightwards triple dash arrow", "rightwards triple dash arrow"]);
  this.executeCharTest("⤐", ["rightwards two headed triple dash arrow", "rightwards two headed triple dash arrow", "rightwards two headed triple dash arrow"]);
  this.executeCharTest("⤑", ["rightwards arrow with dotted stem", "rightwards arrow with dotted stem", "rightwards arrow with dotted stem"]);
  this.executeCharTest("⤒", ["upwards arrow to bar", "upwards arrow to bar", "upwards arrow to bar"]);
  this.executeCharTest("⤓", ["downwards arrow to bar", "downwards arrow to bar", "downwards arrow to bar"]);
  this.executeCharTest("⤔", ["flecha hacia la derecha con cola con trazo vertical", "flecha hacia la derecha con cola con trazo vertical", "flecha hacia la derecha con cola con trazo vertical"]);
  this.executeCharTest("⤕", ["flecha hacia la derecha con la cola con doble trazo vertical", "flecha hacia la derecha con la cola con doble trazo vertical", "flecha hacia la derecha con la cola con doble trazo vertical"]);
  this.executeCharTest("⤖", ["rightwards two headed arrow with tail", "rightwards two headed arrow with tail", "rightwards two headed arrow with tail"]);
  this.executeCharTest("⤗", ["flecha de dos cabezas hacia la derecha con cola con trazo vertical", "flecha de dos cabezas hacia la derecha con cola con trazo vertical", "flecha de dos cabezas hacia la derecha con cola con trazo vertical"]);
  this.executeCharTest("⤘", ["flecha de dos cabezas hacia la derecha con cola con doble movimiento vertical", "flecha de dos cabezas hacia la derecha con cola con doble movimiento vertical", "flecha de dos cabezas hacia la derecha con cola con doble movimiento vertical"]);
  this.executeCharTest("⤙", ["cola de flecha hacia la izquierda", "cola de flecha hacia la izquierda", "cola de flecha hacia la izquierda"]);
  this.executeCharTest("⤚", ["flecha hacia la derecha", "flecha hacia la derecha", "flecha hacia la derecha"]);
  this.executeCharTest("⤛", ["cola de doble flecha hacia la izquierda", "cola de doble flecha hacia la izquierda", "cola de doble flecha hacia la izquierda"]);
  this.executeCharTest("⤜", ["cola de doble flecha hacia la derecha", "cola de doble flecha hacia la derecha", "cola de doble flecha hacia la derecha"]);
  this.executeCharTest("⤝", ["flecha hacia diamante relleno a la izquierda", "flecha hacia diamante relleno a la izquierda", "flecha hacia diamante relleno a la izquierda"]);
  this.executeCharTest("⤞", ["flecha hacia diamante a la derecha", "flecha hacia diamante a la derecha", "flecha hacia diamante a la derecha"]);
  this.executeCharTest("⤟", ["flecha desde barra hacia diamante a la izquierda", "flecha desde barra hacia diamante a la izquierda", "flecha desde barra hacia diamante a la izquierda"]);
  this.executeCharTest("⤠", ["flecha desde barra hacia diamante a la derecha", "flecha desde barra hacia diamante a la derecha", "flecha desde barra hacia diamante a la derecha"]);
  this.executeCharTest("⤡", ["flechas del noroeste y sureste", "flechas del noroeste y sureste", "flechas del noroeste y sureste"]);
  this.executeCharTest("⤢", ["flecha noreste y sudoeste", "flecha noreste y sudoeste", "flecha noreste y sudoeste"]);
  this.executeCharTest("⤣", ["flecha a noroeste con garfio", "flecha a noroeste con garfio", "flecha a noroeste con garfio"]);
  this.executeCharTest("⤤", ["flecha a nordeste con garfio", "flecha a nordeste con garfio", "flecha a nordeste con garfio"]);
  this.executeCharTest("⤥", ["flecha a sureste con garfio", "flecha a sureste con garfio", "flecha a sureste con garfio"]);
  this.executeCharTest("⤦", ["flecha a suroeste con garfio", "flecha a suroeste con garfio", "flecha a suroeste con garfio"]);
  this.executeCharTest("⤧", ["flechas a noroeste y nordeste", "flechas a noroeste y nordeste", "flechas a noroeste y nordeste"]);
  this.executeCharTest("⤨", ["flechas a nordeste y sudeste", "flechas a nordeste y sudeste", "flechas a nordeste y sudeste"]);
  this.executeCharTest("⤩", ["flechas a suddeste y sudoeste", "flechas a suddeste y sudoeste", "flechas a suddeste y sudoeste"]);
  this.executeCharTest("⤪", ["flechas a sudoeste y noroeste", "flechas a sudoeste y noroeste", "flechas a sudoeste y noroeste"]);
  this.executeCharTest("⤭", ["flecha Sureste Cruzando Flecha Noreste", "flecha Sureste Cruzando Flecha Noreste", "flecha Sureste Cruzando Flecha Noreste"]);
  this.executeCharTest("⤮", ["north East Arrow Crossing South East Arrow", "north East Arrow Crossing South East Arrow", "north East Arrow Crossing South East Arrow"]);
  this.executeCharTest("⤯", ["caída en diagonal que cruza la flecha noreste", "caída en diagonal que cruza la flecha noreste", "caída en diagonal que cruza la flecha noreste"]);
  this.executeCharTest("⤰", ["creciente Cruce de la Cruz del Sureste de la Flecha", "creciente Cruce de la Cruz del Sureste de la Flecha", "creciente Cruce de la Cruz del Sureste de la Flecha"]);
  this.executeCharTest("⤱", ["north East Arrow Crossing North West Arrow", "north East Arrow Crossing North West Arrow", "north East Arrow Crossing North West Arrow"]);
  this.executeCharTest("⤲", ["north West Arrow Crossing North East Arrow", "north West Arrow Crossing North East Arrow", "north West Arrow Crossing North East Arrow"]);
  this.executeCharTest("⤳", ["flecha ondulada", "flecha ondulada", "flecha ondulada"]);
  this.executeCharTest("⤴", ["flecha que apunta hacia la derecha y luego curva hacia arriba", "flecha que apunta hacia la derecha y luego curva hacia arriba", "flecha que apunta hacia la derecha y luego curva hacia arriba"]);
  this.executeCharTest("⤵", ["flecha hacia la derecha que gira hacia abajo", "flecha hacia la derecha que gira hacia abajo", "flecha hacia la derecha que gira hacia abajo"]);
  this.executeCharTest("⤶", ["flecha hacia abajo que gira hacia la izquierda", "flecha hacia abajo que gira hacia la izquierda", "flecha hacia abajo que gira hacia la izquierda"]);
  this.executeCharTest("⤷", ["flecha hacia abajo que gira hacia la derecha", "flecha hacia abajo que gira hacia la derecha", "flecha hacia abajo que gira hacia la derecha"]);
  this.executeCharTest("⤸", ["flecha semicircular a la derecha en sentido horario", "flecha semicircular a la derecha en sentido horario", "flecha semicircular a la derecha en sentido horario"]);
  this.executeCharTest("⤹", ["flecha semicircular a la izquierda en sentido antihorario", "flecha semicircular a la izquierda en sentido antihorario", "flecha semicircular a la izquierda en sentido antihorario"]);
  this.executeCharTest("⤺", ["arco superior flecha hacia la izquierda", "arco superior flecha hacia la izquierda", "arco superior flecha hacia la izquierda"]);
  this.executeCharTest("⤻", ["arco inferior flecha hacia la izquierda", "arco inferior flecha hacia la izquierda", "arco inferior flecha hacia la izquierda"]);
  this.executeCharTest("⤼", ["giro negativo", "giro negativo", "giro negativo"]);
  this.executeCharTest("⤽", ["giro positivo", "giro positivo", "giro positivo"]);
  this.executeCharTest("⤾", ["flecha hacia la derecha semicircular inferior derecha", "flecha hacia la derecha semicircular inferior derecha", "flecha hacia la derecha semicircular inferior derecha"]);
  this.executeCharTest("⤿", ["flecha inferior izquierda semicircular en sentido antihorario", "flecha inferior izquierda semicircular en sentido antihorario", "flecha inferior izquierda semicircular en sentido antihorario"]);
  this.executeCharTest("⥀", ["círculo cerrado en sentido contrario a las agujas del reloj", "círculo cerrado en sentido contrario a las agujas del reloj", "círculo cerrado en sentido contrario a las agujas del reloj"]);
  this.executeCharTest("⥁", ["círculo cerrado en el sentido de las agujas del reloj", "círculo cerrado en el sentido de las agujas del reloj", "círculo cerrado en el sentido de las agujas del reloj"]);
  this.executeCharTest("⥂", ["flecha hacia la derecha sobre la flecha corta hacia la izquierda", "flecha hacia la derecha sobre la flecha corta hacia la izquierda", "flecha hacia la derecha sobre la flecha corta hacia la izquierda"]);
  this.executeCharTest("⥃", ["flecha hacia la izquierda sobre la flecha corta hacia la derecha", "flecha hacia la izquierda sobre la flecha corta hacia la derecha", "flecha hacia la izquierda sobre la flecha corta hacia la derecha"]);
  this.executeCharTest("⥄", ["flecha corta hacia la derecha arriba flecha hacia la izquierda", "flecha corta hacia la derecha arriba flecha hacia la izquierda", "flecha corta hacia la derecha arriba flecha hacia la izquierda"]);
  this.executeCharTest("⥅", ["flecha con más suscrito", "flecha con más suscrito", "flecha con más suscrito"]);
  this.executeCharTest("⥆", ["flecha hacia la izquierda con más abajo", "flecha hacia la izquierda con más abajo", "flecha hacia la izquierda con más abajo"]);
  this.executeCharTest("⥇", ["flecha hacia la derecha a través de X", "flecha hacia la derecha a través de X", "flecha hacia la derecha a través de X"]);
  this.executeCharTest("⥈", ["flecha hacia la izquierda a través de círculo", "flecha hacia la izquierda a través de círculo", "flecha hacia la izquierda a través de círculo"]);
  this.executeCharTest("⥉", ["dos cabezas de flecha hacia arriba desde círculo", "dos cabezas de flecha hacia arriba desde círculo", "dos cabezas de flecha hacia arriba desde círculo"]);
  this.executeCharTest("⥰", ["round implies", "round implies", "round implies"]);
  this.executeCharTest("⥱", ["flecha con igual", "flecha con igual", "flecha con igual"]);
  this.executeCharTest("⥲", ["flecha con tilde", "flecha con tilde", "flecha con tilde"]);
  this.executeCharTest("⥳", ["tilde con flecha hacia la izquierda", "tilde con flecha hacia la izquierda", "tilde con flecha hacia la izquierda"]);
  this.executeCharTest("⥴", ["tilde con flecha", "tilde con flecha", "tilde con flecha"]);
  this.executeCharTest("⥵", ["flecha con casi igual a", "flecha con casi igual a", "flecha con casi igual a"]);
  this.executeCharTest("⥶", ["flecha hacia la izquierda con menor que", "flecha hacia la izquierda con menor que", "flecha hacia la izquierda con menor que"]);
  this.executeCharTest("⥷", ["flecha hacia la izquierda a través de menos de", "flecha hacia la izquierda a través de menos de", "flecha hacia la izquierda a través de menos de"]);
  this.executeCharTest("⥸", ["flecha con mayor que", "flecha con mayor que", "flecha con mayor que"]);
  this.executeCharTest("⥹", ["flecha hacia la izquierda con incluido", "flecha hacia la izquierda con incluido", "flecha hacia la izquierda con incluido"]);
  this.executeCharTest("⥺", ["flecha hacia la izquierda a través del subconjunto", "flecha hacia la izquierda a través del subconjunto", "flecha hacia la izquierda a través del subconjunto"]);
  this.executeCharTest("⥻", ["flecha hacia la izquierda con contiene", "flecha hacia la izquierda con contiene", "flecha hacia la izquierda con contiene"]);
  this.executeCharTest("⦳", ["conjunto vacío con flecha", "conjunto vacío con flecha", "conjunto vacío con flecha"]);
  this.executeCharTest("⦴", ["conjunto vacío con flecha inversa", "conjunto vacío con flecha inversa", "conjunto vacío con flecha inversa"]);
  this.executeCharTest("⦽", ["flecha arriba a través del círculo", "flecha arriba a través del círculo", "flecha arriba a través del círculo"]);
  this.executeCharTest("⧪", ["diamante negro con flecha hacia abajo", "diamante negro con flecha hacia abajo", "diamante negro con flecha hacia abajo"]);
  this.executeCharTest("⧬", ["círculo blanco con flecha hacia abajo", "círculo blanco con flecha hacia abajo", "círculo blanco con flecha hacia abajo"]);
  this.executeCharTest("⧭", ["círculo negro con flecha hacia abajo", "círculo negro con flecha hacia abajo", "círculo negro con flecha hacia abajo"]);
  this.executeCharTest("⨗", ["integral con flecha hacia la izquierda con garfio", "integral con flecha hacia la izquierda con garfio", "integral con flecha hacia la izquierda con garfio"]);
  this.executeCharTest("⬀", ["flecha blanca del noreste", "flecha blanca del noreste", "flecha blanca del noreste"]);
  this.executeCharTest("⬁", ["flecha blanca del noroeste", "flecha blanca del noroeste", "flecha blanca del noroeste"]);
  this.executeCharTest("⬂", ["flecha blanca del sureste", "flecha blanca del sureste", "flecha blanca del sureste"]);
  this.executeCharTest("⬃", ["sudoeste flecha blanca", "sudoeste flecha blanca", "sudoeste flecha blanca"]);
  this.executeCharTest("⬄", ["izquierda derecha flecha blanca", "izquierda derecha flecha blanca", "izquierda derecha flecha blanca"]);
  this.executeCharTest("⬅", ["flecha negra hacia la izquierda", "flecha negra hacia la izquierda", "flecha negra hacia la izquierda"]);
  this.executeCharTest("⬆", ["flecha negra hacia arriba", "flecha negra hacia arriba", "flecha negra hacia arriba"]);
  this.executeCharTest("⬇", ["flecha negra hacia abajo", "flecha negra hacia abajo", "flecha negra hacia abajo"]);
  this.executeCharTest("⬈", ["flecha negra del noreste", "flecha negra del noreste", "flecha negra del noreste"]);
  this.executeCharTest("⬉", ["flecha negra del noroeste", "flecha negra del noroeste", "flecha negra del noroeste"]);
  this.executeCharTest("⬊", ["flecha negra sur este", "flecha negra sur este", "flecha negra sur este"]);
  this.executeCharTest("⬋", ["sudoeste flecha negra", "sudoeste flecha negra", "sudoeste flecha negra"]);
  this.executeCharTest("⬌", ["izquierda derecha flecha negra", "izquierda derecha flecha negra", "izquierda derecha flecha negra"]);
  this.executeCharTest("⬍", ["arriba abajo flecha negra", "arriba abajo flecha negra", "arriba abajo flecha negra"]);
  this.executeCharTest("⬎", ["flecha hacia la derecha con la punta hacia abajo", "flecha hacia la derecha con la punta hacia abajo", "flecha hacia la derecha con la punta hacia abajo"]);
  this.executeCharTest("⬏", ["flecha hacia la derecha con la punta hacia arriba", "flecha hacia la derecha con la punta hacia arriba", "flecha hacia la derecha con la punta hacia arriba"]);
  this.executeCharTest("⬐", ["flecha hacia la izquierda con la punta hacia abajo", "flecha hacia la izquierda con la punta hacia abajo", "flecha hacia la izquierda con la punta hacia abajo"]);
  this.executeCharTest("⬑", ["flecha hacia la izquierda con la punta hacia arriba", "flecha hacia la izquierda con la punta hacia arriba", "flecha hacia la izquierda con la punta hacia arriba"]);
  this.executeCharTest("⬰", ["flecha izquierda con círculo pequeño", "flecha izquierda con círculo pequeño", "flecha izquierda con círculo pequeño"]);
  this.executeCharTest("⬱", ["tres flechas a la izquierda", "tres flechas a la izquierda", "tres flechas a la izquierda"]);
  this.executeCharTest("⬲", ["flecha izquierda con un círculo más", "flecha izquierda con un círculo más", "flecha izquierda con un círculo más"]);
  this.executeCharTest("⬳", ["flecha de flecha larga hacia la izquierda", "flecha de flecha larga hacia la izquierda", "flecha de flecha larga hacia la izquierda"]);
  this.executeCharTest("⬴", ["flecha de dos cabezas hacia la izquierda con trazo vertical", "flecha de dos cabezas hacia la izquierda con trazo vertical", "flecha de dos cabezas hacia la izquierda con trazo vertical"]);
  this.executeCharTest("⬵", ["flecha de dos cabezas hacia la izquierda con doble movimiento vertical", "flecha de dos cabezas hacia la izquierda con doble movimiento vertical", "flecha de dos cabezas hacia la izquierda con doble movimiento vertical"]);
  this.executeCharTest("⬶", ["flecha de dos cabezas hacia la izquierda de la barra", "flecha de dos cabezas hacia la izquierda de la barra", "flecha de dos cabezas hacia la izquierda de la barra"]);
  this.executeCharTest("⬷", ["flecha triple de dos cabezas hacia la izquierda", "flecha triple de dos cabezas hacia la izquierda", "flecha triple de dos cabezas hacia la izquierda"]);
  this.executeCharTest("⬸", ["flecha hacia la izquierda con tallo punteado", "flecha hacia la izquierda con tallo punteado", "flecha hacia la izquierda con tallo punteado"]);
  this.executeCharTest("⬹", ["flecha hacia la izquierda con cola con trazo vertical", "flecha hacia la izquierda con cola con trazo vertical", "flecha hacia la izquierda con cola con trazo vertical"]);
  this.executeCharTest("⬺", ["flecha hacia la izquierda con cola con doble trazo vertical", "flecha hacia la izquierda con cola con doble trazo vertical", "flecha hacia la izquierda con cola con doble trazo vertical"]);
  this.executeCharTest("⬻", ["flecha de dos cabezas hacia la izquierda con cola", "flecha de dos cabezas hacia la izquierda con cola", "flecha de dos cabezas hacia la izquierda con cola"]);
  this.executeCharTest("⬼", ["flecha de dos cabezas hacia la izquierda con cola con trazo vertical", "flecha de dos cabezas hacia la izquierda con cola con trazo vertical", "flecha de dos cabezas hacia la izquierda con cola con trazo vertical"]);
  this.executeCharTest("⬽", ["flecha de dos cabezas hacia la izquierda con cola con doble movimiento vertical", "flecha de dos cabezas hacia la izquierda con cola con doble movimiento vertical", "flecha de dos cabezas hacia la izquierda con cola con doble movimiento vertical"]);
  this.executeCharTest("⬾", ["flecha hacia la izquierda a través de X", "flecha hacia la izquierda a través de X", "flecha hacia la izquierda a través de X"]);
  this.executeCharTest("⬿", ["ola flecha apuntando directamente a la izquierda", "ola flecha apuntando directamente a la izquierda", "ola flecha apuntando directamente a la izquierda"]);
  this.executeCharTest("⭀", ["signo de igual flecha arriba a la izquierda", "signo de igual flecha arriba a la izquierda", "signo de igual flecha arriba a la izquierda"]);
  this.executeCharTest("⭁", ["operador de tilde inverso sobre la flecha hacia la izquierda", "operador de tilde inverso sobre la flecha hacia la izquierda", "operador de tilde inverso sobre la flecha hacia la izquierda"]);
  this.executeCharTest("⭂", ["flecha hacia la izquierda sobre el reverso casi igual a", "flecha hacia la izquierda sobre el reverso casi igual a", "flecha hacia la izquierda sobre el reverso casi igual a"]);
  this.executeCharTest("⭃", ["flecha hacia la derecha a través de mayor-que", "flecha hacia la derecha a través de mayor-que", "flecha hacia la derecha a través de mayor-que"]);
  this.executeCharTest("⭄", ["flecha hacia la derecha a través de Superset", "flecha hacia la derecha a través de Superset", "flecha hacia la derecha a través de Superset"]);
  this.executeCharTest("⭅", ["flecha cuádruple hacia la izquierda", "flecha cuádruple hacia la izquierda", "flecha cuádruple hacia la izquierda"]);
  this.executeCharTest("⭆", ["flecha cuádruple hacia la derecha", "flecha cuádruple hacia la derecha", "flecha cuádruple hacia la derecha"]);
  this.executeCharTest("⭇", ["operador de tilde inverso sobre la flecha hacia la derecha", "operador de tilde inverso sobre la flecha hacia la derecha", "operador de tilde inverso sobre la flecha hacia la derecha"]);
  this.executeCharTest("⭈", ["flecha hacia la derecha sobre el reverso casi igual a", "flecha hacia la derecha sobre el reverso casi igual a", "flecha hacia la derecha sobre el reverso casi igual a"]);
  this.executeCharTest("⭉", ["operador de tilde sobre la flecha hacia la izquierda", "operador de tilde sobre la flecha hacia la izquierda", "operador de tilde sobre la flecha hacia la izquierda"]);
  this.executeCharTest("⭊", ["flecha hacia la izquierda por encima de casi igual a", "flecha hacia la izquierda por encima de casi igual a", "flecha hacia la izquierda por encima de casi igual a"]);
  this.executeCharTest("⭋", ["flecha hacia la izquierda sobre el operador de tilde inverso", "flecha hacia la izquierda sobre el operador de tilde inverso", "flecha hacia la izquierda sobre el operador de tilde inverso"]);
  this.executeCharTest("⭌", ["flecha hacia la derecha sobre el operador de tilde inverso", "flecha hacia la derecha sobre el operador de tilde inverso", "flecha hacia la derecha sobre el operador de tilde inverso"]);
  this.executeCharTest("￩", ["flecha hacia la izquierda de medio ancho", "flecha hacia la izquierda de medio ancho", "flecha hacia la izquierda de medio ancho"]);
  this.executeCharTest("￪", ["flecha ascendente de medio ancho", "flecha ascendente de medio ancho", "flecha ascendente de medio ancho"]);
  this.executeCharTest("￫", ["flecha de medio ancho hacia la derecha", "flecha de medio ancho hacia la derecha", "flecha de medio ancho hacia la derecha"]);
  this.executeCharTest("￬", ["flecha hacia abajo de medio ancho", "flecha hacia abajo de medio ancho", "flecha hacia abajo de medio ancho"]);
  this.executeCharTest("ℓ", ["script l", "script l", "script l"]);
  this.executeCharTest("℘", ["p de weierstrass", "p de weierstrass", "p de weierstrass"]);
  this.executeCharTest("ℼ", ["negrita de pizarra pi", "negrita de pizarra pi", "negrita de pizarra pi"]);
  this.executeCharTest("ℽ", ["negrita de pizarra gamma", "negrita de pizarra gamma", "negrita de pizarra gamma"]);
  this.executeCharTest("ℾ", ["negrita de pizarra mayúscula Gamma", "negrita de pizarra mayúscula Gamma", "negrita de pizarra mayúscula Gamma"]);
  this.executeCharTest("ℿ", ["negrita de pizarra mayúscula Pi", "negrita de pizarra mayúscula Pi", "negrita de pizarra mayúscula Pi"]);
  this.executeCharTest("⅀", ["negrita de pizarra suma de n-ary", "negrita de pizarra suma de n-ary", "negrita de pizarra suma de n-ary"]);
  this.executeCharTest("ⅅ", ["mayúscula D", "mayúscula D", "mayúscula D"]);
  this.executeCharTest("ⅆ", ["d", "d", "d"]);
  this.executeCharTest("ⅇ", ["e", "e", "e"]);
  this.executeCharTest("ⅈ", ["i", "i", "i"]);
  this.executeCharTest("ⅉ", ["negrita de pizarra cursiva j", "negrita de pizarra cursiva j", "negrita de pizarra cursiva j"]);
  this.executeCharTest("𝚤", ["cursiva sin punto i", "cursiva sin punto i", "cursiva sin punto i"]);
  this.executeCharTest("𝚥", ["cursiva sin punto j", "cursiva sin punto j", "cursiva sin punto j"]);
  this.executeCharTest("(", ["paréntesis izquierdo", "paréntesis izquierdo", "paréntesis izquierdo"]);
  this.executeCharTest(")", ["paréntesis derecho", "paréntesis derecho", "paréntesis derecho"]);
  this.executeCharTest("[", ["corchete izquierdo", "corchete izquierdo", "corchete izquierdo"]);
  this.executeCharTest("]", ["corchete derecho", "corchete derecho", "corchete derecho"]);
  this.executeCharTest("{", ["llave izquierda", "llave izquierda", "llave izquierda"]);
  this.executeCharTest("}", ["llaves derecha", "llaves derecha", "llaves derecha"]);
  this.executeCharTest("⁅", ["soporte cuadrado izquierdo con pluma", "soporte cuadrado izquierdo con pluma", "soporte cuadrado izquierdo con pluma"]);
  this.executeCharTest("⁆", ["soporte cuadrado derecho con pluma", "soporte cuadrado derecho con pluma", "soporte cuadrado derecho con pluma"]);
  this.executeCharTest("⌈", ["esquina superior izquierda", "esquina superior izquierda", "esquina superior izquierda"]);
  this.executeCharTest("⌉", ["esquina superior derecha", "esquina superior derecha", "esquina superior derecha"]);
  this.executeCharTest("⌊", ["esquina inferior izquierda", "esquina inferior izquierda", "esquina inferior izquierda"]);
  this.executeCharTest("⌋", ["esquina inferior derecha", "esquina inferior derecha", "esquina inferior derecha"]);
  this.executeCharTest("⌌", ["corte inferior derecho", "corte inferior derecho", "corte inferior derecho"]);
  this.executeCharTest("⌍", ["corte inferior izquierdo", "corte inferior izquierdo", "corte inferior izquierdo"]);
  this.executeCharTest("⌎", ["corte superior derecho ", "corte superior derecho ", "corte superior derecho "]);
  this.executeCharTest("⌏", ["corte superior izquierdo", "corte superior izquierdo", "corte superior izquierdo"]);
  this.executeCharTest("⌜", ["ángulo superior izquierdo", "ángulo superior izquierdo", "ángulo superior izquierdo"]);
  this.executeCharTest("⌝", ["ángulo superior derecho", "ángulo superior derecho", "ángulo superior derecho"]);
  this.executeCharTest("⌞", ["ángulo inferior izquierdo", "ángulo inferior izquierdo", "ángulo inferior izquierdo"]);
  this.executeCharTest("⌟", ["ángulo inferior derecho", "ángulo inferior derecho", "ángulo inferior derecho"]);
  this.executeCharTest("⌠", ["mitad superior de integral", "mitad superior de integral", "mitad superior de integral"]);
  this.executeCharTest("⌡", ["mitad inferior de integral", "mitad inferior de integral", "mitad inferior de integral"]);
  this.executeCharTest("〈", ["paréntesis angular izquierdo", "paréntesis angular izquierdo", "paréntesis angular izquierdo"]);
  this.executeCharTest("〉", ["paréntesis angular derecho", "paréntesis angular derecho", "paréntesis angular derecho"]);
  this.executeCharTest("⎛", ["paréntesis izquierdo gancho superior", "paréntesis izquierdo gancho superior", "paréntesis izquierdo gancho superior"]);
  this.executeCharTest("⎜", ["extensión del paréntesis izquierdo", "extensión del paréntesis izquierdo", "extensión del paréntesis izquierdo"]);
  this.executeCharTest("⎝", ["paréntesis inferior gancho inferior", "paréntesis inferior gancho inferior", "paréntesis inferior gancho inferior"]);
  this.executeCharTest("⎞", ["paréntesis derecho gancho superior", "paréntesis derecho gancho superior", "paréntesis derecho gancho superior"]);
  this.executeCharTest("⎟", ["extensión del paréntesis derecho", "extensión del paréntesis derecho", "extensión del paréntesis derecho"]);
  this.executeCharTest("⎠", ["paréntesis inferior gancho inferior", "paréntesis inferior gancho inferior", "paréntesis inferior gancho inferior"]);
  this.executeCharTest("⎡", ["esquina cuadrada izquierda esquina superior", "esquina cuadrada izquierda esquina superior", "esquina cuadrada izquierda esquina superior"]);
  this.executeCharTest("⎢", ["extensión del soporte cuadrado izquierdo", "extensión del soporte cuadrado izquierdo", "extensión del soporte cuadrado izquierdo"]);
  this.executeCharTest("⎣", ["esquina cuadrada izquierda esquina inferior", "esquina cuadrada izquierda esquina inferior", "esquina cuadrada izquierda esquina inferior"]);
  this.executeCharTest("⎤", ["esquina cuadrada derecha esquina superior", "esquina cuadrada derecha esquina superior", "esquina cuadrada derecha esquina superior"]);
  this.executeCharTest("⎥", ["extensión de soporte cuadrado derecho", "extensión de soporte cuadrado derecho", "extensión de soporte cuadrado derecho"]);
  this.executeCharTest("⎦", ["esquina cuadrada derecha esquina inferior", "esquina cuadrada derecha esquina inferior", "esquina cuadrada derecha esquina inferior"]);
  this.executeCharTest("⎧", ["gancho superior rizado izquierdo", "gancho superior rizado izquierdo", "gancho superior rizado izquierdo"]);
  this.executeCharTest("⎨", ["pedazo medio rizado izquierdo", "pedazo medio rizado izquierdo", "pedazo medio rizado izquierdo"]);
  this.executeCharTest("⎩", ["soporte izquierdo rizado gancho inferior", "soporte izquierdo rizado gancho inferior", "soporte izquierdo rizado gancho inferior"]);
  this.executeCharTest("⎪", ["extensión de soporte rizado", "extensión de soporte rizado", "extensión de soporte rizado"]);
  this.executeCharTest("⎫", ["gancho superior rizado derecho", "gancho superior rizado derecho", "gancho superior rizado derecho"]);
  this.executeCharTest("⎬", ["pedazo medio de soporte rizado derecho", "pedazo medio de soporte rizado derecho", "pedazo medio de soporte rizado derecho"]);
  this.executeCharTest("⎭", ["abrazadera inferior derecha rizado", "abrazadera inferior derecha rizado", "abrazadera inferior derecha rizado"]);
  this.executeCharTest("⎮", ["extensión integral", "extensión integral", "extensión integral"]);
  this.executeCharTest("⎯", ["extensión de línea horizontal", "extensión de línea horizontal", "extensión de línea horizontal"]);
  this.executeCharTest("⎰", ["izquierda arriba o derecho debajo sección llave", "izquierda arriba o derecho debajo sección llave", "izquierda arriba o derecho debajo sección llave"]);
  this.executeCharTest("⎱", ["derecha arriba o izquierdo debajo sección llave", "derecha arriba o izquierdo debajo sección llave", "derecha arriba o izquierdo debajo sección llave"]);
  this.executeCharTest("⎲", ["suma superior", "suma superior", "suma superior"]);
  this.executeCharTest("⎳", ["parte inferior de la suma", "parte inferior de la suma", "parte inferior de la suma"]);
  this.executeCharTest("⎴", ["corchete superior", "corchete superior", "corchete superior"]);
  this.executeCharTest("⎵", ["corchete inferior", "corchete inferior", "corchete inferior"]);
  this.executeCharTest("⎶", ["soporte cuadrado inferior sobre soporte cuadrado superior", "soporte cuadrado inferior sobre soporte cuadrado superior", "soporte cuadrado inferior sobre soporte cuadrado superior"]);
  this.executeCharTest("⎷", ["parte inferior del símbolo radical", "parte inferior del símbolo radical", "parte inferior del símbolo radical"]);
  this.executeCharTest("⎸", ["línea de caja vertical izquierda", "línea de caja vertical izquierda", "línea de caja vertical izquierda"]);
  this.executeCharTest("⎹", ["línea de caja vertical derecha", "línea de caja vertical derecha", "línea de caja vertical derecha"]);
  this.executeCharTest("⏜", ["paréntesis superior", "paréntesis superior", "paréntesis superior"]);
  this.executeCharTest("⏝", ["paréntesis inferior", "paréntesis inferior", "paréntesis inferior"]);
  this.executeCharTest("⏞", ["corchete rizado superior", "corchete rizado superior", "corchete rizado superior"]);
  this.executeCharTest("⏟", ["corchete rizado inferior", "corchete rizado inferior", "corchete rizado inferior"]);
  this.executeCharTest("⏠", ["corchete superior en tortuga", "corchete superior en tortuga", "corchete superior en tortuga"]);
  this.executeCharTest("⏡", ["corchete inferior en tortuga", "corchete inferior en tortuga", "corchete inferior en tortuga"]);
  this.executeCharTest("❨", ["ornamento de paréntesis izquierdo medio", "ornamento de paréntesis izquierdo medio", "ornamento de paréntesis izquierdo medio"]);
  this.executeCharTest("❩", ["adorno de paréntesis medio derecho", "adorno de paréntesis medio derecho", "adorno de paréntesis medio derecho"]);
  this.executeCharTest("❪", ["adorno paréntesis izquierdo aplanado medio", "adorno paréntesis izquierdo aplanado medio", "adorno paréntesis izquierdo aplanado medio"]);
  this.executeCharTest("❫", ["adorno paréntesis derecho medio aplanado", "adorno paréntesis derecho medio aplanado", "adorno paréntesis derecho medio aplanado"]);
  this.executeCharTest("❬", ["adorno de soporte de ángulo medio apuntando hacia la izquierda", "adorno de soporte de ángulo medio apuntando hacia la izquierda", "adorno de soporte de ángulo medio apuntando hacia la izquierda"]);
  this.executeCharTest("❭", ["adorno de soporte de ángulo medio apuntando hacia la derecha", "adorno de soporte de ángulo medio apuntando hacia la derecha", "adorno de soporte de ángulo medio apuntando hacia la derecha"]);
  this.executeCharTest("❮", ["ornamento de comillas en el ángulo que apunta hacia la izquierda", "ornamento de comillas en el ángulo que apunta hacia la izquierda", "ornamento de comillas en el ángulo que apunta hacia la izquierda"]);
  this.executeCharTest("❯", ["ornamento de comillas en ángulo recto que apunta hacia la derecha", "ornamento de comillas en ángulo recto que apunta hacia la derecha", "ornamento de comillas en ángulo recto que apunta hacia la derecha"]);
  this.executeCharTest("❰", ["ornamento pesado del soporte del ángulo que señala a la izquierda", "ornamento pesado del soporte del ángulo que señala a la izquierda", "ornamento pesado del soporte del ángulo que señala a la izquierda"]);
  this.executeCharTest("❱", ["ornamento pesado del soporte del ángulo que señala hacia la derecha", "ornamento pesado del soporte del ángulo que señala hacia la derecha", "ornamento pesado del soporte del ángulo que señala hacia la derecha"]);
  this.executeCharTest("❲", ["ornamento de soporte de concha de tortuga izquierda ligera", "ornamento de soporte de concha de tortuga izquierda ligera", "ornamento de soporte de concha de tortuga izquierda ligera"]);
  this.executeCharTest("❳", ["ornamento de corchete derecho tortuga derecha", "ornamento de corchete derecho tortuga derecha", "ornamento de corchete derecho tortuga derecha"]);
  this.executeCharTest("❴", ["ornamento de soporte rizado izquierdo medio", "ornamento de soporte rizado izquierdo medio", "ornamento de soporte rizado izquierdo medio"]);
  this.executeCharTest("❵", ["ornamento de soporte rizado derecho medio", "ornamento de soporte rizado derecho medio", "ornamento de soporte rizado derecho medio"]);
  this.executeCharTest("⟅", ["símbolo delimitador izquierdo de bolsa de s-formó", "símbolo delimitador izquierdo de bolsa de s-formó", "símbolo delimitador izquierdo de bolsa de s-formó"]);
  this.executeCharTest("⟆", ["símbolo delimitador derecho de bolsa de s-formó", "símbolo delimitador derecho de bolsa de s-formó", "símbolo delimitador derecho de bolsa de s-formó"]);
  this.executeCharTest("⟦", ["corchete vacío izquierdo", "corchete vacío izquierdo", "corchete vacío izquierdo"]);
  this.executeCharTest("⟧", ["corchete vacío derecho", "corchete vacío derecho", "corchete vacío derecho"]);
  this.executeCharTest("⟨", ["corchete agudo izquierdo", "corchete agudo izquierdo", "corchete agudo izquierdo"]);
  this.executeCharTest("⟩", ["corchete agudo derecho", "corchete agudo derecho", "corchete agudo derecho"]);
  this.executeCharTest("⟪", ["doble corchete agudo izquierdo", "doble corchete agudo izquierdo", "doble corchete agudo izquierdo"]);
  this.executeCharTest("⟫", ["doble corchete agudo derecho", "doble corchete agudo derecho", "doble corchete agudo derecho"]);
  this.executeCharTest("⟬", ["corchete de tortuga vacío izquierdo", "corchete de tortuga vacío izquierdo", "corchete de tortuga vacío izquierdo"]);
  this.executeCharTest("⟭", ["corchete de tortuga vacío derecho ", "corchete de tortuga vacío derecho ", "corchete de tortuga vacío derecho "]);
  this.executeCharTest("⟮", ["paréntesis plano izquierdo", "paréntesis plano izquierdo", "paréntesis plano izquierdo"]);
  this.executeCharTest("⟯", ["paréntesis plano derecho", "paréntesis plano derecho", "paréntesis plano derecho"]);
  this.executeCharTest("⦃", ["soporte rizado blanco izquierdo", "soporte rizado blanco izquierdo", "soporte rizado blanco izquierdo"]);
  this.executeCharTest("⦄", ["derecha rizado blanco soporte", "derecha rizado blanco soporte", "derecha rizado blanco soporte"]);
  this.executeCharTest("⦅", ["left white paren", "left white paren", "left white paren"]);
  this.executeCharTest("⦆", ["right white paren", "right white paren", "right white paren"]);
  this.executeCharTest("⦇", ["notación Z izquierda soporte de imagen", "notación Z izquierda soporte de imagen", "notación Z izquierda soporte de imagen"]);
  this.executeCharTest("⦈", ["corchete de imagen derecha de notación Z", "corchete de imagen derecha de notación Z", "corchete de imagen derecha de notación Z"]);
  this.executeCharTest("⦉", ["z notation left binding bracket", "z notation left binding bracket", "z notation left binding bracket"]);
  this.executeCharTest("⦊", ["z notation right binding bracket", "z notation right binding bracket", "z notation right binding bracket"]);
  this.executeCharTest("⦋", ["left bracket with underbar", "left bracket with underbar", "left bracket with underbar"]);
  this.executeCharTest("⦌", ["right bracket with underbar", "right bracket with underbar", "right bracket with underbar"]);
  this.executeCharTest("⦍", ["left bracket with tick in top corner", "left bracket with tick in top corner", "left bracket with tick in top corner"]);
  this.executeCharTest("⦎", ["right bracket with tick in bottom corner", "right bracket with tick in bottom corner", "right bracket with tick in bottom corner"]);
  this.executeCharTest("⦏", ["left bracket with tick in bottom corner", "left bracket with tick in bottom corner", "left bracket with tick in bottom corner"]);
  this.executeCharTest("⦐", ["right bracket with tick in top corner", "right bracket with tick in top corner", "right bracket with tick in top corner"]);
  this.executeCharTest("⦑", ["left angle bracket with dot", "left angle bracket with dot", "left angle bracket with dot"]);
  this.executeCharTest("⦒", ["right angle bracket with dot", "right angle bracket with dot", "right angle bracket with dot"]);
  this.executeCharTest("⦓", ["left arc less than bracket", "left arc less than bracket", "left arc less than bracket"]);
  this.executeCharTest("⦔", ["right arc greater than bracket", "right arc greater than bracket", "right arc greater than bracket"]);
  this.executeCharTest("⦕", ["double left arc greater than bracket", "double left arc greater than bracket", "double left arc greater than bracket"]);
  this.executeCharTest("⦖", ["double right arc less than bracket", "double right arc less than bracket", "double right arc less than bracket"]);
  this.executeCharTest("⦗", ["soporte de concha de tortuga negra izquierda", "soporte de concha de tortuga negra izquierda", "soporte de concha de tortuga negra izquierda"]);
  this.executeCharTest("⦘", ["abrazadera de concha de tortuga negra derecha", "abrazadera de concha de tortuga negra derecha", "abrazadera de concha de tortuga negra derecha"]);
  this.executeCharTest("⧘", ["valla izquierda ondulada", "valla izquierda ondulada", "valla izquierda ondulada"]);
  this.executeCharTest("⧙", ["valla derecha ondulada", "valla derecha ondulada", "valla derecha ondulada"]);
  this.executeCharTest("⧚", ["left double wiggly fence", "left double wiggly fence", "left double wiggly fence"]);
  this.executeCharTest("⧛", ["right double wiggly fence", "right double wiggly fence", "right double wiggly fence"]);
  this.executeCharTest("⧼", ["abrazadera de ángulo curvo a la izquierda", "abrazadera de ángulo curvo a la izquierda", "abrazadera de ángulo curvo a la izquierda"]);
  this.executeCharTest("⧽", ["abrazadera de ángulo curvo orientada hacia la derecha", "abrazadera de ángulo curvo orientada hacia la derecha", "abrazadera de ángulo curvo orientada hacia la derecha"]);
  this.executeCharTest("⸢", ["soporte superior izquierdo superior", "soporte superior izquierdo superior", "soporte superior izquierdo superior"]);
  this.executeCharTest("⸣", ["medio soporte superior derecho", "medio soporte superior derecho", "medio soporte superior derecho"]);
  this.executeCharTest("⸤", ["abrazadera inferior izquierda", "abrazadera inferior izquierda", "abrazadera inferior izquierda"]);
  this.executeCharTest("⸥", ["medio soporte inferior derecho", "medio soporte inferior derecho", "medio soporte inferior derecho"]);
  this.executeCharTest("⸦", ["soporte U lateral izquierdo", "soporte U lateral izquierdo", "soporte U lateral izquierdo"]);
  this.executeCharTest("⸧", ["lado derecho U soporte", "lado derecho U soporte", "lado derecho U soporte"]);
  this.executeCharTest("⸨", ["doble paréntesis izquierdo", "doble paréntesis izquierdo", "doble paréntesis izquierdo"]);
  this.executeCharTest("⸩", ["paréntesis doble derecho", "paréntesis doble derecho", "paréntesis doble derecho"]);
  this.executeCharTest("〈", ["soporte de ángulo izquierdo", "soporte de ángulo izquierdo", "soporte de ángulo izquierdo"]);
  this.executeCharTest("〉", ["soporte de ángulo recto", "soporte de ángulo recto", "soporte de ángulo recto"]);
  this.executeCharTest("《", ["paréntesis angular doble", "paréntesis angular doble", "paréntesis angular doble"]);
  this.executeCharTest("》", ["paréntesis angular doble derecho", "paréntesis angular doble derecho", "paréntesis angular doble derecho"]);
  this.executeCharTest("「", ["soporte de la esquina izquierda", "soporte de la esquina izquierda", "soporte de la esquina izquierda"]);
  this.executeCharTest("」", ["soporte de esquina derecha", "soporte de esquina derecha", "soporte de esquina derecha"]);
  this.executeCharTest("『", ["soporte de esquina blanco izquierdo", "soporte de esquina blanco izquierdo", "soporte de esquina blanco izquierdo"]);
  this.executeCharTest("』", ["soporte de esquina blanco derecho", "soporte de esquina blanco derecho", "soporte de esquina blanco derecho"]);
  this.executeCharTest("【", ["soporte Lenticular Izquierdo Negro", "soporte Lenticular Izquierdo Negro", "soporte Lenticular Izquierdo Negro"]);
  this.executeCharTest("】", ["soporte Lenticular Negro Derecho", "soporte Lenticular Negro Derecho", "soporte Lenticular Negro Derecho"]);
  this.executeCharTest("〔", ["left tortoise shell bracket", "left tortoise shell bracket", "left tortoise shell bracket"]);
  this.executeCharTest("〕", ["right tortoise shell bracket", "right tortoise shell bracket", "right tortoise shell bracket"]);
  this.executeCharTest("〖", ["soporte lenticular blanco izquierdo", "soporte lenticular blanco izquierdo", "soporte lenticular blanco izquierdo"]);
  this.executeCharTest("〗", ["soporte lenticular blanco derecho", "soporte lenticular blanco derecho", "soporte lenticular blanco derecho"]);
  this.executeCharTest("〘", ["soporte de caparazón de tortuga blanca izquierda", "soporte de caparazón de tortuga blanca izquierda", "soporte de caparazón de tortuga blanca izquierda"]);
  this.executeCharTest("〙", ["soporte de concha de tortuga blanca derecha", "soporte de concha de tortuga blanca derecha", "soporte de concha de tortuga blanca derecha"]);
  this.executeCharTest("〚", ["corchete vacío", "corchete vacío", "corchete vacío"]);
  this.executeCharTest("〛", ["corchete vacío derecho", "corchete vacío derecho", "corchete vacío derecho"]);
  this.executeCharTest("〝", ["comilla doble invertida", "comilla doble invertida", "comilla doble invertida"]);
  this.executeCharTest("〞", ["segunda", "segunda", "segunda"]);
  this.executeCharTest("〟", ["comillas bajas dobles", "comillas bajas dobles", "comillas bajas dobles"]);
  this.executeCharTest("﴾", ["paréntesis izquierdo adornado", "paréntesis izquierdo adornado", "paréntesis izquierdo adornado"]);
  this.executeCharTest("﴿", ["paréntesis derecho adornado", "paréntesis derecho adornado", "paréntesis derecho adornado"]);
  this.executeCharTest("︗", ["formulario de presentación para soporte lenticular blanco izquierdo vertical", "formulario de presentación para soporte lenticular blanco izquierdo vertical", "formulario de presentación para soporte lenticular blanco izquierdo vertical"]);
  this.executeCharTest("︘", ["formulario de presentación para soporte lenticular blanco vertical derecho", "formulario de presentación para soporte lenticular blanco vertical derecho", "formulario de presentación para soporte lenticular blanco vertical derecho"]);
  this.executeCharTest("︵", ["paréntesis superior", "paréntesis superior", "paréntesis superior"]);
  this.executeCharTest("︶", ["paréntesis inferior", "paréntesis inferior", "paréntesis inferior"]);
  this.executeCharTest("︷", ["llave superior", "llave superior", "llave superior"]);
  this.executeCharTest("︸", ["llave inferior", "llave inferior", "llave inferior"]);
  this.executeCharTest("︹", ["formulario de presentación para el soporte vertical de concha de tortuga izquierda", "formulario de presentación para el soporte vertical de concha de tortuga izquierda", "formulario de presentación para el soporte vertical de concha de tortuga izquierda"]);
  this.executeCharTest("︺", ["formulario de presentación para el soporte vertical de concha de tortuga derecha", "formulario de presentación para el soporte vertical de concha de tortuga derecha", "formulario de presentación para el soporte vertical de concha de tortuga derecha"]);
  this.executeCharTest("︻", ["formulario de presentación para el soporte lenticular negro izquierdo vertical", "formulario de presentación para el soporte lenticular negro izquierdo vertical", "formulario de presentación para el soporte lenticular negro izquierdo vertical"]);
  this.executeCharTest("︼", ["formulario de presentación para el soporte lenticular negro derecho vertical", "formulario de presentación para el soporte lenticular negro derecho vertical", "formulario de presentación para el soporte lenticular negro derecho vertical"]);
  this.executeCharTest("︽", ["formulario de presentación para soporte vertical doble ángulo izquierdo", "formulario de presentación para soporte vertical doble ángulo izquierdo", "formulario de presentación para soporte vertical doble ángulo izquierdo"]);
  this.executeCharTest("︾", ["formulario de presentación para el soporte de ángulo recto doble vertical", "formulario de presentación para el soporte de ángulo recto doble vertical", "formulario de presentación para el soporte de ángulo recto doble vertical"]);
  this.executeCharTest("︿", ["paréntesis angular superior", "paréntesis angular superior", "paréntesis angular superior"]);
  this.executeCharTest("﹀", ["paréntesis angular inferior", "paréntesis angular inferior", "paréntesis angular inferior"]);
  this.executeCharTest("﹁", ["formulario de presentación para soporte de esquina vertical izquierda", "formulario de presentación para soporte de esquina vertical izquierda", "formulario de presentación para soporte de esquina vertical izquierda"]);
  this.executeCharTest("﹂", ["formulario de presentación para soporte de esquina vertical derecha", "formulario de presentación para soporte de esquina vertical derecha", "formulario de presentación para soporte de esquina vertical derecha"]);
  this.executeCharTest("﹃", ["formulario de presentación para soporte de esquina blanco vertical izquierdo", "formulario de presentación para soporte de esquina blanco vertical izquierdo", "formulario de presentación para soporte de esquina blanco vertical izquierdo"]);
  this.executeCharTest("﹄", ["formulario de presentación para soporte de esquina vertical derecha blanca", "formulario de presentación para soporte de esquina vertical derecha blanca", "formulario de presentación para soporte de esquina vertical derecha blanca"]);
  this.executeCharTest("﹇", ["formulario de presentación para soporte cuadrado vertical izquierdo", "formulario de presentación para soporte cuadrado vertical izquierdo", "formulario de presentación para soporte cuadrado vertical izquierdo"]);
  this.executeCharTest("﹈", ["formulario de presentación para soporte cuadrado vertical derecho", "formulario de presentación para soporte cuadrado vertical derecho", "formulario de presentación para soporte cuadrado vertical derecho"]);
  this.executeCharTest("﹙", ["pequeño paréntesis izquierdo", "pequeño paréntesis izquierdo", "pequeño paréntesis izquierdo"]);
  this.executeCharTest("﹚", ["paréntesis derecho pequeño", "paréntesis derecho pequeño", "paréntesis derecho pequeño"]);
  this.executeCharTest("﹛", ["corchete Rizado Izquierdo Pequeño", "corchete Rizado Izquierdo Pequeño", "corchete Rizado Izquierdo Pequeño"]);
  this.executeCharTest("﹜", ["corchete derecho rizado pequeño", "corchete derecho rizado pequeño", "corchete derecho rizado pequeño"]);
  this.executeCharTest("﹝", ["soporte de concha pequeña tortuga izquierda", "soporte de concha pequeña tortuga izquierda", "soporte de concha pequeña tortuga izquierda"]);
  this.executeCharTest("﹞", ["pequeño corchete derecho de concha de tortuga", "pequeño corchete derecho de concha de tortuga", "pequeño corchete derecho de concha de tortuga"]);
  this.executeCharTest("（", ["paréntesis izquierdo de ancho completo", "paréntesis izquierdo de ancho completo", "paréntesis izquierdo de ancho completo"]);
  this.executeCharTest("）", ["paréntesis derecho de ancho completo", "paréntesis derecho de ancho completo", "paréntesis derecho de ancho completo"]);
  this.executeCharTest("［", ["soporte cuadrado izquierdo de ancho completo", "soporte cuadrado izquierdo de ancho completo", "soporte cuadrado izquierdo de ancho completo"]);
  this.executeCharTest("］", ["soporte cuadrado derecho de ancho completo", "soporte cuadrado derecho de ancho completo", "soporte cuadrado derecho de ancho completo"]);
  this.executeCharTest("｛", ["corchete rizado izquierdo de ancho completo", "corchete rizado izquierdo de ancho completo", "corchete rizado izquierdo de ancho completo"]);
  this.executeCharTest("｝", ["corchete derecho de ancho completo", "corchete derecho de ancho completo", "corchete derecho de ancho completo"]);
  this.executeCharTest("｟", ["paréntesis blanco izquierdo de ancho completo", "paréntesis blanco izquierdo de ancho completo", "paréntesis blanco izquierdo de ancho completo"]);
  this.executeCharTest("｠", ["paréntesis blanco derecho de ancho completo", "paréntesis blanco derecho de ancho completo", "paréntesis blanco derecho de ancho completo"]);
  this.executeCharTest("｢", ["corchete de esquina izquierda de medio ancho", "corchete de esquina izquierda de medio ancho", "corchete de esquina izquierda de medio ancho"]);
  this.executeCharTest("｣", ["soporte de esquina derecha de medio ancho", "soporte de esquina derecha de medio ancho", "soporte de esquina derecha de medio ancho"]);
  this.executeCharTest("─", ["delimitador horizontal", "delimitador horizontal", "delimitador horizontal"]);
  this.executeCharTest("━", ["dibujos de cajas pesadas horizontales", "dibujos de cajas pesadas horizontales", "dibujos de cajas pesadas horizontales"]);
  this.executeCharTest("│", ["delimitador vertical", "delimitador vertical", "delimitador vertical"]);
  this.executeCharTest("┃", ["dibujos de cajas Pesado Vertical", "dibujos de cajas Pesado Vertical", "dibujos de cajas Pesado Vertical"]);
  this.executeCharTest("┄", ["dibujos de cajas Light Triple Dash Horizontal", "dibujos de cajas Light Triple Dash Horizontal", "dibujos de cajas Light Triple Dash Horizontal"]);
  this.executeCharTest("┅", ["dibujos de cajas Heavy Triple Dash Horizontal", "dibujos de cajas Heavy Triple Dash Horizontal", "dibujos de cajas Heavy Triple Dash Horizontal"]);
  this.executeCharTest("┆", ["dibujos de cajas Light Triple Dash Vertical", "dibujos de cajas Light Triple Dash Vertical", "dibujos de cajas Light Triple Dash Vertical"]);
  this.executeCharTest("┇", ["dibujos de cajas Heavy Triple Dash Vertical", "dibujos de cajas Heavy Triple Dash Vertical", "dibujos de cajas Heavy Triple Dash Vertical"]);
  this.executeCharTest("┈", ["caja Dibujos Ligero Cuadruple Dash Horizontal", "caja Dibujos Ligero Cuadruple Dash Horizontal", "caja Dibujos Ligero Cuadruple Dash Horizontal"]);
  this.executeCharTest("┉", ["dibujos de cajas Heavy Quadruple Dash Horizontal", "dibujos de cajas Heavy Quadruple Dash Horizontal", "dibujos de cajas Heavy Quadruple Dash Horizontal"]);
  this.executeCharTest("┊", ["caja Dibujos Luz Cuadruple Tablero Vertical", "caja Dibujos Luz Cuadruple Tablero Vertical", "caja Dibujos Luz Cuadruple Tablero Vertical"]);
  this.executeCharTest("┋", ["dibujos de cajas Heavy Quadruple Dash Vertical", "dibujos de cajas Heavy Quadruple Dash Vertical", "dibujos de cajas Heavy Quadruple Dash Vertical"]);
  this.executeCharTest("┌", ["esquina inferior derecha", "esquina inferior derecha", "esquina inferior derecha"]);
  this.executeCharTest("┍", ["dibujos de cajas Abajo Ligero y Derecho Pesado", "dibujos de cajas Abajo Ligero y Derecho Pesado", "dibujos de cajas Abajo Ligero y Derecho Pesado"]);
  this.executeCharTest("┎", ["dibujos de cajas abajo pesados ​​y rectos ligeros", "dibujos de cajas abajo pesados ​​y rectos ligeros", "dibujos de cajas abajo pesados ​​y rectos ligeros"]);
  this.executeCharTest("┏", ["dibujos de cajas pesados ​​abajo y derecha", "dibujos de cajas pesados ​​abajo y derecha", "dibujos de cajas pesados ​​abajo y derecha"]);
  this.executeCharTest("┐", ["esquina inferior izquierda", "esquina inferior izquierda", "esquina inferior izquierda"]);
  this.executeCharTest("┑", ["dibujos de cajas abajo ligeros y pesados ​​a la izquierda", "dibujos de cajas abajo ligeros y pesados ​​a la izquierda", "dibujos de cajas abajo ligeros y pesados ​​a la izquierda"]);
  this.executeCharTest("┒", ["dibujos de cajas abajo pesados ​​y luz izquierda", "dibujos de cajas abajo pesados ​​y luz izquierda", "dibujos de cajas abajo pesados ​​y luz izquierda"]);
  this.executeCharTest("┓", ["dibujos de cajas pesados ​​hacia abajo y hacia la izquierda", "dibujos de cajas pesados ​​hacia abajo y hacia la izquierda", "dibujos de cajas pesados ​​hacia abajo y hacia la izquierda"]);
  this.executeCharTest("└", ["esquina superior derecha", "esquina superior derecha", "esquina superior derecha"]);
  this.executeCharTest("┕", ["dibujos de cajas hasta ligero y derecho pesado", "dibujos de cajas hasta ligero y derecho pesado", "dibujos de cajas hasta ligero y derecho pesado"]);
  this.executeCharTest("┖", ["dibujos de cajas hasta Pesadas y Ligeras", "dibujos de cajas hasta Pesadas y Ligeras", "dibujos de cajas hasta Pesadas y Ligeras"]);
  this.executeCharTest("┗", ["dibujos de cajas pesados ​​y derechos", "dibujos de cajas pesados ​​y derechos", "dibujos de cajas pesados ​​y derechos"]);
  this.executeCharTest("┘", ["esquina superior izquierda", "esquina superior izquierda", "esquina superior izquierda"]);
  this.executeCharTest("┙", ["dibujos de cajas hasta livianos y pesados ​​a la izquierda", "dibujos de cajas hasta livianos y pesados ​​a la izquierda", "dibujos de cajas hasta livianos y pesados ​​a la izquierda"]);
  this.executeCharTest("┚", ["dibujos de cajas hasta pesado y luz izquierda", "dibujos de cajas hasta pesado y luz izquierda", "dibujos de cajas hasta pesado y luz izquierda"]);
  this.executeCharTest("┛", ["dibujos de cajas pesados ​​hacia arriba y hacia la izquierda", "dibujos de cajas pesados ​​hacia arriba y hacia la izquierda", "dibujos de cajas pesados ​​hacia arriba y hacia la izquierda"]);
  this.executeCharTest("├", ["delimitador izquierdo y separador horizontal", "delimitador izquierdo y separador horizontal", "delimitador izquierdo y separador horizontal"]);
  this.executeCharTest("┝", ["cuadros de caja Vertical ligero y derecho pesado", "cuadros de caja Vertical ligero y derecho pesado", "cuadros de caja Vertical ligero y derecho pesado"]);
  this.executeCharTest("┞", ["dibujos de cajas hasta pesados ​​y rectos hacia abajo", "dibujos de cajas hasta pesados ​​y rectos hacia abajo", "dibujos de cajas hasta pesados ​​y rectos hacia abajo"]);
  this.executeCharTest("┟", ["dibujos de cajas abajo pesados ​​y rectos arriba ligeros", "dibujos de cajas abajo pesados ​​y rectos arriba ligeros", "dibujos de cajas abajo pesados ​​y rectos arriba ligeros"]);
  this.executeCharTest("┠", ["dibujos de cajas verticales pesadas y rectas ligeras", "dibujos de cajas verticales pesadas y rectas ligeras", "dibujos de cajas verticales pesadas y rectas ligeras"]);
  this.executeCharTest("┡", ["dibujos de cajas abajo ligeros y rectos arriba pesados", "dibujos de cajas abajo ligeros y rectos arriba pesados", "dibujos de cajas abajo ligeros y rectos arriba pesados"]);
  this.executeCharTest("┢", ["dibujos de cajas para arriba livianos y rectos para abajo pesados", "dibujos de cajas para arriba livianos y rectos para abajo pesados", "dibujos de cajas para arriba livianos y rectos para abajo pesados"]);
  this.executeCharTest("┣", ["dibujos de cajas pesadas verticales y derechas", "dibujos de cajas pesadas verticales y derechas", "dibujos de cajas pesadas verticales y derechas"]);
  this.executeCharTest("┤", ["delimitador derecho y separador horizontal", "delimitador derecho y separador horizontal", "delimitador derecho y separador horizontal"]);
  this.executeCharTest("┥", ["cuadros de caja Vertical ligero y izquierdo pesado", "cuadros de caja Vertical ligero y izquierdo pesado", "cuadros de caja Vertical ligero y izquierdo pesado"]);
  this.executeCharTest("┦", ["dibujos de cajas para arriba Pesado y Izquierda Abajo Luz", "dibujos de cajas para arriba Pesado y Izquierda Abajo Luz", "dibujos de cajas para arriba Pesado y Izquierda Abajo Luz"]);
  this.executeCharTest("┧", ["dibujos de cajas abajo pesados ​​y luz izquierda arriba", "dibujos de cajas abajo pesados ​​y luz izquierda arriba", "dibujos de cajas abajo pesados ​​y luz izquierda arriba"]);
  this.executeCharTest("┨", ["dibujos de cajas verticales pesadas y luz izquierda", "dibujos de cajas verticales pesadas y luz izquierda", "dibujos de cajas verticales pesadas y luz izquierda"]);
  this.executeCharTest("┩", ["dibujos de cajas abajo ligeros e izquierdos arriba pesados", "dibujos de cajas abajo ligeros e izquierdos arriba pesados", "dibujos de cajas abajo ligeros e izquierdos arriba pesados"]);
  this.executeCharTest("┪", ["dibujos de cajas para arriba Ligero y Izquierda Abajo Pesado", "dibujos de cajas para arriba Ligero y Izquierda Abajo Pesado", "dibujos de cajas para arriba Ligero y Izquierda Abajo Pesado"]);
  this.executeCharTest("┫", ["dibujos de cajas pesadas verticales e izquierdas", "dibujos de cajas pesadas verticales e izquierdas", "dibujos de cajas pesadas verticales e izquierdas"]);
  this.executeCharTest("┬", ["delimitador superior y separador vertical", "delimitador superior y separador vertical", "delimitador superior y separador vertical"]);
  this.executeCharTest("┭", ["dibujos de cajas izquierda pesados ​​y derecha abajo luz", "dibujos de cajas izquierda pesados ​​y derecha abajo luz", "dibujos de cajas izquierda pesados ​​y derecha abajo luz"]);
  this.executeCharTest("┮", ["dibujos de cajas, derecha, pesada y izquierda abajo, luz", "dibujos de cajas, derecha, pesada y izquierda abajo, luz", "dibujos de cajas, derecha, pesada y izquierda abajo, luz"]);
  this.executeCharTest("┯", ["dibujos de cajas abajo ligeros y horizontales pesados", "dibujos de cajas abajo ligeros y horizontales pesados", "dibujos de cajas abajo ligeros y horizontales pesados"]);
  this.executeCharTest("┰", ["dibujos de cajas de luz pesada y horizontal", "dibujos de cajas de luz pesada y horizontal", "dibujos de cajas de luz pesada y horizontal"]);
  this.executeCharTest("┱", ["dibujos de la caja de luz derecha y izquierda abajo pesado", "dibujos de la caja de luz derecha y izquierda abajo pesado", "dibujos de la caja de luz derecha y izquierda abajo pesado"]);
  this.executeCharTest("┲", ["cuadros de caja izquierda ligera y derecha abajo pesada", "cuadros de caja izquierda ligera y derecha abajo pesada", "cuadros de caja izquierda ligera y derecha abajo pesada"]);
  this.executeCharTest("┳", ["dibujos de cajas pesados ​​y horizontales", "dibujos de cajas pesados ​​y horizontales", "dibujos de cajas pesados ​​y horizontales"]);
  this.executeCharTest("┴", ["delimitador inferior y separador vertical", "delimitador inferior y separador vertical", "delimitador inferior y separador vertical"]);
  this.executeCharTest("┵", ["dibujos de cajas izquierda pesada y derecha arriba ligera", "dibujos de cajas izquierda pesada y derecha arriba ligera", "dibujos de cajas izquierda pesada y derecha arriba ligera"]);
  this.executeCharTest("┶", ["dibujos de caja derecha pesada y luz izquierda arriba", "dibujos de caja derecha pesada y luz izquierda arriba", "dibujos de caja derecha pesada y luz izquierda arriba"]);
  this.executeCharTest("┷", ["dibujos de cajas hasta ligero y horizontal pesado", "dibujos de cajas hasta ligero y horizontal pesado", "dibujos de cajas hasta ligero y horizontal pesado"]);
  this.executeCharTest("┸", ["dibujos de cajas hasta luz pesada y horizontal", "dibujos de cajas hasta luz pesada y horizontal", "dibujos de cajas hasta luz pesada y horizontal"]);
  this.executeCharTest("┹", ["dibujos de cajas a la derecha, livianos y a la izquierda, pesados", "dibujos de cajas a la derecha, livianos y a la izquierda, pesados", "dibujos de cajas a la derecha, livianos y a la izquierda, pesados"]);
  this.executeCharTest("┺", ["dibujos de cajas Izquierda Ligera y Derecha Arriba Pesada", "dibujos de cajas Izquierda Ligera y Derecha Arriba Pesada", "dibujos de cajas Izquierda Ligera y Derecha Arriba Pesada"]);
  this.executeCharTest("┻", ["dibujos de cajas pesados ​​y horizontales", "dibujos de cajas pesados ​​y horizontales", "dibujos de cajas pesados ​​y horizontales"]);
  this.executeCharTest("┼", ["cruce de separadores sencillos", "cruce de separadores sencillos", "cruce de separadores sencillos"]);
  this.executeCharTest("┽", ["dibujos de cajas Izquierda Pesada y Derecha Vertical Luz", "dibujos de cajas Izquierda Pesada y Derecha Vertical Luz", "dibujos de cajas Izquierda Pesada y Derecha Vertical Luz"]);
  this.executeCharTest("┾", ["dibujos de caja derecha pesada y luz vertical izquierda", "dibujos de caja derecha pesada y luz vertical izquierda", "dibujos de caja derecha pesada y luz vertical izquierda"]);
  this.executeCharTest("┿", ["dibujos de cajas Vertical Ligera y Horizontal Pesada", "dibujos de cajas Vertical Ligera y Horizontal Pesada", "dibujos de cajas Vertical Ligera y Horizontal Pesada"]);
  this.executeCharTest("╀", ["dibujos de cajas para arriba pesados ​​y abajo luz horizontal", "dibujos de cajas para arriba pesados ​​y abajo luz horizontal", "dibujos de cajas para arriba pesados ​​y abajo luz horizontal"]);
  this.executeCharTest("╁", ["dibujos de cajas hacia abajo pesados ​​y hacia arriba luz horizontal", "dibujos de cajas hacia abajo pesados ​​y hacia arriba luz horizontal", "dibujos de cajas hacia abajo pesados ​​y hacia arriba luz horizontal"]);
  this.executeCharTest("╂", ["dibujos de cajas verticales pesadas y horizontales ligeras", "dibujos de cajas verticales pesadas y horizontales ligeras", "dibujos de cajas verticales pesadas y horizontales ligeras"]);
  this.executeCharTest("╃", ["dibujos de cajas Izquierda Arriba Pesada y Derecha abajo Luz", "dibujos de cajas Izquierda Arriba Pesada y Derecha abajo Luz", "dibujos de cajas Izquierda Arriba Pesada y Derecha abajo Luz"]);
  this.executeCharTest("╄", ["dibujos de caja derecha arriba pesada y izquierda abajo luz", "dibujos de caja derecha arriba pesada y izquierda abajo luz", "dibujos de caja derecha arriba pesada y izquierda abajo luz"]);
  this.executeCharTest("╅", ["dibujos de cajas, izquierda abajo, pesada y derecha arriba, ligera", "dibujos de cajas, izquierda abajo, pesada y derecha arriba, ligera", "dibujos de cajas, izquierda abajo, pesada y derecha arriba, ligera"]);
  this.executeCharTest("╆", ["dibujos de la caja derecha abajo pesada y izquierda arriba ligera", "dibujos de la caja derecha abajo pesada y izquierda arriba ligera", "dibujos de la caja derecha abajo pesada y izquierda arriba ligera"]);
  this.executeCharTest("╇", ["dibujos de cajas abajo ligeros y ascendentes horizontales pesados", "dibujos de cajas abajo ligeros y ascendentes horizontales pesados", "dibujos de cajas abajo ligeros y ascendentes horizontales pesados"]);
  this.executeCharTest("╈", ["dibujos de cajas para arriba Ligero y para abajo horizontal pesado", "dibujos de cajas para arriba Ligero y para abajo horizontal pesado", "dibujos de cajas para arriba Ligero y para abajo horizontal pesado"]);
  this.executeCharTest("╉", ["dibujos de cajas a la derecha, ligeros y a la izquierda, verticales, pesados", "dibujos de cajas a la derecha, ligeros y a la izquierda, verticales, pesados", "dibujos de cajas a la derecha, ligeros y a la izquierda, verticales, pesados"]);
  this.executeCharTest("╊", ["dibujos de cajas Izquierda Ligera y Derecha Vertical Pesada", "dibujos de cajas Izquierda Ligera y Derecha Vertical Pesada", "dibujos de cajas Izquierda Ligera y Derecha Vertical Pesada"]);
  this.executeCharTest("╋", ["dibujos de cajas pesadas verticales y horizontales", "dibujos de cajas pesadas verticales y horizontales", "dibujos de cajas pesadas verticales y horizontales"]);
  this.executeCharTest("╌", ["dibujos de cajas Light Double Dash Horizontal", "dibujos de cajas Light Double Dash Horizontal", "dibujos de cajas Light Double Dash Horizontal"]);
  this.executeCharTest("╍", ["dibujos de cajas Heavy Double Dash Horizontal", "dibujos de cajas Heavy Double Dash Horizontal", "dibujos de cajas Heavy Double Dash Horizontal"]);
  this.executeCharTest("╎", ["dibujos de cajas Light Double Dash Vertical", "dibujos de cajas Light Double Dash Vertical", "dibujos de cajas Light Double Dash Vertical"]);
  this.executeCharTest("╏", ["dibujos de cajas Heavy Double Dash Vertical", "dibujos de cajas Heavy Double Dash Vertical", "dibujos de cajas Heavy Double Dash Vertical"]);
  this.executeCharTest("═", ["delimitador horizontal doble", "delimitador horizontal doble", "delimitador horizontal doble"]);
  this.executeCharTest("║", ["delimitador vertical doble", "delimitador vertical doble", "delimitador vertical doble"]);
  this.executeCharTest("╒", ["esquina inferior derecha, vertical doble", "esquina inferior derecha, vertical doble", "esquina inferior derecha, vertical doble"]);
  this.executeCharTest("╓", ["esquina inferior derecha, horizontal doble", "esquina inferior derecha, horizontal doble", "esquina inferior derecha, horizontal doble"]);
  this.executeCharTest("╔", ["esquina inferior derecha doble", "esquina inferior derecha doble", "esquina inferior derecha doble"]);
  this.executeCharTest("╕", ["esquina inferior izquierda, vertical doble", "esquina inferior izquierda, vertical doble", "esquina inferior izquierda, vertical doble"]);
  this.executeCharTest("╖", ["esquina inferior izquierda, horizontal doble", "esquina inferior izquierda, horizontal doble", "esquina inferior izquierda, horizontal doble"]);
  this.executeCharTest("╗", ["esquina inferior izquierda doble", "esquina inferior izquierda doble", "esquina inferior izquierda doble"]);
  this.executeCharTest("╘", ["esquina superior derecha, vertical doble", "esquina superior derecha, vertical doble", "esquina superior derecha, vertical doble"]);
  this.executeCharTest("╙", ["esquina superior derecha, horizontal doble", "esquina superior derecha, horizontal doble", "esquina superior derecha, horizontal doble"]);
  this.executeCharTest("╚", ["esquina superior derecha doble", "esquina superior derecha doble", "esquina superior derecha doble"]);
  this.executeCharTest("╛", ["esquina superior izquierda, vertical doble", "esquina superior izquierda, vertical doble", "esquina superior izquierda, vertical doble"]);
  this.executeCharTest("╜", ["esquina superior izquierda, horizontal doble", "esquina superior izquierda, horizontal doble", "esquina superior izquierda, horizontal doble"]);
  this.executeCharTest("╝", ["esquina superior izquierda doble", "esquina superior izquierda doble", "esquina superior izquierda doble"]);
  this.executeCharTest("╞", ["delimitador izquierdo con separador doble", "delimitador izquierdo con separador doble", "delimitador izquierdo con separador doble"]);
  this.executeCharTest("╟", ["delimitador izquierdo doble con separador horizontal", "delimitador izquierdo doble con separador horizontal", "delimitador izquierdo doble con separador horizontal"]);
  this.executeCharTest("╠", ["delimitador izquierdo y separador horizontal dobles", "delimitador izquierdo y separador horizontal dobles", "delimitador izquierdo y separador horizontal dobles"]);
  this.executeCharTest("╡", ["delimitador derecho con separador doble", "delimitador derecho con separador doble", "delimitador derecho con separador doble"]);
  this.executeCharTest("╢", ["delimitador derecho doble con separador horizontal", "delimitador derecho doble con separador horizontal", "delimitador derecho doble con separador horizontal"]);
  this.executeCharTest("╣", ["delimitador derecho y separador horizontal dobles", "delimitador derecho y separador horizontal dobles", "delimitador derecho y separador horizontal dobles"]);
  this.executeCharTest("╤", ["delimitador superior doble con separador vertical", "delimitador superior doble con separador vertical", "delimitador superior doble con separador vertical"]);
  this.executeCharTest("╥", ["delimitador superior con separador vertical doble", "delimitador superior con separador vertical doble", "delimitador superior con separador vertical doble"]);
  this.executeCharTest("╦", ["delimitador superior y separador vertical dobles", "delimitador superior y separador vertical dobles", "delimitador superior y separador vertical dobles"]);
  this.executeCharTest("╧", ["delimitador inferior doble con separador vertical", "delimitador inferior doble con separador vertical", "delimitador inferior doble con separador vertical"]);
  this.executeCharTest("╨", ["delimitador inferior con separador vertical doble", "delimitador inferior con separador vertical doble", "delimitador inferior con separador vertical doble"]);
  this.executeCharTest("╩", ["delimitador inferior y separador vertical dobles", "delimitador inferior y separador vertical dobles", "delimitador inferior y separador vertical dobles"]);
  this.executeCharTest("╪", ["cruce de separadores, vertical sencillo y horizontal doble", "cruce de separadores, vertical sencillo y horizontal doble", "cruce de separadores, vertical sencillo y horizontal doble"]);
  this.executeCharTest("╫", ["cruce de separadores, vertical doble y horizontal sencillo", "cruce de separadores, vertical doble y horizontal sencillo", "cruce de separadores, vertical doble y horizontal sencillo"]);
  this.executeCharTest("╬", ["cruce de separadores dobles", "cruce de separadores dobles", "cruce de separadores dobles"]);
  this.executeCharTest("╭", ["dibujos de cajas de luz arco abajo y derecha", "dibujos de cajas de luz arco abajo y derecha", "dibujos de cajas de luz arco abajo y derecha"]);
  this.executeCharTest("╮", ["dibujos de cajas de luz arco hacia abajo y hacia la izquierda", "dibujos de cajas de luz arco hacia abajo y hacia la izquierda", "dibujos de cajas de luz arco hacia abajo y hacia la izquierda"]);
  this.executeCharTest("╯", ["dibujos de cajas de luz arco arriba y a la izquierda", "dibujos de cajas de luz arco arriba y a la izquierda", "dibujos de cajas de luz arco arriba y a la izquierda"]);
  this.executeCharTest("╰", ["caja de dibujos de luz arco arriba y derecha", "caja de dibujos de luz arco arriba y derecha", "caja de dibujos de luz arco arriba y derecha"]);
  this.executeCharTest("╱", ["dibujos de cajas Luz Diagonal Superior derecha a inferior izquierda", "dibujos de cajas Luz Diagonal Superior derecha a inferior izquierda", "dibujos de cajas Luz Diagonal Superior derecha a inferior izquierda"]);
  this.executeCharTest("╲", ["dibujos de cajas Luz Diagonal Superior izquierda a inferior derecha", "dibujos de cajas Luz Diagonal Superior izquierda a inferior derecha", "dibujos de cajas Luz Diagonal Superior izquierda a inferior derecha"]);
  this.executeCharTest("╳", ["dibujos de cajas de luz diagonal cruz", "dibujos de cajas de luz diagonal cruz", "dibujos de cajas de luz diagonal cruz"]);
  this.executeCharTest("╴", ["dibujos de cajas luz izquierda", "dibujos de cajas luz izquierda", "dibujos de cajas luz izquierda"]);
  this.executeCharTest("╵", ["dibujos de cajas se iluminan", "dibujos de cajas se iluminan", "dibujos de cajas se iluminan"]);
  this.executeCharTest("╶", ["dibujos de cajas a la derecha", "dibujos de cajas a la derecha", "dibujos de cajas a la derecha"]);
  this.executeCharTest("╷", ["dibujos de cajas de luz hacia abajo", "dibujos de cajas de luz hacia abajo", "dibujos de cajas de luz hacia abajo"]);
  this.executeCharTest("╸", ["dibujos de cajas pesados ​​a la izquierda", "dibujos de cajas pesados ​​a la izquierda", "dibujos de cajas pesados ​​a la izquierda"]);
  this.executeCharTest("╹", ["dibujos de cajas pesados", "dibujos de cajas pesados", "dibujos de cajas pesados"]);
  this.executeCharTest("╺", ["caja de dibujos pesado derecho", "caja de dibujos pesado derecho", "caja de dibujos pesado derecho"]);
  this.executeCharTest("╻", ["dibujos de cajas pesados", "dibujos de cajas pesados", "dibujos de cajas pesados"]);
  this.executeCharTest("╼", ["dibujos de cajas Ligero Izquierda y Pesada Derecha", "dibujos de cajas Ligero Izquierda y Pesada Derecha", "dibujos de cajas Ligero Izquierda y Pesada Derecha"]);
  this.executeCharTest("╽", ["dibujos de cajas iluminados y pesados", "dibujos de cajas iluminados y pesados", "dibujos de cajas iluminados y pesados"]);
  this.executeCharTest("╾", ["dibujos de cajas Pesado Izquierda y Luz Derecha", "dibujos de cajas Pesado Izquierda y Luz Derecha", "dibujos de cajas Pesado Izquierda y Luz Derecha"]);
  this.executeCharTest("╿", ["dibujos de cajas pesados ​​y ligeros", "dibujos de cajas pesados ​​y ligeros", "dibujos de cajas pesados ​​y ligeros"]);
  this.executeCharTest("▀", ["bloque mitad superior", "bloque mitad superior", "bloque mitad superior"]);
  this.executeCharTest("▁", ["bajar un octavo bloque", "bajar un octavo bloque", "bajar un octavo bloque"]);
  this.executeCharTest("▂", ["bloque de un cuarto inferior", "bloque de un cuarto inferior", "bloque de un cuarto inferior"]);
  this.executeCharTest("▃", ["bloque de tres octavos más bajo", "bloque de tres octavos más bajo", "bloque de tres octavos más bajo"]);
  this.executeCharTest("▄", ["bloque mitad inferior", "bloque mitad inferior", "bloque mitad inferior"]);
  this.executeCharTest("▅", ["bloque inferior de cinco octavos", "bloque inferior de cinco octavos", "bloque inferior de cinco octavos"]);
  this.executeCharTest("▆", ["bloque de tres cuartos más bajo", "bloque de tres cuartos más bajo", "bloque de tres cuartos más bajo"]);
  this.executeCharTest("▇", ["lower Seven Eighths Block", "lower Seven Eighths Block", "lower Seven Eighths Block"]);
  this.executeCharTest("█", ["bloque", "bloque", "bloque"]);
  this.executeCharTest("▉", ["bloque de siete octavos a la izquierda", "bloque de siete octavos a la izquierda", "bloque de siete octavos a la izquierda"]);
  this.executeCharTest("▊", ["bloque de tres cuartos a la izquierda", "bloque de tres cuartos a la izquierda", "bloque de tres cuartos a la izquierda"]);
  this.executeCharTest("▋", ["bloque de cinco octavos a la izquierda", "bloque de cinco octavos a la izquierda", "bloque de cinco octavos a la izquierda"]);
  this.executeCharTest("▌", ["media cuadra izquierda", "media cuadra izquierda", "media cuadra izquierda"]);
  this.executeCharTest("▍", ["bloque de tres octavos a la izquierda", "bloque de tres octavos a la izquierda", "bloque de tres octavos a la izquierda"]);
  this.executeCharTest("▎", ["bloque de un cuarto a la izquierda", "bloque de un cuarto a la izquierda", "bloque de un cuarto a la izquierda"]);
  this.executeCharTest("▏", ["izquierda un octavo bloque", "izquierda un octavo bloque", "izquierda un octavo bloque"]);
  this.executeCharTest("▐", ["media cuadra derecha", "media cuadra derecha", "media cuadra derecha"]);
  this.executeCharTest("░", ["sombra ligera", "sombra ligera", "sombra ligera"]);
  this.executeCharTest("▒", ["sombra media", "sombra media", "sombra media"]);
  this.executeCharTest("▓", ["sombra intensa", "sombra intensa", "sombra intensa"]);
  this.executeCharTest("▔", ["upper One Eighth Block", "upper One Eighth Block", "upper One Eighth Block"]);
  this.executeCharTest("▕", ["a la derecha un octavo bloque", "a la derecha un octavo bloque", "a la derecha un octavo bloque"]);
  this.executeCharTest("▖", ["cuadrante inferior izquierdo", "cuadrante inferior izquierdo", "cuadrante inferior izquierdo"]);
  this.executeCharTest("▗", ["cuadrante inferior derecho", "cuadrante inferior derecho", "cuadrante inferior derecho"]);
  this.executeCharTest("▘", ["cuadrante superior izquierdo", "cuadrante superior izquierdo", "cuadrante superior izquierdo"]);
  this.executeCharTest("▙", ["cuadrante superior izquierdo e inferior izquierdo e inferior derecho", "cuadrante superior izquierdo e inferior izquierdo e inferior derecho", "cuadrante superior izquierdo e inferior izquierdo e inferior derecho"]);
  this.executeCharTest("▚", ["cuadrante superior izquierdo e inferior derecho", "cuadrante superior izquierdo e inferior derecho", "cuadrante superior izquierdo e inferior derecho"]);
  this.executeCharTest("▛", ["cuadrante superior izquierdo y superior derecho e inferior izquierdo", "cuadrante superior izquierdo y superior derecho e inferior izquierdo", "cuadrante superior izquierdo y superior derecho e inferior izquierdo"]);
  this.executeCharTest("▜", ["cuadrante superior izquierdo y superior derecho e inferior derecho", "cuadrante superior izquierdo y superior derecho e inferior derecho", "cuadrante superior izquierdo y superior derecho e inferior derecho"]);
  this.executeCharTest("▝", ["cuadrante superior derecho", "cuadrante superior derecho", "cuadrante superior derecho"]);
  this.executeCharTest("▞", ["cuadrante superior derecho e inferior izquierdo", "cuadrante superior derecho e inferior izquierdo", "cuadrante superior derecho e inferior izquierdo"]);
  this.executeCharTest("▟", ["cuadrante superior derecho e inferior izquierdo e inferior derecho", "cuadrante superior derecho e inferior izquierdo e inferior derecho", "cuadrante superior derecho e inferior izquierdo e inferior derecho"]);
  this.executeCharTest("■", ["cuadrado relleno", "cuadrado relleno", "cuadrado relleno"]);
  this.executeCharTest("□", ["cuadrado", "cuadrado", "cuadrado"]);
  this.executeCharTest("▢", ["cuadrado blanco con esquinas redondeadas", "cuadrado blanco con esquinas redondeadas", "cuadrado blanco con esquinas redondeadas"]);
  this.executeCharTest("▣", ["cuadrado blanco que contiene cuadrado pequeño negro", "cuadrado blanco que contiene cuadrado pequeño negro", "cuadrado blanco que contiene cuadrado pequeño negro"]);
  this.executeCharTest("▤", ["cuadrado con relleno horizontal", "cuadrado con relleno horizontal", "cuadrado con relleno horizontal"]);
  this.executeCharTest("▥", ["cuadrado con relleno vertical", "cuadrado con relleno vertical", "cuadrado con relleno vertical"]);
  this.executeCharTest("▦", ["cuadrado con relleno de rayado ortogonal", "cuadrado con relleno de rayado ortogonal", "cuadrado con relleno de rayado ortogonal"]);
  this.executeCharTest("▧", ["cuadrado con la esquina superior izquierda a la derecha inferior", "cuadrado con la esquina superior izquierda a la derecha inferior", "cuadrado con la esquina superior izquierda a la derecha inferior"]);
  this.executeCharTest("▨", ["cuadrado con la parte superior derecha hacia abajo izquierda Relleno", "cuadrado con la parte superior derecha hacia abajo izquierda Relleno", "cuadrado con la parte superior derecha hacia abajo izquierda Relleno"]);
  this.executeCharTest("▩", ["cuadrado con relleno de rayado diagonal", "cuadrado con relleno de rayado diagonal", "cuadrado con relleno de rayado diagonal"]);
  this.executeCharTest("▪", ["cuadrado relleno", "cuadrado relleno", "cuadrado relleno"]);
  this.executeCharTest("▫", ["cuadrado", "cuadrado", "cuadrado"]);
  this.executeCharTest("▬", ["rectángulo negro", "rectángulo negro", "rectángulo negro"]);
  this.executeCharTest("▭", ["rectángulo", "rectángulo", "rectángulo"]);
  this.executeCharTest("▮", ["rectángulo relleno vertical", "rectángulo relleno vertical", "rectángulo relleno vertical"]);
  this.executeCharTest("▯", ["rectángulo vertical", "rectángulo vertical", "rectángulo vertical"]);
  this.executeCharTest("▰", ["paralelogramo negro", "paralelogramo negro", "paralelogramo negro"]);
  this.executeCharTest("▱", ["paralelogramo", "paralelogramo", "paralelogramo"]);
  this.executeCharTest("▲", ["triángulo relleno", "triángulo relleno", "triángulo relleno"]);
  this.executeCharTest("△", ["triángulo", "triángulo", "triángulo"]);
  this.executeCharTest("▴", ["triángulo relleno", "triángulo relleno", "triángulo relleno"]);
  this.executeCharTest("▵", ["triángulo", "triángulo", "triángulo"]);
  this.executeCharTest("▶", ["triángulo relleno señala derecha", "triángulo relleno señala derecha", "triángulo relleno señala derecha"]);
  this.executeCharTest("▷", ["triángulo señala derecha", "triángulo señala derecha", "triángulo señala derecha"]);
  this.executeCharTest("▸", ["triángulo relleno señala derecha", "triángulo relleno señala derecha", "triángulo relleno señala derecha"]);
  this.executeCharTest("▹", ["triángulo señala derecha", "triángulo señala derecha", "triángulo señala derecha"]);
  this.executeCharTest("►", ["indicador de apuntar hacia la derecha negro", "indicador de apuntar hacia la derecha negro", "indicador de apuntar hacia la derecha negro"]);
  this.executeCharTest("▻", ["puntero de apuntar hacia la derecha blanco", "puntero de apuntar hacia la derecha blanco", "puntero de apuntar hacia la derecha blanco"]);
  this.executeCharTest("▼", ["triángulo relleno señala abajo", "triángulo relleno señala abajo", "triángulo relleno señala abajo"]);
  this.executeCharTest("▽", ["triángulo señala abajo", "triángulo señala abajo", "triángulo señala abajo"]);
  this.executeCharTest("▾", ["triángulo relleno señala abajo", "triángulo relleno señala abajo", "triángulo relleno señala abajo"]);
  this.executeCharTest("▿", ["triángulo señala abajo", "triángulo señala abajo", "triángulo señala abajo"]);
  this.executeCharTest("◀", ["triángulo relleno señala izquierda", "triángulo relleno señala izquierda", "triángulo relleno señala izquierda"]);
  this.executeCharTest("◁", ["triángulo señala izquierda", "triángulo señala izquierda", "triángulo señala izquierda"]);
  this.executeCharTest("◂", ["triángulo relleno señala izquierda", "triángulo relleno señala izquierda", "triángulo relleno señala izquierda"]);
  this.executeCharTest("◃", ["triángulo señala izquierda", "triángulo señala izquierda", "triángulo señala izquierda"]);
  this.executeCharTest("◄", ["puntero relleno señala izquierda", "puntero relleno señala izquierda", "puntero relleno señala izquierda"]);
  this.executeCharTest("◅", ["puntero señala izquierda", "puntero señala izquierda", "puntero señala izquierda"]);
  this.executeCharTest("◆", ["diamante relleno", "diamante relleno", "diamante relleno"]);
  this.executeCharTest("◇", ["diamante", "diamante", "diamante"]);
  this.executeCharTest("◈", ["diamante vacío contiene diamante relleno", "diamante vacío contiene diamante relleno", "diamante vacío contiene diamante relleno"]);
  this.executeCharTest("◉", ["ojo de pez", "ojo de pez", "ojo de pez"]);
  this.executeCharTest("◊", ["rombo", "rombo", "rombo"]);
  this.executeCharTest("○", ["círculo vacío", "círculo vacío", "círculo vacío"]);
  this.executeCharTest("◌", ["círculo punteado", "círculo punteado", "círculo punteado"]);
  this.executeCharTest("◍", ["círculo con relleno vertical", "círculo con relleno vertical", "círculo con relleno vertical"]);
  this.executeCharTest("◎", ["blanco", "blanco", "blanco"]);
  this.executeCharTest("●", ["círculo relleno", "círculo relleno", "círculo relleno"]);
  this.executeCharTest("◐", ["círculo con mitad izquierda rellena", "círculo con mitad izquierda rellena", "círculo con mitad izquierda rellena"]);
  this.executeCharTest("◑", ["círculo con mitad derecha rellena", "círculo con mitad derecha rellena", "círculo con mitad derecha rellena"]);
  this.executeCharTest("◒", ["círculo con mitad inferior rellena", "círculo con mitad inferior rellena", "círculo con mitad inferior rellena"]);
  this.executeCharTest("◓", ["círculo con mitad superior rellena", "círculo con mitad superior rellena", "círculo con mitad superior rellena"]);
  this.executeCharTest("◔", ["círculo con cuadrante superior derecho relleno", "círculo con cuadrante superior derecho relleno", "círculo con cuadrante superior derecho relleno"]);
  this.executeCharTest("◕", ["círculo con cuadrante superior izquierdo relleno", "círculo con cuadrante superior izquierdo relleno", "círculo con cuadrante superior izquierdo relleno"]);
  this.executeCharTest("◖", ["semicírculo izquierdo relleno", "semicírculo izquierdo relleno", "semicírculo izquierdo relleno"]);
  this.executeCharTest("◗", ["semicírculo derecho relleno", "semicírculo derecho relleno", "semicírculo derecho relleno"]);
  this.executeCharTest("◘", ["bullet inversa", "bullet inversa", "bullet inversa"]);
  this.executeCharTest("◙", ["círculo vacío inverso", "círculo vacío inverso", "círculo vacío inverso"]);
  this.executeCharTest("◚", ["semicírculo superior vacío inverso", "semicírculo superior vacío inverso", "semicírculo superior vacío inverso"]);
  this.executeCharTest("◛", ["semicírculo superior vacío inverso", "semicírculo superior vacío inverso", "semicírculo superior vacío inverso"]);
  this.executeCharTest("◜", ["arco superior izquierda", "arco superior izquierda", "arco superior izquierda"]);
  this.executeCharTest("◝", ["arco superior derecha", "arco superior derecha", "arco superior derecha"]);
  this.executeCharTest("◞", ["arco inferior derecha", "arco inferior derecha", "arco inferior derecha"]);
  this.executeCharTest("◟", ["arco inferior izquierda", "arco inferior izquierda", "arco inferior izquierda"]);
  this.executeCharTest("◠", ["semicírculo superior", "semicírculo superior", "semicírculo superior"]);
  this.executeCharTest("◡", ["semicírculo inferior", "semicírculo inferior", "semicírculo inferior"]);
  this.executeCharTest("◢", ["triángulo inferior derecha relleno", "triángulo inferior derecha relleno", "triángulo inferior derecha relleno"]);
  this.executeCharTest("◣", ["triángulo inferior izquierda relleno", "triángulo inferior izquierda relleno", "triángulo inferior izquierda relleno"]);
  this.executeCharTest("◤", ["triángulo superior izquierda relleno", "triángulo superior izquierda relleno", "triángulo superior izquierda relleno"]);
  this.executeCharTest("◥", ["triángulo superior derecha relleno", "triángulo superior derecha relleno", "triángulo superior derecha relleno"]);
  this.executeCharTest("◦", ["composición", "composición", "composición"]);
  this.executeCharTest("◧", ["cuadrado con mitad izquierda rellena", "cuadrado con mitad izquierda rellena", "cuadrado con mitad izquierda rellena"]);
  this.executeCharTest("◨", ["cuadrado con mitad derecha rellena", "cuadrado con mitad derecha rellena", "cuadrado con mitad derecha rellena"]);
  this.executeCharTest("◩", ["cuadrado con mitad superior izquierda rellena", "cuadrado con mitad superior izquierda rellena", "cuadrado con mitad superior izquierda rellena"]);
  this.executeCharTest("◪", ["cuadrado con mitad inferior derecha rellena", "cuadrado con mitad inferior derecha rellena", "cuadrado con mitad inferior derecha rellena"]);
  this.executeCharTest("◫", ["cuadrado con bisectriz", "cuadrado con bisectriz", "cuadrado con bisectriz"]);
  this.executeCharTest("◬", ["triángulo vacío con punto", "triángulo vacío con punto", "triángulo vacío con punto"]);
  this.executeCharTest("◭", ["triángulo apuntando arriba con mitad izquierda rellena", "triángulo apuntando arriba con mitad izquierda rellena", "triángulo apuntando arriba con mitad izquierda rellena"]);
  this.executeCharTest("◮", ["triángulo apuntando arriba con mitad derecha rellena", "triángulo apuntando arriba con mitad derecha rellena", "triángulo apuntando arriba con mitad derecha rellena"]);
  this.executeCharTest("◯", ["círculo grande", "círculo grande", "círculo grande"]);
  this.executeCharTest("◰", ["cuadrado blanco con cuadrante superior izquierdo", "cuadrado blanco con cuadrante superior izquierdo", "cuadrado blanco con cuadrante superior izquierdo"]);
  this.executeCharTest("◱", ["cuadrado blanco con cuadrante inferior izquierdo", "cuadrado blanco con cuadrante inferior izquierdo", "cuadrado blanco con cuadrante inferior izquierdo"]);
  this.executeCharTest("◲", ["cuadrado blanco con cuadrante inferior derecho", "cuadrado blanco con cuadrante inferior derecho", "cuadrado blanco con cuadrante inferior derecho"]);
  this.executeCharTest("◳", ["cuadrado blanco con cuadrante superior derecho", "cuadrado blanco con cuadrante superior derecho", "cuadrado blanco con cuadrante superior derecho"]);
  this.executeCharTest("◴", ["círculo blanco con cuadrante superior izquierdo", "círculo blanco con cuadrante superior izquierdo", "círculo blanco con cuadrante superior izquierdo"]);
  this.executeCharTest("◵", ["círculo blanco con cuadrante inferior izquierdo", "círculo blanco con cuadrante inferior izquierdo", "círculo blanco con cuadrante inferior izquierdo"]);
  this.executeCharTest("◶", ["círculo blanco con cuadrante inferior derecho", "círculo blanco con cuadrante inferior derecho", "círculo blanco con cuadrante inferior derecho"]);
  this.executeCharTest("◷", ["círculo blanco con cuadrante superior derecho", "círculo blanco con cuadrante superior derecho", "círculo blanco con cuadrante superior derecho"]);
  this.executeCharTest("◸", ["triángulo superior izquierda", "triángulo superior izquierda", "triángulo superior izquierda"]);
  this.executeCharTest("◹", ["triángulo superior derecha", "triángulo superior derecha", "triángulo superior derecha"]);
  this.executeCharTest("◺", ["triángulo inferior izquierda", "triángulo inferior izquierda", "triángulo inferior izquierda"]);
  this.executeCharTest("◻", ["cuadrado mediano vacío", "cuadrado mediano vacío", "cuadrado mediano vacío"]);
  this.executeCharTest("◼", ["cuadrado mediano relleno", "cuadrado mediano relleno", "cuadrado mediano relleno"]);
  this.executeCharTest("◽", ["cuadrado mediano vacío", "cuadrado mediano vacío", "cuadrado mediano vacío"]);
  this.executeCharTest("◾", ["cuadrado mediano relleno", "cuadrado mediano relleno", "cuadrado mediano relleno"]);
  this.executeCharTest("◿", ["triángulo inferior derecha", "triángulo inferior derecha", "triángulo inferior derecha"]);
  this.executeCharTest("⬒", ["cuadrado con mitad superior negra", "cuadrado con mitad superior negra", "cuadrado con mitad superior negra"]);
  this.executeCharTest("⬓", ["cuadrado con mitad inferior negra", "cuadrado con mitad inferior negra", "cuadrado con mitad inferior negra"]);
  this.executeCharTest("⬔", ["cuadrado con mitad derecha superior diagonal negra", "cuadrado con mitad derecha superior diagonal negra", "cuadrado con mitad derecha superior diagonal negra"]);
  this.executeCharTest("⬕", ["cuadrado con mitad diagonal izquierda inferior negra", "cuadrado con mitad diagonal izquierda inferior negra", "cuadrado con mitad diagonal izquierda inferior negra"]);
  this.executeCharTest("⬖", ["diamante con Mitad Izquierda Negro", "diamante con Mitad Izquierda Negro", "diamante con Mitad Izquierda Negro"]);
  this.executeCharTest("⬗", ["diamante con mitad derecha negra", "diamante con mitad derecha negra", "diamante con mitad derecha negra"]);
  this.executeCharTest("⬘", ["diamante con mitad superior negra", "diamante con mitad superior negra", "diamante con mitad superior negra"]);
  this.executeCharTest("⬙", ["diamante con mitad inferior negra", "diamante con mitad inferior negra", "diamante con mitad inferior negra"]);
  this.executeCharTest("⬚", ["cuadrado punteado", "cuadrado punteado", "cuadrado punteado"]);
  this.executeCharTest("⬛", ["cuadrado grande negro", "cuadrado grande negro", "cuadrado grande negro"]);
  this.executeCharTest("⬜", ["gran Plaza Blanca", "gran Plaza Blanca", "gran Plaza Blanca"]);
  this.executeCharTest("⬝", ["cuadrado muy pequeño negro", "cuadrado muy pequeño negro", "cuadrado muy pequeño negro"]);
  this.executeCharTest("⬞", ["cuadrado muy pequeño blanco", "cuadrado muy pequeño blanco", "cuadrado muy pequeño blanco"]);
  this.executeCharTest("⬟", ["pentágono negro", "pentágono negro", "pentágono negro"]);
  this.executeCharTest("⬠", ["pentágono blanco", "pentágono blanco", "pentágono blanco"]);
  this.executeCharTest("⬡", ["hexágono blanco", "hexágono blanco", "hexágono blanco"]);
  this.executeCharTest("⬢", ["hexágono negro", "hexágono negro", "hexágono negro"]);
  this.executeCharTest("⬣", ["hexagonal negro horizontal", "hexagonal negro horizontal", "hexagonal negro horizontal"]);
  this.executeCharTest("⬤", ["circulo grande negro", "circulo grande negro", "circulo grande negro"]);
  this.executeCharTest("⬥", ["diamante Mediano Negro", "diamante Mediano Negro", "diamante Mediano Negro"]);
  this.executeCharTest("⬦", ["diamante blanco medio", "diamante blanco medio", "diamante blanco medio"]);
  this.executeCharTest("⬧", ["lozenge Mediano Negro", "lozenge Mediano Negro", "lozenge Mediano Negro"]);
  this.executeCharTest("⬨", ["pastilla blanca mediana", "pastilla blanca mediana", "pastilla blanca mediana"]);
  this.executeCharTest("⬩", ["pequeño diamante negro", "pequeño diamante negro", "pequeño diamante negro"]);
  this.executeCharTest("⬪", ["lozenge pequeño negro", "lozenge pequeño negro", "lozenge pequeño negro"]);
  this.executeCharTest("⬫", ["lozenge pequeño blanco", "lozenge pequeño blanco", "lozenge pequeño blanco"]);
  this.executeCharTest("⬬", ["elipse horizontal negro", "elipse horizontal negro", "elipse horizontal negro"]);
  this.executeCharTest("⬭", ["elipse horizontal blanco", "elipse horizontal blanco", "elipse horizontal blanco"]);
  this.executeCharTest("⬮", ["elipse Vertical Negro", "elipse Vertical Negro", "elipse Vertical Negro"]);
  this.executeCharTest("⬯", ["elipse Vertical Blanco", "elipse Vertical Blanco", "elipse Vertical Blanco"]);
  this.executeCharTest("⭐", ["estrella media vacía", "estrella media vacía", "estrella media vacía"]);
  this.executeCharTest("⭑", ["estrella pequeña rellena", "estrella pequeña rellena", "estrella pequeña rellena"]);
  this.executeCharTest("⭒", ["estrella pequeña vacía", "estrella pequeña vacía", "estrella pequeña vacía"]);
  this.executeCharTest("⭓", ["pentágono negro que señala hacia la derecha", "pentágono negro que señala hacia la derecha", "pentágono negro que señala hacia la derecha"]);
  this.executeCharTest("⭔", ["pentágono blanco que señala hacia la derecha", "pentágono blanco que señala hacia la derecha", "pentágono blanco que señala hacia la derecha"]);
  this.executeCharTest("⭕", ["círculo grande pesado", "círculo grande pesado", "círculo grande pesado"]);
  this.executeCharTest("⭖", ["óvalo pesado con interior oval", "óvalo pesado con interior oval", "óvalo pesado con interior oval"]);
  this.executeCharTest("⭗", ["círculo pesado con círculo dentro", "círculo pesado con círculo dentro", "círculo pesado con círculo dentro"]);
  this.executeCharTest("⭘", ["círculo pesado", "círculo pesado", "círculo pesado"]);
  this.executeCharTest("⭙", ["saltire en círculo pesado", "saltire en círculo pesado", "saltire en círculo pesado"]);
  this.executeCharTest("↼", ["flecha izquierda con arpón arriba", "flecha izquierda con arpón arriba", "flecha izquierda con arpón arriba"]);
  this.executeCharTest("↽", ["flecha izquierda con arpón debajo", "flecha izquierda con arpón debajo", "flecha izquierda con arpón debajo"]);
  this.executeCharTest("↾", ["flecha arriba con arpón derecho", "flecha arriba con arpón derecho", "flecha arriba con arpón derecho"]);
  this.executeCharTest("↿", ["flecha arriba con arpón izquierdo", "flecha arriba con arpón izquierdo", "flecha arriba con arpón izquierdo"]);
  this.executeCharTest("⇀", ["flecha derecha con arpón arriba", "flecha derecha con arpón arriba", "flecha derecha con arpón arriba"]);
  this.executeCharTest("⇁", ["flecha derecha con arpón debajo", "flecha derecha con arpón debajo", "flecha derecha con arpón debajo"]);
  this.executeCharTest("⇂", ["flecha abajo con arpón derecho", "flecha abajo con arpón derecho", "flecha abajo con arpón derecho"]);
  this.executeCharTest("⇃", ["flecha abajo con arpón izquierdo", "flecha abajo con arpón izquierdo", "flecha abajo con arpón izquierdo"]);
  this.executeCharTest("⇋", ["arpón izquierdo arriba de arpón derecho", "arpón izquierdo arriba de arpón derecho", "arpón izquierdo arriba de arpón derecho"]);
  this.executeCharTest("⇌", ["arpón derecho arriba de arpón izquierdo", "arpón derecho arriba de arpón izquierdo", "arpón derecho arriba de arpón izquierdo"]);
  this.executeCharTest("⥊", ["barra izquierda arriba barra derecha abajo arpón", "barra izquierda arriba barra derecha abajo arpón", "barra izquierda arriba barra derecha abajo arpón"]);
  this.executeCharTest("⥋", ["barra izquierda abajo barra derecha arriba arpón", "barra izquierda abajo barra derecha arriba arpón", "barra izquierda abajo barra derecha arriba arpón"]);
  this.executeCharTest("⥌", ["up barb right down barb left harpoon", "up barb right down barb left harpoon", "up barb right down barb left harpoon"]);
  this.executeCharTest("⥍", ["arriba barb izquierda abajo barb derecha arpón", "arriba barb izquierda abajo barb derecha arpón", "arriba barb izquierda abajo barb derecha arpón"]);
  this.executeCharTest("⥎", ["barra izquierda arriba barra derecha arriba arpón", "barra izquierda arriba barra derecha arriba arpón", "barra izquierda arriba barra derecha arriba arpón"]);
  this.executeCharTest("⥏", ["arpón a la derecha hacia arriba y abajo", "arpón a la derecha hacia arriba y abajo", "arpón a la derecha hacia arriba y abajo"]);
  this.executeCharTest("⥐", ["barra izquierda abajo barra derecha abajo arpón", "barra izquierda abajo barra derecha abajo arpón", "barra izquierda abajo barra derecha abajo arpón"]);
  this.executeCharTest("⥑", ["arpón a la izquierda hacia arriba y abajo", "arpón a la izquierda hacia arriba y abajo", "arpón a la izquierda hacia arriba y abajo"]);
  this.executeCharTest("⥒", ["arpón a la izquierda con púa hasta la barra", "arpón a la izquierda con púa hasta la barra", "arpón a la izquierda con púa hasta la barra"]);
  this.executeCharTest("⥓", ["arpón a la derecha con púa hasta la barra", "arpón a la derecha con púa hasta la barra", "arpón a la derecha con púa hasta la barra"]);
  this.executeCharTest("⥔", ["arpón ascendente con púa derecha a barra", "arpón ascendente con púa derecha a barra", "arpón ascendente con púa derecha a barra"]);
  this.executeCharTest("⥕", ["arpón hacia abajo con púa derecha a barra", "arpón hacia abajo con púa derecha a barra", "arpón hacia abajo con púa derecha a barra"]);
  this.executeCharTest("⥖", ["arpón a la izquierda con púas abajo a la barra", "arpón a la izquierda con púas abajo a la barra", "arpón a la izquierda con púas abajo a la barra"]);
  this.executeCharTest("⥗", ["arpón a la derecha con púa abajo a la barra", "arpón a la derecha con púa abajo a la barra", "arpón a la derecha con púa abajo a la barra"]);
  this.executeCharTest("⥘", ["arpón ascendente con púa izquierda a barra", "arpón ascendente con púa izquierda a barra", "arpón ascendente con púa izquierda a barra"]);
  this.executeCharTest("⥙", ["arpón hacia abajo con la barra izquierda a la barra", "arpón hacia abajo con la barra izquierda a la barra", "arpón hacia abajo con la barra izquierda a la barra"]);
  this.executeCharTest("⥚", ["arpón a la izquierda con púa arriba de la barra", "arpón a la izquierda con púa arriba de la barra", "arpón a la izquierda con púa arriba de la barra"]);
  this.executeCharTest("⥛", ["arpón a la derecha con púa arriba del bar", "arpón a la derecha con púa arriba del bar", "arpón a la derecha con púa arriba del bar"]);
  this.executeCharTest("⥜", ["arpón ascendente con púa derecha de barra", "arpón ascendente con púa derecha de barra", "arpón ascendente con púa derecha de barra"]);
  this.executeCharTest("⥝", ["arpón hacia abajo con púa derecha de barra", "arpón hacia abajo con púa derecha de barra", "arpón hacia abajo con púa derecha de barra"]);
  this.executeCharTest("⥞", ["arpón a la izquierda con púa abajo de barra", "arpón a la izquierda con púa abajo de barra", "arpón a la izquierda con púa abajo de barra"]);
  this.executeCharTest("⥟", ["arpón a la derecha con púa abajo de barra", "arpón a la derecha con púa abajo de barra", "arpón a la derecha con púa abajo de barra"]);
  this.executeCharTest("⥠", ["arpón ascendente con púa izquierda de barra", "arpón ascendente con púa izquierda de barra", "arpón ascendente con púa izquierda de barra"]);
  this.executeCharTest("⥡", ["arpón hacia abajo con barra izquierda de barra", "arpón hacia abajo con barra izquierda de barra", "arpón hacia abajo con barra izquierda de barra"]);
  this.executeCharTest("⥢", ["arpón a la izquierda con púas arriba arriba arpón a la izquierda con púas abajo", "arpón a la izquierda con púas arriba arriba arpón a la izquierda con púas abajo", "arpón a la izquierda con púas arriba arriba arpón a la izquierda con púas abajo"]);
  this.executeCharTest("⥣", ["arpón ascendente con púa izquierda al lado arpón ascendente con púa derecha", "arpón ascendente con púa izquierda al lado arpón ascendente con púa derecha", "arpón ascendente con púa izquierda al lado arpón ascendente con púa derecha"]);
  this.executeCharTest("⥤", ["arpón a la derecha con púas arriba arriba arpón a la derecha con púas abajo", "arpón a la derecha con púas arriba arriba arpón a la derecha con púas abajo", "arpón a la derecha con púas arriba arriba arpón a la derecha con púas abajo"]);
  this.executeCharTest("⥥", ["arpón hacia abajo con lengüeta a la izquierda al lado arpón hacia abajo con lengüeta a la derecha", "arpón hacia abajo con lengüeta a la izquierda al lado arpón hacia abajo con lengüeta a la derecha", "arpón hacia abajo con lengüeta a la izquierda al lado arpón hacia abajo con lengüeta a la derecha"]);
  this.executeCharTest("⥦", ["arpón a la izquierda con púa arriba arriba arpón a la derecha con púa arriba", "arpón a la izquierda con púa arriba arriba arpón a la derecha con púa arriba", "arpón a la izquierda con púa arriba arriba arpón a la derecha con púa arriba"]);
  this.executeCharTest("⥧", ["arpón a la izquierda con púa abajo arriba arpón a la derecha con púa abajo", "arpón a la izquierda con púa abajo arriba arpón a la derecha con púa abajo", "arpón a la izquierda con púa abajo arriba arpón a la derecha con púa abajo"]);
  this.executeCharTest("⥨", ["arpón a la derecha con púas arriba arriba arpón a la izquierda con púas arriba", "arpón a la derecha con púas arriba arriba arpón a la izquierda con púas arriba", "arpón a la derecha con púas arriba arriba arpón a la izquierda con púas arriba"]);
  this.executeCharTest("⥩", ["arpón a la derecha con púa abajo arriba arpón a la izquierda con púa abajo", "arpón a la derecha con púa abajo arriba arpón a la izquierda con púa abajo", "arpón a la derecha con púa abajo arriba arpón a la izquierda con púa abajo"]);
  this.executeCharTest("⥪", ["barra con arpón hacia la izquierda", "barra con arpón hacia la izquierda", "barra con arpón hacia la izquierda"]);
  this.executeCharTest("⥫", ["arpón hacia la izquierda con barra", "arpón hacia la izquierda con barra", "arpón hacia la izquierda con barra"]);
  this.executeCharTest("⥬", ["barra con arpón hacia la derecha", "barra con arpón hacia la derecha", "barra con arpón hacia la derecha"]);
  this.executeCharTest("⥭", ["arpón hacia la derecha con barra", "arpón hacia la derecha con barra", "arpón hacia la derecha con barra"]);
  this.executeCharTest("⥮", ["arpón ascendente con púa izquierda al lado arpón hacia abajo con púa derecha", "arpón ascendente con púa izquierda al lado arpón hacia abajo con púa derecha", "arpón ascendente con púa izquierda al lado arpón hacia abajo con púa derecha"]);
  this.executeCharTest("⥯", ["arpón hacia abajo con lengüeta a la izquierda al lado arpón hacia arriba con pica a la derecha", "arpón hacia abajo con lengüeta a la izquierda al lado arpón hacia arriba con pica a la derecha", "arpón hacia abajo con lengüeta a la izquierda al lado arpón hacia arriba con pica a la derecha"]);
  this.executeCharTest("⥼", ["cola de pescado izquierda", "cola de pescado izquierda", "cola de pescado izquierda"]);
  this.executeCharTest("⥽", ["cola de pescado derecha", "cola de pescado derecha", "cola de pescado derecha"]);
  this.executeCharTest("⥾", ["barra con doble gancho", "barra con doble gancho", "barra con doble gancho"]);
  this.executeCharTest("⥿", ["cola de pez abajo", "cola de pez abajo", "cola de pez abajo"]);
  this.executeCharTest("ℏ", ["h barra", "h barra", "h barra"]);
  this.executeCharTest("℔", ["L B símbolo de barra", "L B símbolo de barra", "L B símbolo de barra"]);
  this.executeCharTest("№", ["signo de número", "signo de número", "signo de número"]);
  this.executeCharTest("℗", ["derechos de autor de sonido", "derechos de autor de sonido", "derechos de autor de sonido"]);
  this.executeCharTest("℞", ["receta", "receta", "receta"]);
  this.executeCharTest("℟", ["respuesta", "respuesta", "respuesta"]);
  this.executeCharTest("℠", ["marca de servicio", "marca de servicio", "marca de servicio"]);
  this.executeCharTest("℡", ["señal de telefono", "señal de telefono", "señal de telefono"]);
  this.executeCharTest("™", ["registrado", "registrado", "registrado"]);
  this.executeCharTest("℣", ["versículo", "versículo", "versículo"]);
  this.executeCharTest("℥", ["onza", "onza", "onza"]);
  this.executeCharTest("Ω", ["ohmio", "ohmio", "ohmio"]);
  this.executeCharTest("℧", ["ohmio invertido", "ohmio invertido", "ohmio invertido"]);
  this.executeCharTest("K", ["grados kelvin", "grados kelvin", "grados kelvin"]);
  this.executeCharTest("Å", ["angstrom", "angstrom", "angstrom"]);
  this.executeCharTest("℮", ["Símbolo estimado", "Símbolo estimado", "Símbolo estimado"]);
  this.executeCharTest("Ⅎ", ["mayúscula F invertida", "mayúscula F invertida", "mayúscula F invertida"]);
  this.executeCharTest("ℹ", ["fuente de información", "fuente de información", "fuente de información"]);
  this.executeCharTest("℺", ["capital rotado Q", "capital rotado Q", "capital rotado Q"]);
  this.executeCharTest("℻", ["signo de fax", "signo de fax", "signo de fax"]);
  this.executeCharTest("⅁", ["convertido sans serif mayúscula G", "convertido sans serif mayúscula G", "convertido sans serif mayúscula G"]);
  this.executeCharTest("⅂", ["convertido sans serif mayúscula L", "convertido sans serif mayúscula L", "convertido sans serif mayúscula L"]);
  this.executeCharTest("⅃", ["invertido sans serif mayúscula L", "invertido sans serif mayúscula L", "invertido sans serif mayúscula L"]);
  this.executeCharTest("⅄", ["convertido en sans serif mayúscula Y", "convertido en sans serif mayúscula Y", "convertido en sans serif mayúscula Y"]);
  this.executeCharTest("!", ["factorial", "factorial", "factorial"]);
  this.executeCharTest("\"", ["comillas", "comillas", "comillas"]);
  this.executeCharTest("#", ["almuhadilla", "almuhadilla", "almuhadilla"]);
  this.executeCharTest("$", ["dólar", "dólar", "dólar"]);
  this.executeCharTest("%", ["porciento", "porciento", "porciento"]);
  this.executeCharTest("&", ["ampersand", "ampersand", "ampersand"]);
  this.executeCharTest("'", ["prima", "prima", "prima"]);
  this.executeCharTest("*", ["por", "por", "por"]);
  this.executeCharTest("+", ["más", "más", "más"]);
  this.executeCharTest(",", ["coma", "coma", "coma"]);
  this.executeCharTest("-", ["menos", "menos", "menos"]);
  this.executeCharTest(".", ["punto", "punto", "punto"]);
  this.executeCharTest("/", ["barra oblicua", "barra oblicua", "barra oblicua"]);
  this.executeCharTest(":", ["dos puntos", "dos puntos", "dos puntos"]);
  this.executeCharTest(";", ["punto y coma", "punto y coma", "punto y coma"]);
  this.executeCharTest("<", ["menor que", "menor que", "menor que"]);
  this.executeCharTest("=", ["igual", "igual", "igual"]);
  this.executeCharTest(">", ["mayor que", "mayor que", "mayor que"]);
  this.executeCharTest("?", ["interrogación derecho", "interrogación derecho", "interrogación derecho"]);
  this.executeCharTest("@", ["arroba", "arroba", "arroba"]);
  this.executeCharTest("\\", ["barra inversa", "barra inversa", "barra inversa"]);
  this.executeCharTest("^", ["circunflejo", "circunflejo", "circunflejo"]);
  this.executeCharTest("_", ["subrayado", "subrayado", "subrayado"]);
  this.executeCharTest("`", ["acento grave", "acento grave", "acento grave"]);
  this.executeCharTest("|", ["barra vertical", "barra vertical", "barra vertical"]);
  this.executeCharTest("~", ["tilde", "tilde", "tilde"]);
  this.executeCharTest("¡", ["admiración izquierdo", "admiración izquierdo", "admiración izquierdo"]);
  this.executeCharTest("¢", ["centavo", "centavo", "centavo"]);
  this.executeCharTest("£", ["libra esterlina", "libra esterlina", "libra esterlina"]);
  this.executeCharTest("¤", ["moneda", "moneda", "moneda"]);
  this.executeCharTest("¥", ["yen", "yen", "yen"]);
  this.executeCharTest("¦", ["barra vertical partida", "barra vertical partida", "barra vertical partida"]);
  this.executeCharTest("§", ["sección", "sección", "sección"]);
  this.executeCharTest("¨", ["diéresis", "diéresis", "diéresis"]);
  this.executeCharTest("©", ["copyright", "copyright", "copyright"]);
  this.executeCharTest("ª", ["ordinal femenino", "ordinal femenino", "ordinal femenino"]);
  this.executeCharTest("«", ["comillas angulares izquierda", "comillas angulares izquierda", "comillas angulares izquierda"]);
  this.executeCharTest("¬", ["negación", "negación", "negación"]);
  this.executeCharTest("®", ["registrado", "registrado", "registrado"]);
  this.executeCharTest("¯", ["barra", "barra", "barra"]);
  this.executeCharTest("°", ["grado", "grado", "grado"]);
  this.executeCharTest("±", ["más menos", "más menos", "más menos"]);
  this.executeCharTest("´", ["acento agudo", "acento agudo", "acento agudo"]);
  this.executeCharTest("µ", ["micro", "micro", "micro"]);
  this.executeCharTest("¶", ["párrafo", "párrafo", "párrafo"]);
  this.executeCharTest("·", ["punto medio", "punto medio", "punto medio"]);
  this.executeCharTest("¸", ["cedilla", "cedilla", "cedilla"]);
  this.executeCharTest("º", ["ordinal masculino", "ordinal masculino", "ordinal masculino"]);
  this.executeCharTest("»", ["comillas angulares derecha", "comillas angulares derecha", "comillas angulares derecha"]);
  this.executeCharTest("¿", ["interrogación izquierdo", "interrogación izquierdo", "interrogación izquierdo"]);
  this.executeCharTest("×", ["por", "por", "por"]);
  this.executeCharTest("÷", ["dividido", "dividido", "dividido"]);
  this.executeCharTest("˘", ["breve", "breve", "breve"]);
  this.executeCharTest("˙", ["punto en superescrito", "punto en superescrito", "punto en superescrito"]);
  this.executeCharTest("˚", ["anillo en superescrito", "anillo en superescrito", "anillo en superescrito"]);
  this.executeCharTest("˛", ["ogonek", "ogonek", "ogonek"]);
  this.executeCharTest("˜", ["tilde", "tilde", "tilde"]);
  this.executeCharTest("˝", ["doble acento agudo", "doble acento agudo", "doble acento agudo"]);
  this.executeCharTest("‐", ["menos", "menos", "menos"]);
  this.executeCharTest("‑", ["guión no rompible", "guión no rompible", "guión no rompible"]);
  this.executeCharTest("‒", ["figura Dash", "figura Dash", "figura Dash"]);
  this.executeCharTest("–", ["en raya", "en raya", "en raya"]);
  this.executeCharTest("—", ["em raya", "em raya", "em raya"]);
  this.executeCharTest("―", ["barra horizontal", "barra horizontal", "barra horizontal"]);
  this.executeCharTest("‖", ["doble barra vertical", "doble barra vertical", "doble barra vertical"]);
  this.executeCharTest("‗", ["línea baja doble", "línea baja doble", "línea baja doble"]);
  this.executeCharTest("‘", ["comilla izquierda", "comilla izquierda", "comilla izquierda"]);
  this.executeCharTest("’", ["comilla derecha", "comilla derecha", "comilla derecha"]);
  this.executeCharTest("‚", ["comilla bajo 9", "comilla bajo 9", "comilla bajo 9"]);
  this.executeCharTest("‛", ["marca de comillas simple con inversión alta-9", "marca de comillas simple con inversión alta-9", "marca de comillas simple con inversión alta-9"]);
  this.executeCharTest("“", ["doble comilla", "doble comilla", "doble comilla"]);
  this.executeCharTest("”", ["doble comilla derecha", "doble comilla derecha", "doble comilla derecha"]);
  this.executeCharTest("„", ["doble comilla bajo 9", "doble comilla bajo 9", "doble comilla bajo 9"]);
  this.executeCharTest("‟", ["doble alto-invertido-9 comillas", "doble alto-invertido-9 comillas", "doble alto-invertido-9 comillas"]);
  this.executeCharTest("†", ["daga", "daga", "daga"]);
  this.executeCharTest("‡", ["doble daga", "doble daga", "doble daga"]);
  this.executeCharTest("•", ["bala", "bala", "bala"]);
  this.executeCharTest("‣", ["bala triangular", "bala triangular", "bala triangular"]);
  this.executeCharTest("․", ["líder de un punto", "líder de un punto", "líder de un punto"]);
  this.executeCharTest("‥", ["dos puntos líder", "dos puntos líder", "dos puntos líder"]);
  this.executeCharTest("…", ["puntos suspensivos", "puntos suspensivos", "puntos suspensivos"]);
  this.executeCharTest("‧", ["punto de separación", "punto de separación", "punto de separación"]);
  this.executeCharTest("‰", ["tanto por millar", "tanto por millar", "tanto por millar"]);
  this.executeCharTest("‱", ["tanto por diez mil", "tanto por diez mil", "tanto por diez mil"]);
  this.executeCharTest("′", ["prima", "prima", "prima"]);
  this.executeCharTest("″", ["segunda", "segunda", "segunda"]);
  this.executeCharTest("‴", ["tercera", "tercera", "tercera"]);
  this.executeCharTest("‵", ["acento grave", "acento grave", "acento grave"]);
  this.executeCharTest("‶", ["doble acento grave", "doble acento grave", "doble acento grave"]);
  this.executeCharTest("‷", ["prime Prime invertido", "prime Prime invertido", "prime Prime invertido"]);
  this.executeCharTest("‸", ["signo de intercalación", "signo de intercalación", "signo de intercalación"]);
  this.executeCharTest("‹", ["comillas izquierda", "comillas izquierda", "comillas izquierda"]);
  this.executeCharTest("›", ["comillas derecha", "comillas derecha", "comillas derecha"]);
  this.executeCharTest("※", ["marca de referencia", "marca de referencia", "marca de referencia"]);
  this.executeCharTest("‼", ["doble signo de exclamación", "doble signo de exclamación", "doble signo de exclamación"]);
  this.executeCharTest("‽", ["interrobang", "interrobang", "interrobang"]);
  this.executeCharTest("‾", ["barra superior", "barra superior", "barra superior"]);
  this.executeCharTest("‿", ["undertie", "undertie", "undertie"]);
  this.executeCharTest("⁀", ["ligadura", "ligadura", "ligadura"]);
  this.executeCharTest("⁁", ["punto de inserción", "punto de inserción", "punto de inserción"]);
  this.executeCharTest("⁂", ["asterismo", "asterismo", "asterismo"]);
  this.executeCharTest("⁃", ["guión bala", "guión bala", "guión bala"]);
  this.executeCharTest("⁄", ["barra de fracción", "barra de fracción", "barra de fracción"]);
  this.executeCharTest("⁇", ["doble signo de interrogación", "doble signo de interrogación", "doble signo de interrogación"]);
  this.executeCharTest("⁈", ["pregunta Signo de exclamación", "pregunta Signo de exclamación", "pregunta Signo de exclamación"]);
  this.executeCharTest("⁉", ["signo de interrogación de exclamación", "signo de interrogación de exclamación", "signo de interrogación de exclamación"]);
  this.executeCharTest("⁋", ["signo de Pilcrow invertido", "signo de Pilcrow invertido", "signo de Pilcrow invertido"]);
  this.executeCharTest("⁌", ["bala negra hacia la izquierda", "bala negra hacia la izquierda", "bala negra hacia la izquierda"]);
  this.executeCharTest("⁍", ["bala negra hacia la derecha", "bala negra hacia la derecha", "bala negra hacia la derecha"]);
  this.executeCharTest("⁎", ["bajo asterisco", "bajo asterisco", "bajo asterisco"]);
  this.executeCharTest("⁏", ["punto y coma invertido", "punto y coma invertido", "punto y coma invertido"]);
  this.executeCharTest("⁐", ["cierre superior", "cierre superior", "cierre superior"]);
  this.executeCharTest("⁑", ["dos asteriscos alineados verticalmente", "dos asteriscos alineados verticalmente", "dos asteriscos alineados verticalmente"]);
  this.executeCharTest("⁒", ["signo de menos comercial", "signo de menos comercial", "signo de menos comercial"]);
  this.executeCharTest("⁓", ["swung Dash", "swung Dash", "swung Dash"]);
  this.executeCharTest("⁔", ["ropa interior invertida", "ropa interior invertida", "ropa interior invertida"]);
  this.executeCharTest("⁕", ["signo de puntuación de la flor", "signo de puntuación de la flor", "signo de puntuación de la flor"]);
  this.executeCharTest("⁖", ["puntuación de tres puntos", "puntuación de tres puntos", "puntuación de tres puntos"]);
  this.executeCharTest("⁗", ["cuarta", "cuarta", "cuarta"]);
  this.executeCharTest("⁘", ["puntuación de cuatro puntos", "puntuación de cuatro puntos", "puntuación de cuatro puntos"]);
  this.executeCharTest("⁙", ["puntuación de cinco puntos", "puntuación de cinco puntos", "puntuación de cinco puntos"]);
  this.executeCharTest("⁚", ["puntuación de dos puntos", "puntuación de dos puntos", "puntuación de dos puntos"]);
  this.executeCharTest("⁛", ["marca de cuatro puntos", "marca de cuatro puntos", "marca de cuatro puntos"]);
  this.executeCharTest("⁜", ["cruz punteada", "cruz punteada", "cruz punteada"]);
  this.executeCharTest("⁝", ["tricolon", "tricolon", "tricolon"]);
  this.executeCharTest("⁞", ["cuatro puntos verticales", "cuatro puntos verticales", "cuatro puntos verticales"]);
  this.executeCharTest("⁺", ["superscript Plus Sign", "superscript Plus Sign", "superscript Plus Sign"]);
  this.executeCharTest("⁻", ["superíndice menos", "superíndice menos", "superíndice menos"]);
  this.executeCharTest("⁼", ["superscript Equals Sign", "superscript Equals Sign", "superscript Equals Sign"]);
  this.executeCharTest("⁽", ["paréntesis izquierdo superíndice", "paréntesis izquierdo superíndice", "paréntesis izquierdo superíndice"]);
  this.executeCharTest("⁾", ["paréntesis derecho superíndice", "paréntesis derecho superíndice", "paréntesis derecho superíndice"]);
  this.executeCharTest("₊", ["signo de subíndice más", "signo de subíndice más", "signo de subíndice más"]);
  this.executeCharTest("₋", ["subíndice menos", "subíndice menos", "subíndice menos"]);
  this.executeCharTest("₌", ["signo de subíndice es igual", "signo de subíndice es igual", "signo de subíndice es igual"]);
  this.executeCharTest("₍", ["subíndice paréntesis izquierdo", "subíndice paréntesis izquierdo", "subíndice paréntesis izquierdo"]);
  this.executeCharTest("₎", ["subíndice de paréntesis derecho", "subíndice de paréntesis derecho", "subíndice de paréntesis derecho"]);
  this.executeCharTest("⅊", ["línea de propiedad", "línea de propiedad", "línea de propiedad"]);
  this.executeCharTest("⅋", ["ampersand convertido", "ampersand convertido", "ampersand convertido"]);
  this.executeCharTest("⅌", ["por signo", "por signo", "por signo"]);
  this.executeCharTest("⅍", ["aktieselskab", "aktieselskab", "aktieselskab"]);
  this.executeCharTest("ⅎ", ["torneado pequeño f", "torneado pequeño f", "torneado pequeño f"]);
  this.executeCharTest("∀", ["para todo", "para todo", "para todo"]);
  this.executeCharTest("∁", ["complementario", "complementario", "complementario"]);
  this.executeCharTest("∃", ["existe", "existe", "existe"]);
  this.executeCharTest("∄", ["no existe", "no existe", "no existe"]);
  this.executeCharTest("∅", ["conjunto vacío", "conjunto vacío", "conjunto vacío"]);
  this.executeCharTest("∆", ["incremento", "incremento", "incremento"]);
  this.executeCharTest("∈", ["perteneciente a", "perteneciente a", "perteneciente a"]);
  this.executeCharTest("∉", ["no perteneciente a", "no perteneciente a", "no perteneciente a"]);
  this.executeCharTest("∊", ["perteneciente a", "perteneciente a", "perteneciente a"]);
  this.executeCharTest("∋", ["comprende a", "comprende a", "comprende a"]);
  this.executeCharTest("∌", ["no comprende a", "no comprende a", "no comprende a"]);
  this.executeCharTest("∍", ["comprende a", "comprende a", "comprende a"]);
  this.executeCharTest("∎", ["fin de demostración", "fin de demostración", "fin de demostración"]);
  this.executeCharTest("∏", ["producto", "producto", "producto"]);
  this.executeCharTest("∐", ["coproducto", "coproducto", "coproducto"]);
  this.executeCharTest("∑", ["sumatorio", "sumatorio", "sumatorio"]);
  this.executeCharTest("−", ["menos", "menos", "menos"]);
  this.executeCharTest("∓", ["menos más", "menos más", "menos más"]);
  this.executeCharTest("∔", ["punto más", "punto más", "punto más"]);
  this.executeCharTest("∕", ["barra de división", "barra de división", "barra de división"]);
  this.executeCharTest("∖", ["menos", "menos", "menos"]);
  this.executeCharTest("∗", ["asterisco", "asterisco", "asterisco"]);
  this.executeCharTest("∘", ["composición", "composición", "composición"]);
  this.executeCharTest("∙", ["bala", "bala", "bala"]);
  this.executeCharTest("√", ["raíz", "raíz", "raíz"]);
  this.executeCharTest("∛", ["raíz cúbica", "raíz cúbica", "raíz cúbica"]);
  this.executeCharTest("∜", ["raíz cuarta", "raíz cuarta", "raíz cuarta"]);
  this.executeCharTest("∝", ["proporcional a", "proporcional a", "proporcional a"]);
  this.executeCharTest("∞", ["infinito", "infinito", "infinito"]);
  this.executeCharTest("∟", ["ángulo recto", "ángulo recto", "ángulo recto"]);
  this.executeCharTest("∠", ["ángulo", "ángulo", "ángulo"]);
  this.executeCharTest("∡", ["ángulo medido", "ángulo medido", "ángulo medido"]);
  this.executeCharTest("∢", ["ángulo esférico", "ángulo esférico", "ángulo esférico"]);
  this.executeCharTest("∣", ["divide a", "divide a", "divide a"]);
  this.executeCharTest("∤", ["no divide a", "no divide a", "no divide a"]);
  this.executeCharTest("∥", ["paralela a", "paralela a", "paralela a"]);
  this.executeCharTest("∦", ["no paralela a", "no paralela a", "no paralela a"]);
  this.executeCharTest("∧", ["y", "y", "y"]);
  this.executeCharTest("∨", ["o", "o", "o"]);
  this.executeCharTest("∩", ["intersección", "intersección", "intersección"]);
  this.executeCharTest("∪", ["unión", "unión", "unión"]);
  this.executeCharTest("∫", ["integral", "integral", "integral"]);
  this.executeCharTest("∬", ["integral doble", "integral doble", "integral doble"]);
  this.executeCharTest("∭", ["integral triple", "integral triple", "integral triple"]);
  this.executeCharTest("∮", ["integral de contorno", "integral de contorno", "integral de contorno"]);
  this.executeCharTest("∯", ["integral de superficie", "integral de superficie", "integral de superficie"]);
  this.executeCharTest("∰", ["integral de volumen", "integral de volumen", "integral de volumen"]);
  this.executeCharTest("∱", ["integral de contorno en sentido horario", "integral de contorno en sentido horario", "integral de contorno en sentido horario"]);
  this.executeCharTest("∲", ["integral de contorno en sentido horario", "integral de contorno en sentido horario", "integral de contorno en sentido horario"]);
  this.executeCharTest("∳", ["integral de contorno en sentido antihorario", "integral de contorno en sentido antihorario", "integral de contorno en sentido antihorario"]);
  this.executeCharTest("∴", ["por lo tanto", "por lo tanto", "por lo tanto"]);
  this.executeCharTest("∵", ["porque", "porque", "porque"]);
  this.executeCharTest("∶", ["razón", "razón", "razón"]);
  this.executeCharTest("∷", ["proporción", "proporción", "proporción"]);
  this.executeCharTest("∸", ["punto menos", "punto menos", "punto menos"]);
  this.executeCharTest("∹", ["exceso", "exceso", "exceso"]);
  this.executeCharTest("∺", ["proporción geométrica", "proporción geométrica", "proporción geométrica"]);
  this.executeCharTest("∻", ["homotecia", "homotecia", "homotecia"]);
  this.executeCharTest("∼", ["tilde", "tilde", "tilde"]);
  this.executeCharTest("∽", ["tilde invertido", "tilde invertido", "tilde invertido"]);
  this.executeCharTest("∾", ["s horizontal invertida", "s horizontal invertida", "s horizontal invertida"]);
  this.executeCharTest("∿", ["sinusoide", "sinusoide", "sinusoide"]);
  this.executeCharTest("≀", ["producto de guirnalda", "producto de guirnalda", "producto de guirnalda"]);
  this.executeCharTest("≁", ["no tilde", "no tilde", "no tilde"]);
  this.executeCharTest("≂", ["menos tilde", "menos tilde", "menos tilde"]);
  this.executeCharTest("≃", ["asintóticamente igual a", "asintóticamente igual a", "asintóticamente igual a"]);
  this.executeCharTest("≄", ["no asintóticamente igual a", "no asintóticamente igual a", "no asintóticamente igual a"]);
  this.executeCharTest("≅", ["aproximadamente igual a", "aproximadamente igual a", "aproximadamente igual a"]);
  this.executeCharTest("≆", ["aproximado pero no igual a", "aproximado pero no igual a", "aproximado pero no igual a"]);
  this.executeCharTest("≇", ["no aproximado a", "no aproximado a", "no aproximado a"]);
  this.executeCharTest("≈", ["aproximado", "aproximado", "aproximado"]);
  this.executeCharTest("≉", ["no es casi igual a", "no es casi igual a", "no es casi igual a"]);
  this.executeCharTest("≊", ["igual o casi igual a", "igual o casi igual a", "igual o casi igual a"]);
  this.executeCharTest("≋", ["triple tilde", "triple tilde", "triple tilde"]);
  this.executeCharTest("≌", ["todo igual a", "todo igual a", "todo igual a"]);
  this.executeCharTest("≍", ["equivalente a", "equivalente a", "equivalente a"]);
  this.executeCharTest("≎", ["geométricamente equivalente a", "geométricamente equivalente a", "geométricamente equivalente a"]);
  this.executeCharTest("≏", ["diferencia entre", "diferencia entre", "diferencia entre"]);
  this.executeCharTest("≐", ["se acerca al límite", "se acerca al límite", "se acerca al límite"]);
  this.executeCharTest("≑", ["geométricamente igual a", "geométricamente igual a", "geométricamente igual a"]);
  this.executeCharTest("≒", ["aproximadamente igual a o imagen de", "aproximadamente igual a o imagen de", "aproximadamente igual a o imagen de"]);
  this.executeCharTest("≓", ["imagen de o aproximadamente igual a", "imagen de o aproximadamente igual a", "imagen de o aproximadamente igual a"]);
  this.executeCharTest("≔", ["dos puntos igual", "dos puntos igual", "dos puntos igual"]);
  this.executeCharTest("≕", ["igual dos puntos", "igual dos puntos", "igual dos puntos"]);
  this.executeCharTest("≖", ["igual incluyendo anillo", "igual incluyendo anillo", "igual incluyendo anillo"]);
  this.executeCharTest("≗", ["igual anillo a", "igual anillo a", "igual anillo a"]);
  this.executeCharTest("≘", ["corresponde a", "corresponde a", "corresponde a"]);
  this.executeCharTest("≙", ["estima a", "estima a", "estima a"]);
  this.executeCharTest("≚", ["equiangular con", "equiangular con", "equiangular con"]);
  this.executeCharTest("≛", ["igual con estrella", "igual con estrella", "igual con estrella"]);
  this.executeCharTest("≜", ["igual con delta", "igual con delta", "igual con delta"]);
  this.executeCharTest("≝", ["igual por definición a", "igual por definición a", "igual por definición a"]);
  this.executeCharTest("≞", ["medido por", "medido por", "medido por"]);
  this.executeCharTest("≟", ["igual con interrogante", "igual con interrogante", "igual con interrogante"]);
  this.executeCharTest("≠", ["no es igual a", "no es igual a", "no es igual a"]);
  this.executeCharTest("≡", ["idéntico a", "idéntico a", "idéntico a"]);
  this.executeCharTest("≢", ["no es idéntico a", "no es idéntico a", "no es idéntico a"]);
  this.executeCharTest("≣", ["estrictamente equivalente a", "estrictamente equivalente a", "estrictamente equivalente a"]);
  this.executeCharTest("≤", ["menor o igual que", "menor o igual que", "menor o igual que"]);
  this.executeCharTest("≥", ["mayor o igual que", "mayor o igual que", "mayor o igual que"]);
  this.executeCharTest("≦", ["menor o igual que", "menor o igual que", "menor o igual que"]);
  this.executeCharTest("≧", ["mayor o igual que", "mayor o igual que", "mayor o igual que"]);
  this.executeCharTest("≨", ["estrictamente menor que", "estrictamente menor que", "estrictamente menor que"]);
  this.executeCharTest("≩", ["estrictamente mayor que", "estrictamente mayor que", "estrictamente mayor que"]);
  this.executeCharTest("≪", ["mucho menor que", "mucho menor que", "mucho menor que"]);
  this.executeCharTest("≫", ["mucho mayor que", "mucho mayor que", "mucho mayor que"]);
  this.executeCharTest("≬", ["entre", "entre", "entre"]);
  this.executeCharTest("≭", ["no equivalente a", "no equivalente a", "no equivalente a"]);
  this.executeCharTest("≮", ["no menor que", "no menor que", "no menor que"]);
  this.executeCharTest("≯", ["no mayor que", "no mayor que", "no mayor que"]);
  this.executeCharTest("≰", ["no menor ni igual a", "no menor ni igual a", "no menor ni igual a"]);
  this.executeCharTest("≱", ["no mayor ni igual a", "no mayor ni igual a", "no mayor ni igual a"]);
  this.executeCharTest("≲", ["menor o equivalente a", "menor o equivalente a", "menor o equivalente a"]);
  this.executeCharTest("≳", ["mayor o equivalente a", "mayor o equivalente a", "mayor o equivalente a"]);
  this.executeCharTest("≴", ["no menor ni equivalente a", "no menor ni equivalente a", "no menor ni equivalente a"]);
  this.executeCharTest("≵", ["no mayor ni equivalente a", "no mayor ni equivalente a", "no mayor ni equivalente a"]);
  this.executeCharTest("≶", ["menor o mayor que", "menor o mayor que", "menor o mayor que"]);
  this.executeCharTest("≷", ["mayor o menor que", "mayor o menor que", "mayor o menor que"]);
  this.executeCharTest("≸", ["no menor ni mayor que", "no menor ni mayor que", "no menor ni mayor que"]);
  this.executeCharTest("≹", ["no mayor ni menor que", "no mayor ni menor que", "no mayor ni menor que"]);
  this.executeCharTest("≺", ["precede a", "precede a", "precede a"]);
  this.executeCharTest("≻", ["sigue a", "sigue a", "sigue a"]);
  this.executeCharTest("≼", ["precede o es igual a", "precede o es igual a", "precede o es igual a"]);
  this.executeCharTest("≽", ["sigue o es igual a", "sigue o es igual a", "sigue o es igual a"]);
  this.executeCharTest("≾", ["precede o es equivalente a", "precede o es equivalente a", "precede o es equivalente a"]);
  this.executeCharTest("≿", ["sigue o es equivalente a", "sigue o es equivalente a", "sigue o es equivalente a"]);
  this.executeCharTest("⊀", ["no precede a", "no precede a", "no precede a"]);
  this.executeCharTest("⊁", ["no sigue a", "no sigue a", "no sigue a"]);
  this.executeCharTest("⊂", ["incluido en", "incluido en", "incluido en"]);
  this.executeCharTest("⊃", ["contiene a", "contiene a", "contiene a"]);
  this.executeCharTest("⊄", ["no incluido en", "no incluido en", "no incluido en"]);
  this.executeCharTest("⊅", ["no contiene a", "no contiene a", "no contiene a"]);
  this.executeCharTest("⊆", ["incluido o igual a", "incluido o igual a", "incluido o igual a"]);
  this.executeCharTest("⊇", ["contiene o es igual a", "contiene o es igual a", "contiene o es igual a"]);
  this.executeCharTest("⊈", ["no incluido ni igual a", "no incluido ni igual a", "no incluido ni igual a"]);
  this.executeCharTest("⊉", ["no contiene ni es igual a", "no contiene ni es igual a", "no contiene ni es igual a"]);
  this.executeCharTest("⊊", ["incluido estrictamente en", "incluido estrictamente en", "incluido estrictamente en"]);
  this.executeCharTest("⊋", ["contiene estrictamente a", "contiene estrictamente a", "contiene estrictamente a"]);
  this.executeCharTest("⊌", ["familia de conjuntos", "familia de conjuntos", "familia de conjuntos"]);
  this.executeCharTest("⊍", ["producto de familia de conjuntos", "producto de familia de conjuntos", "producto de familia de conjuntos"]);
  this.executeCharTest("⊎", ["unión de familia de conjuntos", "unión de familia de conjuntos", "unión de familia de conjuntos"]);
  this.executeCharTest("⊏", ["imagen cuadrada de", "imagen cuadrada de", "imagen cuadrada de"]);
  this.executeCharTest("⊐", ["original cuadrado de", "original cuadrado de", "original cuadrado de"]);
  this.executeCharTest("⊑", ["imagen cuadrada de o igual a", "imagen cuadrada de o igual a", "imagen cuadrada de o igual a"]);
  this.executeCharTest("⊒", ["original cuadrado de o igual a", "original cuadrado de o igual a", "original cuadrado de o igual a"]);
  this.executeCharTest("⊓", ["intersección cuadrada", "intersección cuadrada", "intersección cuadrada"]);
  this.executeCharTest("⊔", ["unión cuadrada", "unión cuadrada", "unión cuadrada"]);
  this.executeCharTest("⊕", ["más en círculo", "más en círculo", "más en círculo"]);
  this.executeCharTest("⊖", ["menos en círculo", "menos en círculo", "menos en círculo"]);
  this.executeCharTest("⊗", ["por en círculo", "por en círculo", "por en círculo"]);
  this.executeCharTest("⊘", ["barra en círculo", "barra en círculo", "barra en círculo"]);
  this.executeCharTest("⊙", ["punto en círculo", "punto en círculo", "punto en círculo"]);
  this.executeCharTest("⊚", ["anillo en círculo", "anillo en círculo", "anillo en círculo"]);
  this.executeCharTest("⊛", ["asterisco en círculo", "asterisco en círculo", "asterisco en círculo"]);
  this.executeCharTest("⊜", ["igual en círculo", "igual en círculo", "igual en círculo"]);
  this.executeCharTest("⊝", ["menos en círculo", "menos en círculo", "menos en círculo"]);
  this.executeCharTest("⊞", ["más en cuadrado", "más en cuadrado", "más en cuadrado"]);
  this.executeCharTest("⊟", ["menos en cuadrado", "menos en cuadrado", "menos en cuadrado"]);
  this.executeCharTest("⊠", ["veces en cuadrado", "veces en cuadrado", "veces en cuadrado"]);
  this.executeCharTest("⊡", ["punto en cuadrado", "punto en cuadrado", "punto en cuadrado"]);
  this.executeCharTest("⊢", ["t horizontal hacia la izquierda", "t horizontal hacia la izquierda", "t horizontal hacia la izquierda"]);
  this.executeCharTest("⊣", ["t horizontal hacia la derecha", "t horizontal hacia la derecha", "t horizontal hacia la derecha"]);
  this.executeCharTest("⊤", ["perpendicular", "perpendicular", "perpendicular"]);
  this.executeCharTest("⊥", ["perpendicular invertida", "perpendicular invertida", "perpendicular invertida"]);
  this.executeCharTest("⊦", ["afirmación", "afirmación", "afirmación"]);
  this.executeCharTest("⊧", ["modela", "modela", "modela"]);
  this.executeCharTest("⊨", ["verdadero", "verdadero", "verdadero"]);
  this.executeCharTest("⊩", ["obliga", "obliga", "obliga"]);
  this.executeCharTest("⊪", ["triple barra vertical torniquete derecho", "triple barra vertical torniquete derecho", "triple barra vertical torniquete derecho"]);
  this.executeCharTest("⊫", ["doble barra vertical doble torniquete derecho", "doble barra vertical doble torniquete derecho", "doble barra vertical doble torniquete derecho"]);
  this.executeCharTest("⊬", ["no prueba", "no prueba", "no prueba"]);
  this.executeCharTest("⊭", ["falso", "falso", "falso"]);
  this.executeCharTest("⊮", ["no obliga", "no obliga", "no obliga"]);
  this.executeCharTest("⊯", ["doble barra vertical doble torniquete derecho negada", "doble barra vertical doble torniquete derecho negada", "doble barra vertical doble torniquete derecho negada"]);
  this.executeCharTest("⊰", ["precede respecto de", "precede respecto de", "precede respecto de"]);
  this.executeCharTest("⊱", ["sigue respecto de", "sigue respecto de", "sigue respecto de"]);
  this.executeCharTest("⊲", ["subgrupo normal de", "subgrupo normal de", "subgrupo normal de"]);
  this.executeCharTest("⊳", ["contiene como subgrupo normal a", "contiene como subgrupo normal a", "contiene como subgrupo normal a"]);
  this.executeCharTest("⊴", ["subgrupo normal o es igual a", "subgrupo normal o es igual a", "subgrupo normal o es igual a"]);
  this.executeCharTest("⊵", ["contiene como subgrupo normal o es igual a", "contiene como subgrupo normal o es igual a", "contiene como subgrupo normal o es igual a"]);
  this.executeCharTest("⊶", ["original de", "original de", "original de"]);
  this.executeCharTest("⊷", ["imagen de", "imagen de", "imagen de"]);
  this.executeCharTest("⊸", ["multifunción", "multifunción", "multifunción"]);
  this.executeCharTest("⊹", ["matriz hermitiana conjugada", "matriz hermitiana conjugada", "matriz hermitiana conjugada"]);
  this.executeCharTest("⊺", ["interpola", "interpola", "interpola"]);
  this.executeCharTest("⊻", ["o excluyente", "o excluyente", "o excluyente"]);
  this.executeCharTest("⊼", ["no y", "no y", "no y"]);
  this.executeCharTest("⊽", ["no o", "no o", "no o"]);
  this.executeCharTest("⊿", ["triángulo rectángulo", "triángulo rectángulo", "triángulo rectángulo"]);
  this.executeCharTest("⋀", ["y", "y", "y"]);
  this.executeCharTest("⋁", ["o", "o", "o"]);
  this.executeCharTest("⋂", ["intersección", "intersección", "intersección"]);
  this.executeCharTest("⋃", ["unión", "unión", "unión"]);
  this.executeCharTest("⋄", ["operador diamante", "operador diamante", "operador diamante"]);
  this.executeCharTest("⋅", ["punto", "punto", "punto"]);
  this.executeCharTest("⋆", ["estrella", "estrella", "estrella"]);
  this.executeCharTest("⋇", ["dividido por", "dividido por", "dividido por"]);
  this.executeCharTest("⋈", ["moño", "moño", "moño"]);
  this.executeCharTest("⋉", ["factor normal izquierdo producto semidirecto", "factor normal izquierdo producto semidirecto", "factor normal izquierdo producto semidirecto"]);
  this.executeCharTest("⋊", ["factor normal derecho producto semidirecto", "factor normal derecho producto semidirecto", "factor normal derecho producto semidirecto"]);
  this.executeCharTest("⋋", ["producto semidirecto izquierdo", "producto semidirecto izquierdo", "producto semidirecto izquierdo"]);
  this.executeCharTest("⋌", ["producto semidirecto derecho", "producto semidirecto derecho", "producto semidirecto derecho"]);
  this.executeCharTest("⋍", ["tilde invertida igual a", "tilde invertida igual a", "tilde invertida igual a"]);
  this.executeCharTest("⋎", ["o rizada", "o rizada", "o rizada"]);
  this.executeCharTest("⋏", ["y rizada", "y rizada", "y rizada"]);
  this.executeCharTest("⋐", ["doble incluido", "doble incluido", "doble incluido"]);
  this.executeCharTest("⋑", ["doble contiene", "doble contiene", "doble contiene"]);
  this.executeCharTest("⋒", ["doble intersección", "doble intersección", "doble intersección"]);
  this.executeCharTest("⋓", ["doble unión", "doble unión", "doble unión"]);
  this.executeCharTest("⋔", ["bieldo", "bieldo", "bieldo"]);
  this.executeCharTest("⋕", ["paralela o igual a", "paralela o igual a", "paralela o igual a"]);
  this.executeCharTest("⋖", ["menor que con punto", "menor que con punto", "menor que con punto"]);
  this.executeCharTest("⋗", ["mayor que con punto", "mayor que con punto", "mayor que con punto"]);
  this.executeCharTest("⋘", ["mucho menor que", "mucho menor que", "mucho menor que"]);
  this.executeCharTest("⋙", ["mucho mayor que", "mucho mayor que", "mucho mayor que"]);
  this.executeCharTest("⋚", ["menor igual o mayor que", "menor igual o mayor que", "menor igual o mayor que"]);
  this.executeCharTest("⋛", ["mayor igual o menor que", "mayor igual o menor que", "mayor igual o menor que"]);
  this.executeCharTest("⋜", ["menor o igual que", "menor o igual que", "menor o igual que"]);
  this.executeCharTest("⋝", ["mayor o igual que", "mayor o igual que", "mayor o igual que"]);
  this.executeCharTest("⋞", ["precede o es igual a", "precede o es igual a", "precede o es igual a"]);
  this.executeCharTest("⋟", ["sigue o es igual a", "sigue o es igual a", "sigue o es igual a"]);
  this.executeCharTest("⋠", ["no precede ni es igual a", "no precede ni es igual a", "no precede ni es igual a"]);
  this.executeCharTest("⋡", ["no sigue ni es igual a", "no sigue ni es igual a", "no sigue ni es igual a"]);
  this.executeCharTest("⋢", ["no es imagen cuadrada ni igual a", "no es imagen cuadrada ni igual a", "no es imagen cuadrada ni igual a"]);
  this.executeCharTest("⋣", ["no es original cuadrada ni igual a", "no es original cuadrada ni igual a", "no es original cuadrada ni igual a"]);
  this.executeCharTest("⋤", ["imagen cuadrada estricta", "imagen cuadrada estricta", "imagen cuadrada estricta"]);
  this.executeCharTest("⋥", ["original cuadrada estricta", "original cuadrada estricta", "original cuadrada estricta"]);
  this.executeCharTest("⋦", ["menor que no equivalente a", "menor que no equivalente a", "menor que no equivalente a"]);
  this.executeCharTest("⋧", ["mayor que no equivalente a", "mayor que no equivalente a", "mayor que no equivalente a"]);
  this.executeCharTest("⋨", ["precede no equivalente a", "precede no equivalente a", "precede no equivalente a"]);
  this.executeCharTest("⋩", ["sigue no equivalente a", "sigue no equivalente a", "sigue no equivalente a"]);
  this.executeCharTest("⋪", ["no subgrupo normal de", "no subgrupo normal de", "no subgrupo normal de"]);
  this.executeCharTest("⋫", ["no contiene como subgrupo normal a", "no contiene como subgrupo normal a", "no contiene como subgrupo normal a"]);
  this.executeCharTest("⋬", ["no es subgrupo normal ni igual a", "no es subgrupo normal ni igual a", "no es subgrupo normal ni igual a"]);
  this.executeCharTest("⋭", ["no contiene como subgrupo normal ni es igual a", "no contiene como subgrupo normal ni es igual a", "no contiene como subgrupo normal ni es igual a"]);
  this.executeCharTest("⋮", ["puntos suspensivos verticales", "puntos suspensivos verticales", "puntos suspensivos verticales"]);
  this.executeCharTest("⋯", ["puntos suspensivos altos", "puntos suspensivos altos", "puntos suspensivos altos"]);
  this.executeCharTest("⋰", ["puntos suspensivos diagonales subiendo", "puntos suspensivos diagonales subiendo", "puntos suspensivos diagonales subiendo"]);
  this.executeCharTest("⋱", ["puntos suspensivos diagonales bajando", "puntos suspensivos diagonales bajando", "puntos suspensivos diagonales bajando"]);
  this.executeCharTest("⋲", ["pertenece con trazo horizontal", "pertenece con trazo horizontal", "pertenece con trazo horizontal"]);
  this.executeCharTest("⋳", ["pertenece con barra vertical al fin de raya horizontal", "pertenece con barra vertical al fin de raya horizontal", "pertenece con barra vertical al fin de raya horizontal"]);
  this.executeCharTest("⋴", ["pertenece en pequeño con trazo vertical", "pertenece en pequeño con trazo vertical", "pertenece en pequeño con trazo vertical"]);
  this.executeCharTest("⋵", ["pertenece con punto arriba", "pertenece con punto arriba", "pertenece con punto arriba"]);
  this.executeCharTest("⋶", ["pertenece con barra arriba", "pertenece con barra arriba", "pertenece con barra arriba"]);
  this.executeCharTest("⋷", ["perteneciente subrayado", "perteneciente subrayado", "perteneciente subrayado"]);
  this.executeCharTest("⋸", ["perteneciente subrayado", "perteneciente subrayado", "perteneciente subrayado"]);
  this.executeCharTest("⋹", ["pertenece con dos trazos horizontales", "pertenece con dos trazos horizontales", "pertenece con dos trazos horizontales"]);
  this.executeCharTest("⋺", ["contiene o es igual a", "contiene o es igual a", "contiene o es igual a"]);
  this.executeCharTest("⋻", ["contiene con marca", "contiene con marca", "contiene con marca"]);
  this.executeCharTest("⋼", ["contiene con marca", "contiene con marca", "contiene con marca"]);
  this.executeCharTest("⋽", ["contiene con barra", "contiene con barra", "contiene con barra"]);
  this.executeCharTest("⋾", ["perteneciente con barra", "perteneciente con barra", "perteneciente con barra"]);
  this.executeCharTest("⋿", ["z anotación asociación de bolsa", "z anotación asociación de bolsa", "z anotación asociación de bolsa"]);
  this.executeCharTest("⌀", ["diámetro", "diámetro", "diámetro"]);
  this.executeCharTest("⌂", ["casa", "casa", "casa"]);
  this.executeCharTest("⌅", ["en proyectividad con", "en proyectividad con", "en proyectividad con"]);
  this.executeCharTest("⌆", ["en perspectividad con", "en perspectividad con", "en perspectividad con"]);
  this.executeCharTest("⌇", ["línea ondulada", "línea ondulada", "línea ondulada"]);
  this.executeCharTest("⌐", ["no invertido", "no invertido", "no invertido"]);
  this.executeCharTest("⌑", ["pastillas cuadradas", "pastillas cuadradas", "pastillas cuadradas"]);
  this.executeCharTest("⌒", ["arco", "arco", "arco"]);
  this.executeCharTest("⌓", ["segmento", "segmento", "segmento"]);
  this.executeCharTest("⌔", ["sector", "sector", "sector"]);
  this.executeCharTest("➕", ["signo más pesado", "signo más pesado", "signo más pesado"]);
  this.executeCharTest("➖", ["signo menos pesado", "signo menos pesado", "signo menos pesado"]);
  this.executeCharTest("➗", ["signo de la división pesada", "signo de la división pesada", "signo de la división pesada"]);
  this.executeCharTest("➰", ["bucle rizado", "bucle rizado", "bucle rizado"]);
  this.executeCharTest("➿", ["doble bucle rizado", "doble bucle rizado", "doble bucle rizado"]);
  this.executeCharTest("⟁", ["triángulo encerrando triángulo", "triángulo encerrando triángulo", "triángulo encerrando triángulo"]);
  this.executeCharTest("⟂", ["perpendicular", "perpendicular", "perpendicular"]);
  this.executeCharTest("⟃", ["incluido en", "incluido en", "incluido en"]);
  this.executeCharTest("⟄", ["contiene a", "contiene a", "contiene a"]);
  this.executeCharTest("⟇", ["punto en círculo", "punto en círculo", "punto en círculo"]);
  this.executeCharTest("⟈", ["atrás tajo antes de subconjunto", "atrás tajo antes de subconjunto", "atrás tajo antes de subconjunto"]);
  this.executeCharTest("⟉", ["sobreconjunto antes de tajo", "sobreconjunto antes de tajo", "sobreconjunto antes de tajo"]);
  this.executeCharTest("⟊", ["barra vertical con golpe horizontal", "barra vertical con golpe horizontal", "barra vertical con golpe horizontal"]);
  this.executeCharTest("⟋", ["diagonal matemático de levantamiento", "diagonal matemático de levantamiento", "diagonal matemático de levantamiento"]);
  this.executeCharTest("⟌", ["división larga", "división larga", "división larga"]);
  this.executeCharTest("⟍", ["diagonal descendente matemática", "diagonal descendente matemática", "diagonal descendente matemática"]);
  this.executeCharTest("⟎", ["cuadrado Lógico Y", "cuadrado Lógico Y", "cuadrado Lógico Y"]);
  this.executeCharTest("⟏", ["cuadrado Lógico O", "cuadrado Lógico O", "cuadrado Lógico O"]);
  this.executeCharTest("⟐", ["diamante blanco con punto centrado", "diamante blanco con punto centrado", "diamante blanco con punto centrado"]);
  this.executeCharTest("⟑", ["y con punto interior", "y con punto interior", "y con punto interior"]);
  this.executeCharTest("⟒", ["elemento de apertura hacia arriba", "elemento de apertura hacia arriba", "elemento de apertura hacia arriba"]);
  this.executeCharTest("⟓", ["ángulo inferior derecho con punto", "ángulo inferior derecho con punto", "ángulo inferior derecho con punto"]);
  this.executeCharTest("⟔", ["ángulo inferior izquierdo con punto", "ángulo inferior izquierdo con punto", "ángulo inferior izquierdo con punto"]);
  this.executeCharTest("⟕", ["izquierdo exterior une", "izquierdo exterior une", "izquierdo exterior une"]);
  this.executeCharTest("⟖", ["derecho exterior une", "derecho exterior une", "derecho exterior une"]);
  this.executeCharTest("⟗", ["lleno exterior une", "lleno exterior une", "lleno exterior une"]);
  this.executeCharTest("⟘", ["perpendicular inversa", "perpendicular inversa", "perpendicular inversa"]);
  this.executeCharTest("⟙", ["perpendicular", "perpendicular", "perpendicular"]);
  this.executeCharTest("⟚", ["izquierdo y derecho doble torniquete", "izquierdo y derecho doble torniquete", "izquierdo y derecho doble torniquete"]);
  this.executeCharTest("⟛", ["doble T horizontal", "doble T horizontal", "doble T horizontal"]);
  this.executeCharTest("⟜", ["multifunción por la izquierda", "multifunción por la izquierda", "multifunción por la izquierda"]);
  this.executeCharTest("⟝", ["t horizontal derecha larga", "t horizontal derecha larga", "t horizontal derecha larga"]);
  this.executeCharTest("⟞", ["t horizontal izquierda larga", "t horizontal izquierda larga", "t horizontal izquierda larga"]);
  this.executeCharTest("⟟", ["perpendicular inversa con círculo arriba", "perpendicular inversa con círculo arriba", "perpendicular inversa con círculo arriba"]);
  this.executeCharTest("⟠", ["pastilla dividida por regla horizontal", "pastilla dividida por regla horizontal", "pastilla dividida por regla horizontal"]);
  this.executeCharTest("⟡", ["diamante cóncavo vacío", "diamante cóncavo vacío", "diamante cóncavo vacío"]);
  this.executeCharTest("⟢", ["diamante cóncavo con tictac hacia izquierda", "diamante cóncavo con tictac hacia izquierda", "diamante cóncavo con tictac hacia izquierda"]);
  this.executeCharTest("⟣", ["diamante cóncavo con tictac hacia derecha", "diamante cóncavo con tictac hacia derecha", "diamante cóncavo con tictac hacia derecha"]);
  this.executeCharTest("⟤", ["cuadrado con tictac hacia izquierda", "cuadrado con tictac hacia izquierda", "cuadrado con tictac hacia izquierda"]);
  this.executeCharTest("⟥", ["cuadrado con tictac hacia derecha", "cuadrado con tictac hacia derecha", "cuadrado con tictac hacia derecha"]);
  this.executeCharTest("⤫", ["cruce en diagonal Cruce en diagonal Caída en diagonal", "cruce en diagonal Cruce en diagonal Caída en diagonal", "cruce en diagonal Cruce en diagonal Caída en diagonal"]);
  this.executeCharTest("⤬", ["diagonal descendente Cruce diagonal ascendente", "diagonal descendente Cruce diagonal ascendente", "diagonal descendente Cruce diagonal ascendente"]);
  this.executeCharTest("⦀", ["delimitador de barra vertical triple", "delimitador de barra vertical triple", "delimitador de barra vertical triple"]);
  this.executeCharTest("⦁", ["punto de notación Z", "punto de notación Z", "punto de notación Z"]);
  this.executeCharTest("⦂", ["tipo de notación Z Colon", "tipo de notación Z Colon", "tipo de notación Z Colon"]);
  this.executeCharTest("⦙", ["valla punteada", "valla punteada", "valla punteada"]);
  this.executeCharTest("⦚", ["zigzag en vertical", "zigzag en vertical", "zigzag en vertical"]);
  this.executeCharTest("⦰", ["conjunto vacío invertido", "conjunto vacío invertido", "conjunto vacío invertido"]);
  this.executeCharTest("⦱", ["conjunto vacío con barra", "conjunto vacío con barra", "conjunto vacío con barra"]);
  this.executeCharTest("⦲", ["conjunto vacío con círculo", "conjunto vacío con círculo", "conjunto vacío con círculo"]);
  this.executeCharTest("⦵", ["círculo con barra", "círculo con barra", "círculo con barra"]);
  this.executeCharTest("⦶", ["barra en círculo", "barra en círculo", "barra en círculo"]);
  this.executeCharTest("⦷", ["paralelas en círculo", "paralelas en círculo", "paralelas en círculo"]);
  this.executeCharTest("⦸", ["círculo inverso solidus", "círculo inverso solidus", "círculo inverso solidus"]);
  this.executeCharTest("⦹", ["perpendicular en círculo", "perpendicular en círculo", "perpendicular en círculo"]);
  this.executeCharTest("⦺", ["círculo dividido por barra horizontal y mitad superior dividido por barra vertical", "círculo dividido por barra horizontal y mitad superior dividido por barra vertical", "círculo dividido por barra horizontal y mitad superior dividido por barra vertical"]);
  this.executeCharTest("⦻", ["x superimpresa en círculo", "x superimpresa en círculo", "x superimpresa en círculo"]);
  this.executeCharTest("⦼", ["circled anticlockwise rotated division", "circled anticlockwise rotated division", "circled anticlockwise rotated division"]);
  this.executeCharTest("⦾", ["bullet vacía en círculo", "bullet vacía en círculo", "bullet vacía en círculo"]);
  this.executeCharTest("⦿", ["bullet en círculo", "bullet en círculo", "bullet en círculo"]);
  this.executeCharTest("⧀", ["menor que en círculo", "menor que en círculo", "menor que en círculo"]);
  this.executeCharTest("⧁", ["mayor que en círculo", "mayor que en círculo", "mayor que en círculo"]);
  this.executeCharTest("⧂", ["círculo con círculo a la derecha", "círculo con círculo a la derecha", "círculo con círculo a la derecha"]);
  this.executeCharTest("⧃", ["circle with two horizontal strokes to the right", "circle with two horizontal strokes to the right", "circle with two horizontal strokes to the right"]);
  this.executeCharTest("⧄", ["cuadrado con diagonal ascendente", "cuadrado con diagonal ascendente", "cuadrado con diagonal ascendente"]);
  this.executeCharTest("⧅", ["cuadrado con diagonal descendente", "cuadrado con diagonal descendente", "cuadrado con diagonal descendente"]);
  this.executeCharTest("⧆", ["asterisco cuadrado", "asterisco cuadrado", "asterisco cuadrado"]);
  this.executeCharTest("⧇", ["pequeño círculo cuadrado", "pequeño círculo cuadrado", "pequeño círculo cuadrado"]);
  this.executeCharTest("⧈", ["cuadrado cuadrado", "cuadrado cuadrado", "cuadrado cuadrado"]);
  this.executeCharTest("⧉", ["dos cuadrados unidos", "dos cuadrados unidos", "dos cuadrados unidos"]);
  this.executeCharTest("⧊", ["triángulo con punto arriba", "triángulo con punto arriba", "triángulo con punto arriba"]);
  this.executeCharTest("⧋", ["triángulo con barra inferior", "triángulo con barra inferior", "triángulo con barra inferior"]);
  this.executeCharTest("⧌", ["s en triangulo", "s en triangulo", "s en triangulo"]);
  this.executeCharTest("⧍", ["triangle with serifs at bottom", "triangle with serifs at bottom", "triangle with serifs at bottom"]);
  this.executeCharTest("⧎", ["triángulo hacia la derecha sobre triángulo hacia la izquierda", "triángulo hacia la derecha sobre triángulo hacia la izquierda", "triángulo hacia la derecha sobre triángulo hacia la izquierda"]);
  this.executeCharTest("⧏", ["subgrupo normal o igual a", "subgrupo normal o igual a", "subgrupo normal o igual a"]);
  this.executeCharTest("⧐", ["contiene como subgrupo normal o es igual a", "contiene como subgrupo normal o es igual a", "contiene como subgrupo normal o es igual a"]);
  this.executeCharTest("⧑", ["pajarita Con Mitad Izquierda Negra", "pajarita Con Mitad Izquierda Negra", "pajarita Con Mitad Izquierda Negra"]);
  this.executeCharTest("⧒", ["pajarita Con Mitad Derecha Negra", "pajarita Con Mitad Derecha Negra", "pajarita Con Mitad Derecha Negra"]);
  this.executeCharTest("⧓", ["pajarita Negra", "pajarita Negra", "pajarita Negra"]);
  this.executeCharTest("⧔", ["tiempos con Mitad Izquierda Negra", "tiempos con Mitad Izquierda Negra", "tiempos con Mitad Izquierda Negra"]);
  this.executeCharTest("⧕", ["tiempos con la mitad derecha negra", "tiempos con la mitad derecha negra", "tiempos con la mitad derecha negra"]);
  this.executeCharTest("⧖", ["reloj de arena blanco", "reloj de arena blanco", "reloj de arena blanco"]);
  this.executeCharTest("⧗", ["reloj de arena negro", "reloj de arena negro", "reloj de arena negro"]);
  this.executeCharTest("⧜", ["infinito incompleto", "infinito incompleto", "infinito incompleto"]);
  this.executeCharTest("⧝", ["empate sobre el infinito", "empate sobre el infinito", "empate sobre el infinito"]);
  this.executeCharTest("⧞", ["no infinito", "no infinito", "no infinito"]);
  this.executeCharTest("⧟", ["multimapa de doble extremo", "multimapa de doble extremo", "multimapa de doble extremo"]);
  this.executeCharTest("⧠", ["cuadrado con contorno contorneado", "cuadrado con contorno contorneado", "cuadrado con contorno contorneado"]);
  this.executeCharTest("⧡", ["aumenta como", "aumenta como", "aumenta como"]);
  this.executeCharTest("⧢", ["shuffle Product", "shuffle Product", "shuffle Product"]);
  this.executeCharTest("⧣", ["igual tachado doble ", "igual tachado doble ", "igual tachado doble "]);
  this.executeCharTest("⧤", ["igual con tilde, con doble tachado", "igual con tilde, con doble tachado", "igual con tilde, con doble tachado"]);
  this.executeCharTest("⧥", ["idéntico a con doble tachado", "idéntico a con doble tachado", "idéntico a con doble tachado"]);
  this.executeCharTest("⧦", ["gleich Stark", "gleich Stark", "gleich Stark"]);
  this.executeCharTest("⧧", ["termodinamica", "termodinamica", "termodinamica"]);
  this.executeCharTest("⧨", ["triángulo que apunta hacia abajo con la mitad izquierda negra", "triángulo que apunta hacia abajo con la mitad izquierda negra", "triángulo que apunta hacia abajo con la mitad izquierda negra"]);
  this.executeCharTest("⧩", ["triángulo que apunta hacia abajo con la mitad derecha negra", "triángulo que apunta hacia abajo con la mitad derecha negra", "triángulo que apunta hacia abajo con la mitad derecha negra"]);
  this.executeCharTest("⧫", ["rombo relleno", "rombo relleno", "rombo relleno"]);
  this.executeCharTest("⧮", ["plaza blanca con error", "plaza blanca con error", "plaza blanca con error"]);
  this.executeCharTest("⧯", ["error en la Plaza Negra", "error en la Plaza Negra", "error en la Plaza Negra"]);
  this.executeCharTest("⧰", ["error White Barred Diamond", "error White Barred Diamond", "error White Barred Diamond"]);
  this.executeCharTest("⧱", ["error Black Barred Diamond", "error Black Barred Diamond", "error Black Barred Diamond"]);
  this.executeCharTest("⧲", ["círculo blanco con error", "círculo blanco con error", "círculo blanco con error"]);
  this.executeCharTest("⧳", ["círculo negro con barras de error", "círculo negro con barras de error", "círculo negro con barras de error"]);
  this.executeCharTest("⧴", ["rule delayed", "rule delayed", "rule delayed"]);
  this.executeCharTest("⧵", ["operador de Solidus Inverso", "operador de Solidus Inverso", "operador de Solidus Inverso"]);
  this.executeCharTest("⧶", ["solidus with overbar", "solidus with overbar", "solidus with overbar"]);
  this.executeCharTest("⧷", ["solidus inverso con trazo horizontal", "solidus inverso con trazo horizontal", "solidus inverso con trazo horizontal"]);
  this.executeCharTest("⧸", ["sólido grande", "sólido grande", "sólido grande"]);
  this.executeCharTest("⧹", ["sólido inverso grande", "sólido inverso grande", "sólido inverso grande"]);
  this.executeCharTest("⧺", ["doble Plus", "doble Plus", "doble Plus"]);
  this.executeCharTest("⧻", ["triple Plus", "triple Plus", "triple Plus"]);
  this.executeCharTest("⧾", ["minúsculo", "minúsculo", "minúsculo"]);
  this.executeCharTest("⧿", ["miny", "miny", "miny"]);
  this.executeCharTest("⨀", ["operador de puntos circulares N-Ary", "operador de puntos circulares N-Ary", "operador de puntos circulares N-Ary"]);
  this.executeCharTest("⨁", ["operador N-Ary Circled Plus", "operador N-Ary Circled Plus", "operador N-Ary Circled Plus"]);
  this.executeCharTest("⨂", ["operador de los tiempos en círculo de N-Ary", "operador de los tiempos en círculo de N-Ary", "operador de los tiempos en círculo de N-Ary"]);
  this.executeCharTest("⨃", ["operador de la unión N-Ary con punto", "operador de la unión N-Ary con punto", "operador de la unión N-Ary con punto"]);
  this.executeCharTest("⨄", ["n-Ary Union Operator con Plus", "n-Ary Union Operator con Plus", "n-Ary Union Operator con Plus"]);
  this.executeCharTest("⨅", ["operador de intersecciones cuadradas N-Ary", "operador de intersecciones cuadradas N-Ary", "operador de intersecciones cuadradas N-Ary"]);
  this.executeCharTest("⨆", ["n-Ary Square Union Operator", "n-Ary Square Union Operator", "n-Ary Square Union Operator"]);
  this.executeCharTest("⨇", ["dos lógico y operador", "dos lógico y operador", "dos lógico y operador"]);
  this.executeCharTest("⨈", ["dos lógico u operador", "dos lógico u operador", "dos lógico u operador"]);
  this.executeCharTest("⨉", ["operador de N-Ary Times", "operador de N-Ary Times", "operador de N-Ary Times"]);
  this.executeCharTest("⨊", ["modulo dos sumas", "modulo dos sumas", "modulo dos sumas"]);
  this.executeCharTest("⨋", ["suma con Integral", "suma con Integral", "suma con Integral"]);
  this.executeCharTest("⨌", ["operador integral cuádruple", "operador integral cuádruple", "operador integral cuádruple"]);
  this.executeCharTest("⨍", ["finite part integral", "finite part integral", "finite part integral"]);
  this.executeCharTest("⨎", ["integral con Doble Trazo", "integral con Doble Trazo", "integral con Doble Trazo"]);
  this.executeCharTest("⨏", ["promedio Integral con Slash", "promedio Integral con Slash", "promedio Integral con Slash"]);
  this.executeCharTest("⨐", ["circulation function", "circulation function", "circulation function"]);
  this.executeCharTest("⨑", ["integral en sentido antihorario", "integral en sentido antihorario", "integral en sentido antihorario"]);
  this.executeCharTest("⨒", ["integral lineal para rectángulo en polo", "integral lineal para rectángulo en polo", "integral lineal para rectángulo en polo"]);
  this.executeCharTest("⨓", ["integral lineal para semicírculo en polo", "integral lineal para semicírculo en polo", "integral lineal para semicírculo en polo"]);
  this.executeCharTest("⨔", ["integral lineal excluyendo el polo", "integral lineal excluyendo el polo", "integral lineal excluyendo el polo"]);
  this.executeCharTest("⨕", ["integral en torno de un punto operador", "integral en torno de un punto operador", "integral en torno de un punto operador"]);
  this.executeCharTest("⨖", ["operador integral para cuaterniones", "operador integral para cuaterniones", "operador integral para cuaterniones"]);
  this.executeCharTest("⨘", ["integral con Times Sign", "integral con Times Sign", "integral con Times Sign"]);
  this.executeCharTest("⨙", ["integral con Intersección", "integral con Intersección", "integral con Intersección"]);
  this.executeCharTest("⨚", ["integral con union", "integral con union", "integral con union"]);
  this.executeCharTest("⨛", ["integral con Overbar", "integral con Overbar", "integral con Overbar"]);
  this.executeCharTest("⨜", ["integral con barra inferior", "integral con barra inferior", "integral con barra inferior"]);
  this.executeCharTest("⨝", ["unirse", "unirse", "unirse"]);
  this.executeCharTest("⨞", ["operador de triángulo izquierdo grande", "operador de triángulo izquierdo grande", "operador de triángulo izquierdo grande"]);
  this.executeCharTest("⨟", ["composición de esquemas de notación Z", "composición de esquemas de notación Z", "composición de esquemas de notación Z"]);
  this.executeCharTest("⨠", ["esquema de notación Z", "esquema de notación Z", "esquema de notación Z"]);
  this.executeCharTest("⨡", ["proyección del esquema de notación Z", "proyección del esquema de notación Z", "proyección del esquema de notación Z"]);
  this.executeCharTest("⨢", ["más con círculo", "más con círculo", "más con círculo"]);
  this.executeCharTest("⨣", ["más con ángulo", "más con ángulo", "más con ángulo"]);
  this.executeCharTest("⨤", ["tilde con más suscrito", "tilde con más suscrito", "tilde con más suscrito"]);
  this.executeCharTest("⨥", ["más con punto inferior", "más con punto inferior", "más con punto inferior"]);
  this.executeCharTest("⨦", ["tilde con más", "tilde con más", "tilde con más"]);
  this.executeCharTest("⨧", ["más con 2 suscrito", "más con 2 suscrito", "más con 2 suscrito"]);
  this.executeCharTest("⨨", ["signo más con triángulo negro", "signo más con triángulo negro", "signo más con triángulo negro"]);
  this.executeCharTest("⨩", ["menos con coma", "menos con coma", "menos con coma"]);
  this.executeCharTest("⨪", ["menos con punto inferior", "menos con punto inferior", "menos con punto inferior"]);
  this.executeCharTest("⨫", ["signo menos con puntos que caen", "signo menos con puntos que caen", "signo menos con puntos que caen"]);
  this.executeCharTest("⨬", ["signo menos con puntos crecientes", "signo menos con puntos crecientes", "signo menos con puntos crecientes"]);
  this.executeCharTest("⨭", ["más en semicírculo izquierdo", "más en semicírculo izquierdo", "más en semicírculo izquierdo"]);
  this.executeCharTest("⨮", ["más en semicírculo derecho", "más en semicírculo derecho", "más en semicírculo derecho"]);
  this.executeCharTest("⨯", ["producto vectorial", "producto vectorial", "producto vectorial"]);
  this.executeCharTest("⨰", ["por con punto", "por con punto", "por con punto"]);
  this.executeCharTest("⨱", ["por con subrayado", "por con subrayado", "por con subrayado"]);
  this.executeCharTest("⨲", ["producto semidirecto con fondo cerrado", "producto semidirecto con fondo cerrado", "producto semidirecto con fondo cerrado"]);
  this.executeCharTest("⨳", ["smash product", "smash product", "smash product"]);
  this.executeCharTest("⨴", ["por en semicírculo izquierdo", "por en semicírculo izquierdo", "por en semicírculo izquierdo"]);
  this.executeCharTest("⨵", ["por en semicírculo derecho", "por en semicírculo derecho", "por en semicírculo derecho"]);
  this.executeCharTest("⨶", ["por en círculo con ángulo", "por en círculo con ángulo", "por en círculo con ángulo"]);
  this.executeCharTest("⨷", ["por en anillo", "por en anillo", "por en anillo"]);
  this.executeCharTest("⨸", ["división en círculo", "división en círculo", "división en círculo"]);
  this.executeCharTest("⨹", ["más en triángulo", "más en triángulo", "más en triángulo"]);
  this.executeCharTest("⨺", ["menos en triángulo", "menos en triángulo", "menos en triángulo"]);
  this.executeCharTest("⨻", ["por en triángulo", "por en triángulo", "por en triángulo"]);
  this.executeCharTest("⨼", ["producto interior", "producto interior", "producto interior"]);
  this.executeCharTest("⨽", ["producto interior derecho", "producto interior derecho", "producto interior derecho"]);
  this.executeCharTest("⨾", ["notación Z Composición Relacional", "notación Z Composición Relacional", "notación Z Composición Relacional"]);
  this.executeCharTest("⨿", ["coproducto", "coproducto", "coproducto"]);
  this.executeCharTest("⩀", ["intersección con punto", "intersección con punto", "intersección con punto"]);
  this.executeCharTest("⩁", ["unión con signo de menos", "unión con signo de menos", "unión con signo de menos"]);
  this.executeCharTest("⩂", ["unión con barra", "unión con barra", "unión con barra"]);
  this.executeCharTest("⩃", ["intersección con barra", "intersección con barra", "intersección con barra"]);
  this.executeCharTest("⩄", ["intersección con and", "intersección con and", "intersección con and"]);
  this.executeCharTest("⩅", ["unión con or", "unión con or", "unión con or"]);
  this.executeCharTest("⩆", ["unión sobre intersección", "unión sobre intersección", "unión sobre intersección"]);
  this.executeCharTest("⩇", ["intersección sobre unión", "intersección sobre unión", "intersección sobre unión"]);
  this.executeCharTest("⩈", ["unión sobre barra, sobre intersección", "unión sobre barra, sobre intersección", "unión sobre barra, sobre intersección"]);
  this.executeCharTest("⩉", ["intersección sobre barra, sobre unión ", "intersección sobre barra, sobre unión ", "intersección sobre barra, sobre unión "]);
  this.executeCharTest("⩊", ["unión y unión", "unión y unión", "unión y unión"]);
  this.executeCharTest("⩋", ["intersección e intersección", "intersección e intersección", "intersección e intersección"]);
  this.executeCharTest("⩌", ["unión cerrada", "unión cerrada", "unión cerrada"]);
  this.executeCharTest("⩍", ["intersección cerrada", "intersección cerrada", "intersección cerrada"]);
  this.executeCharTest("⩎", ["intersección cuadrada doble", "intersección cuadrada doble", "intersección cuadrada doble"]);
  this.executeCharTest("⩏", ["unión cuadrada doble", "unión cuadrada doble", "unión cuadrada doble"]);
  this.executeCharTest("⩐", ["unión cerrada con por", "unión cerrada con por", "unión cerrada con por"]);
  this.executeCharTest("⩑", ["lógico y con punto arriba.", "lógico y con punto arriba.", "lógico y con punto arriba."]);
  this.executeCharTest("⩒", ["lógico o con punto arriba", "lógico o con punto arriba", "lógico o con punto arriba"]);
  this.executeCharTest("⩓", ["y", "y", "y"]);
  this.executeCharTest("⩔", ["o", "o", "o"]);
  this.executeCharTest("⩕", ["two intersecting logical and", "two intersecting logical and", "two intersecting logical and"]);
  this.executeCharTest("⩖", ["two intersecting logical or", "two intersecting logical or", "two intersecting logical or"]);
  this.executeCharTest("⩗", ["sloping large or", "sloping large or", "sloping large or"]);
  this.executeCharTest("⩘", ["sloping large and", "sloping large and", "sloping large and"]);
  this.executeCharTest("⩙", ["lógica o superpuesta, lógica y", "lógica o superpuesta, lógica y", "lógica o superpuesta, lógica y"]);
  this.executeCharTest("⩚", ["logical and with middle stem", "logical and with middle stem", "logical and with middle stem"]);
  this.executeCharTest("⩛", ["logical or with middle stem", "logical or with middle stem", "logical or with middle stem"]);
  this.executeCharTest("⩜", ["logical and with horizontal dash", "logical and with horizontal dash", "logical and with horizontal dash"]);
  this.executeCharTest("⩝", ["logical or with horizontal dash", "logical or with horizontal dash", "logical or with horizontal dash"]);
  this.executeCharTest("⩞", ["lógica y con doble Overbar", "lógica y con doble Overbar", "lógica y con doble Overbar"]);
  this.executeCharTest("⩟", ["logical and with underbar", "logical and with underbar", "logical and with underbar"]);
  this.executeCharTest("⩠", ["lógica y con doble barra inferior.", "lógica y con doble barra inferior.", "lógica y con doble barra inferior."]);
  this.executeCharTest("⩡", ["pequeño Vee con Underbar", "pequeño Vee con Underbar", "pequeño Vee con Underbar"]);
  this.executeCharTest("⩢", ["lógica o con doble barra.", "lógica o con doble barra.", "lógica o con doble barra."]);
  this.executeCharTest("⩣", ["lógica o con doble barra inferior", "lógica o con doble barra inferior", "lógica o con doble barra inferior"]);
  this.executeCharTest("⩤", ["notación Z Dominio Antirestricción", "notación Z Dominio Antirestricción", "notación Z Dominio Antirestricción"]);
  this.executeCharTest("⩥", ["rango de notación Z Antirestricción", "rango de notación Z Antirestricción", "rango de notación Z Antirestricción"]);
  this.executeCharTest("⩦", ["igual con punto suscrito", "igual con punto suscrito", "igual con punto suscrito"]);
  this.executeCharTest("⩧", ["idéntico con punto arriba", "idéntico con punto arriba", "idéntico con punto arriba"]);
  this.executeCharTest("⩨", ["triple barra horizontal con doble movimiento vertical", "triple barra horizontal con doble movimiento vertical", "triple barra horizontal con doble movimiento vertical"]);
  this.executeCharTest("⩩", ["triple barra horizontal con triple movimiento vertical", "triple barra horizontal con triple movimiento vertical", "triple barra horizontal con triple movimiento vertical"]);
  this.executeCharTest("⩪", ["tilde con punto", "tilde con punto", "tilde con punto"]);
  this.executeCharTest("⩫", ["operador de tilde con puntos crecientes", "operador de tilde con puntos crecientes", "operador de tilde con puntos crecientes"]);
  this.executeCharTest("⩬", ["similares menos similares", "similares menos similares", "similares menos similares"]);
  this.executeCharTest("⩭", ["congruente con punto", "congruente con punto", "congruente con punto"]);
  this.executeCharTest("⩮", ["igual a Asterisco", "igual a Asterisco", "igual a Asterisco"]);
  this.executeCharTest("⩯", ["casi igual con ángulo", "casi igual con ángulo", "casi igual con ángulo"]);
  this.executeCharTest("⩰", ["aproximadamente igual o igual a", "aproximadamente igual o igual a", "aproximadamente igual o igual a"]);
  this.executeCharTest("⩱", ["igual con más suscrito", "igual con más suscrito", "igual con más suscrito"]);
  this.executeCharTest("⩲", ["igual con más", "igual con más", "igual con más"]);
  this.executeCharTest("⩳", ["igual con operador tilde", "igual con operador tilde", "igual con operador tilde"]);
  this.executeCharTest("⩴", ["igual con dos puntos", "igual con dos puntos", "igual con dos puntos"]);
  this.executeCharTest("⩵", ["igual doble", "igual doble", "igual doble"]);
  this.executeCharTest("⩶", ["tres signos de igualdad consecutivos", "tres signos de igualdad consecutivos", "tres signos de igualdad consecutivos"]);
  this.executeCharTest("⩷", ["igual entre cuatro puntos", "igual entre cuatro puntos", "igual entre cuatro puntos"]);
  this.executeCharTest("⩸", ["equivalente con cuatro puntos", "equivalente con cuatro puntos", "equivalente con cuatro puntos"]);
  this.executeCharTest("⩹", ["menor que con círculo interior", "menor que con círculo interior", "menor que con círculo interior"]);
  this.executeCharTest("⩺", ["mayor que con círculo interior", "mayor que con círculo interior", "mayor que con círculo interior"]);
  this.executeCharTest("⩻", ["menor que con interrogante", "menor que con interrogante", "menor que con interrogante"]);
  this.executeCharTest("⩼", ["mayor que con interrogante", "mayor que con interrogante", "mayor que con interrogante"]);
  this.executeCharTest("⩽", ["estrictamente menor que", "estrictamente menor que", "estrictamente menor que"]);
  this.executeCharTest("⩾", ["estrictamente mayor que", "estrictamente mayor que", "estrictamente mayor que"]);
  this.executeCharTest("⩿", ["estrictamente menor que con punto interior", "estrictamente menor que con punto interior", "estrictamente menor que con punto interior"]);
  this.executeCharTest("⪀", ["estrictamente mayor que con punto interior", "estrictamente mayor que con punto interior", "estrictamente mayor que con punto interior"]);
  this.executeCharTest("⪁", ["estrictamente menor que con punto", "estrictamente menor que con punto", "estrictamente menor que con punto"]);
  this.executeCharTest("⪂", ["estrictamente mayor que con punto", "estrictamente mayor que con punto", "estrictamente mayor que con punto"]);
  this.executeCharTest("⪃", ["estrictamente menor que con punto", "estrictamente menor que con punto", "estrictamente menor que con punto"]);
  this.executeCharTest("⪄", ["estrictamente mayor que con punto", "estrictamente mayor que con punto", "estrictamente mayor que con punto"]);
  this.executeCharTest("⪅", ["menor que o aproximado", "menor que o aproximado", "menor que o aproximado"]);
  this.executeCharTest("⪆", ["mayor que o aproximado", "mayor que o aproximado", "mayor que o aproximado"]);
  this.executeCharTest("⪇", ["menor que una línea no es igual a", "menor que una línea no es igual a", "menor que una línea no es igual a"]);
  this.executeCharTest("⪈", ["mayores y una sola línea no son iguales a", "mayores y una sola línea no son iguales a", "mayores y una sola línea no son iguales a"]);
  this.executeCharTest("⪉", ["menor que, pero no aproximado a", "menor que, pero no aproximado a", "menor que, pero no aproximado a"]);
  this.executeCharTest("⪊", ["mayor que, pero no aproximado a", "mayor que, pero no aproximado a", "mayor que, pero no aproximado a"]);
  this.executeCharTest("⪋", ["menos que arriba de la doble línea igual por encima de mayor que", "menos que arriba de la doble línea igual por encima de mayor que", "menos que arriba de la doble línea igual por encima de mayor que"]);
  this.executeCharTest("⪌", ["más que arriba de la línea doble igual sobre menos que", "más que arriba de la línea doble igual sobre menos que", "más que arriba de la línea doble igual sobre menos que"]);
  this.executeCharTest("⪍", ["menor, similar o igual a", "menor, similar o igual a", "menor, similar o igual a"]);
  this.executeCharTest("⪎", ["mayor, similar o igual a", "mayor, similar o igual a", "mayor, similar o igual a"]);
  this.executeCharTest("⪏", ["menor, similar o mayor que", "menor, similar o mayor que", "menor, similar o mayor que"]);
  this.executeCharTest("⪐", ["mayor, similar o menor que", "mayor, similar o menor que", "mayor, similar o menor que"]);
  this.executeCharTest("⪑", ["menor, mayor o igual a", "menor, mayor o igual a", "menor, mayor o igual a"]);
  this.executeCharTest("⪒", ["mayor, menor o igual a", "mayor, menor o igual a", "mayor, menor o igual a"]);
  this.executeCharTest("⪓", ["estrictamente menor o mayor que", "estrictamente menor o mayor que", "estrictamente menor o mayor que"]);
  this.executeCharTest("⪔", ["estrictamente mayor o menor que", "estrictamente mayor o menor que", "estrictamente mayor o menor que"]);
  this.executeCharTest("⪕", ["inclinado igual o menor que", "inclinado igual o menor que", "inclinado igual o menor que"]);
  this.executeCharTest("⪖", ["inclinado igual o mayor que", "inclinado igual o mayor que", "inclinado igual o mayor que"]);
  this.executeCharTest("⪗", ["estrictamente menor que con punto interior", "estrictamente menor que con punto interior", "estrictamente menor que con punto interior"]);
  this.executeCharTest("⪘", ["estrictamente mayor que con punto interior", "estrictamente mayor que con punto interior", "estrictamente mayor que con punto interior"]);
  this.executeCharTest("⪙", ["menor o igual a", "menor o igual a", "menor o igual a"]);
  this.executeCharTest("⪚", ["mayor o igual a", "mayor o igual a", "mayor o igual a"]);
  this.executeCharTest("⪛", ["doble línea inclinada igual o menor que", "doble línea inclinada igual o menor que", "doble línea inclinada igual o menor que"]);
  this.executeCharTest("⪜", ["doble línea inclinada igual o mayor que", "doble línea inclinada igual o mayor que", "doble línea inclinada igual o mayor que"]);
  this.executeCharTest("⪝", ["equivalente o menor que", "equivalente o menor que", "equivalente o menor que"]);
  this.executeCharTest("⪞", ["mayor o similar a", "mayor o similar a", "mayor o similar a"]);
  this.executeCharTest("⪟", ["similar, menor o igual a", "similar, menor o igual a", "similar, menor o igual a"]);
  this.executeCharTest("⪠", ["similar, mayor o igual a", "similar, mayor o igual a", "similar, mayor o igual a"]);
  this.executeCharTest("⪡", ["mucho menor que", "mucho menor que", "mucho menor que"]);
  this.executeCharTest("⪢", ["mucho mayor que", "mucho mayor que", "mucho mayor que"]);
  this.executeCharTest("⪣", ["doble anidada menor que con barra inferior", "doble anidada menor que con barra inferior", "doble anidada menor que con barra inferior"]);
  this.executeCharTest("⪤", ["menor que, mayor que", "menor que, mayor que", "menor que, mayor que"]);
  this.executeCharTest("⪥", ["mayor o menor que", "mayor o menor que", "mayor o menor que"]);
  this.executeCharTest("⪦", ["menor que cerrado con curva", "menor que cerrado con curva", "menor que cerrado con curva"]);
  this.executeCharTest("⪧", ["mayor que cerrado con curva", "mayor que cerrado con curva", "mayor que cerrado con curva"]);
  this.executeCharTest("⪨", ["estrictamente menor que cerrado con curva", "estrictamente menor que cerrado con curva", "estrictamente menor que cerrado con curva"]);
  this.executeCharTest("⪩", ["estrictamente mayor que cerrado con curva", "estrictamente mayor que cerrado con curva", "estrictamente mayor que cerrado con curva"]);
  this.executeCharTest("⪪", ["más reducido que", "más reducido que", "más reducido que"]);
  this.executeCharTest("⪫", ["más amplio que", "más amplio que", "más amplio que"]);
  this.executeCharTest("⪬", ["más reducido o igual a", "más reducido o igual a", "más reducido o igual a"]);
  this.executeCharTest("⪭", ["más amplio o igual a", "más amplio o igual a", "más amplio o igual a"]);
  this.executeCharTest("⪮", ["diferencia entre", "diferencia entre", "diferencia entre"]);
  this.executeCharTest("⪯", ["precede o es igual a", "precede o es igual a", "precede o es igual a"]);
  this.executeCharTest("⪰", ["sucede por encima de la línea de igual signo", "sucede por encima de la línea de igual signo", "sucede por encima de la línea de igual signo"]);
  this.executeCharTest("⪱", ["precede por encima de una línea no es igual a", "precede por encima de una línea no es igual a", "precede por encima de una línea no es igual a"]);
  this.executeCharTest("⪲", ["tiene éxito por encima de una línea no es igual a", "tiene éxito por encima de una línea no es igual a", "tiene éxito por encima de una línea no es igual a"]);
  this.executeCharTest("⪳", ["precede arriba del signo igual", "precede arriba del signo igual", "precede arriba del signo igual"]);
  this.executeCharTest("⪴", ["sucede por encima del signo igual", "sucede por encima del signo igual", "sucede por encima del signo igual"]);
  this.executeCharTest("⪵", ["precede estrictamente a", "precede estrictamente a", "precede estrictamente a"]);
  this.executeCharTest("⪶", ["sigue estrictamente a", "sigue estrictamente a", "sigue estrictamente a"]);
  this.executeCharTest("⪷", ["precede por encima de casi igual a", "precede por encima de casi igual a", "precede por encima de casi igual a"]);
  this.executeCharTest("⪸", ["tiene éxito por encima de casi igual a", "tiene éxito por encima de casi igual a", "tiene éxito por encima de casi igual a"]);
  this.executeCharTest("⪹", ["precede arriba no es igual a", "precede arriba no es igual a", "precede arriba no es igual a"]);
  this.executeCharTest("⪺", ["tiene éxito por encima de no casi igual a", "tiene éxito por encima de no casi igual a", "tiene éxito por encima de no casi igual a"]);
  this.executeCharTest("⪻", ["precede mucho antes", "precede mucho antes", "precede mucho antes"]);
  this.executeCharTest("⪼", ["sigue mucho después", "sigue mucho después", "sigue mucho después"]);
  this.executeCharTest("⪽", ["subrelación de", "subrelación de", "subrelación de"]);
  this.executeCharTest("⪾", ["contiene como subrelación a", "contiene como subrelación a", "contiene como subrelación a"]);
  this.executeCharTest("⪿", ["incluido con más suscrito", "incluido con más suscrito", "incluido con más suscrito"]);
  this.executeCharTest("⫀", ["contiene con más suscrito", "contiene con más suscrito", "contiene con más suscrito"]);
  this.executeCharTest("⫁", ["incluido con por suscrito", "incluido con por suscrito", "incluido con por suscrito"]);
  this.executeCharTest("⫂", ["contiene con por suscrito", "contiene con por suscrito", "contiene con por suscrito"]);
  this.executeCharTest("⫃", ["incluido con punto o es igual a", "incluido con punto o es igual a", "incluido con punto o es igual a"]);
  this.executeCharTest("⫄", ["contiene con punto o es igual a", "contiene con punto o es igual a", "contiene con punto o es igual a"]);
  this.executeCharTest("⫅", ["subconjunto de signo igual arriba", "subconjunto de signo igual arriba", "subconjunto de signo igual arriba"]);
  this.executeCharTest("⫆", ["superconjunto de signo igual arriba", "superconjunto de signo igual arriba", "superconjunto de signo igual arriba"]);
  this.executeCharTest("⫇", ["incluido aproximadamente en", "incluido aproximadamente en", "incluido aproximadamente en"]);
  this.executeCharTest("⫈", ["contiene aproximadamente a", "contiene aproximadamente a", "contiene aproximadamente a"]);
  this.executeCharTest("⫉", ["subconjunto de Arriba Casi Igual a", "subconjunto de Arriba Casi Igual a", "subconjunto de Arriba Casi Igual a"]);
  this.executeCharTest("⫊", ["superconjunto de arriba casi igual a", "superconjunto de arriba casi igual a", "superconjunto de arriba casi igual a"]);
  this.executeCharTest("⫋", ["subconjunto de lo anterior no es igual a", "subconjunto de lo anterior no es igual a", "subconjunto de lo anterior no es igual a"]);
  this.executeCharTest("⫌", ["superconjunto de arriba no es igual a", "superconjunto de arriba no es igual a", "superconjunto de arriba no es igual a"]);
  this.executeCharTest("⫍", ["operador de caja abierta a la izquierda cuadrada", "operador de caja abierta a la izquierda cuadrada", "operador de caja abierta a la izquierda cuadrada"]);
  this.executeCharTest("⫎", ["operador de caja abierta a la derecha cuadrada", "operador de caja abierta a la derecha cuadrada", "operador de caja abierta a la derecha cuadrada"]);
  this.executeCharTest("⫏", ["incluido con cierre en", "incluido con cierre en", "incluido con cierre en"]);
  this.executeCharTest("⫐", ["contiene al cierre del subconjunto", "contiene al cierre del subconjunto", "contiene al cierre del subconjunto"]);
  this.executeCharTest("⫑", ["incluido el cierre o es igual a", "incluido el cierre o es igual a", "incluido el cierre o es igual a"]);
  this.executeCharTest("⫒", ["contiene al cierre del subconjunto o es igual a", "contiene al cierre del subconjunto o es igual a", "contiene al cierre del subconjunto o es igual a"]);
  this.executeCharTest("⫓", ["está incluido o contiene a", "está incluido o contiene a", "está incluido o contiene a"]);
  this.executeCharTest("⫔", ["contiene o está incluido en", "contiene o está incluido en", "contiene o está incluido en"]);
  this.executeCharTest("⫕", ["incluido doblemente en", "incluido doblemente en", "incluido doblemente en"]);
  this.executeCharTest("⫖", ["contiene doblemente a", "contiene doblemente a", "contiene doblemente a"]);
  this.executeCharTest("⫗", ["contiene o está incluido en", "contiene o está incluido en", "contiene o está incluido en"]);
  this.executeCharTest("⫘", ["contiene o está incluido en", "contiene o está incluido en", "contiene o está incluido en"]);
  this.executeCharTest("⫙", ["perteneciente dirigido hacia abajo", "perteneciente dirigido hacia abajo", "perteneciente dirigido hacia abajo"]);
  this.executeCharTest("⫚", ["pitchfork with tee top", "pitchfork with tee top", "pitchfork with tee top"]);
  this.executeCharTest("⫛", ["transversal intersection", "transversal intersection", "transversal intersection"]);
  this.executeCharTest("⫝̸", ["bifurcación", "bifurcación", "bifurcación"]);
  this.executeCharTest("⫝", ["nonforking", "nonforking", "nonforking"]);
  this.executeCharTest("⫞", ["tachuela Izquierda Corta", "tachuela Izquierda Corta", "tachuela Izquierda Corta"]);
  this.executeCharTest("⫟", ["tachuela corta hacia abajo", "tachuela corta hacia abajo", "tachuela corta hacia abajo"]);
  this.executeCharTest("⫠", ["short Up Tack", "short Up Tack", "short Up Tack"]);
  this.executeCharTest("⫡", ["perpendicular con s", "perpendicular con s", "perpendicular con s"]);
  this.executeCharTest("⫢", ["barra vertical Torniquete a la derecha", "barra vertical Torniquete a la derecha", "barra vertical Torniquete a la derecha"]);
  this.executeCharTest("⫣", ["barra vertical doble Torniquete izquierdo", "barra vertical doble Torniquete izquierdo", "barra vertical doble Torniquete izquierdo"]);
  this.executeCharTest("⫤", ["double left turnstile vertical bar", "double left turnstile vertical bar", "double left turnstile vertical bar"]);
  this.executeCharTest("⫥", ["doble barra vertical doble torniquete izquierdo", "doble barra vertical doble torniquete izquierdo", "doble barra vertical doble torniquete izquierdo"]);
  this.executeCharTest("⫦", ["long dash from left member of double vertical", "long dash from left member of double vertical", "long dash from left member of double vertical"]);
  this.executeCharTest("⫧", ["short down tack with overbar", "short down tack with overbar", "short down tack with overbar"]);
  this.executeCharTest("⫨", ["barra con perpendicular", "barra con perpendicular", "barra con perpendicular"]);
  this.executeCharTest("⫩", ["short up tack above short down tack", "short up tack above short down tack", "short up tack above short down tack"]);
  this.executeCharTest("⫪", ["tachuela doble", "tachuela doble", "tachuela doble"]);
  this.executeCharTest("⫫", ["double up tack", "double up tack", "double up tack"]);
  this.executeCharTest("⫬", ["double stroke not sign", "double stroke not sign", "double stroke not sign"]);
  this.executeCharTest("⫭", ["reversed double stroke not sign", "reversed double stroke not sign", "reversed double stroke not sign"]);
  this.executeCharTest("⫮", ["does not divide with reversed negation slash", "does not divide with reversed negation slash", "does not divide with reversed negation slash"]);
  this.executeCharTest("⫯", ["barra vertical con círculo", "barra vertical con círculo", "barra vertical con círculo"]);
  this.executeCharTest("⫰", ["barra con círculo inferior", "barra con círculo inferior", "barra con círculo inferior"]);
  this.executeCharTest("⫱", ["down tack with circle below", "down tack with circle below", "down tack with circle below"]);
  this.executeCharTest("⫲", ["paralela con marca", "paralela con marca", "paralela con marca"]);
  this.executeCharTest("⫳", ["paralela con tilde", "paralela con tilde", "paralela con tilde"]);
  this.executeCharTest("⫴", ["relación binaria de barra vertical triple", "relación binaria de barra vertical triple", "relación binaria de barra vertical triple"]);
  this.executeCharTest("⫵", ["barra vertical triple con trazo horizontal", "barra vertical triple con trazo horizontal", "barra vertical triple con trazo horizontal"]);
  this.executeCharTest("⫶", ["operador Triple Colon", "operador Triple Colon", "operador Triple Colon"]);
  this.executeCharTest("⫷", ["triple anidada menos que", "triple anidada menos que", "triple anidada menos que"]);
  this.executeCharTest("⫸", ["triple anidado mayor que", "triple anidado mayor que", "triple anidado mayor que"]);
  this.executeCharTest("⫹", ["doble línea inclinada menor o igual a", "doble línea inclinada menor o igual a", "doble línea inclinada menor o igual a"]);
  this.executeCharTest("⫺", ["doble línea inclinada mayor o igual a", "doble línea inclinada mayor o igual a", "doble línea inclinada mayor o igual a"]);
  this.executeCharTest("⫻", ["relación Binaria Triple Sólida", "relación Binaria Triple Sólida", "relación Binaria Triple Sólida"]);
  this.executeCharTest("⫼", ["operador de barra vertical triple grande", "operador de barra vertical triple grande", "operador de barra vertical triple grande"]);
  this.executeCharTest("⫽", ["operador Doble Sólido", "operador Doble Sólido", "operador Doble Sólido"]);
  this.executeCharTest("⫾", ["barra vertical blanca", "barra vertical blanca", "barra vertical blanca"]);
  this.executeCharTest("⫿", ["barra vertical blanca N-Ary", "barra vertical blanca N-Ary", "barra vertical blanca N-Ary"]);
  this.executeCharTest("〜", ["wave Dash", "wave Dash", "wave Dash"]);
  this.executeCharTest("︐", ["formulario de presentación para coma vertical", "formulario de presentación para coma vertical", "formulario de presentación para coma vertical"]);
  this.executeCharTest("︓", ["formulario de presentación para colon vertical", "formulario de presentación para colon vertical", "formulario de presentación para colon vertical"]);
  this.executeCharTest("︔", ["formulario de presentación para punto y coma vertical", "formulario de presentación para punto y coma vertical", "formulario de presentación para punto y coma vertical"]);
  this.executeCharTest("︕", ["formulario de presentación para el signo de exclamación vertical", "formulario de presentación para el signo de exclamación vertical", "formulario de presentación para el signo de exclamación vertical"]);
  this.executeCharTest("︖", ["formulario de presentación para el signo de interrogación vertical", "formulario de presentación para el signo de interrogación vertical", "formulario de presentación para el signo de interrogación vertical"]);
  this.executeCharTest("︙", ["formulario de presentación para elipsis horizontal vertical", "formulario de presentación para elipsis horizontal vertical", "formulario de presentación para elipsis horizontal vertical"]);
  this.executeCharTest("︰", ["formulario de presentación para líder vertical de dos puntos", "formulario de presentación para líder vertical de dos puntos", "formulario de presentación para líder vertical de dos puntos"]);
  this.executeCharTest("︱", ["formulario de presentación para Vertical Em Dash", "formulario de presentación para Vertical Em Dash", "formulario de presentación para Vertical Em Dash"]);
  this.executeCharTest("︲", ["formulario de presentación para Vertical En Dash", "formulario de presentación para Vertical En Dash", "formulario de presentación para Vertical En Dash"]);
  this.executeCharTest("︳", ["formulario de presentación para línea vertical baja", "formulario de presentación para línea vertical baja", "formulario de presentación para línea vertical baja"]);
  this.executeCharTest("︴", ["formulario de presentación para línea baja ondulada vertical", "formulario de presentación para línea baja ondulada vertical", "formulario de presentación para línea baja ondulada vertical"]);
  this.executeCharTest("﹅", ["punto de sésamo", "punto de sésamo", "punto de sésamo"]);
  this.executeCharTest("﹆", ["punto de sésamo blanco", "punto de sésamo blanco", "punto de sésamo blanco"]);
  this.executeCharTest("﹉", ["línea discontinua", "línea discontinua", "línea discontinua"]);
  this.executeCharTest("﹊", ["centinela Overline", "centinela Overline", "centinela Overline"]);
  this.executeCharTest("﹋", ["ondulado Overline", "ondulado Overline", "ondulado Overline"]);
  this.executeCharTest("﹌", ["doble Ondulado Ondulado", "doble Ondulado Ondulado", "doble Ondulado Ondulado"]);
  this.executeCharTest("﹍", ["línea baja discontinua", "línea baja discontinua", "línea baja discontinua"]);
  this.executeCharTest("﹎", ["línea baja de línea central", "línea baja de línea central", "línea baja de línea central"]);
  this.executeCharTest("﹏", ["línea baja ondulada", "línea baja ondulada", "línea baja ondulada"]);
  this.executeCharTest("﹐", ["comas pequeñas", "comas pequeñas", "comas pequeñas"]);
  this.executeCharTest("﹒", ["parada completa pequeña", "parada completa pequeña", "parada completa pequeña"]);
  this.executeCharTest("﹔", ["pequeño punto y coma", "pequeño punto y coma", "pequeño punto y coma"]);
  this.executeCharTest("﹕", ["pequeño colon", "pequeño colon", "pequeño colon"]);
  this.executeCharTest("﹖", ["pequeño signo de interrogación", "pequeño signo de interrogación", "pequeño signo de interrogación"]);
  this.executeCharTest("﹗", ["pequeño signo de exclamación", "pequeño signo de exclamación", "pequeño signo de exclamación"]);
  this.executeCharTest("﹘", ["pequeño Em Dash", "pequeño Em Dash", "pequeño Em Dash"]);
  this.executeCharTest("﹟", ["signo de número pequeño", "signo de número pequeño", "signo de número pequeño"]);
  this.executeCharTest("﹠", ["ampersand pequeño", "ampersand pequeño", "ampersand pequeño"]);
  this.executeCharTest("﹡", ["pequeño asterisco", "pequeño asterisco", "pequeño asterisco"]);
  this.executeCharTest("﹢", ["signo más pequeño", "signo más pequeño", "signo más pequeño"]);
  this.executeCharTest("﹣", ["pequeño guión-menos", "pequeño guión-menos", "pequeño guión-menos"]);
  this.executeCharTest("﹤", ["signo menor que pequeño", "signo menor que pequeño", "signo menor que pequeño"]);
  this.executeCharTest("﹥", ["signo mayor que pequeño", "signo mayor que pequeño", "signo mayor que pequeño"]);
  this.executeCharTest("﹦", ["signo pequeño igual", "signo pequeño igual", "signo pequeño igual"]);
  this.executeCharTest("﹨", ["división entera", "división entera", "división entera"]);
  this.executeCharTest("﹩", ["pequeño signo de dólar", "pequeño signo de dólar", "pequeño signo de dólar"]);
  this.executeCharTest("﹪", ["signo de porcentaje pequeño", "signo de porcentaje pequeño", "signo de porcentaje pequeño"]);
  this.executeCharTest("﹫", ["pequeño comercial en", "pequeño comercial en", "pequeño comercial en"]);
  this.executeCharTest("！", ["signo de exclamación de ancho completo", "signo de exclamación de ancho completo", "signo de exclamación de ancho completo"]);
  this.executeCharTest("＂", ["comillas de ancho completo", "comillas de ancho completo", "comillas de ancho completo"]);
  this.executeCharTest("＃", ["número de signo de ancho completo", "número de signo de ancho completo", "número de signo de ancho completo"]);
  this.executeCharTest("＄", ["signo de dólar de ancho completo", "signo de dólar de ancho completo", "signo de dólar de ancho completo"]);
  this.executeCharTest("％", ["signo de porcentaje de ancho completo", "signo de porcentaje de ancho completo", "signo de porcentaje de ancho completo"]);
  this.executeCharTest("＆", ["ampersand de ancho completo", "ampersand de ancho completo", "ampersand de ancho completo"]);
  this.executeCharTest("＇", ["apóstrofe de ancho completo", "apóstrofe de ancho completo", "apóstrofe de ancho completo"]);
  this.executeCharTest("＊", ["asterisco de ancho completo", "asterisco de ancho completo", "asterisco de ancho completo"]);
  this.executeCharTest("＋", ["signo de ancho completo", "signo de ancho completo", "signo de ancho completo"]);
  this.executeCharTest("，", ["coma de ancho completo", "coma de ancho completo", "coma de ancho completo"]);
  this.executeCharTest("－", ["ancho de ancho completo", "ancho de ancho completo", "ancho de ancho completo"]);
  this.executeCharTest("．", ["fullwidth Full Stop", "fullwidth Full Stop", "fullwidth Full Stop"]);
  this.executeCharTest("／", ["sólido de ancho completo", "sólido de ancho completo", "sólido de ancho completo"]);
  this.executeCharTest("：", ["ancho completo de colon", "ancho completo de colon", "ancho completo de colon"]);
  this.executeCharTest("；", ["punto y coma de ancho completo", "punto y coma de ancho completo", "punto y coma de ancho completo"]);
  this.executeCharTest("＜", ["ancho completo menos de la señal", "ancho completo menos de la señal", "ancho completo menos de la señal"]);
  this.executeCharTest("＝", ["signo de igual ancho completo", "signo de igual ancho completo", "signo de igual ancho completo"]);
  this.executeCharTest("＞", ["ancho completo mayor que el signo", "ancho completo mayor que el signo", "ancho completo mayor que el signo"]);
  this.executeCharTest("？", ["signo de interrogación de ancho completo", "signo de interrogación de ancho completo", "signo de interrogación de ancho completo"]);
  this.executeCharTest("＠", ["comercial de ancho completo en", "comercial de ancho completo en", "comercial de ancho completo en"]);
  this.executeCharTest("＼", ["sólido inverso de ancho completo", "sólido inverso de ancho completo", "sólido inverso de ancho completo"]);
  this.executeCharTest("＾", ["acento circunflejo de ancho completo", "acento circunflejo de ancho completo", "acento circunflejo de ancho completo"]);
  this.executeCharTest("＿", ["línea baja de ancho completo", "línea baja de ancho completo", "línea baja de ancho completo"]);
  this.executeCharTest("｀", ["acento grave de ancho completo", "acento grave de ancho completo", "acento grave de ancho completo"]);
  this.executeCharTest("｜", ["barra vertical", "barra vertical", "barra vertical"]);
  this.executeCharTest("～", ["tilde de ancho completo", "tilde de ancho completo", "tilde de ancho completo"]);
  this.executeCharTest("￠", ["signo de centavo de ancho completo", "signo de centavo de ancho completo", "signo de centavo de ancho completo"]);
  this.executeCharTest("￡", ["signo de libra de ancho completo", "signo de libra de ancho completo", "signo de libra de ancho completo"]);
  this.executeCharTest("￢", ["fullwidth no firmar", "fullwidth no firmar", "fullwidth no firmar"]);
  this.executeCharTest("￣", ["ancho completo macron", "ancho completo macron", "ancho completo macron"]);
  this.executeCharTest("￤", ["barra rota de ancho completo", "barra rota de ancho completo", "barra rota de ancho completo"]);
  this.executeCharTest("￥", ["signo de yen de ancho completo", "signo de yen de ancho completo", "signo de yen de ancho completo"]);
  this.executeCharTest("￦", ["signo de ancho completo ganado", "signo de ancho completo ganado", "signo de ancho completo ganado"]);
  this.executeCharTest("￨", ["formas de ancho medio luz vertical", "formas de ancho medio luz vertical", "formas de ancho medio luz vertical"]);
  this.executeCharTest("￭", ["medio ancho cuadrado negro", "medio ancho cuadrado negro", "medio ancho cuadrado negro"]);
  this.executeCharTest("￮", ["círculo blanco de medio ancho", "círculo blanco de medio ancho", "círculo blanco de medio ancho"]);
  this.executeCharTest(" ", ["espacio", "espacio", "espacio"]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest("­", ["guión corto", "guión corto", "guión corto"]);
  this.executeCharTest(" ", ["en quad", "en quad", "en quad"]);
  this.executeCharTest(" ", ["em Quad", "em Quad", "em Quad"]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest(" ", ["espacio Six-Per-Em", "espacio Six-Per-Em", "espacio Six-Per-Em"]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest("​", ["​", "​", "​"]);
  this.executeCharTest("‌", ["ancho de cero no ensamblador", "ancho de cero no ensamblador", "ancho de cero no ensamblador"]);
  this.executeCharTest("‍", ["ancho de cero ensamblador", "ancho de cero ensamblador", "ancho de cero ensamblador"]);
  this.executeCharTest("‎", ["marca de izquierda a derecha", "marca de izquierda a derecha", "marca de izquierda a derecha"]);
  this.executeCharTest("‏", ["marca de derecha a izquierda", "marca de derecha a izquierda", "marca de derecha a izquierda"]);
  this.executeCharTest(" ", ["separador de linea", "separador de linea", "separador de linea"]);
  this.executeCharTest(" ", ["separador de párrafo", "separador de párrafo", "separador de párrafo"]);
  this.executeCharTest("‪", ["incrustación de izquierda a derecha", "incrustación de izquierda a derecha", "incrustación de izquierda a derecha"]);
  this.executeCharTest("‫", ["incrustación de derecha a izquierda", "incrustación de derecha a izquierda", "incrustación de derecha a izquierda"]);
  this.executeCharTest("‬", ["formato direccional pop", "formato direccional pop", "formato direccional pop"]);
  this.executeCharTest("‭", ["anulación de izquierda a derecha", "anulación de izquierda a derecha", "anulación de izquierda a derecha"]);
  this.executeCharTest("‮", ["anulación de derecha a izquierda", "anulación de derecha a izquierda", "anulación de derecha a izquierda"]);
  this.executeCharTest(" ", ["espacio estrecho sin descanso", "espacio estrecho sin descanso", "espacio estrecho sin descanso"]);
  this.executeCharTest(" ", [" ", " ", " "]);
  this.executeCharTest("⁠", ["⁠", "⁠", "⁠"]);
  this.executeCharTest("⁡", ["de", "de", "de"]);
  this.executeCharTest("⁢", ["por", "por", "por"]);
  this.executeCharTest("⁣", ["coma", "coma", "coma"]);
  this.executeCharTest("⁤", ["más", "más", "más"]);
  this.executeCharTest("⁪", ["inhibir el intercambio simétrico", "inhibir el intercambio simétrico", "inhibir el intercambio simétrico"]);
  this.executeCharTest("⁫", ["activar el intercambio simétrico", "activar el intercambio simétrico", "activar el intercambio simétrico"]);
  this.executeCharTest("⁮", ["formas de dígitos nacionales", "formas de dígitos nacionales", "formas de dígitos nacionales"]);
  this.executeCharTest("⁯", ["formas de dígitos nominales", "formas de dígitos nominales", "formas de dígitos nominales"]);
  this.executeCharTest("﻿", ["﻿", "﻿", "﻿"]);
  this.executeCharTest("￹", ["ancla de anotación interlinear", "ancla de anotación interlinear", "ancla de anotación interlinear"]);
  this.executeCharTest("￺", ["separador de anotación interlinear", "separador de anotación interlinear", "separador de anotación interlinear"]);
  this.executeCharTest("￻", ["terminador de anotación interlinear", "terminador de anotación interlinear", "terminador de anotación interlinear"]);
  this.executeCharTest("⏨", ["símbolo exponente decimal", "símbolo exponente decimal", "símbolo exponente decimal"]);
  this.executeCharTest("★", ["estrella rellena", "estrella rellena", "estrella rellena"]);
  this.executeCharTest("☆", ["estrella vacía", "estrella vacía", "estrella vacía"]);
  this.executeCharTest("⚪", ["círculo blanco medio", "círculo blanco medio", "círculo blanco medio"]);
  this.executeCharTest("⚫", ["círculo negro medio", "círculo negro medio", "círculo negro medio"]);
  this.executeCharTest("✅", ["marca de verificación pesada blanca", "marca de verificación pesada blanca", "marca de verificación pesada blanca"]);
  this.executeCharTest("✓", ["check mark", "check mark", "check mark"]);
  this.executeCharTest("✔", ["marca de verificación pesada", "marca de verificación pesada", "marca de verificación pesada"]);
  this.executeCharTest("✕", ["multiplicación x", "multiplicación x", "multiplicación x"]);
  this.executeCharTest("✖", ["multiplicación pesada X", "multiplicación pesada X", "multiplicación pesada X"]);
  this.executeCharTest("✗", ["ballot x", "ballot x", "ballot x"]);
  this.executeCharTest("✘", ["boleta pesada X", "boleta pesada X", "boleta pesada X"]);
  this.executeCharTest("✛", ["centro abierto de la cruz", "centro abierto de la cruz", "centro abierto de la cruz"]);
  this.executeCharTest("✜", ["pesado centro abierto cruz", "pesado centro abierto cruz", "pesado centro abierto cruz"]);
  this.executeCharTest("✠", ["cruz de Malta", "cruz de Malta", "cruz de Malta"]);
  this.executeCharTest("✡", ["estrella de David", "estrella de David", "estrella de David"]);
  this.executeCharTest("✢", ["cuatro asterisco de lágrima", "cuatro asterisco de lágrima", "cuatro asterisco de lágrima"]);
  this.executeCharTest("✣", ["cuatro asterisco de globo", "cuatro asterisco de globo", "cuatro asterisco de globo"]);
  this.executeCharTest("✤", ["pesado Cuatro asterisco impulsado por globo", "pesado Cuatro asterisco impulsado por globo", "pesado Cuatro asterisco impulsado por globo"]);
  this.executeCharTest("✥", ["cuatro asterisco de club-spoked", "cuatro asterisco de club-spoked", "cuatro asterisco de club-spoked"]);
  this.executeCharTest("✦", ["estrella de cuatro puntas negra", "estrella de cuatro puntas negra", "estrella de cuatro puntas negra"]);
  this.executeCharTest("✧", ["estrella blanca de cuatro puntas", "estrella blanca de cuatro puntas", "estrella blanca de cuatro puntas"]);
  this.executeCharTest("✨", ["destellos", "destellos", "destellos"]);
  this.executeCharTest("✩", ["estrés subrayado estrella blanca", "estrés subrayado estrella blanca", "estrés subrayado estrella blanca"]);
  this.executeCharTest("✪", ["estrella blanca circulada", "estrella blanca circulada", "estrella blanca circulada"]);
  this.executeCharTest("✫", ["centro Abierto Estrella Negra", "centro Abierto Estrella Negra", "centro Abierto Estrella Negra"]);
  this.executeCharTest("✬", ["centro negro estrella blanca", "centro negro estrella blanca", "centro negro estrella blanca"]);
  this.executeCharTest("✭", ["contorneado negro estrella", "contorneado negro estrella", "contorneado negro estrella"]);
  this.executeCharTest("✮", ["estrella negra contorneada pesada", "estrella negra contorneada pesada", "estrella negra contorneada pesada"]);
  this.executeCharTest("✯", ["pinwheel Star", "pinwheel Star", "pinwheel Star"]);
  this.executeCharTest("✰", ["estrella blanca sombreada", "estrella blanca sombreada", "estrella blanca sombreada"]);
  this.executeCharTest("✱", ["asterisco pesado", "asterisco pesado", "asterisco pesado"]);
  this.executeCharTest("✲", ["centro abierto de asterisco", "centro abierto de asterisco", "centro abierto de asterisco"]);
  this.executeCharTest("✳", ["ocho asterisco hablado", "ocho asterisco hablado", "ocho asterisco hablado"]);
  this.executeCharTest("✴", ["ocho estrellas negras puntiagudas", "ocho estrellas negras puntiagudas", "ocho estrellas negras puntiagudas"]);
  this.executeCharTest("✵", ["ocho estrellas de molinete en punta", "ocho estrellas de molinete en punta", "ocho estrellas de molinete en punta"]);
  this.executeCharTest("✶", ["estrella rellena de seis puntas", "estrella rellena de seis puntas", "estrella rellena de seis puntas"]);
  this.executeCharTest("✹", ["doce estrellas negras puntiagudas", "doce estrellas negras puntiagudas", "doce estrellas negras puntiagudas"]);
  this.executeCharTest("✺", ["dieciséis asteriscos en punta", "dieciséis asteriscos en punta", "dieciséis asteriscos en punta"]);
  this.executeCharTest("✻", ["asterisco con efecto de lágrima", "asterisco con efecto de lágrima", "asterisco con efecto de lágrima"]);
  this.executeCharTest("✼", ["centro abierto con asterisco con forma de lágrima", "centro abierto con asterisco con forma de lágrima", "centro abierto con asterisco con forma de lágrima"]);
  this.executeCharTest("✽", ["heavy teardrop spoked asterisk", "heavy teardrop spoked asterisk", "heavy teardrop spoked asterisk"]);
  this.executeCharTest("✾", ["seis pétalos de florette en blanco y negro", "seis pétalos de florette en blanco y negro", "seis pétalos de florette en blanco y negro"]);
  this.executeCharTest("✿", ["florette negro", "florette negro", "florette negro"]);
  this.executeCharTest("❀", ["florette blanco", "florette blanco", "florette blanco"]);
  this.executeCharTest("❁", ["ocho Petalled Outlined Black Florette", "ocho Petalled Outlined Black Florette", "ocho Petalled Outlined Black Florette"]);
  this.executeCharTest("❂", ["círculo abierto centro ocho estrellas señaladas", "círculo abierto centro ocho estrellas señaladas", "círculo abierto centro ocho estrellas señaladas"]);
  this.executeCharTest("❃", ["asterisco pesado del molinillo de viento", "asterisco pesado del molinillo de viento", "asterisco pesado del molinillo de viento"]);
  this.executeCharTest("❄", ["copo de nieve", "copo de nieve", "copo de nieve"]);
  this.executeCharTest("❅", ["copo de nieve trifolio apretado", "copo de nieve trifolio apretado", "copo de nieve trifolio apretado"]);
  this.executeCharTest("❆", ["copo de nieve pesado de Chevron", "copo de nieve pesado de Chevron", "copo de nieve pesado de Chevron"]);
  this.executeCharTest("❇", ["brillar", "brillar", "brillar"]);
  this.executeCharTest("❈", ["chispa pesada", "chispa pesada", "chispa pesada"]);
  this.executeCharTest("❉", ["asterisco de globo", "asterisco de globo", "asterisco de globo"]);
  this.executeCharTest("❊", ["ocho asterisco de hélice con efecto de lágrima", "ocho asterisco de hélice con efecto de lágrima", "ocho asterisco de hélice con efecto de lágrima"]);
  this.executeCharTest("❋", ["heavy eight asterisk de hélice en forma de lágrima", "heavy eight asterisk de hélice en forma de lágrima", "heavy eight asterisk de hélice en forma de lágrima"]);
  this.executeCharTest("❌", ["marca de la cruz", "marca de la cruz", "marca de la cruz"]);
  this.executeCharTest("❍", ["círculo blanco sombreado", "círculo blanco sombreado", "círculo blanco sombreado"]);
  this.executeCharTest("¼", ["un cuarto", "un cuarto", "un cuarto"]);
  this.executeCharTest("½", ["un medio", "un medio", "un medio"]);
  this.executeCharTest("¾", ["tres cuartos", "tres cuartos", "tres cuartos"]);
  this.executeCharTest("⅐", ["Vulgar Fracción Un Séptimo", "Vulgar Fracción Un Séptimo", "Vulgar Fracción Un Séptimo"]);
  this.executeCharTest("⅑", ["Vulgar Fracción Un Noveno", "Vulgar Fracción Un Noveno", "Vulgar Fracción Un Noveno"]);
  this.executeCharTest("⅒", ["Vulgar Fracción Un Décimo", "Vulgar Fracción Un Décimo", "Vulgar Fracción Un Décimo"]);
  this.executeCharTest("⅓", ["Vulgar Fracción Un Tercero", "Vulgar Fracción Un Tercero", "Vulgar Fracción Un Tercero"]);
  this.executeCharTest("⅔", ["Fracción vulgar dos tercios", "Fracción vulgar dos tercios", "Fracción vulgar dos tercios"]);
  this.executeCharTest("⅕", ["Vulgar Fraction One Fifth", "Vulgar Fraction One Fifth", "Vulgar Fraction One Fifth"]);
  this.executeCharTest("⅖", ["Fracción vulgar dos quintos", "Fracción vulgar dos quintos", "Fracción vulgar dos quintos"]);
  this.executeCharTest("⅗", ["Fracción vulgar tres quintos", "Fracción vulgar tres quintos", "Fracción vulgar tres quintos"]);
  this.executeCharTest("⅘", ["Fracción vulgar cuatro quintos", "Fracción vulgar cuatro quintos", "Fracción vulgar cuatro quintos"]);
  this.executeCharTest("⅙", ["Vulgar Fracción Un Sexto", "Vulgar Fracción Un Sexto", "Vulgar Fracción Un Sexto"]);
  this.executeCharTest("⅚", ["Vulgar fracción cinco sextos", "Vulgar fracción cinco sextos", "Vulgar fracción cinco sextos"]);
  this.executeCharTest("⅛", ["Vulgar Fracción Un Octavo", "Vulgar Fracción Un Octavo", "Vulgar Fracción Un Octavo"]);
  this.executeCharTest("⅜", ["Fracción vulgar tres octavos", "Fracción vulgar tres octavos", "Fracción vulgar tres octavos"]);
  this.executeCharTest("⅝", ["Fracción vulgar cinco octavos", "Fracción vulgar cinco octavos", "Fracción vulgar cinco octavos"]);
  this.executeCharTest("⅞", ["Fracción vulgar siete octavos", "Fracción vulgar siete octavos", "Fracción vulgar siete octavos"]);
  this.executeCharTest("⅟", ["Numerador de fracciones uno", "Numerador de fracciones uno", "Numerador de fracciones uno"]);
  this.executeCharTest("↉", ["Vulgar Fraction Zero Thirds", "Vulgar Fraction Zero Thirds", "Vulgar Fraction Zero Thirds"]);
  this.executeCharTest("㉈", ["Número diez en un círculo en la Plaza Negra", "Número diez en un círculo en la Plaza Negra", "Número diez en un círculo en la Plaza Negra"]);
  this.executeCharTest("㉉", ["Número veinte en un círculo en la Plaza Negra", "Número veinte en un círculo en la Plaza Negra", "Número veinte en un círculo en la Plaza Negra"]);
  this.executeCharTest("㉊", ["Número circundado treinta en cuadrado negro", "Número circundado treinta en cuadrado negro", "Número circundado treinta en cuadrado negro"]);
  this.executeCharTest("㉋", ["Número circundado Cuarenta en cuadrado negro", "Número circundado Cuarenta en cuadrado negro", "Número circundado Cuarenta en cuadrado negro"]);
  this.executeCharTest("㉌", ["Círculo número cincuenta en la plaza negra", "Círculo número cincuenta en la plaza negra", "Círculo número cincuenta en la plaza negra"]);
  this.executeCharTest("㉍", ["Círculo número sesenta en la plaza negra", "Círculo número sesenta en la plaza negra", "Círculo número sesenta en la plaza negra"]);
  this.executeCharTest("㉎", ["Número setenta en un círculo en la Plaza Negra", "Número setenta en un círculo en la Plaza Negra", "Número setenta en un círculo en la Plaza Negra"]);
  this.executeCharTest("㉏", ["Círculo número ochenta en cuadrado negro", "Círculo número ochenta en cuadrado negro", "Círculo número ochenta en cuadrado negro"]);
};


sre.MathspeakCharSpanishTest.prototype.testMathspeakFunctions = function() {
  this.executeCharTest('deg', ['grados', 'grados', 'grados']);
  this.executeCharTest('det', ['determinante', 'determinante', 'determinante']);
  this.executeCharTest('dim', ['dimensión', 'dimensión', 'dimensión']);
  this.executeCharTest('hom', ['homomorfismo', 'homomorfismo', 'homomorfismo']);
  this.executeCharTest('Hom', ['homomorfismo', 'homomorfismo', 'homomorfismo']);
  this.executeCharTest('ker', ['kernel', 'kernel', 'kernel']);
  this.executeCharTest('Tr', ['traza', 'traza', 'traza']);
  this.executeCharTest('tr', ['traza', 'traza', 'traza']);
  this.executeCharTest('log', ['logaritmo', 'logaritmo', 'logaritmo']);
  this.executeCharTest('ln', ['logaritmo neperiano', 'logaritmo neperiano', 'logaritmo neperiano']);
  this.executeCharTest('lg', ['logaritmo base 10', 'logaritmo base 10', 'logaritmo base 10']);
  this.executeCharTest('exp', ['exponente', 'exponente', 'exponente']);
  this.executeCharTest('expt', ['exponente', 'exponente', 'exponente']);
  this.executeCharTest('gcd', ['MCD', 'MCD', 'MCD']);
  this.executeCharTest('lcm', ['mcm', 'mcm', 'mcm']);
  this.executeCharTest('arg', ['argumento', 'argumento', 'argumento']);
  this.executeCharTest('im', ['parte imaginaria', 'parte imaginaria', 'parte imaginaria']);
  this.executeCharTest('re', ['residuo', 'residuo', 'residuo']);
  this.executeCharTest('inf', ['extremo inferior', 'extremo inferior', 'extremo inferior']);
  this.executeCharTest('lim', ['límite', 'límite', 'límite']);
  this.executeCharTest('lim inf', ['límite inferior', 'límite inferior', 'límite inferior']);
  this.executeCharTest('liminf', ['límite inferior', 'límite inferior', 'límite inferior']);
  this.executeCharTest('lim sup', ['límite superior', 'límite superior', 'límite superior']);
  this.executeCharTest('limsup', ['límite superior', 'límite superior', 'límite superior']);
  this.executeCharTest('max', ['máximo', 'máximo', 'máximo']);
  this.executeCharTest('min', ['mínimo', 'mínimo', 'mínimo']);
  this.executeCharTest('sup', ['superior', 'superior', 'superior']);
  this.executeCharTest('injlim', ['límite directo', 'límite directo', 'límite directo']);
  this.executeCharTest('inj lim', ['límite directo', 'límite directo', 'límite directo']);
  this.executeCharTest('projlim', ['límite inverso', 'límite inverso', 'límite inverso']);
  this.executeCharTest('proj lim', ['límite inverso', 'límite inverso', 'límite inverso']);
  this.executeCharTest('mod', ['módulo', 'módulo', 'módulo']);
  this.executeCharTest('Pr', ['probabilidad', 'probabilidad', 'probabilidad']);
  this.executeCharTest('cosh', ['coseno hiperbólico', 'coseno hiperbólico', 'coseno hiperbólico']);
  this.executeCharTest('coth', ['cotangente hiperbólica', 'cotangente hiperbólica', 'cotangente hiperbólica']);
  this.executeCharTest('csch', ['cosecante hiperbólica', 'cosecante hiperbólica', 'cosecante hiperbólica']);
  this.executeCharTest('sech', ['secante hiperbólica', 'secante hiperbólica', 'secante hiperbólica']);
  this.executeCharTest('sinh', ['seno hiperbólico', 'seno hiperbólico', 'seno hiperbólico']);
  this.executeCharTest('tanh', ['tangente hiperbólica', 'tangente hiperbólica', 'tangente hiperbólica']);
  this.executeCharTest('arcosh', ['area coseno hiperbólico', 'area coseno hiperbólico', 'area coseno hiperbólico']);
  this.executeCharTest('arccosh', ['area coseno hiperbólico', 'area coseno hiperbólico', 'area coseno hiperbólico']);
  this.executeCharTest('arcoth', ['area cotangente hiperbólica', 'area cotangente hiperbólica', 'area cotangente hiperbólica']);
  this.executeCharTest('arccoth', ['area cotangente hiperbólica', 'area cotangente hiperbólica', 'area cotangente hiperbólica']);
  this.executeCharTest('arcsch', ['area cosecante hiperbólica', 'area cosecante hiperbólica', 'area cosecante hiperbólica']);
  this.executeCharTest('arccsch', ['area cosecante hiperbólica', 'area cosecante hiperbólica', 'area cosecante hiperbólica']);
  this.executeCharTest('arsech', ['area secante hiperbólica', 'area secante hiperbólica', 'area secante hiperbólica']);
  this.executeCharTest('arcsech', ['area secante hiperbólica', 'area secante hiperbólica', 'area secante hiperbólica']);
  this.executeCharTest('arsinh', ['area seno hiperbólico', 'area seno hiperbólico', 'area seno hiperbólico']);
  this.executeCharTest('arcsinh', ['area seno hiperbólico', 'area seno hiperbólico', 'area seno hiperbólico']);
  this.executeCharTest('artanh', ['area tangente hiperbólica', 'area tangente hiperbólica', 'area tangente hiperbólica']);
  this.executeCharTest('arctanh', ['area tangente hiperbólica', 'area tangente hiperbólica', 'area tangente hiperbólica']);
  this.executeCharTest('cos', ['coseno', 'coseno', 'coseno']);
  this.executeCharTest('cosine', ['coseno', 'coseno', 'coseno']);
  this.executeCharTest('cot', ['cotangente', 'cotangente', 'cotangente']);
  this.executeCharTest('csc', ['cosecante', 'cosecante', 'cosecante']);
  this.executeCharTest('sec', ['secant', 'secant', 'secant']);
  this.executeCharTest('sin', ['seno', 'seno', 'seno']);
  this.executeCharTest('sine', ['seno', 'seno', 'seno']);
  this.executeCharTest('tan', ['tangente', 'tangente', 'tangente']);
  this.executeCharTest('arccos', ['arco coseno', 'arco coseno', 'arco coseno']);
  this.executeCharTest('arccot', ['arco cotangente', 'arco cotangente', 'arco cotangente']);
  this.executeCharTest('arccsc', ['arco cosecante', 'arco cosecante', 'arco cosecante']);
  this.executeCharTest('arcsec', ['arco secante', 'arco secante', 'arco secante']);
  this.executeCharTest('arcsin', ['arco seno', 'arco seno', 'arco seno']);
  this.executeCharTest('arctan', ['arco tangente', 'arco tangente', 'arco tangente']);
  this.executeCharTest('sen', ['seno', 'seno', 'seno']);
};


sre.MathspeakCharSpanishTest.prototype.testMathspeakUnits = function() {
  this.executeUnitTest('W', ['watt', 'watt', 'watt']);
  this.executeUnitTest('w', ['watt', 'watt', 'watt']);
  this.executeUnitTest('kw', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('kW', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('mw', ['miliwatt', 'miliwatt', 'miliwatt']);
  this.executeUnitTest('mW', ['miliwatt', 'miliwatt', 'miliwatt']);
  this.executeUnitTest('kwh', ['kilowatt hora', 'kilowatt hora', 'kilowatt hora']);
  this.executeUnitTest('kWh', ['kilowatt hora', 'kilowatt hora', 'kilowatt hora']);
  this.executeUnitTest('J', ['Joules', 'Joules', 'Joules']);
  this.executeUnitTest('N', ['Newton', 'Newton', 'Newton']);
  this.executeUnitTest('A', ['Ampere', 'Ampere', 'Ampere']);
  this.executeUnitTest('V', ['Voltio', 'Voltio', 'Voltio']);
  this.executeUnitTest('µΩ', ['microohmio', 'microohmio', 'microohmio']);
  this.executeUnitTest('mΩ', ['miliohmio', 'miliohmio', 'miliohmio']);
  this.executeUnitTest('Ω', ['ohmio', 'ohmio', 'ohmio']);
  this.executeUnitTest('Ohm', ['ohmio', 'ohmio', 'ohmio']);
  this.executeUnitTest('kΩ', ['kiloohmio', 'kiloohmio', 'kiloohmio']);
  this.executeUnitTest('KΩ', ['kiloohmio', 'kiloohmio', 'kiloohmio']);
  this.executeUnitTest('MΩ', ['megaohmio', 'megaohmio', 'megaohmio']);
  this.executeUnitTest('GΩ', ['gigaohmio', 'gigaohmio', 'gigaohmio']);
  this.executeUnitTest('mm', ['milímetro', 'milímetro', 'milímetro']);
  this.executeUnitTest('cm', ['centímetro', 'centímetro', 'centímetro']);
  this.executeUnitTest('m', ['metro', 'metro', 'metro']);
  this.executeUnitTest('km', ['kilómetro', 'kilómetro', 'kilómetro']);
  this.executeUnitTest('ft', ['pies', 'pies', 'pies']);
  this.executeUnitTest('ft.', ['pies', 'pies', 'pies']);
  this.executeUnitTest('in', ['pulgada', 'pulgada', 'pulgada']);
  this.executeUnitTest('in.', ['pulgada', 'pulgada', 'pulgada']);
  this.executeUnitTest('mi', ['milla', 'milla', 'milla']);
  this.executeUnitTest('mi.', ['milla', 'milla', 'milla']);
  this.executeUnitTest('yd', ['yarda', 'yarda', 'yarda']);
  this.executeUnitTest('yd.', ['yarda', 'yarda', 'yarda']);
  this.executeUnitTest('n.m.', ['millas náuticas', 'millas náuticas', 'millas náuticas']);
  this.executeUnitTest('b', ['bit', 'bit', 'bit']);
  this.executeUnitTest('B', ['byte', 'byte', 'byte']);
  this.executeUnitTest('KB', ['kilobyte', 'kilobyte', 'kilobyte']);
  this.executeUnitTest('MB', ['megabyte', 'megabyte', 'megabyte']);
  this.executeUnitTest('GB', ['gigabyte', 'gigabyte', 'gigabyte']);
  this.executeUnitTest('TB', ['terabyte', 'terabyte', 'terabyte']);
  this.executeUnitTest('doz', ['docena', 'docena', 'docena']);
  this.executeUnitTest('doz.', ['docena', 'docena', 'docena']);
  this.executeUnitTest('dz', ['docena', 'docena', 'docena']);
  this.executeUnitTest('dz.', ['docena', 'docena', 'docena']);
  this.executeUnitTest('sq', ['al cuadrado', 'al cuadrado', 'al cuadrado']);
  this.executeUnitTest('sq.', ['al cuadrado', 'al cuadrado', 'al cuadrado']);
  this.executeUnitTest('ha', ['hectarea', 'hectarea', 'hectarea']);
  this.executeUnitTest('kt', ['nudo', 'nudo', 'nudo']);
  this.executeUnitTest('kt.', ['nudo', 'nudo', 'nudo']);
  this.executeUnitTest('mph', ['millas por hora', 'millas por hora', 'millas por hora']);
  this.executeUnitTest('rpm', ['revoluciones por minuto', 'revoluciones por minuto', 'revoluciones por minuto']);
  this.executeUnitTest('kmh', ['kilómetros por hora', 'kilómetros por hora', 'kilómetros por hora']);
  this.executeUnitTest('F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('F.', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('°F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('C', ['centígrados', 'centígrados', 'centígrados']);
  this.executeUnitTest('°C', ['centígrados', 'centígrados', 'centígrados']);
  this.executeUnitTest('K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('°K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('ns', ['nanosegundos', 'nanosegundos', 'nanosegundos']);
  this.executeUnitTest('µs', ['microsegundos', 'microsegundos', 'microsegundos']);
  this.executeUnitTest('ms', ['milisegundos', 'milisegundos', 'milisegundos']);
  this.executeUnitTest('s', ['segundos', 'segundos', 'segundos']);
  this.executeUnitTest('min', ['minutos', 'minutos', 'minutos']);
  this.executeUnitTest('h', ['hora', 'hora', 'hora']);
  this.executeUnitTest('hr', ['hora', 'hora', 'hora']);
  this.executeUnitTest('bbl.', ['barrile', 'barrile', 'barrile']);
  this.executeUnitTest('bbl', ['barrile', 'barrile', 'barrile']);
  this.executeUnitTest('cu', ['cúbico', 'cúbico', 'cúbico']);
  this.executeUnitTest('cu.', ['cúbico', 'cúbico', 'cúbico']);
  this.executeUnitTest('fl. oz.', ['onzas líquidas', 'onzas líquidas', 'onzas líquidas']);
  this.executeUnitTest('gal', ['galone', 'galone', 'galone']);
  this.executeUnitTest('gal.', ['galone', 'galone', 'galone']);
  this.executeUnitTest('pt', ['pinta', 'pinta', 'pinta']);
  this.executeUnitTest('pt.', ['pinta', 'pinta', 'pinta']);
  this.executeUnitTest('qt', ['quart', 'quart', 'quart']);
  this.executeUnitTest('qt.', ['quart', 'quart', 'quart']);
  this.executeUnitTest('tbsp', ['cuchara', 'cuchara', 'cuchara']);
  this.executeUnitTest('tbsp.', ['cuchara', 'cuchara', 'cuchara']);
  this.executeUnitTest('tsp', ['cucharilla', 'cucharilla', 'cucharilla']);
  this.executeUnitTest('tsp.', ['cucharilla', 'cucharilla', 'cucharilla']);
  this.executeUnitTest('cc', ['centímetros cúbicos', 'centímetros cúbicos', 'centímetros cúbicos']);
  this.executeUnitTest('kl', ['kilolitro', 'kilolitro', 'kilolitro']);
  this.executeUnitTest('l', ['litro', 'litro', 'litro']);
  this.executeUnitTest('ml', ['mililitro', 'mililitro', 'mililitro']);
  this.executeUnitTest('lb', ['libra', 'libra', 'libra']);
  this.executeUnitTest('lb.', ['libra', 'libra', 'libra']);
  this.executeUnitTest('LT', ['libras imperiales', 'libras imperiales', 'libras imperiales']);
  this.executeUnitTest('L.T.', ['libras imperiales', 'libras imperiales', 'libras imperiales']);
  this.executeUnitTest('oz', ['onza', 'onza', 'onza']);
  this.executeUnitTest('oz.', ['onza', 'onza', 'onza']);
  this.executeUnitTest('g', ['gramo', 'gramo', 'gramo']);
  this.executeUnitTest('gr', ['gramo', 'gramo', 'gramo']);
  this.executeUnitTest('kg', ['kilogramo', 'kilogramo', 'kilogramo']);
  this.executeUnitTest('mcg', ['microgramo', 'microgramo', 'microgramo']);
  this.executeUnitTest('µg', ['microgramo', 'microgramo', 'microgramo']);
  this.executeUnitTest('mg', ['miligramo', 'miligramo', 'miligramo']);
  this.executeUnitTest('t', ['tonelada', 'tonelada', 'tonelada']);
  this.executeUnitTest('T', ['tonelada', 'tonelada', 'tonelada']);
};
