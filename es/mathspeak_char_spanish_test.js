// Copyright 2019 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract class for test cases of single characters.
 * @author Volker.Sorge@gmail.com (Volker Sorge)
 */

goog.provide('sre.MathspeakCharSpanishTest');

goog.require('sre.AbstractCharacterTest');



/**
 * @constructor
 * @extends {sre.AbstractCharacterTest}
 */
sre.MathspeakCharSpanishTest = function() {
  sre.MathspeakCharSpanishTest.base(this, 'constructor');

  this.locale = 'es';
  this.domain = 'mathspeak';
  this.semantics = true;
  
  /**
   * @type {Array.<string>}
   */
  this.styles = ['default', 'brief', 'sbrief'];

  this.setActive('MathspeakCharactersSpanish');
};
goog.inherits(sre.MathspeakCharSpanishTest, sre.AbstractCharacterTest);


sre.MathspeakCharSpanishTest.prototype.testMathspeakChars = function() {
  this.executeCharTest('0', ['0', '0', '0']);
  this.executeCharTest('1', ['1', '1', '1']);
  this.executeCharTest('2', ['2', '2', '2']);
  this.executeCharTest('3', ['3', '3', '3']);
  this.executeCharTest('4', ['4', '4', '4']);
  this.executeCharTest('5', ['5', '5', '5']);
  this.executeCharTest('6', ['6', '6', '6']);
  this.executeCharTest('7', ['7', '7', '7']);
  this.executeCharTest('8', ['8', '8', '8']);
  this.executeCharTest('9', ['9', '9', '9']);
  this.executeCharTest('Œë', ['may√∫scula Alfa', 'may√∫scula Alfa', 'may√∫scula Alfa']);
  this.executeCharTest('Œí', ['may√∫scula Beta', 'may√∫scula Beta', 'may√∫scula Beta']);
  this.executeCharTest('Œì', ['may√∫scula Gamma', 'may√∫scula Gamma', 'may√∫scula Gamma']);
  this.executeCharTest('Œî', ['may√∫scula Delta', 'may√∫scula Delta', 'may√∫scula Delta']);
  this.executeCharTest('Œï', ['may√∫scula √âpsilon', 'may√∫scula √âpsilon', 'may√∫scula √âpsilon']);
  this.executeCharTest('Œñ', ['may√∫scula Zeta', 'may√∫scula Zeta', 'may√∫scula Zeta']);
  this.executeCharTest('Œó', ['may√∫scula Eta', 'may√∫scula Eta', 'may√∫scula Eta']);
  this.executeCharTest('Œò', ['may√∫scula Theta', 'may√∫scula Theta', 'may√∫scula Theta']);
  this.executeCharTest('Œô', ['may√∫scula Iota', 'may√∫scula Iota', 'may√∫scula Iota']);
  this.executeCharTest('Œö', ['may√∫scula Kappa', 'may√∫scula Kappa', 'may√∫scula Kappa']);
  this.executeCharTest('Œõ', ['may√∫scula Lambda', 'may√∫scula Lambda', 'may√∫scula Lambda']);
  this.executeCharTest('Œú', ['may√∫scula Mi', 'may√∫scula Mi', 'may√∫scula Mi']);
  this.executeCharTest('Œù', ['may√∫scula Ni', 'may√∫scula Ni', 'may√∫scula Ni']);
  this.executeCharTest('Œû', ['may√∫scula Xi', 'may√∫scula Xi', 'may√∫scula Xi']);
  this.executeCharTest('Œü', ['may√∫scula √ìmicron', 'may√∫scula √ìmicron', 'may√∫scula √ìmicron']);
  this.executeCharTest('Œ†', ['may√∫scula Pi', 'may√∫scula Pi', 'may√∫scula Pi']);
  this.executeCharTest('Œ°', ['may√∫scula Rho', 'may√∫scula Rho', 'may√∫scula Rho']);
  this.executeCharTest('Œ£', ['may√∫scula Sigma', 'may√∫scula Sigma', 'may√∫scula Sigma']);
  this.executeCharTest('Œ§', ['may√∫scula Tau', 'may√∫scula Tau', 'may√∫scula Tau']);
  this.executeCharTest('Œ•', ['may√∫scula √çpsilon', 'may√∫scula √çpsilon', 'may√∫scula √çpsilon']);
  this.executeCharTest('Œ¶', ['may√∫scula Phi', 'may√∫scula Phi', 'may√∫scula Phi']);
  this.executeCharTest('Œß', ['may√∫scula Ji', 'may√∫scula Ji', 'may√∫scula Ji']);
  this.executeCharTest('Œ®', ['may√∫scula Psi', 'may√∫scula Psi', 'may√∫scula Psi']);
  this.executeCharTest('Œ©', ['may√∫scula Omega', 'may√∫scula Omega', 'may√∫scula Omega']);
  this.executeCharTest('Œ±', ['alfa', 'alfa', 'alfa']);
  this.executeCharTest('Œ≤', ['beta', 'beta', 'beta']);
  this.executeCharTest('Œ≥', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('Œ¥', ['delta', 'delta', 'delta']);
  this.executeCharTest('Œµ', ['√©psilon', '√©psilon', '√©psilon']);
  this.executeCharTest('Œ∂', ['zeta', 'zeta', 'zeta']);
  this.executeCharTest('Œ∑', ['eta', 'eta', 'eta']);
  this.executeCharTest('Œ∏', ['theta', 'theta', 'theta']);
  this.executeCharTest('Œπ', ['iota', 'iota', 'iota']);
  this.executeCharTest('Œ∫', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('Œª', ['lambda', 'lambda', 'lambda']);
  this.executeCharTest('Œº', ['mi', 'mi', 'mi']);
  this.executeCharTest('ŒΩ', ['ni', 'ni', 'ni']);
  this.executeCharTest('Œæ', ['xi', 'xi', 'xi']);
  this.executeCharTest('Œø', ['√≥micron', '√≥micron', '√≥micron']);
  this.executeCharTest('œÄ', ['pi', 'pi', 'pi']);
  this.executeCharTest('œÅ', ['rho', 'rho', 'rho']);
  this.executeCharTest('œÇ', ['sigma final', 'sigma final', 'sigma final']);
  this.executeCharTest('œÉ', ['sigma', 'sigma', 'sigma']);
  this.executeCharTest('œÑ', ['tau', 'tau', 'tau']);
  this.executeCharTest('œÖ', ['√≠psilon', '√≠psilon', '√≠psilon']);
  this.executeCharTest('œÜ', ['phi', 'phi', 'phi']);
  this.executeCharTest('œá', ['ji', 'ji', 'ji']);
  this.executeCharTest('œà', ['psi', 'psi', 'psi']);
  this.executeCharTest('œâ', ['omega', 'omega', 'omega']);
  this.executeCharTest('·¥¶', ['small upper Gamma', 'small upper Gamma', 'small upper Gamma']);
  this.executeCharTest('·¥ß', ['small upper Lamda', 'small upper Lamda', 'small upper Lamda']);
  this.executeCharTest('·¥®', ['small upper Pi', 'small upper Pi', 'small upper Pi']);
  this.executeCharTest('·¥©', ['small upper Rho', 'small upper Rho', 'small upper Rho']);
  this.executeCharTest('·¥™', ['small upper Psi', 'small upper Psi', 'small upper Psi']);
  this.executeCharTest('·µû', ['superscript gamma', 'superscript gamma', 'superscript gamma']);
  this.executeCharTest('·µ†', ['superscript phi', 'superscript phi', 'superscript phi']);
  this.executeCharTest('·µ¶', ['subscript beta', 'subscript beta', 'subscript beta']);
  this.executeCharTest('·µß', ['subscript gamma', 'subscript gamma', 'subscript gamma']);
  this.executeCharTest('·µ®', ['subscript rho', 'subscript rho', 'subscript rho']);
  this.executeCharTest('·µ©', ['subscript phi', 'subscript phi', 'subscript phi']);
  this.executeCharTest('·µ™', ['subscript chi', 'subscript chi', 'subscript chi']);
  this.executeCharTest('œê', ['s√≠mbolo beta', 's√≠mbolo beta', 's√≠mbolo beta']);
  this.executeCharTest('œë', ['variante de theta', 'variante de theta', 'variante de theta']);
  this.executeCharTest('œï', ['phi recta', 'phi recta', 'phi recta']);
  this.executeCharTest('œñ', ['pi', 'pi', 'pi']);
  this.executeCharTest('œó', ['s√≠mbolo kai griego', 's√≠mbolo kai griego', 's√≠mbolo kai griego']);
  this.executeCharTest('œ∞', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('œ±', ['rho', 'rho', 'rho']);
  this.executeCharTest('œµ', ['√©psilon', '√©psilon', '√©psilon']);
  this.executeCharTest('œ∂', ['√©psilon invertido', '√©psilon invertido', '√©psilon invertido']);
  this.executeCharTest('œ¥', ['may√∫scula variante de Theta', 'may√∫scula variante de Theta', 'may√∫scula variante de Theta']);
  this.executeCharTest('ùöπ', ['negrita may√∫scula variante de Theta', 'negrita may√∫scula variante de Theta', 'negrita may√∫scula variante de Theta']);
  this.executeCharTest('ùõ≥', ['cursiva may√∫scula variante de Theta', 'cursiva may√∫scula variante de Theta', 'cursiva may√∫scula variante de Theta']);
  this.executeCharTest('ùùß', ['sans-serif negrita may√∫scula variante de Theta', 'sans-serif negrita may√∫scula variante de Theta', 'sans-serif negrita may√∫scula variante de Theta']);
  this.executeCharTest('ùõÅ', ['mathematical bold nabla', 'mathematical bold nabla', 'mathematical bold nabla']);
  this.executeCharTest('ùõõ', ['bold partial differential', 'bold partial differential', 'bold partial differential']);
  this.executeCharTest('ùõú', ['bold epsilon', 'bold epsilon', 'bold epsilon']);
  this.executeCharTest('ùõù', ['bold theta', 'bold theta', 'bold theta']);
  this.executeCharTest('ùõû', ['bold kappa', 'bold kappa', 'bold kappa']);
  this.executeCharTest('ùõü', ['bold phi', 'bold phi', 'bold phi']);
  this.executeCharTest('ùõ†', ['bold rho', 'bold rho', 'bold rho']);
  this.executeCharTest('ùõ°', ['bold pi', 'bold pi', 'bold pi']);
  this.executeCharTest('ùõª', ['italic nabla', 'italic nabla', 'italic nabla']);
  this.executeCharTest('ùúï', ['italic partial differential', 'italic partial differential', 'italic partial differential']);
  this.executeCharTest('ùúñ', ['italic epsilon', 'italic epsilon', 'italic epsilon']);
  this.executeCharTest('ùúó', ['italic theta', 'italic theta', 'italic theta']);
  this.executeCharTest('ùúò', ['italic kappa', 'italic kappa', 'italic kappa']);
  this.executeCharTest('ùúô', ['italic phi', 'italic phi', 'italic phi']);
  this.executeCharTest('ùúö', ['italic rho', 'italic rho', 'italic rho']);
  this.executeCharTest('ùúõ', ['italic pi', 'italic pi', 'italic pi']);
  this.executeCharTest('ùùØ', ['sans serif bold nabla', 'sans serif bold nabla', 'sans serif bold nabla']);
  this.executeCharTest('ùûâ', ['sans serif bold partial differential', 'sans serif bold partial differential', 'sans serif bold partial differential']);
  this.executeCharTest('ùûä', ['sans serif bold epsilon', 'sans serif bold epsilon', 'sans serif bold epsilon']);
  this.executeCharTest('ùûã', ['sans serif bold theta', 'sans serif bold theta', 'sans serif bold theta']);
  this.executeCharTest('ùûå', ['sans serif bold kappa', 'sans serif bold kappa', 'sans serif bold kappa']);
  this.executeCharTest('ùûç', ['sans serif bold phi', 'sans serif bold phi', 'sans serif bold phi']);
  this.executeCharTest('ùûé', ['sans serif bold rho', 'sans serif bold rho', 'sans serif bold rho']);
  this.executeCharTest('ùûè', ['sans serif bold pi', 'sans serif bold pi', 'sans serif bold pi']);
  this.executeCharTest('ùüä', ['bold upper Digamma', 'bold upper Digamma', 'bold upper Digamma']);
  this.executeCharTest('ùüã', ['bold digamma', 'bold digamma', 'bold digamma']);
  this.executeCharTest('ùö®', ['negrita may√∫scula Alfa', 'negrita may√∫scula Alfa', 'negrita may√∫scula Alfa']);
  this.executeCharTest('ùö©', ['negrita may√∫scula Beta', 'negrita may√∫scula Beta', 'negrita may√∫scula Beta']);
  this.executeCharTest('ùö™', ['negrita may√∫scula Gamma', 'negrita may√∫scula Gamma', 'negrita may√∫scula Gamma']);
  this.executeCharTest('ùö´', ['negrita may√∫scula Delta', 'negrita may√∫scula Delta', 'negrita may√∫scula Delta']);
  this.executeCharTest('ùö¨', ['negrita may√∫scula √âpsilon', 'negrita may√∫scula √âpsilon', 'negrita may√∫scula √âpsilon']);
  this.executeCharTest('ùö≠', ['negrita may√∫scula Zeta', 'negrita may√∫scula Zeta', 'negrita may√∫scula Zeta']);
  this.executeCharTest('ùöÆ', ['negrita may√∫scula Eta', 'negrita may√∫scula Eta', 'negrita may√∫scula Eta']);
  this.executeCharTest('ùöØ', ['negrita may√∫scula Theta', 'negrita may√∫scula Theta', 'negrita may√∫scula Theta']);
  this.executeCharTest('ùö∞', ['negrita may√∫scula Iota', 'negrita may√∫scula Iota', 'negrita may√∫scula Iota']);
  this.executeCharTest('ùö±', ['negrita may√∫scula Kappa', 'negrita may√∫scula Kappa', 'negrita may√∫scula Kappa']);
  this.executeCharTest('ùö≤', ['negrita may√∫scula Lambda', 'negrita may√∫scula Lambda', 'negrita may√∫scula Lambda']);
  this.executeCharTest('ùö≥', ['negrita may√∫scula Mi', 'negrita may√∫scula Mi', 'negrita may√∫scula Mi']);
  this.executeCharTest('ùö¥', ['negrita may√∫scula Ni', 'negrita may√∫scula Ni', 'negrita may√∫scula Ni']);
  this.executeCharTest('ùöµ', ['negrita may√∫scula Xi', 'negrita may√∫scula Xi', 'negrita may√∫scula Xi']);
  this.executeCharTest('ùö∂', ['negrita may√∫scula √ìmicron', 'negrita may√∫scula √ìmicron', 'negrita may√∫scula √ìmicron']);
  this.executeCharTest('ùö∑', ['negrita may√∫scula Pi', 'negrita may√∫scula Pi', 'negrita may√∫scula Pi']);
  this.executeCharTest('ùö∏', ['negrita may√∫scula Rho', 'negrita may√∫scula Rho', 'negrita may√∫scula Rho']);
  this.executeCharTest('ùö∫', ['negrita may√∫scula Sigma', 'negrita may√∫scula Sigma', 'negrita may√∫scula Sigma']);
  this.executeCharTest('ùöª', ['negrita may√∫scula Tau', 'negrita may√∫scula Tau', 'negrita may√∫scula Tau']);
  this.executeCharTest('ùöº', ['negrita may√∫scula √çpsilon', 'negrita may√∫scula √çpsilon', 'negrita may√∫scula √çpsilon']);
  this.executeCharTest('ùöΩ', ['negrita may√∫scula Phi', 'negrita may√∫scula Phi', 'negrita may√∫scula Phi']);
  this.executeCharTest('ùöæ', ['negrita may√∫scula Ji', 'negrita may√∫scula Ji', 'negrita may√∫scula Ji']);
  this.executeCharTest('ùöø', ['negrita may√∫scula Psi', 'negrita may√∫scula Psi', 'negrita may√∫scula Psi']);
  this.executeCharTest('ùõÄ', ['negrita may√∫scula Omega', 'negrita may√∫scula Omega', 'negrita may√∫scula Omega']);
  this.executeCharTest('ùõÇ', ['negrita alfa', 'negrita alfa', 'negrita alfa']);
  this.executeCharTest('ùõÉ', ['negrita beta', 'negrita beta', 'negrita beta']);
  this.executeCharTest('ùõÑ', ['negrita gamma', 'negrita gamma', 'negrita gamma']);
  this.executeCharTest('ùõÖ', ['negrita delta', 'negrita delta', 'negrita delta']);
  this.executeCharTest('ùõÜ', ['negrita √©psilon', 'negrita √©psilon', 'negrita √©psilon']);
  this.executeCharTest('ùõá', ['negrita zeta', 'negrita zeta', 'negrita zeta']);
  this.executeCharTest('ùõà', ['negrita eta', 'negrita eta', 'negrita eta']);
  this.executeCharTest('ùõâ', ['negrita theta', 'negrita theta', 'negrita theta']);
  this.executeCharTest('ùõä', ['negrita iota', 'negrita iota', 'negrita iota']);
  this.executeCharTest('ùõã', ['negrita kappa', 'negrita kappa', 'negrita kappa']);
  this.executeCharTest('ùõå', ['negrita lambda', 'negrita lambda', 'negrita lambda']);
  this.executeCharTest('ùõç', ['negrita mi', 'negrita mi', 'negrita mi']);
  this.executeCharTest('ùõé', ['negrita ni', 'negrita ni', 'negrita ni']);
  this.executeCharTest('ùõè', ['negrita xi', 'negrita xi', 'negrita xi']);
  this.executeCharTest('ùõê', ['negrita √≥micron', 'negrita √≥micron', 'negrita √≥micron']);
  this.executeCharTest('ùõë', ['negrita pi', 'negrita pi', 'negrita pi']);
  this.executeCharTest('ùõí', ['negrita rho', 'negrita rho', 'negrita rho']);
  this.executeCharTest('ùõì', ['negrita final sigma', 'negrita final sigma', 'negrita final sigma']);
  this.executeCharTest('ùõî', ['negrita sigma', 'negrita sigma', 'negrita sigma']);
  this.executeCharTest('ùõï', ['negrita tau', 'negrita tau', 'negrita tau']);
  this.executeCharTest('ùõñ', ['negrita √≠psilon', 'negrita √≠psilon', 'negrita √≠psilon']);
  this.executeCharTest('ùõó', ['negrita phi', 'negrita phi', 'negrita phi']);
  this.executeCharTest('ùõò', ['negrita ji', 'negrita ji', 'negrita ji']);
  this.executeCharTest('ùõô', ['negrita psi', 'negrita psi', 'negrita psi']);
  this.executeCharTest('ùõö', ['negrita omega', 'negrita omega', 'negrita omega']);
  this.executeCharTest('ùõ¢', ['cursiva may√∫scula Alfa', 'cursiva may√∫scula Alfa', 'cursiva may√∫scula Alfa']);
  this.executeCharTest('ùõ£', ['cursiva may√∫scula Beta', 'cursiva may√∫scula Beta', 'cursiva may√∫scula Beta']);
  this.executeCharTest('ùõ§', ['cursiva may√∫scula Gamma', 'cursiva may√∫scula Gamma', 'cursiva may√∫scula Gamma']);
  this.executeCharTest('ùõ•', ['cursiva may√∫scula Delta', 'cursiva may√∫scula Delta', 'cursiva may√∫scula Delta']);
  this.executeCharTest('ùõ¶', ['cursiva may√∫scula √âpsilon', 'cursiva may√∫scula √âpsilon', 'cursiva may√∫scula √âpsilon']);
  this.executeCharTest('ùõß', ['cursiva may√∫scula Zeta', 'cursiva may√∫scula Zeta', 'cursiva may√∫scula Zeta']);
  this.executeCharTest('ùõ®', ['cursiva may√∫scula Eta', 'cursiva may√∫scula Eta', 'cursiva may√∫scula Eta']);
  this.executeCharTest('ùõ©', ['cursiva may√∫scula Theta', 'cursiva may√∫scula Theta', 'cursiva may√∫scula Theta']);
  this.executeCharTest('ùõ™', ['cursiva may√∫scula Iota', 'cursiva may√∫scula Iota', 'cursiva may√∫scula Iota']);
  this.executeCharTest('ùõ´', ['cursiva may√∫scula Kappa', 'cursiva may√∫scula Kappa', 'cursiva may√∫scula Kappa']);
  this.executeCharTest('ùõ¨', ['cursiva may√∫scula Lambda', 'cursiva may√∫scula Lambda', 'cursiva may√∫scula Lambda']);
  this.executeCharTest('ùõ≠', ['cursiva may√∫scula Mi', 'cursiva may√∫scula Mi', 'cursiva may√∫scula Mi']);
  this.executeCharTest('ùõÆ', ['cursiva may√∫scula Ni', 'cursiva may√∫scula Ni', 'cursiva may√∫scula Ni']);
  this.executeCharTest('ùõØ', ['cursiva may√∫scula Xi', 'cursiva may√∫scula Xi', 'cursiva may√∫scula Xi']);
  this.executeCharTest('ùõ∞', ['cursiva may√∫scula √ìmicron', 'cursiva may√∫scula √ìmicron', 'cursiva may√∫scula √ìmicron']);
  this.executeCharTest('ùõ±', ['cursiva may√∫scula Pi', 'cursiva may√∫scula Pi', 'cursiva may√∫scula Pi']);
  this.executeCharTest('ùõ≤', ['cursiva may√∫scula Rho', 'cursiva may√∫scula Rho', 'cursiva may√∫scula Rho']);
  this.executeCharTest('ùõ¥', ['cursiva may√∫scula Sigma', 'cursiva may√∫scula Sigma', 'cursiva may√∫scula Sigma']);
  this.executeCharTest('ùõµ', ['cursiva may√∫scula Tau', 'cursiva may√∫scula Tau', 'cursiva may√∫scula Tau']);
  this.executeCharTest('ùõ∂', ['cursiva may√∫scula √çpsilon', 'cursiva may√∫scula √çpsilon', 'cursiva may√∫scula √çpsilon']);
  this.executeCharTest('ùõ∑', ['cursiva may√∫scula Phi', 'cursiva may√∫scula Phi', 'cursiva may√∫scula Phi']);
  this.executeCharTest('ùõ∏', ['cursiva may√∫scula Ji', 'cursiva may√∫scula Ji', 'cursiva may√∫scula Ji']);
  this.executeCharTest('ùõπ', ['cursiva may√∫scula Psi', 'cursiva may√∫scula Psi', 'cursiva may√∫scula Psi']);
  this.executeCharTest('ùõ∫', ['cursiva may√∫scula Omega', 'cursiva may√∫scula Omega', 'cursiva may√∫scula Omega']);
  this.executeCharTest('ùõº', ['cursiva alfa', 'cursiva alfa', 'cursiva alfa']);
  this.executeCharTest('ùõΩ', ['cursiva beta', 'cursiva beta', 'cursiva beta']);
  this.executeCharTest('ùõæ', ['cursiva gamma', 'cursiva gamma', 'cursiva gamma']);
  this.executeCharTest('ùõø', ['cursiva delta', 'cursiva delta', 'cursiva delta']);
  this.executeCharTest('ùúÄ', ['cursiva √©psilon', 'cursiva √©psilon', 'cursiva √©psilon']);
  this.executeCharTest('ùúÅ', ['cursiva zeta', 'cursiva zeta', 'cursiva zeta']);
  this.executeCharTest('ùúÇ', ['cursiva eta', 'cursiva eta', 'cursiva eta']);
  this.executeCharTest('ùúÉ', ['cursiva theta', 'cursiva theta', 'cursiva theta']);
  this.executeCharTest('ùúÑ', ['cursiva iota', 'cursiva iota', 'cursiva iota']);
  this.executeCharTest('ùúÖ', ['cursiva kappa', 'cursiva kappa', 'cursiva kappa']);
  this.executeCharTest('ùúÜ', ['cursiva lambda', 'cursiva lambda', 'cursiva lambda']);
  this.executeCharTest('ùúá', ['cursiva mi', 'cursiva mi', 'cursiva mi']);
  this.executeCharTest('ùúà', ['cursiva ni', 'cursiva ni', 'cursiva ni']);
  this.executeCharTest('ùúâ', ['cursiva xi', 'cursiva xi', 'cursiva xi']);
  this.executeCharTest('ùúä', ['cursiva √≥micron', 'cursiva √≥micron', 'cursiva √≥micron']);
  this.executeCharTest('ùúã', ['cursiva pi', 'cursiva pi', 'cursiva pi']);
  this.executeCharTest('ùúå', ['cursiva rho', 'cursiva rho', 'cursiva rho']);
  this.executeCharTest('ùúç', ['cursiva final sigma', 'cursiva final sigma', 'cursiva final sigma']);
  this.executeCharTest('ùúé', ['cursiva sigma', 'cursiva sigma', 'cursiva sigma']);
  this.executeCharTest('ùúè', ['cursiva tau', 'cursiva tau', 'cursiva tau']);
  this.executeCharTest('ùúê', ['cursiva √≠psilon', 'cursiva √≠psilon', 'cursiva √≠psilon']);
  this.executeCharTest('ùúë', ['cursiva phi', 'cursiva phi', 'cursiva phi']);
  this.executeCharTest('ùúí', ['cursiva ji', 'cursiva ji', 'cursiva ji']);
  this.executeCharTest('ùúì', ['cursiva psi', 'cursiva psi', 'cursiva psi']);
  this.executeCharTest('ùúî', ['cursiva omega', 'cursiva omega', 'cursiva omega']);
  this.executeCharTest('ùúú', ['negrita cursiva may√∫scula Alfa', 'negrita cursiva may√∫scula Alfa', 'negrita cursiva may√∫scula Alfa']);
  this.executeCharTest('ùúù', ['negrita cursiva may√∫scula Beta', 'negrita cursiva may√∫scula Beta', 'negrita cursiva may√∫scula Beta']);
  this.executeCharTest('ùúû', ['negrita cursiva may√∫scula Gamma', 'negrita cursiva may√∫scula Gamma', 'negrita cursiva may√∫scula Gamma']);
  this.executeCharTest('ùúü', ['negrita cursiva may√∫scula Delta', 'negrita cursiva may√∫scula Delta', 'negrita cursiva may√∫scula Delta']);
  this.executeCharTest('ùú†', ['negrita cursiva may√∫scula √âpsilon', 'negrita cursiva may√∫scula √âpsilon', 'negrita cursiva may√∫scula √âpsilon']);
  this.executeCharTest('ùú°', ['negrita cursiva may√∫scula Zeta', 'negrita cursiva may√∫scula Zeta', 'negrita cursiva may√∫scula Zeta']);
  this.executeCharTest('ùú¢', ['negrita cursiva may√∫scula Eta', 'negrita cursiva may√∫scula Eta', 'negrita cursiva may√∫scula Eta']);
  this.executeCharTest('ùú£', ['negrita cursiva may√∫scula Theta', 'negrita cursiva may√∫scula Theta', 'negrita cursiva may√∫scula Theta']);
  this.executeCharTest('ùú§', ['negrita cursiva may√∫scula Iota', 'negrita cursiva may√∫scula Iota', 'negrita cursiva may√∫scula Iota']);
  this.executeCharTest('ùú•', ['negrita cursiva may√∫scula Kappa', 'negrita cursiva may√∫scula Kappa', 'negrita cursiva may√∫scula Kappa']);
  this.executeCharTest('ùú¶', ['negrita cursiva may√∫scula Lambda', 'negrita cursiva may√∫scula Lambda', 'negrita cursiva may√∫scula Lambda']);
  this.executeCharTest('ùúß', ['negrita cursiva may√∫scula Mi', 'negrita cursiva may√∫scula Mi', 'negrita cursiva may√∫scula Mi']);
  this.executeCharTest('ùú®', ['negrita cursiva may√∫scula Ni', 'negrita cursiva may√∫scula Ni', 'negrita cursiva may√∫scula Ni']);
  this.executeCharTest('ùú©', ['negrita cursiva may√∫scula Xi', 'negrita cursiva may√∫scula Xi', 'negrita cursiva may√∫scula Xi']);
  this.executeCharTest('ùú™', ['negrita cursiva may√∫scula √ìmicron', 'negrita cursiva may√∫scula √ìmicron', 'negrita cursiva may√∫scula √ìmicron']);
  this.executeCharTest('ùú´', ['negrita cursiva may√∫scula Pi', 'negrita cursiva may√∫scula Pi', 'negrita cursiva may√∫scula Pi']);
  this.executeCharTest('ùú¨', ['negrita cursiva may√∫scula Rho', 'negrita cursiva may√∫scula Rho', 'negrita cursiva may√∫scula Rho']);
  this.executeCharTest('ùúÆ', ['negrita cursiva may√∫scula Sigma', 'negrita cursiva may√∫scula Sigma', 'negrita cursiva may√∫scula Sigma']);
  this.executeCharTest('ùúØ', ['negrita cursiva may√∫scula Tau', 'negrita cursiva may√∫scula Tau', 'negrita cursiva may√∫scula Tau']);
  this.executeCharTest('ùú∞', ['negrita cursiva may√∫scula √çpsilon', 'negrita cursiva may√∫scula √çpsilon', 'negrita cursiva may√∫scula √çpsilon']);
  this.executeCharTest('ùú±', ['negrita cursiva may√∫scula Phi', 'negrita cursiva may√∫scula Phi', 'negrita cursiva may√∫scula Phi']);
  this.executeCharTest('ùú≤', ['negrita cursiva may√∫scula Ji', 'negrita cursiva may√∫scula Ji', 'negrita cursiva may√∫scula Ji']);
  this.executeCharTest('ùú≥', ['negrita cursiva may√∫scula Psi', 'negrita cursiva may√∫scula Psi', 'negrita cursiva may√∫scula Psi']);
  this.executeCharTest('ùú¥', ['negrita cursiva may√∫scula Omega', 'negrita cursiva may√∫scula Omega', 'negrita cursiva may√∫scula Omega']);
  this.executeCharTest('ùú∂', ['negrita cursiva alfa', 'negrita cursiva alfa', 'negrita cursiva alfa']);
  this.executeCharTest('ùú∑', ['negrita cursiva beta', 'negrita cursiva beta', 'negrita cursiva beta']);
  this.executeCharTest('ùú∏', ['negrita cursiva gamma', 'negrita cursiva gamma', 'negrita cursiva gamma']);
  this.executeCharTest('ùúπ', ['negrita cursiva delta', 'negrita cursiva delta', 'negrita cursiva delta']);
  this.executeCharTest('ùú∫', ['negrita cursiva √©psilon', 'negrita cursiva √©psilon', 'negrita cursiva √©psilon']);
  this.executeCharTest('ùúª', ['negrita cursiva zeta', 'negrita cursiva zeta', 'negrita cursiva zeta']);
  this.executeCharTest('ùúº', ['negrita cursiva eta', 'negrita cursiva eta', 'negrita cursiva eta']);
  this.executeCharTest('ùúΩ', ['negrita cursiva theta', 'negrita cursiva theta', 'negrita cursiva theta']);
  this.executeCharTest('ùúæ', ['negrita cursiva iota', 'negrita cursiva iota', 'negrita cursiva iota']);
  this.executeCharTest('ùúø', ['negrita cursiva kappa', 'negrita cursiva kappa', 'negrita cursiva kappa']);
  this.executeCharTest('ùùÄ', ['negrita cursiva lambda', 'negrita cursiva lambda', 'negrita cursiva lambda']);
  this.executeCharTest('ùùÅ', ['negrita cursiva mi', 'negrita cursiva mi', 'negrita cursiva mi']);
  this.executeCharTest('ùùÇ', ['negrita cursiva ni', 'negrita cursiva ni', 'negrita cursiva ni']);
  this.executeCharTest('ùùÉ', ['negrita cursiva xi', 'negrita cursiva xi', 'negrita cursiva xi']);
  this.executeCharTest('ùùÑ', ['negrita cursiva √≥micron', 'negrita cursiva √≥micron', 'negrita cursiva √≥micron']);
  this.executeCharTest('ùùÖ', ['negrita cursiva pi', 'negrita cursiva pi', 'negrita cursiva pi']);
  this.executeCharTest('ùùÜ', ['negrita cursiva rho', 'negrita cursiva rho', 'negrita cursiva rho']);
  this.executeCharTest('ùùá', ['negrita cursiva final sigma', 'negrita cursiva final sigma', 'negrita cursiva final sigma']);
  this.executeCharTest('ùùà', ['negrita cursiva sigma', 'negrita cursiva sigma', 'negrita cursiva sigma']);
  this.executeCharTest('ùùâ', ['negrita cursiva tau', 'negrita cursiva tau', 'negrita cursiva tau']);
  this.executeCharTest('ùùä', ['negrita cursiva √≠psilon', 'negrita cursiva √≠psilon', 'negrita cursiva √≠psilon']);
  this.executeCharTest('ùùã', ['negrita cursiva phi', 'negrita cursiva phi', 'negrita cursiva phi']);
  this.executeCharTest('ùùå', ['negrita cursiva ji', 'negrita cursiva ji', 'negrita cursiva ji']);
  this.executeCharTest('ùùç', ['negrita cursiva psi', 'negrita cursiva psi', 'negrita cursiva psi']);
  this.executeCharTest('ùùé', ['negrita cursiva omega', 'negrita cursiva omega', 'negrita cursiva omega']);
  this.executeCharTest('ùùñ', ['sans-serif negrita may√∫scula Alfa', 'sans-serif negrita may√∫scula Alfa', 'sans-serif negrita may√∫scula Alfa']);
  this.executeCharTest('ùùó', ['sans-serif negrita may√∫scula Beta', 'sans-serif negrita may√∫scula Beta', 'sans-serif negrita may√∫scula Beta']);
  this.executeCharTest('ùùò', ['sans-serif negrita may√∫scula Gamma', 'sans-serif negrita may√∫scula Gamma', 'sans-serif negrita may√∫scula Gamma']);
  this.executeCharTest('ùùô', ['sans-serif negrita may√∫scula Delta', 'sans-serif negrita may√∫scula Delta', 'sans-serif negrita may√∫scula Delta']);
  this.executeCharTest('ùùö', ['sans-serif negrita may√∫scula √âpsilon', 'sans-serif negrita may√∫scula √âpsilon', 'sans-serif negrita may√∫scula √âpsilon']);
  this.executeCharTest('ùùõ', ['sans-serif negrita may√∫scula Zeta', 'sans-serif negrita may√∫scula Zeta', 'sans-serif negrita may√∫scula Zeta']);
  this.executeCharTest('ùùú', ['sans-serif negrita may√∫scula Eta', 'sans-serif negrita may√∫scula Eta', 'sans-serif negrita may√∫scula Eta']);
  this.executeCharTest('ùùù', ['sans-serif negrita may√∫scula Theta', 'sans-serif negrita may√∫scula Theta', 'sans-serif negrita may√∫scula Theta']);
  this.executeCharTest('ùùû', ['sans-serif negrita may√∫scula Iota', 'sans-serif negrita may√∫scula Iota', 'sans-serif negrita may√∫scula Iota']);
  this.executeCharTest('ùùü', ['sans-serif negrita may√∫scula Kappa', 'sans-serif negrita may√∫scula Kappa', 'sans-serif negrita may√∫scula Kappa']);
  this.executeCharTest('ùù†', ['sans-serif negrita may√∫scula Lambda', 'sans-serif negrita may√∫scula Lambda', 'sans-serif negrita may√∫scula Lambda']);
  this.executeCharTest('ùù°', ['sans-serif negrita may√∫scula Mi', 'sans-serif negrita may√∫scula Mi', 'sans-serif negrita may√∫scula Mi']);
  this.executeCharTest('ùù¢', ['sans-serif negrita may√∫scula Ni', 'sans-serif negrita may√∫scula Ni', 'sans-serif negrita may√∫scula Ni']);
  this.executeCharTest('ùù£', ['sans-serif negrita may√∫scula Xi', 'sans-serif negrita may√∫scula Xi', 'sans-serif negrita may√∫scula Xi']);
  this.executeCharTest('ùù§', ['sans-serif negrita may√∫scula √ìmicron', 'sans-serif negrita may√∫scula √ìmicron', 'sans-serif negrita may√∫scula √ìmicron']);
  this.executeCharTest('ùù•', ['sans-serif negrita may√∫scula Pi', 'sans-serif negrita may√∫scula Pi', 'sans-serif negrita may√∫scula Pi']);
  this.executeCharTest('ùù¶', ['sans-serif negrita may√∫scula Rho', 'sans-serif negrita may√∫scula Rho', 'sans-serif negrita may√∫scula Rho']);
  this.executeCharTest('ùù®', ['sans-serif negrita may√∫scula Sigma', 'sans-serif negrita may√∫scula Sigma', 'sans-serif negrita may√∫scula Sigma']);
  this.executeCharTest('ùù©', ['sans-serif negrita may√∫scula Tau', 'sans-serif negrita may√∫scula Tau', 'sans-serif negrita may√∫scula Tau']);
  this.executeCharTest('ùù™', ['sans-serif negrita may√∫scula √çpsilon', 'sans-serif negrita may√∫scula √çpsilon', 'sans-serif negrita may√∫scula √çpsilon']);
  this.executeCharTest('ùù´', ['sans-serif negrita may√∫scula Phi', 'sans-serif negrita may√∫scula Phi', 'sans-serif negrita may√∫scula Phi']);
  this.executeCharTest('ùù¨', ['sans-serif negrita may√∫scula Ji', 'sans-serif negrita may√∫scula Ji', 'sans-serif negrita may√∫scula Ji']);
  this.executeCharTest('ùù≠', ['sans-serif negrita may√∫scula Psi', 'sans-serif negrita may√∫scula Psi', 'sans-serif negrita may√∫scula Psi']);
  this.executeCharTest('ùùÆ', ['sans-serif negrita may√∫scula Omega', 'sans-serif negrita may√∫scula Omega', 'sans-serif negrita may√∫scula Omega']);
  this.executeCharTest('ùù∞', ['sans-serif negrita alfa', 'sans-serif negrita alfa', 'sans-serif negrita alfa']);
  this.executeCharTest('ùù±', ['sans-serif negrita beta', 'sans-serif negrita beta', 'sans-serif negrita beta']);
  this.executeCharTest('ùù≤', ['sans-serif negrita gamma', 'sans-serif negrita gamma', 'sans-serif negrita gamma']);
  this.executeCharTest('ùù≥', ['sans-serif negrita delta', 'sans-serif negrita delta', 'sans-serif negrita delta']);
  this.executeCharTest('ùù¥', ['sans-serif negrita √©psilon', 'sans-serif negrita √©psilon', 'sans-serif negrita √©psilon']);
  this.executeCharTest('ùùµ', ['sans-serif negrita zeta', 'sans-serif negrita zeta', 'sans-serif negrita zeta']);
  this.executeCharTest('ùù∂', ['sans-serif negrita eta', 'sans-serif negrita eta', 'sans-serif negrita eta']);
  this.executeCharTest('ùù∑', ['sans-serif negrita theta', 'sans-serif negrita theta', 'sans-serif negrita theta']);
  this.executeCharTest('ùù∏', ['sans-serif negrita iota', 'sans-serif negrita iota', 'sans-serif negrita iota']);
  this.executeCharTest('ùùπ', ['sans-serif negrita kappa', 'sans-serif negrita kappa', 'sans-serif negrita kappa']);
  this.executeCharTest('ùù∫', ['sans-serif negrita lambda', 'sans-serif negrita lambda', 'sans-serif negrita lambda']);
  this.executeCharTest('ùùª', ['sans-serif negrita mi', 'sans-serif negrita mi', 'sans-serif negrita mi']);
  this.executeCharTest('ùùº', ['sans-serif negrita ni', 'sans-serif negrita ni', 'sans-serif negrita ni']);
  this.executeCharTest('ùùΩ', ['sans-serif negrita xi', 'sans-serif negrita xi', 'sans-serif negrita xi']);
  this.executeCharTest('ùùæ', ['sans-serif negrita √≥micron', 'sans-serif negrita √≥micron', 'sans-serif negrita √≥micron']);
  this.executeCharTest('ùùø', ['sans-serif negrita pi', 'sans-serif negrita pi', 'sans-serif negrita pi']);
  this.executeCharTest('ùûÄ', ['sans-serif negrita rho', 'sans-serif negrita rho', 'sans-serif negrita rho']);
  this.executeCharTest('ùûÅ', ['sans-serif negrita final sigma', 'sans-serif negrita final sigma', 'sans-serif negrita final sigma']);
  this.executeCharTest('ùûÇ', ['sans-serif negrita sigma', 'sans-serif negrita sigma', 'sans-serif negrita sigma']);
  this.executeCharTest('ùûÉ', ['sans-serif negrita tau', 'sans-serif negrita tau', 'sans-serif negrita tau']);
  this.executeCharTest('ùûÑ', ['sans-serif negrita √≠psilon', 'sans-serif negrita √≠psilon', 'sans-serif negrita √≠psilon']);
  this.executeCharTest('ùûÖ', ['sans-serif negrita phi', 'sans-serif negrita phi', 'sans-serif negrita phi']);
  this.executeCharTest('ùûÜ', ['sans-serif negrita ji', 'sans-serif negrita ji', 'sans-serif negrita ji']);
  this.executeCharTest('ùûá', ['sans-serif negrita psi', 'sans-serif negrita psi', 'sans-serif negrita psi']);
  this.executeCharTest('ùûà', ['sans-serif negrita omega', 'sans-serif negrita omega', 'sans-serif negrita omega']);
  this.executeCharTest('ùûê', ['sans-serif negrita cursiva may√∫scula Alfa', 'sans-serif negrita cursiva may√∫scula Alfa', 'sans-serif negrita cursiva may√∫scula Alfa']);
  this.executeCharTest('ùûë', ['sans-serif negrita cursiva may√∫scula Beta', 'sans-serif negrita cursiva may√∫scula Beta', 'sans-serif negrita cursiva may√∫scula Beta']);
  this.executeCharTest('ùûí', ['sans-serif negrita cursiva may√∫scula Gamma', 'sans-serif negrita cursiva may√∫scula Gamma', 'sans-serif negrita cursiva may√∫scula Gamma']);
  this.executeCharTest('ùûì', ['sans-serif negrita cursiva may√∫scula Delta', 'sans-serif negrita cursiva may√∫scula Delta', 'sans-serif negrita cursiva may√∫scula Delta']);
  this.executeCharTest('ùûî', ['sans-serif negrita cursiva may√∫scula √âpsilon', 'sans-serif negrita cursiva may√∫scula √âpsilon', 'sans-serif negrita cursiva may√∫scula √âpsilon']);
  this.executeCharTest('ùûï', ['sans-serif negrita cursiva may√∫scula Zeta', 'sans-serif negrita cursiva may√∫scula Zeta', 'sans-serif negrita cursiva may√∫scula Zeta']);
  this.executeCharTest('ùûñ', ['sans-serif negrita cursiva may√∫scula Eta', 'sans-serif negrita cursiva may√∫scula Eta', 'sans-serif negrita cursiva may√∫scula Eta']);
  this.executeCharTest('ùûó', ['sans-serif negrita cursiva may√∫scula Theta', 'sans-serif negrita cursiva may√∫scula Theta', 'sans-serif negrita cursiva may√∫scula Theta']);
  this.executeCharTest('ùûò', ['sans-serif negrita cursiva may√∫scula Iota', 'sans-serif negrita cursiva may√∫scula Iota', 'sans-serif negrita cursiva may√∫scula Iota']);
  this.executeCharTest('ùûô', ['sans-serif negrita cursiva may√∫scula Kappa', 'sans-serif negrita cursiva may√∫scula Kappa', 'sans-serif negrita cursiva may√∫scula Kappa']);
  this.executeCharTest('ùûö', ['sans-serif negrita cursiva may√∫scula Lambda', 'sans-serif negrita cursiva may√∫scula Lambda', 'sans-serif negrita cursiva may√∫scula Lambda']);
  this.executeCharTest('ùûõ', ['sans-serif negrita cursiva may√∫scula Mi', 'sans-serif negrita cursiva may√∫scula Mi', 'sans-serif negrita cursiva may√∫scula Mi']);
  this.executeCharTest('ùûú', ['sans-serif negrita cursiva may√∫scula Ni', 'sans-serif negrita cursiva may√∫scula Ni', 'sans-serif negrita cursiva may√∫scula Ni']);
  this.executeCharTest('ùûù', ['sans-serif negrita cursiva may√∫scula Xi', 'sans-serif negrita cursiva may√∫scula Xi', 'sans-serif negrita cursiva may√∫scula Xi']);
  this.executeCharTest('ùûû', ['sans-serif negrita cursiva may√∫scula √ìmicron', 'sans-serif negrita cursiva may√∫scula √ìmicron', 'sans-serif negrita cursiva may√∫scula √ìmicron']);
  this.executeCharTest('ùûü', ['sans-serif negrita cursiva may√∫scula Pi', 'sans-serif negrita cursiva may√∫scula Pi', 'sans-serif negrita cursiva may√∫scula Pi']);
  this.executeCharTest('ùû†', ['sans-serif negrita cursiva may√∫scula Rho', 'sans-serif negrita cursiva may√∫scula Rho', 'sans-serif negrita cursiva may√∫scula Rho']);
  this.executeCharTest('ùû¢', ['sans-serif negrita cursiva may√∫scula Sigma', 'sans-serif negrita cursiva may√∫scula Sigma', 'sans-serif negrita cursiva may√∫scula Sigma']);
  this.executeCharTest('ùû£', ['sans-serif negrita cursiva may√∫scula Tau', 'sans-serif negrita cursiva may√∫scula Tau', 'sans-serif negrita cursiva may√∫scula Tau']);
  this.executeCharTest('ùû§', ['sans-serif negrita cursiva may√∫scula √çpsilon', 'sans-serif negrita cursiva may√∫scula √çpsilon', 'sans-serif negrita cursiva may√∫scula √çpsilon']);
  this.executeCharTest('ùû•', ['sans-serif negrita cursiva may√∫scula Phi', 'sans-serif negrita cursiva may√∫scula Phi', 'sans-serif negrita cursiva may√∫scula Phi']);
  this.executeCharTest('ùû¶', ['sans-serif negrita cursiva may√∫scula Ji', 'sans-serif negrita cursiva may√∫scula Ji', 'sans-serif negrita cursiva may√∫scula Ji']);
  this.executeCharTest('ùûß', ['sans-serif negrita cursiva may√∫scula Psi', 'sans-serif negrita cursiva may√∫scula Psi', 'sans-serif negrita cursiva may√∫scula Psi']);
  this.executeCharTest('ùû®', ['sans-serif negrita cursiva may√∫scula Omega', 'sans-serif negrita cursiva may√∫scula Omega', 'sans-serif negrita cursiva may√∫scula Omega']);
  this.executeCharTest('ùû™', ['sans-serif negrita cursiva alfa', 'sans-serif negrita cursiva alfa', 'sans-serif negrita cursiva alfa']);
  this.executeCharTest('ùû´', ['sans-serif negrita cursiva beta', 'sans-serif negrita cursiva beta', 'sans-serif negrita cursiva beta']);
  this.executeCharTest('ùû¨', ['sans-serif negrita cursiva gamma', 'sans-serif negrita cursiva gamma', 'sans-serif negrita cursiva gamma']);
  this.executeCharTest('ùû≠', ['sans-serif negrita cursiva delta', 'sans-serif negrita cursiva delta', 'sans-serif negrita cursiva delta']);
  this.executeCharTest('ùûÆ', ['sans-serif negrita cursiva √©psilon', 'sans-serif negrita cursiva √©psilon', 'sans-serif negrita cursiva √©psilon']);
  this.executeCharTest('ùûØ', ['sans-serif negrita cursiva zeta', 'sans-serif negrita cursiva zeta', 'sans-serif negrita cursiva zeta']);
  this.executeCharTest('ùû∞', ['sans-serif negrita cursiva eta', 'sans-serif negrita cursiva eta', 'sans-serif negrita cursiva eta']);
  this.executeCharTest('ùû±', ['sans-serif negrita cursiva theta', 'sans-serif negrita cursiva theta', 'sans-serif negrita cursiva theta']);
  this.executeCharTest('ùû≤', ['sans-serif negrita cursiva iota', 'sans-serif negrita cursiva iota', 'sans-serif negrita cursiva iota']);
  this.executeCharTest('ùû≥', ['sans-serif negrita cursiva kappa', 'sans-serif negrita cursiva kappa', 'sans-serif negrita cursiva kappa']);
  this.executeCharTest('ùû¥', ['sans-serif negrita cursiva lambda', 'sans-serif negrita cursiva lambda', 'sans-serif negrita cursiva lambda']);
  this.executeCharTest('ùûµ', ['sans-serif negrita cursiva mi', 'sans-serif negrita cursiva mi', 'sans-serif negrita cursiva mi']);
  this.executeCharTest('ùû∂', ['sans-serif negrita cursiva ni', 'sans-serif negrita cursiva ni', 'sans-serif negrita cursiva ni']);
  this.executeCharTest('ùû∑', ['sans-serif negrita cursiva xi', 'sans-serif negrita cursiva xi', 'sans-serif negrita cursiva xi']);
  this.executeCharTest('ùû∏', ['sans-serif negrita cursiva √≥micron', 'sans-serif negrita cursiva √≥micron', 'sans-serif negrita cursiva √≥micron']);
  this.executeCharTest('ùûπ', ['sans-serif negrita cursiva pi', 'sans-serif negrita cursiva pi', 'sans-serif negrita cursiva pi']);
  this.executeCharTest('ùû∫', ['sans-serif negrita cursiva rho', 'sans-serif negrita cursiva rho', 'sans-serif negrita cursiva rho']);
  this.executeCharTest('ùûª', ['sans-serif negrita cursiva final sigma', 'sans-serif negrita cursiva final sigma', 'sans-serif negrita cursiva final sigma']);
  this.executeCharTest('ùûº', ['sans-serif negrita cursiva sigma', 'sans-serif negrita cursiva sigma', 'sans-serif negrita cursiva sigma']);
  this.executeCharTest('ùûΩ', ['sans-serif negrita cursiva tau', 'sans-serif negrita cursiva tau', 'sans-serif negrita cursiva tau']);
  this.executeCharTest('ùûæ', ['sans-serif negrita cursiva √≠psilon', 'sans-serif negrita cursiva √≠psilon', 'sans-serif negrita cursiva √≠psilon']);
  this.executeCharTest('ùûø', ['sans-serif negrita cursiva phi', 'sans-serif negrita cursiva phi', 'sans-serif negrita cursiva phi']);
  this.executeCharTest('ùüÄ', ['sans-serif negrita cursiva ji', 'sans-serif negrita cursiva ji', 'sans-serif negrita cursiva ji']);
  this.executeCharTest('ùüÅ', ['sans-serif negrita cursiva psi', 'sans-serif negrita cursiva psi', 'sans-serif negrita cursiva psi']);
  this.executeCharTest('ùüÇ', ['sans-serif negrita cursiva omega', 'sans-serif negrita cursiva omega', 'sans-serif negrita cursiva omega']);
  this.executeCharTest('‚Ñµ', ['alef', 'alef', 'alef']);
  this.executeCharTest('‚Ñ∂', ['bet', 'bet', 'bet']);
  this.executeCharTest('‚Ñ∑', ['gu√≠mel', 'gu√≠mel', 'gu√≠mel']);
  this.executeCharTest('‚Ñ∏', ['d√°let', 'd√°let', 'd√°let']);
  this.executeCharTest('«ñ', ['u double overdot overbar', 'u double overdot overbar', 'u double overdot overbar']);
  this.executeCharTest('«ò', ['u double overdot acute', 'u double overdot acute', 'u double overdot acute']);
  this.executeCharTest('«ö', ['u double overdot caron', 'u double overdot caron', 'u double overdot caron']);
  this.executeCharTest('«ú', ['u double overdot grave', 'u double overdot grave', 'u double overdot grave']);
  this.executeCharTest('«ü', ['a double overdot overbar', 'a double overdot overbar', 'a double overdot overbar']);
  this.executeCharTest('«°', ['a overdot overbar', 'a overdot overbar', 'a overdot overbar']);
  this.executeCharTest('«≠', ['o ogonek overbar', 'o ogonek overbar', 'o ogonek overbar']);
  this.executeCharTest('«ª', ['a ring above acute', 'a ring above acute', 'a ring above acute']);
  this.executeCharTest('»´', ['o double overdot overbar', 'o double overdot overbar', 'o double overdot overbar']);
  this.executeCharTest('»≠', ['o tilde overbar', 'o tilde overbar', 'o tilde overbar']);
  this.executeCharTest('»±', ['o overdot overbar', 'o overdot overbar', 'o overdot overbar']);
  this.executeCharTest('·∏â', ['c con cedilla y agudo', 'c con cedilla y agudo', 'c con cedilla y agudo']);
  this.executeCharTest('·∏ï', ['e con macr√≥n y grave', 'e con macr√≥n y grave', 'e con macr√≥n y grave']);
  this.executeCharTest('·∏ó', ['e con macr√≥n y agudo', 'e con macr√≥n y agudo', 'e con macr√≥n y agudo']);
  this.executeCharTest('·∏ù', ['e con cedilla y breve', 'e con cedilla y breve', 'e con cedilla y breve']);
  this.executeCharTest('·∏Ø', ['i con di√©resis y agudo', 'i con di√©resis y agudo', 'i con di√©resis y agudo']);
  this.executeCharTest('·∏π', ['l con punto debajo y macr√≥n', 'l con punto debajo y macr√≥n', 'l con punto debajo y macr√≥n']);
  this.executeCharTest('·πç', ['o con tilde y acute', 'o con tilde y acute', 'o con tilde y acute']);
  this.executeCharTest('·πè', ['o con tilde y di√©resis', 'o con tilde y di√©resis', 'o con tilde y di√©resis']);
  this.executeCharTest('·πë', ['o con macr√≥n y grave', 'o con macr√≥n y grave', 'o con macr√≥n y grave']);
  this.executeCharTest('·πì', ['o con macr√≥n y agudo', 'o con macr√≥n y agudo', 'o con macr√≥n y agudo']);
  this.executeCharTest('·πù', ['r con punto debajo y macr√≥n', 'r con punto debajo y macr√≥n', 'r con punto debajo y macr√≥n']);
  this.executeCharTest('·π•', ['s con agudo y punto arriba', 's con agudo y punto arriba', 's con agudo y punto arriba']);
  this.executeCharTest('·πß', ['s con car√≥n y punto arriba', 's con car√≥n y punto arriba', 's con car√≥n y punto arriba']);
  this.executeCharTest('·π©', ['s con punto debajo y punto arriba', 's con punto debajo y punto arriba', 's con punto debajo y punto arriba']);
  this.executeCharTest('·ππ', ['u con tilde y agudo', 'u con tilde y agudo', 'u con tilde y agudo']);
  this.executeCharTest('·πª', ['u con macr√≥n y di√©resis', 'u con macr√≥n y di√©resis', 'u con macr√≥n y di√©resis']);
  this.executeCharTest('·∫•', ['a con acento circunflejo y agudo', 'a con acento circunflejo y agudo', 'a con acento circunflejo y agudo']);
  this.executeCharTest('·∫ß', ['a con acento circunflejo y grave', 'a con acento circunflejo y grave', 'a con acento circunflejo y grave']);
  this.executeCharTest('·∫©', ['a con acento circunflejo y gancho arriba', 'a con acento circunflejo y gancho arriba', 'a con acento circunflejo y gancho arriba']);
  this.executeCharTest('·∫´', ['a con acento circunflejo y tilde', 'a con acento circunflejo y tilde', 'a con acento circunflejo y tilde']);
  this.executeCharTest('·∫≠', ['a con acento circunflejo y punto debajo', 'a con acento circunflejo y punto debajo', 'a con acento circunflejo y punto debajo']);
  this.executeCharTest('·∫Ø', ['a con breve y agudo', 'a con breve y agudo', 'a con breve y agudo']);
  this.executeCharTest('·∫±', ['a con breve y grave', 'a con breve y grave', 'a con breve y grave']);
  this.executeCharTest('·∫≥', ['a con breve y gancho arriba', 'a con breve y gancho arriba', 'a con breve y gancho arriba']);
  this.executeCharTest('·∫µ', ['a con breve y tilde', 'a con breve y tilde', 'a con breve y tilde']);
  this.executeCharTest('·∫∑', ['a con breve y punto debajo', 'a con breve y punto debajo', 'a con breve y punto debajo']);
  this.executeCharTest('·∫ø', ['e con acento circunflejo y agudo', 'e con acento circunflejo y agudo', 'e con acento circunflejo y agudo']);
  this.executeCharTest('·ªÅ', ['e con acento circunflejo y grave', 'e con acento circunflejo y grave', 'e con acento circunflejo y grave']);
  this.executeCharTest('·ªÉ', ['e con acento circunflejo y gancho arriba', 'e con acento circunflejo y gancho arriba', 'e con acento circunflejo y gancho arriba']);
  this.executeCharTest('·ªÖ', ['e con acento circunflejo y tilde', 'e con acento circunflejo y tilde', 'e con acento circunflejo y tilde']);
  this.executeCharTest('·ªá', ['e con acento circunflejo y punto debajo', 'e con acento circunflejo y punto debajo', 'e con acento circunflejo y punto debajo']);
  this.executeCharTest('·ªë', ['o con acento circunflejo y agudo', 'o con acento circunflejo y agudo', 'o con acento circunflejo y agudo']);
  this.executeCharTest('·ªì', ['o con acento circunflejo y grave', 'o con acento circunflejo y grave', 'o con acento circunflejo y grave']);
  this.executeCharTest('·ªï', ['o con acento circunflejo y gancho arriba', 'o con acento circunflejo y gancho arriba', 'o con acento circunflejo y gancho arriba']);
  this.executeCharTest('·ªó', ['o con acento circunflejo y tilde', 'o con acento circunflejo y tilde', 'o con acento circunflejo y tilde']);
  this.executeCharTest('·ªô', ['o con acento circunflejo y punto debajo', 'o con acento circunflejo y punto debajo', 'o con acento circunflejo y punto debajo']);
  this.executeCharTest('·ªõ', ['o with horn and acute', 'o with horn and acute', 'o with horn and acute']);
  this.executeCharTest('·ªù', ['o with horn and grave', 'o with horn and grave', 'o with horn and grave']);
  this.executeCharTest('·ªü', ['o with horn and hook above', 'o with horn and hook above', 'o with horn and hook above']);
  this.executeCharTest('·ª°', ['o with horn and tilde', 'o with horn and tilde', 'o with horn and tilde']);
  this.executeCharTest('·ª£', ['o con cuerno y punto debajo', 'o con cuerno y punto debajo', 'o con cuerno y punto debajo']);
  this.executeCharTest('·ª©', ['u con cuerno y agudo', 'u con cuerno y agudo', 'u con cuerno y agudo']);
  this.executeCharTest('·ª´', ['u con cuerno y grave', 'u con cuerno y grave', 'u con cuerno y grave']);
  this.executeCharTest('·ª≠', ['u con cuerno y gancho arriba', 'u con cuerno y gancho arriba', 'u con cuerno y gancho arriba']);
  this.executeCharTest('·ªØ', ['u con cuerno y tilde', 'u con cuerno y tilde', 'u con cuerno y tilde']);
  this.executeCharTest('·ª±', ['u con cuerno y punto debajo', 'u con cuerno y punto debajo', 'u con cuerno y punto debajo']);
  this.executeCharTest('a', ['a', 'a', 'a']);
  this.executeCharTest('b', ['b', 'b', 'b']);
  this.executeCharTest('c', ['c', 'c', 'c']);
  this.executeCharTest('d', ['d', 'd', 'd']);
  this.executeCharTest('e', ['e', 'e', 'e']);
  this.executeCharTest('f', ['f', 'f', 'f']);
  this.executeCharTest('g', ['g', 'g', 'g']);
  this.executeCharTest('h', ['h', 'h', 'h']);
  this.executeCharTest('i', ['i', 'i', 'i']);
  this.executeCharTest('j', ['j', 'j', 'j']);
  this.executeCharTest('k', ['k', 'k', 'k']);
  this.executeCharTest('l', ['l', 'l', 'l']);
  this.executeCharTest('m', ['m', 'm', 'm']);
  this.executeCharTest('n', ['n', 'n', 'n']);
  this.executeCharTest('o', ['o', 'o', 'o']);
  this.executeCharTest('p', ['p', 'p', 'p']);
  this.executeCharTest('q', ['q', 'q', 'q']);
  this.executeCharTest('r', ['r', 'r', 'r']);
  this.executeCharTest('s', ['s', 's', 's']);
  this.executeCharTest('t', ['t', 't', 't']);
  this.executeCharTest('u', ['u', 'u', 'u']);
  this.executeCharTest('v', ['v', 'v', 'v']);
  this.executeCharTest('w', ['w', 'w', 'w']);
  this.executeCharTest('x', ['x', 'x', 'x']);
  this.executeCharTest('y', ['y', 'y', 'y']);
  this.executeCharTest('z', ['z', 'z', 'z']);
  this.executeCharTest('ÔΩÅ', ['a', 'a', 'a']);
  this.executeCharTest('ÔΩÇ', ['b', 'b', 'b']);
  this.executeCharTest('ÔΩÉ', ['c', 'c', 'c']);
  this.executeCharTest('ÔΩÑ', ['d', 'd', 'd']);
  this.executeCharTest('ÔΩÖ', ['e', 'e', 'e']);
  this.executeCharTest('ÔΩÜ', ['f', 'f', 'f']);
  this.executeCharTest('ÔΩá', ['g', 'g', 'g']);
  this.executeCharTest('ÔΩà', ['h', 'h', 'h']);
  this.executeCharTest('ÔΩâ', ['i', 'i', 'i']);
  this.executeCharTest('ÔΩä', ['j', 'j', 'j']);
  this.executeCharTest('ÔΩã', ['k', 'k', 'k']);
  this.executeCharTest('ÔΩå', ['l', 'l', 'l']);
  this.executeCharTest('ÔΩç', ['m', 'm', 'm']);
  this.executeCharTest('ÔΩé', ['n', 'n', 'n']);
  this.executeCharTest('ÔΩè', ['o', 'o', 'o']);
  this.executeCharTest('ÔΩê', ['p', 'p', 'p']);
  this.executeCharTest('ÔΩë', ['q', 'q', 'q']);
  this.executeCharTest('ÔΩí', ['r', 'r', 'r']);
  this.executeCharTest('ÔΩì', ['s', 's', 's']);
  this.executeCharTest('ÔΩî', ['t', 't', 't']);
  this.executeCharTest('ÔΩï', ['u', 'u', 'u']);
  this.executeCharTest('ÔΩñ', ['v', 'v', 'v']);
  this.executeCharTest('ÔΩó', ['w', 'w', 'w']);
  this.executeCharTest('ÔΩò', ['x', 'x', 'x']);
  this.executeCharTest('ÔΩô', ['y', 'y', 'y']);
  this.executeCharTest('ÔΩö', ['z', 'z', 'z']);
  this.executeCharTest('√∏', ['o barrada', 'o barrada', 'o barrada']);
  this.executeCharTest('ƒë', ['d con barra', 'd con barra', 'd con barra']);
  this.executeCharTest('ƒß', ['h con gui√≥n', 'h con gui√≥n', 'h con gui√≥n']);
  this.executeCharTest('≈Ç', ['l con gui√≥n', 'l con gui√≥n', 'l con gui√≥n']);
  this.executeCharTest('≈ß', ['t con gui√≥n', 't con gui√≥n', 't con gui√≥n']);
  this.executeCharTest('∆Ä', ['b with stroke', 'b with stroke', 'b with stroke']);
  this.executeCharTest('∆õ', ['lambda tachada', 'lambda tachada', 'lambda tachada']);
  this.executeCharTest('∆∂', ['z with stroke', 'z with stroke', 'z with stroke']);
  this.executeCharTest('∆æ', ['latin letter inverted glottal stop with stroke', 'latin letter inverted glottal stop with stroke', 'latin letter inverted glottal stop with stroke']);
  this.executeCharTest('«•', ['g with stroke', 'g with stroke', 'g with stroke']);
  this.executeCharTest('«ø', ['o with stroke and acute', 'o with stroke and acute', 'o with stroke and acute']);
  this.executeCharTest('»º', ['c with stroke', 'c with stroke', 'c with stroke']);
  this.executeCharTest('…á', ['e with stroke', 'e with stroke', 'e with stroke']);
  this.executeCharTest('…â', ['j with stroke', 'j with stroke', 'j with stroke']);
  this.executeCharTest('…ç', ['r with stroke', 'r with stroke', 'r with stroke']);
  this.executeCharTest('…è', ['y with stroke', 'y with stroke', 'y with stroke']);
  this.executeCharTest('…ü', ['dotless j with stroke', 'dotless j with stroke', 'dotless j with stroke']);
  this.executeCharTest('…®', ['i with stroke', 'i with stroke', 'i with stroke']);
  this.executeCharTest(' Ñ', ['dotless j with stroke and hook', 'dotless j with stroke and hook', 'dotless j with stroke and hook']);
  this.executeCharTest(' °', ['latin letter glottal stop with stroke', 'latin letter glottal stop with stroke', 'latin letter glottal stop with stroke']);
  this.executeCharTest(' ¢', ['latin letter reversed glottal stop with stroke', 'latin letter reversed glottal stop with stroke', 'latin letter reversed glottal stop with stroke']);
  this.executeCharTest('·¥ì', ['sideways o with stroke', 'sideways o with stroke', 'sideways o with stroke']);
  this.executeCharTest('·µº', ['iota with stroke', 'iota with stroke', 'iota with stroke']);
  this.executeCharTest('·µΩ', ['p with stroke', 'p with stroke', 'p with stroke']);
  this.executeCharTest('·µø', ['upsilon with stroke', 'upsilon with stroke', 'upsilon with stroke']);
  this.executeCharTest('·∫ú', ['long s with diagonal stroke', 'long s with diagonal stroke', 'long s with diagonal stroke']);
  this.executeCharTest('·∫ù', ['long s with high stroke', 'long s with high stroke', 'long s with high stroke']);
  this.executeCharTest('∆ç', ['turned delta', 'turned delta', 'turned delta']);
  this.executeCharTest('·∫õ', ['s larga con punto arriba', 's larga con punto arriba', 's larga con punto arriba']);
  this.executeCharTest('·∫ü', ['delta', 'delta', 'delta']);
  this.executeCharTest('ƒ∏', ['kra', 'kra', 'kra']);
  this.executeCharTest('≈ø', ['long s', 'long s', 'long s']);
  this.executeCharTest('∆É', ['b with topbar', 'b with topbar', 'b with topbar']);
  this.executeCharTest('∆Ö', ['tone six', 'tone six', 'tone six']);
  this.executeCharTest('∆à', ['c with hook', 'c with hook', 'c with hook']);
  this.executeCharTest('∆å', ['d with topbar', 'd with topbar', 'd with topbar']);
  this.executeCharTest('∆í', ['f con gancho', 'f con gancho', 'f con gancho']);
  this.executeCharTest('∆ï', ['hv', 'hv', 'hv']);
  this.executeCharTest('∆ô', ['k with hook', 'k with hook', 'k with hook']);
  this.executeCharTest('∆ö', ['l con barra', 'l con barra', 'l con barra']);
  this.executeCharTest('∆û', ['n with long right leg', 'n with long right leg', 'n with long right leg']);
  this.executeCharTest('∆°', ['o with horn', 'o with horn', 'o with horn']);
  this.executeCharTest('∆£', ['oi', 'oi', 'oi']);
  this.executeCharTest('∆•', ['p with hook', 'p with hook', 'p with hook']);
  this.executeCharTest('∆®', ['tone two', 'tone two', 'tone two']);
  this.executeCharTest('∆™', ['latin letter reversed esh loop', 'latin letter reversed esh loop', 'latin letter reversed esh loop']);
  this.executeCharTest('∆´', ['t with palatal hook', 't with palatal hook', 't with palatal hook']);
  this.executeCharTest('∆≠', ['t with hook', 't with hook', 't with hook']);
  this.executeCharTest('∆∞', ['u with horn', 'u with horn', 'u with horn']);
  this.executeCharTest('∆¥', ['y with hook', 'y with hook', 'y with hook']);
  this.executeCharTest('∆π', ['ezh reversed', 'ezh reversed', 'ezh reversed']);
  this.executeCharTest('∆∫', ['ezh with tail', 'ezh with tail', 'ezh with tail']);
  this.executeCharTest('∆Ω', ['tone five', 'tone five', 'tone five']);
  this.executeCharTest('∆ø', ['latin letter wynn', 'latin letter wynn', 'latin letter wynn']);
  this.executeCharTest('«Ü', ['dz with caron', 'dz with caron', 'dz with caron']);
  this.executeCharTest('«â', ['lj', 'lj', 'lj']);
  this.executeCharTest('«å', ['nj', 'nj', 'nj']);
  this.executeCharTest('«£', ['ae with macron', 'ae with macron', 'ae with macron']);
  this.executeCharTest('«Ø', ['ezh with caron', 'ezh with caron', 'ezh with caron']);
  this.executeCharTest('«≥', ['dz', 'dz', 'dz']);
  this.executeCharTest('»ù', ['yogh', 'yogh', 'yogh']);
  this.executeCharTest('…Æ', ['lezh', 'lezh', 'lezh']);
  this.executeCharTest(' í', ['ezh', 'ezh', 'ezh']);
  this.executeCharTest(' ì', ['ezh with curl', 'ezh with curl', 'ezh with curl']);
  this.executeCharTest(' §', ['dezh digraph', 'dezh digraph', 'dezh digraph']);
  this.executeCharTest('«ù', ['turned e', 'turned e', 'turned e']);
  this.executeCharTest('«Ω', ['ae with acute', 'ae with acute', 'ae with acute']);
  this.executeCharTest('»°', ['d with curl', 'd with curl', 'd with curl']);
  this.executeCharTest('»£', ['ou', 'ou', 'ou']);
  this.executeCharTest('»•', ['z with hook', 'z with hook', 'z with hook']);
  this.executeCharTest('»¥', ['l with curl', 'l with curl', 'l with curl']);
  this.executeCharTest('»µ', ['n with curl', 'n with curl', 'n with curl']);
  this.executeCharTest('»∂', ['t with curl', 't with curl', 't with curl']);
  this.executeCharTest('»∏', ['db digraph', 'db digraph', 'db digraph']);
  this.executeCharTest('»π', ['qp digraph', 'qp digraph', 'qp digraph']);
  this.executeCharTest('»ø', ['s with swash tail', 's with swash tail', 's with swash tail']);
  this.executeCharTest('…Ä', ['z with swash tail', 'z with swash tail', 'z with swash tail']);
  this.executeCharTest('…Ç', ['glottal stop', 'glottal stop', 'glottal stop']);
  this.executeCharTest('…ã', ['q with hook tail', 'q with hook tail', 'q with hook tail']);
  this.executeCharTest('…ê', ['turned a', 'turned a', 'turned a']);
  this.executeCharTest('…ë', ['alpha', 'alpha', 'alpha']);
  this.executeCharTest('…í', ['turned alpha', 'turned alpha', 'turned alpha']);
  this.executeCharTest('…ì', ['b with hook', 'b with hook', 'b with hook']);
  this.executeCharTest('…î', ['open o', 'open o', 'open o']);
  this.executeCharTest('…ï', ['c with curl', 'c with curl', 'c with curl']);
  this.executeCharTest('…ñ', ['d with tail', 'd with tail', 'd with tail']);
  this.executeCharTest('…ó', ['d with hook', 'd with hook', 'd with hook']);
  this.executeCharTest('…ò', ['reversed e', 'reversed e', 'reversed e']);
  this.executeCharTest('…ô', ['schwa', 'schwa', 'schwa']);
  this.executeCharTest('…ö', ['schwa with hook', 'schwa with hook', 'schwa with hook']);
  this.executeCharTest('…õ', ['e abierta', 'e abierta', 'e abierta']);
  this.executeCharTest('…ú', ['reversed open e', 'reversed open e', 'reversed open e']);
  this.executeCharTest('…ù', ['reversed open e with hook', 'reversed open e with hook', 'reversed open e with hook']);
  this.executeCharTest('…û', ['closed reversed open e', 'closed reversed open e', 'closed reversed open e']);
  this.executeCharTest('…†', ['g with hook', 'g with hook', 'g with hook']);
  this.executeCharTest('…°', ['script g', 'script g', 'script g']);
  this.executeCharTest('…£', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('…§', ['rams horn', 'rams horn', 'rams horn']);
  this.executeCharTest('…•', ['turned h', 'turned h', 'turned h']);
  this.executeCharTest('…¶', ['h with hook', 'h with hook', 'h with hook']);
  this.executeCharTest('…ß', ['heng with hook', 'heng with hook', 'heng with hook']);
  this.executeCharTest('…©', ['iota', 'iota', 'iota']);
  this.executeCharTest('…´', ['l with middle tilde', 'l with middle tilde', 'l with middle tilde']);
  this.executeCharTest('…¨', ['l with belt', 'l with belt', 'l with belt']);
  this.executeCharTest('…≠', ['l with retroflex hook', 'l with retroflex hook', 'l with retroflex hook']);
  this.executeCharTest('…Ø', ['turned m', 'turned m', 'turned m']);
  this.executeCharTest('…∞', ['turned m with long leg', 'turned m with long leg', 'turned m with long leg']);
  this.executeCharTest('…±', ['m with hook', 'm with hook', 'm with hook']);
  this.executeCharTest('…≤', ['n with left hook', 'n with left hook', 'n with left hook']);
  this.executeCharTest('…≥', ['n with retroflex hook', 'n with retroflex hook', 'n with retroflex hook']);
  this.executeCharTest('…µ', ['barred o', 'barred o', 'barred o']);
  this.executeCharTest('…∑', ['closed omega', 'closed omega', 'closed omega']);
  this.executeCharTest('…∏', ['phi', 'phi', 'phi']);
  this.executeCharTest('…π', ['turned r', 'turned r', 'turned r']);
  this.executeCharTest('…∫', ['turned r with long leg', 'turned r with long leg', 'turned r with long leg']);
  this.executeCharTest('…ª', ['turned r with hook', 'turned r with hook', 'turned r with hook']);
  this.executeCharTest('…º', ['r with long leg', 'r with long leg', 'r with long leg']);
  this.executeCharTest('…Ω', ['r with tail', 'r with tail', 'r with tail']);
  this.executeCharTest('…æ', ['r with fishhook', 'r with fishhook', 'r with fishhook']);
  this.executeCharTest('…ø', ['reversed r with fishhook', 'reversed r with fishhook', 'reversed r with fishhook']);
  this.executeCharTest(' Ç', ['s with hook', 's with hook', 's with hook']);
  this.executeCharTest(' É', ['esh', 'esh', 'esh']);
  this.executeCharTest(' Ö', ['squat reversed esh', 'squat reversed esh', 'squat reversed esh']);
  this.executeCharTest(' Ü', ['esh with curl', 'esh with curl', 'esh with curl']);
  this.executeCharTest(' á', ['turned t', 'turned t', 'turned t']);
  this.executeCharTest(' à', ['t with retroflex hook', 't with retroflex hook', 't with retroflex hook']);
  this.executeCharTest(' â', ['u bar', 'u bar', 'u bar']);
  this.executeCharTest(' ä', ['upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest(' ã', ['v with hook', 'v with hook', 'v with hook']);
  this.executeCharTest(' å', ['turned v', 'turned v', 'turned v']);
  this.executeCharTest(' ç', ['turned w', 'turned w', 'turned w']);
  this.executeCharTest(' é', ['turned y', 'turned y', 'turned y']);
  this.executeCharTest(' ê', ['z with retroflex hook', 'z with retroflex hook', 'z with retroflex hook']);
  this.executeCharTest(' ë', ['z with curl', 'z with curl', 'z with curl']);
  this.executeCharTest(' ï', ['latin letter pharyngeal voiced fricative', 'latin letter pharyngeal voiced fricative', 'latin letter pharyngeal voiced fricative']);
  this.executeCharTest(' ñ', ['latin letter inverted glottal stop', 'latin letter inverted glottal stop', 'latin letter inverted glottal stop']);
  this.executeCharTest(' ó', ['latin letter stretched c', 'latin letter stretched c', 'latin letter stretched c']);
  this.executeCharTest(' ò', ['latin letter bilabial click', 'latin letter bilabial click', 'latin letter bilabial click']);
  this.executeCharTest(' ö', ['closed open e', 'closed open e', 'closed open e']);
  this.executeCharTest(' û', ['turned k', 'turned k', 'turned k']);
  this.executeCharTest(' †', ['q with hook', 'q with hook', 'q with hook']);
  this.executeCharTest(' £', ['dz digraph', 'dz digraph', 'dz digraph']);
  this.executeCharTest(' •', ['dz digraph with curl', 'dz digraph with curl', 'dz digraph with curl']);
  this.executeCharTest(' ¶', ['ts digraph', 'ts digraph', 'ts digraph']);
  this.executeCharTest(' ß', ['tesh digraph', 'tesh digraph', 'tesh digraph']);
  this.executeCharTest(' ®', ['tc digraph with curl', 'tc digraph with curl', 'tc digraph with curl']);
  this.executeCharTest(' ©', ['feng digraph', 'feng digraph', 'feng digraph']);
  this.executeCharTest(' ™', ['ls digraph', 'ls digraph', 'ls digraph']);
  this.executeCharTest(' ´', ['lz digraph', 'lz digraph', 'lz digraph']);
  this.executeCharTest(' ¨', ['latin letter bilabial percussive', 'latin letter bilabial percussive', 'latin letter bilabial percussive']);
  this.executeCharTest(' ≠', ['latin letter bidental percussive', 'latin letter bidental percussive', 'latin letter bidental percussive']);
  this.executeCharTest(' Æ', ['turned h with fishhook', 'turned h with fishhook', 'turned h with fishhook']);
  this.executeCharTest(' Ø', ['turned h with fishhook and tail', 'turned h with fishhook and tail', 'turned h with fishhook and tail']);
  this.executeCharTest('·¥Ç', ['turned ae', 'turned ae', 'turned ae']);
  this.executeCharTest('·¥à', ['turned open e', 'turned open e', 'turned open e']);
  this.executeCharTest('·¥â', ['turned i', 'turned i', 'turned i']);
  this.executeCharTest('·¥ë', ['sideways o', 'sideways o', 'sideways o']);
  this.executeCharTest('·¥í', ['sideways open o', 'sideways open o', 'sideways open o']);
  this.executeCharTest('·¥î', ['turned oe', 'turned oe', 'turned oe']);
  this.executeCharTest('·¥ñ', ['top half o', 'top half o', 'top half o']);
  this.executeCharTest('·¥ó', ['bottom half o', 'bottom half o', 'bottom half o']);
  this.executeCharTest('·¥ù', ['sideways u', 'sideways u', 'sideways u']);
  this.executeCharTest('·¥û', ['sideways diaeresized u', 'sideways diaeresized u', 'sideways diaeresized u']);
  this.executeCharTest('·¥ü', ['sideways turned m', 'sideways turned m', 'sideways turned m']);
  this.executeCharTest('·¥§', ['latin letter voiced laryngeal spirant', 'latin letter voiced laryngeal spirant', 'latin letter voiced laryngeal spirant']);
  this.executeCharTest('·¥•', ['latin letter ain', 'latin letter ain', 'latin letter ain']);
  this.executeCharTest('·µ´', ['ue', 'ue', 'ue']);
  this.executeCharTest('·µ¨', ['b with middle tilde', 'b with middle tilde', 'b with middle tilde']);
  this.executeCharTest('·µ≠', ['d with middle tilde', 'd with middle tilde', 'd with middle tilde']);
  this.executeCharTest('·µÆ', ['f with middle tilde', 'f with middle tilde', 'f with middle tilde']);
  this.executeCharTest('·µØ', ['m with middle tilde', 'm with middle tilde', 'm with middle tilde']);
  this.executeCharTest('·µ∞', ['n with middle tilde', 'n with middle tilde', 'n with middle tilde']);
  this.executeCharTest('·µ±', ['p with middle tilde', 'p with middle tilde', 'p with middle tilde']);
  this.executeCharTest('·µ≤', ['r with middle tilde', 'r with middle tilde', 'r with middle tilde']);
  this.executeCharTest('·µ≥', ['r with fishhook and middle tilde', 'r with fishhook and middle tilde', 'r with fishhook and middle tilde']);
  this.executeCharTest('·µ¥', ['s with middle tilde', 's with middle tilde', 's with middle tilde']);
  this.executeCharTest('·µµ', ['t with middle tilde', 't with middle tilde', 't with middle tilde']);
  this.executeCharTest('·µ∂', ['z with middle tilde', 'z with middle tilde', 'z with middle tilde']);
  this.executeCharTest('·µ∑', ['turned g', 'turned g', 'turned g']);
  this.executeCharTest('·µπ', ['insular g', 'insular g', 'insular g']);
  this.executeCharTest('·µ∫', ['th with strikethrough', 'th with strikethrough', 'th with strikethrough']);
  this.executeCharTest('·∂Ä', ['b with palatal hook', 'b with palatal hook', 'b with palatal hook']);
  this.executeCharTest('·∂Å', ['d with palatal hook', 'd with palatal hook', 'd with palatal hook']);
  this.executeCharTest('·∂Ç', ['f with palatal hook', 'f with palatal hook', 'f with palatal hook']);
  this.executeCharTest('·∂É', ['g with palatal hook', 'g with palatal hook', 'g with palatal hook']);
  this.executeCharTest('·∂Ñ', ['k with palatal hook', 'k with palatal hook', 'k with palatal hook']);
  this.executeCharTest('·∂Ö', ['l with palatal hook', 'l with palatal hook', 'l with palatal hook']);
  this.executeCharTest('·∂Ü', ['m with palatal hook', 'm with palatal hook', 'm with palatal hook']);
  this.executeCharTest('·∂á', ['n with palatal hook', 'n with palatal hook', 'n with palatal hook']);
  this.executeCharTest('·∂à', ['p with palatal hook', 'p with palatal hook', 'p with palatal hook']);
  this.executeCharTest('·∂â', ['r with palatal hook', 'r with palatal hook', 'r with palatal hook']);
  this.executeCharTest('·∂ä', ['s with palatal hook', 's with palatal hook', 's with palatal hook']);
  this.executeCharTest('·∂ã', ['esh with palatal hook', 'esh with palatal hook', 'esh with palatal hook']);
  this.executeCharTest('·∂å', ['v with palatal hook', 'v with palatal hook', 'v with palatal hook']);
  this.executeCharTest('·∂ç', ['x with palatal hook', 'x with palatal hook', 'x with palatal hook']);
  this.executeCharTest('·∂é', ['z with palatal hook', 'z with palatal hook', 'z with palatal hook']);
  this.executeCharTest('·∂è', ['a with retroflex hook', 'a with retroflex hook', 'a with retroflex hook']);
  this.executeCharTest('·∂ê', ['alpha with retroflex hook', 'alpha with retroflex hook', 'alpha with retroflex hook']);
  this.executeCharTest('·∂ë', ['d with hook and tail', 'd with hook and tail', 'd with hook and tail']);
  this.executeCharTest('·∂í', ['e with retroflex hook', 'e with retroflex hook', 'e with retroflex hook']);
  this.executeCharTest('·∂ì', ['open e with retroflex hook', 'open e with retroflex hook', 'open e with retroflex hook']);
  this.executeCharTest('·∂î', ['reversed open e with retroflex hook', 'reversed open e with retroflex hook', 'reversed open e with retroflex hook']);
  this.executeCharTest('·∂ï', ['schwa with retroflex hook', 'schwa with retroflex hook', 'schwa with retroflex hook']);
  this.executeCharTest('·∂ñ', ['i with retroflex hook', 'i with retroflex hook', 'i with retroflex hook']);
  this.executeCharTest('·∂ó', ['open o with retroflex hook', 'open o with retroflex hook', 'open o with retroflex hook']);
  this.executeCharTest('·∂ò', ['esh with retroflex hook', 'esh with retroflex hook', 'esh with retroflex hook']);
  this.executeCharTest('·∂ô', ['u with retroflex hook', 'u with retroflex hook', 'u with retroflex hook']);
  this.executeCharTest('·∂ö', ['ezh with retroflex hook', 'ezh with retroflex hook', 'ezh with retroflex hook']);
  this.executeCharTest('≈â', ['n precedida por ap√≥strofe', 'n precedida por ap√≥strofe', 'n precedida por ap√≥strofe']);
  this.executeCharTest('≈ã', ['eng', 'eng', 'eng']);
  this.executeCharTest('√†', ['a grave', 'a grave', 'a grave']);
  this.executeCharTest('√°', ['a aguda', 'a aguda', 'a aguda']);
  this.executeCharTest('√¢', ['a acento circunflejo', 'a acento circunflejo', 'a acento circunflejo']);
  this.executeCharTest('√£', ['a con tilde', 'a con tilde', 'a con tilde']);
  this.executeCharTest('√§', ['a di√©resis', 'a di√©resis', 'a di√©resis']);
  this.executeCharTest('√•', ['a con anillo', 'a con anillo', 'a con anillo']);
  this.executeCharTest('√ß', ['c cedilla', 'c cedilla', 'c cedilla']);
  this.executeCharTest('√®', ['e grave', 'e grave', 'e grave']);
  this.executeCharTest('√©', ['e aguda', 'e aguda', 'e aguda']);
  this.executeCharTest('√™', ['e acento circunflejo', 'e acento circunflejo', 'e acento circunflejo']);
  this.executeCharTest('√´', ['e di√©resis', 'e di√©resis', 'e di√©resis']);
  this.executeCharTest('√¨', ['i grave', 'i grave', 'i grave']);
  this.executeCharTest('√≠', ['i aguda', 'i aguda', 'i aguda']);
  this.executeCharTest('√Æ', ['i acento circunflejo', 'i acento circunflejo', 'i acento circunflejo']);
  this.executeCharTest('√Ø', ['i di√©resis', 'i di√©resis', 'i di√©resis']);
  this.executeCharTest('√±', ['e√±e', 'e√±e', 'e√±e']);
  this.executeCharTest('√≤', ['o grave', 'o grave', 'o grave']);
  this.executeCharTest('√≥', ['o aguda', 'o aguda', 'o aguda']);
  this.executeCharTest('√¥', ['o acento circunflejo', 'o acento circunflejo', 'o acento circunflejo']);
  this.executeCharTest('√µ', ['o con tilde', 'o con tilde', 'o con tilde']);
  this.executeCharTest('√∂', ['o di√©resis', 'o di√©resis', 'o di√©resis']);
  this.executeCharTest('√π', ['u grave', 'u grave', 'u grave']);
  this.executeCharTest('√∫', ['u aguda', 'u aguda', 'u aguda']);
  this.executeCharTest('√ª', ['u acento circunflejo', 'u acento circunflejo', 'u acento circunflejo']);
  this.executeCharTest('√º', ['u di√©resis', 'u di√©resis', 'u di√©resis']);
  this.executeCharTest('√Ω', ['Y aguda', 'Y aguda', 'Y aguda']);
  this.executeCharTest('√ø', ['y di√©resis', 'y di√©resis', 'y di√©resis']);
  this.executeCharTest('ƒÅ', ['a barra', 'a barra', 'a barra']);
  this.executeCharTest('ƒÉ', ['a con breve', 'a con breve', 'a con breve']);
  this.executeCharTest('ƒÖ', ['a con ogonek', 'a con ogonek', 'a con ogonek']);
  this.executeCharTest('ƒá', ['c con agudo', 'c con agudo', 'c con agudo']);
  this.executeCharTest('ƒâ', ['c con acento circunflejo', 'c con acento circunflejo', 'c con acento circunflejo']);
  this.executeCharTest('ƒã', ['c con punto arriba', 'c con punto arriba', 'c con punto arriba']);
  this.executeCharTest('ƒç', ['c con car√≥n', 'c con car√≥n', 'c con car√≥n']);
  this.executeCharTest('ƒè', ['d con car√≥n', 'd con car√≥n', 'd con car√≥n']);
  this.executeCharTest('ƒì', ['e barra', 'e barra', 'e barra']);
  this.executeCharTest('ƒï', ['modifying above e with breve', 'mod above e with breve', 'mod above e with breve']);
  this.executeCharTest('ƒó', ['e con punto arriba', 'e con punto arriba', 'e con punto arriba']);
  this.executeCharTest('ƒô', ['e con ogonek', 'e con ogonek', 'e con ogonek']);
  this.executeCharTest('ƒõ', ['e con car√≥n', 'e con car√≥n', 'e con car√≥n']);
  this.executeCharTest('ƒù', ['g con acento circunflejo', 'g con acento circunflejo', 'g con acento circunflejo']);
  this.executeCharTest('ƒü', ['g con breve', 'g con breve', 'g con breve']);
  this.executeCharTest('ƒ°', ['g con punto arriba', 'g con punto arriba', 'g con punto arriba']);
  this.executeCharTest('ƒ£', ['modifying above g with cedilla', 'mod above g with cedilla', 'mod above g with cedilla']);
  this.executeCharTest('ƒ•', ['h con acento circunflejo', 'h con acento circunflejo', 'h con acento circunflejo']);
  this.executeCharTest('ƒ©', ['i con tilde', 'i con tilde', 'i con tilde']);
  this.executeCharTest('ƒ´', ['i barra', 'i barra', 'i barra']);
  this.executeCharTest('ƒ≠', ['modifying above i with breve', 'mod above i with breve', 'mod above i with breve']);
  this.executeCharTest('ƒØ', ['i con ogonek', 'i con ogonek', 'i con ogonek']);
  this.executeCharTest('ƒ±', ['i sin punto', 'i sin punto', 'i sin punto']);
  this.executeCharTest('ƒµ', ['j con acento circunflejo', 'j con acento circunflejo', 'j con acento circunflejo']);
  this.executeCharTest('ƒ∑', ['k con cedilla', 'k con cedilla', 'k con cedilla']);
  this.executeCharTest('ƒ∫', ['l con agudo', 'l con agudo', 'l con agudo']);
  this.executeCharTest('ƒº', ['l con cedilla', 'l con cedilla', 'l con cedilla']);
  this.executeCharTest('ƒæ', ['l con car√≥n', 'l con car√≥n', 'l con car√≥n']);
  this.executeCharTest('≈Ä', ['l con punto mediano', 'l con punto mediano', 'l con punto mediano']);
  this.executeCharTest('≈Ñ', ['n con agudo', 'n con agudo', 'n con agudo']);
  this.executeCharTest('≈Ü', ['n con cedilla', 'n con cedilla', 'n con cedilla']);
  this.executeCharTest('≈à', ['n con car√≥n', 'n con car√≥n', 'n con car√≥n']);
  this.executeCharTest('≈ç', ['o barra', 'o barra', 'o barra']);
  this.executeCharTest('≈è', ['modifying above o with breve', 'mod above o with breve', 'mod above o with breve']);
  this.executeCharTest('≈ë', ['o con doble acento agudo', 'o con doble acento agudo', 'o con doble acento agudo']);
  this.executeCharTest('≈ï', ['r con agudo', 'r con agudo', 'r con agudo']);
  this.executeCharTest('≈ó', ['r con cedilla', 'r con cedilla', 'r con cedilla']);
  this.executeCharTest('≈ô', ['r con car√≥n', 'r con car√≥n', 'r con car√≥n']);
  this.executeCharTest('≈õ', ['s con agudo', 's con agudo', 's con agudo']);
  this.executeCharTest('≈ù', ['s con acento circunflejo', 's con acento circunflejo', 's con acento circunflejo']);
  this.executeCharTest('≈ü', ['s con cedilla', 's con cedilla', 's con cedilla']);
  this.executeCharTest('≈°', ['s con car√≥n', 's con car√≥n', 's con car√≥n']);
  this.executeCharTest('≈£', ['t con cedilla', 't con cedilla', 't con cedilla']);
  this.executeCharTest('≈•', ['t con car√≥n', 't con car√≥n', 't con car√≥n']);
  this.executeCharTest('≈©', ['u con tilde', 'u con tilde', 'u con tilde']);
  this.executeCharTest('≈´', ['u barra', 'u barra', 'u barra']);
  this.executeCharTest('≈≠', ['u con breve', 'u con breve', 'u con breve']);
  this.executeCharTest('≈Ø', ['u con anillo arriba', 'u con anillo arriba', 'u con anillo arriba']);
  this.executeCharTest('≈±', ['u con doble acento agudo', 'u con doble acento agudo', 'u con doble acento agudo']);
  this.executeCharTest('≈≥', ['u con ogonek', 'u con ogonek', 'u con ogonek']);
  this.executeCharTest('≈µ', ['w con circunflejo', 'w con circunflejo', 'w con circunflejo']);
  this.executeCharTest('≈∑', ['y con circunflejo', 'y con circunflejo', 'y con circunflejo']);
  this.executeCharTest('≈∫', ['z con agudo', 'z con agudo', 'z con agudo']);
  this.executeCharTest('≈º', ['z con punto', 'z con punto', 'z con punto']);
  this.executeCharTest('≈æ', ['z con car√≥n', 'z con car√≥n', 'z con car√≥n']);
  this.executeCharTest('«é', ['modifying above a with caron', 'mod above a with caron', 'mod above a with caron']);
  this.executeCharTest('«ê', ['modifying above i with caron', 'mod above i with caron', 'mod above i with caron']);
  this.executeCharTest('«í', ['modifying above o with caron', 'mod above o with caron', 'mod above o with caron']);
  this.executeCharTest('«î', ['modifying above u with caron', 'mod above u with caron', 'mod above u with caron']);
  this.executeCharTest('«ß', ['modifying above g with caron', 'mod above g with caron', 'mod above g with caron']);
  this.executeCharTest('«©', ['modifying above k with caron', 'mod above k with caron', 'mod above k with caron']);
  this.executeCharTest('«´', ['modifying above o with ogonek', 'mod above o with ogonek', 'mod above o with ogonek']);
  this.executeCharTest('«∞', ['modifying above j with caron', 'mod above j with caron', 'mod above j with caron']);
  this.executeCharTest('«µ', ['g con agudo', 'g con agudo', 'g con agudo']);
  this.executeCharTest('«π', ['modifying above n with grave', 'mod above n with grave', 'mod above n with grave']);
  this.executeCharTest('»Å', ['modifying above a with double grave', 'mod above a with double grave', 'mod above a with double grave']);
  this.executeCharTest('»É', ['modifying above a with inverted breve', 'mod above a with inverted breve', 'mod above a with inverted breve']);
  this.executeCharTest('»Ö', ['modifying above e with double grave', 'mod above e with double grave', 'mod above e with double grave']);
  this.executeCharTest('»á', ['modifying above e with inverted breve', 'mod above e with inverted breve', 'mod above e with inverted breve']);
  this.executeCharTest('»â', ['modifying above i with double grave', 'mod above i with double grave', 'mod above i with double grave']);
  this.executeCharTest('»ã', ['modifying above i with inverted breve', 'mod above i with inverted breve', 'mod above i with inverted breve']);
  this.executeCharTest('»ç', ['modifying above o with double grave', 'mod above o with double grave', 'mod above o with double grave']);
  this.executeCharTest('»è', ['modifying above o with inverted breve', 'mod above o with inverted breve', 'mod above o with inverted breve']);
  this.executeCharTest('»ë', ['modifying above r with double grave', 'mod above r with double grave', 'mod above r with double grave']);
  this.executeCharTest('»ì', ['modifying above r with inverted breve', 'mod above r with inverted breve', 'mod above r with inverted breve']);
  this.executeCharTest('»ï', ['modifying above u with double grave', 'mod above u with double grave', 'mod above u with double grave']);
  this.executeCharTest('»ó', ['modifying above u with inverted breve', 'mod above u with inverted breve', 'mod above u with inverted breve']);
  this.executeCharTest('»ô', ['modifying below s with comma below', 'mod below s with comma below', 'mod below s with comma below']);
  this.executeCharTest('»õ', ['modifying below t with comma below', 'mod below t with comma below', 'mod below t with comma below']);
  this.executeCharTest('»ü', ['modifying above h with caron', 'mod above h with caron', 'mod above h with caron']);
  this.executeCharTest('»ß', ['modifying above a with dot', 'mod above a with dot', 'mod above a with dot']);
  this.executeCharTest('»©', ['modifying above e with cedilla', 'mod above e with cedilla', 'mod above e with cedilla']);
  this.executeCharTest('»Ø', ['modifying above o with dot', 'mod above o with dot', 'mod above o with dot']);
  this.executeCharTest('»≥', ['y overbar', 'y overbar', 'y overbar']);
  this.executeCharTest('»∑', ['modifying above dotless j', 'mod above dotless j', 'mod above dotless j']);
  this.executeCharTest('·∏Å', ['a con anillo debajo', 'a con anillo debajo', 'a con anillo debajo']);
  this.executeCharTest('·∏É', ['b con punto arriba', 'b con punto arriba', 'b con punto arriba']);
  this.executeCharTest('·∏Ö', ['b con punto debajo', 'b con punto debajo', 'b con punto debajo']);
  this.executeCharTest('·∏á', ['b con l√≠nea debajo', 'b con l√≠nea debajo', 'b con l√≠nea debajo']);
  this.executeCharTest('·∏ã', ['d con punto arriba', 'd con punto arriba', 'd con punto arriba']);
  this.executeCharTest('·∏ç', ['d con punto debajo', 'd con punto debajo', 'd con punto debajo']);
  this.executeCharTest('·∏è', ['d con l√≠nea debajo', 'd con l√≠nea debajo', 'd con l√≠nea debajo']);
  this.executeCharTest('·∏ë', ['d con cedilla', 'd con cedilla', 'd con cedilla']);
  this.executeCharTest('·∏ì', ['d con acento circunflejo debajo', 'd con acento circunflejo debajo', 'd con acento circunflejo debajo']);
  this.executeCharTest('·∏ô', ['e con acento circunflejo debajo', 'e con acento circunflejo debajo', 'e con acento circunflejo debajo']);
  this.executeCharTest('·∏õ', ['e con tilde debajo', 'e con tilde debajo', 'e con tilde debajo']);
  this.executeCharTest('·∏ü', ['f con punto arriba', 'f con punto arriba', 'f con punto arriba']);
  this.executeCharTest('·∏°', ['g con macr√≥n', 'g con macr√≥n', 'g con macr√≥n']);
  this.executeCharTest('·∏£', ['h con punto arriba', 'h con punto arriba', 'h con punto arriba']);
  this.executeCharTest('·∏•', ['h con punto debajo', 'h con punto debajo', 'h con punto debajo']);
  this.executeCharTest('·∏ß', ['h con di√©resis', 'h con di√©resis', 'h con di√©resis']);
  this.executeCharTest('·∏©', ['h con cedilla', 'h con cedilla', 'h con cedilla']);
  this.executeCharTest('·∏´', ['h con breve debajo', 'h con breve debajo', 'h con breve debajo']);
  this.executeCharTest('·∏≠', ['i con tilde debajo', 'i con tilde debajo', 'i con tilde debajo']);
  this.executeCharTest('·∏±', ['k con agudo', 'k con agudo', 'k con agudo']);
  this.executeCharTest('·∏≥', ['k con punto debajo', 'k con punto debajo', 'k con punto debajo']);
  this.executeCharTest('·∏µ', ['k con l√≠nea debajo', 'k con l√≠nea debajo', 'k con l√≠nea debajo']);
  this.executeCharTest('·∏∑', ['l con punto debajo', 'l con punto debajo', 'l con punto debajo']);
  this.executeCharTest('·∏ª', ['l con l√≠nea debajo', 'l con l√≠nea debajo', 'l con l√≠nea debajo']);
  this.executeCharTest('·∏Ω', ['l con acento circunflejo debajo', 'l con acento circunflejo debajo', 'l con acento circunflejo debajo']);
  this.executeCharTest('·∏ø', ['m con agudo', 'm con agudo', 'm con agudo']);
  this.executeCharTest('·πÅ', ['m con punto arriba', 'm con punto arriba', 'm con punto arriba']);
  this.executeCharTest('·πÉ', ['m con punto debajo', 'm con punto debajo', 'm con punto debajo']);
  this.executeCharTest('·πÖ', ['n con punto arriba', 'n con punto arriba', 'n con punto arriba']);
  this.executeCharTest('·πá', ['n con punto debajo', 'n con punto debajo', 'n con punto debajo']);
  this.executeCharTest('·πâ', ['n con l√≠nea debajo', 'n con l√≠nea debajo', 'n con l√≠nea debajo']);
  this.executeCharTest('·πã', ['n con acento circunflejo debajo', 'n con acento circunflejo debajo', 'n con acento circunflejo debajo']);
  this.executeCharTest('·πï', ['p con agudo', 'p con agudo', 'p con agudo']);
  this.executeCharTest('·πó', ['p con punto arriba', 'p con punto arriba', 'p con punto arriba']);
  this.executeCharTest('·πô', ['r con punto arriba', 'r con punto arriba', 'r con punto arriba']);
  this.executeCharTest('·πõ', ['r con punto debajo', 'r con punto debajo', 'r con punto debajo']);
  this.executeCharTest('·πü', ['r con l√≠nea debajo', 'r con l√≠nea debajo', 'r con l√≠nea debajo']);
  this.executeCharTest('·π°', ['s con punto arriba', 's con punto arriba', 's con punto arriba']);
  this.executeCharTest('·π£', ['s con punto debajo', 's con punto debajo', 's con punto debajo']);
  this.executeCharTest('·π´', ['t con punto arriba', 't con punto arriba', 't con punto arriba']);
  this.executeCharTest('·π≠', ['t con punto debajo', 't con punto debajo', 't con punto debajo']);
  this.executeCharTest('·πØ', ['t con l√≠nea debajo', 't con l√≠nea debajo', 't con l√≠nea debajo']);
  this.executeCharTest('·π±', ['t con acento circunflejo debajo', 't con acento circunflejo debajo', 't con acento circunflejo debajo']);
  this.executeCharTest('·π≥', ['u con di√©resis debajo', 'u con di√©resis debajo', 'u con di√©resis debajo']);
  this.executeCharTest('·πµ', ['u con tilde debajo', 'u con tilde debajo', 'u con tilde debajo']);
  this.executeCharTest('·π∑', ['u con acento circunflejo debajo', 'u con acento circunflejo debajo', 'u con acento circunflejo debajo']);
  this.executeCharTest('·πΩ', ['v con tilde', 'v con tilde', 'v con tilde']);
  this.executeCharTest('·πø', ['v con punto debajo', 'v con punto debajo', 'v con punto debajo']);
  this.executeCharTest('·∫Å', ['w con grave', 'w con grave', 'w con grave']);
  this.executeCharTest('·∫É', ['w con agudo', 'w con agudo', 'w con agudo']);
  this.executeCharTest('·∫Ö', ['w con di√©resis', 'w con di√©resis', 'w con di√©resis']);
  this.executeCharTest('·∫á', ['w con punto arriba', 'w con punto arriba', 'w con punto arriba']);
  this.executeCharTest('·∫â', ['w con punto debajo', 'w con punto debajo', 'w con punto debajo']);
  this.executeCharTest('·∫ã', ['x con punto arriba', 'x con punto arriba', 'x con punto arriba']);
  this.executeCharTest('·∫ç', ['x con di√©resis', 'x con di√©resis', 'x con di√©resis']);
  this.executeCharTest('·∫è', ['y con punto arriba', 'y con punto arriba', 'y con punto arriba']);
  this.executeCharTest('·∫ë', ['z con acento circunflejo', 'z con acento circunflejo', 'z con acento circunflejo']);
  this.executeCharTest('·∫ì', ['z con punto debajo', 'z con punto debajo', 'z con punto debajo']);
  this.executeCharTest('·∫ï', ['z con l√≠nea debajo', 'z con l√≠nea debajo', 'z con l√≠nea debajo']);
  this.executeCharTest('·∫ñ', ['h con l√≠nea debajo', 'h con l√≠nea debajo', 'h con l√≠nea debajo']);
  this.executeCharTest('·∫ó', ['t con di√©resis', 't con di√©resis', 't con di√©resis']);
  this.executeCharTest('·∫ò', ['w con anillo arriba', 'w con anillo arriba', 'w con anillo arriba']);
  this.executeCharTest('·∫ô', ['y con anillo arriba', 'y con anillo arriba', 'y con anillo arriba']);
  this.executeCharTest('·∫ö', ['a con medio derecho de anillo', 'a con medio derecho de anillo', 'a con medio derecho de anillo']);
  this.executeCharTest('·∫°', ['a con punto debajo', 'a con punto debajo', 'a con punto debajo']);
  this.executeCharTest('·∫£', ['a con gancho arriba', 'a con gancho arriba', 'a con gancho arriba']);
  this.executeCharTest('·∫π', ['e con punto debajo', 'e con punto debajo', 'e con punto debajo']);
  this.executeCharTest('·∫ª', ['e con gancho arriba', 'e con gancho arriba', 'e con gancho arriba']);
  this.executeCharTest('·∫Ω', ['e con tilde', 'e con tilde', 'e con tilde']);
  this.executeCharTest('·ªâ', ['i con gancho arriba', 'i con gancho arriba', 'i con gancho arriba']);
  this.executeCharTest('·ªã', ['i con punto debajo', 'i con punto debajo', 'i con punto debajo']);
  this.executeCharTest('·ªç', ['o con punto debajo', 'o con punto debajo', 'o con punto debajo']);
  this.executeCharTest('·ªè', ['o con gancho arriba', 'o con gancho arriba', 'o con gancho arriba']);
  this.executeCharTest('·ª•', ['u con punto debajo', 'u con punto debajo', 'u con punto debajo']);
  this.executeCharTest('·ªß', ['u con gancho arriba', 'u con gancho arriba', 'u con gancho arriba']);
  this.executeCharTest('·ª≥', ['y con grave', 'y con grave', 'y con grave']);
  this.executeCharTest('·ªµ', ['y con punto debajo', 'y con punto debajo', 'y con punto debajo']);
  this.executeCharTest('·ª∑', ['y con gancho arriba', 'y con gancho arriba', 'y con gancho arriba']);
  this.executeCharTest('·ªπ', ['y con tilde', 'y con tilde', 'y con tilde']);
  this.executeCharTest('Õ£', ['combining a', 'combining a', 'combining a']);
  this.executeCharTest('Õ§', ['combining e', 'combining e', 'combining e']);
  this.executeCharTest('Õ•', ['combining i', 'combining i', 'combining i']);
  this.executeCharTest('Õ¶', ['combining o', 'combining o', 'combining o']);
  this.executeCharTest('Õß', ['combining u', 'combining u', 'combining u']);
  this.executeCharTest('Õ®', ['combining c', 'combining c', 'combining c']);
  this.executeCharTest('Õ©', ['combining d', 'combining d', 'combining d']);
  this.executeCharTest('Õ™', ['combining h', 'combining h', 'combining h']);
  this.executeCharTest('Õ´', ['combining m', 'combining m', 'combining m']);
  this.executeCharTest('Õ¨', ['combining r', 'combining r', 'combining r']);
  this.executeCharTest('Õ≠', ['combining t', 'combining t', 'combining t']);
  this.executeCharTest('ÕÆ', ['combining v', 'combining v', 'combining v']);
  this.executeCharTest('ÕØ', ['combining x', 'combining x', 'combining x']);
  this.executeCharTest('·µ¢', ['subscript i', 'subscript i', 'subscript i']);
  this.executeCharTest('·µ£', ['subscript r', 'subscript r', 'subscript r']);
  this.executeCharTest('·µ§', ['subscript u', 'subscript u', 'subscript u']);
  this.executeCharTest('·µ•', ['subscript v', 'subscript v', 'subscript v']);
  this.executeCharTest('·∑ä', ['combining r below', 'combining r below', 'combining r below']);
  this.executeCharTest('·∑ì', ['combining flattened open a above', 'combining flattened open a above', 'combining flattened open a above']);
  this.executeCharTest('·∑î', ['combining ae', 'combining ae', 'combining ae']);
  this.executeCharTest('·∑ï', ['combining ao', 'combining ao', 'combining ao']);
  this.executeCharTest('·∑ñ', ['combining av', 'combining av', 'combining av']);
  this.executeCharTest('·∑ó', ['combining c cedilla', 'combining c cedilla', 'combining c cedilla']);
  this.executeCharTest('·∑ò', ['combining insular d', 'combining insular d', 'combining insular d']);
  this.executeCharTest('·∑ô', ['combining eth', 'combining eth', 'combining eth']);
  this.executeCharTest('·∑ö', ['combining g', 'combining g', 'combining g']);
  this.executeCharTest('·∑õ', ['combining small upper G', 'combining small upper G', 'combining small upper G']);
  this.executeCharTest('·∑ú', ['combining k', 'combining k', 'combining k']);
  this.executeCharTest('·∑ù', ['combining l', 'combining l', 'combining l']);
  this.executeCharTest('·∑û', ['combining small upper L', 'combining small upper L', 'combining small upper L']);
  this.executeCharTest('·∑ü', ['combining small upper M', 'combining small upper M', 'combining small upper M']);
  this.executeCharTest('·∑†', ['combining n', 'combining n', 'combining n']);
  this.executeCharTest('·∑°', ['combining small upper N', 'combining small upper N', 'combining small upper N']);
  this.executeCharTest('·∑¢', ['combining small upper R', 'combining small upper R', 'combining small upper R']);
  this.executeCharTest('·∑£', ['combining r rotunda', 'combining r rotunda', 'combining r rotunda']);
  this.executeCharTest('·∑§', ['combining s', 'combining s', 'combining s']);
  this.executeCharTest('·∑•', ['combining long s', 'combining long s', 'combining long s']);
  this.executeCharTest('·∑¶', ['combining z', 'combining z', 'combining z']);
  this.executeCharTest('‚Å±', ['superscript i', 'superscript i', 'superscript i']);
  this.executeCharTest('‚Åø', ['superscript n', 'superscript n', 'superscript n']);
  this.executeCharTest('‚Çê', ['subscript a', 'subscript a', 'subscript a']);
  this.executeCharTest('‚Çë', ['subscript e', 'subscript e', 'subscript e']);
  this.executeCharTest('‚Çí', ['subscript o', 'subscript o', 'subscript o']);
  this.executeCharTest('‚Çì', ['subscript x', 'subscript x', 'subscript x']);
  this.executeCharTest('‚Çî', ['subscript schwa', 'subscript schwa', 'subscript schwa']);
  this.executeCharTest('‚Çï', ['subscript h', 'subscript h', 'subscript h']);
  this.executeCharTest('‚Çñ', ['subscript k', 'subscript k', 'subscript k']);
  this.executeCharTest('‚Çó', ['subscript l', 'subscript l', 'subscript l']);
  this.executeCharTest('‚Çò', ['subscript m', 'subscript m', 'subscript m']);
  this.executeCharTest('‚Çô', ['subscript n', 'subscript n', 'subscript n']);
  this.executeCharTest('‚Çö', ['subscript p', 'subscript p', 'subscript p']);
  this.executeCharTest('‚Çõ', ['subscript s', 'subscript s', 'subscript s']);
  this.executeCharTest('‚Çú', ['subscript t', 'subscript t', 'subscript t']);
  this.executeCharTest('‚íú', ['parenthesized a', 'parenthesized a', 'parenthesized a']);
  this.executeCharTest('‚íù', ['parenthesized b', 'parenthesized b', 'parenthesized b']);
  this.executeCharTest('‚íû', ['parenthesized c', 'parenthesized c', 'parenthesized c']);
  this.executeCharTest('‚íü', ['parenthesized d', 'parenthesized d', 'parenthesized d']);
  this.executeCharTest('‚í†', ['parenthesized e', 'parenthesized e', 'parenthesized e']);
  this.executeCharTest('‚í°', ['parenthesized f', 'parenthesized f', 'parenthesized f']);
  this.executeCharTest('‚í¢', ['parenthesized g', 'parenthesized g', 'parenthesized g']);
  this.executeCharTest('‚í£', ['parenthesized h', 'parenthesized h', 'parenthesized h']);
  this.executeCharTest('‚í§', ['parenthesized i', 'parenthesized i', 'parenthesized i']);
  this.executeCharTest('‚í•', ['parenthesized j', 'parenthesized j', 'parenthesized j']);
  this.executeCharTest('‚í¶', ['parenthesized k', 'parenthesized k', 'parenthesized k']);
  this.executeCharTest('‚íß', ['parenthesized l', 'parenthesized l', 'parenthesized l']);
  this.executeCharTest('‚í®', ['parenthesized m', 'parenthesized m', 'parenthesized m']);
  this.executeCharTest('‚í©', ['parenthesized n', 'parenthesized n', 'parenthesized n']);
  this.executeCharTest('‚í™', ['parenthesized o', 'parenthesized o', 'parenthesized o']);
  this.executeCharTest('‚í´', ['parenthesized p', 'parenthesized p', 'parenthesized p']);
  this.executeCharTest('‚í¨', ['parenthesized q', 'parenthesized q', 'parenthesized q']);
  this.executeCharTest('‚í≠', ['parenthesized r', 'parenthesized r', 'parenthesized r']);
  this.executeCharTest('‚íÆ', ['parenthesized s', 'parenthesized s', 'parenthesized s']);
  this.executeCharTest('‚íØ', ['parenthesized t', 'parenthesized t', 'parenthesized t']);
  this.executeCharTest('‚í∞', ['parenthesized u', 'parenthesized u', 'parenthesized u']);
  this.executeCharTest('‚í±', ['parenthesized v', 'parenthesized v', 'parenthesized v']);
  this.executeCharTest('‚í≤', ['parenthesized w', 'parenthesized w', 'parenthesized w']);
  this.executeCharTest('‚í≥', ['parenthesized x', 'parenthesized x', 'parenthesized x']);
  this.executeCharTest('‚í¥', ['parenthesized y', 'parenthesized y', 'parenthesized y']);
  this.executeCharTest('‚íµ', ['parenthesized z', 'parenthesized z', 'parenthesized z']);
  this.executeCharTest('‚í∂', ['circled upper A', 'circled upper A', 'circled upper A']);
  this.executeCharTest('‚í∑', ['circled upper B', 'circled upper B', 'circled upper B']);
  this.executeCharTest('‚í∏', ['circled upper C', 'circled upper C', 'circled upper C']);
  this.executeCharTest('‚íπ', ['circled upper D', 'circled upper D', 'circled upper D']);
  this.executeCharTest('‚í∫', ['circled upper E', 'circled upper E', 'circled upper E']);
  this.executeCharTest('‚íª', ['circled upper F', 'circled upper F', 'circled upper F']);
  this.executeCharTest('‚íº', ['circled upper G', 'circled upper G', 'circled upper G']);
  this.executeCharTest('‚íΩ', ['circled upper H', 'circled upper H', 'circled upper H']);
  this.executeCharTest('‚íæ', ['circled upper I', 'circled upper I', 'circled upper I']);
  this.executeCharTest('‚íø', ['circled upper J', 'circled upper J', 'circled upper J']);
  this.executeCharTest('‚ìÄ', ['circled upper K', 'circled upper K', 'circled upper K']);
  this.executeCharTest('‚ìÅ', ['circled upper L', 'circled upper L', 'circled upper L']);
  this.executeCharTest('‚ìÇ', ['circled upper M', 'circled upper M', 'circled upper M']);
  this.executeCharTest('‚ìÉ', ['circled upper N', 'circled upper N', 'circled upper N']);
  this.executeCharTest('‚ìÑ', ['circled upper O', 'circled upper O', 'circled upper O']);
  this.executeCharTest('‚ìÖ', ['circled upper P', 'circled upper P', 'circled upper P']);
  this.executeCharTest('‚ìÜ', ['circled upper Q', 'circled upper Q', 'circled upper Q']);
  this.executeCharTest('‚ìá', ['circled upper R', 'circled upper R', 'circled upper R']);
  this.executeCharTest('‚ìà', ['S en c√≠rculo', 'S en c√≠rculo', 'S en c√≠rculo']);
  this.executeCharTest('‚ìâ', ['circled upper T', 'circled upper T', 'circled upper T']);
  this.executeCharTest('‚ìä', ['circled upper U', 'circled upper U', 'circled upper U']);
  this.executeCharTest('‚ìã', ['circled upper V', 'circled upper V', 'circled upper V']);
  this.executeCharTest('‚ìå', ['circled upper W', 'circled upper W', 'circled upper W']);
  this.executeCharTest('‚ìç', ['circled upper X', 'circled upper X', 'circled upper X']);
  this.executeCharTest('‚ìé', ['circled upper Y', 'circled upper Y', 'circled upper Y']);
  this.executeCharTest('‚ìè', ['circled upper Z', 'circled upper Z', 'circled upper Z']);
  this.executeCharTest('‚ìê', ['circled a', 'circled a', 'circled a']);
  this.executeCharTest('‚ìë', ['circled b', 'circled b', 'circled b']);
  this.executeCharTest('‚ìí', ['circled c', 'circled c', 'circled c']);
  this.executeCharTest('‚ìì', ['circled d', 'circled d', 'circled d']);
  this.executeCharTest('‚ìî', ['circled e', 'circled e', 'circled e']);
  this.executeCharTest('‚ìï', ['circled f', 'circled f', 'circled f']);
  this.executeCharTest('‚ìñ', ['circled g', 'circled g', 'circled g']);
  this.executeCharTest('‚ìó', ['circled h', 'circled h', 'circled h']);
  this.executeCharTest('‚ìò', ['circled i', 'circled i', 'circled i']);
  this.executeCharTest('‚ìô', ['circled j', 'circled j', 'circled j']);
  this.executeCharTest('‚ìö', ['circled k', 'circled k', 'circled k']);
  this.executeCharTest('‚ìõ', ['circled l', 'circled l', 'circled l']);
  this.executeCharTest('‚ìú', ['circled m', 'circled m', 'circled m']);
  this.executeCharTest('‚ìù', ['circled n', 'circled n', 'circled n']);
  this.executeCharTest('‚ìû', ['circled o', 'circled o', 'circled o']);
  this.executeCharTest('‚ìü', ['circled p', 'circled p', 'circled p']);
  this.executeCharTest('‚ì†', ['circled q', 'circled q', 'circled q']);
  this.executeCharTest('‚ì°', ['circled r', 'circled r', 'circled r']);
  this.executeCharTest('‚ì¢', ['circled s', 'circled s', 'circled s']);
  this.executeCharTest('‚ì£', ['circled t', 'circled t', 'circled t']);
  this.executeCharTest('‚ì§', ['circled u', 'circled u', 'circled u']);
  this.executeCharTest('‚ì•', ['circled v', 'circled v', 'circled v']);
  this.executeCharTest('‚ì¶', ['circled w', 'circled w', 'circled w']);
  this.executeCharTest('‚ìß', ['circled x', 'circled x', 'circled x']);
  this.executeCharTest('‚ì®', ['circled y', 'circled y', 'circled y']);
  this.executeCharTest('‚ì©', ['circled z', 'circled z', 'circled z']);
  this.executeCharTest('‚±º', ['subscript j', 'subscript j', 'subscript j']);
  this.executeCharTest('üÑê', ['parenthesized upper A', 'parenthesized upper A', 'parenthesized upper A']);
  this.executeCharTest('üÑë', ['parenthesized upper B', 'parenthesized upper B', 'parenthesized upper B']);
  this.executeCharTest('üÑí', ['parenthesized upper C', 'parenthesized upper C', 'parenthesized upper C']);
  this.executeCharTest('üÑì', ['parenthesized upper D', 'parenthesized upper D', 'parenthesized upper D']);
  this.executeCharTest('üÑî', ['parenthesized upper E', 'parenthesized upper E', 'parenthesized upper E']);
  this.executeCharTest('üÑï', ['parenthesized upper F', 'parenthesized upper F', 'parenthesized upper F']);
  this.executeCharTest('üÑñ', ['parenthesized upper G', 'parenthesized upper G', 'parenthesized upper G']);
  this.executeCharTest('üÑó', ['parenthesized upper H', 'parenthesized upper H', 'parenthesized upper H']);
  this.executeCharTest('üÑò', ['parenthesized upper I', 'parenthesized upper I', 'parenthesized upper I']);
  this.executeCharTest('üÑô', ['parenthesized upper J', 'parenthesized upper J', 'parenthesized upper J']);
  this.executeCharTest('üÑö', ['parenthesized upper K', 'parenthesized upper K', 'parenthesized upper K']);
  this.executeCharTest('üÑõ', ['parenthesized upper L', 'parenthesized upper L', 'parenthesized upper L']);
  this.executeCharTest('üÑú', ['parenthesized upper M', 'parenthesized upper M', 'parenthesized upper M']);
  this.executeCharTest('üÑù', ['parenthesized upper N', 'parenthesized upper N', 'parenthesized upper N']);
  this.executeCharTest('üÑû', ['parenthesized upper O', 'parenthesized upper O', 'parenthesized upper O']);
  this.executeCharTest('üÑü', ['parenthesized upper P', 'parenthesized upper P', 'parenthesized upper P']);
  this.executeCharTest('üÑ†', ['parenthesized upper Q', 'parenthesized upper Q', 'parenthesized upper Q']);
  this.executeCharTest('üÑ°', ['parenthesized upper R', 'parenthesized upper R', 'parenthesized upper R']);
  this.executeCharTest('üÑ¢', ['parenthesized upper S', 'parenthesized upper S', 'parenthesized upper S']);
  this.executeCharTest('üÑ£', ['parenthesized upper T', 'parenthesized upper T', 'parenthesized upper T']);
  this.executeCharTest('üÑ§', ['parenthesized upper U', 'parenthesized upper U', 'parenthesized upper U']);
  this.executeCharTest('üÑ•', ['parenthesized upper V', 'parenthesized upper V', 'parenthesized upper V']);
  this.executeCharTest('üÑ¶', ['parenthesized upper W', 'parenthesized upper W', 'parenthesized upper W']);
  this.executeCharTest('üÑß', ['parenthesized upper X', 'parenthesized upper X', 'parenthesized upper X']);
  this.executeCharTest('üÑ®', ['parenthesized upper Y', 'parenthesized upper Y', 'parenthesized upper Y']);
  this.executeCharTest('üÑ©', ['parenthesized upper Z', 'parenthesized upper Z', 'parenthesized upper Z']);
  this.executeCharTest('üÑ™', ['tortoise shell bracketed upper S', 'tortoise shell bracketed upper S', 'tortoise shell bracketed upper S']);
  this.executeCharTest('üÑ´', ['circled italic upper C', 'circled italic upper C', 'circled italic upper C']);
  this.executeCharTest('üÑ¨', ['circled italic upper R', 'circled italic upper R', 'circled italic upper R']);
  this.executeCharTest('üÑ∞', ['squared upper A', 'squared upper A', 'squared upper A']);
  this.executeCharTest('üÑ±', ['squared upper B', 'squared upper B', 'squared upper B']);
  this.executeCharTest('üÑ≤', ['squared upper C', 'squared upper C', 'squared upper C']);
  this.executeCharTest('üÑ≥', ['squared upper D', 'squared upper D', 'squared upper D']);
  this.executeCharTest('üÑ¥', ['squared upper E', 'squared upper E', 'squared upper E']);
  this.executeCharTest('üÑµ', ['squared upper F', 'squared upper F', 'squared upper F']);
  this.executeCharTest('üÑ∂', ['squared upper G', 'squared upper G', 'squared upper G']);
  this.executeCharTest('üÑ∑', ['squared upper H', 'squared upper H', 'squared upper H']);
  this.executeCharTest('üÑ∏', ['squared upper I', 'squared upper I', 'squared upper I']);
  this.executeCharTest('üÑπ', ['squared upper J', 'squared upper J', 'squared upper J']);
  this.executeCharTest('üÑ∫', ['squared upper K', 'squared upper K', 'squared upper K']);
  this.executeCharTest('üÑª', ['squared upper L', 'squared upper L', 'squared upper L']);
  this.executeCharTest('üÑº', ['squared upper M', 'squared upper M', 'squared upper M']);
  this.executeCharTest('üÑΩ', ['squared upper N', 'squared upper N', 'squared upper N']);
  this.executeCharTest('üÑæ', ['squared upper O', 'squared upper O', 'squared upper O']);
  this.executeCharTest('üÑø', ['squared upper P', 'squared upper P', 'squared upper P']);
  this.executeCharTest('üÖÄ', ['squared upper Q', 'squared upper Q', 'squared upper Q']);
  this.executeCharTest('üÖÅ', ['squared upper R', 'squared upper R', 'squared upper R']);
  this.executeCharTest('üÖÇ', ['squared upper S', 'squared upper S', 'squared upper S']);
  this.executeCharTest('üÖÉ', ['squared upper T', 'squared upper T', 'squared upper T']);
  this.executeCharTest('üÖÑ', ['squared upper U', 'squared upper U', 'squared upper U']);
  this.executeCharTest('üÖÖ', ['squared upper V', 'squared upper V', 'squared upper V']);
  this.executeCharTest('üÖÜ', ['squared upper W', 'squared upper W', 'squared upper W']);
  this.executeCharTest('üÖá', ['squared upper X', 'squared upper X', 'squared upper X']);
  this.executeCharTest('üÖà', ['squared upper Y', 'squared upper Y', 'squared upper Y']);
  this.executeCharTest('üÖâ', ['squared upper Z', 'squared upper Z', 'squared upper Z']);
  this.executeCharTest('üÖê', ['negative circled upper A', 'negative circled upper A', 'negative circled upper A']);
  this.executeCharTest('üÖë', ['negative circled upper B', 'negative circled upper B', 'negative circled upper B']);
  this.executeCharTest('üÖí', ['negative circled upper C', 'negative circled upper C', 'negative circled upper C']);
  this.executeCharTest('üÖì', ['negative circled upper D', 'negative circled upper D', 'negative circled upper D']);
  this.executeCharTest('üÖî', ['negative circled upper E', 'negative circled upper E', 'negative circled upper E']);
  this.executeCharTest('üÖï', ['negative circled upper F', 'negative circled upper F', 'negative circled upper F']);
  this.executeCharTest('üÖñ', ['negative circled upper G', 'negative circled upper G', 'negative circled upper G']);
  this.executeCharTest('üÖó', ['negative circled upper H', 'negative circled upper H', 'negative circled upper H']);
  this.executeCharTest('üÖò', ['negative circled upper I', 'negative circled upper I', 'negative circled upper I']);
  this.executeCharTest('üÖô', ['negative circled upper J', 'negative circled upper J', 'negative circled upper J']);
  this.executeCharTest('üÖö', ['negative circled upper K', 'negative circled upper K', 'negative circled upper K']);
  this.executeCharTest('üÖõ', ['negative circled upper L', 'negative circled upper L', 'negative circled upper L']);
  this.executeCharTest('üÖú', ['negative circled upper M', 'negative circled upper M', 'negative circled upper M']);
  this.executeCharTest('üÖù', ['negative circled upper N', 'negative circled upper N', 'negative circled upper N']);
  this.executeCharTest('üÖû', ['negative circled upper O', 'negative circled upper O', 'negative circled upper O']);
  this.executeCharTest('üÖü', ['negative circled upper P', 'negative circled upper P', 'negative circled upper P']);
  this.executeCharTest('üÖ†', ['negative circled upper Q', 'negative circled upper Q', 'negative circled upper Q']);
  this.executeCharTest('üÖ°', ['negative circled upper R', 'negative circled upper R', 'negative circled upper R']);
  this.executeCharTest('üÖ¢', ['negative circled upper S', 'negative circled upper S', 'negative circled upper S']);
  this.executeCharTest('üÖ£', ['negative circled upper T', 'negative circled upper T', 'negative circled upper T']);
  this.executeCharTest('üÖ§', ['negative circled upper U', 'negative circled upper U', 'negative circled upper U']);
  this.executeCharTest('üÖ•', ['negative circled upper V', 'negative circled upper V', 'negative circled upper V']);
  this.executeCharTest('üÖ¶', ['negative circled upper W', 'negative circled upper W', 'negative circled upper W']);
  this.executeCharTest('üÖß', ['negative circled upper X', 'negative circled upper X', 'negative circled upper X']);
  this.executeCharTest('üÖ®', ['negative circled upper Y', 'negative circled upper Y', 'negative circled upper Y']);
  this.executeCharTest('üÖ©', ['negative circled upper Z', 'negative circled upper Z', 'negative circled upper Z']);
  this.executeCharTest('üÖ∞', ['negative squared upper A', 'negative squared upper A', 'negative squared upper A']);
  this.executeCharTest('üÖ±', ['negative squared upper B', 'negative squared upper B', 'negative squared upper B']);
  this.executeCharTest('üÖ≤', ['negative squared upper C', 'negative squared upper C', 'negative squared upper C']);
  this.executeCharTest('üÖ≥', ['negative squared upper D', 'negative squared upper D', 'negative squared upper D']);
  this.executeCharTest('üÖ¥', ['negative squared upper E', 'negative squared upper E', 'negative squared upper E']);
  this.executeCharTest('üÖµ', ['negative squared upper F', 'negative squared upper F', 'negative squared upper F']);
  this.executeCharTest('üÖ∂', ['negative squared upper G', 'negative squared upper G', 'negative squared upper G']);
  this.executeCharTest('üÖ∑', ['negative squared upper H', 'negative squared upper H', 'negative squared upper H']);
  this.executeCharTest('üÖ∏', ['negative squared upper I', 'negative squared upper I', 'negative squared upper I']);
  this.executeCharTest('üÖπ', ['negative squared upper J', 'negative squared upper J', 'negative squared upper J']);
  this.executeCharTest('üÖ∫', ['negative squared upper K', 'negative squared upper K', 'negative squared upper K']);
  this.executeCharTest('üÖª', ['negative squared upper L', 'negative squared upper L', 'negative squared upper L']);
  this.executeCharTest('üÖº', ['negative squared upper M', 'negative squared upper M', 'negative squared upper M']);
  this.executeCharTest('üÖΩ', ['negative squared upper N', 'negative squared upper N', 'negative squared upper N']);
  this.executeCharTest('üÖæ', ['negative squared upper O', 'negative squared upper O', 'negative squared upper O']);
  this.executeCharTest('üÖø', ['negative squared upper P', 'negative squared upper P', 'negative squared upper P']);
  this.executeCharTest('üÜÄ', ['negative squared upper Q', 'negative squared upper Q', 'negative squared upper Q']);
  this.executeCharTest('üÜÅ', ['negative squared upper R', 'negative squared upper R', 'negative squared upper R']);
  this.executeCharTest('üÜÇ', ['negative squared upper S', 'negative squared upper S', 'negative squared upper S']);
  this.executeCharTest('üÜÉ', ['negative squared upper T', 'negative squared upper T', 'negative squared upper T']);
  this.executeCharTest('üÜÑ', ['negative squared upper U', 'negative squared upper U', 'negative squared upper U']);
  this.executeCharTest('üÜÖ', ['negative squared upper V', 'negative squared upper V', 'negative squared upper V']);
  this.executeCharTest('üÜÜ', ['negative squared upper W', 'negative squared upper W', 'negative squared upper W']);
  this.executeCharTest('üÜá', ['negative squared upper X', 'negative squared upper X', 'negative squared upper X']);
  this.executeCharTest('üÜà', ['negative squared upper Y', 'negative squared upper Y', 'negative squared upper Y']);
  this.executeCharTest('üÜâ', ['negative squared upper Z', 'negative squared upper Z', 'negative squared upper Z']);
  this.executeCharTest('üÜä', ['crossed negative squared upper P', 'crossed negative squared upper P', 'crossed negative squared upper P']);
  this.executeCharTest('«ï', ['upper U double overdot overbar', 'upper U double overdot overbar', 'upper U double overdot overbar']);
  this.executeCharTest('«ó', ['upper U double overdot acute', 'upper U double overdot acute', 'upper U double overdot acute']);
  this.executeCharTest('«ô', ['upper U double overdot caron', 'upper U double overdot caron', 'upper U double overdot caron']);
  this.executeCharTest('«õ', ['upper U double overdot grave', 'upper U double overdot grave', 'upper U double overdot grave']);
  this.executeCharTest('«û', ['upper A double overdot overbar', 'upper A double overdot overbar', 'upper A double overdot overbar']);
  this.executeCharTest('«†', ['upper A overdot overbar', 'upper A overdot overbar', 'upper A overdot overbar']);
  this.executeCharTest('«¨', ['upper O ogonek overbar', 'upper O ogonek overbar', 'upper O ogonek overbar']);
  this.executeCharTest('«∫', ['upper A ring acute', 'upper A ring acute', 'upper A ring acute']);
  this.executeCharTest('»™', ['upper O double overdot overbar', 'upper O double overdot overbar', 'upper O double overdot overbar']);
  this.executeCharTest('»¨', ['upper O tilde overbar', 'upper O tilde overbar', 'upper O tilde overbar']);
  this.executeCharTest('»∞', ['upper O overdot overbar', 'upper O overdot overbar', 'upper O overdot overbar']);
  this.executeCharTest('·∏à', ['may√∫scula C con cedilla y agudo', 'may√∫scula C con cedilla y agudo', 'may√∫scula C con cedilla y agudo']);
  this.executeCharTest('·∏î', ['may√∫scula E con macr√≥n y grave', 'may√∫scula E con macr√≥n y grave', 'may√∫scula E con macr√≥n y grave']);
  this.executeCharTest('·∏ñ', ['may√∫scula E con macr√≥n y agudo', 'may√∫scula E con macr√≥n y agudo', 'may√∫scula E con macr√≥n y agudo']);
  this.executeCharTest('·∏ú', ['may√∫scula E with cedilla and breve', 'may√∫scula E with cedilla and breve', 'may√∫scula E with cedilla and breve']);
  this.executeCharTest('·∏Æ', ['may√∫scula I con di√©resis y agudo', 'may√∫scula I con di√©resis y agudo', 'may√∫scula I con di√©resis y agudo']);
  this.executeCharTest('·∏∏', ['may√∫scula L con punto debajo y macr√≥n', 'may√∫scula L con punto debajo y macr√≥n', 'may√∫scula L con punto debajo y macr√≥n']);
  this.executeCharTest('·πå', ['may√∫scula O con tilde y acute', 'may√∫scula O con tilde y acute', 'may√∫scula O con tilde y acute']);
  this.executeCharTest('·πé', ['may√∫scula O con tilde y di√©resis', 'may√∫scula O con tilde y di√©resis', 'may√∫scula O con tilde y di√©resis']);
  this.executeCharTest('·πê', ['may√∫scula O con macr√≥n y grave', 'may√∫scula O con macr√≥n y grave', 'may√∫scula O con macr√≥n y grave']);
  this.executeCharTest('·πí', ['may√∫scula O con macr√≥n y agudo', 'may√∫scula O con macr√≥n y agudo', 'may√∫scula O con macr√≥n y agudo']);
  this.executeCharTest('·πú', ['may√∫scula R con punto debajo y macr√≥n', 'may√∫scula R con punto debajo y macr√≥n', 'may√∫scula R con punto debajo y macr√≥n']);
  this.executeCharTest('·π§', ['may√∫scula S con agudo y punto arriba', 'may√∫scula S con agudo y punto arriba', 'may√∫scula S con agudo y punto arriba']);
  this.executeCharTest('·π¶', ['may√∫scula S con car√≥n y punto arriba', 'may√∫scula S con car√≥n y punto arriba', 'may√∫scula S con car√≥n y punto arriba']);
  this.executeCharTest('·π®', ['may√∫scula S con punto debajo y punto arriba', 'may√∫scula S con punto debajo y punto arriba', 'may√∫scula S con punto debajo y punto arriba']);
  this.executeCharTest('·π∏', ['may√∫scula U con tilde y agudo', 'may√∫scula U con tilde y agudo', 'may√∫scula U con tilde y agudo']);
  this.executeCharTest('·π∫', ['may√∫scula U con macr√≥n y di√©resis', 'may√∫scula U con macr√≥n y di√©resis', 'may√∫scula U con macr√≥n y di√©resis']);
  this.executeCharTest('·∫§', ['may√∫scula A con acento circunflejo y agudo', 'may√∫scula A con acento circunflejo y agudo', 'may√∫scula A con acento circunflejo y agudo']);
  this.executeCharTest('·∫¶', ['may√∫scula A con acento circunflejo y grave', 'may√∫scula A con acento circunflejo y grave', 'may√∫scula A con acento circunflejo y grave']);
  this.executeCharTest('·∫®', ['may√∫scula A con acento circunflejo y gancho arriba', 'may√∫scula A con acento circunflejo y gancho arriba', 'may√∫scula A con acento circunflejo y gancho arriba']);
  this.executeCharTest('·∫™', ['may√∫scula A con acento circunflejo y tilde', 'may√∫scula A con acento circunflejo y tilde', 'may√∫scula A con acento circunflejo y tilde']);
  this.executeCharTest('·∫¨', ['may√∫scula A con acento circunflejo y punto debajo', 'may√∫scula A con acento circunflejo y punto debajo', 'may√∫scula A con acento circunflejo y punto debajo']);
  this.executeCharTest('·∫Æ', ['may√∫scula A con breve y agudo', 'may√∫scula A con breve y agudo', 'may√∫scula A con breve y agudo']);
  this.executeCharTest('·∫∞', ['may√∫scula A con breve y grave', 'may√∫scula A con breve y grave', 'may√∫scula A con breve y grave']);
  this.executeCharTest('·∫≤', ['may√∫scula A con breve y gancho arriba', 'may√∫scula A con breve y gancho arriba', 'may√∫scula A con breve y gancho arriba']);
  this.executeCharTest('·∫¥', ['may√∫scula A con breve y tilde', 'may√∫scula A con breve y tilde', 'may√∫scula A con breve y tilde']);
  this.executeCharTest('·∫∂', ['may√∫scula A con breve y punto debajo', 'may√∫scula A con breve y punto debajo', 'may√∫scula A con breve y punto debajo']);
  this.executeCharTest('·∫æ', ['may√∫scula E con acento circunflejo y agudo', 'may√∫scula E con acento circunflejo y agudo', 'may√∫scula E con acento circunflejo y agudo']);
  this.executeCharTest('·ªÄ', ['may√∫scula E con acento circunflejo y grave', 'may√∫scula E con acento circunflejo y grave', 'may√∫scula E con acento circunflejo y grave']);
  this.executeCharTest('·ªÇ', ['may√∫scula E con acento circunflejo y gancho arriba', 'may√∫scula E con acento circunflejo y gancho arriba', 'may√∫scula E con acento circunflejo y gancho arriba']);
  this.executeCharTest('·ªÑ', ['may√∫scula E con acento circunflejo y tilde', 'may√∫scula E con acento circunflejo y tilde', 'may√∫scula E con acento circunflejo y tilde']);
  this.executeCharTest('·ªÜ', ['may√∫scula E con acento circunflejo y punto debajo', 'may√∫scula E con acento circunflejo y punto debajo', 'may√∫scula E con acento circunflejo y punto debajo']);
  this.executeCharTest('·ªê', ['may√∫scula O con acento circunflejo y agudo', 'may√∫scula O con acento circunflejo y agudo', 'may√∫scula O con acento circunflejo y agudo']);
  this.executeCharTest('·ªí', ['may√∫scula O con acento circunflejo y grave', 'may√∫scula O con acento circunflejo y grave', 'may√∫scula O con acento circunflejo y grave']);
  this.executeCharTest('·ªî', ['may√∫scula O con acento circunflejo y gancho arriba', 'may√∫scula O con acento circunflejo y gancho arriba', 'may√∫scula O con acento circunflejo y gancho arriba']);
  this.executeCharTest('·ªñ', ['may√∫scula O con acento circunflejo y tilde', 'may√∫scula O con acento circunflejo y tilde', 'may√∫scula O con acento circunflejo y tilde']);
  this.executeCharTest('·ªò', ['may√∫scula O con acento circunflejo y punto debajo', 'may√∫scula O con acento circunflejo y punto debajo', 'may√∫scula O con acento circunflejo y punto debajo']);
  this.executeCharTest('·ªö', ['may√∫scula O with horn and acute', 'may√∫scula O with horn and acute', 'may√∫scula O with horn and acute']);
  this.executeCharTest('·ªú', ['may√∫scula O with horn and grave', 'may√∫scula O with horn and grave', 'may√∫scula O with horn and grave']);
  this.executeCharTest('·ªû', ['may√∫scula O with horn and hook above', 'may√∫scula O with horn and hook above', 'may√∫scula O with horn and hook above']);
  this.executeCharTest('·ª†', ['may√∫scula O with horn and tilde', 'may√∫scula O with horn and tilde', 'may√∫scula O with horn and tilde']);
  this.executeCharTest('·ª¢', ['may√∫scula O con cuerno y punto debajo', 'may√∫scula O con cuerno y punto debajo', 'may√∫scula O con cuerno y punto debajo']);
  this.executeCharTest('·ª®', ['may√∫scula U con cuerno y agudo', 'may√∫scula U con cuerno y agudo', 'may√∫scula U con cuerno y agudo']);
  this.executeCharTest('·ª™', ['may√∫scula U con cuerno y grave', 'may√∫scula U con cuerno y grave', 'may√∫scula U con cuerno y grave']);
  this.executeCharTest('·ª¨', ['may√∫scula U con cuerno y gancho arriba', 'may√∫scula U con cuerno y gancho arriba', 'may√∫scula U con cuerno y gancho arriba']);
  this.executeCharTest('·ªÆ', ['may√∫scula U con cuerno y tilde', 'may√∫scula U con cuerno y tilde', 'may√∫scula U con cuerno y tilde']);
  this.executeCharTest('·ª∞', ['may√∫scula U con cuerno y punto debajo', 'may√∫scula U con cuerno y punto debajo', 'may√∫scula U con cuerno y punto debajo']);
  this.executeCharTest('A', ['may√∫scula A', 'may√∫scula A', 'may√∫scula A']);
  this.executeCharTest('B', ['may√∫scula B', 'may√∫scula B', 'may√∫scula B']);
  this.executeCharTest('C', ['may√∫scula C', 'may√∫scula C', 'may√∫scula C']);
  this.executeCharTest('D', ['may√∫scula D', 'may√∫scula D', 'may√∫scula D']);
  this.executeCharTest('E', ['may√∫scula E', 'may√∫scula E', 'may√∫scula E']);
  this.executeCharTest('F', ['may√∫scula F', 'may√∫scula F', 'may√∫scula F']);
  this.executeCharTest('G', ['may√∫scula G', 'may√∫scula G', 'may√∫scula G']);
  this.executeCharTest('H', ['may√∫scula H', 'may√∫scula H', 'may√∫scula H']);
  this.executeCharTest('I', ['may√∫scula I', 'may√∫scula I', 'may√∫scula I']);
  this.executeCharTest('J', ['may√∫scula J', 'may√∫scula J', 'may√∫scula J']);
  this.executeCharTest('K', ['may√∫scula K', 'may√∫scula K', 'may√∫scula K']);
  this.executeCharTest('L', ['may√∫scula L', 'may√∫scula L', 'may√∫scula L']);
  this.executeCharTest('M', ['may√∫scula M', 'may√∫scula M', 'may√∫scula M']);
  this.executeCharTest('N', ['may√∫scula N', 'may√∫scula N', 'may√∫scula N']);
  this.executeCharTest('O', ['may√∫scula O', 'may√∫scula O', 'may√∫scula O']);
  this.executeCharTest('P', ['may√∫scula P', 'may√∫scula P', 'may√∫scula P']);
  this.executeCharTest('Q', ['may√∫scula Q', 'may√∫scula Q', 'may√∫scula Q']);
  this.executeCharTest('R', ['may√∫scula R', 'may√∫scula R', 'may√∫scula R']);
  this.executeCharTest('S', ['may√∫scula S', 'may√∫scula S', 'may√∫scula S']);
  this.executeCharTest('T', ['may√∫scula T', 'may√∫scula T', 'may√∫scula T']);
  this.executeCharTest('U', ['may√∫scula U', 'may√∫scula U', 'may√∫scula U']);
  this.executeCharTest('V', ['may√∫scula V', 'may√∫scula V', 'may√∫scula V']);
  this.executeCharTest('W', ['may√∫scula W', 'may√∫scula W', 'may√∫scula W']);
  this.executeCharTest('X', ['may√∫scula X', 'may√∫scula X', 'may√∫scula X']);
  this.executeCharTest('Y', ['may√∫scula Y', 'may√∫scula Y', 'may√∫scula Y']);
  this.executeCharTest('Z', ['may√∫scula Z', 'may√∫scula Z', 'may√∫scula Z']);
  this.executeCharTest('Ôº°', ['upper A', 'upper A', 'upper A']);
  this.executeCharTest('Ôº¢', ['upper B', 'upper B', 'upper B']);
  this.executeCharTest('Ôº£', ['upper C', 'upper C', 'upper C']);
  this.executeCharTest('Ôº§', ['upper D', 'upper D', 'upper D']);
  this.executeCharTest('Ôº•', ['upper E', 'upper E', 'upper E']);
  this.executeCharTest('Ôº¶', ['upper F', 'upper F', 'upper F']);
  this.executeCharTest('Ôºß', ['upper G', 'upper G', 'upper G']);
  this.executeCharTest('Ôº®', ['upper H', 'upper H', 'upper H']);
  this.executeCharTest('Ôº©', ['upper I', 'upper I', 'upper I']);
  this.executeCharTest('Ôº™', ['upper J', 'upper J', 'upper J']);
  this.executeCharTest('Ôº´', ['upper K', 'upper K', 'upper K']);
  this.executeCharTest('Ôº¨', ['upper L', 'upper L', 'upper L']);
  this.executeCharTest('Ôº≠', ['upper M', 'upper M', 'upper M']);
  this.executeCharTest('ÔºÆ', ['upper N', 'upper N', 'upper N']);
  this.executeCharTest('ÔºØ', ['upper O', 'upper O', 'upper O']);
  this.executeCharTest('Ôº∞', ['upper P', 'upper P', 'upper P']);
  this.executeCharTest('Ôº±', ['upper Q', 'upper Q', 'upper Q']);
  this.executeCharTest('Ôº≤', ['upper R', 'upper R', 'upper R']);
  this.executeCharTest('Ôº≥', ['upper S', 'upper S', 'upper S']);
  this.executeCharTest('Ôº¥', ['upper T', 'upper T', 'upper T']);
  this.executeCharTest('Ôºµ', ['upper U', 'upper U', 'upper U']);
  this.executeCharTest('Ôº∂', ['upper V', 'upper V', 'upper V']);
  this.executeCharTest('Ôº∑', ['upper W', 'upper W', 'upper W']);
  this.executeCharTest('Ôº∏', ['upper X', 'upper X', 'upper X']);
  this.executeCharTest('Ôºπ', ['upper Y', 'upper Y', 'upper Y']);
  this.executeCharTest('Ôº∫', ['upper Z', 'upper Z', 'upper Z']);
  this.executeCharTest('√Ä', ['may√∫scula A grave', 'may√∫scula A grave', 'may√∫scula A grave']);
  this.executeCharTest('√Å', ['may√∫scula A aguda', 'may√∫scula A aguda', 'may√∫scula A aguda']);
  this.executeCharTest('√Ç', ['may√∫scula A acento circunflejo', 'may√∫scula A acento circunflejo', 'may√∫scula A acento circunflejo']);
  this.executeCharTest('√É', ['may√∫scula A con tilde', 'may√∫scula A con tilde', 'may√∫scula A con tilde']);
  this.executeCharTest('√Ñ', ['may√∫scula A di√©resis', 'may√∫scula A di√©resis', 'may√∫scula A di√©resis']);
  this.executeCharTest('√Ö', ['may√∫scula A con anillo', 'may√∫scula A con anillo', 'may√∫scula A con anillo']);
  this.executeCharTest('√á', ['may√∫scula C cedilla', 'may√∫scula C cedilla', 'may√∫scula C cedilla']);
  this.executeCharTest('√à', ['may√∫scula E grave', 'may√∫scula E grave', 'may√∫scula E grave']);
  this.executeCharTest('√â', ['may√∫scula E aguda', 'may√∫scula E aguda', 'may√∫scula E aguda']);
  this.executeCharTest('√ä', ['may√∫scula E acento circunflejo', 'may√∫scula E acento circunflejo', 'may√∫scula E acento circunflejo']);
  this.executeCharTest('√ã', ['may√∫scula E di√©resis', 'may√∫scula E di√©resis', 'may√∫scula E di√©resis']);
  this.executeCharTest('√å', ['may√∫scula I grave', 'may√∫scula I grave', 'may√∫scula I grave']);
  this.executeCharTest('√ç', ['may√∫scula I aguda', 'may√∫scula I aguda', 'may√∫scula I aguda']);
  this.executeCharTest('√é', ['may√∫scula I acento circumflejo', 'may√∫scula I acento circumflejo', 'may√∫scula I acento circumflejo']);
  this.executeCharTest('√è', ['may√∫scula I di√©resis', 'may√∫scula I di√©resis', 'may√∫scula I di√©resis']);
  this.executeCharTest('√ë', ['may√∫scula √ë', 'may√∫scula √ë', 'may√∫scula √ë']);
  this.executeCharTest('√í', ['may√∫scula O grave', 'may√∫scula O grave', 'may√∫scula O grave']);
  this.executeCharTest('√ì', ['may√∫scula O aguda', 'may√∫scula O aguda', 'may√∫scula O aguda']);
  this.executeCharTest('√î', ['may√∫scula O acento circunflejo', 'may√∫scula O acento circunflejo', 'may√∫scula O acento circunflejo']);
  this.executeCharTest('√ï', ['may√∫scula O con tilde', 'may√∫scula O con tilde', 'may√∫scula O con tilde']);
  this.executeCharTest('√ñ', ['may√∫scula O di√©resis', 'may√∫scula O di√©resis', 'may√∫scula O di√©resis']);
  this.executeCharTest('√ô', ['may√∫scula U grave', 'may√∫scula U grave', 'may√∫scula U grave']);
  this.executeCharTest('√ö', ['may√∫scula U aguda', 'may√∫scula U aguda', 'may√∫scula U aguda']);
  this.executeCharTest('√õ', ['may√∫scula U acento circunflejo', 'may√∫scula U acento circunflejo', 'may√∫scula U acento circunflejo']);
  this.executeCharTest('√ú', ['may√∫scula U di√©resis', 'may√∫scula U di√©resis', 'may√∫scula U di√©resis']);
  this.executeCharTest('√ù', ['may√∫scula Y aguda', 'may√∫scula Y aguda', 'may√∫scula Y aguda']);
  this.executeCharTest('ƒÄ', ['may√∫scula A barra', 'may√∫scula A barra', 'may√∫scula A barra']);
  this.executeCharTest('ƒÇ', ['may√∫scula A con breve', 'may√∫scula A con breve', 'may√∫scula A con breve']);
  this.executeCharTest('ƒÑ', ['may√∫scula A con ogonek', 'may√∫scula A con ogonek', 'may√∫scula A con ogonek']);
  this.executeCharTest('ƒÜ', ['may√∫scula C con agudo', 'may√∫scula C con agudo', 'may√∫scula C con agudo']);
  this.executeCharTest('ƒà', ['may√∫scula C con acento circunflejo', 'may√∫scula C con acento circunflejo', 'may√∫scula C con acento circunflejo']);
  this.executeCharTest('ƒä', ['may√∫scula C con punto arriba', 'may√∫scula C con punto arriba', 'may√∫scula C con punto arriba']);
  this.executeCharTest('ƒå', ['may√∫scula C con car√≥n', 'may√∫scula C con car√≥n', 'may√∫scula C con car√≥n']);
  this.executeCharTest('ƒé', ['may√∫scula D con car√≥n', 'may√∫scula D con car√≥n', 'may√∫scula D con car√≥n']);
  this.executeCharTest('ƒí', ['may√∫scula E barra', 'may√∫scula E barra', 'may√∫scula E barra']);
  this.executeCharTest('ƒî', ['modifying above upper E with breve', 'mod above upper E with breve', 'mod above upper E with breve']);
  this.executeCharTest('ƒñ', ['may√∫scula E con punto arriba', 'may√∫scula E con punto arriba', 'may√∫scula E con punto arriba']);
  this.executeCharTest('ƒò', ['may√∫scula E con ogonek', 'may√∫scula E con ogonek', 'may√∫scula E con ogonek']);
  this.executeCharTest('ƒö', ['may√∫scula E con car√≥n', 'may√∫scula E con car√≥n', 'may√∫scula E con car√≥n']);
  this.executeCharTest('ƒú', ['may√∫scula G con acento circunflejo', 'may√∫scula G con acento circunflejo', 'may√∫scula G con acento circunflejo']);
  this.executeCharTest('ƒû', ['may√∫scula G con breve', 'may√∫scula G con breve', 'may√∫scula G con breve']);
  this.executeCharTest('ƒ†', ['may√∫scula G con punto arriba', 'may√∫scula G con punto arriba', 'may√∫scula G con punto arriba']);
  this.executeCharTest('ƒ¢', ['may√∫scula G con cedilla', 'may√∫scula G con cedilla', 'may√∫scula G con cedilla']);
  this.executeCharTest('ƒ§', ['may√∫scula H con acento circunflejo', 'may√∫scula H con acento circunflejo', 'may√∫scula H con acento circunflejo']);
  this.executeCharTest('ƒ®', ['may√∫scula I con tilde', 'may√∫scula I con tilde', 'may√∫scula I con tilde']);
  this.executeCharTest('ƒ™', ['may√∫scula I barra', 'may√∫scula I barra', 'may√∫scula I barra']);
  this.executeCharTest('ƒ¨', ['modifying above upper I with breve', 'mod above upper I with breve', 'mod above upper I with breve']);
  this.executeCharTest('ƒÆ', ['may√∫scula I con ogonek', 'may√∫scula I con ogonek', 'may√∫scula I con ogonek']);
  this.executeCharTest('ƒ∞', ['may√∫scula I con punto arriba', 'may√∫scula I con punto arriba', 'may√∫scula I con punto arriba']);
  this.executeCharTest('ƒ¥', ['may√∫scula J con acento circunflejo', 'may√∫scula J con acento circunflejo', 'may√∫scula J con acento circunflejo']);
  this.executeCharTest('ƒ∂', ['may√∫scula K con cedilla', 'may√∫scula K con cedilla', 'may√∫scula K con cedilla']);
  this.executeCharTest('ƒπ', ['may√∫scula L con agudo', 'may√∫scula L con agudo', 'may√∫scula L con agudo']);
  this.executeCharTest('ƒª', ['may√∫scula L con cedilla', 'may√∫scula L con cedilla', 'may√∫scula L con cedilla']);
  this.executeCharTest('ƒΩ', ['may√∫scula L con car√≥n', 'may√∫scula L con car√≥n', 'may√∫scula L con car√≥n']);
  this.executeCharTest('ƒø', ['may√∫scula L con punto mediano', 'may√∫scula L con punto mediano', 'may√∫scula L con punto mediano']);
  this.executeCharTest('≈É', ['may√∫scula N con agudo', 'may√∫scula N con agudo', 'may√∫scula N con agudo']);
  this.executeCharTest('≈Ö', ['may√∫scula N con cedilla', 'may√∫scula N con cedilla', 'may√∫scula N con cedilla']);
  this.executeCharTest('≈á', ['may√∫scula n con car√≥n', 'may√∫scula n con car√≥n', 'may√∫scula n con car√≥n']);
  this.executeCharTest('≈å', ['may√∫scula O barra', 'may√∫scula O barra', 'may√∫scula O barra']);
  this.executeCharTest('≈é', ['modifying above upper O with breve', 'mod above upper O with breve', 'mod above upper O with breve']);
  this.executeCharTest('≈ê', ['may√∫scula O con doble acento agudo ', 'may√∫scula O con doble acento agudo ', 'may√∫scula O con doble acento agudo ']);
  this.executeCharTest('≈î', ['may√∫scula R con agudo', 'may√∫scula R con agudo', 'may√∫scula R con agudo']);
  this.executeCharTest('≈ñ', ['may√∫scula R con cedilla', 'may√∫scula R con cedilla', 'may√∫scula R con cedilla']);
  this.executeCharTest('≈ò', ['may√∫scula R con car√≥n', 'may√∫scula R con car√≥n', 'may√∫scula R con car√≥n']);
  this.executeCharTest('≈ö', ['may√∫scula S con agudo', 'may√∫scula S con agudo', 'may√∫scula S con agudo']);
  this.executeCharTest('≈ú', ['may√∫scula S con acento circunflejo', 'may√∫scula S con acento circunflejo', 'may√∫scula S con acento circunflejo']);
  this.executeCharTest('≈û', ['may√∫scula S con cedilla', 'may√∫scula S con cedilla', 'may√∫scula S con cedilla']);
  this.executeCharTest('≈†', ['may√∫scula S con car√≥n', 'may√∫scula S con car√≥n', 'may√∫scula S con car√≥n']);
  this.executeCharTest('≈¢', ['may√∫scula T con cedilla', 'may√∫scula T con cedilla', 'may√∫scula T con cedilla']);
  this.executeCharTest('≈§', ['may√∫scula T con car√≥n', 'may√∫scula T con car√≥n', 'may√∫scula T con car√≥n']);
  this.executeCharTest('≈®', ['may√∫scula U con tilde', 'may√∫scula U con tilde', 'may√∫scula U con tilde']);
  this.executeCharTest('≈™', ['may√∫scula U barra', 'may√∫scula U barra', 'may√∫scula U barra']);
  this.executeCharTest('≈¨', ['may√∫scula U con breve', 'may√∫scula U con breve', 'may√∫scula U con breve']);
  this.executeCharTest('≈Æ', ['may√∫scula U con anillo arriba', 'may√∫scula U con anillo arriba', 'may√∫scula U con anillo arriba']);
  this.executeCharTest('≈∞', ['may√∫scula U con doble acento agudo', 'may√∫scula U con doble acento agudo', 'may√∫scula U con doble acento agudo']);
  this.executeCharTest('≈≤', ['may√∫scula U con ogonek', 'may√∫scula U con ogonek', 'may√∫scula U con ogonek']);
  this.executeCharTest('≈¥', ['may√∫scula W con acento circunflejo', 'may√∫scula W con acento circunflejo', 'may√∫scula W con acento circunflejo']);
  this.executeCharTest('≈∂', ['may√∫scula Y con circunflejo', 'may√∫scula Y con circunflejo', 'may√∫scula Y con circunflejo']);
  this.executeCharTest('≈∏', ['may√∫scula Y di√©resis', 'may√∫scula Y di√©resis', 'may√∫scula Y di√©resis']);
  this.executeCharTest('≈π', ['may√∫scula Z con agudo', 'may√∫scula Z con agudo', 'may√∫scula Z con agudo']);
  this.executeCharTest('≈ª', ['may√∫scula Z con punto', 'may√∫scula Z con punto', 'may√∫scula Z con punto']);
  this.executeCharTest('≈Ω', ['may√∫scula Z con car√≥n', 'may√∫scula Z con car√≥n', 'may√∫scula Z con car√≥n']);
  this.executeCharTest('«ç', ['modifying above upper A with caron', 'mod above upper A with caron', 'mod above upper A with caron']);
  this.executeCharTest('«è', ['modifying above upper I with caron', 'mod above upper I with caron', 'mod above upper I with caron']);
  this.executeCharTest('«ë', ['modifying above upper O with caron', 'mod above upper O with caron', 'mod above upper O with caron']);
  this.executeCharTest('«ì', ['modifying above upper U with caron', 'mod above upper U with caron', 'mod above upper U with caron']);
  this.executeCharTest('«¶', ['modifying above upper G with caron', 'mod above upper G with caron', 'mod above upper G with caron']);
  this.executeCharTest('«®', ['modifying above upper K with caron', 'mod above upper K with caron', 'mod above upper K with caron']);
  this.executeCharTest('«™', ['modifying above upper O with ogonek', 'mod above upper O with ogonek', 'mod above upper O with ogonek']);
  this.executeCharTest('«¥', ['modifying above upper G with acute', 'mod above upper G with acute', 'mod above upper G with acute']);
  this.executeCharTest('«∏', ['modifying above upper N with grave', 'mod above upper N with grave', 'mod above upper N with grave']);
  this.executeCharTest('»Ä', ['modifying above upper A with double grave', 'mod above upper A with double grave', 'mod above upper A with double grave']);
  this.executeCharTest('»Ç', ['modifying above upper A with inverted breve', 'mod above upper A with inverted breve', 'mod above upper A with inverted breve']);
  this.executeCharTest('»Ñ', ['modifying above upper E with double grave', 'mod above upper E with double grave', 'mod above upper E with double grave']);
  this.executeCharTest('»Ü', ['modifying above upper E with inverted breve', 'mod above upper E with inverted breve', 'mod above upper E with inverted breve']);
  this.executeCharTest('»à', ['modifying above upper I with double grave', 'mod above upper I with double grave', 'mod above upper I with double grave']);
  this.executeCharTest('»ä', ['modifying above upper I with inverted breve', 'mod above upper I with inverted breve', 'mod above upper I with inverted breve']);
  this.executeCharTest('»å', ['modifying above upper O with double grave', 'mod above upper O with double grave', 'mod above upper O with double grave']);
  this.executeCharTest('»é', ['modifying above upper O with inverted breve', 'mod above upper O with inverted breve', 'mod above upper O with inverted breve']);
  this.executeCharTest('»ê', ['modifying above upper R with double grave', 'mod above upper R with double grave', 'mod above upper R with double grave']);
  this.executeCharTest('»í', ['modifying above upper R with inverted breve', 'mod above upper R with inverted breve', 'mod above upper R with inverted breve']);
  this.executeCharTest('»î', ['modifying above upper U with double grave', 'mod above upper U with double grave', 'mod above upper U with double grave']);
  this.executeCharTest('»ñ', ['modifying above upper U with inverted breve', 'mod above upper U with inverted breve', 'mod above upper U with inverted breve']);
  this.executeCharTest('»ò', ['modifying below upper S with comma below', 'mod below upper S with comma below', 'mod below upper S with comma below']);
  this.executeCharTest('»ö', ['modifying below upper T with comma below', 'mod below upper T with comma below', 'mod below upper T with comma below']);
  this.executeCharTest('»û', ['modifying above upper H with caron', 'mod above upper H with caron', 'mod above upper H with caron']);
  this.executeCharTest('»¶', ['modifying above upper A with dot', 'mod above upper A with dot', 'mod above upper A with dot']);
  this.executeCharTest('»®', ['modifying above upper E with cedilla', 'mod above upper E with cedilla', 'mod above upper E with cedilla']);
  this.executeCharTest('»Æ', ['modifying above upper O with dot', 'mod above upper O with dot', 'mod above upper O with dot']);
  this.executeCharTest('»≤', ['upper Y overbar', 'upper Y overbar', 'upper Y overbar']);
  this.executeCharTest('·∏Ä', ['may√∫scula A con anillo debajo', 'may√∫scula A con anillo debajo', 'may√∫scula A con anillo debajo']);
  this.executeCharTest('·∏Ç', ['may√∫scula B con punto arriba', 'may√∫scula B con punto arriba', 'may√∫scula B con punto arriba']);
  this.executeCharTest('·∏Ñ', ['may√∫scula B con punto debajo', 'may√∫scula B con punto debajo', 'may√∫scula B con punto debajo']);
  this.executeCharTest('·∏Ü', ['may√∫scula B con l√≠nea debajo', 'may√∫scula B con l√≠nea debajo', 'may√∫scula B con l√≠nea debajo']);
  this.executeCharTest('·∏ä', ['may√∫scula D con punto arriba', 'may√∫scula D con punto arriba', 'may√∫scula D con punto arriba']);
  this.executeCharTest('·∏å', ['may√∫scula D con punto debajo', 'may√∫scula D con punto debajo', 'may√∫scula D con punto debajo']);
  this.executeCharTest('·∏é', ['may√∫scula D con l√≠nea debajo', 'may√∫scula D con l√≠nea debajo', 'may√∫scula D con l√≠nea debajo']);
  this.executeCharTest('·∏ê', ['may√∫scula D con cedilla', 'may√∫scula D con cedilla', 'may√∫scula D con cedilla']);
  this.executeCharTest('·∏í', ['may√∫scula D con acento circunflejo debajo', 'may√∫scula D con acento circunflejo debajo', 'may√∫scula D con acento circunflejo debajo']);
  this.executeCharTest('·∏ò', ['may√∫scula E con acento circunflejo debajo', 'may√∫scula E con acento circunflejo debajo', 'may√∫scula E con acento circunflejo debajo']);
  this.executeCharTest('·∏ö', ['may√∫scula E con tilde debajo', 'may√∫scula E con tilde debajo', 'may√∫scula E con tilde debajo']);
  this.executeCharTest('·∏û', ['may√∫scula F con punto arriba', 'may√∫scula F con punto arriba', 'may√∫scula F con punto arriba']);
  this.executeCharTest('·∏†', ['may√∫scula G con macr√≥n', 'may√∫scula G con macr√≥n', 'may√∫scula G con macr√≥n']);
  this.executeCharTest('·∏¢', ['may√∫scula H con punto arriba', 'may√∫scula H con punto arriba', 'may√∫scula H con punto arriba']);
  this.executeCharTest('·∏§', ['may√∫scula H con punto debajo', 'may√∫scula H con punto debajo', 'may√∫scula H con punto debajo']);
  this.executeCharTest('·∏¶', ['may√∫scula H con di√©resis', 'may√∫scula H con di√©resis', 'may√∫scula H con di√©resis']);
  this.executeCharTest('·∏®', ['may√∫scula H con cedilla', 'may√∫scula H con cedilla', 'may√∫scula H con cedilla']);
  this.executeCharTest('·∏™', ['may√∫scula H con breve debajo', 'may√∫scula H con breve debajo', 'may√∫scula H con breve debajo']);
  this.executeCharTest('·∏¨', ['may√∫scula I con tilde debajo', 'may√∫scula I con tilde debajo', 'may√∫scula I con tilde debajo']);
  this.executeCharTest('·∏∞', ['may√∫scula K con agudo', 'may√∫scula K con agudo', 'may√∫scula K con agudo']);
  this.executeCharTest('·∏≤', ['may√∫scula K con punto debajo', 'may√∫scula K con punto debajo', 'may√∫scula K con punto debajo']);
  this.executeCharTest('·∏¥', ['may√∫scula K con l√≠nea debajo', 'may√∫scula K con l√≠nea debajo', 'may√∫scula K con l√≠nea debajo']);
  this.executeCharTest('·∏∂', ['may√∫scula L con punto debajo', 'may√∫scula L con punto debajo', 'may√∫scula L con punto debajo']);
  this.executeCharTest('·∏∫', ['may√∫scula L con l√≠nea debajo', 'may√∫scula L con l√≠nea debajo', 'may√∫scula L con l√≠nea debajo']);
  this.executeCharTest('·∏º', ['may√∫scula L con acento circunflejo debajo', 'may√∫scula L con acento circunflejo debajo', 'may√∫scula L con acento circunflejo debajo']);
  this.executeCharTest('·∏æ', ['may√∫scula M con agudo', 'may√∫scula M con agudo', 'may√∫scula M con agudo']);
  this.executeCharTest('·πÄ', ['may√∫scula M con punto arriba', 'may√∫scula M con punto arriba', 'may√∫scula M con punto arriba']);
  this.executeCharTest('·πÇ', ['may√∫scula M con punto debajo', 'may√∫scula M con punto debajo', 'may√∫scula M con punto debajo']);
  this.executeCharTest('·πÑ', ['may√∫scula N con punto arriba', 'may√∫scula N con punto arriba', 'may√∫scula N con punto arriba']);
  this.executeCharTest('·πÜ', ['may√∫scula N con punto debajo', 'may√∫scula N con punto debajo', 'may√∫scula N con punto debajo']);
  this.executeCharTest('·πà', ['may√∫scula N con l√≠nea debajo', 'may√∫scula N con l√≠nea debajo', 'may√∫scula N con l√≠nea debajo']);
  this.executeCharTest('·πä', ['may√∫scula N con acento circunflejo debajo', 'may√∫scula N con acento circunflejo debajo', 'may√∫scula N con acento circunflejo debajo']);
  this.executeCharTest('·πî', ['may√∫scula P con agudo', 'may√∫scula P con agudo', 'may√∫scula P con agudo']);
  this.executeCharTest('·πñ', ['may√∫scula P con punto arriba', 'may√∫scula P con punto arriba', 'may√∫scula P con punto arriba']);
  this.executeCharTest('·πò', ['may√∫scula R con punto arriba', 'may√∫scula R con punto arriba', 'may√∫scula R con punto arriba']);
  this.executeCharTest('·πö', ['may√∫scula R con punto debajo', 'may√∫scula R con punto debajo', 'may√∫scula R con punto debajo']);
  this.executeCharTest('·πû', ['may√∫scula R con l√≠nea debajo', 'may√∫scula R con l√≠nea debajo', 'may√∫scula R con l√≠nea debajo']);
  this.executeCharTest('·π†', ['may√∫scula S con punto arriba', 'may√∫scula S con punto arriba', 'may√∫scula S con punto arriba']);
  this.executeCharTest('·π¢', ['may√∫scula S con punto debajo', 'may√∫scula S con punto debajo', 'may√∫scula S con punto debajo']);
  this.executeCharTest('·π™', ['may√∫scula T con punto arriba', 'may√∫scula T con punto arriba', 'may√∫scula T con punto arriba']);
  this.executeCharTest('·π¨', ['may√∫scula T con punto debajo', 'may√∫scula T con punto debajo', 'may√∫scula T con punto debajo']);
  this.executeCharTest('·πÆ', ['may√∫scula T con l√≠nea debajo', 'may√∫scula T con l√≠nea debajo', 'may√∫scula T con l√≠nea debajo']);
  this.executeCharTest('·π∞', ['may√∫scula T con acento circunflejo debajo', 'may√∫scula T con acento circunflejo debajo', 'may√∫scula T con acento circunflejo debajo']);
  this.executeCharTest('·π≤', ['may√∫scula U con di√©resis debajo', 'may√∫scula U con di√©resis debajo', 'may√∫scula U con di√©resis debajo']);
  this.executeCharTest('·π¥', ['may√∫scula U con tilde debajo', 'may√∫scula U con tilde debajo', 'may√∫scula U con tilde debajo']);
  this.executeCharTest('·π∂', ['may√∫scula U con acento circunflejo debajo', 'may√∫scula U con acento circunflejo debajo', 'may√∫scula U con acento circunflejo debajo']);
  this.executeCharTest('·πº', ['may√∫scula V con tilde', 'may√∫scula V con tilde', 'may√∫scula V con tilde']);
  this.executeCharTest('·πæ', ['may√∫scula V con punto debajo', 'may√∫scula V con punto debajo', 'may√∫scula V con punto debajo']);
  this.executeCharTest('·∫Ä', ['may√∫scula W con grave', 'may√∫scula W con grave', 'may√∫scula W con grave']);
  this.executeCharTest('·∫Ç', ['may√∫scula W con agudo', 'may√∫scula W con agudo', 'may√∫scula W con agudo']);
  this.executeCharTest('·∫Ñ', ['may√∫scula W con di√©resis', 'may√∫scula W con di√©resis', 'may√∫scula W con di√©resis']);
  this.executeCharTest('·∫Ü', ['may√∫scula W con punto arriba', 'may√∫scula W con punto arriba', 'may√∫scula W con punto arriba']);
  this.executeCharTest('·∫à', ['may√∫scula W con punto debajo', 'may√∫scula W con punto debajo', 'may√∫scula W con punto debajo']);
  this.executeCharTest('·∫ä', ['may√∫scula X con punto arriba', 'may√∫scula X con punto arriba', 'may√∫scula X con punto arriba']);
  this.executeCharTest('·∫å', ['may√∫scula X con di√©resis', 'may√∫scula X con di√©resis', 'may√∫scula X con di√©resis']);
  this.executeCharTest('·∫é', ['may√∫scula Y con punto arriba', 'may√∫scula Y con punto arriba', 'may√∫scula Y con punto arriba']);
  this.executeCharTest('·∫ê', ['may√∫scula Z con acento circunflejo', 'may√∫scula Z con acento circunflejo', 'may√∫scula Z con acento circunflejo']);
  this.executeCharTest('·∫í', ['may√∫scula Z con punto debajo', 'may√∫scula Z con punto debajo', 'may√∫scula Z con punto debajo']);
  this.executeCharTest('·∫î', ['may√∫scula Z with line below', 'may√∫scula Z with line below', 'may√∫scula Z with line below']);
  this.executeCharTest('·∫†', ['may√∫scula A con punto debajo', 'may√∫scula A con punto debajo', 'may√∫scula A con punto debajo']);
  this.executeCharTest('·∫¢', ['may√∫scula A con gancho arriba', 'may√∫scula A con gancho arriba', 'may√∫scula A con gancho arriba']);
  this.executeCharTest('·∫∏', ['may√∫scula E con punto debajo', 'may√∫scula E con punto debajo', 'may√∫scula E con punto debajo']);
  this.executeCharTest('·∫∫', ['may√∫scula E con gancho arriba', 'may√∫scula E con gancho arriba', 'may√∫scula E con gancho arriba']);
  this.executeCharTest('·∫º', ['may√∫scula E con tilde', 'may√∫scula E con tilde', 'may√∫scula E con tilde']);
  this.executeCharTest('·ªà', ['may√∫scula I con gancho arriba', 'may√∫scula I con gancho arriba', 'may√∫scula I con gancho arriba']);
  this.executeCharTest('·ªä', ['may√∫scula I con punto debajo', 'may√∫scula I con punto debajo', 'may√∫scula I con punto debajo']);
  this.executeCharTest('·ªå', ['may√∫scula O con punto debajo', 'may√∫scula O con punto debajo', 'may√∫scula O con punto debajo']);
  this.executeCharTest('·ªé', ['may√∫scula O con gancho arriba', 'may√∫scula O con gancho arriba', 'may√∫scula O con gancho arriba']);
  this.executeCharTest('·ª§', ['may√∫scula U con punto debajo', 'may√∫scula U con punto debajo', 'may√∫scula U con punto debajo']);
  this.executeCharTest('·ª¶', ['may√∫scula U con gancho arriba', 'may√∫scula U con gancho arriba', 'may√∫scula U con gancho arriba']);
  this.executeCharTest('·ª≤', ['may√∫scula Y con grave', 'may√∫scula Y con grave', 'may√∫scula Y con grave']);
  this.executeCharTest('·ª¥', ['may√∫scula Y con punto debajo', 'may√∫scula Y con punto debajo', 'may√∫scula Y con punto debajo']);
  this.executeCharTest('·ª∂', ['may√∫scula Y con gancho arriba', 'may√∫scula Y con gancho arriba', 'may√∫scula Y con gancho arriba']);
  this.executeCharTest('·ª∏', ['may√∫scula Y con tilde', 'may√∫scula Y con tilde', 'may√∫scula Y con tilde']);
  this.executeCharTest('ùï¨', ['negrita Fraktur may√∫scula A', 'negrita Fraktur may√∫scula A', 'negrita Fraktur may√∫scula A']);
  this.executeCharTest('ùï≠', ['negrita Fraktur may√∫scula B', 'negrita Fraktur may√∫scula B', 'negrita Fraktur may√∫scula B']);
  this.executeCharTest('ùïÆ', ['negrita Fraktur may√∫scula C', 'negrita Fraktur may√∫scula C', 'negrita Fraktur may√∫scula C']);
  this.executeCharTest('ùïØ', ['negrita Fraktur may√∫scula D', 'negrita Fraktur may√∫scula D', 'negrita Fraktur may√∫scula D']);
  this.executeCharTest('ùï∞', ['negrita Fraktur may√∫scula E', 'negrita Fraktur may√∫scula E', 'negrita Fraktur may√∫scula E']);
  this.executeCharTest('ùï±', ['negrita Fraktur may√∫scula F', 'negrita Fraktur may√∫scula F', 'negrita Fraktur may√∫scula F']);
  this.executeCharTest('ùï≤', ['negrita Fraktur may√∫scula G', 'negrita Fraktur may√∫scula G', 'negrita Fraktur may√∫scula G']);
  this.executeCharTest('ùï≥', ['negrita Fraktur may√∫scula H', 'negrita Fraktur may√∫scula H', 'negrita Fraktur may√∫scula H']);
  this.executeCharTest('ùï¥', ['negrita Fraktur may√∫scula I', 'negrita Fraktur may√∫scula I', 'negrita Fraktur may√∫scula I']);
  this.executeCharTest('ùïµ', ['negrita Fraktur may√∫scula J', 'negrita Fraktur may√∫scula J', 'negrita Fraktur may√∫scula J']);
  this.executeCharTest('ùï∂', ['negrita Fraktur may√∫scula K', 'negrita Fraktur may√∫scula K', 'negrita Fraktur may√∫scula K']);
  this.executeCharTest('ùï∑', ['negrita Fraktur may√∫scula L', 'negrita Fraktur may√∫scula L', 'negrita Fraktur may√∫scula L']);
  this.executeCharTest('ùï∏', ['negrita Fraktur may√∫scula M', 'negrita Fraktur may√∫scula M', 'negrita Fraktur may√∫scula M']);
  this.executeCharTest('ùïπ', ['negrita Fraktur may√∫scula N', 'negrita Fraktur may√∫scula N', 'negrita Fraktur may√∫scula N']);
  this.executeCharTest('ùï∫', ['negrita Fraktur may√∫scula O', 'negrita Fraktur may√∫scula O', 'negrita Fraktur may√∫scula O']);
  this.executeCharTest('ùïª', ['negrita Fraktur may√∫scula P', 'negrita Fraktur may√∫scula P', 'negrita Fraktur may√∫scula P']);
  this.executeCharTest('ùïº', ['negrita Fraktur may√∫scula Q', 'negrita Fraktur may√∫scula Q', 'negrita Fraktur may√∫scula Q']);
  this.executeCharTest('ùïΩ', ['negrita Fraktur may√∫scula R', 'negrita Fraktur may√∫scula R', 'negrita Fraktur may√∫scula R']);
  this.executeCharTest('ùïæ', ['negrita Fraktur may√∫scula S', 'negrita Fraktur may√∫scula S', 'negrita Fraktur may√∫scula S']);
  this.executeCharTest('ùïø', ['negrita Fraktur may√∫scula T', 'negrita Fraktur may√∫scula T', 'negrita Fraktur may√∫scula T']);
  this.executeCharTest('ùñÄ', ['negrita Fraktur may√∫scula U', 'negrita Fraktur may√∫scula U', 'negrita Fraktur may√∫scula U']);
  this.executeCharTest('ùñÅ', ['negrita Fraktur may√∫scula V', 'negrita Fraktur may√∫scula V', 'negrita Fraktur may√∫scula V']);
  this.executeCharTest('ùñÇ', ['negrita Fraktur may√∫scula W', 'negrita Fraktur may√∫scula W', 'negrita Fraktur may√∫scula W']);
  this.executeCharTest('ùñÉ', ['negrita Fraktur may√∫scula X', 'negrita Fraktur may√∫scula X', 'negrita Fraktur may√∫scula X']);
  this.executeCharTest('ùñÑ', ['negrita Fraktur may√∫scula Y', 'negrita Fraktur may√∫scula Y', 'negrita Fraktur may√∫scula Y']);
  this.executeCharTest('ùñÖ', ['negrita Fraktur may√∫scula Z', 'negrita Fraktur may√∫scula Z', 'negrita Fraktur may√∫scula Z']);
  this.executeCharTest('ùñÜ', ['negrita Fraktur a', 'negrita Fraktur a', 'negrita Fraktur a']);
  this.executeCharTest('ùñá', ['negrita Fraktur b', 'negrita Fraktur b', 'negrita Fraktur b']);
  this.executeCharTest('ùñà', ['negrita Fraktur c', 'negrita Fraktur c', 'negrita Fraktur c']);
  this.executeCharTest('ùñâ', ['negrita Fraktur d', 'negrita Fraktur d', 'negrita Fraktur d']);
  this.executeCharTest('ùñä', ['negrita Fraktur e', 'negrita Fraktur e', 'negrita Fraktur e']);
  this.executeCharTest('ùñã', ['negrita Fraktur f', 'negrita Fraktur f', 'negrita Fraktur f']);
  this.executeCharTest('ùñå', ['negrita Fraktur g', 'negrita Fraktur g', 'negrita Fraktur g']);
  this.executeCharTest('ùñç', ['negrita Fraktur h', 'negrita Fraktur h', 'negrita Fraktur h']);
  this.executeCharTest('ùñé', ['negrita Fraktur i', 'negrita Fraktur i', 'negrita Fraktur i']);
  this.executeCharTest('ùñè', ['negrita Fraktur j', 'negrita Fraktur j', 'negrita Fraktur j']);
  this.executeCharTest('ùñê', ['negrita Fraktur k', 'negrita Fraktur k', 'negrita Fraktur k']);
  this.executeCharTest('ùñë', ['negrita Fraktur l', 'negrita Fraktur l', 'negrita Fraktur l']);
  this.executeCharTest('ùñí', ['negrita Fraktur m', 'negrita Fraktur m', 'negrita Fraktur m']);
  this.executeCharTest('ùñì', ['negrita Fraktur n', 'negrita Fraktur n', 'negrita Fraktur n']);
  this.executeCharTest('ùñî', ['negrita Fraktur o', 'negrita Fraktur o', 'negrita Fraktur o']);
  this.executeCharTest('ùñï', ['negrita Fraktur p', 'negrita Fraktur p', 'negrita Fraktur p']);
  this.executeCharTest('ùññ', ['negrita Fraktur q', 'negrita Fraktur q', 'negrita Fraktur q']);
  this.executeCharTest('ùñó', ['negrita Fraktur r', 'negrita Fraktur r', 'negrita Fraktur r']);
  this.executeCharTest('ùñò', ['negrita Fraktur s', 'negrita Fraktur s', 'negrita Fraktur s']);
  this.executeCharTest('ùñô', ['negrita Fraktur t', 'negrita Fraktur t', 'negrita Fraktur t']);
  this.executeCharTest('ùñö', ['negrita Fraktur u', 'negrita Fraktur u', 'negrita Fraktur u']);
  this.executeCharTest('ùñõ', ['negrita Fraktur v', 'negrita Fraktur v', 'negrita Fraktur v']);
  this.executeCharTest('ùñú', ['negrita Fraktur w', 'negrita Fraktur w', 'negrita Fraktur w']);
  this.executeCharTest('ùñù', ['negrita Fraktur x', 'negrita Fraktur x', 'negrita Fraktur x']);
  this.executeCharTest('ùñû', ['negrita Fraktur y', 'negrita Fraktur y', 'negrita Fraktur y']);
  this.executeCharTest('ùñü', ['negrita Fraktur z', 'negrita Fraktur z', 'negrita Fraktur z']);
  this.executeCharTest('ùêÄ', ['negrita may√∫scula A', 'negrita may√∫scula A', 'negrita may√∫scula A']);
  this.executeCharTest('ùêÅ', ['negrita may√∫scula B', 'negrita may√∫scula B', 'negrita may√∫scula B']);
  this.executeCharTest('ùêÇ', ['negrita may√∫scula C', 'negrita may√∫scula C', 'negrita may√∫scula C']);
  this.executeCharTest('ùêÉ', ['negrita may√∫scula D', 'negrita may√∫scula D', 'negrita may√∫scula D']);
  this.executeCharTest('ùêÑ', ['negrita may√∫scula E', 'negrita may√∫scula E', 'negrita may√∫scula E']);
  this.executeCharTest('ùêÖ', ['negrita may√∫scula F', 'negrita may√∫scula F', 'negrita may√∫scula F']);
  this.executeCharTest('ùêÜ', ['negrita may√∫scula G', 'negrita may√∫scula G', 'negrita may√∫scula G']);
  this.executeCharTest('ùêá', ['negrita may√∫scula H', 'negrita may√∫scula H', 'negrita may√∫scula H']);
  this.executeCharTest('ùêà', ['negrita may√∫scula I', 'negrita may√∫scula I', 'negrita may√∫scula I']);
  this.executeCharTest('ùêâ', ['negrita may√∫scula J', 'negrita may√∫scula J', 'negrita may√∫scula J']);
  this.executeCharTest('ùêä', ['negrita may√∫scula K', 'negrita may√∫scula K', 'negrita may√∫scula K']);
  this.executeCharTest('ùêã', ['negrita may√∫scula L', 'negrita may√∫scula L', 'negrita may√∫scula L']);
  this.executeCharTest('ùêå', ['negrita may√∫scula M', 'negrita may√∫scula M', 'negrita may√∫scula M']);
  this.executeCharTest('ùêç', ['negrita may√∫scula N', 'negrita may√∫scula N', 'negrita may√∫scula N']);
  this.executeCharTest('ùêé', ['negrita may√∫scula O', 'negrita may√∫scula O', 'negrita may√∫scula O']);
  this.executeCharTest('ùêè', ['negrita may√∫scula P', 'negrita may√∫scula P', 'negrita may√∫scula P']);
  this.executeCharTest('ùêê', ['negrita may√∫scula Q', 'negrita may√∫scula Q', 'negrita may√∫scula Q']);
  this.executeCharTest('ùêë', ['negrita may√∫scula R', 'negrita may√∫scula R', 'negrita may√∫scula R']);
  this.executeCharTest('ùêí', ['negrita may√∫scula S', 'negrita may√∫scula S', 'negrita may√∫scula S']);
  this.executeCharTest('ùêì', ['negrita may√∫scula T', 'negrita may√∫scula T', 'negrita may√∫scula T']);
  this.executeCharTest('ùêî', ['negrita may√∫scula U', 'negrita may√∫scula U', 'negrita may√∫scula U']);
  this.executeCharTest('ùêï', ['negrita may√∫scula V', 'negrita may√∫scula V', 'negrita may√∫scula V']);
  this.executeCharTest('ùêñ', ['negrita may√∫scula W', 'negrita may√∫scula W', 'negrita may√∫scula W']);
  this.executeCharTest('ùêó', ['negrita may√∫scula X', 'negrita may√∫scula X', 'negrita may√∫scula X']);
  this.executeCharTest('ùêò', ['negrita may√∫scula Y', 'negrita may√∫scula Y', 'negrita may√∫scula Y']);
  this.executeCharTest('ùêô', ['negrita may√∫scula Z', 'negrita may√∫scula Z', 'negrita may√∫scula Z']);
  this.executeCharTest('ùêö', ['negrita a', 'negrita a', 'negrita a']);
  this.executeCharTest('ùêõ', ['negrita b', 'negrita b', 'negrita b']);
  this.executeCharTest('ùêú', ['negrita c', 'negrita c', 'negrita c']);
  this.executeCharTest('ùêù', ['negrita d', 'negrita d', 'negrita d']);
  this.executeCharTest('ùêû', ['negrita e', 'negrita e', 'negrita e']);
  this.executeCharTest('ùêü', ['negrita f', 'negrita f', 'negrita f']);
  this.executeCharTest('ùê†', ['negrita g', 'negrita g', 'negrita g']);
  this.executeCharTest('ùê°', ['negrita h', 'negrita h', 'negrita h']);
  this.executeCharTest('ùê¢', ['negrita i', 'negrita i', 'negrita i']);
  this.executeCharTest('ùê£', ['negrita j', 'negrita j', 'negrita j']);
  this.executeCharTest('ùê§', ['negrita k', 'negrita k', 'negrita k']);
  this.executeCharTest('ùê•', ['negrita l', 'negrita l', 'negrita l']);
  this.executeCharTest('ùê¶', ['negrita m', 'negrita m', 'negrita m']);
  this.executeCharTest('ùêß', ['negrita n', 'negrita n', 'negrita n']);
  this.executeCharTest('ùê®', ['negrita o', 'negrita o', 'negrita o']);
  this.executeCharTest('ùê©', ['negrita p', 'negrita p', 'negrita p']);
  this.executeCharTest('ùê™', ['negrita q', 'negrita q', 'negrita q']);
  this.executeCharTest('ùê´', ['negrita r', 'negrita r', 'negrita r']);
  this.executeCharTest('ùê¨', ['negrita s', 'negrita s', 'negrita s']);
  this.executeCharTest('ùê≠', ['negrita t', 'negrita t', 'negrita t']);
  this.executeCharTest('ùêÆ', ['negrita u', 'negrita u', 'negrita u']);
  this.executeCharTest('ùêØ', ['negrita v', 'negrita v', 'negrita v']);
  this.executeCharTest('ùê∞', ['negrita w', 'negrita w', 'negrita w']);
  this.executeCharTest('ùê±', ['negrita x', 'negrita x', 'negrita x']);
  this.executeCharTest('ùê≤', ['negrita y', 'negrita y', 'negrita y']);
  this.executeCharTest('ùê≥', ['negrita z', 'negrita z', 'negrita z']);
  this.executeCharTest('ùë®', ['negrita cursiva may√∫scula A', 'negrita cursiva may√∫scula A', 'negrita cursiva may√∫scula A']);
  this.executeCharTest('ùë©', ['negrita cursiva may√∫scula B', 'negrita cursiva may√∫scula B', 'negrita cursiva may√∫scula B']);
  this.executeCharTest('ùë™', ['negrita cursiva may√∫scula C', 'negrita cursiva may√∫scula C', 'negrita cursiva may√∫scula C']);
  this.executeCharTest('ùë´', ['negrita cursiva may√∫scula D', 'negrita cursiva may√∫scula D', 'negrita cursiva may√∫scula D']);
  this.executeCharTest('ùë¨', ['negrita cursiva may√∫scula E', 'negrita cursiva may√∫scula E', 'negrita cursiva may√∫scula E']);
  this.executeCharTest('ùë≠', ['negrita cursiva may√∫scula F', 'negrita cursiva may√∫scula F', 'negrita cursiva may√∫scula F']);
  this.executeCharTest('ùëÆ', ['negrita cursiva may√∫scula G', 'negrita cursiva may√∫scula G', 'negrita cursiva may√∫scula G']);
  this.executeCharTest('ùëØ', ['negrita cursiva may√∫scula H', 'negrita cursiva may√∫scula H', 'negrita cursiva may√∫scula H']);
  this.executeCharTest('ùë∞', ['negrita cursiva may√∫scula I', 'negrita cursiva may√∫scula I', 'negrita cursiva may√∫scula I']);
  this.executeCharTest('ùë±', ['negrita cursiva may√∫scula J', 'negrita cursiva may√∫scula J', 'negrita cursiva may√∫scula J']);
  this.executeCharTest('ùë≤', ['negrita cursiva may√∫scula K', 'negrita cursiva may√∫scula K', 'negrita cursiva may√∫scula K']);
  this.executeCharTest('ùë≥', ['negrita cursiva may√∫scula L', 'negrita cursiva may√∫scula L', 'negrita cursiva may√∫scula L']);
  this.executeCharTest('ùë¥', ['negrita cursiva may√∫scula M', 'negrita cursiva may√∫scula M', 'negrita cursiva may√∫scula M']);
  this.executeCharTest('ùëµ', ['negrita cursiva may√∫scula N', 'negrita cursiva may√∫scula N', 'negrita cursiva may√∫scula N']);
  this.executeCharTest('ùë∂', ['negrita cursiva may√∫scula O', 'negrita cursiva may√∫scula O', 'negrita cursiva may√∫scula O']);
  this.executeCharTest('ùë∑', ['negrita cursiva may√∫scula P', 'negrita cursiva may√∫scula P', 'negrita cursiva may√∫scula P']);
  this.executeCharTest('ùë∏', ['negrita cursiva may√∫scula Q', 'negrita cursiva may√∫scula Q', 'negrita cursiva may√∫scula Q']);
  this.executeCharTest('ùëπ', ['negrita cursiva may√∫scula R', 'negrita cursiva may√∫scula R', 'negrita cursiva may√∫scula R']);
  this.executeCharTest('ùë∫', ['negrita cursiva may√∫scula S', 'negrita cursiva may√∫scula S', 'negrita cursiva may√∫scula S']);
  this.executeCharTest('ùëª', ['negrita cursiva may√∫scula T', 'negrita cursiva may√∫scula T', 'negrita cursiva may√∫scula T']);
  this.executeCharTest('ùëº', ['negrita cursiva may√∫scula U', 'negrita cursiva may√∫scula U', 'negrita cursiva may√∫scula U']);
  this.executeCharTest('ùëΩ', ['negrita cursiva may√∫scula V', 'negrita cursiva may√∫scula V', 'negrita cursiva may√∫scula V']);
  this.executeCharTest('ùëæ', ['negrita cursiva may√∫scula W', 'negrita cursiva may√∫scula W', 'negrita cursiva may√∫scula W']);
  this.executeCharTest('ùëø', ['negrita cursiva may√∫scula X', 'negrita cursiva may√∫scula X', 'negrita cursiva may√∫scula X']);
  this.executeCharTest('ùíÄ', ['negrita cursiva may√∫scula Y', 'negrita cursiva may√∫scula Y', 'negrita cursiva may√∫scula Y']);
  this.executeCharTest('ùíÅ', ['negrita cursiva may√∫scula Z', 'negrita cursiva may√∫scula Z', 'negrita cursiva may√∫scula Z']);
  this.executeCharTest('ùíÇ', ['negrita cursiva a', 'negrita cursiva a', 'negrita cursiva a']);
  this.executeCharTest('ùíÉ', ['negrita cursiva b', 'negrita cursiva b', 'negrita cursiva b']);
  this.executeCharTest('ùíÑ', ['negrita cursiva c', 'negrita cursiva c', 'negrita cursiva c']);
  this.executeCharTest('ùíÖ', ['negrita cursiva d', 'negrita cursiva d', 'negrita cursiva d']);
  this.executeCharTest('ùíÜ', ['negrita cursiva e', 'negrita cursiva e', 'negrita cursiva e']);
  this.executeCharTest('ùíá', ['negrita cursiva f', 'negrita cursiva f', 'negrita cursiva f']);
  this.executeCharTest('ùíà', ['negrita cursiva g', 'negrita cursiva g', 'negrita cursiva g']);
  this.executeCharTest('ùíâ', ['negrita cursiva h', 'negrita cursiva h', 'negrita cursiva h']);
  this.executeCharTest('ùíä', ['negrita cursiva i', 'negrita cursiva i', 'negrita cursiva i']);
  this.executeCharTest('ùíã', ['negrita cursiva j', 'negrita cursiva j', 'negrita cursiva j']);
  this.executeCharTest('ùíå', ['negrita cursiva k', 'negrita cursiva k', 'negrita cursiva k']);
  this.executeCharTest('ùíç', ['negrita cursiva l', 'negrita cursiva l', 'negrita cursiva l']);
  this.executeCharTest('ùíé', ['negrita cursiva m', 'negrita cursiva m', 'negrita cursiva m']);
  this.executeCharTest('ùíè', ['negrita cursiva n', 'negrita cursiva n', 'negrita cursiva n']);
  this.executeCharTest('ùíê', ['negrita cursiva o', 'negrita cursiva o', 'negrita cursiva o']);
  this.executeCharTest('ùíë', ['negrita cursiva p', 'negrita cursiva p', 'negrita cursiva p']);
  this.executeCharTest('ùíí', ['negrita cursiva q', 'negrita cursiva q', 'negrita cursiva q']);
  this.executeCharTest('ùíì', ['negrita cursiva r', 'negrita cursiva r', 'negrita cursiva r']);
  this.executeCharTest('ùíî', ['negrita cursiva s', 'negrita cursiva s', 'negrita cursiva s']);
  this.executeCharTest('ùíï', ['negrita cursiva t', 'negrita cursiva t', 'negrita cursiva t']);
  this.executeCharTest('ùíñ', ['negrita cursiva u', 'negrita cursiva u', 'negrita cursiva u']);
  this.executeCharTest('ùíó', ['negrita cursiva v', 'negrita cursiva v', 'negrita cursiva v']);
  this.executeCharTest('ùíò', ['negrita cursiva w', 'negrita cursiva w', 'negrita cursiva w']);
  this.executeCharTest('ùíô', ['negrita cursiva x', 'negrita cursiva x', 'negrita cursiva x']);
  this.executeCharTest('ùíö', ['negrita cursiva y', 'negrita cursiva y', 'negrita cursiva y']);
  this.executeCharTest('ùíõ', ['negrita cursiva z', 'negrita cursiva z', 'negrita cursiva z']);
  this.executeCharTest('ùìê', ['negrita script may√∫scula A', 'negrita script may√∫scula A', 'negrita script may√∫scula A']);
  this.executeCharTest('ùìë', ['negrita script may√∫scula B', 'negrita script may√∫scula B', 'negrita script may√∫scula B']);
  this.executeCharTest('ùìí', ['negrita script may√∫scula C', 'negrita script may√∫scula C', 'negrita script may√∫scula C']);
  this.executeCharTest('ùìì', ['negrita script may√∫scula D', 'negrita script may√∫scula D', 'negrita script may√∫scula D']);
  this.executeCharTest('ùìî', ['negrita script may√∫scula E', 'negrita script may√∫scula E', 'negrita script may√∫scula E']);
  this.executeCharTest('ùìï', ['negrita script may√∫scula F', 'negrita script may√∫scula F', 'negrita script may√∫scula F']);
  this.executeCharTest('ùìñ', ['negrita script may√∫scula G', 'negrita script may√∫scula G', 'negrita script may√∫scula G']);
  this.executeCharTest('ùìó', ['negrita script may√∫scula H', 'negrita script may√∫scula H', 'negrita script may√∫scula H']);
  this.executeCharTest('ùìò', ['negrita script may√∫scula I', 'negrita script may√∫scula I', 'negrita script may√∫scula I']);
  this.executeCharTest('ùìô', ['negrita script may√∫scula J', 'negrita script may√∫scula J', 'negrita script may√∫scula J']);
  this.executeCharTest('ùìö', ['negrita script may√∫scula K', 'negrita script may√∫scula K', 'negrita script may√∫scula K']);
  this.executeCharTest('ùìõ', ['negrita script may√∫scula L', 'negrita script may√∫scula L', 'negrita script may√∫scula L']);
  this.executeCharTest('ùìú', ['negrita script may√∫scula M', 'negrita script may√∫scula M', 'negrita script may√∫scula M']);
  this.executeCharTest('ùìù', ['negrita script may√∫scula N', 'negrita script may√∫scula N', 'negrita script may√∫scula N']);
  this.executeCharTest('ùìû', ['negrita script may√∫scula O', 'negrita script may√∫scula O', 'negrita script may√∫scula O']);
  this.executeCharTest('ùìü', ['negrita script may√∫scula P', 'negrita script may√∫scula P', 'negrita script may√∫scula P']);
  this.executeCharTest('ùì†', ['negrita script may√∫scula Q', 'negrita script may√∫scula Q', 'negrita script may√∫scula Q']);
  this.executeCharTest('ùì°', ['negrita script may√∫scula R', 'negrita script may√∫scula R', 'negrita script may√∫scula R']);
  this.executeCharTest('ùì¢', ['negrita script may√∫scula S', 'negrita script may√∫scula S', 'negrita script may√∫scula S']);
  this.executeCharTest('ùì£', ['negrita script may√∫scula T', 'negrita script may√∫scula T', 'negrita script may√∫scula T']);
  this.executeCharTest('ùì§', ['negrita script may√∫scula U', 'negrita script may√∫scula U', 'negrita script may√∫scula U']);
  this.executeCharTest('ùì•', ['negrita script may√∫scula V', 'negrita script may√∫scula V', 'negrita script may√∫scula V']);
  this.executeCharTest('ùì¶', ['negrita script may√∫scula W', 'negrita script may√∫scula W', 'negrita script may√∫scula W']);
  this.executeCharTest('ùìß', ['negrita script may√∫scula X', 'negrita script may√∫scula X', 'negrita script may√∫scula X']);
  this.executeCharTest('ùì®', ['negrita script may√∫scula Y', 'negrita script may√∫scula Y', 'negrita script may√∫scula Y']);
  this.executeCharTest('ùì©', ['negrita script may√∫scula Z', 'negrita script may√∫scula Z', 'negrita script may√∫scula Z']);
  this.executeCharTest('ùì™', ['negrita script a', 'negrita script a', 'negrita script a']);
  this.executeCharTest('ùì´', ['negrita script b', 'negrita script b', 'negrita script b']);
  this.executeCharTest('ùì¨', ['negrita script c', 'negrita script c', 'negrita script c']);
  this.executeCharTest('ùì≠', ['negrita script d', 'negrita script d', 'negrita script d']);
  this.executeCharTest('ùìÆ', ['negrita script e', 'negrita script e', 'negrita script e']);
  this.executeCharTest('ùìØ', ['negrita script f', 'negrita script f', 'negrita script f']);
  this.executeCharTest('ùì∞', ['negrita script g', 'negrita script g', 'negrita script g']);
  this.executeCharTest('ùì±', ['negrita script h', 'negrita script h', 'negrita script h']);
  this.executeCharTest('ùì≤', ['negrita script i', 'negrita script i', 'negrita script i']);
  this.executeCharTest('ùì≥', ['negrita script j', 'negrita script j', 'negrita script j']);
  this.executeCharTest('ùì¥', ['negrita script k', 'negrita script k', 'negrita script k']);
  this.executeCharTest('ùìµ', ['negrita script l', 'negrita script l', 'negrita script l']);
  this.executeCharTest('ùì∂', ['negrita script m', 'negrita script m', 'negrita script m']);
  this.executeCharTest('ùì∑', ['negrita script n', 'negrita script n', 'negrita script n']);
  this.executeCharTest('ùì∏', ['negrita script o', 'negrita script o', 'negrita script o']);
  this.executeCharTest('ùìπ', ['negrita script p', 'negrita script p', 'negrita script p']);
  this.executeCharTest('ùì∫', ['negrita script q', 'negrita script q', 'negrita script q']);
  this.executeCharTest('ùìª', ['negrita script r', 'negrita script r', 'negrita script r']);
  this.executeCharTest('ùìº', ['negrita script s', 'negrita script s', 'negrita script s']);
  this.executeCharTest('ùìΩ', ['negrita script t', 'negrita script t', 'negrita script t']);
  this.executeCharTest('ùìæ', ['negrita script u', 'negrita script u', 'negrita script u']);
  this.executeCharTest('ùìø', ['negrita script v', 'negrita script v', 'negrita script v']);
  this.executeCharTest('ùîÄ', ['negrita script w', 'negrita script w', 'negrita script w']);
  this.executeCharTest('ùîÅ', ['negrita script x', 'negrita script x', 'negrita script x']);
  this.executeCharTest('ùîÇ', ['negrita script y', 'negrita script y', 'negrita script y']);
  this.executeCharTest('ùîÉ', ['negrita script z', 'negrita script z', 'negrita script z']);
  this.executeCharTest('ùî∏', ['negrita de pizarra may√∫scula A', 'negrita de pizarra may√∫scula A', 'negrita de pizarra may√∫scula A']);
  this.executeCharTest('ùîπ', ['negrita de pizarra may√∫scula B', 'negrita de pizarra may√∫scula B', 'negrita de pizarra may√∫scula B']);
  this.executeCharTest('‚ÑÇ', ['negrita de pizarra may√∫scula C', 'negrita de pizarra may√∫scula C', 'negrita de pizarra may√∫scula C']);
  this.executeCharTest('ùîª', ['negrita de pizarra may√∫scula D', 'negrita de pizarra may√∫scula D', 'negrita de pizarra may√∫scula D']);
  this.executeCharTest('ùîº', ['negrita de pizarra may√∫scula E', 'negrita de pizarra may√∫scula E', 'negrita de pizarra may√∫scula E']);
  this.executeCharTest('ùîΩ', ['negrita de pizarra may√∫scula F', 'negrita de pizarra may√∫scula F', 'negrita de pizarra may√∫scula F']);
  this.executeCharTest('ùîæ', ['negrita de pizarra may√∫scula G', 'negrita de pizarra may√∫scula G', 'negrita de pizarra may√∫scula G']);
  this.executeCharTest('‚Ñç', ['negrita de pizarra may√∫scula H', 'negrita de pizarra may√∫scula H', 'negrita de pizarra may√∫scula H']);
  this.executeCharTest('ùïÄ', ['negrita de pizarra may√∫scula I', 'negrita de pizarra may√∫scula I', 'negrita de pizarra may√∫scula I']);
  this.executeCharTest('ùïÅ', ['negrita de pizarra may√∫scula J', 'negrita de pizarra may√∫scula J', 'negrita de pizarra may√∫scula J']);
  this.executeCharTest('ùïÇ', ['negrita de pizarra may√∫scula K', 'negrita de pizarra may√∫scula K', 'negrita de pizarra may√∫scula K']);
  this.executeCharTest('ùïÉ', ['negrita de pizarra may√∫scula L', 'negrita de pizarra may√∫scula L', 'negrita de pizarra may√∫scula L']);
  this.executeCharTest('ùïÑ', ['negrita de pizarra may√∫scula M', 'negrita de pizarra may√∫scula M', 'negrita de pizarra may√∫scula M']);
  this.executeCharTest('‚Ñï', ['negrita de pizarra may√∫scula N', 'negrita de pizarra may√∫scula N', 'negrita de pizarra may√∫scula N']);
  this.executeCharTest('ùïÜ', ['negrita de pizarra may√∫scula O', 'negrita de pizarra may√∫scula O', 'negrita de pizarra may√∫scula O']);
  this.executeCharTest('‚Ñô', ['negrita de pizarra may√∫scula P', 'negrita de pizarra may√∫scula P', 'negrita de pizarra may√∫scula P']);
  this.executeCharTest('‚Ñö', ['negrita de pizarra may√∫scula Q', 'negrita de pizarra may√∫scula Q', 'negrita de pizarra may√∫scula Q']);
  this.executeCharTest('‚Ñù', ['negrita de pizarra may√∫scula R', 'negrita de pizarra may√∫scula R', 'negrita de pizarra may√∫scula R']);
  this.executeCharTest('ùïä', ['negrita de pizarra may√∫scula S', 'negrita de pizarra may√∫scula S', 'negrita de pizarra may√∫scula S']);
  this.executeCharTest('ùïã', ['negrita de pizarra may√∫scula T', 'negrita de pizarra may√∫scula T', 'negrita de pizarra may√∫scula T']);
  this.executeCharTest('ùïå', ['negrita de pizarra may√∫scula U', 'negrita de pizarra may√∫scula U', 'negrita de pizarra may√∫scula U']);
  this.executeCharTest('ùïç', ['negrita de pizarra may√∫scula V', 'negrita de pizarra may√∫scula V', 'negrita de pizarra may√∫scula V']);
  this.executeCharTest('ùïé', ['negrita de pizarra may√∫scula W', 'negrita de pizarra may√∫scula W', 'negrita de pizarra may√∫scula W']);
  this.executeCharTest('ùïè', ['negrita de pizarra may√∫scula X', 'negrita de pizarra may√∫scula X', 'negrita de pizarra may√∫scula X']);
  this.executeCharTest('ùïê', ['negrita de pizarra may√∫scula Y', 'negrita de pizarra may√∫scula Y', 'negrita de pizarra may√∫scula Y']);
  this.executeCharTest('‚Ñ§', ['negrita de pizarra may√∫scula Z', 'negrita de pizarra may√∫scula Z', 'negrita de pizarra may√∫scula Z']);
  this.executeCharTest('ùïí', ['negrita de pizarra a', 'negrita de pizarra a', 'negrita de pizarra a']);
  this.executeCharTest('ùïì', ['negrita de pizarra b', 'negrita de pizarra b', 'negrita de pizarra b']);
  this.executeCharTest('ùïî', ['negrita de pizarra c', 'negrita de pizarra c', 'negrita de pizarra c']);
  this.executeCharTest('ùïï', ['negrita de pizarra d', 'negrita de pizarra d', 'negrita de pizarra d']);
  this.executeCharTest('ùïñ', ['negrita de pizarra e', 'negrita de pizarra e', 'negrita de pizarra e']);
  this.executeCharTest('ùïó', ['negrita de pizarra f', 'negrita de pizarra f', 'negrita de pizarra f']);
  this.executeCharTest('ùïò', ['negrita de pizarra g', 'negrita de pizarra g', 'negrita de pizarra g']);
  this.executeCharTest('ùïô', ['negrita de pizarra h', 'negrita de pizarra h', 'negrita de pizarra h']);
  this.executeCharTest('ùïö', ['negrita de pizarra i', 'negrita de pizarra i', 'negrita de pizarra i']);
  this.executeCharTest('ùïõ', ['negrita de pizarra j', 'negrita de pizarra j', 'negrita de pizarra j']);
  this.executeCharTest('ùïú', ['negrita de pizarra k', 'negrita de pizarra k', 'negrita de pizarra k']);
  this.executeCharTest('ùïù', ['negrita de pizarra l', 'negrita de pizarra l', 'negrita de pizarra l']);
  this.executeCharTest('ùïû', ['negrita de pizarra m', 'negrita de pizarra m', 'negrita de pizarra m']);
  this.executeCharTest('ùïü', ['negrita de pizarra n', 'negrita de pizarra n', 'negrita de pizarra n']);
  this.executeCharTest('ùï†', ['negrita de pizarra o', 'negrita de pizarra o', 'negrita de pizarra o']);
  this.executeCharTest('ùï°', ['negrita de pizarra p', 'negrita de pizarra p', 'negrita de pizarra p']);
  this.executeCharTest('ùï¢', ['negrita de pizarra q', 'negrita de pizarra q', 'negrita de pizarra q']);
  this.executeCharTest('ùï£', ['negrita de pizarra r', 'negrita de pizarra r', 'negrita de pizarra r']);
  this.executeCharTest('ùï§', ['negrita de pizarra s', 'negrita de pizarra s', 'negrita de pizarra s']);
  this.executeCharTest('ùï•', ['negrita de pizarra t', 'negrita de pizarra t', 'negrita de pizarra t']);
  this.executeCharTest('ùï¶', ['negrita de pizarra u', 'negrita de pizarra u', 'negrita de pizarra u']);
  this.executeCharTest('ùïß', ['negrita de pizarra v', 'negrita de pizarra v', 'negrita de pizarra v']);
  this.executeCharTest('ùï®', ['negrita de pizarra w', 'negrita de pizarra w', 'negrita de pizarra w']);
  this.executeCharTest('ùï©', ['negrita de pizarra x', 'negrita de pizarra x', 'negrita de pizarra x']);
  this.executeCharTest('ùï™', ['negrita de pizarra y', 'negrita de pizarra y', 'negrita de pizarra y']);
  this.executeCharTest('ùï´', ['negrita de pizarra z', 'negrita de pizarra z', 'negrita de pizarra z']);
  this.executeCharTest('ùîÑ', ['Fraktur may√∫scula A', 'Fraktur may√∫scula A', 'Fraktur may√∫scula A']);
  this.executeCharTest('ùîÖ', ['Fraktur may√∫scula B', 'Fraktur may√∫scula B', 'Fraktur may√∫scula B']);
  this.executeCharTest('‚Ñ≠', ['Fraktur may√∫scula C', 'Fraktur may√∫scula C', 'Fraktur may√∫scula C']);
  this.executeCharTest('ùîá', ['Fraktur may√∫scula D', 'Fraktur may√∫scula D', 'Fraktur may√∫scula D']);
  this.executeCharTest('ùîà', ['Fraktur may√∫scula E', 'Fraktur may√∫scula E', 'Fraktur may√∫scula E']);
  this.executeCharTest('ùîâ', ['Fraktur may√∫scula F', 'Fraktur may√∫scula F', 'Fraktur may√∫scula F']);
  this.executeCharTest('ùîä', ['Fraktur may√∫scula G', 'Fraktur may√∫scula G', 'Fraktur may√∫scula G']);
  this.executeCharTest('‚Ñå', ['Fraktur may√∫scula H', 'Fraktur may√∫scula H', 'Fraktur may√∫scula H']);
  this.executeCharTest('‚Ñë', ['Fraktur may√∫scula I', 'Fraktur may√∫scula I', 'Fraktur may√∫scula I']);
  this.executeCharTest('ùîç', ['Fraktur may√∫scula J', 'Fraktur may√∫scula J', 'Fraktur may√∫scula J']);
  this.executeCharTest('ùîé', ['Fraktur may√∫scula K', 'Fraktur may√∫scula K', 'Fraktur may√∫scula K']);
  this.executeCharTest('ùîè', ['Fraktur may√∫scula L', 'Fraktur may√∫scula L', 'Fraktur may√∫scula L']);
  this.executeCharTest('ùîê', ['Fraktur may√∫scula M', 'Fraktur may√∫scula M', 'Fraktur may√∫scula M']);
  this.executeCharTest('ùîë', ['Fraktur may√∫scula N', 'Fraktur may√∫scula N', 'Fraktur may√∫scula N']);
  this.executeCharTest('ùîí', ['Fraktur may√∫scula O', 'Fraktur may√∫scula O', 'Fraktur may√∫scula O']);
  this.executeCharTest('ùîì', ['Fraktur may√∫scula P', 'Fraktur may√∫scula P', 'Fraktur may√∫scula P']);
  this.executeCharTest('ùîî', ['Fraktur may√∫scula Q', 'Fraktur may√∫scula Q', 'Fraktur may√∫scula Q']);
  this.executeCharTest('‚Ñú', ['Fraktur may√∫scula R', 'Fraktur may√∫scula R', 'Fraktur may√∫scula R']);
  this.executeCharTest('ùîñ', ['Fraktur may√∫scula S', 'Fraktur may√∫scula S', 'Fraktur may√∫scula S']);
  this.executeCharTest('ùîó', ['Fraktur may√∫scula T', 'Fraktur may√∫scula T', 'Fraktur may√∫scula T']);
  this.executeCharTest('ùîò', ['Fraktur may√∫scula U', 'Fraktur may√∫scula U', 'Fraktur may√∫scula U']);
  this.executeCharTest('ùîô', ['Fraktur may√∫scula V', 'Fraktur may√∫scula V', 'Fraktur may√∫scula V']);
  this.executeCharTest('ùîö', ['Fraktur may√∫scula W', 'Fraktur may√∫scula W', 'Fraktur may√∫scula W']);
  this.executeCharTest('ùîõ', ['Fraktur may√∫scula X', 'Fraktur may√∫scula X', 'Fraktur may√∫scula X']);
  this.executeCharTest('ùîú', ['Fraktur may√∫scula Y', 'Fraktur may√∫scula Y', 'Fraktur may√∫scula Y']);
  this.executeCharTest('‚Ñ®', ['Fraktur may√∫scula Z', 'Fraktur may√∫scula Z', 'Fraktur may√∫scula Z']);
  this.executeCharTest('ùîû', ['Fraktur a', 'Fraktur a', 'Fraktur a']);
  this.executeCharTest('ùîü', ['Fraktur b', 'Fraktur b', 'Fraktur b']);
  this.executeCharTest('ùî†', ['Fraktur c', 'Fraktur c', 'Fraktur c']);
  this.executeCharTest('ùî°', ['Fraktur d', 'Fraktur d', 'Fraktur d']);
  this.executeCharTest('ùî¢', ['Fraktur e', 'Fraktur e', 'Fraktur e']);
  this.executeCharTest('ùî£', ['Fraktur f', 'Fraktur f', 'Fraktur f']);
  this.executeCharTest('ùî§', ['Fraktur g', 'Fraktur g', 'Fraktur g']);
  this.executeCharTest('ùî•', ['Fraktur h', 'Fraktur h', 'Fraktur h']);
  this.executeCharTest('ùî¶', ['Fraktur i', 'Fraktur i', 'Fraktur i']);
  this.executeCharTest('ùîß', ['Fraktur j', 'Fraktur j', 'Fraktur j']);
  this.executeCharTest('ùî®', ['Fraktur k', 'Fraktur k', 'Fraktur k']);
  this.executeCharTest('ùî©', ['Fraktur l', 'Fraktur l', 'Fraktur l']);
  this.executeCharTest('ùî™', ['Fraktur m', 'Fraktur m', 'Fraktur m']);
  this.executeCharTest('ùî´', ['Fraktur n', 'Fraktur n', 'Fraktur n']);
  this.executeCharTest('ùî¨', ['Fraktur o', 'Fraktur o', 'Fraktur o']);
  this.executeCharTest('ùî≠', ['Fraktur p', 'Fraktur p', 'Fraktur p']);
  this.executeCharTest('ùîÆ', ['Fraktur q', 'Fraktur q', 'Fraktur q']);
  this.executeCharTest('ùîØ', ['Fraktur r', 'Fraktur r', 'Fraktur r']);
  this.executeCharTest('ùî∞', ['Fraktur s', 'Fraktur s', 'Fraktur s']);
  this.executeCharTest('ùî±', ['Fraktur t', 'Fraktur t', 'Fraktur t']);
  this.executeCharTest('ùî≤', ['Fraktur u', 'Fraktur u', 'Fraktur u']);
  this.executeCharTest('ùî≥', ['Fraktur v', 'Fraktur v', 'Fraktur v']);
  this.executeCharTest('ùî¥', ['Fraktur w', 'Fraktur w', 'Fraktur w']);
  this.executeCharTest('ùîµ', ['Fraktur x', 'Fraktur x', 'Fraktur x']);
  this.executeCharTest('ùî∂', ['Fraktur y', 'Fraktur y', 'Fraktur y']);
  this.executeCharTest('ùî∑', ['Fraktur z', 'Fraktur z', 'Fraktur z']);
  this.executeCharTest('ùê¥', ['cursiva may√∫scula A', 'cursiva may√∫scula A', 'cursiva may√∫scula A']);
  this.executeCharTest('ùêµ', ['cursiva may√∫scula B', 'cursiva may√∫scula B', 'cursiva may√∫scula B']);
  this.executeCharTest('ùê∂', ['cursiva may√∫scula C', 'cursiva may√∫scula C', 'cursiva may√∫scula C']);
  this.executeCharTest('ùê∑', ['cursiva may√∫scula D', 'cursiva may√∫scula D', 'cursiva may√∫scula D']);
  this.executeCharTest('ùê∏', ['cursiva may√∫scula E', 'cursiva may√∫scula E', 'cursiva may√∫scula E']);
  this.executeCharTest('ùêπ', ['cursiva may√∫scula F', 'cursiva may√∫scula F', 'cursiva may√∫scula F']);
  this.executeCharTest('ùê∫', ['cursiva may√∫scula G', 'cursiva may√∫scula G', 'cursiva may√∫scula G']);
  this.executeCharTest('ùêª', ['cursiva may√∫scula H', 'cursiva may√∫scula H', 'cursiva may√∫scula H']);
  this.executeCharTest('ùêº', ['cursiva may√∫scula I', 'cursiva may√∫scula I', 'cursiva may√∫scula I']);
  this.executeCharTest('ùêΩ', ['cursiva may√∫scula J', 'cursiva may√∫scula J', 'cursiva may√∫scula J']);
  this.executeCharTest('ùêæ', ['cursiva may√∫scula K', 'cursiva may√∫scula K', 'cursiva may√∫scula K']);
  this.executeCharTest('ùêø', ['cursiva may√∫scula L', 'cursiva may√∫scula L', 'cursiva may√∫scula L']);
  this.executeCharTest('ùëÄ', ['cursiva may√∫scula M', 'cursiva may√∫scula M', 'cursiva may√∫scula M']);
  this.executeCharTest('ùëÅ', ['cursiva may√∫scula N', 'cursiva may√∫scula N', 'cursiva may√∫scula N']);
  this.executeCharTest('ùëÇ', ['cursiva may√∫scula O', 'cursiva may√∫scula O', 'cursiva may√∫scula O']);
  this.executeCharTest('ùëÉ', ['cursiva may√∫scula P', 'cursiva may√∫scula P', 'cursiva may√∫scula P']);
  this.executeCharTest('ùëÑ', ['cursiva may√∫scula Q', 'cursiva may√∫scula Q', 'cursiva may√∫scula Q']);
  this.executeCharTest('ùëÖ', ['cursiva may√∫scula R', 'cursiva may√∫scula R', 'cursiva may√∫scula R']);
  this.executeCharTest('ùëÜ', ['cursiva may√∫scula S', 'cursiva may√∫scula S', 'cursiva may√∫scula S']);
  this.executeCharTest('ùëá', ['cursiva may√∫scula T', 'cursiva may√∫scula T', 'cursiva may√∫scula T']);
  this.executeCharTest('ùëà', ['cursiva may√∫scula U', 'cursiva may√∫scula U', 'cursiva may√∫scula U']);
  this.executeCharTest('ùëâ', ['cursiva may√∫scula V', 'cursiva may√∫scula V', 'cursiva may√∫scula V']);
  this.executeCharTest('ùëä', ['cursiva may√∫scula W', 'cursiva may√∫scula W', 'cursiva may√∫scula W']);
  this.executeCharTest('ùëã', ['cursiva may√∫scula X', 'cursiva may√∫scula X', 'cursiva may√∫scula X']);
  this.executeCharTest('ùëå', ['cursiva may√∫scula Y', 'cursiva may√∫scula Y', 'cursiva may√∫scula Y']);
  this.executeCharTest('ùëç', ['cursiva may√∫scula Z', 'cursiva may√∫scula Z', 'cursiva may√∫scula Z']);
  this.executeCharTest('ùëé', ['cursiva a', 'cursiva a', 'cursiva a']);
  this.executeCharTest('ùëè', ['cursiva b', 'cursiva b', 'cursiva b']);
  this.executeCharTest('ùëê', ['cursiva c', 'cursiva c', 'cursiva c']);
  this.executeCharTest('ùëë', ['cursiva d', 'cursiva d', 'cursiva d']);
  this.executeCharTest('ùëí', ['cursiva e', 'cursiva e', 'cursiva e']);
  this.executeCharTest('ùëì', ['cursiva f', 'cursiva f', 'cursiva f']);
  this.executeCharTest('ùëî', ['cursiva g', 'cursiva g', 'cursiva g']);
  this.executeCharTest('‚Ñé', ['constante de Planck', 'constante de Planck', 'constante de Planck']);
  this.executeCharTest('ùëñ', ['cursiva i', 'cursiva i', 'cursiva i']);
  this.executeCharTest('ùëó', ['cursiva j', 'cursiva j', 'cursiva j']);
  this.executeCharTest('ùëò', ['cursiva k', 'cursiva k', 'cursiva k']);
  this.executeCharTest('ùëô', ['cursiva l', 'cursiva l', 'cursiva l']);
  this.executeCharTest('ùëö', ['cursiva m', 'cursiva m', 'cursiva m']);
  this.executeCharTest('ùëõ', ['cursiva n', 'cursiva n', 'cursiva n']);
  this.executeCharTest('ùëú', ['cursiva o', 'cursiva o', 'cursiva o']);
  this.executeCharTest('ùëù', ['cursiva p', 'cursiva p', 'cursiva p']);
  this.executeCharTest('ùëû', ['cursiva q', 'cursiva q', 'cursiva q']);
  this.executeCharTest('ùëü', ['cursiva r', 'cursiva r', 'cursiva r']);
  this.executeCharTest('ùë†', ['cursiva s', 'cursiva s', 'cursiva s']);
  this.executeCharTest('ùë°', ['cursiva t', 'cursiva t', 'cursiva t']);
  this.executeCharTest('ùë¢', ['cursiva u', 'cursiva u', 'cursiva u']);
  this.executeCharTest('ùë£', ['cursiva v', 'cursiva v', 'cursiva v']);
  this.executeCharTest('ùë§', ['cursiva w', 'cursiva w', 'cursiva w']);
  this.executeCharTest('ùë•', ['cursiva x', 'cursiva x', 'cursiva x']);
  this.executeCharTest('ùë¶', ['cursiva y', 'cursiva y', 'cursiva y']);
  this.executeCharTest('ùëß', ['cursiva z', 'cursiva z', 'cursiva z']);
  this.executeCharTest('ùô∞', ['monoespacio may√∫scula A', 'monoespacio may√∫scula A', 'monoespacio may√∫scula A']);
  this.executeCharTest('ùô±', ['monoespacio may√∫scula B', 'monoespacio may√∫scula B', 'monoespacio may√∫scula B']);
  this.executeCharTest('ùô≤', ['monoespacio may√∫scula C', 'monoespacio may√∫scula C', 'monoespacio may√∫scula C']);
  this.executeCharTest('ùô≥', ['monoespacio may√∫scula D', 'monoespacio may√∫scula D', 'monoespacio may√∫scula D']);
  this.executeCharTest('ùô¥', ['monoespacio may√∫scula E', 'monoespacio may√∫scula E', 'monoespacio may√∫scula E']);
  this.executeCharTest('ùôµ', ['monoespacio may√∫scula F', 'monoespacio may√∫scula F', 'monoespacio may√∫scula F']);
  this.executeCharTest('ùô∂', ['monoespacio may√∫scula G', 'monoespacio may√∫scula G', 'monoespacio may√∫scula G']);
  this.executeCharTest('ùô∑', ['monoespacio may√∫scula H', 'monoespacio may√∫scula H', 'monoespacio may√∫scula H']);
  this.executeCharTest('ùô∏', ['monoespacio may√∫scula I', 'monoespacio may√∫scula I', 'monoespacio may√∫scula I']);
  this.executeCharTest('ùôπ', ['monoespacio may√∫scula J', 'monoespacio may√∫scula J', 'monoespacio may√∫scula J']);
  this.executeCharTest('ùô∫', ['monoespacio may√∫scula K', 'monoespacio may√∫scula K', 'monoespacio may√∫scula K']);
  this.executeCharTest('ùôª', ['monoespacio may√∫scula L', 'monoespacio may√∫scula L', 'monoespacio may√∫scula L']);
  this.executeCharTest('ùôº', ['monoespacio may√∫scula M', 'monoespacio may√∫scula M', 'monoespacio may√∫scula M']);
  this.executeCharTest('ùôΩ', ['monoespacio may√∫scula N', 'monoespacio may√∫scula N', 'monoespacio may√∫scula N']);
  this.executeCharTest('ùôæ', ['monoespacio may√∫scula O', 'monoespacio may√∫scula O', 'monoespacio may√∫scula O']);
  this.executeCharTest('ùôø', ['monoespacio may√∫scula P', 'monoespacio may√∫scula P', 'monoespacio may√∫scula P']);
  this.executeCharTest('ùöÄ', ['monoespacio may√∫scula Q', 'monoespacio may√∫scula Q', 'monoespacio may√∫scula Q']);
  this.executeCharTest('ùöÅ', ['monoespacio may√∫scula R', 'monoespacio may√∫scula R', 'monoespacio may√∫scula R']);
  this.executeCharTest('ùöÇ', ['monoespacio may√∫scula S', 'monoespacio may√∫scula S', 'monoespacio may√∫scula S']);
  this.executeCharTest('ùöÉ', ['monoespacio may√∫scula T', 'monoespacio may√∫scula T', 'monoespacio may√∫scula T']);
  this.executeCharTest('ùöÑ', ['monoespacio may√∫scula U', 'monoespacio may√∫scula U', 'monoespacio may√∫scula U']);
  this.executeCharTest('ùöÖ', ['monoespacio may√∫scula V', 'monoespacio may√∫scula V', 'monoespacio may√∫scula V']);
  this.executeCharTest('ùöÜ', ['monoespacio may√∫scula W', 'monoespacio may√∫scula W', 'monoespacio may√∫scula W']);
  this.executeCharTest('ùöá', ['monoespacio may√∫scula X', 'monoespacio may√∫scula X', 'monoespacio may√∫scula X']);
  this.executeCharTest('ùöà', ['monoespacio may√∫scula Y', 'monoespacio may√∫scula Y', 'monoespacio may√∫scula Y']);
  this.executeCharTest('ùöâ', ['monoespacio may√∫scula Z', 'monoespacio may√∫scula Z', 'monoespacio may√∫scula Z']);
  this.executeCharTest('ùöä', ['monoespacio a', 'monoespacio a', 'monoespacio a']);
  this.executeCharTest('ùöã', ['monoespacio b', 'monoespacio b', 'monoespacio b']);
  this.executeCharTest('ùöå', ['monoespacio c', 'monoespacio c', 'monoespacio c']);
  this.executeCharTest('ùöç', ['monoespacio d', 'monoespacio d', 'monoespacio d']);
  this.executeCharTest('ùöé', ['monoespacio e', 'monoespacio e', 'monoespacio e']);
  this.executeCharTest('ùöè', ['monoespacio f', 'monoespacio f', 'monoespacio f']);
  this.executeCharTest('ùöê', ['monoespacio g', 'monoespacio g', 'monoespacio g']);
  this.executeCharTest('ùöë', ['monoespacio h', 'monoespacio h', 'monoespacio h']);
  this.executeCharTest('ùöí', ['monoespacio i', 'monoespacio i', 'monoespacio i']);
  this.executeCharTest('ùöì', ['monoespacio j', 'monoespacio j', 'monoespacio j']);
  this.executeCharTest('ùöî', ['monoespacio k', 'monoespacio k', 'monoespacio k']);
  this.executeCharTest('ùöï', ['monoespacio l', 'monoespacio l', 'monoespacio l']);
  this.executeCharTest('ùöñ', ['monoespacio m', 'monoespacio m', 'monoespacio m']);
  this.executeCharTest('ùöó', ['monoespacio n', 'monoespacio n', 'monoespacio n']);
  this.executeCharTest('ùöò', ['monoespacio o', 'monoespacio o', 'monoespacio o']);
  this.executeCharTest('ùöô', ['monoespacio p', 'monoespacio p', 'monoespacio p']);
  this.executeCharTest('ùöö', ['monoespacio q', 'monoespacio q', 'monoespacio q']);
  this.executeCharTest('ùöõ', ['monoespacio r', 'monoespacio r', 'monoespacio r']);
  this.executeCharTest('ùöú', ['monoespacio s', 'monoespacio s', 'monoespacio s']);
  this.executeCharTest('ùöù', ['monoespacio t', 'monoespacio t', 'monoespacio t']);
  this.executeCharTest('ùöû', ['monoespacio u', 'monoespacio u', 'monoespacio u']);
  this.executeCharTest('ùöü', ['monoespacio v', 'monoespacio v', 'monoespacio v']);
  this.executeCharTest('ùö†', ['monoespacio w', 'monoespacio w', 'monoespacio w']);
  this.executeCharTest('ùö°', ['monoespacio x', 'monoespacio x', 'monoespacio x']);
  this.executeCharTest('ùö¢', ['monoespacio y', 'monoespacio y', 'monoespacio y']);
  this.executeCharTest('ùö£', ['monoespacio z', 'monoespacio z', 'monoespacio z']);
  this.executeCharTest('ùóî', ['sans-serif negrita may√∫scula A', 'sans-serif negrita may√∫scula A', 'sans-serif negrita may√∫scula A']);
  this.executeCharTest('ùóï', ['sans-serif negrita may√∫scula B', 'sans-serif negrita may√∫scula B', 'sans-serif negrita may√∫scula B']);
  this.executeCharTest('ùóñ', ['sans-serif negrita may√∫scula C', 'sans-serif negrita may√∫scula C', 'sans-serif negrita may√∫scula C']);
  this.executeCharTest('ùóó', ['sans-serif negrita may√∫scula D', 'sans-serif negrita may√∫scula D', 'sans-serif negrita may√∫scula D']);
  this.executeCharTest('ùóò', ['sans-serif negrita may√∫scula E', 'sans-serif negrita may√∫scula E', 'sans-serif negrita may√∫scula E']);
  this.executeCharTest('ùóô', ['sans-serif negrita may√∫scula F', 'sans-serif negrita may√∫scula F', 'sans-serif negrita may√∫scula F']);
  this.executeCharTest('ùóö', ['sans-serif negrita may√∫scula G', 'sans-serif negrita may√∫scula G', 'sans-serif negrita may√∫scula G']);
  this.executeCharTest('ùóõ', ['sans-serif negrita may√∫scula H', 'sans-serif negrita may√∫scula H', 'sans-serif negrita may√∫scula H']);
  this.executeCharTest('ùóú', ['sans-serif negrita may√∫scula I', 'sans-serif negrita may√∫scula I', 'sans-serif negrita may√∫scula I']);
  this.executeCharTest('ùóù', ['sans-serif negrita may√∫scula J', 'sans-serif negrita may√∫scula J', 'sans-serif negrita may√∫scula J']);
  this.executeCharTest('ùóû', ['sans-serif negrita may√∫scula K', 'sans-serif negrita may√∫scula K', 'sans-serif negrita may√∫scula K']);
  this.executeCharTest('ùóü', ['sans-serif negrita may√∫scula L', 'sans-serif negrita may√∫scula L', 'sans-serif negrita may√∫scula L']);
  this.executeCharTest('ùó†', ['sans-serif negrita may√∫scula M', 'sans-serif negrita may√∫scula M', 'sans-serif negrita may√∫scula M']);
  this.executeCharTest('ùó°', ['sans-serif negrita may√∫scula N', 'sans-serif negrita may√∫scula N', 'sans-serif negrita may√∫scula N']);
  this.executeCharTest('ùó¢', ['sans-serif negrita may√∫scula O', 'sans-serif negrita may√∫scula O', 'sans-serif negrita may√∫scula O']);
  this.executeCharTest('ùó£', ['sans-serif negrita may√∫scula P', 'sans-serif negrita may√∫scula P', 'sans-serif negrita may√∫scula P']);
  this.executeCharTest('ùó§', ['sans-serif negrita may√∫scula Q', 'sans-serif negrita may√∫scula Q', 'sans-serif negrita may√∫scula Q']);
  this.executeCharTest('ùó•', ['sans-serif negrita may√∫scula R', 'sans-serif negrita may√∫scula R', 'sans-serif negrita may√∫scula R']);
  this.executeCharTest('ùó¶', ['sans-serif negrita may√∫scula S', 'sans-serif negrita may√∫scula S', 'sans-serif negrita may√∫scula S']);
  this.executeCharTest('ùóß', ['sans-serif negrita may√∫scula T', 'sans-serif negrita may√∫scula T', 'sans-serif negrita may√∫scula T']);
  this.executeCharTest('ùó®', ['sans-serif negrita may√∫scula U', 'sans-serif negrita may√∫scula U', 'sans-serif negrita may√∫scula U']);
  this.executeCharTest('ùó©', ['sans-serif negrita may√∫scula V', 'sans-serif negrita may√∫scula V', 'sans-serif negrita may√∫scula V']);
  this.executeCharTest('ùó™', ['sans-serif negrita may√∫scula W', 'sans-serif negrita may√∫scula W', 'sans-serif negrita may√∫scula W']);
  this.executeCharTest('ùó´', ['sans-serif negrita may√∫scula X', 'sans-serif negrita may√∫scula X', 'sans-serif negrita may√∫scula X']);
  this.executeCharTest('ùó¨', ['sans-serif negrita may√∫scula Y', 'sans-serif negrita may√∫scula Y', 'sans-serif negrita may√∫scula Y']);
  this.executeCharTest('ùó≠', ['sans-serif negrita may√∫scula Z', 'sans-serif negrita may√∫scula Z', 'sans-serif negrita may√∫scula Z']);
  this.executeCharTest('ùóÆ', ['sans-serif negrita a', 'sans-serif negrita a', 'sans-serif negrita a']);
  this.executeCharTest('ùóØ', ['sans-serif negrita b', 'sans-serif negrita b', 'sans-serif negrita b']);
  this.executeCharTest('ùó∞', ['sans-serif negrita c', 'sans-serif negrita c', 'sans-serif negrita c']);
  this.executeCharTest('ùó±', ['sans-serif negrita d', 'sans-serif negrita d', 'sans-serif negrita d']);
  this.executeCharTest('ùó≤', ['sans-serif negrita e', 'sans-serif negrita e', 'sans-serif negrita e']);
  this.executeCharTest('ùó≥', ['sans-serif negrita f', 'sans-serif negrita f', 'sans-serif negrita f']);
  this.executeCharTest('ùó¥', ['sans-serif negrita g', 'sans-serif negrita g', 'sans-serif negrita g']);
  this.executeCharTest('ùóµ', ['sans-serif negrita h', 'sans-serif negrita h', 'sans-serif negrita h']);
  this.executeCharTest('ùó∂', ['sans-serif negrita i', 'sans-serif negrita i', 'sans-serif negrita i']);
  this.executeCharTest('ùó∑', ['sans-serif negrita j', 'sans-serif negrita j', 'sans-serif negrita j']);
  this.executeCharTest('ùó∏', ['sans-serif negrita k', 'sans-serif negrita k', 'sans-serif negrita k']);
  this.executeCharTest('ùóπ', ['sans-serif negrita l', 'sans-serif negrita l', 'sans-serif negrita l']);
  this.executeCharTest('ùó∫', ['sans-serif negrita m', 'sans-serif negrita m', 'sans-serif negrita m']);
  this.executeCharTest('ùóª', ['sans-serif negrita n', 'sans-serif negrita n', 'sans-serif negrita n']);
  this.executeCharTest('ùóº', ['sans-serif negrita o', 'sans-serif negrita o', 'sans-serif negrita o']);
  this.executeCharTest('ùóΩ', ['sans-serif negrita p', 'sans-serif negrita p', 'sans-serif negrita p']);
  this.executeCharTest('ùóæ', ['sans-serif negrita q', 'sans-serif negrita q', 'sans-serif negrita q']);
  this.executeCharTest('ùóø', ['sans-serif negrita r', 'sans-serif negrita r', 'sans-serif negrita r']);
  this.executeCharTest('ùòÄ', ['sans-serif negrita s', 'sans-serif negrita s', 'sans-serif negrita s']);
  this.executeCharTest('ùòÅ', ['sans-serif negrita t', 'sans-serif negrita t', 'sans-serif negrita t']);
  this.executeCharTest('ùòÇ', ['sans-serif negrita u', 'sans-serif negrita u', 'sans-serif negrita u']);
  this.executeCharTest('ùòÉ', ['sans-serif negrita v', 'sans-serif negrita v', 'sans-serif negrita v']);
  this.executeCharTest('ùòÑ', ['sans-serif negrita w', 'sans-serif negrita w', 'sans-serif negrita w']);
  this.executeCharTest('ùòÖ', ['sans-serif negrita x', 'sans-serif negrita x', 'sans-serif negrita x']);
  this.executeCharTest('ùòÜ', ['sans-serif negrita y', 'sans-serif negrita y', 'sans-serif negrita y']);
  this.executeCharTest('ùòá', ['sans-serif negrita z', 'sans-serif negrita z', 'sans-serif negrita z']);
  this.executeCharTest('ùòà', ['sans-serif cursiva may√∫scula A', 'sans-serif cursiva may√∫scula A', 'sans-serif cursiva may√∫scula A']);
  this.executeCharTest('ùòâ', ['sans-serif cursiva may√∫scula B', 'sans-serif cursiva may√∫scula B', 'sans-serif cursiva may√∫scula B']);
  this.executeCharTest('ùòä', ['sans-serif cursiva may√∫scula C', 'sans-serif cursiva may√∫scula C', 'sans-serif cursiva may√∫scula C']);
  this.executeCharTest('ùòã', ['sans-serif cursiva may√∫scula D', 'sans-serif cursiva may√∫scula D', 'sans-serif cursiva may√∫scula D']);
  this.executeCharTest('ùòå', ['sans-serif cursiva may√∫scula E', 'sans-serif cursiva may√∫scula E', 'sans-serif cursiva may√∫scula E']);
  this.executeCharTest('ùòç', ['sans-serif cursiva may√∫scula F', 'sans-serif cursiva may√∫scula F', 'sans-serif cursiva may√∫scula F']);
  this.executeCharTest('ùòé', ['sans-serif cursiva may√∫scula G', 'sans-serif cursiva may√∫scula G', 'sans-serif cursiva may√∫scula G']);
  this.executeCharTest('ùòè', ['sans-serif cursiva may√∫scula H', 'sans-serif cursiva may√∫scula H', 'sans-serif cursiva may√∫scula H']);
  this.executeCharTest('ùòê', ['sans-serif cursiva may√∫scula I', 'sans-serif cursiva may√∫scula I', 'sans-serif cursiva may√∫scula I']);
  this.executeCharTest('ùòë', ['sans-serif cursiva may√∫scula J', 'sans-serif cursiva may√∫scula J', 'sans-serif cursiva may√∫scula J']);
  this.executeCharTest('ùòí', ['sans-serif cursiva may√∫scula K', 'sans-serif cursiva may√∫scula K', 'sans-serif cursiva may√∫scula K']);
  this.executeCharTest('ùòì', ['sans-serif cursiva may√∫scula L', 'sans-serif cursiva may√∫scula L', 'sans-serif cursiva may√∫scula L']);
  this.executeCharTest('ùòî', ['sans-serif cursiva may√∫scula M', 'sans-serif cursiva may√∫scula M', 'sans-serif cursiva may√∫scula M']);
  this.executeCharTest('ùòï', ['sans-serif cursiva may√∫scula N', 'sans-serif cursiva may√∫scula N', 'sans-serif cursiva may√∫scula N']);
  this.executeCharTest('ùòñ', ['sans-serif cursiva may√∫scula O', 'sans-serif cursiva may√∫scula O', 'sans-serif cursiva may√∫scula O']);
  this.executeCharTest('ùòó', ['sans-serif cursiva may√∫scula P', 'sans-serif cursiva may√∫scula P', 'sans-serif cursiva may√∫scula P']);
  this.executeCharTest('ùòò', ['sans-serif cursiva may√∫scula Q', 'sans-serif cursiva may√∫scula Q', 'sans-serif cursiva may√∫scula Q']);
  this.executeCharTest('ùòô', ['sans-serif cursiva may√∫scula R', 'sans-serif cursiva may√∫scula R', 'sans-serif cursiva may√∫scula R']);
  this.executeCharTest('ùòö', ['sans-serif cursiva may√∫scula S', 'sans-serif cursiva may√∫scula S', 'sans-serif cursiva may√∫scula S']);
  this.executeCharTest('ùòõ', ['sans-serif cursiva may√∫scula T', 'sans-serif cursiva may√∫scula T', 'sans-serif cursiva may√∫scula T']);
  this.executeCharTest('ùòú', ['sans-serif cursiva may√∫scula U', 'sans-serif cursiva may√∫scula U', 'sans-serif cursiva may√∫scula U']);
  this.executeCharTest('ùòù', ['sans-serif cursiva may√∫scula V', 'sans-serif cursiva may√∫scula V', 'sans-serif cursiva may√∫scula V']);
  this.executeCharTest('ùòû', ['sans-serif cursiva may√∫scula W', 'sans-serif cursiva may√∫scula W', 'sans-serif cursiva may√∫scula W']);
  this.executeCharTest('ùòü', ['sans-serif cursiva may√∫scula X', 'sans-serif cursiva may√∫scula X', 'sans-serif cursiva may√∫scula X']);
  this.executeCharTest('ùò†', ['sans-serif cursiva may√∫scula Y', 'sans-serif cursiva may√∫scula Y', 'sans-serif cursiva may√∫scula Y']);
  this.executeCharTest('ùò°', ['sans-serif cursiva may√∫scula Z', 'sans-serif cursiva may√∫scula Z', 'sans-serif cursiva may√∫scula Z']);
  this.executeCharTest('ùò¢', ['sans-serif cursiva a', 'sans-serif cursiva a', 'sans-serif cursiva a']);
  this.executeCharTest('ùò£', ['sans-serif cursiva b', 'sans-serif cursiva b', 'sans-serif cursiva b']);
  this.executeCharTest('ùò§', ['sans-serif cursiva c', 'sans-serif cursiva c', 'sans-serif cursiva c']);
  this.executeCharTest('ùò•', ['sans-serif cursiva d', 'sans-serif cursiva d', 'sans-serif cursiva d']);
  this.executeCharTest('ùò¶', ['sans-serif cursiva e', 'sans-serif cursiva e', 'sans-serif cursiva e']);
  this.executeCharTest('ùòß', ['sans-serif cursiva f', 'sans-serif cursiva f', 'sans-serif cursiva f']);
  this.executeCharTest('ùò®', ['sans-serif cursiva g', 'sans-serif cursiva g', 'sans-serif cursiva g']);
  this.executeCharTest('ùò©', ['sans-serif cursiva h', 'sans-serif cursiva h', 'sans-serif cursiva h']);
  this.executeCharTest('ùò™', ['sans-serif cursiva i', 'sans-serif cursiva i', 'sans-serif cursiva i']);
  this.executeCharTest('ùò´', ['sans-serif cursiva j', 'sans-serif cursiva j', 'sans-serif cursiva j']);
  this.executeCharTest('ùò¨', ['sans-serif cursiva k', 'sans-serif cursiva k', 'sans-serif cursiva k']);
  this.executeCharTest('ùò≠', ['sans-serif cursiva l', 'sans-serif cursiva l', 'sans-serif cursiva l']);
  this.executeCharTest('ùòÆ', ['sans-serif cursiva m', 'sans-serif cursiva m', 'sans-serif cursiva m']);
  this.executeCharTest('ùòØ', ['sans-serif cursiva n', 'sans-serif cursiva n', 'sans-serif cursiva n']);
  this.executeCharTest('ùò∞', ['sans-serif cursiva o', 'sans-serif cursiva o', 'sans-serif cursiva o']);
  this.executeCharTest('ùò±', ['sans-serif cursiva p', 'sans-serif cursiva p', 'sans-serif cursiva p']);
  this.executeCharTest('ùò≤', ['sans-serif cursiva q', 'sans-serif cursiva q', 'sans-serif cursiva q']);
  this.executeCharTest('ùò≥', ['sans-serif cursiva r', 'sans-serif cursiva r', 'sans-serif cursiva r']);
  this.executeCharTest('ùò¥', ['sans-serif cursiva s', 'sans-serif cursiva s', 'sans-serif cursiva s']);
  this.executeCharTest('ùòµ', ['sans-serif cursiva t', 'sans-serif cursiva t', 'sans-serif cursiva t']);
  this.executeCharTest('ùò∂', ['sans-serif cursiva u', 'sans-serif cursiva u', 'sans-serif cursiva u']);
  this.executeCharTest('ùò∑', ['sans-serif cursiva v', 'sans-serif cursiva v', 'sans-serif cursiva v']);
  this.executeCharTest('ùò∏', ['sans-serif cursiva w', 'sans-serif cursiva w', 'sans-serif cursiva w']);
  this.executeCharTest('ùòπ', ['sans-serif cursiva x', 'sans-serif cursiva x', 'sans-serif cursiva x']);
  this.executeCharTest('ùò∫', ['sans-serif cursiva y', 'sans-serif cursiva y', 'sans-serif cursiva y']);
  this.executeCharTest('ùòª', ['sans-serif cursiva z', 'sans-serif cursiva z', 'sans-serif cursiva z']);
  this.executeCharTest('ùòº', ['sans-serif negrita cursiva may√∫scula A', 'sans-serif negrita cursiva may√∫scula A', 'sans-serif negrita cursiva may√∫scula A']);
  this.executeCharTest('ùòΩ', ['sans-serif negrita cursiva may√∫scula B', 'sans-serif negrita cursiva may√∫scula B', 'sans-serif negrita cursiva may√∫scula B']);
  this.executeCharTest('ùòæ', ['sans-serif negrita cursiva may√∫scula C', 'sans-serif negrita cursiva may√∫scula C', 'sans-serif negrita cursiva may√∫scula C']);
  this.executeCharTest('ùòø', ['sans-serif negrita cursiva may√∫scula D', 'sans-serif negrita cursiva may√∫scula D', 'sans-serif negrita cursiva may√∫scula D']);
  this.executeCharTest('ùôÄ', ['sans-serif negrita cursiva may√∫scula E', 'sans-serif negrita cursiva may√∫scula E', 'sans-serif negrita cursiva may√∫scula E']);
  this.executeCharTest('ùôÅ', ['sans-serif negrita cursiva may√∫scula F', 'sans-serif negrita cursiva may√∫scula F', 'sans-serif negrita cursiva may√∫scula F']);
  this.executeCharTest('ùôÇ', ['sans-serif negrita cursiva may√∫scula G', 'sans-serif negrita cursiva may√∫scula G', 'sans-serif negrita cursiva may√∫scula G']);
  this.executeCharTest('ùôÉ', ['sans-serif negrita cursiva may√∫scula H', 'sans-serif negrita cursiva may√∫scula H', 'sans-serif negrita cursiva may√∫scula H']);
  this.executeCharTest('ùôÑ', ['sans-serif negrita cursiva may√∫scula I', 'sans-serif negrita cursiva may√∫scula I', 'sans-serif negrita cursiva may√∫scula I']);
  this.executeCharTest('ùôÖ', ['sans-serif negrita cursiva may√∫scula J', 'sans-serif negrita cursiva may√∫scula J', 'sans-serif negrita cursiva may√∫scula J']);
  this.executeCharTest('ùôÜ', ['sans-serif negrita cursiva may√∫scula K', 'sans-serif negrita cursiva may√∫scula K', 'sans-serif negrita cursiva may√∫scula K']);
  this.executeCharTest('ùôá', ['sans-serif negrita cursiva may√∫scula L', 'sans-serif negrita cursiva may√∫scula L', 'sans-serif negrita cursiva may√∫scula L']);
  this.executeCharTest('ùôà', ['sans-serif negrita cursiva may√∫scula M', 'sans-serif negrita cursiva may√∫scula M', 'sans-serif negrita cursiva may√∫scula M']);
  this.executeCharTest('ùôâ', ['sans-serif negrita cursiva may√∫scula N', 'sans-serif negrita cursiva may√∫scula N', 'sans-serif negrita cursiva may√∫scula N']);
  this.executeCharTest('ùôä', ['sans-serif negrita cursiva may√∫scula O', 'sans-serif negrita cursiva may√∫scula O', 'sans-serif negrita cursiva may√∫scula O']);
  this.executeCharTest('ùôã', ['sans-serif negrita cursiva may√∫scula P', 'sans-serif negrita cursiva may√∫scula P', 'sans-serif negrita cursiva may√∫scula P']);
  this.executeCharTest('ùôå', ['sans-serif negrita cursiva may√∫scula Q', 'sans-serif negrita cursiva may√∫scula Q', 'sans-serif negrita cursiva may√∫scula Q']);
  this.executeCharTest('ùôç', ['sans-serif negrita cursiva may√∫scula R', 'sans-serif negrita cursiva may√∫scula R', 'sans-serif negrita cursiva may√∫scula R']);
  this.executeCharTest('ùôé', ['sans-serif negrita cursiva may√∫scula S', 'sans-serif negrita cursiva may√∫scula S', 'sans-serif negrita cursiva may√∫scula S']);
  this.executeCharTest('ùôè', ['sans-serif negrita cursiva may√∫scula T', 'sans-serif negrita cursiva may√∫scula T', 'sans-serif negrita cursiva may√∫scula T']);
  this.executeCharTest('ùôê', ['sans-serif negrita cursiva may√∫scula U', 'sans-serif negrita cursiva may√∫scula U', 'sans-serif negrita cursiva may√∫scula U']);
  this.executeCharTest('ùôë', ['sans-serif negrita cursiva may√∫scula V', 'sans-serif negrita cursiva may√∫scula V', 'sans-serif negrita cursiva may√∫scula V']);
  this.executeCharTest('ùôí', ['sans-serif negrita cursiva may√∫scula W', 'sans-serif negrita cursiva may√∫scula W', 'sans-serif negrita cursiva may√∫scula W']);
  this.executeCharTest('ùôì', ['sans-serif negrita cursiva may√∫scula X', 'sans-serif negrita cursiva may√∫scula X', 'sans-serif negrita cursiva may√∫scula X']);
  this.executeCharTest('ùôî', ['sans-serif negrita cursiva may√∫scula Y', 'sans-serif negrita cursiva may√∫scula Y', 'sans-serif negrita cursiva may√∫scula Y']);
  this.executeCharTest('ùôï', ['sans-serif negrita cursiva may√∫scula Z', 'sans-serif negrita cursiva may√∫scula Z', 'sans-serif negrita cursiva may√∫scula Z']);
  this.executeCharTest('ùôñ', ['sans-serif negrita cursiva a', 'sans-serif negrita cursiva a', 'sans-serif negrita cursiva a']);
  this.executeCharTest('ùôó', ['sans-serif negrita cursiva b', 'sans-serif negrita cursiva b', 'sans-serif negrita cursiva b']);
  this.executeCharTest('ùôò', ['sans-serif negrita cursiva c', 'sans-serif negrita cursiva c', 'sans-serif negrita cursiva c']);
  this.executeCharTest('ùôô', ['sans-serif negrita cursiva d', 'sans-serif negrita cursiva d', 'sans-serif negrita cursiva d']);
  this.executeCharTest('ùôö', ['sans-serif negrita cursiva e', 'sans-serif negrita cursiva e', 'sans-serif negrita cursiva e']);
  this.executeCharTest('ùôõ', ['sans-serif negrita cursiva f', 'sans-serif negrita cursiva f', 'sans-serif negrita cursiva f']);
  this.executeCharTest('ùôú', ['sans-serif negrita cursiva g', 'sans-serif negrita cursiva g', 'sans-serif negrita cursiva g']);
  this.executeCharTest('ùôù', ['sans-serif negrita cursiva h', 'sans-serif negrita cursiva h', 'sans-serif negrita cursiva h']);
  this.executeCharTest('ùôû', ['sans-serif negrita cursiva i', 'sans-serif negrita cursiva i', 'sans-serif negrita cursiva i']);
  this.executeCharTest('ùôü', ['sans-serif negrita cursiva j', 'sans-serif negrita cursiva j', 'sans-serif negrita cursiva j']);
  this.executeCharTest('ùô†', ['sans-serif negrita cursiva k', 'sans-serif negrita cursiva k', 'sans-serif negrita cursiva k']);
  this.executeCharTest('ùô°', ['sans-serif negrita cursiva l', 'sans-serif negrita cursiva l', 'sans-serif negrita cursiva l']);
  this.executeCharTest('ùô¢', ['sans-serif negrita cursiva m', 'sans-serif negrita cursiva m', 'sans-serif negrita cursiva m']);
  this.executeCharTest('ùô£', ['sans-serif negrita cursiva n', 'sans-serif negrita cursiva n', 'sans-serif negrita cursiva n']);
  this.executeCharTest('ùô§', ['sans-serif negrita cursiva o', 'sans-serif negrita cursiva o', 'sans-serif negrita cursiva o']);
  this.executeCharTest('ùô•', ['sans-serif negrita cursiva p', 'sans-serif negrita cursiva p', 'sans-serif negrita cursiva p']);
  this.executeCharTest('ùô¶', ['sans-serif negrita cursiva q', 'sans-serif negrita cursiva q', 'sans-serif negrita cursiva q']);
  this.executeCharTest('ùôß', ['sans-serif negrita cursiva r', 'sans-serif negrita cursiva r', 'sans-serif negrita cursiva r']);
  this.executeCharTest('ùô®', ['sans-serif negrita cursiva s', 'sans-serif negrita cursiva s', 'sans-serif negrita cursiva s']);
  this.executeCharTest('ùô©', ['sans-serif negrita cursiva t', 'sans-serif negrita cursiva t', 'sans-serif negrita cursiva t']);
  this.executeCharTest('ùô™', ['sans-serif negrita cursiva u', 'sans-serif negrita cursiva u', 'sans-serif negrita cursiva u']);
  this.executeCharTest('ùô´', ['sans-serif negrita cursiva v', 'sans-serif negrita cursiva v', 'sans-serif negrita cursiva v']);
  this.executeCharTest('ùô¨', ['sans-serif negrita cursiva w', 'sans-serif negrita cursiva w', 'sans-serif negrita cursiva w']);
  this.executeCharTest('ùô≠', ['sans-serif negrita cursiva x', 'sans-serif negrita cursiva x', 'sans-serif negrita cursiva x']);
  this.executeCharTest('ùôÆ', ['sans-serif negrita cursiva y', 'sans-serif negrita cursiva y', 'sans-serif negrita cursiva y']);
  this.executeCharTest('ùôØ', ['sans-serif negrita cursiva z', 'sans-serif negrita cursiva z', 'sans-serif negrita cursiva z']);
  this.executeCharTest('ùñ†', ['sans-serif may√∫scula A', 'sans-serif may√∫scula A', 'sans-serif may√∫scula A']);
  this.executeCharTest('ùñ°', ['sans-serif may√∫scula B', 'sans-serif may√∫scula B', 'sans-serif may√∫scula B']);
  this.executeCharTest('ùñ¢', ['sans-serif may√∫scula C', 'sans-serif may√∫scula C', 'sans-serif may√∫scula C']);
  this.executeCharTest('ùñ£', ['sans-serif may√∫scula D', 'sans-serif may√∫scula D', 'sans-serif may√∫scula D']);
  this.executeCharTest('ùñ§', ['sans-serif may√∫scula E', 'sans-serif may√∫scula E', 'sans-serif may√∫scula E']);
  this.executeCharTest('ùñ•', ['sans-serif may√∫scula F', 'sans-serif may√∫scula F', 'sans-serif may√∫scula F']);
  this.executeCharTest('ùñ¶', ['sans-serif may√∫scula G', 'sans-serif may√∫scula G', 'sans-serif may√∫scula G']);
  this.executeCharTest('ùñß', ['sans-serif may√∫scula H', 'sans-serif may√∫scula H', 'sans-serif may√∫scula H']);
  this.executeCharTest('ùñ®', ['sans-serif may√∫scula I', 'sans-serif may√∫scula I', 'sans-serif may√∫scula I']);
  this.executeCharTest('ùñ©', ['sans-serif may√∫scula J', 'sans-serif may√∫scula J', 'sans-serif may√∫scula J']);
  this.executeCharTest('ùñ™', ['sans-serif may√∫scula K', 'sans-serif may√∫scula K', 'sans-serif may√∫scula K']);
  this.executeCharTest('ùñ´', ['sans-serif may√∫scula L', 'sans-serif may√∫scula L', 'sans-serif may√∫scula L']);
  this.executeCharTest('ùñ¨', ['sans-serif may√∫scula M', 'sans-serif may√∫scula M', 'sans-serif may√∫scula M']);
  this.executeCharTest('ùñ≠', ['sans-serif may√∫scula N', 'sans-serif may√∫scula N', 'sans-serif may√∫scula N']);
  this.executeCharTest('ùñÆ', ['sans-serif may√∫scula O', 'sans-serif may√∫scula O', 'sans-serif may√∫scula O']);
  this.executeCharTest('ùñØ', ['sans-serif may√∫scula P', 'sans-serif may√∫scula P', 'sans-serif may√∫scula P']);
  this.executeCharTest('ùñ∞', ['sans-serif may√∫scula Q', 'sans-serif may√∫scula Q', 'sans-serif may√∫scula Q']);
  this.executeCharTest('ùñ±', ['sans-serif may√∫scula R', 'sans-serif may√∫scula R', 'sans-serif may√∫scula R']);
  this.executeCharTest('ùñ≤', ['sans-serif may√∫scula S', 'sans-serif may√∫scula S', 'sans-serif may√∫scula S']);
  this.executeCharTest('ùñ≥', ['sans-serif may√∫scula T', 'sans-serif may√∫scula T', 'sans-serif may√∫scula T']);
  this.executeCharTest('ùñ¥', ['sans-serif may√∫scula U', 'sans-serif may√∫scula U', 'sans-serif may√∫scula U']);
  this.executeCharTest('ùñµ', ['sans-serif may√∫scula V', 'sans-serif may√∫scula V', 'sans-serif may√∫scula V']);
  this.executeCharTest('ùñ∂', ['sans-serif may√∫scula W', 'sans-serif may√∫scula W', 'sans-serif may√∫scula W']);
  this.executeCharTest('ùñ∑', ['sans-serif may√∫scula X', 'sans-serif may√∫scula X', 'sans-serif may√∫scula X']);
  this.executeCharTest('ùñ∏', ['sans-serif may√∫scula Y', 'sans-serif may√∫scula Y', 'sans-serif may√∫scula Y']);
  this.executeCharTest('ùñπ', ['sans-serif may√∫scula Z', 'sans-serif may√∫scula Z', 'sans-serif may√∫scula Z']);
  this.executeCharTest('ùñ∫', ['sans-serif a', 'sans-serif a', 'sans-serif a']);
  this.executeCharTest('ùñª', ['sans-serif b', 'sans-serif b', 'sans-serif b']);
  this.executeCharTest('ùñº', ['sans-serif c', 'sans-serif c', 'sans-serif c']);
  this.executeCharTest('ùñΩ', ['sans-serif d', 'sans-serif d', 'sans-serif d']);
  this.executeCharTest('ùñæ', ['sans-serif e', 'sans-serif e', 'sans-serif e']);
  this.executeCharTest('ùñø', ['sans-serif f', 'sans-serif f', 'sans-serif f']);
  this.executeCharTest('ùóÄ', ['sans-serif g', 'sans-serif g', 'sans-serif g']);
  this.executeCharTest('ùóÅ', ['sans-serif h', 'sans-serif h', 'sans-serif h']);
  this.executeCharTest('ùóÇ', ['sans-serif i', 'sans-serif i', 'sans-serif i']);
  this.executeCharTest('ùóÉ', ['sans-serif j', 'sans-serif j', 'sans-serif j']);
  this.executeCharTest('ùóÑ', ['sans-serif k', 'sans-serif k', 'sans-serif k']);
  this.executeCharTest('ùóÖ', ['sans-serif l', 'sans-serif l', 'sans-serif l']);
  this.executeCharTest('ùóÜ', ['sans-serif m', 'sans-serif m', 'sans-serif m']);
  this.executeCharTest('ùóá', ['sans-serif n', 'sans-serif n', 'sans-serif n']);
  this.executeCharTest('ùóà', ['sans-serif o', 'sans-serif o', 'sans-serif o']);
  this.executeCharTest('ùóâ', ['sans-serif p', 'sans-serif p', 'sans-serif p']);
  this.executeCharTest('ùóä', ['sans-serif q', 'sans-serif q', 'sans-serif q']);
  this.executeCharTest('ùóã', ['sans-serif r', 'sans-serif r', 'sans-serif r']);
  this.executeCharTest('ùóå', ['sans-serif s', 'sans-serif s', 'sans-serif s']);
  this.executeCharTest('ùóç', ['sans-serif t', 'sans-serif t', 'sans-serif t']);
  this.executeCharTest('ùóé', ['sans-serif u', 'sans-serif u', 'sans-serif u']);
  this.executeCharTest('ùóè', ['sans-serif v', 'sans-serif v', 'sans-serif v']);
  this.executeCharTest('ùóê', ['sans-serif w', 'sans-serif w', 'sans-serif w']);
  this.executeCharTest('ùóë', ['sans-serif x', 'sans-serif x', 'sans-serif x']);
  this.executeCharTest('ùóí', ['sans-serif y', 'sans-serif y', 'sans-serif y']);
  this.executeCharTest('ùóì', ['sans-serif z', 'sans-serif z', 'sans-serif z']);
  this.executeCharTest('ùíú', ['script may√∫scula A', 'script may√∫scula A', 'script may√∫scula A']);
  this.executeCharTest('‚Ñ¨', ['script may√∫scula B', 'script may√∫scula B', 'script may√∫scula B']);
  this.executeCharTest('ùíû', ['script may√∫scula C', 'script may√∫scula C', 'script may√∫scula C']);
  this.executeCharTest('ùíü', ['script may√∫scula D', 'script may√∫scula D', 'script may√∫scula D']);
  this.executeCharTest('‚Ñ∞', ['script may√∫scula E', 'script may√∫scula E', 'script may√∫scula E']);
  this.executeCharTest('‚Ñ±', ['script may√∫scula F', 'script may√∫scula F', 'script may√∫scula F']);
  this.executeCharTest('ùí¢', ['script may√∫scula G', 'script may√∫scula G', 'script may√∫scula G']);
  this.executeCharTest('‚Ñã', ['script may√∫scula H', 'script may√∫scula H', 'script may√∫scula H']);
  this.executeCharTest('‚Ñê', ['script may√∫scula I', 'script may√∫scula I', 'script may√∫scula I']);
  this.executeCharTest('ùí•', ['script may√∫scula J', 'script may√∫scula J', 'script may√∫scula J']);
  this.executeCharTest('ùí¶', ['script may√∫scula K', 'script may√∫scula K', 'script may√∫scula K']);
  this.executeCharTest('‚Ñí', ['script may√∫scula L', 'script may√∫scula L', 'script may√∫scula L']);
  this.executeCharTest('‚Ñ≥', ['script may√∫scula M', 'script may√∫scula M', 'script may√∫scula M']);
  this.executeCharTest('ùí©', ['script may√∫scula N', 'script may√∫scula N', 'script may√∫scula N']);
  this.executeCharTest('ùí™', ['script may√∫scula O', 'script may√∫scula O', 'script may√∫scula O']);
  this.executeCharTest('ùí´', ['script may√∫scula P', 'script may√∫scula P', 'script may√∫scula P']);
  this.executeCharTest('ùí¨', ['script may√∫scula Q', 'script may√∫scula Q', 'script may√∫scula Q']);
  this.executeCharTest('‚Ñõ', ['script may√∫scula R', 'script may√∫scula R', 'script may√∫scula R']);
  this.executeCharTest('ùíÆ', ['script may√∫scula S', 'script may√∫scula S', 'script may√∫scula S']);
  this.executeCharTest('ùíØ', ['script may√∫scula T', 'script may√∫scula T', 'script may√∫scula T']);
  this.executeCharTest('ùí∞', ['script may√∫scula U', 'script may√∫scula U', 'script may√∫scula U']);
  this.executeCharTest('ùí±', ['script may√∫scula V', 'script may√∫scula V', 'script may√∫scula V']);
  this.executeCharTest('ùí≤', ['script may√∫scula W', 'script may√∫scula W', 'script may√∫scula W']);
  this.executeCharTest('ùí≥', ['script may√∫scula X', 'script may√∫scula X', 'script may√∫scula X']);
  this.executeCharTest('ùí¥', ['script may√∫scula Y', 'script may√∫scula Y', 'script may√∫scula Y']);
  this.executeCharTest('ùíµ', ['script may√∫scula Z', 'script may√∫scula Z', 'script may√∫scula Z']);
  this.executeCharTest('ùí∂', ['script a', 'script a', 'script a']);
  this.executeCharTest('ùí∑', ['script b', 'script b', 'script b']);
  this.executeCharTest('ùí∏', ['script c', 'script c', 'script c']);
  this.executeCharTest('ùíπ', ['script d', 'script d', 'script d']);
  this.executeCharTest('‚ÑØ', ['script e', 'script e', 'script e']);
  this.executeCharTest('ùíª', ['script f', 'script f', 'script f']);
  this.executeCharTest('‚Ñä', ['script g', 'script g', 'script g']);
  this.executeCharTest('ùíΩ', ['script h', 'script h', 'script h']);
  this.executeCharTest('ùíæ', ['script i', 'script i', 'script i']);
  this.executeCharTest('ùíø', ['script j', 'script j', 'script j']);
  this.executeCharTest('ùìÄ', ['script k', 'script k', 'script k']);
  this.executeCharTest('ùìÅ', ['script l', 'script l', 'script l']);
  this.executeCharTest('ùìÇ', ['script m', 'script m', 'script m']);
  this.executeCharTest('ùìÉ', ['script n', 'script n', 'script n']);
  this.executeCharTest('‚Ñ¥', ['script o', 'script o', 'script o']);
  this.executeCharTest('ùìÖ', ['script p', 'script p', 'script p']);
  this.executeCharTest('ùìÜ', ['script q', 'script q', 'script q']);
  this.executeCharTest('ùìá', ['script r', 'script r', 'script r']);
  this.executeCharTest('ùìà', ['script s', 'script s', 'script s']);
  this.executeCharTest('ùìâ', ['script t', 'script t', 'script t']);
  this.executeCharTest('ùìä', ['script u', 'script u', 'script u']);
  this.executeCharTest('ùìã', ['script v', 'script v', 'script v']);
  this.executeCharTest('ùìå', ['script w', 'script w', 'script w']);
  this.executeCharTest('ùìç', ['script x', 'script x', 'script x']);
  this.executeCharTest('ùìé', ['script y', 'script y', 'script y']);
  this.executeCharTest('ùìè', ['script z', 'script z', 'script z']);
  this.executeCharTest('‚äæ', ['√°ngulo recto con arco', '√°ngulo recto con arco', '√°ngulo recto con arco']);
  this.executeCharTest('‚çº', ['√°ngulo recto con flecha zigzag hacia abajo', '√°ngulo recto con flecha zigzag hacia abajo', '√°ngulo recto con flecha zigzag hacia abajo']);
  this.executeCharTest('‚üÄ', ['√°ngulo s√≥lido', '√°ngulo s√≥lido', '√°ngulo s√≥lido']);
  this.executeCharTest('‚¶õ', ['measured angle opening left', 'measured angle opening left', 'measured angle opening left']);
  this.executeCharTest('‚¶ú', ['right angle variant with square', 'right angle variant with square', 'right angle variant with square']);
  this.executeCharTest('‚¶ù', ['√°ngulo recto medido con punto', '√°ngulo recto medido con punto', '√°ngulo recto medido con punto']);
  this.executeCharTest('‚¶û', ['angle with s inside', 'angle with s inside', 'angle with s inside']);
  this.executeCharTest('‚¶ü', ['acute angle', 'acute angle', 'acute angle']);
  this.executeCharTest('‚¶†', ['spherical angle opening left', 'spherical angle opening left', 'spherical angle opening left']);
  this.executeCharTest('‚¶°', ['spherical angle opening up', 'spherical angle opening up', 'spherical angle opening up']);
  this.executeCharTest('‚¶¢', ['turned angle', 'turned angle', 'turned angle']);
  this.executeCharTest('‚¶£', ['reversed angle', 'reversed angle', 'reversed angle']);
  this.executeCharTest('‚¶§', ['√°ngulo con barra inferior', '√°ngulo con barra inferior', '√°ngulo con barra inferior']);
  this.executeCharTest('‚¶•', ['√°ngulo inverso con barra inferior', '√°ngulo inverso con barra inferior', '√°ngulo inverso con barra inferior']);
  this.executeCharTest('‚¶¶', ['√°ngulo oblicuo hacia arriba', '√°ngulo oblicuo hacia arriba', '√°ngulo oblicuo hacia arriba']);
  this.executeCharTest('‚¶ß', ['√°ngulo oblicuo hacia abajo', '√°ngulo oblicuo hacia abajo', '√°ngulo oblicuo hacia abajo']);
  this.executeCharTest('‚¶®', ['measured angle with open arm ending in arrow pointing up and to the right', 'measured angle with open arm ending in arrow pointing up and to the right', 'measured angle with open arm ending in arrow pointing up and to the right']);
  this.executeCharTest('‚¶©', ['measured angle with open arm ending in arrow pointing up and to the left', 'measured angle with open arm ending in arrow pointing up and to the left', 'measured angle with open arm ending in arrow pointing up and to the left']);
  this.executeCharTest('‚¶™', ['measured angle with open arm ending in arrow pointing down and to the right', 'measured angle with open arm ending in arrow pointing down and to the right', 'measured angle with open arm ending in arrow pointing down and to the right']);
  this.executeCharTest('‚¶´', ['measured angle with open arm ending in arrow pointing down and to the left', 'measured angle with open arm ending in arrow pointing down and to the left', 'measured angle with open arm ending in arrow pointing down and to the left']);
  this.executeCharTest('‚¶¨', ['measured angle with open arm ending in arrow pointing right and up', 'measured angle with open arm ending in arrow pointing right and up', 'measured angle with open arm ending in arrow pointing right and up']);
  this.executeCharTest('‚¶≠', ['measured angle with open arm ending in arrow pointing left and up', 'measured angle with open arm ending in arrow pointing left and up', 'measured angle with open arm ending in arrow pointing left and up']);
  this.executeCharTest('‚¶Æ', ['measured angle with open arm ending in arrow pointing right and down', 'measured angle with open arm ending in arrow pointing right and down', 'measured angle with open arm ending in arrow pointing right and down']);
  this.executeCharTest('‚¶Ø', ['measured angle with open arm ending in arrow pointing left and down', 'measured angle with open arm ending in arrow pointing left and down', 'measured angle with open arm ending in arrow pointing left and down']);
  this.executeCharTest('‚Üê', ['flecha izquierda', 'flecha izquierda', 'flecha izquierda']);
  this.executeCharTest('‚Üë', ['flecha arriba', 'flecha arriba', 'flecha arriba']);
  this.executeCharTest('‚Üí', ['flecha derecha', 'flecha derecha', 'flecha derecha']);
  this.executeCharTest('‚Üì', ['flecha abajo', 'flecha abajo', 'flecha abajo']);
  this.executeCharTest('‚Üî', ['flecha izquierda y derecha', 'flecha izquierda y derecha', 'flecha izquierda y derecha']);
  this.executeCharTest('‚Üï', ['flecha arriba y abajo', 'flecha arriba y abajo', 'flecha arriba y abajo']);
  this.executeCharTest('‚Üñ', ['flecha a noroeste', 'flecha a noroeste', 'flecha a noroeste']);
  this.executeCharTest('‚Üó', ['flecha a nordeste', 'flecha a nordeste', 'flecha a nordeste']);
  this.executeCharTest('‚Üò', ['flecha a sureste', 'flecha a sureste', 'flecha a sureste']);
  this.executeCharTest('‚Üô', ['flecha a suroeste', 'flecha a suroeste', 'flecha a suroeste']);
  this.executeCharTest('‚Üö', ['flecha izquierda tachada', 'flecha izquierda tachada', 'flecha izquierda tachada']);
  this.executeCharTest('‚Üõ', ['flecha tachada', 'flecha tachada', 'flecha tachada']);
  this.executeCharTest('‚Üú', ['flecha ondulada izquierda', 'flecha ondulada izquierda', 'flecha ondulada izquierda']);
  this.executeCharTest('‚Üù', ['flecha ondulada', 'flecha ondulada', 'flecha ondulada']);
  this.executeCharTest('‚Üû', ['flecha izquierda con doble punta', 'flecha izquierda con doble punta', 'flecha izquierda con doble punta']);
  this.executeCharTest('‚Üü', ['flecha con doble punta hacia arriba', 'flecha con doble punta hacia arriba', 'flecha con doble punta hacia arriba']);
  this.executeCharTest('‚Ü†', ['flecha derechaa con doble punta', 'flecha derechaa con doble punta', 'flecha derechaa con doble punta']);
  this.executeCharTest('‚Ü°', ['flecha con doble punta hacia abajo', 'flecha con doble punta hacia abajo', 'flecha con doble punta hacia abajo']);
  this.executeCharTest('‚Ü¢', ['flecha izquierda con cola', 'flecha izquierda con cola', 'flecha izquierda con cola']);
  this.executeCharTest('‚Ü£', ['flecha derecha con cola', 'flecha derecha con cola', 'flecha derecha con cola']);
  this.executeCharTest('‚Ü§', ['flecha izquierda de barra', 'flecha izquierda de barra', 'flecha izquierda de barra']);
  this.executeCharTest('‚Ü•', ['barra con flecha', 'barra con flecha', 'barra con flecha']);
  this.executeCharTest('‚Ü¶', ['flecha derecha de barra', 'flecha derecha de barra', 'flecha derecha de barra']);
  this.executeCharTest('‚Üß', ['flecha con barra', 'flecha con barra', 'flecha con barra']);
  this.executeCharTest('‚Ü®', ['flecha arriba y abajo con base', 'flecha arriba y abajo con base', 'flecha arriba y abajo con base']);
  this.executeCharTest('‚Ü©', ['flecha izquierda con gancho', 'flecha izquierda con gancho', 'flecha izquierda con gancho']);
  this.executeCharTest('‚Ü™', ['flecha con gancho', 'flecha con gancho', 'flecha con gancho']);
  this.executeCharTest('‚Ü´', ['flecha izquierda con lazo', 'flecha izquierda con lazo', 'flecha izquierda con lazo']);
  this.executeCharTest('‚Ü¨', ['flecha con lazo', 'flecha con lazo', 'flecha con lazo']);
  this.executeCharTest('‚Ü≠', ['flecha ondulada izquierda y derecha', 'flecha ondulada izquierda y derecha', 'flecha ondulada izquierda y derecha']);
  this.executeCharTest('‚ÜÆ', ['flecha izquierda y derecha tachada', 'flecha izquierda y derecha tachada', 'flecha izquierda y derecha tachada']);
  this.executeCharTest('‚ÜØ', ['flecha zigzag abajo', 'flecha zigzag abajo', 'flecha zigzag abajo']);
  this.executeCharTest('‚Ü∞', ['flecha arriba con punta izquierda', 'flecha arriba con punta izquierda', 'flecha arriba con punta izquierda']);
  this.executeCharTest('‚Ü±', ['flecha arriba con punta derecha', 'flecha arriba con punta derecha', 'flecha arriba con punta derecha']);
  this.executeCharTest('‚Ü≤', ['flecha abajo con punta izquierda', 'flecha abajo con punta izquierda', 'flecha abajo con punta izquierda']);
  this.executeCharTest('‚Ü≥', ['flecha abajo con punta derecha', 'flecha abajo con punta derecha', 'flecha abajo con punta derecha']);
  this.executeCharTest('‚Ü¥', ['flecha derecha desde esquina inferior', 'flecha derecha desde esquina inferior', 'flecha derecha desde esquina inferior']);
  this.executeCharTest('‚Üµ', ['flecha hacia abajo desde esquina izquierda', 'flecha hacia abajo desde esquina izquierda', 'flecha hacia abajo desde esquina izquierda']);
  this.executeCharTest('‚Ü∂', ['flecha semicircular superior en sentido antihorario', 'flecha semicircular superior en sentido antihorario', 'flecha semicircular superior en sentido antihorario']);
  this.executeCharTest('‚Ü∑', ['flecha semicircular superior en sentido horario', 'flecha semicircular superior en sentido horario', 'flecha semicircular superior en sentido horario']);
  this.executeCharTest('‚Ü∏', ['flecha noroeste a barra larga', 'flecha noroeste a barra larga', 'flecha noroeste a barra larga']);
  this.executeCharTest('‚Üπ', ['flecha izquierda a barra arriba de flecha derecha a barra', 'flecha izquierda a barra arriba de flecha derecha a barra', 'flecha izquierda a barra arriba de flecha derecha a barra']);
  this.executeCharTest('‚Ü∫', ['flecha circular abierta en sentido antihorario', 'flecha circular abierta en sentido antihorario', 'flecha circular abierta en sentido antihorario']);
  this.executeCharTest('‚Üª', ['flecha circular abierta en sentido horario', 'flecha circular abierta en sentido horario', 'flecha circular abierta en sentido horario']);
  this.executeCharTest('‚áÑ', ['flecha derecha arriba de flecha izquierda', 'flecha derecha arriba de flecha izquierda', 'flecha derecha arriba de flecha izquierda']);
  this.executeCharTest('‚áÖ', ['flecha arriba a la izquierda de flecha abajo', 'flecha arriba a la izquierda de flecha abajo', 'flecha arriba a la izquierda de flecha abajo']);
  this.executeCharTest('‚áÜ', ['flecha izquierda arriba de flecha derecha', 'flecha izquierda arriba de flecha derecha', 'flecha izquierda arriba de flecha derecha']);
  this.executeCharTest('‚áá', ['dos flechas hacia la izquierda', 'dos flechas hacia la izquierda', 'dos flechas hacia la izquierda']);
  this.executeCharTest('‚áà', ['dos flechas hacia arriba', 'dos flechas hacia arriba', 'dos flechas hacia arriba']);
  this.executeCharTest('‚áâ', ['dos flechas', 'dos flechas', 'dos flechas']);
  this.executeCharTest('‚áä', ['dos flechas hacia abajo', 'dos flechas hacia abajo', 'dos flechas hacia abajo']);
  this.executeCharTest('‚áç', ['flecha doble izquierda tachada', 'flecha doble izquierda tachada', 'flecha doble izquierda tachada']);
  this.executeCharTest('‚áé', ['flecha doble izquierda y derecha tachada', 'flecha doble izquierda y derecha tachada', 'flecha doble izquierda y derecha tachada']);
  this.executeCharTest('‚áè', ['flecha doble tachada', 'flecha doble tachada', 'flecha doble tachada']);
  this.executeCharTest('‚áê', ['flecha doble hacia la izquierda', 'flecha doble hacia la izquierda', 'flecha doble hacia la izquierda']);
  this.executeCharTest('‚áë', ['flecha doble hacia arriba', 'flecha doble hacia arriba', 'flecha doble hacia arriba']);
  this.executeCharTest('‚áí', ['flecha doble', 'flecha doble', 'flecha doble']);
  this.executeCharTest('‚áì', ['flecha doble hacia abajo', 'flecha doble hacia abajo', 'flecha doble hacia abajo']);
  this.executeCharTest('‚áî', ['flecha doble izquierda-derecha', 'flecha doble izquierda-derecha', 'flecha doble izquierda-derecha']);
  this.executeCharTest('‚áï', ['flecha doble vertical', 'flecha doble vertical', 'flecha doble vertical']);
  this.executeCharTest('‚áñ', ['flecha doble hacia noroeste', 'flecha doble hacia noroeste', 'flecha doble hacia noroeste']);
  this.executeCharTest('‚áó', ['flecha doble hacia nordeste', 'flecha doble hacia nordeste', 'flecha doble hacia nordeste']);
  this.executeCharTest('‚áò', ['flecha doble hacia sudeste', 'flecha doble hacia sudeste', 'flecha doble hacia sudeste']);
  this.executeCharTest('‚áô', ['flecha doble hacia sudoeste', 'flecha doble hacia sudoeste', 'flecha doble hacia sudoeste']);
  this.executeCharTest('‚áö', ['flecha triple izquierda', 'flecha triple izquierda', 'flecha triple izquierda']);
  this.executeCharTest('‚áõ', ['flecha triple', 'flecha triple', 'flecha triple']);
  this.executeCharTest('‚áú', ['flecha ondulada izquierda', 'flecha ondulada izquierda', 'flecha ondulada izquierda']);
  this.executeCharTest('‚áù', ['flecha ondulada', 'flecha ondulada', 'flecha ondulada']);
  this.executeCharTest('‚áû', ['flecha hacia arriba con doble tachado', 'flecha hacia arriba con doble tachado', 'flecha hacia arriba con doble tachado']);
  this.executeCharTest('‚áü', ['flecha hacia abajo con doble tachado', 'flecha hacia abajo con doble tachado', 'flecha hacia abajo con doble tachado']);
  this.executeCharTest('‚á†', ['flecha de puntos hacia la izquierda', 'flecha de puntos hacia la izquierda', 'flecha de puntos hacia la izquierda']);
  this.executeCharTest('‚á°', ['flecha de puntos hacia arriba', 'flecha de puntos hacia arriba', 'flecha de puntos hacia arriba']);
  this.executeCharTest('‚á¢', ['flecha de puntos', 'flecha de puntos', 'flecha de puntos']);
  this.executeCharTest('‚á£', ['flecha de puntos hacia abajo', 'flecha de puntos hacia abajo', 'flecha de puntos hacia abajo']);
  this.executeCharTest('‚á§', ['flecha izquierda a barra', 'flecha izquierda a barra', 'flecha izquierda a barra']);
  this.executeCharTest('‚á•', ['flecha derecha a barra', 'flecha derecha a barra', 'flecha derecha a barra']);
  this.executeCharTest('‚á¶', ['flecha vac√≠a hacia la izquierda', 'flecha vac√≠a hacia la izquierda', 'flecha vac√≠a hacia la izquierda']);
  this.executeCharTest('‚áß', ['flecha vac√≠a hacia arriba', 'flecha vac√≠a hacia arriba', 'flecha vac√≠a hacia arriba']);
  this.executeCharTest('‚á®', ['flecha vac√≠a', 'flecha vac√≠a', 'flecha vac√≠a']);
  this.executeCharTest('‚á©', ['flecha vac√≠a hacia abajo', 'flecha vac√≠a hacia abajo', 'flecha vac√≠a hacia abajo']);
  this.executeCharTest('‚á™', ['flecha vac√≠a hacia arriba desde barra', 'flecha vac√≠a hacia arriba desde barra', 'flecha vac√≠a hacia arriba desde barra']);
  this.executeCharTest('‚á´', ['white up-arrow on pedestal', 'white up-arrow on pedestal', 'white U arrow on pedestal']);
  this.executeCharTest('‚á¨', ['white up-arrow on pedestal with horizontal bar', 'white up-arrow on pedestal with horizontal bar', 'white U arrow on pedestal with horizontal bar']);
  this.executeCharTest('‚á≠', ['white up-arrow on pedestal with vertical bar', 'white up-arrow on pedestal with vertical bar', 'white U arrow on pedestal with vertical bar']);
  this.executeCharTest('‚áÆ', ['white double up-arrow', 'white double up-arrow', 'white double U arrow']);
  this.executeCharTest('‚áØ', ['white double up-arrow on pedestal', 'white double up-arrow on pedestal', 'white double U arrow on pedestal']);
  this.executeCharTest('‚á∞', ['white right-arrow from wall', 'white right-arrow from wall', 'white R arrow from wall']);
  this.executeCharTest('‚á±', ['north west arrow to corner', 'north west arrow to corner', 'north west arrow to corner']);
  this.executeCharTest('‚á≤', ['south east arrow to corner', 'south east arrow to corner', 'south east arrow to corner']);
  this.executeCharTest('‚á≥', ['up down white arrow', 'up down white arrow', 'U d white arrow']);
  this.executeCharTest('‚á¥', ['right-arrow with small circle', 'right-arrow with small circle', 'R arrow with small circle']);
  this.executeCharTest('‚áµ', ['upwards arrow to the right of downwards arrow', 'upwards arrow to the right of downwards arrow', 'upwards arrow to the right of downwards arrow']);
  this.executeCharTest('‚á∂', ['three right-arrows', 'three right-arrows', 'three R arrows']);
  this.executeCharTest('‚á∑', ['left-arrow with vertical stroke', 'left-arrow with vertical stroke', 'L arrow with vertical stroke']);
  this.executeCharTest('‚á∏', ['right-arrow with vertical stroke', 'right-arrow with vertical stroke', 'R arrow with vertical stroke']);
  this.executeCharTest('‚áπ', ['left-right-arrow with vertical stroke', 'left-right-arrow with vertical stroke', 'L R arrow with vertical stroke']);
  this.executeCharTest('‚á∫', ['left-arrow with double vertical stroke', 'left-arrow with double vertical stroke', 'L arrow with double vertical stroke']);
  this.executeCharTest('‚áª', ['right-arrow with double vertical stroke', 'right-arrow with double vertical stroke', 'R arrow with double vertical stroke']);
  this.executeCharTest('‚áº', ['left-right-arrow with double vertical stroke', 'left-right-arrow with double vertical stroke', 'L R arrow with double vertical stroke']);
  this.executeCharTest('‚áΩ', ['flecha izquierda con punta vac√≠a', 'flecha izquierda con punta vac√≠a', 'flecha izquierda con punta vac√≠a']);
  this.executeCharTest('‚áæ', ['flecha izquierda con punta vac√≠a', 'flecha izquierda con punta vac√≠a', 'flecha izquierda con punta vac√≠a']);
  this.executeCharTest('‚áø', ['flecha izquierda derecha con punta vac√≠a', 'flecha izquierda derecha con punta vac√≠a', 'flecha izquierda derecha con punta vac√≠a']);
  this.executeCharTest('‚åÅ', ['electric arrow', 'electric arrow', 'electric arrow']);
  this.executeCharTest('‚åÉ', ['up-arrowhead', 'up-arrowhead', 'U arrowhead']);
  this.executeCharTest('‚åÑ', ['down-arrowhead', 'down-arrowhead', 'D arrowhead']);
  this.executeCharTest('‚å§', ['up-arrowhead between two horizontal bars', 'up-arrowhead between two horizontal bars', 'U arrowhead between two horizontal bars']);
  this.executeCharTest('‚éã', ['broken circle with northwest arrow', 'broken circle with northwest arrow', 'broken circle with northwest arrow']);
  this.executeCharTest('‚ûî', ['heavy wide headed right-arrow', 'heavy wide headed right-arrow', 'heavy wide headed R arrow']);
  this.executeCharTest('‚ûò', ['heavy down right-arrow', 'heavy down right-arrow', 'heavy d R arrow']);
  this.executeCharTest('‚ûô', ['heavy right-arrow', 'heavy right-arrow', 'heavy R arrow']);
  this.executeCharTest('‚ûö', ['heavy up right-arrow', 'heavy up right-arrow', 'heavy U R arrow']);
  this.executeCharTest('‚ûõ', ['drafting point right-arrow', 'drafting point right-arrow', 'drafting point R arrow']);
  this.executeCharTest('‚ûú', ['heavy round tipped right-arrow', 'heavy round tipped right-arrow', 'heavy round tipped R arrow']);
  this.executeCharTest('‚ûù', ['triangle headed right-arrow', 'triangle headed right-arrow', 'triangle headed R arrow']);
  this.executeCharTest('‚ûû', ['heavy triangle headed right-arrow', 'heavy triangle headed right-arrow', 'heavy triangle headed R arrow']);
  this.executeCharTest('‚ûü', ['dashed triangle headed right-arrow', 'dashed triangle headed right-arrow', 'dashed triangle headed R arrow']);
  this.executeCharTest('‚û†', ['heavy dashed triangle headed right-arrow', 'heavy dashed triangle headed right-arrow', 'heavy dashed triangle headed R arrow']);
  this.executeCharTest('‚û°', ['black right-arrow', 'black right-arrow', 'black R arrow']);
  this.executeCharTest('‚û¢', ['three d top lighted right-arrowhead', 'three d top lighted right-arrowhead', 'three d top lighted R arrowhead']);
  this.executeCharTest('‚û£', ['three d bottom lighted right-arrowhead', 'three d bottom lighted right-arrowhead', 'three d bottom lighted R arrowhead']);
  this.executeCharTest('‚û§', ['black right-arrowhead', 'black right-arrowhead', 'black R arrowhead']);
  this.executeCharTest('‚û•', ['heavy black curved down and right-arrow', 'heavy black curved down and right-arrow', 'heavy black curved d and R arrow']);
  this.executeCharTest('‚û¶', ['heavy black curved up and right-arrow', 'heavy black curved up and right-arrow', 'heavy black curved U and R arrow']);
  this.executeCharTest('‚ûß', ['squat black right-arrow', 'squat black right-arrow', 'squat black R arrow']);
  this.executeCharTest('‚û®', ['heavy concave pointed black right-arrow', 'heavy concave pointed black right-arrow', 'heavy concave pointed black R arrow']);
  this.executeCharTest('‚û©', ['right shaded white right-arrow', 'right shaded white right-arrow', 'right shaded white R arrow']);
  this.executeCharTest('‚û™', ['left shaded white right-arrow', 'left shaded white right-arrow', 'left shaded white R arrow']);
  this.executeCharTest('‚û´', ['back tilted shadowed white right-arrow', 'back tilted shadowed white right-arrow', 'back tilted shadowed white R arrow']);
  this.executeCharTest('‚û¨', ['front tilted shadowed white right-arrow', 'front tilted shadowed white right-arrow', 'front tilted shadowed white R arrow']);
  this.executeCharTest('‚û≠', ['heavy lower right shadowed white right-arrow', 'heavy lower right shadowed white right-arrow', 'heavy lower right shadowed white R arrow']);
  this.executeCharTest('‚ûÆ', ['heavy upper right shadowed white right-arrow', 'heavy upper right shadowed white right-arrow', 'heavy upper right shadowed white R arrow']);
  this.executeCharTest('‚ûØ', ['notched lower right shadowed white right-arrow', 'notched lower right shadowed white right-arrow', 'notched lower right shadowed white R arrow']);
  this.executeCharTest('‚û±', ['notched upper right shadowed white right-arrow', 'notched upper right shadowed white right-arrow', 'notched upper right shadowed white R arrow']);
  this.executeCharTest('‚û≤', ['circled heavy white right-arrow', 'circled heavy white right-arrow', 'circled heavy white R arrow']);
  this.executeCharTest('‚û≥', ['white feathered right-arrow', 'white feathered right-arrow', 'white feathered R arrow']);
  this.executeCharTest('‚û¥', ['black feathered down right-arrow', 'black feathered down right-arrow', 'black feathered d R arrow']);
  this.executeCharTest('‚ûµ', ['black feathered right-arrow', 'black feathered right-arrow', 'black feathered R arrow']);
  this.executeCharTest('‚û∂', ['black feathered up right-arrow', 'black feathered up right-arrow', 'black feathered U R arrow']);
  this.executeCharTest('‚û∑', ['heavy black feathered down right-arrow', 'heavy black feathered down right-arrow', 'heavy black feathered d R arrow']);
  this.executeCharTest('‚û∏', ['heavy black feathered right-arrow', 'heavy black feathered right-arrow', 'heavy black feathered R arrow']);
  this.executeCharTest('‚ûπ', ['heavy black feathered up right-arrow', 'heavy black feathered up right-arrow', 'heavy black feathered U R arrow']);
  this.executeCharTest('‚û∫', ['teardrop barbed right-arrow', 'teardrop barbed right-arrow', 'teardrop barbed R arrow']);
  this.executeCharTest('‚ûª', ['heavy teardrop shanked right-arrow', 'heavy teardrop shanked right-arrow', 'heavy teardrop shanked R arrow']);
  this.executeCharTest('‚ûº', ['wedge tailed right-arrow', 'wedge tailed right-arrow', 'wedge tailed R arrow']);
  this.executeCharTest('‚ûΩ', ['heavy wedge tailed right-arrow', 'heavy wedge tailed right-arrow', 'heavy wedge tailed R arrow']);
  this.executeCharTest('‚ûæ', ['open outlined right-arrow', 'open outlined right-arrow', 'open outlined R arrow']);
  this.executeCharTest('‚ü∞', ['flecha cu√°druple hacia arriba', 'flecha cu√°druple hacia arriba', 'flecha cu√°druple hacia arriba']);
  this.executeCharTest('‚ü±', ['flecha cu√°druple hacia abajo', 'flecha cu√°druple hacia abajo', 'flecha cu√°druple hacia abajo']);
  this.executeCharTest('‚ü≤', ['flecha hacia la izquierda desde c√≠rculo', 'flecha hacia la izquierda desde c√≠rculo', 'flecha hacia la izquierda desde c√≠rculo']);
  this.executeCharTest('‚ü≥', ['flecha hacia la derecha desde c√≠rculo', 'flecha hacia la derecha desde c√≠rculo', 'flecha hacia la derecha desde c√≠rculo']);
  this.executeCharTest('‚ü¥', ['flecha con m√°s en c√≠rculo', 'flecha con m√°s en c√≠rculo', 'flecha con m√°s en c√≠rculo']);
  this.executeCharTest('‚üµ', ['flecha larga hacia la izquierda', 'flecha larga hacia la izquierda', 'flecha larga hacia la izquierda']);
  this.executeCharTest('‚ü∂', ['flecha larga', 'flecha larga', 'flecha larga']);
  this.executeCharTest('‚ü∑', ['flecha larga hacia izquierda y derecha', 'flecha larga hacia izquierda y derecha', 'flecha larga hacia izquierda y derecha']);
  this.executeCharTest('‚ü∏', ['doble flecha larga hacia la izquierda', 'doble flecha larga hacia la izquierda', 'doble flecha larga hacia la izquierda']);
  this.executeCharTest('‚üπ', ['doble flecha larga', 'doble flecha larga', 'doble flecha larga']);
  this.executeCharTest('‚ü∫', ['doble flecha larga hacia izquierda y derecha', 'doble flecha larga hacia izquierda y derecha', 'doble flecha larga hacia izquierda y derecha']);
  this.executeCharTest('‚üª', ['flecha larga hacia la izquierda, desde barra', 'flecha larga hacia la izquierda, desde barra', 'flecha larga hacia la izquierda, desde barra']);
  this.executeCharTest('‚üº', ['flecha larga desde barra', 'flecha larga desde barra', 'flecha larga desde barra']);
  this.executeCharTest('‚üΩ', ['doble flecha larga hacia la izquierda desde barra', 'doble flecha larga hacia la izquierda desde barra', 'doble flecha larga hacia la izquierda desde barra']);
  this.executeCharTest('‚üæ', ['doble flecha larga desde barra', 'doble flecha larga desde barra', 'doble flecha larga desde barra']);
  this.executeCharTest('‚üø', ['flecha larga en zigzag', 'flecha larga en zigzag', 'flecha larga en zigzag']);
  this.executeCharTest('‚§Ä', ['two headed right-arrow with vertical stroke', 'two headed right-arrow with vertical stroke', 'two headed R arrow with vertical stroke']);
  this.executeCharTest('‚§Å', ['two headed right-arrow with double vertical stroke', 'two headed right-arrow with double vertical stroke', 'two headed R arrow with double vertical stroke']);
  this.executeCharTest('‚§Ç', ['double left-arrow with vertical stroke', 'double left-arrow with vertical stroke', 'double L arrow with vertical stroke']);
  this.executeCharTest('‚§É', ['double right-arrow with vertical stroke', 'double right-arrow with vertical stroke', 'double R arrow with vertical stroke']);
  this.executeCharTest('‚§Ñ', ['double left-right-arrow with vertical stroke', 'double left-right-arrow with vertical stroke', 'double L R arrow with vertical stroke']);
  this.executeCharTest('‚§Ö', ['rightwards two headed arrow from bar', 'rightwards two headed arrow from bar', 'rightwards two headed arrow from bar']);
  this.executeCharTest('‚§Ü', ['double left-arrow from bar', 'double left-arrow from bar', 'double L arrow from bar']);
  this.executeCharTest('‚§á', ['double right-arrow from bar', 'double right-arrow from bar', 'double R arrow from bar']);
  this.executeCharTest('‚§à', ['arrow down with horizontal stroke', 'arrow down with horizontal stroke', 'arrow down with horizontal stroke']);
  this.executeCharTest('‚§â', ['up-arrow with horizontal stroke', 'up-arrow with horizontal stroke', 'U arrow with horizontal stroke']);
  this.executeCharTest('‚§ä', ['up triple arrow', 'up triple arrow', 'U triple arrow']);
  this.executeCharTest('‚§ã', ['down triple arrow', 'down triple arrow', 'd triple arrow']);
  this.executeCharTest('‚§å', ['leftwards double dash arrow', 'leftwards double dash arrow', 'leftwards double dash arrow']);
  this.executeCharTest('‚§ç', ['rightwards double dash arrow', 'rightwards double dash arrow', 'rightwards double dash arrow']);
  this.executeCharTest('‚§é', ['leftwards triple dash arrow', 'leftwards triple dash arrow', 'leftwards triple dash arrow']);
  this.executeCharTest('‚§è', ['rightwards triple dash arrow', 'rightwards triple dash arrow', 'rightwards triple dash arrow']);
  this.executeCharTest('‚§ê', ['rightwards two headed triple dash arrow', 'rightwards two headed triple dash arrow', 'rightwards two headed triple dash arrow']);
  this.executeCharTest('‚§ë', ['rightwards arrow with dotted stem', 'rightwards arrow with dotted stem', 'rightwards arrow with dotted stem']);
  this.executeCharTest('‚§í', ['upwards arrow to bar', 'upwards arrow to bar', 'upwards arrow to bar']);
  this.executeCharTest('‚§ì', ['downwards arrow to bar', 'downwards arrow to bar', 'downwards arrow to bar']);
  this.executeCharTest('‚§î', ['right-arrow with tail with vertical stroke', 'right-arrow with tail with vertical stroke', 'R arrow with tail with vertical stroke']);
  this.executeCharTest('‚§ï', ['right-arrow with tail with double vertical stroke', 'right-arrow with tail with double vertical stroke', 'R arrow with tail with double vertical stroke']);
  this.executeCharTest('‚§ñ', ['rightwards two headed arrow with tail', 'rightwards two headed arrow with tail', 'rightwards two headed arrow with tail']);
  this.executeCharTest('‚§ó', ['right two headed arrow with tail with vertical stroke', 'right two headed arrow with tail with vertical stroke', 'r two headed arrow with tail with vertical stroke']);
  this.executeCharTest('‚§ò', ['right two headed arrow with tail with double vertical stroke', 'right two headed arrow with tail with double vertical stroke', 'r two headed arrow with tail with double vertical stroke']);
  this.executeCharTest('‚§ô', ['cola de flecha hacia la izquierda', 'cola de flecha hacia la izquierda', 'cola de flecha hacia la izquierda']);
  this.executeCharTest('‚§ö', ['right-arrow tail', 'right-arrow tail', 'R arrow tail']);
  this.executeCharTest('‚§õ', ['cola de doble flecha hacia la izquierda', 'cola de doble flecha hacia la izquierda', 'cola de doble flecha hacia la izquierda']);
  this.executeCharTest('‚§ú', ['cola de doble flecha hacia la derecha', 'cola de doble flecha hacia la derecha', 'cola de doble flecha hacia la derecha']);
  this.executeCharTest('‚§ù', ['flecha hacia diamante relleno a la izquierda', 'flecha hacia diamante relleno a la izquierda', 'flecha hacia diamante relleno a la izquierda']);
  this.executeCharTest('‚§û', ['flecha hacia diamante a la derecha', 'flecha hacia diamante a la derecha', 'flecha hacia diamante a la derecha']);
  this.executeCharTest('‚§ü', ['flecha desde barra hacia diamante a la izquierda', 'flecha desde barra hacia diamante a la izquierda', 'flecha desde barra hacia diamante a la izquierda']);
  this.executeCharTest('‚§†', ['flecha desde barra hacia diamante a la derecha', 'flecha desde barra hacia diamante a la derecha', 'flecha desde barra hacia diamante a la derecha']);
  this.executeCharTest('‚§°', ['north west and south east arrow', 'north west and south east arrow', 'north west and south east arrow']);
  this.executeCharTest('‚§¢', ['north east and south west arrow', 'north east and south west arrow', 'north east and south west arrow']);
  this.executeCharTest('‚§£', ['flecha a noroeste con garfio', 'flecha a noroeste con garfio', 'flecha a noroeste con garfio']);
  this.executeCharTest('‚§§', ['flecha a nordeste con garfio', 'flecha a nordeste con garfio', 'flecha a nordeste con garfio']);
  this.executeCharTest('‚§•', ['flecha a sureste con garfio', 'flecha a sureste con garfio', 'flecha a sureste con garfio']);
  this.executeCharTest('‚§¶', ['flecha a suroeste con garfio', 'flecha a suroeste con garfio', 'flecha a suroeste con garfio']);
  this.executeCharTest('‚§ß', ['flechas a noroeste y nordeste', 'flechas a noroeste y nordeste', 'flechas a noroeste y nordeste']);
  this.executeCharTest('‚§®', ['flechas a nordeste y sudeste', 'flechas a nordeste y sudeste', 'flechas a nordeste y sudeste']);
  this.executeCharTest('‚§©', ['flechas a suddeste y sudoeste', 'flechas a suddeste y sudoeste', 'flechas a suddeste y sudoeste']);
  this.executeCharTest('‚§™', ['flechas a sudoeste y noroeste', 'flechas a sudoeste y noroeste', 'flechas a sudoeste y noroeste']);
  this.executeCharTest('‚§≠', ['south east arrow crossing north east arrow', 'south east arrow crossing north east arrow', 'south east arrow crossing north east arrow']);
  this.executeCharTest('‚§Æ', ['north east arrow crossing south east arrow', 'north east arrow crossing south east arrow', 'north east arrow crossing south east arrow']);
  this.executeCharTest('‚§Ø', ['falling diagonal crossing north east arrow', 'falling diagonal crossing north east arrow', 'falling diagonal crossing north east arrow']);
  this.executeCharTest('‚§∞', ['rising diagonal crossing south east arrow', 'rising diagonal crossing south east arrow', 'rising diagonal crossing south east arrow']);
  this.executeCharTest('‚§±', ['north east arrow crossing north west arrow', 'north east arrow crossing north west arrow', 'north east arrow crossing north west arrow']);
  this.executeCharTest('‚§≤', ['north west arrow crossing north east arrow', 'north west arrow crossing north east arrow', 'north west arrow crossing north east arrow']);
  this.executeCharTest('‚§≥', ['flecha ondulada', 'flecha ondulada', 'flecha ondulada']);
  this.executeCharTest('‚§¥', ['arrow pointing right then curving up', 'arrow pointing right then curving up', 'arrow pointing right then curving up']);
  this.executeCharTest('‚§µ', ['flecha hacia la derecha que gira hacia abajo', 'flecha hacia la derecha que gira hacia abajo', 'flecha hacia la derecha que gira hacia abajo']);
  this.executeCharTest('‚§∂', ['flecha hacia abajo que gira hacia la izquierda', 'flecha hacia abajo que gira hacia la izquierda', 'flecha hacia abajo que gira hacia la izquierda']);
  this.executeCharTest('‚§∑', ['flecha hacia abajo que gira hacia la derecha', 'flecha hacia abajo que gira hacia la derecha', 'flecha hacia abajo que gira hacia la derecha']);
  this.executeCharTest('‚§∏', ['flecha semicircular a la derecha en sentido horario', 'flecha semicircular a la derecha en sentido horario', 'flecha semicircular a la derecha en sentido horario']);
  this.executeCharTest('‚§π', ['flecha semicircular a la izquierda en sentido antihorario', 'flecha semicircular a la izquierda en sentido antihorario', 'flecha semicircular a la izquierda en sentido antihorario']);
  this.executeCharTest('‚§∫', ['top arc anticlockwise arrow', 'top arc anticlockwise arrow', 'top arc anticlockwise arrow']);
  this.executeCharTest('‚§ª', ['bottom arc anticlockwise arrow', 'bottom arc anticlockwise arrow', 'bottom arc anticlockwise arrow']);
  this.executeCharTest('‚§º', ['giro negativo', 'giro negativo', 'giro negativo']);
  this.executeCharTest('‚§Ω', ['giro positivo', 'giro positivo', 'giro positivo']);
  this.executeCharTest('‚§æ', ['down right semicircular clockwise arrow', 'down right semicircular clockwise arrow', 'd r semicircular clockwise arrow']);
  this.executeCharTest('‚§ø', ['down left semicircular anticlockwise arrow', 'down left semicircular anticlockwise arrow', 'd l semicircular anticlockwise arrow']);
  this.executeCharTest('‚•Ä', ['anticlockwise closed circle arrow', 'anticlockwise closed circle arrow', 'anticlockwise closed circle arrow']);
  this.executeCharTest('‚•Å', ['clockwise closed circle arrow', 'clockwise closed circle arrow', 'clockwise closed circle arrow']);
  this.executeCharTest('‚•Ç', ['right-arrow above short left-arrow', 'right-arrow above short left-arrow', 'R arrow above short L arrow']);
  this.executeCharTest('‚•É', ['left-arrow above short right-arrow', 'left-arrow above short right-arrow', 'L arrow above short R arrow']);
  this.executeCharTest('‚•Ñ', ['short right-arrow above left-arrow', 'short right-arrow above left-arrow', 'short R arrow above L arrow']);
  this.executeCharTest('‚•Ö', ['flecha con m√°s suscrito', 'flecha con m√°s suscrito', 'flecha con m√°s suscrito']);
  this.executeCharTest('‚•Ü', ['left-arrow with plus below', 'left-arrow with plus below', 'L arrow with plus below']);
  this.executeCharTest('‚•á', ['right-arrow through x', 'right-arrow through x', 'R arrow through x']);
  this.executeCharTest('‚•à', ['flecha hacia la izquierda a trav√©s de c√≠rculo', 'flecha hacia la izquierda a trav√©s de c√≠rculo', 'flecha hacia la izquierda a trav√©s de c√≠rculo']);
  this.executeCharTest('‚•â', ['dos cabezas de flecha hacia arriba desde c√≠rculo', 'dos cabezas de flecha hacia arriba desde c√≠rculo', 'dos cabezas de flecha hacia arriba desde c√≠rculo']);
  this.executeCharTest('‚•∞', ['round implies', 'round implies', 'round implies']);
  this.executeCharTest('‚•±', ['flecha con igual', 'flecha con igual', 'flecha con igual']);
  this.executeCharTest('‚•≤', ['flecha con tilde', 'flecha con tilde', 'flecha con tilde']);
  this.executeCharTest('‚•≥', ['tilde con flecha hacia la izquierda', 'tilde con flecha hacia la izquierda', 'tilde con flecha hacia la izquierda']);
  this.executeCharTest('‚•¥', ['tilde con flecha', 'tilde con flecha', 'tilde con flecha']);
  this.executeCharTest('‚•µ', ['flecha con casi igual a', 'flecha con casi igual a', 'flecha con casi igual a']);
  this.executeCharTest('‚•∂', ['flecha hacia la izquierda con menor que', 'flecha hacia la izquierda con menor que', 'flecha hacia la izquierda con menor que']);
  this.executeCharTest('‚•∑', ['left-arrow through less than', 'left-arrow through less than', 'L arrow through less than']);
  this.executeCharTest('‚•∏', ['flecha con mayor que', 'flecha con mayor que', 'flecha con mayor que']);
  this.executeCharTest('‚•π', ['flecha hacia la izquierda con incluido', 'flecha hacia la izquierda con incluido', 'flecha hacia la izquierda con incluido']);
  this.executeCharTest('‚•∫', ['left-arrow through subset', 'left-arrow through subset', 'L arrow through subset']);
  this.executeCharTest('‚•ª', ['flecha hacia la izquierda con contiene', 'flecha hacia la izquierda con contiene', 'flecha hacia la izquierda con contiene']);
  this.executeCharTest('‚¶≥', ['conjunto vac√≠o con flecha', 'conjunto vac√≠o con flecha', 'conjunto vac√≠o con flecha']);
  this.executeCharTest('‚¶¥', ['conjunto vac√≠o con flecha inversa', 'conjunto vac√≠o con flecha inversa', 'conjunto vac√≠o con flecha inversa']);
  this.executeCharTest('‚¶Ω', ['up-arrow through circle', 'up-arrow through circle', 'U arrow through circle']);
  this.executeCharTest('‚ß™', ['black diamond with down-arrow', 'black diamond with down-arrow', 'black diamond with D arrow']);
  this.executeCharTest('‚ß¨', ['white circle with down-arrow', 'white circle with down-arrow', 'white circle with D arrow']);
  this.executeCharTest('‚ß≠', ['black circle with down-arrow', 'black circle with down-arrow', 'black circle with D arrow']);
  this.executeCharTest('‚®ó', ['integral con flecha hacia la izquierda con garfio', 'integral con flecha hacia la izquierda con garfio', 'integral con flecha hacia la izquierda con garfio']);
  this.executeCharTest('‚¨Ä', ['north east white arrow', 'north east white arrow', 'north east white arrow']);
  this.executeCharTest('‚¨Å', ['north west white arrow', 'north west white arrow', 'north west white arrow']);
  this.executeCharTest('‚¨Ç', ['south east white arrow', 'south east white arrow', 'south east white arrow']);
  this.executeCharTest('‚¨É', ['south west white arrow', 'south west white arrow', 'south west white arrow']);
  this.executeCharTest('‚¨Ñ', ['left right white arrow', 'left right white arrow', 'L R white arrow']);
  this.executeCharTest('‚¨Ö', ['left black arrow', 'left black arrow', 'L black arrow']);
  this.executeCharTest('‚¨Ü', ['up black arrow', 'up black arrow', 'U black arrow']);
  this.executeCharTest('‚¨á', ['down black arrow', 'down black arrow', 'D black arrow']);
  this.executeCharTest('‚¨à', ['north east black arrow', 'north east black arrow', 'north east black arrow']);
  this.executeCharTest('‚¨â', ['north west black arrow', 'north west black arrow', 'north west black arrow']);
  this.executeCharTest('‚¨ä', ['south east black arrow', 'south east black arrow', 'south east black arrow']);
  this.executeCharTest('‚¨ã', ['south west black arrow', 'south west black arrow', 'south west black arrow']);
  this.executeCharTest('‚¨å', ['left right black arrow', 'left right black arrow', 'L R black arrow']);
  this.executeCharTest('‚¨ç', ['up down black arrow', 'up down black arrow', 'U D black arrow']);
  this.executeCharTest('‚¨é', ['right-arrow with tip down', 'right-arrow with tip down', 'R arrow with tip down']);
  this.executeCharTest('‚¨è', ['right-arrow with tip up', 'right-arrow with tip up', 'R arrow with tip up']);
  this.executeCharTest('‚¨ê', ['left-arrow with tip down', 'left-arrow with tip down', 'L arrow with tip down']);
  this.executeCharTest('‚¨ë', ['left-arrow with tip up', 'left-arrow with tip up', 'L arrow with tip up']);
  this.executeCharTest('‚¨∞', ['left-arrow with small circle', 'left-arrow with small circle', 'L arrow with small circle']);
  this.executeCharTest('‚¨±', ['three left-arrows', 'three left-arrows', 'three L arrows']);
  this.executeCharTest('‚¨≤', ['left-arrow with circled plus', 'left-arrow with circled plus', 'L arrow with circled plus']);
  this.executeCharTest('‚¨≥', ['long left squiggle arrow', 'long left squiggle arrow', 'long l squiggle arrow']);
  this.executeCharTest('‚¨¥', ['left two headed arrow with vertical stroke', 'left two headed arrow with vertical stroke', 'l two headed arrow with vertical stroke']);
  this.executeCharTest('‚¨µ', ['left two headed arrow with double vertical stroke', 'left two headed arrow with double vertical stroke', 'l two headed arrow with double vertical stroke']);
  this.executeCharTest('‚¨∂', ['left two headed arrow from bar', 'left two headed arrow from bar', 'l two headed arrow from bar']);
  this.executeCharTest('‚¨∑', ['left two headed triple dash arrow', 'left two headed triple dash arrow', 'l two headed triple dash arrow']);
  this.executeCharTest('‚¨∏', ['left-arrow with dotted stem', 'left-arrow with dotted stem', 'L arrow with dotted stem']);
  this.executeCharTest('‚¨π', ['left-arrow with tail with vertical stroke', 'left-arrow with tail with vertical stroke', 'L arrow with tail with vertical stroke']);
  this.executeCharTest('‚¨∫', ['left-arrow with tail with double vertical stroke', 'left-arrow with tail with double vertical stroke', 'L arrow with tail with double vertical stroke']);
  this.executeCharTest('‚¨ª', ['left two headed arrow with tail', 'left two headed arrow with tail', 'l two headed arrow with tail']);
  this.executeCharTest('‚¨º', ['left two headed arrow with tail with vertical stroke', 'left two headed arrow with tail with vertical stroke', 'l two headed arrow with tail with vertical stroke']);
  this.executeCharTest('‚¨Ω', ['left two headed arrow with tail with double vertical stroke', 'left two headed arrow with tail with double vertical stroke', 'l two headed arrow with tail with double vertical stroke']);
  this.executeCharTest('‚¨æ', ['left-arrow through x', 'left-arrow through x', 'L arrow through x']);
  this.executeCharTest('‚¨ø', ['wave arrow pointing directly left', 'wave arrow pointing directly left', 'wave arrow pointing directly left']);
  this.executeCharTest('‚≠Ä', ['equals sign above left-arrow', 'equals sign above left-arrow', 'equals sign above L arrow']);
  this.executeCharTest('‚≠Å', ['reverse tilde operator above left-arrow', 'reverse tilde operator above left-arrow', 'reverse tilde operator above L arrow']);
  this.executeCharTest('‚≠Ç', ['left-arrow above reverse almost equals', 'left-arrow above reverse almost equals', 'L arrow above reverse almost equals']);
  this.executeCharTest('‚≠É', ['right-arrow through greater than', 'right-arrow through greater than', 'R arrow through greater than']);
  this.executeCharTest('‚≠Ñ', ['right-arrow through superset', 'right-arrow through superset', 'R arrow through superset']);
  this.executeCharTest('‚≠Ö', ['left quadruple arrow', 'left quadruple arrow', 'l quadrule arrow']);
  this.executeCharTest('‚≠Ü', ['right quadruple arrow', 'right quadruple arrow', 'r quadrule arrow']);
  this.executeCharTest('‚≠á', ['reverse tilde operator above right-arrow', 'reverse tilde operator above right-arrow', 'reverse tilde operator above R arrow']);
  this.executeCharTest('‚≠à', ['right-arrow above reverse almost equals', 'right-arrow above reverse almost equals', 'R arrow above reverse almost equals']);
  this.executeCharTest('‚≠â', ['tilde operator above left-arrow', 'tilde operator above left-arrow', 'tilde operator above L arrow']);
  this.executeCharTest('‚≠ä', ['left-arrow above almost equals', 'left-arrow above almost equals', 'L arrow above almost equals']);
  this.executeCharTest('‚≠ã', ['left-arrow above reverse tilde operator', 'left-arrow above reverse tilde operator', 'L arrow above reverse tilde operator']);
  this.executeCharTest('‚≠å', ['right-arrow above reverse tilde operator', 'right-arrow above reverse tilde operator', 'R arrow above reverse tilde operator']);
  this.executeCharTest('Ôø©', ['halfwidth left-arrow', 'halfwidth left-arrow', 'halfwidth L arrow']);
  this.executeCharTest('Ôø™', ['halfwidth up-arrow', 'halfwidth up-arrow', 'halfwidth U arrow']);
  this.executeCharTest('Ôø´', ['halfwidth right-arrow', 'halfwidth right-arrow', 'halfwidth R arrow']);
  this.executeCharTest('Ôø¨', ['halfwidth down-arrow', 'halfwidth down-arrow', 'halfwidth D arrow']);
  this.executeCharTest('‚Ñì', ['script l', 'script l', 'script l']);
  this.executeCharTest('‚Ñò', ['p de weierstrass', 'p de weierstrass', 'p de weierstrass']);
  this.executeCharTest('‚Ñº', ['double struck pi', 'double struck pi', 'double struck pi']);
  this.executeCharTest('‚ÑΩ', ['double struck gamma', 'double struck gamma', 'double struck gamma']);
  this.executeCharTest('‚Ñæ', ['double struck upper Gamma', 'double struck upper Gamma', 'double struck upper Gamma']);
  this.executeCharTest('‚Ñø', ['double struck upper Pi', 'double struck upper Pi', 'double struck upper Pi']);
  this.executeCharTest('‚ÖÄ', ['double struck n ary summation', 'double struck n ary summation', 'double struck n ary summation']);
  this.executeCharTest('‚ÖÖ', ['may√∫scula D', 'may√∫scula D', 'may√∫scula D']);
  this.executeCharTest('‚ÖÜ', ['d', 'd', 'd']);
  this.executeCharTest('‚Öá', ['e', 'e', 'e']);
  this.executeCharTest('‚Öà', ['i', 'i', 'i']);
  this.executeCharTest('‚Öâ', ['double struck italic j', 'double struck italic j', 'double struck italic j']);
  this.executeCharTest('ùö§', ['cursiva dotless i', 'cursiva dotless i', 'cursiva dotless i']);
  this.executeCharTest('ùö•', ['cursiva dotless j', 'cursiva dotless j', 'cursiva dotless j']);
  this.executeCharTest('(', ['par√©ntesis izquierdo', 'par√©ntesis izquierdo', 'par√©ntesis izquierdo']);
  this.executeCharTest(')', ['par√©ntesis derecho', 'par√©ntesis derecho', 'par√©ntesis derecho']);
  this.executeCharTest('[', ['corchete izquierdo', 'corchete izquierdo', 'corchete izquierdo']);
  this.executeCharTest(']', ['corchete derecho', 'corchete derecho', 'corchete derecho']);
  this.executeCharTest('{', ['llave izquierda', 'llave izquierda', 'llave izquierda']);
  this.executeCharTest('}', ['llaves derecha', 'llaves derecha', 'llaves derecha']);
  this.executeCharTest('‚ÅÖ', ['left-bracket with quill', 'left-brack with quill', 'L brack with quill']);
  this.executeCharTest('‚ÅÜ', ['right-bracket with quill', 'right-brack with quill', 'R brack with quill']);
  this.executeCharTest('‚åà', ['esquina superior izquierda', 'esquina superior izquierda', 'esquina superior izquierda']);
  this.executeCharTest('‚åâ', ['esquina superior derecha', 'esquina superior derecha', 'esquina superior derecha']);
  this.executeCharTest('‚åä', ['esquina inferior izquierda', 'esquina inferior izquierda', 'esquina inferior izquierda']);
  this.executeCharTest('‚åã', ['esquina inferior derecha', 'esquina inferior derecha', 'esquina inferior derecha']);
  this.executeCharTest('‚åå', ['corte inferior derecho', 'corte inferior derecho', 'corte inferior derecho']);
  this.executeCharTest('‚åç', ['corte inferior izquierdo', 'corte inferior izquierdo', 'corte inferior izquierdo']);
  this.executeCharTest('‚åé', ['corte superior derecho ', 'corte superior derecho ', 'corte superior derecho ']);
  this.executeCharTest('‚åè', ['corte superior izquierdo', 'corte superior izquierdo', 'corte superior izquierdo']);
  this.executeCharTest('‚åú', ['√°ngulo superior izquierdo', '√°ngulo superior izquierdo', '√°ngulo superior izquierdo']);
  this.executeCharTest('‚åù', ['√°ngulo superior derecho', '√°ngulo superior derecho', '√°ngulo superior derecho']);
  this.executeCharTest('‚åû', ['√°ngulo inferior izquierdo', '√°ngulo inferior izquierdo', '√°ngulo inferior izquierdo']);
  this.executeCharTest('‚åü', ['√°ngulo inferior derecho', '√°ngulo inferior derecho', '√°ngulo inferior derecho']);
  this.executeCharTest('‚å†', ['mitad superior de integral', 'mitad superior de integral', 'mitad superior de integral']);
  this.executeCharTest('‚å°', ['mitad inferior de integral', 'mitad inferior de integral', 'mitad inferior de integral']);
  this.executeCharTest('‚å©', ['par√©ntesis angular izquierdo', 'par√©ntesis angular izquierdo', 'par√©ntesis angular izquierdo']);
  this.executeCharTest('‚å™', ['par√©ntesis angular derecho', 'par√©ntesis angular derecho', 'par√©ntesis angular derecho']);
  this.executeCharTest('‚éõ', ['left-parenthesis upper hook', 'left-p\'ren upper hook', 'L p\'ren upper hook']);
  this.executeCharTest('‚éú', ['left-parenthesis extension', 'left-p\'ren extension', 'L p\'ren extension']);
  this.executeCharTest('‚éù', ['left-parenthesis lower hook', 'left-p\'ren lower hook', 'L p\'ren lower hook']);
  this.executeCharTest('‚éû', ['right-parenthesis upper hook', 'right-p\'ren upper hook', 'R p\'ren upper hook']);
  this.executeCharTest('‚éü', ['right-parenthesis extension', 'right-p\'ren extension', 'R p\'ren extension']);
  this.executeCharTest('‚é†', ['right-parenthesis lower hook', 'right-p\'ren lower hook', 'R p\'ren lower hook']);
  this.executeCharTest('‚é°', ['left-bracket upper corner', 'left-brack upper corner', 'L brack upper corner']);
  this.executeCharTest('‚é¢', ['left-bracket extension', 'left-brack extension', 'L brack extension']);
  this.executeCharTest('‚é£', ['left-bracket lower corner', 'left-brack lower corner', 'L brack lower corner']);
  this.executeCharTest('‚é§', ['right-bracket upper corner', 'right-brack upper corner', 'R brack upper corner']);
  this.executeCharTest('‚é•', ['right-bracket extension', 'right-brack extension', 'R brack extension']);
  this.executeCharTest('‚é¶', ['right-bracket lower corner', 'right-brack lower corner', 'R brack lower corner']);
  this.executeCharTest('‚éß', ['left-brace upper hook', 'left-brace upper hook', 'L brace upper hook']);
  this.executeCharTest('‚é®', ['left-brace middle piece', 'left-brace middle piece', 'L brace middle piece']);
  this.executeCharTest('‚é©', ['left-brace lower hook', 'left-brace lower hook', 'L brace lower hook']);
  this.executeCharTest('‚é™', ['brace extension', 'brace extension', 'brace extension']);
  this.executeCharTest('‚é´', ['right-brace upper hook', 'right-brace upper hook', 'R brace upper hook']);
  this.executeCharTest('‚é¨', ['right-brace middle piece', 'right-brace middle piece', 'R brace middle piece']);
  this.executeCharTest('‚é≠', ['right-brace lower hook', 'right-brace lower hook', 'R brace lower hook']);
  this.executeCharTest('‚éÆ', ['integral extension', 'integral extension', 'integral extension']);
  this.executeCharTest('‚éØ', ['horizontal line extension', 'horizontal line extension', 'horizontal line extension']);
  this.executeCharTest('‚é∞', ['izquierda arriba o derecho debajo secci√≥n llave', 'izquierda arriba o derecho debajo secci√≥n llave', 'izquierda arriba o derecho debajo secci√≥n llave']);
  this.executeCharTest('‚é±', ['derecha arriba o izquierdo debajo secci√≥n llave', 'derecha arriba o izquierdo debajo secci√≥n llave', 'derecha arriba o izquierdo debajo secci√≥n llave']);
  this.executeCharTest('‚é≤', ['summation top', 'summation top', 'summation top']);
  this.executeCharTest('‚é≥', ['summation bottom', 'summation bottom', 'summation bottom']);
  this.executeCharTest('‚é¥', ['corchete superior', 'corchete superior', 'corchete superior']);
  this.executeCharTest('‚éµ', ['corchete inferior', 'corchete inferior', 'corchete inferior']);
  this.executeCharTest('‚é∂', ['bottom-bracket over top-bracket', 'bottom-brack over top-brack', 'B brack over T brack']);
  this.executeCharTest('‚é∑', ['radical symbol bottom', 'radical symbol bottom', 'radical symbol bottom']);
  this.executeCharTest('‚é∏', ['left vertical box line', 'left vertical box line', 'left vertical box line']);
  this.executeCharTest('‚éπ', ['right vertical box line', 'right vertical box line', 'right vertical box line']);
  this.executeCharTest('‚èú', ['par√©ntesis superior', 'par√©ntesis superior', 'par√©ntesis superior']);
  this.executeCharTest('‚èù', ['par√©ntesis inferior', 'par√©ntesis inferior', 'par√©ntesis inferior']);
  this.executeCharTest('‚èû', ['corchete rizado superior', 'corchete rizado superior', 'corchete rizado superior']);
  this.executeCharTest('‚èü', ['corchete rizado inferior', 'corchete rizado inferior', 'corchete rizado inferior']);
  this.executeCharTest('‚è†', ['corchete superior en tortuga', 'corchete superior en tortuga', 'corchete superior en tortuga']);
  this.executeCharTest('‚è°', ['corchete inferior en tortuga', 'corchete inferior en tortuga', 'corchete inferior en tortuga']);
  this.executeCharTest('‚ù®', ['medium left-parenthesis ornament', 'medium left-p\'ren ornament', 'medium L p\'ren ornament']);
  this.executeCharTest('‚ù©', ['medium right-parenthesis ornament', 'medium right-p\'ren ornament', 'medium R p\'ren ornament']);
  this.executeCharTest('‚ù™', ['medium flattened left-parenthesis ornament', 'medium flattened left-p\'ren ornament', 'medium flattened L p\'ren ornament']);
  this.executeCharTest('‚ù´', ['medium flattened right-parenthesis ornament', 'medium flattened right-p\'ren ornament', 'medium flattened R p\'ren ornament']);
  this.executeCharTest('‚ù¨', ['medium left pointing angle ornament', 'medium left pointing angle ornament', 'medium left pointing angle ornament']);
  this.executeCharTest('‚ù≠', ['medium right pointing angle ornament', 'medium right pointing angle ornament', 'medium right pointing angle ornament']);
  this.executeCharTest('‚ùÆ', ['heavy left pointing angle quotation mark ornament', 'heavy left pointing angle quotation mark ornament', 'heavy left pointing angle quotation mark ornament']);
  this.executeCharTest('‚ùØ', ['heavy right pointing angle quotation mark ornament', 'heavy right pointing angle quotation mark ornament', 'heavy right pointing angle quotation mark ornament']);
  this.executeCharTest('‚ù∞', ['heavy left pointing angle ornament', 'heavy left pointing angle ornament', 'heavy left pointing angle ornament']);
  this.executeCharTest('‚ù±', ['heavy right pointing angle ornament', 'heavy right pointing angle ornament', 'heavy right pointing angle ornament']);
  this.executeCharTest('‚ù≤', ['light left tortoise shell bracket ornament', 'light left tortoise shell bracket ornament', 'light left tortoise shell bracket ornament']);
  this.executeCharTest('‚ù≥', ['light right tortoise shell bracket ornament', 'light right tortoise shell bracket ornament', 'light right tortoise shell bracket ornament']);
  this.executeCharTest('‚ù¥', ['medium left-brace ornament', 'medium left-brace ornament', 'medium L brace ornament']);
  this.executeCharTest('‚ùµ', ['medium right-brace ornament', 'medium right-brace ornament', 'medium R brace ornament']);
  this.executeCharTest('‚üÖ', ['s√≠mbolo delimitador izquierdo de bolsa de s-form√≥', 's√≠mbolo delimitador izquierdo de bolsa de s-form√≥', 's√≠mbolo delimitador izquierdo de bolsa de s-form√≥']);
  this.executeCharTest('‚üÜ', ['s√≠mbolo delimitador derecho de bolsa de s-form√≥', 's√≠mbolo delimitador derecho de bolsa de s-form√≥', 's√≠mbolo delimitador derecho de bolsa de s-form√≥']);
  this.executeCharTest('‚ü¶', ['corchete vac√≠o izquierdo', 'corchete vac√≠o izquierdo', 'corchete vac√≠o izquierdo']);
  this.executeCharTest('‚üß', ['corchete vac√≠o derecho', 'corchete vac√≠o derecho', 'corchete vac√≠o derecho']);
  this.executeCharTest('‚ü®', ['corchete agudo izquierdo', 'corchete agudo izquierdo', 'corchete agudo izquierdo']);
  this.executeCharTest('‚ü©', ['corchete agudo derecho', 'corchete agudo derecho', 'corchete agudo derecho']);
  this.executeCharTest('‚ü™', ['doble corchete agudo izquierdo', 'doble corchete agudo izquierdo', 'doble corchete agudo izquierdo']);
  this.executeCharTest('‚ü´', ['doble corchete agudo derecho', 'doble corchete agudo derecho', 'doble corchete agudo derecho']);
  this.executeCharTest('‚ü¨', ['corchete de tortuga vac√≠o izquierdo', 'corchete de tortuga vac√≠o izquierdo', 'corchete de tortuga vac√≠o izquierdo']);
  this.executeCharTest('‚ü≠', ['corchete de tortuga vac√≠o derecho ', 'corchete de tortuga vac√≠o derecho ', 'corchete de tortuga vac√≠o derecho ']);
  this.executeCharTest('‚üÆ', ['par√©ntesis plano izquierdo', 'par√©ntesis plano izquierdo', 'par√©ntesis plano izquierdo']);
  this.executeCharTest('‚üØ', ['par√©ntesis plano derecho', 'par√©ntesis plano derecho', 'par√©ntesis plano derecho']);
  this.executeCharTest('‚¶É', ['left white brace', 'left white brace', 'left white brace']);
  this.executeCharTest('‚¶Ñ', ['right white brace', 'right white brace', 'right white brace']);
  this.executeCharTest('‚¶Ö', ['left white paren', 'left white paren', 'left white paren']);
  this.executeCharTest('‚¶Ü', ['right white paren', 'right white paren', 'right white paren']);
  this.executeCharTest('‚¶á', ['z notation left image bracket', 'z notation left image bracket', 'z notation left image bracket']);
  this.executeCharTest('‚¶à', ['z notation right image bracket', 'z notation right image bracket', 'z notation right image bracket']);
  this.executeCharTest('‚¶â', ['z notation left binding bracket', 'z notation left binding bracket', 'z notation left binding bracket']);
  this.executeCharTest('‚¶ä', ['z notation right binding bracket', 'z notation right binding bracket', 'z notation right binding bracket']);
  this.executeCharTest('‚¶ã', ['left bracket with underbar', 'left bracket with underbar', 'left bracket with underbar']);
  this.executeCharTest('‚¶å', ['right bracket with underbar', 'right bracket with underbar', 'right bracket with underbar']);
  this.executeCharTest('‚¶ç', ['left bracket with tick in top corner', 'left bracket with tick in top corner', 'left bracket with tick in top corner']);
  this.executeCharTest('‚¶é', ['right bracket with tick in bottom corner', 'right bracket with tick in bottom corner', 'right bracket with tick in bottom corner']);
  this.executeCharTest('‚¶è', ['left bracket with tick in bottom corner', 'left bracket with tick in bottom corner', 'left bracket with tick in bottom corner']);
  this.executeCharTest('‚¶ê', ['right bracket with tick in top corner', 'right bracket with tick in top corner', 'right bracket with tick in top corner']);
  this.executeCharTest('‚¶ë', ['left angle bracket with dot', 'left angle bracket with dot', 'left angle bracket with dot']);
  this.executeCharTest('‚¶í', ['right angle bracket with dot', 'right angle bracket with dot', 'right angle bracket with dot']);
  this.executeCharTest('‚¶ì', ['left arc less than bracket', 'left arc less than bracket', 'left arc less than bracket']);
  this.executeCharTest('‚¶î', ['right arc greater than bracket', 'right arc greater than bracket', 'right arc greater than bracket']);
  this.executeCharTest('‚¶ï', ['double left arc greater than bracket', 'double left arc greater than bracket', 'double left arc greater than bracket']);
  this.executeCharTest('‚¶ñ', ['double right arc less than bracket', 'double right arc less than bracket', 'double right arc less than bracket']);
  this.executeCharTest('‚¶ó', ['left black tortoise shell bracket', 'left black tortoise shell bracket', 'left black tortoise shell bracket']);
  this.executeCharTest('‚¶ò', ['right black tortoise shell bracket', 'right black tortoise shell bracket', 'right black tortoise shell bracket']);
  this.executeCharTest('‚ßò', ['left wiggly fence', 'left wiggly fence', 'left wiggly fence']);
  this.executeCharTest('‚ßô', ['right wiggly fence', 'right wiggly fence', 'right wiggly fence']);
  this.executeCharTest('‚ßö', ['left double wiggly fence', 'left double wiggly fence', 'left double wiggly fence']);
  this.executeCharTest('‚ßõ', ['right double wiggly fence', 'right double wiggly fence', 'right double wiggly fence']);
  this.executeCharTest('‚ßº', ['left pointing curved angle', 'left pointing curved angle', 'left pointing curved angle']);
  this.executeCharTest('‚ßΩ', ['right pointing curved angle', 'right pointing curved angle', 'right pointing curved angle']);
  this.executeCharTest('‚∏¢', ['top half left-bracket', 'top half left-brack', 'top half L brack']);
  this.executeCharTest('‚∏£', ['top half right-bracket', 'top half right-brack', 'top half R brack']);
  this.executeCharTest('‚∏§', ['bottom half left-bracket', 'bottom half left-brack', 'bottom half L brack']);
  this.executeCharTest('‚∏•', ['bottom half right-bracket', 'bottom half right-brack', 'bottom half R brack']);
  this.executeCharTest('‚∏¶', ['left sideways U bracket', 'left sideways U bracket', 'left sideways U bracket']);
  this.executeCharTest('‚∏ß', ['right sideways U bracket', 'right sideways U bracket', 'right sideways U bracket']);
  this.executeCharTest('‚∏®', ['double left-parenthesis', 'double left-p\'ren', 'double L p\'ren']);
  this.executeCharTest('‚∏©', ['double right-parenthesis', 'double right-p\'ren', 'double R p\'ren']);
  this.executeCharTest('„Äà', ['left-angle', 'left-angle', 'l angle']);
  this.executeCharTest('„Äâ', ['right-angle', 'right-angle', 'r angle']);
  this.executeCharTest('„Ää', ['par√©ntesis angular doble', 'par√©ntesis angular doble', 'par√©ntesis angular doble']);
  this.executeCharTest('„Äã', ['par√©ntesis angular doble derecho', 'par√©ntesis angular doble derecho', 'par√©ntesis angular doble derecho']);
  this.executeCharTest('„Äå', ['left corner bracket', 'left corner bracket', 'left corner bracket']);
  this.executeCharTest('„Äç', ['right corner bracket', 'right corner bracket', 'right corner bracket']);
  this.executeCharTest('„Äé', ['left white corner bracket', 'left white corner bracket', 'left white corner bracket']);
  this.executeCharTest('„Äè', ['right white corner bracket', 'right white corner bracket', 'right white corner bracket']);
  this.executeCharTest('„Äê', ['left black lenticular bracket', 'left black lenticular bracket', 'left black lenticular bracket']);
  this.executeCharTest('„Äë', ['right black lenticular bracket', 'right black lenticular bracket', 'right black lenticular bracket']);
  this.executeCharTest('„Äî', ['left tortoise shell bracket', 'left tortoise shell bracket', 'left tortoise shell bracket']);
  this.executeCharTest('„Äï', ['right tortoise shell bracket', 'right tortoise shell bracket', 'right tortoise shell bracket']);
  this.executeCharTest('„Äñ', ['left white lenticular bracket', 'left white lenticular bracket', 'left white lenticular bracket']);
  this.executeCharTest('„Äó', ['right white lenticular bracket', 'right white lenticular bracket', 'right white lenticular bracket']);
  this.executeCharTest('„Äò', ['left white tortoise shell bracket', 'left white tortoise shell bracket', 'left white tortoise shell bracket']);
  this.executeCharTest('„Äô', ['right white tortoise shell bracket', 'right white tortoise shell bracket', 'right white tortoise shell bracket']);
  this.executeCharTest('„Äö', ['corchete vac√≠o', 'corchete vac√≠o', 'corchete vac√≠o']);
  this.executeCharTest('„Äõ', ['corchete vac√≠o derecho', 'corchete vac√≠o derecho', 'corchete vac√≠o derecho']);
  this.executeCharTest('„Äù', ['reversed double prime quotation mark', 'reversed double prime quotation mark', 'reversed double prime quotation mark']);
  this.executeCharTest('„Äû', ['segunda', 'segunda', 'segunda']);
  this.executeCharTest('„Äü', ['low double prime quotation mark', 'low double prime quotation mark', 'low double prime quotation mark']);
  this.executeCharTest('Ô¥æ', ['ornate left-parenthesis', 'ornate left-p\'ren', 'ornate L p\'ren']);
  this.executeCharTest('Ô¥ø', ['ornate right-parenthesis', 'ornate right-p\'ren', 'ornate R p\'ren']);
  this.executeCharTest('Ô∏ó', ['presentation form for vertical left white lenticular bracket', 'presentation form for vertical left white lenticular bracket', 'presentation form for vertical left white lenticular bracket']);
  this.executeCharTest('Ô∏ò', ['presentation form for vertical right white lenticular brakcet', 'presentation form for vertical right white lenticular brakcet', 'presentation form for vertical right white lenticular brakcet']);
  this.executeCharTest('Ô∏µ', ['par√©ntesis superior', 'par√©ntesis superior', 'par√©ntesis superior']);
  this.executeCharTest('Ô∏∂', ['par√©ntesis inferior', 'par√©ntesis inferior', 'par√©ntesis inferior']);
  this.executeCharTest('Ô∏∑', ['llave superior', 'llave superior', 'llave superior']);
  this.executeCharTest('Ô∏∏', ['llave inferior', 'llave inferior', 'llave inferior']);
  this.executeCharTest('Ô∏π', ['presentation form for vertical left tortoise shell bracket', 'presentation form for vertical left tortoise shell bracket', 'presentation form for vertical left tortoise shell bracket']);
  this.executeCharTest('Ô∏∫', ['presentation form for vertical right tortoise shell bracket', 'presentation form for vertical right tortoise shell bracket', 'presentation form for vertical right tortoise shell bracket']);
  this.executeCharTest('Ô∏ª', ['presentation form for vertical left black lenticular bracket', 'presentation form for vertical left black lenticular bracket', 'presentation form for vertical left black lenticular bracket']);
  this.executeCharTest('Ô∏º', ['presentation form for vertical right black lenticular bracket', 'presentation form for vertical right black lenticular bracket', 'presentation form for vertical right black lenticular bracket']);
  this.executeCharTest('Ô∏Ω', ['presentation form for vertical left double angle', 'presentation form for vertical left double angle', 'presentation form for vertical left double angle']);
  this.executeCharTest('Ô∏æ', ['presentation form for vertical right double angle', 'presentation form for vertical right double angle', 'presentation form for vertical right double angle']);
  this.executeCharTest('Ô∏ø', ['par√©ntesis angular superior', 'par√©ntesis angular superior', 'par√©ntesis angular superior']);
  this.executeCharTest('ÔπÄ', ['par√©ntesis angular inferior', 'par√©ntesis angular inferior', 'par√©ntesis angular inferior']);
  this.executeCharTest('ÔπÅ', ['presentation form for vertical left corner bracket', 'presentation form for vertical left corner bracket', 'presentation form for vertical left corner bracket']);
  this.executeCharTest('ÔπÇ', ['presentation form for vertical right corner bracket', 'presentation form for vertical right corner bracket', 'presentation form for vertical right corner bracket']);
  this.executeCharTest('ÔπÉ', ['presentation form for vertical left white corner bracket', 'presentation form for vertical left white corner bracket', 'presentation form for vertical left white corner bracket']);
  this.executeCharTest('ÔπÑ', ['presentation form for vertical right white corner bracket', 'presentation form for vertical right white corner bracket', 'presentation form for vertical right white corner bracket']);
  this.executeCharTest('Ôπá', ['presentation form for vertical left-bracket', 'presentation form for vertical left-brack', 'presentation form for vertical L brack']);
  this.executeCharTest('Ôπà', ['presentation form for vertical right-bracket', 'presentation form for vertical right-brack', 'presentation form for vertical r brack']);
  this.executeCharTest('Ôπô', ['small left-parenthesis', 'small left-p\'ren', 'small L p\'ren']);
  this.executeCharTest('Ôπö', ['small right-parenthesis', 'small right-p\'ren', 'small R p\'ren']);
  this.executeCharTest('Ôπõ', ['small left-brace', 'small left-brace', 'small L brace']);
  this.executeCharTest('Ôπú', ['small right-brace', 'small right-brace', 'small r brace']);
  this.executeCharTest('Ôπù', ['small left tortoise shell bracket', 'small left tortoise shell bracket', 'small left tortoise shell bracket']);
  this.executeCharTest('Ôπû', ['small right tortoise shell bracket', 'small right tortoise shell bracket', 'small right tortoise shell bracket']);
  this.executeCharTest('Ôºà', ['fullwidth left-parenthesis', 'fullwidth left-p\'ren', 'fullwidth L p\'ren']);
  this.executeCharTest('Ôºâ', ['fullwidth right-parenthesis', 'fullwidth right-p\'ren', 'fullwidth R p\'ren']);
  this.executeCharTest('Ôºª', ['fullwidth left-bracket', 'fullwidth left-brack', 'fullwidth L brack']);
  this.executeCharTest('ÔºΩ', ['fullwidth right-bracket', 'fullwidth right-brack', 'fullwidth r brack']);
  this.executeCharTest('ÔΩõ', ['fullwidth left-brace', 'fullwidth left-brace', 'fullwidth L brace']);
  this.executeCharTest('ÔΩù', ['fullwidth right-brace', 'fullwidth right-brace', 'fullwidth r brace']);
  this.executeCharTest('ÔΩü', ['fullwidth white left-parenthesis', 'fullwidth white left-p\'ren', 'fullwidth white L p\'ren']);
  this.executeCharTest('ÔΩ†', ['fullwidth white right-parenthesis', 'fullwidth white right-p\'ren', 'fullwidth white R p\'ren']);
  this.executeCharTest('ÔΩ¢', ['halfwidth left corner bracket', 'halfwidth left corner bracket', 'halfwidth left corner bracket']);
  this.executeCharTest('ÔΩ£', ['halfwidth right corner bracket', 'halfwidth right corner bracket', 'halfwidth right corner bracket']);
  this.executeCharTest('¬≤', ['super 2', 'super 2', 'super 2']);
  this.executeCharTest('¬≥', ['super 3', 'super 3', 'super 3']);
  this.executeCharTest('¬π', ['super 1', 'super 1', 'super 1']);
  this.executeCharTest('¬º', ['un cuarto', 'un cuarto', 'un cuarto']);
  this.executeCharTest('¬Ω', ['un medio', 'un medio', 'un medio']);
  this.executeCharTest('¬æ', ['tres cuartos', 'tres cuartos', 'tres cuartos']);
  this.executeCharTest('‚Å∞', ['super zero', 'super zero', 'super zero']);
  this.executeCharTest('‚Å¥', ['super four', 'super four', 'super four']);
  this.executeCharTest('‚Åµ', ['super five', 'super five', 'super five']);
  this.executeCharTest('‚Å∂', ['super six', 'super six', 'super six']);
  this.executeCharTest('‚Å∑', ['super seven', 'super seven', 'super seven']);
  this.executeCharTest('‚Å∏', ['super eight', 'super eight', 'super eight']);
  this.executeCharTest('‚Åπ', ['super nine', 'super nine', 'super nine']);
  this.executeCharTest('‚ÇÄ', ['sub zero', 'sub zero', 'sub zero']);
  this.executeCharTest('‚ÇÅ', ['sub one', 'sub one', 'sub one']);
  this.executeCharTest('‚ÇÇ', ['sub two', 'sub two', 'sub two']);
  this.executeCharTest('‚ÇÉ', ['sub three', 'sub three', 'sub three']);
  this.executeCharTest('‚ÇÑ', ['sub four', 'sub four', 'sub four']);
  this.executeCharTest('‚ÇÖ', ['sub five', 'sub five', 'sub five']);
  this.executeCharTest('‚ÇÜ', ['sub six', 'sub six', 'sub six']);
  this.executeCharTest('‚Çá', ['sub seven', 'sub seven', 'sub seven']);
  this.executeCharTest('‚Çà', ['sub eight', 'sub eight', 'sub eight']);
  this.executeCharTest('‚Çâ', ['sub nine', 'sub nine', 'sub nine']);
  this.executeCharTest('‚Öê', ['one seventh', 'one seventh', 'one seventh']);
  this.executeCharTest('‚Öë', ['one ninth', 'one ninth', 'one ninth']);
  this.executeCharTest('‚Öí', ['one tenth', 'one tenth', 'one tenth']);
  this.executeCharTest('‚Öì', ['un tercio', 'un tercio', 'un tercio']);
  this.executeCharTest('‚Öî', ['dos tercios', 'dos tercios', 'dos tercios']);
  this.executeCharTest('‚Öï', ['un quinto', 'un quinto', 'un quinto']);
  this.executeCharTest('‚Öñ', ['dos quintos', 'dos quintos', 'dos quintos']);
  this.executeCharTest('‚Öó', ['tres quintos', 'tres quintos', 'tres quintos']);
  this.executeCharTest('‚Öò', ['cuatro quintos', 'cuatro quintos', 'cuatro quintos']);
  this.executeCharTest('‚Öô', ['un sexto', 'un sexto', 'un sexto']);
  this.executeCharTest('‚Öö', ['cinco sextos', 'cinco sextos', 'cinco sextos']);
  this.executeCharTest('‚Öõ', ['un octavo', 'un octavo', 'un octavo']);
  this.executeCharTest('‚Öú', ['tres octavos', 'tres octavos', 'tres octavos']);
  this.executeCharTest('‚Öù', ['cinco octavos', 'cinco octavos', 'cinco octavos']);
  this.executeCharTest('‚Öû', ['siete octavos', 'siete octavos', 'siete octavos']);
  this.executeCharTest('‚Öü', ['numerator one', 'numerator one', 'numerator one']);
  this.executeCharTest('‚Üâ', ['zero thirds', 'zero thirds', 'zero thirds']);
  this.executeCharTest('‚ë†', ['circled 1', 'circled 1', 'circled 1']);
  this.executeCharTest('‚ë°', ['circled 2', 'circled 2', 'circled 2']);
  this.executeCharTest('‚ë¢', ['circled 3', 'circled 3', 'circled 3']);
  this.executeCharTest('‚ë£', ['circled 4', 'circled 4', 'circled 4']);
  this.executeCharTest('‚ë§', ['circled 5', 'circled 5', 'circled 5']);
  this.executeCharTest('‚ë•', ['circled 6', 'circled 6', 'circled 6']);
  this.executeCharTest('‚ë¶', ['circled 7', 'circled 7', 'circled 7']);
  this.executeCharTest('‚ëß', ['circled 8', 'circled 8', 'circled 8']);
  this.executeCharTest('‚ë®', ['circled 9', 'circled 9', 'circled 9']);
  this.executeCharTest('‚ë©', ['circled 10', 'circled 10', 'circled 10']);
  this.executeCharTest('‚ë™', ['circled 11', 'circled 11', 'circled 11']);
  this.executeCharTest('‚ë´', ['circled 12', 'circled 12', 'circled 12']);
  this.executeCharTest('‚ë¨', ['circled 13', 'circled 13', 'circled 13']);
  this.executeCharTest('‚ë≠', ['circled 14', 'circled 14', 'circled 14']);
  this.executeCharTest('‚ëÆ', ['circled 15', 'circled 15', 'circled 15']);
  this.executeCharTest('‚ëØ', ['circled 16', 'circled 16', 'circled 16']);
  this.executeCharTest('‚ë∞', ['circled 17', 'circled 17', 'circled 17']);
  this.executeCharTest('‚ë±', ['circled 18', 'circled 18', 'circled 18']);
  this.executeCharTest('‚ë≤', ['circled 19', 'circled 19', 'circled 19']);
  this.executeCharTest('‚ë≥', ['circled 20', 'circled 20', 'circled 20']);
  this.executeCharTest('‚ë¥', ['parenthesized 1', 'parenthesized 1', 'parenthesized 1']);
  this.executeCharTest('‚ëµ', ['parenthesized 2', 'parenthesized 2', 'parenthesized 2']);
  this.executeCharTest('‚ë∂', ['parenthesized 3', 'parenthesized 3', 'parenthesized 3']);
  this.executeCharTest('‚ë∑', ['parenthesized 4', 'parenthesized 4', 'parenthesized 4']);
  this.executeCharTest('‚ë∏', ['parenthesized 5', 'parenthesized 5', 'parenthesized 5']);
  this.executeCharTest('‚ëπ', ['parenthesized 6', 'parenthesized 6', 'parenthesized 6']);
  this.executeCharTest('‚ë∫', ['parenthesized 7', 'parenthesized 7', 'parenthesized 7']);
  this.executeCharTest('‚ëª', ['parenthesized 8', 'parenthesized 8', 'parenthesized 8']);
  this.executeCharTest('‚ëº', ['parenthesized 9', 'parenthesized 9', 'parenthesized 9']);
  this.executeCharTest('‚ëΩ', ['parenthesized 10', 'parenthesized 10', 'parenthesized 10']);
  this.executeCharTest('‚ëæ', ['parenthesized 11', 'parenthesized 11', 'parenthesized 11']);
  this.executeCharTest('‚ëø', ['parenthesized 12', 'parenthesized 12', 'parenthesized 12']);
  this.executeCharTest('‚íÄ', ['parenthesized 13', 'parenthesized 13', 'parenthesized 13']);
  this.executeCharTest('‚íÅ', ['parenthesized 14', 'parenthesized 14', 'parenthesized 14']);
  this.executeCharTest('‚íÇ', ['parenthesized 15', 'parenthesized 15', 'parenthesized 15']);
  this.executeCharTest('‚íÉ', ['parenthesized 16', 'parenthesized 16', 'parenthesized 16']);
  this.executeCharTest('‚íÑ', ['parenthesized 17', 'parenthesized 17', 'parenthesized 17']);
  this.executeCharTest('‚íÖ', ['parenthesized 18', 'parenthesized 18', 'parenthesized 18']);
  this.executeCharTest('‚íÜ', ['parenthesized 19', 'parenthesized 19', 'parenthesized 19']);
  this.executeCharTest('‚íá', ['parenthesized 20', 'parenthesized 20', 'parenthesized 20']);
  this.executeCharTest('‚íà', ['1 period', '1 period', '1 period']);
  this.executeCharTest('‚íâ', ['2 period', '2 period', '2 period']);
  this.executeCharTest('‚íä', ['3 period', '3 period', '3 period']);
  this.executeCharTest('‚íã', ['4 period', '4 period', '4 period']);
  this.executeCharTest('‚íå', ['5 period', '5 period', '5 period']);
  this.executeCharTest('‚íç', ['6 period', '6 period', '6 period']);
  this.executeCharTest('‚íé', ['7 period', '7 period', '7 period']);
  this.executeCharTest('‚íè', ['8 period', '8 period', '8 period']);
  this.executeCharTest('‚íê', ['9 period', '9 period', '9 period']);
  this.executeCharTest('‚íë', ['10 period', '10 period', '10 period']);
  this.executeCharTest('‚íí', ['11 period', '11 period', '11 period']);
  this.executeCharTest('‚íì', ['12 period', '12 period', '12 period']);
  this.executeCharTest('‚íî', ['13 period', '13 period', '13 period']);
  this.executeCharTest('‚íï', ['14 period', '14 period', '14 period']);
  this.executeCharTest('‚íñ', ['15 period', '15 period', '15 period']);
  this.executeCharTest('‚íó', ['16 period', '16 period', '16 period']);
  this.executeCharTest('‚íò', ['17 period', '17 period', '17 period']);
  this.executeCharTest('‚íô', ['18 period', '18 period', '18 period']);
  this.executeCharTest('‚íö', ['19 period', '19 period', '19 period']);
  this.executeCharTest('‚íõ', ['20 period', '20 period', '20 period']);
  this.executeCharTest('‚ì™', ['circled 0', 'circled 0', 'circled 0']);
  this.executeCharTest('‚ì´', ['negative circled 11', 'negative circled 11', 'negative circled 11']);
  this.executeCharTest('‚ì¨', ['negative circled 12', 'negative circled 12', 'negative circled 12']);
  this.executeCharTest('‚ì≠', ['negative circled 13', 'negative circled 13', 'negative circled 13']);
  this.executeCharTest('‚ìÆ', ['negative circled 14', 'negative circled 14', 'negative circled 14']);
  this.executeCharTest('‚ìØ', ['negative circled 15', 'negative circled 15', 'negative circled 15']);
  this.executeCharTest('‚ì∞', ['negative circled 16', 'negative circled 16', 'negative circled 16']);
  this.executeCharTest('‚ì±', ['negative circled 17', 'negative circled 17', 'negative circled 17']);
  this.executeCharTest('‚ì≤', ['negative circled 18', 'negative circled 18', 'negative circled 18']);
  this.executeCharTest('‚ì≥', ['negative circled 19', 'negative circled 19', 'negative circled 19']);
  this.executeCharTest('‚ì¥', ['negative circled 20', 'negative circled 20', 'negative circled 20']);
  this.executeCharTest('‚ìµ', ['double circled 1', 'double circled 1', 'double circled 1']);
  this.executeCharTest('‚ì∂', ['double circled 2', 'double circled 2', 'double circled 2']);
  this.executeCharTest('‚ì∑', ['double circled 3', 'double circled 3', 'double circled 3']);
  this.executeCharTest('‚ì∏', ['double circled 4', 'double circled 4', 'double circled 4']);
  this.executeCharTest('‚ìπ', ['double circled 5', 'double circled 5', 'double circled 5']);
  this.executeCharTest('‚ì∫', ['double circled 6', 'double circled 6', 'double circled 6']);
  this.executeCharTest('‚ìª', ['double circled 7', 'double circled 7', 'double circled 7']);
  this.executeCharTest('‚ìº', ['double circled 8', 'double circled 8', 'double circled 8']);
  this.executeCharTest('‚ìΩ', ['double circled 9', 'double circled 9', 'double circled 9']);
  this.executeCharTest('‚ìæ', ['double circled 10', 'double circled 10', 'double circled 10']);
  this.executeCharTest('‚ìø', ['negative circled 0', 'negative circled 0', 'negative circled 0']);
  this.executeCharTest('‚ù∂', ['inverse circled 1', 'inverse circled 1', 'inverse circled 1']);
  this.executeCharTest('‚ù∑', ['inverse circled 2', 'inverse circled 2', 'inverse circled 2']);
  this.executeCharTest('‚ù∏', ['inverse circled 3', 'inverse circled 3', 'inverse circled 3']);
  this.executeCharTest('‚ùπ', ['inverse circled 4', 'inverse circled 4', 'inverse circled 4']);
  this.executeCharTest('‚ù∫', ['inverse circled 5', 'inverse circled 5', 'inverse circled 5']);
  this.executeCharTest('‚ùª', ['inverse circled 6', 'inverse circled 6', 'inverse circled 6']);
  this.executeCharTest('‚ùº', ['inverse circled 7', 'inverse circled 7', 'inverse circled 7']);
  this.executeCharTest('‚ùΩ', ['inverse circled 8', 'inverse circled 8', 'inverse circled 8']);
  this.executeCharTest('‚ùæ', ['inverse circled 9', 'inverse circled 9', 'inverse circled 9']);
  this.executeCharTest('‚ùø', ['inverse circled 10', 'inverse circled 10', 'inverse circled 10']);
  this.executeCharTest('‚ûÄ', ['circled one', 'circled one', 'circled one']);
  this.executeCharTest('‚ûÅ', ['circled two', 'circled two', 'circled two']);
  this.executeCharTest('‚ûÇ', ['circled three', 'circled three', 'circled three']);
  this.executeCharTest('‚ûÉ', ['circled four', 'circled four', 'circled four']);
  this.executeCharTest('‚ûÑ', ['circled five', 'circled five', 'circled five']);
  this.executeCharTest('‚ûÖ', ['circled six', 'circled six', 'circled six']);
  this.executeCharTest('‚ûÜ', ['circled seven', 'circled seven', 'circled seven']);
  this.executeCharTest('‚ûá', ['circled eight', 'circled eight', 'circled eight']);
  this.executeCharTest('‚ûà', ['circled nine', 'circled nine', 'circled nine']);
  this.executeCharTest('‚ûâ', ['circled ten', 'circled ten', 'circled ten']);
  this.executeCharTest('‚ûä', ['inverse circled 1', 'inverse circled 1', 'inverse circled 1']);
  this.executeCharTest('‚ûã', ['inverse circled 2', 'inverse circled 2', 'inverse circled 2']);
  this.executeCharTest('‚ûå', ['inverse circled 3', 'inverse circled 3', 'inverse circled 3']);
  this.executeCharTest('‚ûç', ['inverse circled 4', 'inverse circled 4', 'inverse circled 4']);
  this.executeCharTest('‚ûé', ['inverse circled 5', 'inverse circled 5', 'inverse circled 5']);
  this.executeCharTest('‚ûè', ['inverse circled 6', 'inverse circled 6', 'inverse circled 6']);
  this.executeCharTest('‚ûê', ['inverse circled 7', 'inverse circled 7', 'inverse circled 7']);
  this.executeCharTest('‚ûë', ['inverse circled 8', 'inverse circled 8', 'inverse circled 8']);
  this.executeCharTest('‚ûí', ['inverse circled 9', 'inverse circled 9', 'inverse circled 9']);
  this.executeCharTest('‚ûì', ['inverse circled 10', 'inverse circled 10', 'inverse circled 10']);
  this.executeCharTest('„âà', ['circled ten on black square', 'circled ten on black square', 'circled ten on black square']);
  this.executeCharTest('„ââ', ['circled twenty on black square', 'circled twenty on black square', 'circled twenty on black square']);
  this.executeCharTest('„âä', ['circled thirty on black square', 'circled thirty on black square', 'circled thirty on black square']);
  this.executeCharTest('„âã', ['circled forty on black square', 'circled forty on black square', 'circled forty on black square']);
  this.executeCharTest('„âå', ['circled fifty on black square', 'circled fifty on black square', 'circled fifty on black square']);
  this.executeCharTest('„âç', ['circled sixty on black square', 'circled sixty on black square', 'circled sixty on black square']);
  this.executeCharTest('„âé', ['circled seventy on black square', 'circled seventy on black square', 'circled seventy on black square']);
  this.executeCharTest('„âè', ['circled eighty on black square', 'circled eighty on black square', 'circled eighty on black square']);
  this.executeCharTest('„âë', ['circled twenty one', 'circled twenty one', 'circled twenty one']);
  this.executeCharTest('„âí', ['circled twenty two', 'circled twenty two', 'circled twenty two']);
  this.executeCharTest('„âì', ['circled twenty three', 'circled twenty three', 'circled twenty three']);
  this.executeCharTest('„âî', ['circled twenty four', 'circled twenty four', 'circled twenty four']);
  this.executeCharTest('„âï', ['circled twenty five', 'circled twenty five', 'circled twenty five']);
  this.executeCharTest('„âñ', ['circled twenty six', 'circled twenty six', 'circled twenty six']);
  this.executeCharTest('„âó', ['circled twenty seven', 'circled twenty seven', 'circled twenty seven']);
  this.executeCharTest('„âò', ['circled twenty eight', 'circled twenty eight', 'circled twenty eight']);
  this.executeCharTest('„âô', ['circled twenty nine', 'circled twenty nine', 'circled twenty nine']);
  this.executeCharTest('„âö', ['circled thirty', 'circled thirty', 'circled thirty']);
  this.executeCharTest('„âõ', ['circled thirty one', 'circled thirty one', 'circled thirty one']);
  this.executeCharTest('„âú', ['circled thirty two', 'circled thirty two', 'circled thirty two']);
  this.executeCharTest('„âù', ['circled thirty three', 'circled thirty three', 'circled thirty three']);
  this.executeCharTest('„âû', ['circled thirty four', 'circled thirty four', 'circled thirty four']);
  this.executeCharTest('„âü', ['circled thirty five', 'circled thirty five', 'circled thirty five']);
  this.executeCharTest('„ä±', ['circled thirty six', 'circled thirty six', 'circled thirty six']);
  this.executeCharTest('„ä≤', ['circled thirty seven', 'circled thirty seven', 'circled thirty seven']);
  this.executeCharTest('„ä≥', ['circled thirty eight', 'circled thirty eight', 'circled thirty eight']);
  this.executeCharTest('„ä¥', ['circled thirty nine', 'circled thirty nine', 'circled thirty nine']);
  this.executeCharTest('„äµ', ['circled forty', 'circled forty', 'circled forty']);
  this.executeCharTest('„ä∂', ['circled forty one', 'circled forty one', 'circled forty one']);
  this.executeCharTest('„ä∑', ['circled forty two', 'circled forty two', 'circled forty two']);
  this.executeCharTest('„ä∏', ['circled forty three', 'circled forty three', 'circled forty three']);
  this.executeCharTest('„äπ', ['circled forty four', 'circled forty four', 'circled forty four']);
  this.executeCharTest('„ä∫', ['circled forty five', 'circled forty five', 'circled forty five']);
  this.executeCharTest('„äª', ['circled forty six', 'circled forty six', 'circled forty six']);
  this.executeCharTest('„äº', ['circled forty seven', 'circled forty seven', 'circled forty seven']);
  this.executeCharTest('„äΩ', ['circled forty eight', 'circled forty eight', 'circled forty eight']);
  this.executeCharTest('„äæ', ['circled forty nine', 'circled forty nine', 'circled forty nine']);
  this.executeCharTest('„äø', ['circled fifty', 'circled fifty', 'circled fifty']);
  this.executeCharTest('Ôºê', ['0', '0', '0']);
  this.executeCharTest('Ôºë', ['1', '1', '1']);
  this.executeCharTest('Ôºí', ['2', '2', '2']);
  this.executeCharTest('Ôºì', ['3', '3', '3']);
  this.executeCharTest('Ôºî', ['4', '4', '4']);
  this.executeCharTest('Ôºï', ['5', '5', '5']);
  this.executeCharTest('Ôºñ', ['6', '6', '6']);
  this.executeCharTest('Ôºó', ['7', '7', '7']);
  this.executeCharTest('Ôºò', ['8', '8', '8']);
  this.executeCharTest('Ôºô', ['9', '9', '9']);
  this.executeCharTest('ùüé', ['negrita 0', 'negrita 0', 'negrita 0']);
  this.executeCharTest('ùüè', ['negrita 1', 'negrita 1', 'negrita 1']);
  this.executeCharTest('ùüê', ['negrita 2', 'negrita 2', 'negrita 2']);
  this.executeCharTest('ùüë', ['negrita 3', 'negrita 3', 'negrita 3']);
  this.executeCharTest('ùüí', ['negrita 4', 'negrita 4', 'negrita 4']);
  this.executeCharTest('ùüì', ['negrita 5', 'negrita 5', 'negrita 5']);
  this.executeCharTest('ùüî', ['negrita 6', 'negrita 6', 'negrita 6']);
  this.executeCharTest('ùüï', ['negrita 7', 'negrita 7', 'negrita 7']);
  this.executeCharTest('ùüñ', ['negrita 8', 'negrita 8', 'negrita 8']);
  this.executeCharTest('ùüó', ['negrita 9', 'negrita 9', 'negrita 9']);
  this.executeCharTest('ùüò', ['negrita de pizarra 0', 'negrita de pizarra 0', 'negrita de pizarra 0']);
  this.executeCharTest('ùüô', ['negrita de pizarra 1', 'negrita de pizarra 1', 'negrita de pizarra 1']);
  this.executeCharTest('ùüö', ['negrita de pizarra 2', 'negrita de pizarra 2', 'negrita de pizarra 2']);
  this.executeCharTest('ùüõ', ['negrita de pizarra 3', 'negrita de pizarra 3', 'negrita de pizarra 3']);
  this.executeCharTest('ùüú', ['negrita de pizarra 4', 'negrita de pizarra 4', 'negrita de pizarra 4']);
  this.executeCharTest('ùüù', ['negrita de pizarra 5', 'negrita de pizarra 5', 'negrita de pizarra 5']);
  this.executeCharTest('ùüû', ['negrita de pizarra 6', 'negrita de pizarra 6', 'negrita de pizarra 6']);
  this.executeCharTest('ùüü', ['negrita de pizarra 7', 'negrita de pizarra 7', 'negrita de pizarra 7']);
  this.executeCharTest('ùü†', ['negrita de pizarra 8', 'negrita de pizarra 8', 'negrita de pizarra 8']);
  this.executeCharTest('ùü°', ['negrita de pizarra 9', 'negrita de pizarra 9', 'negrita de pizarra 9']);
  this.executeCharTest('ùü¢', ['sans-serif 0', 'sans-serif 0', 'sans-serif 0']);
  this.executeCharTest('ùü£', ['sans-serif 1', 'sans-serif 1', 'sans-serif 1']);
  this.executeCharTest('ùü§', ['sans-serif 2', 'sans-serif 2', 'sans-serif 2']);
  this.executeCharTest('ùü•', ['sans-serif 3', 'sans-serif 3', 'sans-serif 3']);
  this.executeCharTest('ùü¶', ['sans-serif 4', 'sans-serif 4', 'sans-serif 4']);
  this.executeCharTest('ùüß', ['sans-serif 5', 'sans-serif 5', 'sans-serif 5']);
  this.executeCharTest('ùü®', ['sans-serif 6', 'sans-serif 6', 'sans-serif 6']);
  this.executeCharTest('ùü©', ['sans-serif 7', 'sans-serif 7', 'sans-serif 7']);
  this.executeCharTest('ùü™', ['sans-serif 8', 'sans-serif 8', 'sans-serif 8']);
  this.executeCharTest('ùü´', ['sans-serif 9', 'sans-serif 9', 'sans-serif 9']);
  this.executeCharTest('ùü¨', ['sans-serif negrita 0', 'sans-serif negrita 0', 'sans-serif negrita 0']);
  this.executeCharTest('ùü≠', ['sans-serif negrita 1', 'sans-serif negrita 1', 'sans-serif negrita 1']);
  this.executeCharTest('ùüÆ', ['sans-serif negrita 2', 'sans-serif negrita 2', 'sans-serif negrita 2']);
  this.executeCharTest('ùüØ', ['sans-serif negrita 3', 'sans-serif negrita 3', 'sans-serif negrita 3']);
  this.executeCharTest('ùü∞', ['sans-serif negrita 4', 'sans-serif negrita 4', 'sans-serif negrita 4']);
  this.executeCharTest('ùü±', ['sans-serif negrita 5', 'sans-serif negrita 5', 'sans-serif negrita 5']);
  this.executeCharTest('ùü≤', ['sans-serif negrita 6', 'sans-serif negrita 6', 'sans-serif negrita 6']);
  this.executeCharTest('ùü≥', ['sans-serif negrita 7', 'sans-serif negrita 7', 'sans-serif negrita 7']);
  this.executeCharTest('ùü¥', ['sans-serif negrita 8', 'sans-serif negrita 8', 'sans-serif negrita 8']);
  this.executeCharTest('ùüµ', ['sans-serif negrita 9', 'sans-serif negrita 9', 'sans-serif negrita 9']);
  this.executeCharTest('ùü∂', ['monoespacio 0', 'monoespacio 0', 'monoespacio 0']);
  this.executeCharTest('ùü∑', ['monoespacio 1', 'monoespacio 1', 'monoespacio 1']);
  this.executeCharTest('ùü∏', ['monoespacio 2', 'monoespacio 2', 'monoespacio 2']);
  this.executeCharTest('ùüπ', ['monoespacio 3', 'monoespacio 3', 'monoespacio 3']);
  this.executeCharTest('ùü∫', ['monoespacio 4', 'monoespacio 4', 'monoespacio 4']);
  this.executeCharTest('ùüª', ['monoespacio 5', 'monoespacio 5', 'monoespacio 5']);
  this.executeCharTest('ùüº', ['monoespacio 6', 'monoespacio 6', 'monoespacio 6']);
  this.executeCharTest('ùüΩ', ['monoespacio 7', 'monoespacio 7', 'monoespacio 7']);
  this.executeCharTest('ùüæ', ['monoespacio 8', 'monoespacio 8', 'monoespacio 8']);
  this.executeCharTest('ùüø', ['monoespacio 9', 'monoespacio 9', 'monoespacio 9']);
  this.executeCharTest('üÑÄ', ['0 punto', '0 punto', '0 punto']);
  this.executeCharTest('üÑÅ', ['0 coma', '0 coma', '0 coma']);
  this.executeCharTest('üÑÇ', ['1 coma', '1 coma', '1 coma']);
  this.executeCharTest('üÑÉ', ['2 coma', '2 coma', '2 coma']);
  this.executeCharTest('üÑÑ', ['3 coma', '3 coma', '3 coma']);
  this.executeCharTest('üÑÖ', ['4 coma', '4 coma', '4 coma']);
  this.executeCharTest('üÑÜ', ['5 coma', '5 coma', '5 coma']);
  this.executeCharTest('üÑá', ['6 coma', '6 coma', '6 coma']);
  this.executeCharTest('üÑà', ['7 coma', '7 coma', '7 coma']);
  this.executeCharTest('üÑâ', ['8 coma', '8 coma', '8 coma']);
  this.executeCharTest('üÑä', ['9 coma', '9 coma', '9 coma']);
  this.executeCharTest('‚îÄ', ['delimitador horizontal', 'delimitador horizontal', 'delimitador horizontal']);
  this.executeCharTest('‚îÅ', ['box drawings heavy horizontal', 'box drawings heavy horizontal', 'box drawings heavy horizontal']);
  this.executeCharTest('‚îÇ', ['delimitador vertical', 'delimitador vertical', 'delimitador vertical']);
  this.executeCharTest('‚îÉ', ['box drawings heavy vertical', 'box drawings heavy vertical', 'box drawings heavy vertical']);
  this.executeCharTest('‚îÑ', ['box drawings light triple dash horizontal', 'box drawings light triple dash horizontal', 'box drawings light triple dash horizontal']);
  this.executeCharTest('‚îÖ', ['box drawings heavy triple dash horizontal', 'box drawings heavy triple dash horizontal', 'box drawings heavy triple dash horizontal']);
  this.executeCharTest('‚îÜ', ['box drawings light triple dash vertical', 'box drawings light triple dash vertical', 'box drawings light triple dash vertical']);
  this.executeCharTest('‚îá', ['box drawings heavy triple dash vertical', 'box drawings heavy triple dash vertical', 'box drawings heavy triple dash vertical']);
  this.executeCharTest('‚îà', ['box drawings light quadruple dash horizontal', 'box drawings light quadruple dash horizontal', 'box drawings light quadruple dash horizontal']);
  this.executeCharTest('‚îâ', ['box drawings heavy quadruple dash horizontal', 'box drawings heavy quadruple dash horizontal', 'box drawings heavy quadruple dash horizontal']);
  this.executeCharTest('‚îä', ['box drawings light quadruple dash vertical', 'box drawings light quadruple dash vertical', 'box drawings light quadruple dash vertical']);
  this.executeCharTest('‚îã', ['box drawings heavy quadruple dash vertical', 'box drawings heavy quadruple dash vertical', 'box drawings heavy quadruple dash vertical']);
  this.executeCharTest('‚îå', ['esquina inferior derecha', 'esquina inferior derecha', 'esquina inferior derecha']);
  this.executeCharTest('‚îç', ['box drawings down light and right heavy', 'box drawings down light and right heavy', 'box drawings down light and right heavy']);
  this.executeCharTest('‚îé', ['box drawings down heavy and right light', 'box drawings down heavy and right light', 'box drawings down heavy and right light']);
  this.executeCharTest('‚îè', ['box drawings heavy down and right', 'box drawings heavy down and right', 'box drawings heavy down and right']);
  this.executeCharTest('‚îê', ['esquina inferior izquierda', 'esquina inferior izquierda', 'esquina inferior izquierda']);
  this.executeCharTest('‚îë', ['box drawings down light and left heavy', 'box drawings down light and left heavy', 'box drawings down light and left heavy']);
  this.executeCharTest('‚îí', ['box drawings down heavy and left light', 'box drawings down heavy and left light', 'box drawings down heavy and left light']);
  this.executeCharTest('‚îì', ['box drawings heavy down and left', 'box drawings heavy down and left', 'box drawings heavy down and left']);
  this.executeCharTest('‚îî', ['esquina superior derecha', 'esquina superior derecha', 'esquina superior derecha']);
  this.executeCharTest('‚îï', ['box drawings up light and right heavy', 'box drawings up light and right heavy', 'box drawings up light and right heavy']);
  this.executeCharTest('‚îñ', ['box drawings up heavy and right light', 'box drawings up heavy and right light', 'box drawings up heavy and right light']);
  this.executeCharTest('‚îó', ['box drawings heavy up and right', 'box drawings heavy up and right', 'box drawings heavy up and right']);
  this.executeCharTest('‚îò', ['esquina superior izquierda', 'esquina superior izquierda', 'esquina superior izquierda']);
  this.executeCharTest('‚îô', ['box drawings up light and left heavy', 'box drawings up light and left heavy', 'box drawings up light and left heavy']);
  this.executeCharTest('‚îö', ['box drawings up heavy and left light', 'box drawings up heavy and left light', 'box drawings up heavy and left light']);
  this.executeCharTest('‚îõ', ['box drawings heavy up and left', 'box drawings heavy up and left', 'box drawings heavy up and left']);
  this.executeCharTest('‚îú', ['delimitador izquierdo y separador horizontal', 'delimitador izquierdo y separador horizontal', 'delimitador izquierdo y separador horizontal']);
  this.executeCharTest('‚îù', ['box drawings vertical light and right heavy', 'box drawings vertical light and right heavy', 'box drawings vertical light and right heavy']);
  this.executeCharTest('‚îû', ['box drawings up heavy and right down light', 'box drawings up heavy and right down light', 'box drawings up heavy and right down light']);
  this.executeCharTest('‚îü', ['box drawings down heavy and right up light', 'box drawings down heavy and right up light', 'box drawings down heavy and right up light']);
  this.executeCharTest('‚î†', ['box drawings vertical heavy and right light', 'box drawings vertical heavy and right light', 'box drawings vertical heavy and right light']);
  this.executeCharTest('‚î°', ['box drawings down light and right up heavy', 'box drawings down light and right up heavy', 'box drawings down light and right up heavy']);
  this.executeCharTest('‚î¢', ['box drawings up light and right down heavy', 'box drawings up light and right down heavy', 'box drawings up light and right down heavy']);
  this.executeCharTest('‚î£', ['box drawings heavy vertical and right', 'box drawings heavy vertical and right', 'box drawings heavy vertical and right']);
  this.executeCharTest('‚î§', ['delimitador derecho y separador horizontal', 'delimitador derecho y separador horizontal', 'delimitador derecho y separador horizontal']);
  this.executeCharTest('‚î•', ['box drawings vertical light and left heavy', 'box drawings vertical light and left heavy', 'box drawings vertical light and left heavy']);
  this.executeCharTest('‚î¶', ['box drawings up heavy and left down light', 'box drawings up heavy and left down light', 'box drawings up heavy and left down light']);
  this.executeCharTest('‚îß', ['box drawings down heavy and left up light', 'box drawings down heavy and left up light', 'box drawings down heavy and left up light']);
  this.executeCharTest('‚î®', ['box drawings vertical heavy and left light', 'box drawings vertical heavy and left light', 'box drawings vertical heavy and left light']);
  this.executeCharTest('‚î©', ['box drawings down light and left up heavy', 'box drawings down light and left up heavy', 'box drawings down light and left up heavy']);
  this.executeCharTest('‚î™', ['box drawings up light and left down heavy', 'box drawings up light and left down heavy', 'box drawings up light and left down heavy']);
  this.executeCharTest('‚î´', ['box drawings heavy vertical and left', 'box drawings heavy vertical and left', 'box drawings heavy vertical and left']);
  this.executeCharTest('‚î¨', ['delimitador superior y separador vertical', 'delimitador superior y separador vertical', 'delimitador superior y separador vertical']);
  this.executeCharTest('‚î≠', ['box drawings left heavy and right down light', 'box drawings left heavy and right down light', 'box drawings left heavy and right down light']);
  this.executeCharTest('‚îÆ', ['box drawings right heavy and left down light', 'box drawings right heavy and left down light', 'box drawings right heavy and left down light']);
  this.executeCharTest('‚îØ', ['box drawings down light and horizontal heavy', 'box drawings down light and horizontal heavy', 'box drawings down light and horizontal heavy']);
  this.executeCharTest('‚î∞', ['box drawings down heavy and horizontal light', 'box drawings down heavy and horizontal light', 'box drawings down heavy and horizontal light']);
  this.executeCharTest('‚î±', ['box drawings right light and left down heavy', 'box drawings right light and left down heavy', 'box drawings right light and left down heavy']);
  this.executeCharTest('‚î≤', ['box drawings left light and right down heavy', 'box drawings left light and right down heavy', 'box drawings left light and right down heavy']);
  this.executeCharTest('‚î≥', ['box drawings heavy down and horizontal', 'box drawings heavy down and horizontal', 'box drawings heavy down and horizontal']);
  this.executeCharTest('‚î¥', ['delimitador inferior y separador vertical', 'delimitador inferior y separador vertical', 'delimitador inferior y separador vertical']);
  this.executeCharTest('‚îµ', ['box drawings left heavy and right up light', 'box drawings left heavy and right up light', 'box drawings left heavy and right up light']);
  this.executeCharTest('‚î∂', ['box drawings right heavy and left up light', 'box drawings right heavy and left up light', 'box drawings right heavy and left up light']);
  this.executeCharTest('‚î∑', ['box drawings up light and horizontal heavy', 'box drawings up light and horizontal heavy', 'box drawings up light and horizontal heavy']);
  this.executeCharTest('‚î∏', ['box drawings up heavy and horizontal light', 'box drawings up heavy and horizontal light', 'box drawings up heavy and horizontal light']);
  this.executeCharTest('‚îπ', ['box drawings right light and left up heavy', 'box drawings right light and left up heavy', 'box drawings right light and left up heavy']);
  this.executeCharTest('‚î∫', ['box drawings left light and right up heavy', 'box drawings left light and right up heavy', 'box drawings left light and right up heavy']);
  this.executeCharTest('‚îª', ['box drawings heavy up and horizontal', 'box drawings heavy up and horizontal', 'box drawings heavy up and horizontal']);
  this.executeCharTest('‚îº', ['cruce de separadores sencillos', 'cruce de separadores sencillos', 'cruce de separadores sencillos']);
  this.executeCharTest('‚îΩ', ['box drawings left heavy and right vertical light', 'box drawings left heavy and right vertical light', 'box drawings left heavy and right vertical light']);
  this.executeCharTest('‚îæ', ['box drawings right heavy and left vertical light', 'box drawings right heavy and left vertical light', 'box drawings right heavy and left vertical light']);
  this.executeCharTest('‚îø', ['box drawings vertical light and horizontal heavy', 'box drawings vertical light and horizontal heavy', 'box drawings vertical light and horizontal heavy']);
  this.executeCharTest('‚ïÄ', ['box drawings up heavy and down horizontal light', 'box drawings up heavy and down horizontal light', 'box drawings up heavy and down horizontal light']);
  this.executeCharTest('‚ïÅ', ['box drawings down heavy and up horizontal light', 'box drawings down heavy and up horizontal light', 'box drawings down heavy and up horizontal light']);
  this.executeCharTest('‚ïÇ', ['box drawings vertical heavy and horizontal light', 'box drawings vertical heavy and horizontal light', 'box drawings vertical heavy and horizontal light']);
  this.executeCharTest('‚ïÉ', ['box drawings left up heavy and right down light', 'box drawings left up heavy and right down light', 'box drawings left up heavy and right down light']);
  this.executeCharTest('‚ïÑ', ['box drawings right up heavy and left down light', 'box drawings right up heavy and left down light', 'box drawings right up heavy and left down light']);
  this.executeCharTest('‚ïÖ', ['box drawings left down heavy and right up light', 'box drawings left down heavy and right up light', 'box drawings left down heavy and right up light']);
  this.executeCharTest('‚ïÜ', ['box drawings right down heavy and left up light', 'box drawings right down heavy and left up light', 'box drawings right down heavy and left up light']);
  this.executeCharTest('‚ïá', ['box drawings down light and up horizontal heavy', 'box drawings down light and up horizontal heavy', 'box drawings down light and up horizontal heavy']);
  this.executeCharTest('‚ïà', ['box drawings up light and down horizontal heavy', 'box drawings up light and down horizontal heavy', 'box drawings up light and down horizontal heavy']);
  this.executeCharTest('‚ïâ', ['box drawings right light and left vertical heavy', 'box drawings right light and left vertical heavy', 'box drawings right light and left vertical heavy']);
  this.executeCharTest('‚ïä', ['box drawings left light and right vertical heavy', 'box drawings left light and right vertical heavy', 'box drawings left light and right vertical heavy']);
  this.executeCharTest('‚ïã', ['box drawings heavy vertical and horizontal', 'box drawings heavy vertical and horizontal', 'box drawings heavy vertical and horizontal']);
  this.executeCharTest('‚ïå', ['box drawings light double dash horizontal', 'box drawings light double dash horizontal', 'box drawings light double dash horizontal']);
  this.executeCharTest('‚ïç', ['box drawings heavy double dash horizontal', 'box drawings heavy double dash horizontal', 'box drawings heavy double dash horizontal']);
  this.executeCharTest('‚ïé', ['box drawings light double dash vertical', 'box drawings light double dash vertical', 'box drawings light double dash vertical']);
  this.executeCharTest('‚ïè', ['box drawings heavy double dash vertical', 'box drawings heavy double dash vertical', 'box drawings heavy double dash vertical']);
  this.executeCharTest('‚ïê', ['delimitador horizontal doble', 'delimitador horizontal doble', 'delimitador horizontal doble']);
  this.executeCharTest('‚ïë', ['delimitador vertical doble', 'delimitador vertical doble', 'delimitador vertical doble']);
  this.executeCharTest('‚ïí', ['esquina inferior derecha, vertical doble', 'esquina inferior derecha, vertical doble', 'esquina inferior derecha, vertical doble']);
  this.executeCharTest('‚ïì', ['esquina inferior derecha, horizontal doble', 'esquina inferior derecha, horizontal doble', 'esquina inferior derecha, horizontal doble']);
  this.executeCharTest('‚ïî', ['esquina inferior derecha doble', 'esquina inferior derecha doble', 'esquina inferior derecha doble']);
  this.executeCharTest('‚ïï', ['esquina inferior izquierda, vertical doble', 'esquina inferior izquierda, vertical doble', 'esquina inferior izquierda, vertical doble']);
  this.executeCharTest('‚ïñ', ['esquina inferior izquierda, horizontal doble', 'esquina inferior izquierda, horizontal doble', 'esquina inferior izquierda, horizontal doble']);
  this.executeCharTest('‚ïó', ['esquina inferior izquierda doble', 'esquina inferior izquierda doble', 'esquina inferior izquierda doble']);
  this.executeCharTest('‚ïò', ['esquina superior derecha, vertical doble', 'esquina superior derecha, vertical doble', 'esquina superior derecha, vertical doble']);
  this.executeCharTest('‚ïô', ['esquina superior derecha, horizontal doble', 'esquina superior derecha, horizontal doble', 'esquina superior derecha, horizontal doble']);
  this.executeCharTest('‚ïö', ['esquina superior derecha doble', 'esquina superior derecha doble', 'esquina superior derecha doble']);
  this.executeCharTest('‚ïõ', ['esquina superior izquierda, vertical doble', 'esquina superior izquierda, vertical doble', 'esquina superior izquierda, vertical doble']);
  this.executeCharTest('‚ïú', ['esquina superior izquierda, horizontal doble', 'esquina superior izquierda, horizontal doble', 'esquina superior izquierda, horizontal doble']);
  this.executeCharTest('‚ïù', ['esquina superior izquierda doble', 'esquina superior izquierda doble', 'esquina superior izquierda doble']);
  this.executeCharTest('‚ïû', ['delimitador izquierdo con separador doble', 'delimitador izquierdo con separador doble', 'delimitador izquierdo con separador doble']);
  this.executeCharTest('‚ïü', ['delimitador izquierdo doble con separador horizontal', 'delimitador izquierdo doble con separador horizontal', 'delimitador izquierdo doble con separador horizontal']);
  this.executeCharTest('‚ï†', ['delimitador izquierdo y separador horizontal dobles', 'delimitador izquierdo y separador horizontal dobles', 'delimitador izquierdo y separador horizontal dobles']);
  this.executeCharTest('‚ï°', ['delimitador derecho con separador doble', 'delimitador derecho con separador doble', 'delimitador derecho con separador doble']);
  this.executeCharTest('‚ï¢', ['delimitador derecho doble con separador horizontal', 'delimitador derecho doble con separador horizontal', 'delimitador derecho doble con separador horizontal']);
  this.executeCharTest('‚ï£', ['delimitador derecho y separador horizontal dobles', 'delimitador derecho y separador horizontal dobles', 'delimitador derecho y separador horizontal dobles']);
  this.executeCharTest('‚ï§', ['delimitador superior doble con separador vertical', 'delimitador superior doble con separador vertical', 'delimitador superior doble con separador vertical']);
  this.executeCharTest('‚ï•', ['delimitador superior con separador vertical doble', 'delimitador superior con separador vertical doble', 'delimitador superior con separador vertical doble']);
  this.executeCharTest('‚ï¶', ['delimitador superior y separador vertical dobles', 'delimitador superior y separador vertical dobles', 'delimitador superior y separador vertical dobles']);
  this.executeCharTest('‚ïß', ['delimitador inferior doble con separador vertical', 'delimitador inferior doble con separador vertical', 'delimitador inferior doble con separador vertical']);
  this.executeCharTest('‚ï®', ['delimitador inferior con separador vertical doble', 'delimitador inferior con separador vertical doble', 'delimitador inferior con separador vertical doble']);
  this.executeCharTest('‚ï©', ['delimitador inferior y separador vertical dobles', 'delimitador inferior y separador vertical dobles', 'delimitador inferior y separador vertical dobles']);
  this.executeCharTest('‚ï™', ['cruce de separadores, vertical sencillo y horizontal doble', 'cruce de separadores, vertical sencillo y horizontal doble', 'cruce de separadores, vertical sencillo y horizontal doble']);
  this.executeCharTest('‚ï´', ['cruce de separadores, vertical doble y horizontal sencillo', 'cruce de separadores, vertical doble y horizontal sencillo', 'cruce de separadores, vertical doble y horizontal sencillo']);
  this.executeCharTest('‚ï¨', ['cruce de separadores dobles', 'cruce de separadores dobles', 'cruce de separadores dobles']);
  this.executeCharTest('‚ï≠', ['box drawings light arc down and right', 'box drawings light arc down and right', 'box drawings light arc down and right']);
  this.executeCharTest('‚ïÆ', ['box drawings light arc down and left', 'box drawings light arc down and left', 'box drawings light arc down and left']);
  this.executeCharTest('‚ïØ', ['box drawings light arc up and left', 'box drawings light arc up and left', 'box drawings light arc up and left']);
  this.executeCharTest('‚ï∞', ['box drawings light arc up and right', 'box drawings light arc up and right', 'box drawings light arc up and right']);
  this.executeCharTest('‚ï±', ['box drawings light diagonal upper right to lower left', 'box drawings light diagonal upper right to lower left', 'box drawings light diagonal upper right to lower left']);
  this.executeCharTest('‚ï≤', ['box drawings light diagonal upper left to lower right', 'box drawings light diagonal upper left to lower right', 'box drawings light diagonal upper left to lower right']);
  this.executeCharTest('‚ï≥', ['box drawings light diagonal cross', 'box drawings light diagonal cross', 'box drawings light diagonal cross']);
  this.executeCharTest('‚ï¥', ['box drawings light left', 'box drawings light left', 'box drawings light left']);
  this.executeCharTest('‚ïµ', ['box drawings light up', 'box drawings light up', 'box drawings light up']);
  this.executeCharTest('‚ï∂', ['box drawings light right', 'box drawings light right', 'box drawings light right']);
  this.executeCharTest('‚ï∑', ['box drawings light down', 'box drawings light down', 'box drawings light down']);
  this.executeCharTest('‚ï∏', ['box drawings heavy left', 'box drawings heavy left', 'box drawings heavy left']);
  this.executeCharTest('‚ïπ', ['box drawings heavy up', 'box drawings heavy up', 'box drawings heavy up']);
  this.executeCharTest('‚ï∫', ['box drawings heavy right', 'box drawings heavy right', 'box drawings heavy right']);
  this.executeCharTest('‚ïª', ['box drawings heavy down', 'box drawings heavy down', 'box drawings heavy down']);
  this.executeCharTest('‚ïº', ['box drawings light left and heavy right', 'box drawings light left and heavy right', 'box drawings light left and heavy right']);
  this.executeCharTest('‚ïΩ', ['box drawings light up and heavy down', 'box drawings light up and heavy down', 'box drawings light up and heavy down']);
  this.executeCharTest('‚ïæ', ['box drawings heavy left and light right', 'box drawings heavy left and light right', 'box drawings heavy left and light right']);
  this.executeCharTest('‚ïø', ['box drawings heavy up and light down', 'box drawings heavy up and light down', 'box drawings heavy up and light down']);
  this.executeCharTest('‚ñÄ', ['bloque mitad superior', 'bloque mitad superior', 'bloque mitad superior']);
  this.executeCharTest('‚ñÅ', ['lower one eighth block', 'lower one eighth block', 'lower one eighth block']);
  this.executeCharTest('‚ñÇ', ['lower one quarter block', 'lower one quarter block', 'lower one quarter block']);
  this.executeCharTest('‚ñÉ', ['lower three eighths block', 'lower three eighths block', 'lower three eighths block']);
  this.executeCharTest('‚ñÑ', ['bloque mitad inferior', 'bloque mitad inferior', 'bloque mitad inferior']);
  this.executeCharTest('‚ñÖ', ['lower five eighths block', 'lower five eighths block', 'lower five eighths block']);
  this.executeCharTest('‚ñÜ', ['lower three quarters block', 'lower three quarters block', 'lower three quarters block']);
  this.executeCharTest('‚ñá', ['lower seven eighths block', 'lower seven eighths block', 'lower seven eighths block']);
  this.executeCharTest('‚ñà', ['bloque', 'bloque', 'bloque']);
  this.executeCharTest('‚ñâ', ['left seven eighths block', 'left seven eighths block', 'left seven eighths block']);
  this.executeCharTest('‚ñä', ['left three quarters block', 'left three quarters block', 'left three quarters block']);
  this.executeCharTest('‚ñã', ['left five eighths block', 'left five eighths block', 'left five eighths block']);
  this.executeCharTest('‚ñå', ['left half block', 'left half block', 'left half block']);
  this.executeCharTest('‚ñç', ['left three eighths block', 'left three eighths block', 'left three eighths block']);
  this.executeCharTest('‚ñé', ['left one quarter block', 'left one quarter block', 'left one quarter block']);
  this.executeCharTest('‚ñè', ['left one eighth block', 'left one eighth block', 'left one eighth block']);
  this.executeCharTest('‚ñê', ['right half block', 'right half block', 'right half block']);
  this.executeCharTest('‚ñë', ['sombra ligera', 'sombra ligera', 'sombra ligera']);
  this.executeCharTest('‚ñí', ['sombra media', 'sombra media', 'sombra media']);
  this.executeCharTest('‚ñì', ['sombra intensa', 'sombra intensa', 'sombra intensa']);
  this.executeCharTest('‚ñî', ['upper one eighth block', 'upper one eighth block', 'upper one eighth block']);
  this.executeCharTest('‚ñï', ['right one eighth block', 'right one eighth block', 'right one eighth block']);
  this.executeCharTest('‚ññ', ['quadrant lower left', 'quadrant lower left', 'quadrant lower left']);
  this.executeCharTest('‚ñó', ['quadrant lower right', 'quadrant lower right', 'quadrant lower right']);
  this.executeCharTest('‚ñò', ['quadrant upper left', 'quadrant upper left', 'quadrant upper left']);
  this.executeCharTest('‚ñô', ['quadrant upper left and lower left and lower right', 'quadrant upper left and lower left and lower right', 'quadrant upper left and lower left and lower right']);
  this.executeCharTest('‚ñö', ['quadrant upper left and lower right', 'quadrant upper left and lower right', 'quadrant upper left and lower right']);
  this.executeCharTest('‚ñõ', ['quadrant upper left and upper right and lower left', 'quadrant upper left and upper right and lower left', 'quadrant upper left and upper right and lower left']);
  this.executeCharTest('‚ñú', ['quadrant upper left and upper right and lower right', 'quadrant upper left and upper right and lower right', 'quadrant upper left and upper right and lower right']);
  this.executeCharTest('‚ñù', ['quadrant upper right', 'quadrant upper right', 'quadrant upper right']);
  this.executeCharTest('‚ñû', ['quadrant upper right and lower left', 'quadrant upper right and lower left', 'quadrant upper right and lower left']);
  this.executeCharTest('‚ñü', ['quadrant upper right and lower left and lower right', 'quadrant upper right and lower left and lower right', 'quadrant upper right and lower left and lower right']);
  this.executeCharTest('‚ñ†', ['cuadrado relleno', 'cuadrado relleno', 'cuadrado relleno']);
  this.executeCharTest('‚ñ°', ['cuadrado', 'cuadrado', 'cuadrado']);
  this.executeCharTest('‚ñ¢', ['white square with rounded corners', 'white square with rounded corners', 'white square with rounded corners']);
  this.executeCharTest('‚ñ£', ['white square containing black small square', 'white square containing black small square', 'white square containing black small square']);
  this.executeCharTest('‚ñ§', ['square with horizontal fill', 'square with horizontal fill', 'square with horizontal fill']);
  this.executeCharTest('‚ñ•', ['square with vertical fill', 'square with vertical fill', 'square with vertical fill']);
  this.executeCharTest('‚ñ¶', ['square with orthogonal crosshatch fill', 'square with orthogonal crosshatch fill', 'square with orthogonal crosshatch fill']);
  this.executeCharTest('‚ñß', ['square with upper left to lower right fill', 'square with upper left to lower right fill', 'square with upper left to lower right fill']);
  this.executeCharTest('‚ñ®', ['square with upper right to lower left fill', 'square with upper right to lower left fill', 'square with upper right to lower left fill']);
  this.executeCharTest('‚ñ©', ['square with diagonal crosshatch fill', 'square with diagonal crosshatch fill', 'square with diagonal crosshatch fill']);
  this.executeCharTest('‚ñ™', ['cuadrado relleno', 'cuadrado relleno', 'cuadrado relleno']);
  this.executeCharTest('‚ñ´', ['cuadrado', 'cuadrado', 'cuadrado']);
  this.executeCharTest('‚ñ¨', ['black rectangle', 'black rectangle', 'black rectangle']);
  this.executeCharTest('‚ñ≠', ['rect√°ngulo', 'rect√°ngulo', 'rect√°ngulo']);
  this.executeCharTest('‚ñÆ', ['rect√°ngulo relleno vertical', 'rect√°ngulo relleno vertical', 'rect√°ngulo relleno vertical']);
  this.executeCharTest('‚ñØ', ['rect√°ngulo vertical', 'rect√°ngulo vertical', 'rect√°ngulo vertical']);
  this.executeCharTest('‚ñ∞', ['black parallelogram', 'black parallelogram', 'black parallelogram']);
  this.executeCharTest('‚ñ±', ['paralelogramo', 'paralelogramo', 'paralelogramo']);
  this.executeCharTest('‚ñ≤', ['tri√°ngulo relleno', 'tri√°ngulo relleno', 'tri√°ngulo relleno']);
  this.executeCharTest('‚ñ≥', ['tri√°ngulo', 'tri√°ngulo', 'tri√°ngulo']);
  this.executeCharTest('‚ñ¥', ['tri√°ngulo relleno', 'tri√°ngulo relleno', 'tri√°ngulo relleno']);
  this.executeCharTest('‚ñµ', ['tri√°ngulo', 'tri√°ngulo', 'tri√°ngulo']);
  this.executeCharTest('‚ñ∂', ['tri√°ngulo relleno se√±ala derecha', 'tri√°ngulo relleno se√±ala derecha', 'tri√°ngulo relleno se√±ala derecha']);
  this.executeCharTest('‚ñ∑', ['tri√°ngulo se√±ala derecha', 'tri√°ngulo se√±ala derecha', 'tri√°ngulo se√±ala derecha']);
  this.executeCharTest('‚ñ∏', ['tri√°ngulo relleno se√±ala derecha', 'tri√°ngulo relleno se√±ala derecha', 'tri√°ngulo relleno se√±ala derecha']);
  this.executeCharTest('‚ñπ', ['tri√°ngulo se√±ala derecha', 'tri√°ngulo se√±ala derecha', 'tri√°ngulo se√±ala derecha']);
  this.executeCharTest('‚ñ∫', ['black right pointing pointer', 'black right pointing pointer', 'black right pointing pointer']);
  this.executeCharTest('‚ñª', ['white right pointing pointer', 'white right pointing pointer', 'white right pointing pointer']);
  this.executeCharTest('‚ñº', ['tri√°ngulo relleno se√±ala abajo', 'tri√°ngulo relleno se√±ala abajo', 'tri√°ngulo relleno se√±ala abajo']);
  this.executeCharTest('‚ñΩ', ['tri√°ngulo se√±ala abajo', 'tri√°ngulo se√±ala abajo', 'tri√°ngulo se√±ala abajo']);
  this.executeCharTest('‚ñæ', ['tri√°ngulo relleno se√±ala abajo', 'tri√°ngulo relleno se√±ala abajo', 'tri√°ngulo relleno se√±ala abajo']);
  this.executeCharTest('‚ñø', ['tri√°ngulo se√±ala abajo', 'tri√°ngulo se√±ala abajo', 'tri√°ngulo se√±ala abajo']);
  this.executeCharTest('‚óÄ', ['tri√°ngulo relleno se√±ala izquierda', 'tri√°ngulo relleno se√±ala izquierda', 'tri√°ngulo relleno se√±ala izquierda']);
  this.executeCharTest('‚óÅ', ['tri√°ngulo se√±ala izquierda', 'tri√°ngulo se√±ala izquierda', 'tri√°ngulo se√±ala izquierda']);
  this.executeCharTest('‚óÇ', ['tri√°ngulo relleno se√±ala izquierda', 'tri√°ngulo relleno se√±ala izquierda', 'tri√°ngulo relleno se√±ala izquierda']);
  this.executeCharTest('‚óÉ', ['tri√°ngulo se√±ala izquierda', 'tri√°ngulo se√±ala izquierda', 'tri√°ngulo se√±ala izquierda']);
  this.executeCharTest('‚óÑ', ['puntero relleno se√±ala izquierda', 'puntero relleno se√±ala izquierda', 'puntero relleno se√±ala izquierda']);
  this.executeCharTest('‚óÖ', ['puntero se√±ala izquierda', 'puntero se√±ala izquierda', 'puntero se√±ala izquierda']);
  this.executeCharTest('‚óÜ', ['diamante relleno', 'diamante relleno', 'diamante relleno']);
  this.executeCharTest('‚óá', ['diamante', 'diamante', 'diamante']);
  this.executeCharTest('‚óà', ['diamante vac√≠o contiene diamante relleno', 'diamante vac√≠o contiene diamante relleno', 'diamante vac√≠o contiene diamante relleno']);
  this.executeCharTest('‚óâ', ['ojo de pez', 'ojo de pez', 'ojo de pez']);
  this.executeCharTest('‚óä', ['rombo', 'rombo', 'rombo']);
  this.executeCharTest('‚óã', ['c√≠rculo vac√≠o', 'c√≠rculo vac√≠o', 'c√≠rculo vac√≠o']);
  this.executeCharTest('‚óå', ['c√≠rculo punteado', 'c√≠rculo punteado', 'c√≠rculo punteado']);
  this.executeCharTest('‚óç', ['c√≠rculo con relleno vertical', 'c√≠rculo con relleno vertical', 'c√≠rculo con relleno vertical']);
  this.executeCharTest('‚óé', ['blanco', 'blanco', 'blanco']);
  this.executeCharTest('‚óè', ['c√≠rculo relleno', 'c√≠rculo relleno', 'c√≠rculo relleno']);
  this.executeCharTest('‚óê', ['c√≠rculo con mitad izquierda rellena', 'c√≠rculo con mitad izquierda rellena', 'c√≠rculo con mitad izquierda rellena']);
  this.executeCharTest('‚óë', ['c√≠rculo con mitad derecha rellena', 'c√≠rculo con mitad derecha rellena', 'c√≠rculo con mitad derecha rellena']);
  this.executeCharTest('‚óí', ['c√≠rculo con mitad inferior rellena', 'c√≠rculo con mitad inferior rellena', 'c√≠rculo con mitad inferior rellena']);
  this.executeCharTest('‚óì', ['c√≠rculo con mitad superior rellena', 'c√≠rculo con mitad superior rellena', 'c√≠rculo con mitad superior rellena']);
  this.executeCharTest('‚óî', ['c√≠rculo con cuadrante superior derecho relleno', 'c√≠rculo con cuadrante superior derecho relleno', 'c√≠rculo con cuadrante superior derecho relleno']);
  this.executeCharTest('‚óï', ['c√≠rculo con cuadrante superior izquierdo relleno', 'c√≠rculo con cuadrante superior izquierdo relleno', 'c√≠rculo con cuadrante superior izquierdo relleno']);
  this.executeCharTest('‚óñ', ['semic√≠rculo izquierdo relleno', 'semic√≠rculo izquierdo relleno', 'semic√≠rculo izquierdo relleno']);
  this.executeCharTest('‚óó', ['semic√≠rculo derecho relleno', 'semic√≠rculo derecho relleno', 'semic√≠rculo derecho relleno']);
  this.executeCharTest('‚óò', ['bullet inversa', 'bullet inversa', 'bullet inversa']);
  this.executeCharTest('‚óô', ['c√≠rculo vac√≠o inverso', 'c√≠rculo vac√≠o inverso', 'c√≠rculo vac√≠o inverso']);
  this.executeCharTest('‚óö', ['semic√≠rculo superior vac√≠o inverso', 'semic√≠rculo superior vac√≠o inverso', 'semic√≠rculo superior vac√≠o inverso']);
  this.executeCharTest('‚óõ', ['semic√≠rculo superior vac√≠o inverso', 'semic√≠rculo superior vac√≠o inverso', 'semic√≠rculo superior vac√≠o inverso']);
  this.executeCharTest('‚óú', ['arco superior izquierda', 'arco superior izquierda', 'arco superior izquierda']);
  this.executeCharTest('‚óù', ['arco superior derecha', 'arco superior derecha', 'arco superior derecha']);
  this.executeCharTest('‚óû', ['arco inferior derecha', 'arco inferior derecha', 'arco inferior derecha']);
  this.executeCharTest('‚óü', ['arco inferior izquierda', 'arco inferior izquierda', 'arco inferior izquierda']);
  this.executeCharTest('‚ó†', ['semic√≠rculo superior', 'semic√≠rculo superior', 'semic√≠rculo superior']);
  this.executeCharTest('‚ó°', ['semic√≠rculo inferior', 'semic√≠rculo inferior', 'semic√≠rculo inferior']);
  this.executeCharTest('‚ó¢', ['tri√°ngulo inferior derecha relleno', 'tri√°ngulo inferior derecha relleno', 'tri√°ngulo inferior derecha relleno']);
  this.executeCharTest('‚ó£', ['tri√°ngulo inferior izquierda relleno', 'tri√°ngulo inferior izquierda relleno', 'tri√°ngulo inferior izquierda relleno']);
  this.executeCharTest('‚ó§', ['tri√°ngulo superior izquierda relleno', 'tri√°ngulo superior izquierda relleno', 'tri√°ngulo superior izquierda relleno']);
  this.executeCharTest('‚ó•', ['tri√°ngulo superior derecha relleno', 'tri√°ngulo superior derecha relleno', 'tri√°ngulo superior derecha relleno']);
  this.executeCharTest('‚ó¶', ['composici√≥n', 'composici√≥n', 'composici√≥n']);
  this.executeCharTest('‚óß', ['cuadrado con mitad izquierda rellena', 'cuadrado con mitad izquierda rellena', 'cuadrado con mitad izquierda rellena']);
  this.executeCharTest('‚ó®', ['cuadrado con mitad derecha rellena', 'cuadrado con mitad derecha rellena', 'cuadrado con mitad derecha rellena']);
  this.executeCharTest('‚ó©', ['cuadrado con mitad superior izquierda rellena', 'cuadrado con mitad superior izquierda rellena', 'cuadrado con mitad superior izquierda rellena']);
  this.executeCharTest('‚ó™', ['cuadrado con mitad inferior derecha rellena', 'cuadrado con mitad inferior derecha rellena', 'cuadrado con mitad inferior derecha rellena']);
  this.executeCharTest('‚ó´', ['cuadrado con bisectriz', 'cuadrado con bisectriz', 'cuadrado con bisectriz']);
  this.executeCharTest('‚ó¨', ['tri√°ngulo vac√≠o con punto', 'tri√°ngulo vac√≠o con punto', 'tri√°ngulo vac√≠o con punto']);
  this.executeCharTest('‚ó≠', ['tri√°ngulo apuntando arriba con mitad izquierda rellena', 'tri√°ngulo apuntando arriba con mitad izquierda rellena', 'tri√°ngulo apuntando arriba con mitad izquierda rellena']);
  this.executeCharTest('‚óÆ', ['tri√°ngulo apuntando arriba con mitad derecha rellena', 'tri√°ngulo apuntando arriba con mitad derecha rellena', 'tri√°ngulo apuntando arriba con mitad derecha rellena']);
  this.executeCharTest('‚óØ', ['c√≠rculo grande', 'c√≠rculo grande', 'c√≠rculo grande']);
  this.executeCharTest('‚ó∞', ['white square with upper left quadrant', 'white square with upper left quadrant', 'white square with upper left quadrant']);
  this.executeCharTest('‚ó±', ['white square with lower left quadrant', 'white square with lower left quadrant', 'white square with lower left quadrant']);
  this.executeCharTest('‚ó≤', ['white square with lower right quadrant', 'white square with lower right quadrant', 'white square with lower right quadrant']);
  this.executeCharTest('‚ó≥', ['white square with upper right quadrant', 'white square with upper right quadrant', 'white square with upper right quadrant']);
  this.executeCharTest('‚ó¥', ['white circle with upper left quadrant', 'white circle with upper left quadrant', 'white circle with upper left quadrant']);
  this.executeCharTest('‚óµ', ['white circle with lower left quadrant', 'white circle with lower left quadrant', 'white circle with lower left quadrant']);
  this.executeCharTest('‚ó∂', ['white circle with lower right quadrant', 'white circle with lower right quadrant', 'white circle with lower right quadrant']);
  this.executeCharTest('‚ó∑', ['white circle with upper right quadrant', 'white circle with upper right quadrant', 'white circle with upper right quadrant']);
  this.executeCharTest('‚ó∏', ['tri√°ngulo superior izquierda', 'tri√°ngulo superior izquierda', 'tri√°ngulo superior izquierda']);
  this.executeCharTest('‚óπ', ['tri√°ngulo superior derecha', 'tri√°ngulo superior derecha', 'tri√°ngulo superior derecha']);
  this.executeCharTest('‚ó∫', ['tri√°ngulo inferior izquierda', 'tri√°ngulo inferior izquierda', 'tri√°ngulo inferior izquierda']);
  this.executeCharTest('‚óª', ['cuadrado mediano vac√≠o', 'cuadrado mediano vac√≠o', 'cuadrado mediano vac√≠o']);
  this.executeCharTest('‚óº', ['cuadrado mediano relleno', 'cuadrado mediano relleno', 'cuadrado mediano relleno']);
  this.executeCharTest('‚óΩ', ['cuadrado mediano vac√≠o', 'cuadrado mediano vac√≠o', 'cuadrado mediano vac√≠o']);
  this.executeCharTest('‚óæ', ['cuadrado mediano relleno', 'cuadrado mediano relleno', 'cuadrado mediano relleno']);
  this.executeCharTest('‚óø', ['tri√°ngulo inferior derecha', 'tri√°ngulo inferior derecha', 'tri√°ngulo inferior derecha']);
  this.executeCharTest('‚¨í', ['square with top half black', 'square with top half black', 'square with top half black']);
  this.executeCharTest('‚¨ì', ['square with bottom half black', 'square with bottom half black', 'square with bottom half black']);
  this.executeCharTest('‚¨î', ['square with upper right diagonal half black', 'square with upper right diagonal half black', 'square with upper right diagonal half black']);
  this.executeCharTest('‚¨ï', ['square with lower left diagonal half black', 'square with lower left diagonal half black', 'square with lower left diagonal half black']);
  this.executeCharTest('‚¨ñ', ['diamond with left half black', 'diamond with left half black', 'diamond with left half black']);
  this.executeCharTest('‚¨ó', ['diamond with right half black', 'diamond with right half black', 'diamond with right half black']);
  this.executeCharTest('‚¨ò', ['diamond with top half black', 'diamond with top half black', 'diamond with top half black']);
  this.executeCharTest('‚¨ô', ['diamond with bottom half black', 'diamond with bottom half black', 'diamond with bottom half black']);
  this.executeCharTest('‚¨ö', ['dotted square', 'dotted square', 'dotted square']);
  this.executeCharTest('‚¨õ', ['black large square', 'black large square', 'black large square']);
  this.executeCharTest('‚¨ú', ['white large square', 'white large square', 'white large square']);
  this.executeCharTest('‚¨ù', ['black very small square', 'black very small square', 'black very small square']);
  this.executeCharTest('‚¨û', ['white very small square', 'white very small square', 'white very small square']);
  this.executeCharTest('‚¨ü', ['black pentagon', 'black pentagon', 'black pentagon']);
  this.executeCharTest('‚¨†', ['white pentagon', 'white pentagon', 'white pentagon']);
  this.executeCharTest('‚¨°', ['white hexagon', 'white hexagon', 'white hexagon']);
  this.executeCharTest('‚¨¢', ['black hexagon', 'black hexagon', 'black hexagon']);
  this.executeCharTest('‚¨£', ['horizontal black hexagon', 'horizontal black hexagon', 'horizontal black hexagon']);
  this.executeCharTest('‚¨§', ['black large circle', 'black large circle', 'black large circle']);
  this.executeCharTest('‚¨•', ['black medium diamond', 'black medium diamond', 'black medium diamond']);
  this.executeCharTest('‚¨¶', ['white medium diamond', 'white medium diamond', 'white medium diamond']);
  this.executeCharTest('‚¨ß', ['black medium lozenge', 'black medium lozenge', 'black medium lozenge']);
  this.executeCharTest('‚¨®', ['white medium lozenge', 'white medium lozenge', 'white medium lozenge']);
  this.executeCharTest('‚¨©', ['black small diamond', 'black small diamond', 'black small diamond']);
  this.executeCharTest('‚¨™', ['black small lozenge', 'black small lozenge', 'black small lozenge']);
  this.executeCharTest('‚¨´', ['white small lozenge', 'white small lozenge', 'white small lozenge']);
  this.executeCharTest('‚¨¨', ['black horizontal ellipse', 'black horizontal ellipse', 'black horizontal ellipse']);
  this.executeCharTest('‚¨≠', ['white horizontal ellipse', 'white horizontal ellipse', 'white horizontal ellipse']);
  this.executeCharTest('‚¨Æ', ['black vertical ellipse', 'black vertical ellipse', 'black vertical ellipse']);
  this.executeCharTest('‚¨Ø', ['white vertical ellipse', 'white vertical ellipse', 'white vertical ellipse']);
  this.executeCharTest('‚≠ê', ['estrella media vac√≠a', 'estrella media vac√≠a', 'estrella media vac√≠a']);
  this.executeCharTest('‚≠ë', ['estrella peque√±a rellena', 'estrella peque√±a rellena', 'estrella peque√±a rellena']);
  this.executeCharTest('‚≠í', ['estrella peque√±a vac√≠a', 'estrella peque√±a vac√≠a', 'estrella peque√±a vac√≠a']);
  this.executeCharTest('‚≠ì', ['black right pointing pentagon', 'black right pointing pentagon', 'black right pointing pentagon']);
  this.executeCharTest('‚≠î', ['white right pointing pentagon', 'white right pointing pentagon', 'white right pointing pentagon']);
  this.executeCharTest('‚≠ï', ['heavy large circle', 'heavy large circle', 'heavy large circle']);
  this.executeCharTest('‚≠ñ', ['heavy oval with oval inside', 'heavy oval with oval inside', 'heavy oval with oval inside']);
  this.executeCharTest('‚≠ó', ['heavy circle with circle inside', 'heavy circle with circle inside', 'heavy circle with circle inside']);
  this.executeCharTest('‚≠ò', ['heavy circle', 'heavy circle', 'heavy circle']);
  this.executeCharTest('‚≠ô', ['heavy circled saltire', 'heavy circled saltire', 'heavy circled saltire']);
  this.executeCharTest('‚Üº', ['flecha izquierda con arp√≥n arriba', 'flecha izquierda con arp√≥n arriba', 'flecha izquierda con arp√≥n arriba']);
  this.executeCharTest('‚ÜΩ', ['flecha izquierda con arp√≥n debajo', 'flecha izquierda con arp√≥n debajo', 'flecha izquierda con arp√≥n debajo']);
  this.executeCharTest('‚Üæ', ['flecha arriba con arp√≥n derecho', 'flecha arriba con arp√≥n derecho', 'flecha arriba con arp√≥n derecho']);
  this.executeCharTest('‚Üø', ['flecha arriba con arp√≥n izquierdo', 'flecha arriba con arp√≥n izquierdo', 'flecha arriba con arp√≥n izquierdo']);
  this.executeCharTest('‚áÄ', ['flecha derecha con arp√≥n arriba', 'flecha derecha con arp√≥n arriba', 'flecha derecha con arp√≥n arriba']);
  this.executeCharTest('‚áÅ', ['flecha derecha con arp√≥n debajo', 'flecha derecha con arp√≥n debajo', 'flecha derecha con arp√≥n debajo']);
  this.executeCharTest('‚áÇ', ['flecha abajo con arp√≥n derecho', 'flecha abajo con arp√≥n derecho', 'flecha abajo con arp√≥n derecho']);
  this.executeCharTest('‚áÉ', ['flecha abajo con arp√≥n izquierdo', 'flecha abajo con arp√≥n izquierdo', 'flecha abajo con arp√≥n izquierdo']);
  this.executeCharTest('‚áã', ['arp√≥n izquierdo arriba de arp√≥n derecho', 'arp√≥n izquierdo arriba de arp√≥n derecho', 'arp√≥n izquierdo arriba de arp√≥n derecho']);
  this.executeCharTest('‚áå', ['arp√≥n derecho arriba de arp√≥n izquierdo', 'arp√≥n derecho arriba de arp√≥n izquierdo', 'arp√≥n derecho arriba de arp√≥n izquierdo']);
  this.executeCharTest('‚•ä', ['left barb up right barb down harpoon', 'left barb up right barb down harpoon', 'left barb up right barb down harpoon']);
  this.executeCharTest('‚•ã', ['left barb down right barb up harpoon', 'left barb down right barb up harpoon', 'left barb down right barb up harpoon']);
  this.executeCharTest('‚•å', ['up barb right down barb left harpoon', 'up barb right down barb left harpoon', 'up barb right down barb left harpoon']);
  this.executeCharTest('‚•ç', ['up barb left down barb right harpoon', 'up barb left down barb right harpoon', 'up barb left down barb right harpoon']);
  this.executeCharTest('‚•é', ['left barb up right barb up harpoon', 'left barb up right barb up harpoon', 'left barb up right barb up harpoon']);
  this.executeCharTest('‚•è', ['arp√≥n a la derecha hacia arriba y abajo', 'arp√≥n a la derecha hacia arriba y abajo', 'arp√≥n a la derecha hacia arriba y abajo']);
  this.executeCharTest('‚•ê', ['left barb down right barb down harpoon', 'left barb down right barb down harpoon', 'left barb down right barb down harpoon']);
  this.executeCharTest('‚•ë', ['arp√≥n a la izquierda hacia arriba y abajo', 'arp√≥n a la izquierda hacia arriba y abajo', 'arp√≥n a la izquierda hacia arriba y abajo']);
  this.executeCharTest('‚•í', ['leftwards harpoon to bar with barb upwards', 'leftwards harpoon to bar with barb upwards', 'leftwards harpoon to bar with barb upwards']);
  this.executeCharTest('‚•ì', ['rightwards harpoon to bar with barb upwards', 'rightwards harpoon to bar with barb upwards', 'rightwards harpoon to bar with barb upwards']);
  this.executeCharTest('‚•î', ['upwards harpoon to bar with barb rightwards', 'upwards harpoon to bar with barb rightwards', 'upwards harpoon to bar with barb rightwards']);
  this.executeCharTest('‚•ï', ['downwards harpoon to bar with barb rightwards', 'downwards harpoon to bar with barb rightwards', 'downwards harpoon to bar with barb rightwards']);
  this.executeCharTest('‚•ñ', ['leftwards harpoon to bar with barb downwards', 'leftwards harpoon to bar with barb downwards', 'leftwards harpoon to bar with barb downwards']);
  this.executeCharTest('‚•ó', ['rightwards harpoon to bar with barb downwards', 'rightwards harpoon to bar with barb downwards', 'rightwards harpoon to bar with barb downwards']);
  this.executeCharTest('‚•ò', ['upwards harpoon to bar with barb leftwards', 'upwards harpoon to bar with barb leftwards', 'upwards harpoon to bar with barb leftwards']);
  this.executeCharTest('‚•ô', ['downwards harpoon to bar with barb leftwards', 'downwards harpoon to bar with barb leftwards', 'downwards harpoon to bar with barb leftwards']);
  this.executeCharTest('‚•ö', ['leftwards harpoon from bar with barb upwards', 'leftwards harpoon from bar with barb upwards', 'leftwards harpoon from bar with barb upwards']);
  this.executeCharTest('‚•õ', ['rightwards harpoon from bar with barb upwards', 'rightwards harpoon from bar with barb upwards', 'rightwards harpoon from bar with barb upwards']);
  this.executeCharTest('‚•ú', ['upwards harpoon from bar with barb rightwards', 'upwards harpoon from bar with barb rightwards', 'upwards harpoon from bar with barb rightwards']);
  this.executeCharTest('‚•ù', ['downwards harpoon from bar with barb rightwards', 'downwards harpoon from bar with barb rightwards', 'downwards harpoon from bar with barb rightwards']);
  this.executeCharTest('‚•û', ['leftwards harpoon from bar with barb downwards', 'leftwards harpoon from bar with barb downwards', 'leftwards harpoon from bar with barb downwards']);
  this.executeCharTest('‚•ü', ['rightwards harpoon from bar with barb downwards', 'rightwards harpoon from bar with barb downwards', 'rightwards harpoon from bar with barb downwards']);
  this.executeCharTest('‚•†', ['upwards harpoon from bar with barb leftwards', 'upwards harpoon from bar with barb leftwards', 'upwards harpoon from bar with barb leftwards']);
  this.executeCharTest('‚•°', ['downwards harpoon from bar with barb leftwards', 'downwards harpoon from bar with barb leftwards', 'downwards harpoon from bar with barb leftwards']);
  this.executeCharTest('‚•¢', ['leftwards harpoon with barb up above leftwards harpoon with barb down', 'leftwards harpoon with barb up above leftwards harpoon with barb down', 'leftwards harpoon with barb up above leftwards harpoon with barb down']);
  this.executeCharTest('‚•£', ['upwards harpoon with barb left beside upwards harpoon with barb right', 'upwards harpoon with barb left beside upwards harpoon with barb right', 'upwards harpoon with barb left beside upwards harpoon with barb right']);
  this.executeCharTest('‚•§', ['rightwards harpoon with barb up above rightwards harpoon with barb down', 'rightwards harpoon with barb up above rightwards harpoon with barb down', 'rightwards harpoon with barb up above rightwards harpoon with barb down']);
  this.executeCharTest('‚••', ['downwards harpoon with barb left beside downwards harpoon with barb right', 'downwards harpoon with barb left beside downwards harpoon with barb right', 'downwards harpoon with barb left beside downwards harpoon with barb right']);
  this.executeCharTest('‚•¶', ['leftwards harpoon with barb up above rightwards harpoon with barb up', 'leftwards harpoon with barb up above rightwards harpoon with barb up', 'leftwards harpoon with barb up above rightwards harpoon with barb up']);
  this.executeCharTest('‚•ß', ['leftwards harpoon with barb down above rightwards harpoon with barb down', 'leftwards harpoon with barb down above rightwards harpoon with barb down', 'leftwards harpoon with barb down above rightwards harpoon with barb down']);
  this.executeCharTest('‚•®', ['rightwards harpoon with barb up above leftwards harpoon with barb up', 'rightwards harpoon with barb up above leftwards harpoon with barb up', 'rightwards harpoon with barb up above leftwards harpoon with barb up']);
  this.executeCharTest('‚•©', ['rightwards harpoon with barb down above leftwards harpoon with barb down', 'rightwards harpoon with barb down above leftwards harpoon with barb down', 'rightwards harpoon with barb down above leftwards harpoon with barb down']);
  this.executeCharTest('‚•™', ['barra con arp√≥n hacia la izquierda', 'barra con arp√≥n hacia la izquierda', 'barra con arp√≥n hacia la izquierda']);
  this.executeCharTest('‚•´', ['arp√≥n hacia la izquierda con barra', 'arp√≥n hacia la izquierda con barra', 'arp√≥n hacia la izquierda con barra']);
  this.executeCharTest('‚•¨', ['barra con arp√≥n hacia la derecha', 'barra con arp√≥n hacia la derecha', 'barra con arp√≥n hacia la derecha']);
  this.executeCharTest('‚•≠', ['arp√≥n hacia la derecha con barra', 'arp√≥n hacia la derecha con barra', 'arp√≥n hacia la derecha con barra']);
  this.executeCharTest('‚•Æ', ['upwards harpoon to the left of downwards harpoon', 'upwards harpoon to the left of downwards harpoon', 'upwards harpoon to the left of downwards harpoon']);
  this.executeCharTest('‚•Ø', ['upwards harpoon to the right of downwards harpoon', 'upwards harpoon to the right of downwards harpoon', 'upwards harpoon to the right of downwards harpoon']);
  this.executeCharTest('‚•º', ['left fish tail', 'left fish tail', 'left fish tail']);
  this.executeCharTest('‚•Ω', ['right fish tail', 'right fish tail', 'right fish tail']);
  this.executeCharTest('‚•æ', ['barra con doble gancho', 'barra con doble gancho', 'barra con doble gancho']);
  this.executeCharTest('‚•ø', ['down fish tail', 'down fish tail', 'down fish tail']);
  this.executeCharTest('‚Ñè', ['h barra', 'h barra', 'h barra']);
  this.executeCharTest('‚Ñî', ['l b bar', 'l b bar', 'l b bar']);
  this.executeCharTest('‚Ññ', ['signo de n√∫mero', 'signo de n√∫mero', 'signo de n√∫mero']);
  this.executeCharTest('‚Ñó', ['derechos de autor de sonido', 'derechos de autor de sonido', 'derechos de autor de sonido']);
  this.executeCharTest('‚Ñû', ['receta', 'receta', 'receta']);
  this.executeCharTest('‚Ñü', ['response', 'response', 'response']);
  this.executeCharTest('‚Ñ†', ['service mark', 'service mark', 'service mark']);
  this.executeCharTest('‚Ñ°', ['telephone sign', 'telephone sign', 'telephone sign']);
  this.executeCharTest('‚Ñ¢', ['registrado', 'registrado', 'registrado']);
  this.executeCharTest('‚Ñ£', ['versicle', 'versicle', 'versicle']);
  this.executeCharTest('‚Ñ•', ['onza', 'onza', 'onza']);
  this.executeCharTest('‚Ñ¶', ['ohmio', 'ohmio', 'ohmio']);
  this.executeCharTest('‚Ñß', ['ohmio invertido', 'ohmio invertido', 'ohmio invertido']);
  this.executeCharTest('‚Ñ™', ['grados kelvin', 'grados kelvin', 'grados kelvin']);
  this.executeCharTest('‚Ñ´', ['angstrom', 'angstrom', 'angstrom']);
  this.executeCharTest('‚ÑÆ', ['estimated', 'estimated', 'estimated']);
  this.executeCharTest('‚Ñ≤', ['may√∫scula F invertida', 'may√∫scula F invertida', 'may√∫scula F invertida']);
  this.executeCharTest('‚Ñπ', ['information source', 'information source', 'information source']);
  this.executeCharTest('‚Ñ∫', ['rotated upper Q', 'rotated upper Q', 'rotated upper Q']);
  this.executeCharTest('‚Ñª', ['facsimile sign', 'facsimile sign', 'facsimile sign']);
  this.executeCharTest('‚ÖÅ', ['turned sans serif upper G', 'turned sans serif upper G', 'turned sans serif upper G']);
  this.executeCharTest('‚ÖÇ', ['turned sans serif upper L', 'turned sans serif upper L', 'turned sans serif upper L']);
  this.executeCharTest('‚ÖÉ', ['reversed sans serif upper L', 'reversed sans serif upper L', 'reversed sans serif upper L']);
  this.executeCharTest('‚ÖÑ', ['turned sans serif upper Y', 'turned sans serif upper Y', 'turned sans serif upper Y']);
  this.executeCharTest('!', ['factorial', 'factorial', 'factorial']);
  this.executeCharTest('#', ['almuhadilla', 'almuhadilla', 'almuhadilla']);
  this.executeCharTest('$', ['d√≥lar', 'd√≥lar', 'd√≥lar']);
  this.executeCharTest('%', ['porciento', 'porciento', 'porciento']);
  this.executeCharTest('&', ['ampersand', 'ampersand', 'ampersand']);
  this.executeCharTest('\'', ['prima', 'prima', 'prima']);
  this.executeCharTest('*', ['por', 'por', 'por']);
  this.executeCharTest('+', ['m√°s', 'm√°s', 'm√°s']);
  this.executeCharTest(',', ['coma', 'coma', 'coma']);
  this.executeCharTest('-', ['menos', 'menos', 'menos']);
  this.executeCharTest('.', ['punto', 'punto', 'punto']);
  this.executeCharTest('/', ['barra oblicua', 'barra oblicua', 'barra oblicua']);
  this.executeCharTest(':', ['dos puntos', 'dos puntos', 'dos puntos']);
  this.executeCharTest(';', ['punto y coma', 'punto y coma', 'punto y coma']);
  this.executeCharTest('<', ['menor que', 'menor que', 'menor que']);
  this.executeCharTest('=', ['igual', 'igual', 'igual']);
  this.executeCharTest('>', ['mayor que', 'mayor que', 'mayor que']);
  this.executeCharTest('?', ['interrogaci√≥n derecho', 'interrogaci√≥n derecho', 'interrogaci√≥n derecho']);
  this.executeCharTest('@', ['arroba', 'arroba', 'arroba']);
  this.executeCharTest('\\', ['barra inversa', 'barra inversa', 'barra inversa']);
  this.executeCharTest('^', ['circunflejo', 'circunflejo', 'circunflejo']);
  this.executeCharTest('_', ['subrayado', 'subrayado', 'subrayado']);
  this.executeCharTest('`', ['acento grave', 'acento grave', 'acento grave']);
  this.executeCharTest('|', ['barra vertical', 'barra vertical', 'barra vertical']);
  this.executeCharTest('~', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('¬°', ['admiraci√≥n izquierdo', 'admiraci√≥n izquierdo', 'admiraci√≥n izquierdo']);
  this.executeCharTest('¬¢', ['centavo', 'centavo', 'centavo']);
  this.executeCharTest('¬£', ['libra esterlina', 'libra esterlina', 'libra esterlina']);
  this.executeCharTest('¬§', ['moneda', 'moneda', 'moneda']);
  this.executeCharTest('¬•', ['yen', 'yen', 'yen']);
  this.executeCharTest('¬¶', ['barra vertical partida', 'barra vertical partida', 'barra vertical partida']);
  this.executeCharTest('¬ß', ['secci√≥n', 'secci√≥n', 'secci√≥n']);
  this.executeCharTest('¬®', ['di√©resis', 'di√©resis', 'di√©resis']);
  this.executeCharTest('¬©', ['copyright', 'copyright', 'copyright']);
  this.executeCharTest('¬™', ['ordinal femenino', 'ordinal femenino', 'ordinal femenino']);
  this.executeCharTest('¬´', ['comillas angulares izquierda', 'comillas angulares izquierda', 'comillas angulares izquierda']);
  this.executeCharTest('¬¨', ['negaci√≥n', 'negaci√≥n', 'negaci√≥n']);
  this.executeCharTest('¬Æ', ['registrado', 'registrado', 'registrado']);
  this.executeCharTest('¬Ø', ['barra', 'barra', 'barra']);
  this.executeCharTest('¬∞', ['grado', 'grado', 'grado']);
  this.executeCharTest('¬±', ['m√°s menos', 'm√°s menos', 'm√°s menos']);
  this.executeCharTest('¬¥', ['acento agudo', 'acento agudo', 'acento agudo']);
  this.executeCharTest('¬µ', ['micro', 'micro', 'micro']);
  this.executeCharTest('¬∂', ['p√°rrafo', 'p√°rrafo', 'p√°rrafo']);
  this.executeCharTest('¬∑', ['punto medio', 'punto medio', 'punto medio']);
  this.executeCharTest('¬∏', ['cedilla', 'cedilla', 'cedilla']);
  this.executeCharTest('¬∫', ['ordinal masculino', 'ordinal masculino', 'ordinal masculino']);
  this.executeCharTest('¬ª', ['comillas angulares derecha', 'comillas angulares derecha', 'comillas angulares derecha']);
  this.executeCharTest('¬ø', ['interrogaci√≥n izquierdo', 'interrogaci√≥n izquierdo', 'interrogaci√≥n izquierdo']);
  this.executeCharTest('√ó', ['por', 'por', 'por']);
  this.executeCharTest('√∑', ['dividido', 'dividido', 'dividido']);
  this.executeCharTest('Àò', ['breve', 'breve', 'breve']);
  this.executeCharTest('Àô', ['punto en superescrito', 'punto en superescrito', 'punto en superescrito']);
  this.executeCharTest('Àö', ['anillo en superescrito', 'anillo en superescrito', 'anillo en superescrito']);
  this.executeCharTest('Àõ', ['ogonek', 'ogonek', 'ogonek']);
  this.executeCharTest('Àú', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('Àù', ['doble acento agudo', 'doble acento agudo', 'doble acento agudo']);
  this.executeCharTest('‚Äê', ['menos', 'menos', 'menos']);
  this.executeCharTest('‚Äë', ['non-breaking-hyphen', 'non-breaking-hyphen', 'non-breaking-hyphen']);
  this.executeCharTest('‚Äí', ['figure-dash', 'figure-dash', 'figure-dash']);
  this.executeCharTest('‚Äì', ['en raya', 'en raya', 'en raya']);
  this.executeCharTest('‚Äî', ['em raya', 'em raya', 'em raya']);
  this.executeCharTest('‚Äï', ['barra horizontal', 'barra horizontal', 'barra horizontal']);
  this.executeCharTest('‚Äñ', ['doble barra vertical', 'doble barra vertical', 'doble barra vertical']);
  this.executeCharTest('‚Äó', ['double-underscore', 'double-underscore', 'double-underscore']);
  this.executeCharTest('‚Äò', ['comilla izquierda', 'comilla izquierda', 'comilla izquierda']);
  this.executeCharTest('‚Äô', ['comilla derecha', 'comilla derecha', 'comilla derecha']);
  this.executeCharTest('‚Äö', ['comilla bajo 9', 'comilla bajo 9', 'comilla bajo 9']);
  this.executeCharTest('‚Äõ', ['single-reversed-comma-quotation-mark', 'single-reversed-comma-quotation-mark', 'single-reversed-comma-quotation-mark']);
  this.executeCharTest('‚Äú', ['doble comilla', 'doble comilla', 'doble comilla']);
  this.executeCharTest('‚Äù', ['doble comilla derecha', 'doble comilla derecha', 'doble comilla derecha']);
  this.executeCharTest('‚Äû', ['doble comilla bajo 9', 'doble comilla bajo 9', 'doble comilla bajo 9']);
  this.executeCharTest('‚Äü', ['double-reversed-comma-quotation-mark', 'double-reversed-comma-quotation-mark', 'double-reversed-comma-quotation-mark']);
  this.executeCharTest('‚Ä†', ['daga', 'daga', 'daga']);
  this.executeCharTest('‚Ä°', ['doble daga', 'doble daga', 'doble daga']);
  this.executeCharTest('‚Ä¢', ['bala', 'bala', 'bala']);
  this.executeCharTest('‚Ä£', ['triangular-bullet', 'triangular-bullet', 'triangular-bullet']);
  this.executeCharTest('‚Ä§', ['one-dot-leader', 'one-dot-leader', 'one-dot-leader']);
  this.executeCharTest('‚Ä•', ['dos puntos l√≠der', 'dos puntos l√≠der', 'dos puntos l√≠der']);
  this.executeCharTest('‚Ä¶', ['puntos suspensivos', 'puntos suspensivos', 'puntos suspensivos']);
  this.executeCharTest('‚Äß', ['hyphenation-point', 'hyphenation-point', 'hyphenation-point']);
  this.executeCharTest('‚Ä∞', ['tanto por millar', 'tanto por millar', 'tanto por millar']);
  this.executeCharTest('‚Ä±', ['tanto por diez mil', 'tanto por diez mil', 'tanto por diez mil']);
  this.executeCharTest('‚Ä≤', ['prima', 'prima', 'prima']);
  this.executeCharTest('‚Ä≥', ['segunda', 'segunda', 'segunda']);
  this.executeCharTest('‚Ä¥', ['tercera', 'tercera', 'tercera']);
  this.executeCharTest('‚Äµ', ['acento grave', 'acento grave', 'acento grave']);
  this.executeCharTest('‚Ä∂', ['doble acento grave', 'doble acento grave', 'doble acento grave']);
  this.executeCharTest('‚Ä∑', ['reversed-triple-prime', 'reversed-triple-prime', 'reversed-triple-prime']);
  this.executeCharTest('‚Ä∏', ['caret', 'caret', 'caret']);
  this.executeCharTest('‚Äπ', ['comillas izquierda', 'comillas izquierda', 'comillas izquierda']);
  this.executeCharTest('‚Ä∫', ['comillas derecha', 'comillas derecha', 'comillas derecha']);
  this.executeCharTest('‚Äª', ['reference-mark', 'reference-mark', 'reference-mark']);
  this.executeCharTest('‚Äº', ['double-exclamation-mark', 'double-exclamation-mark', 'double-exclamation-mark']);
  this.executeCharTest('‚ÄΩ', ['interrobang', 'interrobang', 'interrobang']);
  this.executeCharTest('‚Äæ', ['barra superior', 'barra superior', 'barra superior']);
  this.executeCharTest('‚Äø', ['undertie', 'undertie', 'undertie']);
  this.executeCharTest('‚ÅÄ', ['ligadura', 'ligadura', 'ligadura']);
  this.executeCharTest('‚ÅÅ', ['punto de inserci√≥n', 'punto de inserci√≥n', 'punto de inserci√≥n']);
  this.executeCharTest('‚ÅÇ', ['asterism', 'asterism', 'asterism']);
  this.executeCharTest('‚ÅÉ', ['gui√≥n bala', 'gui√≥n bala', 'gui√≥n bala']);
  this.executeCharTest('‚ÅÑ', ['barra de fracci√≥n', 'barra de fracci√≥n', 'barra de fracci√≥n']);
  this.executeCharTest('‚Åá', ['double-question-mark', 'double-question-mark', 'double-question-mark']);
  this.executeCharTest('‚Åà', ['question-exclamation-mark', 'question-exclamation-mark', 'question-exclamation-mark']);
  this.executeCharTest('‚Åâ', ['exclamation-question-mark', 'exclamation-question-mark', 'exclamation-question-mark']);
  this.executeCharTest('‚Åã', ['reversed-pilcrow', 'reversed-pilcrow', 'reversed-pilcrow']);
  this.executeCharTest('‚Åå', ['black-leftwards-bullet', 'black-leftwards-bullet', 'black-leftwards-bullet']);
  this.executeCharTest('‚Åç', ['black-rightwards-bullet', 'black-rightwards-bullet', 'black-rightwards-bullet']);
  this.executeCharTest('‚Åé', ['low-asterisk', 'low-asterisk', 'low-asterisk']);
  this.executeCharTest('‚Åè', ['punto y coma invertido', 'punto y coma invertido', 'punto y coma invertido']);
  this.executeCharTest('‚Åê', ['cierre superior', 'cierre superior', 'cierre superior']);
  this.executeCharTest('‚Åë', ['two-asterisks-aligned-vertically', 'two-asterisks-aligned-vertically', 'two-asterisks-aligned-vertically']);
  this.executeCharTest('‚Åí', ['commercial-minus', 'commercial-minus', 'commercial-minus']);
  this.executeCharTest('‚Åì', ['swung-dash', 'swung-dash', 'swung-dash']);
  this.executeCharTest('‚Åî', ['inverted-undertie', 'inverted-undertie', 'inverted-undertie']);
  this.executeCharTest('‚Åï', ['flower-punctuation-mark', 'flower-punctuation-mark', 'flower-punctuation-mark']);
  this.executeCharTest('‚Åñ', ['three-dot-punctuation', 'three-dot-punctuation', 'three-dot-punctuation']);
  this.executeCharTest('‚Åó', ['cuarta', 'cuarta', 'cuarta']);
  this.executeCharTest('‚Åò', ['four-dot-punctuation', 'four-dot-punctuation', 'four-dot-punctuation']);
  this.executeCharTest('‚Åô', ['five-dot-punctuation', 'five-dot-punctuation', 'five-dot-punctuation']);
  this.executeCharTest('‚Åö', ['two-dot-punctuation', 'two-dot-punctuation', 'two-dot-punctuation']);
  this.executeCharTest('‚Åõ', ['four-dot-mark', 'four-dot-mark', 'four-dot-mark']);
  this.executeCharTest('‚Åú', ['dotted-cross', 'dotted-cross', 'dotted-cross']);
  this.executeCharTest('‚Åù', ['tricolon', 'tricolon', 'tricolon']);
  this.executeCharTest('‚Åû', ['vertical-four-dots', 'vertical-four-dots', 'vertical-four-dots']);
  this.executeCharTest('‚Å∫', ['superscript-plus', 'superscript-plus', 'superscript-plus']);
  this.executeCharTest('‚Åª', ['superscript-hyphen-minus', 'superscript-hyphen-minus', 'superscript-hyphen-minus']);
  this.executeCharTest('‚Åº', ['superscript-equals', 'superscript-equals', 'superscript-equals']);
  this.executeCharTest('‚ÅΩ', ['superscript-opening-parenthesis', 'superscript-opening-parenthesis', 'superscript-opening-parenthesis']);
  this.executeCharTest('‚Åæ', ['superscript-closing-parenthesis', 'superscript-closing-parenthesis', 'superscript-closing-parenthesis']);
  this.executeCharTest('‚Çä', ['subscript-plus', 'subscript-plus', 'subscript-plus']);
  this.executeCharTest('‚Çã', ['subscript-hyphen-minus', 'subscript-hyphen-minus', 'subscript-hyphen-minus']);
  this.executeCharTest('‚Çå', ['subscript-equals', 'subscript-equals', 'subscript-equals']);
  this.executeCharTest('‚Çç', ['subscript-opening-parenthesis', 'subscript-opening-parenthesis', 'subscript-opening-parenthesis']);
  this.executeCharTest('‚Çé', ['subscript-closing-parenthesis', 'subscript-closing-parenthesis', 'subscript-closing-parenthesis']);
  this.executeCharTest('‚Öä', ['property-line', 'property-line', 'property-line']);
  this.executeCharTest('‚Öã', ['turned-ampersand', 'turned-ampersand', 'turned-ampersand']);
  this.executeCharTest('‚Öå', ['per-sign', 'per-sign', 'per-sign']);
  this.executeCharTest('‚Öç', ['aktieselskab', 'aktieselskab', 'aktieselskab']);
  this.executeCharTest('‚Öé', ['turned-small-f', 'turned-small-f', 'turned-small-f']);
  this.executeCharTest('‚àÄ', ['para todo', 'para todo', 'para todo']);
  this.executeCharTest('‚àÅ', ['complementario', 'complementario', 'complementario']);
  this.executeCharTest('‚àÇ', ['derivada parcial', 'derivada parcial', 'derivada parcial']);
  this.executeCharTest('‚àÉ', ['existe', 'existe', 'existe']);
  this.executeCharTest('‚àÑ', ['no existe', 'no existe', 'no existe']);
  this.executeCharTest('‚àÖ', ['conjunto vac√≠o', 'conjunto vac√≠o', 'conjunto vac√≠o']);
  this.executeCharTest('‚àÜ', ['incremento', 'incremento', 'incremento']);
  this.executeCharTest('‚àá', ['gradiente', 'gradiente', 'gradiente']);
  this.executeCharTest('‚àà', ['perteneciente a', 'perteneciente a', 'perteneciente a']);
  this.executeCharTest('‚àâ', ['no perteneciente a', 'no perteneciente a', 'no perteneciente a']);
  this.executeCharTest('‚àä', ['perteneciente a', 'perteneciente a', 'perteneciente a']);
  this.executeCharTest('‚àã', ['comprende a', 'comprende a', 'comprende a']);
  this.executeCharTest('‚àå', ['no comprende a', 'no comprende a', 'no comprende a']);
  this.executeCharTest('‚àç', ['comprende a', 'comprende a', 'comprende a']);
  this.executeCharTest('‚àé', ['fin de demostraci√≥n', 'fin de demostraci√≥n', 'fin de demostraci√≥n']);
  this.executeCharTest('‚àè', ['producto', 'producto', 'producto']);
  this.executeCharTest('‚àê', ['coproducto', 'coproducto', 'coproducto']);
  this.executeCharTest('‚àë', ['sumatorio', 'sumatorio', 'sumatorio']);
  this.executeCharTest('‚àí', ['menos', 'menos', 'menos']);
  this.executeCharTest('‚àì', ['menos m√°s', 'menos m√°s', 'menos m√°s']);
  this.executeCharTest('‚àî', ['punto m√°s', 'punto m√°s', 'punto m√°s']);
  this.executeCharTest('‚àï', ['barra de divisi√≥n', 'barra de divisi√≥n', 'barra de divisi√≥n']);
  this.executeCharTest('‚àñ', ['menos', 'menos', 'menos']);
  this.executeCharTest('‚àó', ['asterisco', 'asterisco', 'asterisco']);
  this.executeCharTest('‚àò', ['composici√≥n', 'composici√≥n', 'composici√≥n']);
  this.executeCharTest('‚àô', ['bala', 'bala', 'bala']);
  this.executeCharTest('‚àö', ['ra√≠z', 'ra√≠z', 'ra√≠z']);
  this.executeCharTest('‚àõ', ['ra√≠z c√∫bica', 'ra√≠z c√∫bica', 'ra√≠z c√∫bica']);
  this.executeCharTest('‚àú', ['ra√≠z cuarta', 'ra√≠z cuarta', 'ra√≠z cuarta']);
  this.executeCharTest('‚àù', ['proporcional a', 'proporcional a', 'proporcional a']);
  this.executeCharTest('‚àû', ['infinito', 'infinito', 'infinito']);
  this.executeCharTest('‚àü', ['√°ngulo recto', '√°ngulo recto', '√°ngulo recto']);
  this.executeCharTest('‚à†', ['√°ngulo', '√°ngulo', '√°ngulo']);
  this.executeCharTest('‚à°', ['√°ngulo medido', '√°ngulo medido', '√°ngulo medido']);
  this.executeCharTest('‚à¢', ['√°ngulo esf√©rico', '√°ngulo esf√©rico', '√°ngulo esf√©rico']);
  this.executeCharTest('‚à£', ['divide a', 'divide a', 'divide a']);
  this.executeCharTest('‚à§', ['no divide a', 'no divide a', 'no divide a']);
  this.executeCharTest('‚à•', ['paralela a', 'paralela a', 'paralela a']);
  this.executeCharTest('‚à¶', ['no paralela a', 'no paralela a', 'no paralela a']);
  this.executeCharTest('‚àß', ['y', 'y', 'y']);
  this.executeCharTest('‚à®', ['o', 'o', 'o']);
  this.executeCharTest('‚à©', ['intersecci√≥n', 'intersecci√≥n', 'intersecci√≥n']);
  this.executeCharTest('‚à™', ['uni√≥n', 'uni√≥n', 'uni√≥n']);
  this.executeCharTest('‚à´', ['integral', 'integral', 'integral']);
  this.executeCharTest('‚à¨', ['integral doble', 'integral doble', 'integral doble']);
  this.executeCharTest('‚à≠', ['integral triple', 'integral triple', 'integral triple']);
  this.executeCharTest('‚àÆ', ['integral de contorno', 'integral de contorno', 'integral de contorno']);
  this.executeCharTest('‚àØ', ['integral de superficie', 'integral de superficie', 'integral de superficie']);
  this.executeCharTest('‚à∞', ['integral de volumen', 'integral de volumen', 'integral de volumen']);
  this.executeCharTest('‚à±', ['integral de contorno en sentido horario', 'integral de contorno en sentido horario', 'integral de contorno en sentido horario']);
  this.executeCharTest('‚à≤', ['integral de contorno en sentido horario', 'integral de contorno en sentido horario', 'integral de contorno en sentido horario']);
  this.executeCharTest('‚à≥', ['integral de contorno en sentido antihorario', 'integral de contorno en sentido antihorario', 'integral de contorno en sentido antihorario']);
  this.executeCharTest('‚à¥', ['por lo tanto', 'por lo tanto', 'por lo tanto']);
  this.executeCharTest('‚àµ', ['porque', 'porque', 'porque']);
  this.executeCharTest('‚à∂', ['raz√≥n', 'raz√≥n', 'raz√≥n']);
  this.executeCharTest('‚à∑', ['proporci√≥n', 'proporci√≥n', 'proporci√≥n']);
  this.executeCharTest('‚à∏', ['punto menos', 'punto menos', 'punto menos']);
  this.executeCharTest('‚àπ', ['exceso', 'exceso', 'exceso']);
  this.executeCharTest('‚à∫', ['proporci√≥n geom√©trica', 'proporci√≥n geom√©trica', 'proporci√≥n geom√©trica']);
  this.executeCharTest('‚àª', ['homotecia', 'homotecia', 'homotecia']);
  this.executeCharTest('‚àº', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('‚àΩ', ['tilde invertido', 'tilde invertido', 'tilde invertido']);
  this.executeCharTest('‚àæ', ['s horizontal invertida', 's horizontal invertida', 's horizontal invertida']);
  this.executeCharTest('‚àø', ['sinusoide', 'sinusoide', 'sinusoide']);
  this.executeCharTest('‚âÄ', ['producto de guirnalda', 'producto de guirnalda', 'producto de guirnalda']);
  this.executeCharTest('‚âÅ', ['no tilde', 'no tilde', 'no tilde']);
  this.executeCharTest('‚âÇ', ['menos tilde', 'menos tilde', 'menos tilde']);
  this.executeCharTest('‚âÉ', ['asint√≥ticamente igual a', 'asint√≥ticamente igual a', 'asint√≥ticamente igual a']);
  this.executeCharTest('‚âÑ', ['no asint√≥ticamente igual a', 'no asint√≥ticamente igual a', 'no asint√≥ticamente igual a']);
  this.executeCharTest('‚âÖ', ['aproximadamente igual a', 'aproximadamente igual a', 'aproximadamente igual a']);
  this.executeCharTest('‚âÜ', ['aproximado pero no igual a', 'aproximado pero no igual a', 'aproximado pero no igual a']);
  this.executeCharTest('‚âá', ['no aproximado a', 'no aproximado a', 'no aproximado a']);
  this.executeCharTest('‚âà', ['aproximado', 'aproximado', 'aproximado']);
  this.executeCharTest('‚ââ', ['no es casi igual a', 'no es casi igual a', 'no es casi igual a']);
  this.executeCharTest('‚âä', ['igual o casi igual a', 'igual o casi igual a', 'igual o casi igual a']);
  this.executeCharTest('‚âã', ['triple tilde', 'triple tilde', 'triple tilde']);
  this.executeCharTest('‚âå', ['todo igual a', 'todo igual a', 'todo igual a']);
  this.executeCharTest('‚âç', ['equivalente a', 'equivalente a', 'equivalente a']);
  this.executeCharTest('‚âé', ['geom√©tricamente equivalente a', 'geom√©tricamente equivalente a', 'geom√©tricamente equivalente a']);
  this.executeCharTest('‚âè', ['diferencia entre', 'diferencia entre', 'diferencia entre']);
  this.executeCharTest('‚âê', ['se acerca al l√≠mite', 'se acerca al l√≠mite', 'se acerca al l√≠mite']);
  this.executeCharTest('‚âë', ['geom√©tricamente igual a', 'geom√©tricamente igual a', 'geom√©tricamente igual a']);
  this.executeCharTest('‚âí', ['aproximadamente igual a o imagen de', 'aproximadamente igual a o imagen de', 'aproximadamente igual a o imagen de']);
  this.executeCharTest('‚âì', ['imagen de o aproximadamente igual a', 'imagen de o aproximadamente igual a', 'imagen de o aproximadamente igual a']);
  this.executeCharTest('‚âî', ['dos puntos igual', 'dos puntos igual', 'dos puntos igual']);
  this.executeCharTest('‚âï', ['igual dos puntos', 'igual dos puntos', 'igual dos puntos']);
  this.executeCharTest('‚âñ', ['igual incluyendo anillo', 'igual incluyendo anillo', 'igual incluyendo anillo']);
  this.executeCharTest('‚âó', ['igual anillo a', 'igual anillo a', 'igual anillo a']);
  this.executeCharTest('‚âò', ['corresponde a', 'corresponde a', 'corresponde a']);
  this.executeCharTest('‚âô', ['estima a', 'estima a', 'estima a']);
  this.executeCharTest('‚âö', ['equiangular con', 'equiangular con', 'equiangular con']);
  this.executeCharTest('‚âõ', ['igual con estrella', 'igual con estrella', 'igual con estrella']);
  this.executeCharTest('‚âú', ['igual con delta', 'igual con delta', 'igual con delta']);
  this.executeCharTest('‚âù', ['igual por definici√≥n a', 'igual por definici√≥n a', 'igual por definici√≥n a']);
  this.executeCharTest('‚âû', ['medido por', 'medido por', 'medido por']);
  this.executeCharTest('‚âü', ['igual con interrogante', 'igual con interrogante', 'igual con interrogante']);
  this.executeCharTest('‚â†', ['no es igual a', 'no es igual a', 'no es igual a']);
  this.executeCharTest('‚â°', ['id√©ntico a', 'id√©ntico a', 'id√©ntico a']);
  this.executeCharTest('‚â¢', ['no es id√©ntico a', 'no es id√©ntico a', 'no es id√©ntico a']);
  this.executeCharTest('‚â£', ['estrictamente equivalente a', 'estrictamente equivalente a', 'estrictamente equivalente a']);
  this.executeCharTest('‚â§', ['menor o igual que', 'menor o igual que', 'menor o igual que']);
  this.executeCharTest('‚â•', ['mayor o igual que', 'mayor o igual que', 'mayor o igual que']);
  this.executeCharTest('‚â¶', ['menor o igual que', 'menor o igual que', 'menor o igual que']);
  this.executeCharTest('‚âß', ['mayor o igual que', 'mayor o igual que', 'mayor o igual que']);
  this.executeCharTest('‚â®', ['estrictamente menor que', 'estrictamente menor que', 'estrictamente menor que']);
  this.executeCharTest('‚â©', ['estrictamente mayor que', 'estrictamente mayor que', 'estrictamente mayor que']);
  this.executeCharTest('‚â™', ['mucho menor que', 'mucho menor que', 'mucho menor que']);
  this.executeCharTest('‚â´', ['mucho mayor que', 'mucho mayor que', 'mucho mayor que']);
  this.executeCharTest('‚â¨', ['entre', 'entre', 'entre']);
  this.executeCharTest('‚â≠', ['no equivalente a', 'no equivalente a', 'no equivalente a']);
  this.executeCharTest('‚âÆ', ['no menor que', 'no menor que', 'no menor que']);
  this.executeCharTest('‚âØ', ['no mayor que', 'no mayor que', 'no mayor que']);
  this.executeCharTest('‚â∞', ['no menor ni igual a', 'no menor ni igual a', 'no menor ni igual a']);
  this.executeCharTest('‚â±', ['no mayor ni igual a', 'no mayor ni igual a', 'no mayor ni igual a']);
  this.executeCharTest('‚â≤', ['menor o equivalente a', 'menor o equivalente a', 'menor o equivalente a']);
  this.executeCharTest('‚â≥', ['mayor o equivalente a', 'mayor o equivalente a', 'mayor o equivalente a']);
  this.executeCharTest('‚â¥', ['no menor ni equivalente a', 'no menor ni equivalente a', 'no menor ni equivalente a']);
  this.executeCharTest('‚âµ', ['no mayor ni equivalente a', 'no mayor ni equivalente a', 'no mayor ni equivalente a']);
  this.executeCharTest('‚â∂', ['menor o mayor que', 'menor o mayor que', 'menor o mayor que']);
  this.executeCharTest('‚â∑', ['mayor o menor que', 'mayor o menor que', 'mayor o menor que']);
  this.executeCharTest('‚â∏', ['no menor ni mayor que', 'no menor ni mayor que', 'no menor ni mayor que']);
  this.executeCharTest('‚âπ', ['no mayor ni menor que', 'no mayor ni menor que', 'no mayor ni menor que']);
  this.executeCharTest('‚â∫', ['precede a', 'precede a', 'precede a']);
  this.executeCharTest('‚âª', ['sigue a', 'sigue a', 'sigue a']);
  this.executeCharTest('‚âº', ['precede o es igual a', 'precede o es igual a', 'precede o es igual a']);
  this.executeCharTest('‚âΩ', ['sigue o es igual a', 'sigue o es igual a', 'sigue o es igual a']);
  this.executeCharTest('‚âæ', ['precede o es equivalente a', 'precede o es equivalente a', 'precede o es equivalente a']);
  this.executeCharTest('‚âø', ['sigue o es equivalente a', 'sigue o es equivalente a', 'sigue o es equivalente a']);
  this.executeCharTest('‚äÄ', ['no precede a', 'no precede a', 'no precede a']);
  this.executeCharTest('‚äÅ', ['no sigue a', 'no sigue a', 'no sigue a']);
  this.executeCharTest('‚äÇ', ['incluido en', 'incluido en', 'incluido en']);
  this.executeCharTest('‚äÉ', ['contiene a', 'contiene a', 'contiene a']);
  this.executeCharTest('‚äÑ', ['no incluido en', 'no incluido en', 'no incluido en']);
  this.executeCharTest('‚äÖ', ['no contiene a', 'no contiene a', 'no contiene a']);
  this.executeCharTest('‚äÜ', ['incluido o igual a', 'incluido o igual a', 'incluido o igual a']);
  this.executeCharTest('‚äá', ['contiene o es igual a', 'contiene o es igual a', 'contiene o es igual a']);
  this.executeCharTest('‚äà', ['no incluido ni igual a', 'no incluido ni igual a', 'no incluido ni igual a']);
  this.executeCharTest('‚äâ', ['no contiene ni es igual a', 'no contiene ni es igual a', 'no contiene ni es igual a']);
  this.executeCharTest('‚ää', ['incluido estrictamente en', 'incluido estrictamente en', 'incluido estrictamente en']);
  this.executeCharTest('‚äã', ['contiene estrictamente a', 'contiene estrictamente a', 'contiene estrictamente a']);
  this.executeCharTest('‚äå', ['familia de conjuntos', 'familia de conjuntos', 'familia de conjuntos']);
  this.executeCharTest('‚äç', ['producto de familia de conjuntos', 'producto de familia de conjuntos', 'producto de familia de conjuntos']);
  this.executeCharTest('‚äé', ['uni√≥n de familia de conjuntos', 'uni√≥n de familia de conjuntos', 'uni√≥n de familia de conjuntos']);
  this.executeCharTest('‚äè', ['imagen cuadrada de', 'imagen cuadrada de', 'imagen cuadrada de']);
  this.executeCharTest('‚äê', ['original cuadrado de', 'original cuadrado de', 'original cuadrado de']);
  this.executeCharTest('‚äë', ['imagen cuadrada de o igual a', 'imagen cuadrada de o igual a', 'imagen cuadrada de o igual a']);
  this.executeCharTest('‚äí', ['original cuadrado de o igual a', 'original cuadrado de o igual a', 'original cuadrado de o igual a']);
  this.executeCharTest('‚äì', ['intersecci√≥n cuadrada', 'intersecci√≥n cuadrada', 'intersecci√≥n cuadrada']);
  this.executeCharTest('‚äî', ['uni√≥n cuadrada', 'uni√≥n cuadrada', 'uni√≥n cuadrada']);
  this.executeCharTest('‚äï', ['m√°s en c√≠rculo', 'm√°s en c√≠rculo', 'm√°s en c√≠rculo']);
  this.executeCharTest('‚äñ', ['menos en c√≠rculo', 'menos en c√≠rculo', 'menos en c√≠rculo']);
  this.executeCharTest('‚äó', ['por en c√≠rculo', 'por en c√≠rculo', 'por en c√≠rculo']);
  this.executeCharTest('‚äò', ['barra en c√≠rculo', 'barra en c√≠rculo', 'barra en c√≠rculo']);
  this.executeCharTest('‚äô', ['punto en c√≠rculo', 'punto en c√≠rculo', 'punto en c√≠rculo']);
  this.executeCharTest('‚äö', ['anillo en c√≠rculo', 'anillo en c√≠rculo', 'anillo en c√≠rculo']);
  this.executeCharTest('‚äõ', ['asterisco en c√≠rculo', 'asterisco en c√≠rculo', 'asterisco en c√≠rculo']);
  this.executeCharTest('‚äú', ['igual en c√≠rculo', 'igual en c√≠rculo', 'igual en c√≠rculo']);
  this.executeCharTest('‚äù', ['menos en c√≠rculo', 'menos en c√≠rculo', 'menos en c√≠rculo']);
  this.executeCharTest('‚äû', ['m√°s en cuadrado', 'm√°s en cuadrado', 'm√°s en cuadrado']);
  this.executeCharTest('‚äü', ['menos en cuadrado', 'menos en cuadrado', 'menos en cuadrado']);
  this.executeCharTest('‚ä†', ['veces en cuadrado', 'veces en cuadrado', 'veces en cuadrado']);
  this.executeCharTest('‚ä°', ['punto en cuadrado', 'punto en cuadrado', 'punto en cuadrado']);
  this.executeCharTest('‚ä¢', ['t horizontal hacia la izquierda', 't horizontal hacia la izquierda', 't horizontal hacia la izquierda']);
  this.executeCharTest('‚ä£', ['t horizontal hacia la derecha', 't horizontal hacia la derecha', 't horizontal hacia la derecha']);
  this.executeCharTest('‚ä§', ['perpendicular', 'perpendicular', 'perpendicular']);
  this.executeCharTest('‚ä•', ['perpendicular invertida', 'perpendicular invertida', 'perpendicular invertida']);
  this.executeCharTest('‚ä¶', ['afirmaci√≥n', 'afirmaci√≥n', 'afirmaci√≥n']);
  this.executeCharTest('‚äß', ['modela', 'modela', 'modela']);
  this.executeCharTest('‚ä®', ['verdadero', 'verdadero', 'verdadero']);
  this.executeCharTest('‚ä©', ['obliga', 'obliga', 'obliga']);
  this.executeCharTest('‚ä™', ['triple barra vertical torniquete derecho', 'triple barra vertical torniquete derecho', 'triple barra vertical torniquete derecho']);
  this.executeCharTest('‚ä´', ['doble barra vertical doble torniquete derecho', 'doble barra vertical doble torniquete derecho', 'doble barra vertical doble torniquete derecho']);
  this.executeCharTest('‚ä¨', ['no prueba', 'no prueba', 'no prueba']);
  this.executeCharTest('‚ä≠', ['falso', 'falso', 'falso']);
  this.executeCharTest('‚äÆ', ['no obliga', 'no obliga', 'no obliga']);
  this.executeCharTest('‚äØ', ['doble barra vertical doble torniquete derecho negada', 'doble barra vertical doble torniquete derecho negada', 'doble barra vertical doble torniquete derecho negada']);
  this.executeCharTest('‚ä∞', ['precede respecto de', 'precede respecto de', 'precede respecto de']);
  this.executeCharTest('‚ä±', ['sigue respecto de', 'sigue respecto de', 'sigue respecto de']);
  this.executeCharTest('‚ä≤', ['subgrupo normal de', 'subgrupo normal de', 'subgrupo normal de']);
  this.executeCharTest('‚ä≥', ['contiene como subgrupo normal a', 'contiene como subgrupo normal a', 'contiene como subgrupo normal a']);
  this.executeCharTest('‚ä¥', ['subgrupo normal o es igual a', 'subgrupo normal o es igual a', 'subgrupo normal o es igual a']);
  this.executeCharTest('‚äµ', ['contiene como subgrupo normal o es igual a', 'contiene como subgrupo normal o es igual a', 'contiene como subgrupo normal o es igual a']);
  this.executeCharTest('‚ä∂', ['original de', 'original de', 'original de']);
  this.executeCharTest('‚ä∑', ['imagen de', 'imagen de', 'imagen de']);
  this.executeCharTest('‚ä∏', ['multifunci√≥n', 'multifunci√≥n', 'multifunci√≥n']);
  this.executeCharTest('‚äπ', ['matriz hermitiana conjugada', 'matriz hermitiana conjugada', 'matriz hermitiana conjugada']);
  this.executeCharTest('‚ä∫', ['interpola', 'interpola', 'interpola']);
  this.executeCharTest('‚äª', ['o excluyente', 'o excluyente', 'o excluyente']);
  this.executeCharTest('‚äº', ['no y', 'no y', 'no y']);
  this.executeCharTest('‚äΩ', ['no o', 'no o', 'no o']);
  this.executeCharTest('‚äø', ['tri√°ngulo rect√°ngulo', 'tri√°ngulo rect√°ngulo', 'tri√°ngulo rect√°ngulo']);
  this.executeCharTest('‚ãÄ', ['y', 'y', 'y']);
  this.executeCharTest('‚ãÅ', ['o', 'o', 'o']);
  this.executeCharTest('‚ãÇ', ['intersecci√≥n', 'intersecci√≥n', 'intersecci√≥n']);
  this.executeCharTest('‚ãÉ', ['uni√≥n', 'uni√≥n', 'uni√≥n']);
  this.executeCharTest('‚ãÑ', ['operador diamante', 'operador diamante', 'operador diamante']);
  this.executeCharTest('‚ãÖ', ['punto', 'punto', 'punto']);
  this.executeCharTest('‚ãÜ', ['estrella', 'estrella', 'estrella']);
  this.executeCharTest('‚ãá', ['dividido por', 'dividido por', 'dividido por']);
  this.executeCharTest('‚ãà', ['mo√±o', 'mo√±o', 'mo√±o']);
  this.executeCharTest('‚ãâ', ['factor normal izquierdo producto semidirecto', 'factor normal izquierdo producto semidirecto', 'factor normal izquierdo producto semidirecto']);
  this.executeCharTest('‚ãä', ['factor normal derecho producto semidirecto', 'factor normal derecho producto semidirecto', 'factor normal derecho producto semidirecto']);
  this.executeCharTest('‚ãã', ['producto semidirecto izquierdo', 'producto semidirecto izquierdo', 'producto semidirecto izquierdo']);
  this.executeCharTest('‚ãå', ['producto semidirecto derecho', 'producto semidirecto derecho', 'producto semidirecto derecho']);
  this.executeCharTest('‚ãç', ['tilde invertida igual a', 'tilde invertida igual a', 'tilde invertida igual a']);
  this.executeCharTest('‚ãé', ['o rizada', 'o rizada', 'o rizada']);
  this.executeCharTest('‚ãè', ['y rizada', 'y rizada', 'y rizada']);
  this.executeCharTest('‚ãê', ['doble incluido', 'doble incluido', 'doble incluido']);
  this.executeCharTest('‚ãë', ['doble contiene', 'doble contiene', 'doble contiene']);
  this.executeCharTest('‚ãí', ['doble intersecci√≥n', 'doble intersecci√≥n', 'doble intersecci√≥n']);
  this.executeCharTest('‚ãì', ['doble uni√≥n', 'doble uni√≥n', 'doble uni√≥n']);
  this.executeCharTest('‚ãî', ['bieldo', 'bieldo', 'bieldo']);
  this.executeCharTest('‚ãï', ['paralela o igual a', 'paralela o igual a', 'paralela o igual a']);
  this.executeCharTest('‚ãñ', ['menor que con punto', 'menor que con punto', 'menor que con punto']);
  this.executeCharTest('‚ãó', ['mayor que con punto', 'mayor que con punto', 'mayor que con punto']);
  this.executeCharTest('‚ãò', ['mucho menor que', 'mucho menor que', 'mucho menor que']);
  this.executeCharTest('‚ãô', ['mucho mayor que', 'mucho mayor que', 'mucho mayor que']);
  this.executeCharTest('‚ãö', ['menor igual o mayor que', 'menor igual o mayor que', 'menor igual o mayor que']);
  this.executeCharTest('‚ãõ', ['mayor igual o menor que', 'mayor igual o menor que', 'mayor igual o menor que']);
  this.executeCharTest('‚ãú', ['menor o igual que', 'menor o igual que', 'menor o igual que']);
  this.executeCharTest('‚ãù', ['mayor o igual que', 'mayor o igual que', 'mayor o igual que']);
  this.executeCharTest('‚ãû', ['precede o es igual a', 'precede o es igual a', 'precede o es igual a']);
  this.executeCharTest('‚ãü', ['sigue o es igual a', 'sigue o es igual a', 'sigue o es igual a']);
  this.executeCharTest('‚ã†', ['no precede ni es igual a', 'no precede ni es igual a', 'no precede ni es igual a']);
  this.executeCharTest('‚ã°', ['no sigue ni es igual a', 'no sigue ni es igual a', 'no sigue ni es igual a']);
  this.executeCharTest('‚ã¢', ['no es imagen cuadrada ni igual a', 'no es imagen cuadrada ni igual a', 'no es imagen cuadrada ni igual a']);
  this.executeCharTest('‚ã£', ['no es original cuadrada ni igual a', 'no es original cuadrada ni igual a', 'no es original cuadrada ni igual a']);
  this.executeCharTest('‚ã§', ['imagen cuadrada estricta', 'imagen cuadrada estricta', 'imagen cuadrada estricta']);
  this.executeCharTest('‚ã•', ['original cuadrada estricta', 'original cuadrada estricta', 'original cuadrada estricta']);
  this.executeCharTest('‚ã¶', ['menor que no equivalente a', 'menor que no equivalente a', 'menor que no equivalente a']);
  this.executeCharTest('‚ãß', ['mayor que no equivalente a', 'mayor que no equivalente a', 'mayor que no equivalente a']);
  this.executeCharTest('‚ã®', ['precede no equivalente a', 'precede no equivalente a', 'precede no equivalente a']);
  this.executeCharTest('‚ã©', ['sigue no equivalente a', 'sigue no equivalente a', 'sigue no equivalente a']);
  this.executeCharTest('‚ã™', ['no subgrupo normal de', 'no subgrupo normal de', 'no subgrupo normal de']);
  this.executeCharTest('‚ã´', ['no contiene como subgrupo normal a', 'no contiene como subgrupo normal a', 'no contiene como subgrupo normal a']);
  this.executeCharTest('‚ã¨', ['no es subgrupo normal ni igual a', 'no es subgrupo normal ni igual a', 'no es subgrupo normal ni igual a']);
  this.executeCharTest('‚ã≠', ['no contiene como subgrupo normal ni es igual a', 'no contiene como subgrupo normal ni es igual a', 'no contiene como subgrupo normal ni es igual a']);
  this.executeCharTest('‚ãÆ', ['puntos suspensivos verticales', 'puntos suspensivos verticales', 'puntos suspensivos verticales']);
  this.executeCharTest('‚ãØ', ['puntos suspensivos altos', 'puntos suspensivos altos', 'puntos suspensivos altos']);
  this.executeCharTest('‚ã∞', ['puntos suspensivos diagonales subiendo', 'puntos suspensivos diagonales subiendo', 'puntos suspensivos diagonales subiendo']);
  this.executeCharTest('‚ã±', ['puntos suspensivos diagonales bajando', 'puntos suspensivos diagonales bajando', 'puntos suspensivos diagonales bajando']);
  this.executeCharTest('‚ã≤', ['pertenece con trazo horizontal', 'pertenece con trazo horizontal', 'pertenece con trazo horizontal']);
  this.executeCharTest('‚ã≥', ['pertenece con barra vertical al fin de raya horizontal', 'pertenece con barra vertical al fin de raya horizontal', 'pertenece con barra vertical al fin de raya horizontal']);
  this.executeCharTest('‚ã¥', ['pertenece en peque√±o con trazo vertical', 'pertenece en peque√±o con trazo vertical', 'pertenece en peque√±o con trazo vertical']);
  this.executeCharTest('‚ãµ', ['pertenece con punto arriba', 'pertenece con punto arriba', 'pertenece con punto arriba']);
  this.executeCharTest('‚ã∂', ['pertenece con barra arriba', 'pertenece con barra arriba', 'pertenece con barra arriba']);
  this.executeCharTest('‚ã∑', ['perteneciente subrayado', 'perteneciente subrayado', 'perteneciente subrayado']);
  this.executeCharTest('‚ã∏', ['perteneciente subrayado', 'perteneciente subrayado', 'perteneciente subrayado']);
  this.executeCharTest('‚ãπ', ['pertenece con dos trazos horizontales', 'pertenece con dos trazos horizontales', 'pertenece con dos trazos horizontales']);
  this.executeCharTest('‚ã∫', ['contiene o es igual a', 'contiene o es igual a', 'contiene o es igual a']);
  this.executeCharTest('‚ãª', ['contiene con marca', 'contiene con marca', 'contiene con marca']);
  this.executeCharTest('‚ãº', ['contiene con marca', 'contiene con marca', 'contiene con marca']);
  this.executeCharTest('‚ãΩ', ['contiene con barra', 'contiene con barra', 'contiene con barra']);
  this.executeCharTest('‚ãæ', ['perteneciente con barra', 'perteneciente con barra', 'perteneciente con barra']);
  this.executeCharTest('‚ãø', ['z anotaci√≥n asociaci√≥n de bolsa', 'z anotaci√≥n asociaci√≥n de bolsa', 'z anotaci√≥n asociaci√≥n de bolsa']);
  this.executeCharTest('‚åÄ', ['di√°metro', 'di√°metro', 'di√°metro']);
  this.executeCharTest('‚åÇ', ['casa', 'casa', 'casa']);
  this.executeCharTest('‚åÖ', ['en proyectividad con', 'en proyectividad con', 'en proyectividad con']);
  this.executeCharTest('‚åÜ', ['en perspectividad con', 'en perspectividad con', 'en perspectividad con']);
  this.executeCharTest('‚åá', ['wavy-line', 'wavy-line', 'wavy-line']);
  this.executeCharTest('‚åê', ['no invertido', 'no invertido', 'no invertido']);
  this.executeCharTest('‚åë', ['square-lozenge', 'square-lozenge', 'square-lozenge']);
  this.executeCharTest('‚åí', ['arco', 'arco', 'arco']);
  this.executeCharTest('‚åì', ['segmento', 'segmento', 'segmento']);
  this.executeCharTest('‚åî', ['sector', 'sector', 'sector']);
  this.executeCharTest('‚ûï', ['bold-plus', 'bold-plus', 'bold-plus']);
  this.executeCharTest('‚ûñ', ['bold-minus', 'bold-minus', 'bold-minus']);
  this.executeCharTest('‚ûó', ['bold-division', 'bold-division', 'bold-division']);
  this.executeCharTest('‚û∞', ['curly-loop', 'curly-loop', 'curly-loop']);
  this.executeCharTest('‚ûø', ['double-curly-loop', 'double-curly-loop', 'double-curly-loop']);
  this.executeCharTest('‚üÅ', ['tri√°ngulo encerrando tri√°ngulo', 'tri√°ngulo encerrando tri√°ngulo', 'tri√°ngulo encerrando tri√°ngulo']);
  this.executeCharTest('‚üÇ', ['perpendicular', 'perpendicular', 'perpendicular']);
  this.executeCharTest('‚üÉ', ['incluido en', 'incluido en', 'incluido en']);
  this.executeCharTest('‚üÑ', ['contiene a', 'contiene a', 'contiene a']);
  this.executeCharTest('‚üá', ['punto en c√≠rculo', 'punto en c√≠rculo', 'punto en c√≠rculo']);
  this.executeCharTest('‚üà', ['atr√°s tajo antes de subconjunto', 'atr√°s tajo antes de subconjunto', 'atr√°s tajo antes de subconjunto']);
  this.executeCharTest('‚üâ', ['sobreconjunto antes de tajo', 'sobreconjunto antes de tajo', 'sobreconjunto antes de tajo']);
  this.executeCharTest('‚üä', ['barra vertical con golpe horizontal', 'barra vertical con golpe horizontal', 'barra vertical con golpe horizontal']);
  this.executeCharTest('‚üã', ['mathematical-rising-diagonal', 'mathematical-rising-diagonal', 'mathematical-rising-diagonal']);
  this.executeCharTest('‚üå', ['divisi√≥n larga', 'divisi√≥n larga', 'divisi√≥n larga']);
  this.executeCharTest('‚üç', ['mathematical-falling-diagonal', 'mathematical-falling-diagonal', 'mathematical-falling-diagonal']);
  this.executeCharTest('‚üé', ['squared-logical-and', 'squared-logical-and', 'squared-logical-and']);
  this.executeCharTest('‚üè', ['squared-logical-or', 'squared-logical-or', 'squared-logical-or']);
  this.executeCharTest('‚üê', ['white-diamond-with-centered-dot', 'white-diamond-with-centered-dot', 'white-diamond-with-centered-dot']);
  this.executeCharTest('‚üë', ['y con punto interior', 'y con punto interior', 'y con punto interior']);
  this.executeCharTest('‚üí', ['elemento de apertura hacia arriba', 'elemento de apertura hacia arriba', 'elemento de apertura hacia arriba']);
  this.executeCharTest('‚üì', ['√°ngulo inferior derecho con punto', '√°ngulo inferior derecho con punto', '√°ngulo inferior derecho con punto']);
  this.executeCharTest('‚üî', ['√°ngulo inferior izquierdo con punto', '√°ngulo inferior izquierdo con punto', '√°ngulo inferior izquierdo con punto']);
  this.executeCharTest('‚üï', ['izquierdo exterior une', 'izquierdo exterior une', 'izquierdo exterior une']);
  this.executeCharTest('‚üñ', ['derecho exterior une', 'derecho exterior une', 'derecho exterior une']);
  this.executeCharTest('‚üó', ['lleno exterior une', 'lleno exterior une', 'lleno exterior une']);
  this.executeCharTest('‚üò', ['perpendicular inversa', 'perpendicular inversa', 'perpendicular inversa']);
  this.executeCharTest('‚üô', ['perpendicular', 'perpendicular', 'perpendicular']);
  this.executeCharTest('‚üö', ['izquierdo y derecho doble torniquete', 'izquierdo y derecho doble torniquete', 'izquierdo y derecho doble torniquete']);
  this.executeCharTest('‚üõ', ['doble T horizontal', 'doble T horizontal', 'doble T horizontal']);
  this.executeCharTest('‚üú', ['multifunci√≥n por la izquierda', 'multifunci√≥n por la izquierda', 'multifunci√≥n por la izquierda']);
  this.executeCharTest('‚üù', ['T horizontal derecha larga', 'T horizontal derecha larga', 'T horizontal derecha larga']);
  this.executeCharTest('‚üû', ['T horizontal izquierda larga', 'T horizontal izquierda larga', 'T horizontal izquierda larga']);
  this.executeCharTest('‚üü', ['perpendicular inversa con c√≠rculo arriba', 'perpendicular inversa con c√≠rculo arriba', 'perpendicular inversa con c√≠rculo arriba']);
  this.executeCharTest('‚ü†', ['pastilla dividida por regla horizontal', 'pastilla dividida por regla horizontal', 'pastilla dividida por regla horizontal']);
  this.executeCharTest('‚ü°', ['diamante c√≥ncavo vac√≠o', 'diamante c√≥ncavo vac√≠o', 'diamante c√≥ncavo vac√≠o']);
  this.executeCharTest('‚ü¢', ['diamante c√≥ncavo con tictac hacia izquierda', 'diamante c√≥ncavo con tictac hacia izquierda', 'diamante c√≥ncavo con tictac hacia izquierda']);
  this.executeCharTest('‚ü£', ['diamante c√≥ncavo con tictac hacia derecha', 'diamante c√≥ncavo con tictac hacia derecha', 'diamante c√≥ncavo con tictac hacia derecha']);
  this.executeCharTest('‚ü§', ['cuadrado con tictac hacia izquierda', 'cuadrado con tictac hacia izquierda', 'cuadrado con tictac hacia izquierda']);
  this.executeCharTest('‚ü•', ['cuadrado con tictac hacia derecha', 'cuadrado con tictac hacia derecha', 'cuadrado con tictac hacia derecha']);
  this.executeCharTest('‚§´', ['rising-diagonal-crossing-falling-diagonal', 'rising-diagonal-crossing-falling-diagonal', 'rising-diagonal-crossing-falling-diagonal']);
  this.executeCharTest('‚§¨', ['falling-diagonal-crossing-rising-diagonal', 'falling-diagonal-crossing-rising-diagonal', 'falling-diagonal-crossing-rising-diagonal']);
  this.executeCharTest('‚¶Ä', ['triple-vertical-bar-delimiter', 'triple-vertical-bar-delimiter', 'triple-vertical-bar-delimiter']);
  this.executeCharTest('‚¶Å', ['z-notation-spot', 'z-notation-spot', 'z-notation-spot']);
  this.executeCharTest('‚¶Ç', ['z-notation-type-colon', 'z-notation-type-colon', 'z-notation-type-colon']);
  this.executeCharTest('‚¶ô', ['dotted-fence', 'dotted-fence', 'dotted-fence']);
  this.executeCharTest('‚¶ö', ['zigzag en vertical', 'zigzag en vertical', 'zigzag en vertical']);
  this.executeCharTest('‚¶∞', ['conjunto vac√≠o invertido', 'conjunto vac√≠o invertido', 'conjunto vac√≠o invertido']);
  this.executeCharTest('‚¶±', ['conjunto vac√≠o con barra', 'conjunto vac√≠o con barra', 'conjunto vac√≠o con barra']);
  this.executeCharTest('‚¶≤', ['conjunto vac√≠o con c√≠rculo', 'conjunto vac√≠o con c√≠rculo', 'conjunto vac√≠o con c√≠rculo']);
  this.executeCharTest('‚¶µ', ['c√≠rculo con barra', 'c√≠rculo con barra', 'c√≠rculo con barra']);
  this.executeCharTest('‚¶∂', ['barra en c√≠rculo', 'barra en c√≠rculo', 'barra en c√≠rculo']);
  this.executeCharTest('‚¶∑', ['paralelas en c√≠rculo', 'paralelas en c√≠rculo', 'paralelas en c√≠rculo']);
  this.executeCharTest('‚¶∏', ['circled-reverse-solidus', 'circled-reverse-solidus', 'circled-reverse-solidus']);
  this.executeCharTest('‚¶π', ['perpendicular en c√≠rculo', 'perpendicular en c√≠rculo', 'perpendicular en c√≠rculo']);
  this.executeCharTest('‚¶∫', ['circle-divided-by-horizontal-bar-and-top-half-divided-by-vertical-bar', 'circle-divided-by-horizontal-bar-and-top-half-divided-by-vertical-bar', 'circle-divided-by-horizontal-bar-and-top-half-divided-by-vertical-bar']);
  this.executeCharTest('‚¶ª', ['x superimpresa en c√≠rculo', 'x superimpresa en c√≠rculo', 'x superimpresa en c√≠rculo']);
  this.executeCharTest('‚¶º', ['circled anticlockwise rotated division', 'circled anticlockwise rotated division', 'circled anticlockwise rotated division']);
  this.executeCharTest('‚¶æ', ['bullet vac√≠a en c√≠rculo', 'bullet vac√≠a en c√≠rculo', 'bullet vac√≠a en c√≠rculo']);
  this.executeCharTest('‚¶ø', ['bullet en c√≠rculo', 'bullet en c√≠rculo', 'bullet en c√≠rculo']);
  this.executeCharTest('‚ßÄ', ['menor que en c√≠rculo', 'menor que en c√≠rculo', 'menor que en c√≠rculo']);
  this.executeCharTest('‚ßÅ', ['mayor que en c√≠rculo', 'mayor que en c√≠rculo', 'mayor que en c√≠rculo']);
  this.executeCharTest('‚ßÇ', ['c√≠rculo con c√≠rculo a la derecha', 'c√≠rculo con c√≠rculo a la derecha', 'c√≠rculo con c√≠rculo a la derecha']);
  this.executeCharTest('‚ßÉ', ['circle with two horizontal strokes to the right', 'circle with two horizontal strokes to the right', 'circle with two horizontal strokes to the right']);
  this.executeCharTest('‚ßÑ', ['cuadrado con diagonal ascendente', 'cuadrado con diagonal ascendente', 'cuadrado con diagonal ascendente']);
  this.executeCharTest('‚ßÖ', ['cuadrado con diagonal descendente', 'cuadrado con diagonal descendente', 'cuadrado con diagonal descendente']);
  this.executeCharTest('‚ßÜ', ['squared-asterisk', 'squared-asterisk', 'squared-asterisk']);
  this.executeCharTest('‚ßá', ['squared-small-circle', 'squared-small-circle', 'squared-small-circle']);
  this.executeCharTest('‚ßà', ['squared-square', 'squared-square', 'squared-square']);
  this.executeCharTest('‚ßâ', ['dos cuadrados unidos', 'dos cuadrados unidos', 'dos cuadrados unidos']);
  this.executeCharTest('‚ßä', ['triangle-with-dot-above', 'triangle-with-dot-above', 'triangle-with-dot-above']);
  this.executeCharTest('‚ßã', ['triangle-with-underbar', 'triangle-with-underbar', 'triangle-with-underbar']);
  this.executeCharTest('‚ßå', ['s-in-triangle', 's-in-triangle', 's-in-triangle']);
  this.executeCharTest('‚ßç', ['triangle with serifs at bottom', 'triangle with serifs at bottom', 'triangle with serifs at bottom']);
  this.executeCharTest('‚ßé', ['tri√°ngulo hacia la derecha sobre tri√°ngulo hacia la izquierda', 'tri√°ngulo hacia la derecha sobre tri√°ngulo hacia la izquierda', 'tri√°ngulo hacia la derecha sobre tri√°ngulo hacia la izquierda']);
  this.executeCharTest('‚ßè', ['subgrupo normal o igual a', 'subgrupo normal o igual a', 'subgrupo normal o igual a']);
  this.executeCharTest('‚ßê', ['contiene como subgrupo normal o es igual a', 'contiene como subgrupo normal o es igual a', 'contiene como subgrupo normal o es igual a']);
  this.executeCharTest('‚ßë', ['bowtie-with-left-half-black', 'bowtie-with-left-half-black', 'bowtie-with-left-half-black']);
  this.executeCharTest('‚ßí', ['bowtie-with-right-half-black', 'bowtie-with-right-half-black', 'bowtie-with-right-half-black']);
  this.executeCharTest('‚ßì', ['black-bowtie', 'black-bowtie', 'black-bowtie']);
  this.executeCharTest('‚ßî', ['times-with-left-half-black', 'times-with-left-half-black', 'times-with-left-half-black']);
  this.executeCharTest('‚ßï', ['times-with-right-half-black', 'times-with-right-half-black', 'times-with-right-half-black']);
  this.executeCharTest('‚ßñ', ['white-hourglass', 'white-hourglass', 'white-hourglass']);
  this.executeCharTest('‚ßó', ['black-hourglass', 'black-hourglass', 'black-hourglass']);
  this.executeCharTest('‚ßú', ['infinito incompleto', 'infinito incompleto', 'infinito incompleto']);
  this.executeCharTest('‚ßù', ['tie-over-infinity', 'tie-over-infinity', 'tie-over-infinity']);
  this.executeCharTest('‚ßû', ['no infinito', 'no infinito', 'no infinito']);
  this.executeCharTest('‚ßü', ['double-ended-multimap', 'double-ended-multimap', 'double-ended-multimap']);
  this.executeCharTest('‚ß†', ['square-with-contoured-outline', 'square-with-contoured-outline', 'square-with-contoured-outline']);
  this.executeCharTest('‚ß°', ['increases-as', 'increases-as', 'increases-as']);
  this.executeCharTest('‚ß¢', ['shuffle-product', 'shuffle-product', 'shuffle-product']);
  this.executeCharTest('‚ß£', ['igual tachado doble ', 'igual tachado doble ', 'igual tachado doble ']);
  this.executeCharTest('‚ß§', ['igual con tilde, con doble tachado', 'igual con tilde, con doble tachado', 'igual con tilde, con doble tachado']);
  this.executeCharTest('‚ß•', ['id√©ntico a con doble tachado', 'id√©ntico a con doble tachado', 'id√©ntico a con doble tachado']);
  this.executeCharTest('‚ß¶', ['gleich-stark', 'gleich-stark', 'gleich-stark']);
  this.executeCharTest('‚ßß', ['thermodynamic', 'thermodynamic', 'thermodynamic']);
  this.executeCharTest('‚ß®', ['down-pointing-triangle-with-left-half-black', 'down-pointing-triangle-with-left-half-black', 'down-pointing-triangle-with-left-half-black']);
  this.executeCharTest('‚ß©', ['down-pointing-triangle-with-right-half-black', 'down-pointing-triangle-with-right-half-black', 'down-pointing-triangle-with-right-half-black']);
  this.executeCharTest('‚ß´', ['rombo relleno', 'rombo relleno', 'rombo relleno']);
  this.executeCharTest('‚ßÆ', ['error-barred-white-square', 'error-barred-white-square', 'error-barred-white-square']);
  this.executeCharTest('‚ßØ', ['error-barred-black-square', 'error-barred-black-square', 'error-barred-black-square']);
  this.executeCharTest('‚ß∞', ['error-barred-white-diamond', 'error-barred-white-diamond', 'error-barred-white-diamond']);
  this.executeCharTest('‚ß±', ['error-barred-black-diamond', 'error-barred-black-diamond', 'error-barred-black-diamond']);
  this.executeCharTest('‚ß≤', ['error-barred-white-circle', 'error-barred-white-circle', 'error-barred-white-circle']);
  this.executeCharTest('‚ß≥', ['error-barred-black-circle', 'error-barred-black-circle', 'error-barred-black-circle']);
  this.executeCharTest('‚ß¥', ['rule delayed', 'rule delayed', 'rule delayed']);
  this.executeCharTest('‚ßµ', ['reverse-solidus', 'reverse-solidus', 'reverse-solidus']);
  this.executeCharTest('‚ß∂', ['solidus with overbar', 'solidus with overbar', 'solidus with overbar']);
  this.executeCharTest('‚ß∑', ['reverse-solidus-with-horizontal-stroke', 'reverse-solidus-with-horizontal-stroke', 'reverse-solidus-with-horizontal-stroke']);
  this.executeCharTest('‚ß∏', ['solidus', 'solidus', 'solidus']);
  this.executeCharTest('‚ßπ', ['reverse-solidus', 'reverse-solidus', 'reverse-solidus']);
  this.executeCharTest('‚ß∫', ['double-plus', 'double-plus', 'double-plus']);
  this.executeCharTest('‚ßª', ['triple-plus', 'triple-plus', 'triple-plus']);
  this.executeCharTest('‚ßæ', ['tiny', 'tiny', 'tiny']);
  this.executeCharTest('‚ßø', ['miny', 'miny', 'miny']);
  this.executeCharTest('‚®Ä', ['circled-dot', 'circled-dot', 'circled-dot']);
  this.executeCharTest('‚®Å', ['circled-plus', 'circled-plus', 'circled-plus']);
  this.executeCharTest('‚®Ç', ['circled-times', 'circled-times', 'circled-times']);
  this.executeCharTest('‚®É', ['union-with-dot', 'union-with-dot', 'union-with-dot']);
  this.executeCharTest('‚®Ñ', ['union-with-plus', 'union-with-plus', 'union-with-plus']);
  this.executeCharTest('‚®Ö', ['square-intersection', 'square-intersection', 'square-intersection']);
  this.executeCharTest('‚®Ü', ['square-union', 'square-union', 'square-union']);
  this.executeCharTest('‚®á', ['two-logical-and', 'two-logical-and', 'two-logical-and']);
  this.executeCharTest('‚®à', ['two-logical-or', 'two-logical-or', 'two-logical-or']);
  this.executeCharTest('‚®â', ['times', 'times', 'times']);
  this.executeCharTest('‚®ä', ['modulo-two-sum', 'modulo-two-sum', 'modulo-two-sum']);
  this.executeCharTest('‚®ã', ['summation-with-integral', 'summation-with-integral', 'summation-with-integral']);
  this.executeCharTest('‚®å', ['operador integral cu√°druple', 'operador integral cu√°druple', 'operador integral cu√°druple']);
  this.executeCharTest('‚®ç', ['finite part integral', 'finite part integral', 'finite part integral']);
  this.executeCharTest('‚®é', ['integral-with-double-stroke', 'integral-with-double-stroke', 'integral-with-double-stroke']);
  this.executeCharTest('‚®è', ['integral-average-with-slash', 'integral-average-with-slash', 'integral-average-with-slash']);
  this.executeCharTest('‚®ê', ['circulation function', 'circulation function', 'circulation function']);
  this.executeCharTest('‚®ë', ['integral en sentido antihorario', 'integral en sentido antihorario', 'integral en sentido antihorario']);
  this.executeCharTest('‚®í', ['integral lineal para rect√°ngulo en polo', 'integral lineal para rect√°ngulo en polo', 'integral lineal para rect√°ngulo en polo']);
  this.executeCharTest('‚®ì', ['integral lineal para semic√≠rculo en polo', 'integral lineal para semic√≠rculo en polo', 'integral lineal para semic√≠rculo en polo']);
  this.executeCharTest('‚®î', ['integral lineal excluyendo el polo', 'integral lineal excluyendo el polo', 'integral lineal excluyendo el polo']);
  this.executeCharTest('‚®ï', ['integral en torno de un punto operador', 'integral en torno de un punto operador', 'integral en torno de un punto operador']);
  this.executeCharTest('‚®ñ', ['operador integral para cuaterniones', 'operador integral para cuaterniones', 'operador integral para cuaterniones']);
  this.executeCharTest('‚®ò', ['integral-with-times', 'integral-with-times', 'integral-with-times']);
  this.executeCharTest('‚®ô', ['integral-with-intersection', 'integral-with-intersection', 'integral-with-intersection']);
  this.executeCharTest('‚®ö', ['integral-with-union', 'integral-with-union', 'integral-with-union']);
  this.executeCharTest('‚®õ', ['integral-with-overbar', 'integral-with-overbar', 'integral-with-overbar']);
  this.executeCharTest('‚®ú', ['integral-with-underbar', 'integral-with-underbar', 'integral-with-underbar']);
  this.executeCharTest('‚®ù', ['join', 'join', 'join']);
  this.executeCharTest('‚®û', ['large-left-triangle', 'large-left-triangle', 'large-left-triangle']);
  this.executeCharTest('‚®ü', ['z-notation-schema-composition', 'z-notation-schema-composition', 'z-notation-schema-composition']);
  this.executeCharTest('‚®†', ['z-notation-schema-piping', 'z-notation-schema-piping', 'z-notation-schema-piping']);
  this.executeCharTest('‚®°', ['z-notation-schema-projection', 'z-notation-schema-projection', 'z-notation-schema-projection']);
  this.executeCharTest('‚®¢', ['m√°s con c√≠rculo', 'm√°s con c√≠rculo', 'm√°s con c√≠rculo']);
  this.executeCharTest('‚®£', ['m√°s con √°ngulo', 'm√°s con √°ngulo', 'm√°s con √°ngulo']);
  this.executeCharTest('‚®§', ['tilde con m√°s suscrito', 'tilde con m√°s suscrito', 'tilde con m√°s suscrito']);
  this.executeCharTest('‚®•', ['m√°s con punto inferior', 'm√°s con punto inferior', 'm√°s con punto inferior']);
  this.executeCharTest('‚®¶', ['tilde con m√°s', 'tilde con m√°s', 'tilde con m√°s']);
  this.executeCharTest('‚®ß', ['m√°s con 2 suscrito', 'm√°s con 2 suscrito', 'm√°s con 2 suscrito']);
  this.executeCharTest('‚®®', ['plus-sign-with-black-triangle', 'plus-sign-with-black-triangle', 'plus-sign-with-black-triangle']);
  this.executeCharTest('‚®©', ['menos con coma', 'menos con coma', 'menos con coma']);
  this.executeCharTest('‚®™', ['menos con punto inferior', 'menos con punto inferior', 'menos con punto inferior']);
  this.executeCharTest('‚®´', ['minus-sign-with-falling-dots', 'minus-sign-with-falling-dots', 'minus-sign-with-falling-dots']);
  this.executeCharTest('‚®¨', ['minus-sign-with-rising-dots', 'minus-sign-with-rising-dots', 'minus-sign-with-rising-dots']);
  this.executeCharTest('‚®≠', ['m√°s en semic√≠rculo izquierdo', 'm√°s en semic√≠rculo izquierdo', 'm√°s en semic√≠rculo izquierdo']);
  this.executeCharTest('‚®Æ', ['m√°s en semic√≠rculo derecho', 'm√°s en semic√≠rculo derecho', 'm√°s en semic√≠rculo derecho']);
  this.executeCharTest('‚®Ø', ['producto vectorial', 'producto vectorial', 'producto vectorial']);
  this.executeCharTest('‚®∞', ['por con punto', 'por con punto', 'por con punto']);
  this.executeCharTest('‚®±', ['por con subrayado', 'por con subrayado', 'por con subrayado']);
  this.executeCharTest('‚®≤', ['semidirect-product-with-bottom-closed', 'semidirect-product-with-bottom-closed', 'semidirect-product-with-bottom-closed']);
  this.executeCharTest('‚®≥', ['smash product', 'smash product', 'smash product']);
  this.executeCharTest('‚®¥', ['por en semic√≠rculo izquierdo', 'por en semic√≠rculo izquierdo', 'por en semic√≠rculo izquierdo']);
  this.executeCharTest('‚®µ', ['por en semic√≠rculo derecho', 'por en semic√≠rculo derecho', 'por en semic√≠rculo derecho']);
  this.executeCharTest('‚®∂', ['por en c√≠rculo con √°ngulo', 'por en c√≠rculo con √°ngulo', 'por en c√≠rculo con √°ngulo']);
  this.executeCharTest('‚®∑', ['por en anillo', 'por en anillo', 'por en anillo']);
  this.executeCharTest('‚®∏', ['divisi√≥n en c√≠rculo', 'divisi√≥n en c√≠rculo', 'divisi√≥n en c√≠rculo']);
  this.executeCharTest('‚®π', ['m√°s en tri√°ngulo', 'm√°s en tri√°ngulo', 'm√°s en tri√°ngulo']);
  this.executeCharTest('‚®∫', ['menos en tri√°ngulo', 'menos en tri√°ngulo', 'menos en tri√°ngulo']);
  this.executeCharTest('‚®ª', ['por en tri√°ngulo', 'por en tri√°ngulo', 'por en tri√°ngulo']);
  this.executeCharTest('‚®º', ['producto interior', 'producto interior', 'producto interior']);
  this.executeCharTest('‚®Ω', ['righthand-interior-product', 'righthand-interior-product', 'righthand-interior-product']);
  this.executeCharTest('‚®æ', ['z-notation-relational-composition', 'z-notation-relational-composition', 'z-notation-relational-composition']);
  this.executeCharTest('‚®ø', ['coproducto', 'coproducto', 'coproducto']);
  this.executeCharTest('‚©Ä', ['intersecci√≥n con punto', 'intersecci√≥n con punto', 'intersecci√≥n con punto']);
  this.executeCharTest('‚©Å', ['union-with-minus', 'union-with-minus', 'union-with-minus']);
  this.executeCharTest('‚©Ç', ['uni√≥n con barra', 'uni√≥n con barra', 'uni√≥n con barra']);
  this.executeCharTest('‚©É', ['intersecci√≥n con barra', 'intersecci√≥n con barra', 'intersecci√≥n con barra']);
  this.executeCharTest('‚©Ñ', ['intersecci√≥n con and', 'intersecci√≥n con and', 'intersecci√≥n con and']);
  this.executeCharTest('‚©Ö', ['uni√≥n con or', 'uni√≥n con or', 'uni√≥n con or']);
  this.executeCharTest('‚©Ü', ['uni√≥n sobre intersecci√≥n', 'uni√≥n sobre intersecci√≥n', 'uni√≥n sobre intersecci√≥n']);
  this.executeCharTest('‚©á', ['intersecci√≥n sobre uni√≥n', 'intersecci√≥n sobre uni√≥n', 'intersecci√≥n sobre uni√≥n']);
  this.executeCharTest('‚©à', ['uni√≥n sobre barra, sobre intersecci√≥n', 'uni√≥n sobre barra, sobre intersecci√≥n', 'uni√≥n sobre barra, sobre intersecci√≥n']);
  this.executeCharTest('‚©â', ['intersecci√≥n sobre barra, sobre uni√≥n ', 'intersecci√≥n sobre barra, sobre uni√≥n ', 'intersecci√≥n sobre barra, sobre uni√≥n ']);
  this.executeCharTest('‚©ä', ['uni√≥n y uni√≥n', 'uni√≥n y uni√≥n', 'uni√≥n y uni√≥n']);
  this.executeCharTest('‚©ã', ['intersecci√≥n e intersecci√≥n', 'intersecci√≥n e intersecci√≥n', 'intersecci√≥n e intersecci√≥n']);
  this.executeCharTest('‚©å', ['uni√≥n cerrada', 'uni√≥n cerrada', 'uni√≥n cerrada']);
  this.executeCharTest('‚©ç', ['intersecci√≥n cerrada', 'intersecci√≥n cerrada', 'intersecci√≥n cerrada']);
  this.executeCharTest('‚©é', ['double-square-intersection', 'double-square-intersection', 'double-square-intersection']);
  this.executeCharTest('‚©è', ['double-square-union', 'double-square-union', 'double-square-union']);
  this.executeCharTest('‚©ê', ['uni√≥n cerrada con por', 'uni√≥n cerrada con por', 'uni√≥n cerrada con por']);
  this.executeCharTest('‚©ë', ['logical-and-with-dot-above', 'logical-and-with-dot-above', 'logical-and-with-dot-above']);
  this.executeCharTest('‚©í', ['logical-or-with-dot-above', 'logical-or-with-dot-above', 'logical-or-with-dot-above']);
  this.executeCharTest('‚©ì', ['y', 'y', 'y']);
  this.executeCharTest('‚©î', ['o', 'o', 'o']);
  this.executeCharTest('‚©ï', ['two intersecting logical and', 'two intersecting logical and', 'two intersecting logical and']);
  this.executeCharTest('‚©ñ', ['two intersecting logical or', 'two intersecting logical or', 'two intersecting logical or']);
  this.executeCharTest('‚©ó', ['sloping large or', 'sloping large or', 'sloping large or']);
  this.executeCharTest('‚©ò', ['sloping large and', 'sloping large and', 'sloping large and']);
  this.executeCharTest('‚©ô', ['logical-or-overlapping-logical-and', 'logical-or-overlapping-logical-and', 'logical-or-overlapping-logical-and']);
  this.executeCharTest('‚©ö', ['logical and with middle stem', 'logical and with middle stem', 'logical and with middle stem']);
  this.executeCharTest('‚©õ', ['logical or with middle stem', 'logical or with middle stem', 'logical or with middle stem']);
  this.executeCharTest('‚©ú', ['logical and with horizontal dash', 'logical and with horizontal dash', 'logical and with horizontal dash']);
  this.executeCharTest('‚©ù', ['logical or with horizontal dash', 'logical or with horizontal dash', 'logical or with horizontal dash']);
  this.executeCharTest('‚©û', ['logical-and-with-double-overbar', 'logical-and-with-double-overbar', 'logical-and-with-double-overbar']);
  this.executeCharTest('‚©ü', ['logical and with underbar', 'logical and with underbar', 'logical and with underbar']);
  this.executeCharTest('‚©†', ['logical-and-with-double-underbar', 'logical-and-with-double-underbar', 'logical-and-with-double-underbar']);
  this.executeCharTest('‚©°', ['small-vee-with-underbar', 'small-vee-with-underbar', 'small-vee-with-underbar']);
  this.executeCharTest('‚©¢', ['logical-or-with-double-overbar', 'logical-or-with-double-overbar', 'logical-or-with-double-overbar']);
  this.executeCharTest('‚©£', ['logical-or-with-double-underbar', 'logical-or-with-double-underbar', 'logical-or-with-double-underbar']);
  this.executeCharTest('‚©§', ['z-notation-domain-antirestriction', 'z-notation-domain-antirestriction', 'z-notation-domain-antirestriction']);
  this.executeCharTest('‚©•', ['z-notation-range-antirestriction', 'z-notation-range-antirestriction', 'z-notation-range-antirestriction']);
  this.executeCharTest('‚©¶', ['igual con punto suscrito', 'igual con punto suscrito', 'igual con punto suscrito']);
  this.executeCharTest('‚©ß', ['identical-with-dot-above', 'identical-with-dot-above', 'identical-with-dot-above']);
  this.executeCharTest('‚©®', ['triple-horizontal-bar-with-double-vertical-stroke', 'triple-horizontal-bar-with-double-vertical-stroke', 'triple-horizontal-bar-with-double-vertical-stroke']);
  this.executeCharTest('‚©©', ['triple-horizontal-bar-with-triple-vertical-stroke', 'triple-horizontal-bar-with-triple-vertical-stroke', 'triple-horizontal-bar-with-triple-vertical-stroke']);
  this.executeCharTest('‚©™', ['tilde con punto', 'tilde con punto', 'tilde con punto']);
  this.executeCharTest('‚©´', ['tilde-with-rising-dots', 'tilde-with-rising-dots', 'tilde-with-rising-dots']);
  this.executeCharTest('‚©¨', ['similar-minus-similar', 'similar-minus-similar', 'similar-minus-similar']);
  this.executeCharTest('‚©≠', ['congruente con punto', 'congruente con punto', 'congruente con punto']);
  this.executeCharTest('‚©Æ', ['equals-with-asterisk', 'equals-with-asterisk', 'equals-with-asterisk']);
  this.executeCharTest('‚©Ø', ['casi igual con √°ngulo', 'casi igual con √°ngulo', 'casi igual con √°ngulo']);
  this.executeCharTest('‚©∞', ['approximately-equal-or-equal-to', 'approximately-equal-or-equal-to', 'approximately-equal-or-equal-to']);
  this.executeCharTest('‚©±', ['igual con m√°s suscrito', 'igual con m√°s suscrito', 'igual con m√°s suscrito']);
  this.executeCharTest('‚©≤', ['igual con m√°s', 'igual con m√°s', 'igual con m√°s']);
  this.executeCharTest('‚©≥', ['igual con operador tilde', 'igual con operador tilde', 'igual con operador tilde']);
  this.executeCharTest('‚©¥', ['igual con dos puntos', 'igual con dos puntos', 'igual con dos puntos']);
  this.executeCharTest('‚©µ', ['igual doble', 'igual doble', 'igual doble']);
  this.executeCharTest('‚©∂', ['three-consecutive-equals', 'three-consecutive-equals', 'three-consecutive-equals']);
  this.executeCharTest('‚©∑', ['igual entre cuatro puntos', 'igual entre cuatro puntos', 'igual entre cuatro puntos']);
  this.executeCharTest('‚©∏', ['equivalente con cuatro puntos', 'equivalente con cuatro puntos', 'equivalente con cuatro puntos']);
  this.executeCharTest('‚©π', ['menor que con c√≠rculo interior', 'menor que con c√≠rculo interior', 'menor que con c√≠rculo interior']);
  this.executeCharTest('‚©∫', ['mayor que con c√≠rculo interior', 'mayor que con c√≠rculo interior', 'mayor que con c√≠rculo interior']);
  this.executeCharTest('‚©ª', ['menor que con interrogante', 'menor que con interrogante', 'menor que con interrogante']);
  this.executeCharTest('‚©º', ['mayor que con interrogante', 'mayor que con interrogante', 'mayor que con interrogante']);
  this.executeCharTest('‚©Ω', ['estrictamente menor que', 'estrictamente menor que', 'estrictamente menor que']);
  this.executeCharTest('‚©æ', ['estrictamente mayor que', 'estrictamente mayor que', 'estrictamente mayor que']);
  this.executeCharTest('‚©ø', ['estrictamente menor que con punto interior', 'estrictamente menor que con punto interior', 'estrictamente menor que con punto interior']);
  this.executeCharTest('‚™Ä', ['estrictamente mayor que con punto interior', 'estrictamente mayor que con punto interior', 'estrictamente mayor que con punto interior']);
  this.executeCharTest('‚™Å', ['estrictamente menor que con punto', 'estrictamente menor que con punto', 'estrictamente menor que con punto']);
  this.executeCharTest('‚™Ç', ['estrictamente mayor que con punto', 'estrictamente mayor que con punto', 'estrictamente mayor que con punto']);
  this.executeCharTest('‚™É', ['estrictamente menor que con punto', 'estrictamente menor que con punto', 'estrictamente menor que con punto']);
  this.executeCharTest('‚™Ñ', ['estrictamente mayor que con punto', 'estrictamente mayor que con punto', 'estrictamente mayor que con punto']);
  this.executeCharTest('‚™Ö', ['less-than-or-approximate', 'less-than-or-approximate', 'less-than-or-approximate']);
  this.executeCharTest('‚™Ü', ['greater-than-or-approximate', 'greater-than-or-approximate', 'greater-than-or-approximate']);
  this.executeCharTest('‚™á', ['less-than-and-single-line-not-equals', 'less-than-and-single-line-not-equals', 'less-than-and-single-line-not-equals']);
  this.executeCharTest('‚™à', ['greater-than-and-single-line-not-equals', 'greater-than-and-single-line-not-equals', 'greater-than-and-single-line-not-equals']);
  this.executeCharTest('‚™â', ['menor que, pero no aproximado a', 'menor que, pero no aproximado a', 'menor que, pero no aproximado a']);
  this.executeCharTest('‚™ä', ['mayor que, pero no aproximado a', 'mayor que, pero no aproximado a', 'mayor que, pero no aproximado a']);
  this.executeCharTest('‚™ã', ['less-than-above-double-line-equal-above-greater-than', 'less-than-above-double-line-equal-above-greater-than', 'less-than-above-double-line-equal-above-greater-than']);
  this.executeCharTest('‚™å', ['greater-than-above-double-line-equal-above-less-than', 'greater-than-above-double-line-equal-above-less-than', 'greater-than-above-double-line-equal-above-less-than']);
  this.executeCharTest('‚™ç', ['menor, similar o igual a', 'menor, similar o igual a', 'menor, similar o igual a']);
  this.executeCharTest('‚™é', ['mayor, similar o igual a', 'mayor, similar o igual a', 'mayor, similar o igual a']);
  this.executeCharTest('‚™è', ['menor, similar o mayor que', 'menor, similar o mayor que', 'menor, similar o mayor que']);
  this.executeCharTest('‚™ê', ['mayor, similar o menor que', 'mayor, similar o menor que', 'mayor, similar o menor que']);
  this.executeCharTest('‚™ë', ['menor, mayor o igual a', 'menor, mayor o igual a', 'menor, mayor o igual a']);
  this.executeCharTest('‚™í', ['mayor, menor o igual a', 'mayor, menor o igual a', 'mayor, menor o igual a']);
  this.executeCharTest('‚™ì', ['estrictamente menor o mayor que', 'estrictamente menor o mayor que', 'estrictamente menor o mayor que']);
  this.executeCharTest('‚™î', ['estrictamente mayor o menor que', 'estrictamente mayor o menor que', 'estrictamente mayor o menor que']);
  this.executeCharTest('‚™ï', ['slanted-equals-or-less-than', 'slanted-equals-or-less-than', 'slanted-equals-or-less-than']);
  this.executeCharTest('‚™ñ', ['slanted-equals-or-greater-than', 'slanted-equals-or-greater-than', 'slanted-equals-or-greater-than']);
  this.executeCharTest('‚™ó', ['estrictamente menor que con punto interior', 'estrictamente menor que con punto interior', 'estrictamente menor que con punto interior']);
  this.executeCharTest('‚™ò', ['estrictamente mayor que con punto interior', 'estrictamente mayor que con punto interior', 'estrictamente mayor que con punto interior']);
  this.executeCharTest('‚™ô', ['menor o igual a', 'menor o igual a', 'menor o igual a']);
  this.executeCharTest('‚™ö', ['mayor o igual a', 'mayor o igual a', 'mayor o igual a']);
  this.executeCharTest('‚™õ', ['double-line-slanted-equals-or-less-than', 'double-line-slanted-equals-or-less-than', 'double-line-slanted-equals-or-less-than']);
  this.executeCharTest('‚™ú', ['double-line-slanted-equals-or-greater-than', 'double-line-slanted-equals-or-greater-than', 'double-line-slanted-equals-or-greater-than']);
  this.executeCharTest('‚™ù', ['equivalente o menor que', 'equivalente o menor que', 'equivalente o menor que']);
  this.executeCharTest('‚™û', ['mayor o similar a', 'mayor o similar a', 'mayor o similar a']);
  this.executeCharTest('‚™ü', ['similar, menor o igual a', 'similar, menor o igual a', 'similar, menor o igual a']);
  this.executeCharTest('‚™†', ['similar, mayor o igual a', 'similar, mayor o igual a', 'similar, mayor o igual a']);
  this.executeCharTest('‚™°', ['mucho menor que', 'mucho menor que', 'mucho menor que']);
  this.executeCharTest('‚™¢', ['mucho mayor que', 'mucho mayor que', 'mucho mayor que']);
  this.executeCharTest('‚™£', ['double-nested-less-than-with-underbar', 'double-nested-less-than-with-underbar', 'double-nested-less-than-with-underbar']);
  this.executeCharTest('‚™§', ['menor que, mayor que', 'menor que, mayor que', 'menor que, mayor que']);
  this.executeCharTest('‚™•', ['mayor o menor que', 'mayor o menor que', 'mayor o menor que']);
  this.executeCharTest('‚™¶', ['menor que cerrado con curva', 'menor que cerrado con curva', 'menor que cerrado con curva']);
  this.executeCharTest('‚™ß', ['mayor que cerrado con curva', 'mayor que cerrado con curva', 'mayor que cerrado con curva']);
  this.executeCharTest('‚™®', ['estrictamente menor que cerrado con curva', 'estrictamente menor que cerrado con curva', 'estrictamente menor que cerrado con curva']);
  this.executeCharTest('‚™©', ['estrictamente mayor que cerrado con curva', 'estrictamente mayor que cerrado con curva', 'estrictamente mayor que cerrado con curva']);
  this.executeCharTest('‚™™', ['m√°s reducido que', 'm√°s reducido que', 'm√°s reducido que']);
  this.executeCharTest('‚™´', ['m√°s amplio que', 'm√°s amplio que', 'm√°s amplio que']);
  this.executeCharTest('‚™¨', ['m√°s reducido o igual a', 'm√°s reducido o igual a', 'm√°s reducido o igual a']);
  this.executeCharTest('‚™≠', ['m√°s amplio o igual a', 'm√°s amplio o igual a', 'm√°s amplio o igual a']);
  this.executeCharTest('‚™Æ', ['diferencia entre', 'diferencia entre', 'diferencia entre']);
  this.executeCharTest('‚™Ø', ['precede o es igual a', 'precede o es igual a', 'precede o es igual a']);
  this.executeCharTest('‚™∞', ['succeeds-above-single-line-equals', 'succeeds-above-single-line-equals', 'succeeds-above-single-line-equals']);
  this.executeCharTest('‚™±', ['precedes-above-single-line-not-equals', 'precedes-above-single-line-not-equals', 'precedes-above-single-line-not-equals']);
  this.executeCharTest('‚™≤', ['succeeds-above-single-line-not-equals', 'succeeds-above-single-line-not-equals', 'succeeds-above-single-line-not-equals']);
  this.executeCharTest('‚™≥', ['precedes-above-equals', 'precedes-above-equals', 'precedes-above-equals']);
  this.executeCharTest('‚™¥', ['succeeds-above-equals', 'succeeds-above-equals', 'succeeds-above-equals']);
  this.executeCharTest('‚™µ', ['precede estrictamente a', 'precede estrictamente a', 'precede estrictamente a']);
  this.executeCharTest('‚™∂', ['sigue estrictamente a', 'sigue estrictamente a', 'sigue estrictamente a']);
  this.executeCharTest('‚™∑', ['precedes-above-almost-equals', 'precedes-above-almost-equals', 'precedes-above-almost-equals']);
  this.executeCharTest('‚™∏', ['succeeds-above-almost-equals', 'succeeds-above-almost-equals', 'succeeds-above-almost-equals']);
  this.executeCharTest('‚™π', ['precedes-above-not-almost-equals', 'precedes-above-not-almost-equals', 'precedes-above-not-almost-equals']);
  this.executeCharTest('‚™∫', ['succeeds-above-not-almost-equals', 'succeeds-above-not-almost-equals', 'succeeds-above-not-almost-equals']);
  this.executeCharTest('‚™ª', ['precede mucho antes', 'precede mucho antes', 'precede mucho antes']);
  this.executeCharTest('‚™º', ['sigue mucho despu√©s', 'sigue mucho despu√©s', 'sigue mucho despu√©s']);
  this.executeCharTest('‚™Ω', ['subrelaci√≥n de', 'subrelaci√≥n de', 'subrelaci√≥n de']);
  this.executeCharTest('‚™æ', ['contiene como subrelaci√≥n a', 'contiene como subrelaci√≥n a', 'contiene como subrelaci√≥n a']);
  this.executeCharTest('‚™ø', ['incluido con m√°s suscrito', 'incluido con m√°s suscrito', 'incluido con m√°s suscrito']);
  this.executeCharTest('‚´Ä', ['contiene con m√°s suscrito', 'contiene con m√°s suscrito', 'contiene con m√°s suscrito']);
  this.executeCharTest('‚´Å', ['incluido con por suscrito', 'incluido con por suscrito', 'incluido con por suscrito']);
  this.executeCharTest('‚´Ç', ['contiene con por suscrito', 'contiene con por suscrito', 'contiene con por suscrito']);
  this.executeCharTest('‚´É', ['incluido con punto o es igual a', 'incluido con punto o es igual a', 'incluido con punto o es igual a']);
  this.executeCharTest('‚´Ñ', ['contiene con punto o es igual a', 'contiene con punto o es igual a', 'contiene con punto o es igual a']);
  this.executeCharTest('‚´Ö', ['subset-of-above-equals', 'subset-of-above-equals', 'subset-of-above-equals']);
  this.executeCharTest('‚´Ü', ['superset-of-above-equals', 'superset-of-above-equals', 'superset-of-above-equals']);
  this.executeCharTest('‚´á', ['incluido aproximadamente en', 'incluido aproximadamente en', 'incluido aproximadamente en']);
  this.executeCharTest('‚´à', ['contiene aproximadamente a', 'contiene aproximadamente a', 'contiene aproximadamente a']);
  this.executeCharTest('‚´â', ['subset-of-above-almost-equals', 'subset-of-above-almost-equals', 'subset-of-above-almost-equals']);
  this.executeCharTest('‚´ä', ['superset-of-above-almost-equals', 'superset-of-above-almost-equals', 'superset-of-above-almost-equals']);
  this.executeCharTest('‚´ã', ['subset-of-above-not-equals', 'subset-of-above-not-equals', 'subset-of-above-not-equals']);
  this.executeCharTest('‚´å', ['superset-of-above-not-equals', 'superset-of-above-not-equals', 'superset-of-above-not-equals']);
  this.executeCharTest('‚´ç', ['square-left-open-box', 'square-left-open-box', 'square-left-open-box']);
  this.executeCharTest('‚´é', ['square-right-open-box', 'square-right-open-box', 'square-right-open-box']);
  this.executeCharTest('‚´è', ['incluido con cierre en', 'incluido con cierre en', 'incluido con cierre en']);
  this.executeCharTest('‚´ê', ['contiene al cierre del subconjunto', 'contiene al cierre del subconjunto', 'contiene al cierre del subconjunto']);
  this.executeCharTest('‚´ë', ['incluido el cierre o es igual a', 'incluido el cierre o es igual a', 'incluido el cierre o es igual a']);
  this.executeCharTest('‚´í', ['contiene al cierre del subconjunto o es igual a', 'contiene al cierre del subconjunto o es igual a', 'contiene al cierre del subconjunto o es igual a']);
  this.executeCharTest('‚´ì', ['est√° incluido o contiene a', 'est√° incluido o contiene a', 'est√° incluido o contiene a']);
  this.executeCharTest('‚´î', ['contiene o est√° incluido en', 'contiene o est√° incluido en', 'contiene o est√° incluido en']);
  this.executeCharTest('‚´ï', ['incluido doblemente en', 'incluido doblemente en', 'incluido doblemente en']);
  this.executeCharTest('‚´ñ', ['contiene doblemente a', 'contiene doblemente a', 'contiene doblemente a']);
  this.executeCharTest('‚´ó', ['contiene o est√° incluido en', 'contiene o est√° incluido en', 'contiene o est√° incluido en']);
  this.executeCharTest('‚´ò', ['contiene o est√° incluido en', 'contiene o est√° incluido en', 'contiene o est√° incluido en']);
  this.executeCharTest('‚´ô', ['perteneciente dirigido hacia abajo', 'perteneciente dirigido hacia abajo', 'perteneciente dirigido hacia abajo']);
  this.executeCharTest('‚´ö', ['pitchfork with tee top', 'pitchfork with tee top', 'pitchfork with tee top']);
  this.executeCharTest('‚´õ', ['transversal intersection', 'transversal intersection', 'transversal intersection']);
  this.executeCharTest('‚´ú', ['forking', 'forking', 'forking']);
  this.executeCharTest('‚´ù', ['nonforking', 'nonforking', 'nonforking']);
  this.executeCharTest('‚´û', ['short-left-tack', 'short-left-tack', 'short-left-tack']);
  this.executeCharTest('‚´ü', ['short-down-tack', 'short-down-tack', 'short-down-tack']);
  this.executeCharTest('‚´†', ['short-up-tack', 'short-up-tack', 'short-up-tack']);
  this.executeCharTest('‚´°', ['perpendicular-with-s', 'perpendicular-with-s', 'perpendicular-with-s']);
  this.executeCharTest('‚´¢', ['vertical-bar-triple-right-turnstile', 'vertical-bar-triple-right-turnstile', 'vertical-bar-triple-right-turnstile']);
  this.executeCharTest('‚´£', ['double-vertical-bar-left-turnstile', 'double-vertical-bar-left-turnstile', 'double-vertical-bar-left-turnstile']);
  this.executeCharTest('‚´§', ['double left turnstile vertical bar', 'double left turnstile vertical bar', 'double left turnstile vertical bar']);
  this.executeCharTest('‚´•', ['double-vertical-bar-double-left-turnstile', 'double-vertical-bar-double-left-turnstile', 'double-vertical-bar-double-left-turnstile']);
  this.executeCharTest('‚´¶', ['long dash from left member of double vertical', 'long dash from left member of double vertical', 'long dash from left member of double vertical']);
  this.executeCharTest('‚´ß', ['short down tack with overbar', 'short down tack with overbar', 'short down tack with overbar']);
  this.executeCharTest('‚´®', ['barra con perpendicular', 'barra con perpendicular', 'barra con perpendicular']);
  this.executeCharTest('‚´©', ['short up tack above short down tack', 'short up tack above short down tack', 'short up tack above short down tack']);
  this.executeCharTest('‚´™', ['double-down-tack', 'double-down-tack', 'double-down-tack']);
  this.executeCharTest('‚´´', ['double up tack', 'double up tack', 'double up tack']);
  this.executeCharTest('‚´¨', ['double stroke not sign', 'double stroke not sign', 'double stroke not sign']);
  this.executeCharTest('‚´≠', ['reversed double stroke not sign', 'reversed double stroke not sign', 'reversed double stroke not sign']);
  this.executeCharTest('‚´Æ', ['does not divide with reversed negation slash', 'does not divide with reversed negation slash', 'does not divide with reversed negation slash']);
  this.executeCharTest('‚´Ø', ['barra vertical con c√≠rculo', 'barra vertical con c√≠rculo', 'barra vertical con c√≠rculo']);
  this.executeCharTest('‚´∞', ['barra con c√≠rculo inferior', 'barra con c√≠rculo inferior', 'barra con c√≠rculo inferior']);
  this.executeCharTest('‚´±', ['down tack with circle below', 'down tack with circle below', 'down tack with circle below']);
  this.executeCharTest('‚´≤', ['paralela con marca', 'paralela con marca', 'paralela con marca']);
  this.executeCharTest('‚´≥', ['paralela con tilde', 'paralela con tilde', 'paralela con tilde']);
  this.executeCharTest('‚´¥', ['triple-vertical-bar-binary-relation', 'triple-vertical-bar-binary-relation', 'triple-vertical-bar-binary-relation']);
  this.executeCharTest('‚´µ', ['triple-vertical-bar-with-horizontal-stroke', 'triple-vertical-bar-with-horizontal-stroke', 'triple-vertical-bar-with-horizontal-stroke']);
  this.executeCharTest('‚´∂', ['triple-colon', 'triple-colon', 'triple-colon']);
  this.executeCharTest('‚´∑', ['triple-nested-less-than', 'triple-nested-less-than', 'triple-nested-less-than']);
  this.executeCharTest('‚´∏', ['triple-nested-greater-than', 'triple-nested-greater-than', 'triple-nested-greater-than']);
  this.executeCharTest('‚´π', ['double-line-slanted-less-than-or-equal-to', 'double-line-slanted-less-than-or-equal-to', 'double-line-slanted-less-than-or-equal-to']);
  this.executeCharTest('‚´∫', ['double-line-slanted-greater-than-or-equal-to', 'double-line-slanted-greater-than-or-equal-to', 'double-line-slanted-greater-than-or-equal-to']);
  this.executeCharTest('‚´ª', ['triple-solidus-binary-relation', 'triple-solidus-binary-relation', 'triple-solidus-binary-relation']);
  this.executeCharTest('‚´º', ['large-triple-vertical-bar', 'large-triple-vertical-bar', 'large-triple-vertical-bar']);
  this.executeCharTest('‚´Ω', ['double-solidus', 'double-solidus', 'double-solidus']);
  this.executeCharTest('‚´æ', ['white-vertical-bar', 'white-vertical-bar', 'white-vertical-bar']);
  this.executeCharTest('‚´ø', ['white-vertical-bar', 'white-vertical-bar', 'white-vertical-bar']);
  this.executeCharTest('„Äú', ['wave-dash', 'wave-dash', 'wave-dash']);
  this.executeCharTest('Ô∏ê', ['presentation-form-for-vertical-comma', 'presentation-form-for-vertical-comma', 'presentation-form-for-vertical-comma']);
  this.executeCharTest('Ô∏ì', ['presentation-form-for-vertical-colon', 'presentation-form-for-vertical-colon', 'presentation-form-for-vertical-colon']);
  this.executeCharTest('Ô∏î', ['presentation-form-for-vertical-semicolon', 'presentation-form-for-vertical-semicolon', 'presentation-form-for-vertical-semicolon']);
  this.executeCharTest('Ô∏ï', ['presentation-form-for-vertical-exclamation-mark', 'presentation-form-for-vertical-exclamation-mark', 'presentation-form-for-vertical-exclamation-mark']);
  this.executeCharTest('Ô∏ñ', ['presentation-form-for-vertical-question-mark', 'presentation-form-for-vertical-question-mark', 'presentation-form-for-vertical-question-mark']);
  this.executeCharTest('Ô∏ô', ['presentation-form-for-vertical-horizontal-ellipsis', 'presentation-form-for-vertical-horizontal-ellipsis', 'presentation-form-for-vertical-horizontal-ellipsis']);
  this.executeCharTest('Ô∏∞', ['glyph-for-vertical-two-dot-leader', 'glyph-for-vertical-two-dot-leader', 'glyph-for-vertical-two-dot-leader']);
  this.executeCharTest('Ô∏±', ['glyph-for-vertical-em-dash', 'glyph-for-vertical-em-dash', 'glyph-for-vertical-em-dash']);
  this.executeCharTest('Ô∏≤', ['glyph-for-vertical-en-dash', 'glyph-for-vertical-en-dash', 'glyph-for-vertical-en-dash']);
  this.executeCharTest('Ô∏≥', ['glyph-for-vertical-underscore', 'glyph-for-vertical-underscore', 'glyph-for-vertical-underscore']);
  this.executeCharTest('Ô∏¥', ['glyph-for-vertical-wavy-underscore', 'glyph-for-vertical-wavy-underscore', 'glyph-for-vertical-wavy-underscore']);
  this.executeCharTest('ÔπÖ', ['sesame-dot', 'sesame-dot', 'sesame-dot']);
  this.executeCharTest('ÔπÜ', ['white-sesame-dot', 'white-sesame-dot', 'white-sesame-dot']);
  this.executeCharTest('Ôπâ', ['dashed-overscore', 'dashed-overscore', 'dashed-overscore']);
  this.executeCharTest('Ôπä', ['centerline-overscore', 'centerline-overscore', 'centerline-overscore']);
  this.executeCharTest('Ôπã', ['wavy-overscore', 'wavy-overscore', 'wavy-overscore']);
  this.executeCharTest('Ôπå', ['double-wavy-overscore', 'double-wavy-overscore', 'double-wavy-overscore']);
  this.executeCharTest('Ôπç', ['dashed-underscore', 'dashed-underscore', 'dashed-underscore']);
  this.executeCharTest('Ôπé', ['centerline-underscore', 'centerline-underscore', 'centerline-underscore']);
  this.executeCharTest('Ôπè', ['wavy-underscore', 'wavy-underscore', 'wavy-underscore']);
  this.executeCharTest('Ôπê', ['small-comma', 'small-comma', 'small-comma']);
  this.executeCharTest('Ôπí', ['small-period', 'small-period', 'small-period']);
  this.executeCharTest('Ôπî', ['small-semicolon', 'small-semicolon', 'small-semicolon']);
  this.executeCharTest('Ôπï', ['small-colon', 'small-colon', 'small-colon']);
  this.executeCharTest('Ôπñ', ['small-question-mark', 'small-question-mark', 'small-question-mark']);
  this.executeCharTest('Ôπó', ['small-exclamation-mark', 'small-exclamation-mark', 'small-exclamation-mark']);
  this.executeCharTest('Ôπò', ['small-em-dash', 'small-em-dash', 'small-em-dash']);
  this.executeCharTest('Ôπü', ['small-number-sign', 'small-number-sign', 'small-number-sign']);
  this.executeCharTest('Ôπ†', ['small-ampersand', 'small-ampersand', 'small-ampersand']);
  this.executeCharTest('Ôπ°', ['small-asterisk', 'small-asterisk', 'small-asterisk']);
  this.executeCharTest('Ôπ¢', ['small-plus-sign', 'small-plus-sign', 'small-plus-sign']);
  this.executeCharTest('Ôπ£', ['small-hyphen-minus', 'small-hyphen-minus', 'small-hyphen-minus']);
  this.executeCharTest('Ôπ§', ['small-less-than-sign', 'small-less-than-sign', 'small-less-than-sign']);
  this.executeCharTest('Ôπ•', ['small-greater-than-sign', 'small-greater-than-sign', 'small-greater-than-sign']);
  this.executeCharTest('Ôπ¶', ['small-equals', 'small-equals', 'small-equals']);
  this.executeCharTest('Ôπ®', ['divisi√≥n entera', 'divisi√≥n entera', 'divisi√≥n entera']);
  this.executeCharTest('Ôπ©', ['small-dollar-sign', 'small-dollar-sign', 'small-dollar-sign']);
  this.executeCharTest('Ôπ™', ['small-percent-sign', 'small-percent-sign', 'small-percent-sign']);
  this.executeCharTest('Ôπ´', ['small-commercial-at', 'small-commercial-at', 'small-commercial-at']);
  this.executeCharTest('ÔºÅ', ['exclamation-mark', 'exclamation-mark', 'exclamation-mark']);
  this.executeCharTest('ÔºÇ', ['quotation-mark', 'quotation-mark', 'quotation-mark']);
  this.executeCharTest('ÔºÉ', ['number-sign', 'number-sign', 'number-sign']);
  this.executeCharTest('ÔºÑ', ['dollar-sign', 'dollar-sign', 'dollar-sign']);
  this.executeCharTest('ÔºÖ', ['percent-sign', 'percent-sign', 'percent-sign']);
  this.executeCharTest('ÔºÜ', ['ampersand', 'ampersand', 'ampersand']);
  this.executeCharTest('Ôºá', ['apostrophe', 'apostrophe', 'apostrophe']);
  this.executeCharTest('Ôºä', ['asterisk', 'asterisk', 'asterisk']);
  this.executeCharTest('Ôºã', ['plus-sign', 'plus-sign', 'plus-sign']);
  this.executeCharTest('Ôºå', ['comma', 'comma', 'comma']);
  this.executeCharTest('Ôºç', ['hyphen-minus', 'hyphen-minus', 'hyphen-minus']);
  this.executeCharTest('Ôºé', ['period', 'period', 'period']);
  this.executeCharTest('Ôºè', ['slash', 'slash', 'slash']);
  this.executeCharTest('Ôºö', ['colon', 'colon', 'colon']);
  this.executeCharTest('Ôºõ', ['semicolon', 'semicolon', 'semicolon']);
  this.executeCharTest('Ôºú', ['less-than', 'less-than', 'less-than']);
  this.executeCharTest('Ôºù', ['equals', 'equals', 'equals']);
  this.executeCharTest('Ôºû', ['greater-than', 'greater-than', 'greater-than']);
  this.executeCharTest('Ôºü', ['question-mark', 'question-mark', 'question-mark']);
  this.executeCharTest('Ôº†', ['commercial-at', 'commercial-at', 'commercial-at']);
  this.executeCharTest('Ôºº', ['backslash', 'backslash', 'backslash']);
  this.executeCharTest('Ôºæ', ['caret', 'caret', 'caret']);
  this.executeCharTest('Ôºø', ['bar', 'bar', 'bar']);
  this.executeCharTest('ÔΩÄ', ['grave', 'grave', 'grave']);
  this.executeCharTest('ÔΩú', ['barra vertical', 'barra vertical', 'barra vertical']);
  this.executeCharTest('ÔΩû', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('Ôø†', ['cent-sign', 'cent-sign', 'cent-sign']);
  this.executeCharTest('Ôø°', ['pound-sign', 'pound-sign', 'pound-sign']);
  this.executeCharTest('Ôø¢', ['not-sign', 'not-sign', 'not-sign']);
  this.executeCharTest('Ôø£', ['bar', 'bar', 'bar']);
  this.executeCharTest('Ôø§', ['broken-vertical-bar', 'broken-vertical-bar', 'broken-vertical-bar']);
  this.executeCharTest('Ôø•', ['yen-sign', 'yen-sign', 'yen-sign']);
  this.executeCharTest('Ôø¶', ['won-sign', 'won-sign', 'won-sign']);
  this.executeCharTest('Ôø®', ['halfwidth-forms-light-vertical', 'halfwidth-forms-light-vertical', 'halfwidth-forms-light-vertical']);
  this.executeCharTest('Ôø≠', ['halfwidth-black-square', 'halfwidth-black-square', 'halfwidth-black-square']);
  this.executeCharTest('ÔøÆ', ['halfwidth-white-circle', 'halfwidth-white-circle', 'halfwidth-white-circle']);
  this.executeCharTest(' ', ['space', 'space', 'space']);
  this.executeCharTest('¬†', [' ', ' ', ' ']);
  this.executeCharTest('¬≠', ['gui√≥n corto', 'gui√≥n corto', 'gui√≥n corto']);
  this.executeCharTest('‚ÄÄ', ['en quad', 'en quad', 'en quad']);
  this.executeCharTest('‚ÄÅ', ['em quad', 'em quad', 'em quad']);
  this.executeCharTest('‚ÄÇ', ['‚ÄÇ', '‚ÄÇ', '‚ÄÇ']);
  this.executeCharTest('‚ÄÉ', ['‚ÄÉ', '‚ÄÉ', '‚ÄÉ']);
  this.executeCharTest('‚ÄÑ', ['‚ÄÑ', '‚ÄÑ', '‚ÄÑ']);
  this.executeCharTest('‚ÄÖ', ['‚ÄÖ', '‚ÄÖ', '‚ÄÖ']);
  this.executeCharTest('‚ÄÜ', ['six per em space', 'six per em space', 'six per em space']);
  this.executeCharTest('‚Äá', ['‚Äá', '‚Äá', '‚Äá']);
  this.executeCharTest('‚Äà', ['‚Äà', '‚Äà', '‚Äà']);
  this.executeCharTest('‚Äâ', ['‚Äâ', '‚Äâ', '‚Äâ']);
  this.executeCharTest('‚Ää', ['‚Ää', '‚Ää', '‚Ää']);
  this.executeCharTest('‚Äã', ['‚Äã', '‚Äã', '‚Äã']);
  this.executeCharTest('‚Äå', ['ancho de cero no ensamblador', 'ancho de cero no ensamblador', 'ancho de cero no ensamblador']);
  this.executeCharTest('‚Äç', ['ancho de cero ensamblador', 'ancho de cero ensamblador', 'ancho de cero ensamblador']);
  this.executeCharTest('‚Äé', ['marca de izquierda a derecha', 'marca de izquierda a derecha', 'marca de izquierda a derecha']);
  this.executeCharTest('‚Äè', ['marca de derecha a izquierda', 'marca de derecha a izquierda', 'marca de derecha a izquierda']);
  this.executeCharTest('‚Ä®', ['line separator', 'line separator', 'line separator']);
  this.executeCharTest('‚Ä©', ['paragraph separator', 'paragraph separator', 'paragraph separator']);
  this.executeCharTest('‚Ä™', ['left to right embedding', 'left to right embedding', 'left to right embedding']);
  this.executeCharTest('‚Ä´', ['right to left embedding', 'right to left embedding', 'right to left embedding']);
  this.executeCharTest('‚Ä¨', ['pop directional formatting', 'pop directional formatting', 'pop directional formatting']);
  this.executeCharTest('‚Ä≠', ['left to right override', 'left to right override', 'left to right override']);
  this.executeCharTest('‚ÄÆ', ['right to left override', 'right to left override', 'right to left override']);
  this.executeCharTest('‚ÄØ', ['narrow no break space', 'narrow no break space', 'narrow no break space']);
  this.executeCharTest('‚Åü', ['‚Åü', '‚Åü', '‚Åü']);
  this.executeCharTest('‚Å†', ['‚Å†', '‚Å†', '‚Å†']);
  this.executeCharTest('‚Å°', ['de', 'de', 'de']);
  this.executeCharTest('‚Å¢', ['por', 'por', 'por']);
  this.executeCharTest('‚Å£', ['coma', 'coma', 'coma']);
  this.executeCharTest('‚Å§', ['m√°s', 'm√°s', 'm√°s']);
  this.executeCharTest('‚Å™', ['inhibit symmetric swapping', 'inhibit symmetric swapping', 'inhibit symmetric swapping']);
  this.executeCharTest('‚Å´', ['activate symmetric swapping', 'activate symmetric swapping', 'activate symmetric swapping']);
  this.executeCharTest('‚ÅÆ', ['national digit shapes', 'national digit shapes', 'national digit shapes']);
  this.executeCharTest('‚ÅØ', ['nominal digit shapes', 'nominal digit shapes', 'nominal digit shapes']);
  this.executeCharTest('Ôªø', ['Ôªø', 'Ôªø', 'Ôªø']);
  this.executeCharTest('Ôøπ', ['interlinear annotation anchor', 'interlinear annotation anchor', 'interlinear annotation anchor']);
  this.executeCharTest('Ôø∫', ['interlinear annotation separator', 'interlinear annotation separator', 'interlinear annotation separator']);
  this.executeCharTest('Ôøª', ['interlinear annotation terminator', 'interlinear annotation terminator', 'interlinear annotation terminator']);
  this.executeCharTest('‚è®', ['decimal exponent symbol', 'decimal exponent symbol', 'decimal exponent symbol']);
  this.executeCharTest('‚òÖ', ['estrella rellena', 'estrella rellena', 'estrella rellena']);
  this.executeCharTest('‚òÜ', ['estrella vac√≠a', 'estrella vac√≠a', 'estrella vac√≠a']);
  this.executeCharTest('‚ö™', ['white circle', 'white circle', 'white circle']);
  this.executeCharTest('‚ö´', ['black circle', 'black circle', 'black circle']);
  this.executeCharTest('‚úÖ', ['white check', 'white check', 'white check']);
  this.executeCharTest('‚úì', ['check mark', 'check mark', 'check mark']);
  this.executeCharTest('‚úî', ['heavy check', 'heavy check', 'heavy check']);
  this.executeCharTest('‚úï', ['multiplication x', 'multiplication x', 'multiplication x']);
  this.executeCharTest('‚úñ', ['heavy multiplication x', 'heavy multiplication x', 'heavy multiplication x']);
  this.executeCharTest('‚úó', ['ballot x', 'ballot x', 'ballot x']);
  this.executeCharTest('‚úò', ['heavy ballot x', 'heavy ballot x', 'heavy ballot x']);
  this.executeCharTest('‚úõ', ['open center cross', 'open center cross', 'open center cross']);
  this.executeCharTest('‚úú', ['heavy open center cross', 'heavy open center cross', 'heavy open center cross']);
  this.executeCharTest('‚ú†', ['cruz de Malta', 'cruz de Malta', 'cruz de Malta']);
  this.executeCharTest('‚ú°', ['star of david', 'star of david', 'star of david']);
  this.executeCharTest('‚ú¢', ['four teardrop spoked asterisk', 'four teardrop spoked asterisk', 'four teardrop spoked asterisk']);
  this.executeCharTest('‚ú£', ['four balloon spoked asterisk', 'four balloon spoked asterisk', 'four balloon spoked asterisk']);
  this.executeCharTest('‚ú§', ['heavy four balloon spoked asterisk', 'heavy four balloon spoked asterisk', 'heavy four balloon spoked asterisk']);
  this.executeCharTest('‚ú•', ['four club spoked asterisk', 'four club spoked asterisk', 'four club spoked asterisk']);
  this.executeCharTest('‚ú¶', ['black four pointed star', 'black four pointed star', 'black four pointed star']);
  this.executeCharTest('‚úß', ['white four pointed star', 'white four pointed star', 'white four pointed star']);
  this.executeCharTest('‚ú®', ['sparkles', 'sparkles', 'sparkles']);
  this.executeCharTest('‚ú©', ['stress outlined white star', 'stress outlined white star', 'stress outlined white star']);
  this.executeCharTest('‚ú™', ['circled white star', 'circled white star', 'circled white star']);
  this.executeCharTest('‚ú´', ['open center black star', 'open center black star', 'open center black star']);
  this.executeCharTest('‚ú¨', ['black center white star', 'black center white star', 'black center white star']);
  this.executeCharTest('‚ú≠', ['outlined black star', 'outlined black star', 'outlined black star']);
  this.executeCharTest('‚úÆ', ['heavy outlined black star', 'heavy outlined black star', 'heavy outlined black star']);
  this.executeCharTest('‚úØ', ['pinwheel star', 'pinwheel star', 'pinwheel star']);
  this.executeCharTest('‚ú∞', ['shadowed white star', 'shadowed white star', 'shadowed white star']);
  this.executeCharTest('‚ú±', ['heavy asterisk', 'heavy asterisk', 'heavy asterisk']);
  this.executeCharTest('‚ú≤', ['open center asterisk', 'open center asterisk', 'open center asterisk']);
  this.executeCharTest('‚ú≥', ['eight spoked asterisk', 'eight spoked asterisk', 'eight spoked asterisk']);
  this.executeCharTest('‚ú¥', ['eight pointed black star', 'eight pointed black star', 'eight pointed black star']);
  this.executeCharTest('‚úµ', ['eight pointed pinwheel star', 'eight pointed pinwheel star', 'eight pointed pinwheel star']);
  this.executeCharTest('‚ú∂', ['estrella rellena de seis puntas', 'estrella rellena de seis puntas', 'estrella rellena de seis puntas']);
  this.executeCharTest('‚úπ', ['twelve pointed black star', 'twelve pointed black star', 'twelve pointed black star']);
  this.executeCharTest('‚ú∫', ['sixteen pointed asterisk', 'sixteen pointed asterisk', 'sixteen pointed asterisk']);
  this.executeCharTest('‚úª', ['teardrop spoked asterisk', 'teardrop spoked asterisk', 'teardrop spoked asterisk']);
  this.executeCharTest('‚úº', ['open center teardrop spoked asterisk', 'open center teardrop spoked asterisk', 'open center teardrop spoked asterisk']);
  this.executeCharTest('‚úΩ', ['heavy teardrop spoked asterisk', 'heavy teardrop spoked asterisk', 'heavy teardrop spoked asterisk']);
  this.executeCharTest('‚úæ', ['six petalled black and white florette', 'six petalled black and white florette', 'six petalled black and white florette']);
  this.executeCharTest('‚úø', ['black florette', 'black florette', 'black florette']);
  this.executeCharTest('‚ùÄ', ['white florette', 'white florette', 'white florette']);
  this.executeCharTest('‚ùÅ', ['eight petalled outlined black florette', 'eight petalled outlined black florette', 'eight petalled outlined black florette']);
  this.executeCharTest('‚ùÇ', ['circled open center eight pointed star', 'circled open center eight pointed star', 'circled open center eight pointed star']);
  this.executeCharTest('‚ùÉ', ['heavy teardrop spoked pinwheel asterisk', 'heavy teardrop spoked pinwheel asterisk', 'heavy teardrop spoked pinwheel asterisk']);
  this.executeCharTest('‚ùÑ', ['snowflake', 'snowflake', 'snowflake']);
  this.executeCharTest('‚ùÖ', ['tight trifoliate snowflake', 'tight trifoliate snowflake', 'tight trifoliate snowflake']);
  this.executeCharTest('‚ùÜ', ['heavy chevron snowflake', 'heavy chevron snowflake', 'heavy chevron snowflake']);
  this.executeCharTest('‚ùá', ['sparkle', 'sparkle', 'sparkle']);
  this.executeCharTest('‚ùà', ['heavy sparkle', 'heavy sparkle', 'heavy sparkle']);
  this.executeCharTest('‚ùâ', ['balloon spoked asterisk', 'balloon spoked asterisk', 'balloon spoked asterisk']);
  this.executeCharTest('‚ùä', ['eight teardrop spoked propeller asterisk', 'eight teardrop spoked propeller asterisk', 'eight teardrop spoked propeller asterisk']);
  this.executeCharTest('‚ùã', ['heavy eight teardrop spoked propeller asterisk', 'heavy eight teardrop spoked propeller asterisk', 'heavy eight teardrop spoked propeller asterisk']);
  this.executeCharTest('‚ùå', ['cross mark', 'cross mark', 'cross mark']);
  this.executeCharTest('‚ùç', ['shadowed white circle', 'shadowed white circle', 'shadowed white circle']);
};


sre.MathspeakCharSpanishTest.prototype.testMathspeakFunctions = function() {
  this.executeCharTest('deg', ['grados', 'grados', 'grados']);
  this.executeCharTest('det', ['determinante', 'determinante', 'determinante']);
  this.executeCharTest('dim', ['dimensi√≥n', 'dimensi√≥n', 'dimensi√≥n']);
  this.executeCharTest('hom', ['homomorfismo', 'homomorfismo', 'homomorfismo']);
  this.executeCharTest('Hom', ['homomorfismo', 'homomorfismo', 'homomorfismo']);
  this.executeCharTest('ker', ['kernel', 'kernel', 'kernel']);
  this.executeCharTest('Tr', ['traza', 'traza', 'traza']);
  this.executeCharTest('tr', ['traza', 'traza', 'traza']);
  this.executeCharTest('log', ['logaritmo', 'logaritmo', 'logaritmo']);
  this.executeCharTest('ln', ['logaritmo neperiano', 'logaritmo neperiano', 'logaritmo neperiano']);
  this.executeCharTest('lg', ['logaritmo base 10', 'logaritmo base 10', 'logaritmo base 10']);
  this.executeCharTest('exp', ['exponente', 'exponente', 'exponente']);
  this.executeCharTest('expt', ['exponente', 'exponente', 'exponente']);
  this.executeCharTest('gcd', ['MCD', 'MCD', 'MCD']);
  this.executeCharTest('lcm', ['mcm', 'mcm', 'mcm']);
  this.executeCharTest('arg', ['argumento', 'argumento', 'argumento']);
  this.executeCharTest('im', ['parte imaginaria', 'parte imaginaria', 'parte imaginaria']);
  this.executeCharTest('re', ['residuo', 'residuo', 'residuo']);
  this.executeCharTest('inf', ['extremo inferior', 'extremo inferior', 'extremo inferior']);
  this.executeCharTest('lim', ['l√≠mite', 'l√≠mite', 'l√≠mite']);
  this.executeCharTest('lim inf', ['l√≠mite inferior', 'l√≠mite inferior', 'l√≠mite inferior']);
  this.executeCharTest('liminf', ['l√≠mite inferior', 'l√≠mite inferior', 'l√≠mite inferior']);
  this.executeCharTest('lim sup', ['l√≠mite superior', 'l√≠mite superior', 'l√≠mite superior']);
  this.executeCharTest('limsup', ['l√≠mite superior', 'l√≠mite superior', 'l√≠mite superior']);
  this.executeCharTest('max', ['m√°ximo', 'm√°ximo', 'm√°ximo']);
  this.executeCharTest('min', ['m√≠nimo', 'm√≠nimo', 'm√≠nimo']);
  this.executeCharTest('sup', ['superior', 'superior', 'superior']);
  this.executeCharTest('injlim', ['l√≠mite directo', 'l√≠mite directo', 'l√≠mite directo']);
  this.executeCharTest('inj lim', ['l√≠mite directo', 'l√≠mite directo', 'l√≠mite directo']);
  this.executeCharTest('projlim', ['l√≠mite inverso', 'l√≠mite inverso', 'l√≠mite inverso']);
  this.executeCharTest('proj lim', ['l√≠mite inverso', 'l√≠mite inverso', 'l√≠mite inverso']);
  this.executeCharTest('mod', ['m√≥dulo', 'm√≥dulo', 'm√≥dulo']);
  this.executeCharTest('Pr', ['probabilidad', 'probabilidad', 'probabilidad']);
  this.executeCharTest('cosh', ['coseno hiperb√≥lico', 'coseno hiperb√≥lico', 'coseno hiperb√≥lico']);
  this.executeCharTest('coth', ['cotangente hiperb√≥lica', 'cotangente hiperb√≥lica', 'cotangente hiperb√≥lica']);
  this.executeCharTest('csch', ['cosecante hiperb√≥lica', 'cosecante hiperb√≥lica', 'cosecante hiperb√≥lica']);
  this.executeCharTest('sech', ['secante hiperb√≥lica', 'secante hiperb√≥lica', 'secante hiperb√≥lica']);
  this.executeCharTest('sinh', ['seno hiperb√≥lico', 'seno hiperb√≥lico', 'seno hiperb√≥lico']);
  this.executeCharTest('tanh', ['tangente hiperb√≥lica', 'tangente hiperb√≥lica', 'tangente hiperb√≥lica']);
  this.executeCharTest('arcosh', ['area coseno hiperb√≥lico', 'area coseno hiperb√≥lico', 'area coseno hiperb√≥lico']);
  this.executeCharTest('arccosh', ['area coseno hiperb√≥lico', 'area coseno hiperb√≥lico', 'area coseno hiperb√≥lico']);
  this.executeCharTest('arcoth', ['area cotangente hiperb√≥lica', 'area cotangente hiperb√≥lica', 'area cotangente hiperb√≥lica']);
  this.executeCharTest('arccoth', ['area cotangente hiperb√≥lica', 'area cotangente hiperb√≥lica', 'area cotangente hiperb√≥lica']);
  this.executeCharTest('arcsch', ['area cosecante hiperb√≥lica', 'area cosecante hiperb√≥lica', 'area cosecante hiperb√≥lica']);
  this.executeCharTest('arccsch', ['area cosecante hiperb√≥lica', 'area cosecante hiperb√≥lica', 'area cosecante hiperb√≥lica']);
  this.executeCharTest('arsech', ['area secante hiperb√≥lica', 'area secante hiperb√≥lica', 'area secante hiperb√≥lica']);
  this.executeCharTest('arcsech', ['area secante hiperb√≥lica', 'area secante hiperb√≥lica', 'area secante hiperb√≥lica']);
  this.executeCharTest('arsinh', ['area seno hiperb√≥lico', 'area seno hiperb√≥lico', 'area seno hiperb√≥lico']);
  this.executeCharTest('arcsinh', ['area seno hiperb√≥lico', 'area seno hiperb√≥lico', 'area seno hiperb√≥lico']);
  this.executeCharTest('artanh', ['area tangente hiperb√≥lica', 'area tangente hiperb√≥lica', 'area tangente hiperb√≥lica']);
  this.executeCharTest('arctanh', ['area tangente hiperb√≥lica', 'area tangente hiperb√≥lica', 'area tangente hiperb√≥lica']);
  this.executeCharTest('cos', ['coseno', 'coseno', 'coseno']);
  this.executeCharTest('cosine', ['coseno', 'coseno', 'coseno']);
  this.executeCharTest('cot', ['cotangente', 'cotangente', 'cotangente']);
  this.executeCharTest('csc', ['cosecante', 'cosecante', 'cosecante']);
  this.executeCharTest('sec', ['secant', 'secant', 'secant']);
  this.executeCharTest('sin', ['seno', 'seno', 'seno']);
  this.executeCharTest('sine', ['seno', 'seno', 'seno']);
  this.executeCharTest('tan', ['tangente', 'tangente', 'tangente']);
  this.executeCharTest('arccos', ['arco coseno', 'arco coseno', 'arco coseno']);
  this.executeCharTest('arccot', ['arco cotangente', 'arco cotangente', 'arco cotangente']);
  this.executeCharTest('arccsc', ['arco cosecante', 'arco cosecante', 'arco cosecante']);
  this.executeCharTest('arcsec', ['arco secante', 'arco secante', 'arco secante']);
  this.executeCharTest('arcsin', ['arco seno', 'arco seno', 'arco seno']);
  this.executeCharTest('arctan', ['arco tangente', 'arco tangente', 'arco tangente']);
  this.executeCharTest('sen', ['seno', 'seno', 'seno']);
};


sre.MathspeakCharSpanishTest.prototype.testMathspeakUnits = function() {
  this.executeUnitTest('W', ['watt', 'watt', 'watt']);
  this.executeUnitTest('w', ['watt', 'watt', 'watt']);
  this.executeUnitTest('kw', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('kW', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('mw', ['miliwatt', 'miliwatt', 'miliwatt']);
  this.executeUnitTest('mW', ['miliwatt', 'miliwatt', 'miliwatt']);
  this.executeUnitTest('kwh', ['kilowatt hora', 'kilowatt hora', 'kilowatt hora']);
  this.executeUnitTest('kWh', ['kilowatt hora', 'kilowatt hora', 'kilowatt hora']);
  this.executeUnitTest('J', ['Joules', 'Joules', 'Joules']);
  this.executeUnitTest('N', ['Newton', 'Newton', 'Newton']);
  this.executeUnitTest('A', ['Ampere', 'Ampere', 'Ampere']);
  this.executeUnitTest('V', ['Voltio', 'Voltio', 'Voltio']);
  this.executeUnitTest('¬µŒ©', ['microohmio', 'microohmio', 'microohmio']);
  this.executeUnitTest('mŒ©', ['miliohmio', 'miliohmio', 'miliohmio']);
  this.executeUnitTest('Œ©', ['ohmio', 'ohmio', 'ohmio']);
  this.executeUnitTest('Ohm', ['ohmio', 'ohmio', 'ohmio']);
  this.executeUnitTest('kŒ©', ['kiloohmio', 'kiloohmio', 'kiloohmio']);
  this.executeUnitTest('KŒ©', ['kiloohmio', 'kiloohmio', 'kiloohmio']);
  this.executeUnitTest('MŒ©', ['megaohmio', 'megaohmio', 'megaohmio']);
  this.executeUnitTest('GŒ©', ['gigaohmio', 'gigaohmio', 'gigaohmio']);
  this.executeUnitTest('mm', ['mil√≠metro', 'mil√≠metro', 'mil√≠metro']);
  this.executeUnitTest('cm', ['cent√≠metro', 'cent√≠metro', 'cent√≠metro']);
  this.executeUnitTest('m', ['metro', 'metro', 'metro']);
  this.executeUnitTest('km', ['kil√≥metro', 'kil√≥metro', 'kil√≥metro']);
  this.executeUnitTest('ft', ['pies', 'pies', 'pies']);
  this.executeUnitTest('ft.', ['pies', 'pies', 'pies']);
  this.executeUnitTest('in', ['pulgada', 'pulgada', 'pulgada']);
  this.executeUnitTest('in.', ['pulgada', 'pulgada', 'pulgada']);
  this.executeUnitTest('mi', ['milla', 'milla', 'milla']);
  this.executeUnitTest('mi.', ['milla', 'milla', 'milla']);
  this.executeUnitTest('yd', ['yarda', 'yarda', 'yarda']);
  this.executeUnitTest('yd.', ['yarda', 'yarda', 'yarda']);
  this.executeUnitTest('n.m.', ['millas n√°uticas', 'millas n√°uticas', 'millas n√°uticas']);
  this.executeUnitTest('b', ['bit', 'bit', 'bit']);
  this.executeUnitTest('B', ['byte', 'byte', 'byte']);
  this.executeUnitTest('KB', ['kilobyte', 'kilobyte', 'kilobyte']);
  this.executeUnitTest('MB', ['megabyte', 'megabyte', 'megabyte']);
  this.executeUnitTest('GB', ['gigabyte', 'gigabyte', 'gigabyte']);
  this.executeUnitTest('TB', ['terabyte', 'terabyte', 'terabyte']);
  this.executeUnitTest('doz', ['docena', 'docena', 'docena']);
  this.executeUnitTest('doz.', ['docena', 'docena', 'docena']);
  this.executeUnitTest('dz', ['docena', 'docena', 'docena']);
  this.executeUnitTest('dz.', ['docena', 'docena', 'docena']);
  this.executeUnitTest('sq', ['al cuadrado', 'al cuadrado', 'al cuadrado']);
  this.executeUnitTest('sq.', ['al cuadrado', 'al cuadrado', 'al cuadrado']);
  this.executeUnitTest('ha', ['hectarea', 'hectarea', 'hectarea']);
  this.executeUnitTest('kt', ['nudo', 'nudo', 'nudo']);
  this.executeUnitTest('kt.', ['nudo', 'nudo', 'nudo']);
  this.executeUnitTest('mph', ['millas por hora', 'millas por hora', 'millas por hora']);
  this.executeUnitTest('rpm', ['revoluciones por minuto', 'revoluciones por minuto', 'revoluciones por minuto']);
  this.executeUnitTest('kmh', ['kil√≥metros por hora', 'kil√≥metros por hora', 'kil√≥metros por hora']);
  this.executeUnitTest('F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('F.', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('¬∞F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('C', ['cent√≠grados', 'cent√≠grados', 'cent√≠grados']);
  this.executeUnitTest('¬∞C', ['cent√≠grados', 'cent√≠grados', 'cent√≠grados']);
  this.executeUnitTest('K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('¬∞K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('ns', ['nanosegundos', 'nanosegundos', 'nanosegundos']);
  this.executeUnitTest('¬µs', ['microsegundos', 'microsegundos', 'microsegundos']);
  this.executeUnitTest('ms', ['milisegundos', 'milisegundos', 'milisegundos']);
  this.executeUnitTest('s', ['segundos', 'segundos', 'segundos']);
  this.executeUnitTest('min', ['minutos', 'minutos', 'minutos']);
  this.executeUnitTest('h', ['hora', 'hora', 'hora']);
  this.executeUnitTest('hr', ['hora', 'hora', 'hora']);
  this.executeUnitTest('bbl.', ['barrile', 'barrile', 'barrile']);
  this.executeUnitTest('bbl', ['barrile', 'barrile', 'barrile']);
  this.executeUnitTest('cu', ['c√∫bico', 'c√∫bico', 'c√∫bico']);
  this.executeUnitTest('cu.', ['c√∫bico', 'c√∫bico', 'c√∫bico']);
  this.executeUnitTest('fl. oz.', ['onzas l√≠quidas', 'onzas l√≠quidas', 'onzas l√≠quidas']);
  this.executeUnitTest('gal', ['galone', 'galone', 'galone']);
  this.executeUnitTest('gal.', ['galone', 'galone', 'galone']);
  this.executeUnitTest('pt', ['pinta', 'pinta', 'pinta']);
  this.executeUnitTest('pt.', ['pinta', 'pinta', 'pinta']);
  this.executeUnitTest('qt', ['quart', 'quart', 'quart']);
  this.executeUnitTest('qt.', ['quart', 'quart', 'quart']);
  this.executeUnitTest('tbsp', ['cuchara', 'cuchara', 'cuchara']);
  this.executeUnitTest('tbsp.', ['cuchara', 'cuchara', 'cuchara']);
  this.executeUnitTest('tsp', ['cucharilla', 'cucharilla', 'cucharilla']);
  this.executeUnitTest('tsp.', ['cucharilla', 'cucharilla', 'cucharilla']);
  this.executeUnitTest('cc', ['cent√≠metros c√∫bicos', 'cent√≠metros c√∫bicos', 'cent√≠metros c√∫bicos']);
  this.executeUnitTest('kl', ['kilolitro', 'kilolitro', 'kilolitro']);
  this.executeUnitTest('l', ['litro', 'litro', 'litro']);
  this.executeUnitTest('ml', ['mililitro', 'mililitro', 'mililitro']);
  this.executeUnitTest('lb', ['libra', 'libra', 'libra']);
  this.executeUnitTest('lb.', ['libra', 'libra', 'libra']);
  this.executeUnitTest('LT', ['libras imperiales', 'libras imperiales', 'libras imperiales']);
  this.executeUnitTest('L.T.', ['libras imperiales', 'libras imperiales', 'libras imperiales']);
  this.executeUnitTest('oz', ['onza', 'onza', 'onza']);
  this.executeUnitTest('oz.', ['onza', 'onza', 'onza']);
  this.executeUnitTest('g', ['gramo', 'gramo', 'gramo']);
  this.executeUnitTest('gr', ['gramo', 'gramo', 'gramo']);
  this.executeUnitTest('kg', ['kilogramo', 'kilogramo', 'kilogramo']);
  this.executeUnitTest('mcg', ['microgramo', 'microgramo', 'microgramo']);
  this.executeUnitTest('¬µg', ['microgramo', 'microgramo', 'microgramo']);
  this.executeUnitTest('mg', ['miligramo', 'miligramo', 'miligramo']);
  this.executeUnitTest('t', ['tonelada', 'tonelada', 'tonelada']);
  this.executeUnitTest('T', ['tonelada', 'tonelada', 'tonelada']);
};
