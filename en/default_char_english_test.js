// Copyright 2019 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract class for test cases of single characters.
 * @author Volker.Sorge@gmail.com (Volker Sorge)
 */

goog.provide('sre.DefaultCharEnglishTest');

goog.require('sre.AbstractCharacterTest');



/**
 * @constructor
 * @extends {sre.AbstractCharacterTest}
 */
sre.DefaultCharEnglishTest = function() {
  sre.DefaultCharEnglishTest.base(this, 'constructor');

  this.locale = 'en';
  this.domain = 'default';
  this.semantics = true;
  
  /**
   * @type {Array.<string>}
   */
  this.styles = ['default', 'short', 'alternative'];

  this.setActive('DefaultCharactersEnglish');
};
goog.inherits(sre.DefaultCharEnglishTest, sre.AbstractCharacterTest);

                                            
sre.DefaultCharEnglishTest.prototype.testChars = function() {
  this.executeCharTest('0', ['digit zero', 'zero', 'zero']);
  this.executeCharTest('1', ['digit one', 'one', 'one']);
  this.executeCharTest('2', ['digit two', 'two', 'two']);
  this.executeCharTest('3', ['digit three', 'three', 'three']);
  this.executeCharTest('4', ['digit four', 'four', 'four']);
  this.executeCharTest('5', ['digit five', 'five', 'five']);
  this.executeCharTest('6', ['digit six', 'six', 'six']);
  this.executeCharTest('7', ['digit seven', 'seven', 'seven']);
  this.executeCharTest('8', ['digit eight', 'eight', 'eight']);
  this.executeCharTest('9', ['digit nine', 'nine', 'nine']);
  this.executeCharTest('Œë', ['greek capital letter alpha', 'cap alpha', 'cap alpha']);
  this.executeCharTest('Œí', ['greek capital letter beta', 'cap beta', 'cap beta']);
  this.executeCharTest('Œì', ['greek capital letter gamma', 'cap gamma', 'cap gamma']);
  this.executeCharTest('Œî', ['greek capital letter delta', 'cap delta', 'cap delta']);
  this.executeCharTest('Œï', ['greek capital letter epsilon', 'cap epsilon', 'cap epsilon']);
  this.executeCharTest('Œñ', ['greek capital letter zeta', 'cap zeta', 'cap zeta']);
  this.executeCharTest('Œó', ['greek capital letter eta', 'cap eta', 'cap eta']);
  this.executeCharTest('Œò', ['greek capital letter theta', 'cap theta', 'cap theta']);
  this.executeCharTest('Œô', ['greek capital letter iota', 'cap iota', 'cap iota']);
  this.executeCharTest('Œö', ['greek capital letter kappa', 'cap kappa', 'cap kappa']);
  this.executeCharTest('Œõ', ['greek capital letter lamda', 'cap lamda', 'greek capital letter lambda']);
  this.executeCharTest('Œú', ['greek capital letter mu', 'cap mu', 'cap mu']);
  this.executeCharTest('Œù', ['greek capital letter nu', 'cap nu', 'cap nu']);
  this.executeCharTest('Œû', ['greek capital letter xi', 'cap xi', 'cap xi']);
  this.executeCharTest('Œü', ['greek capital letter omicron', 'cap omicron', 'cap omicron']);
  this.executeCharTest('Œ†', ['greek capital letter pi', 'cap pi', 'cap pi']);
  this.executeCharTest('Œ°', ['greek capital letter rho', 'cap rho', 'cap rho']);
  this.executeCharTest('Œ£', ['greek capital letter sigma', 'cap sigma', 'cap sigma']);
  this.executeCharTest('Œ§', ['greek capital letter tau', 'cap tau', 'cap tau']);
  this.executeCharTest('Œ•', ['greek capital letter upsilon', 'cap upsilon', 'cap upsilon']);
  this.executeCharTest('Œ¶', ['greek capital letter phi', 'cap phi', 'cap phi']);
  this.executeCharTest('Œß', ['greek capital letter chi', 'cap chi', 'cap chi']);
  this.executeCharTest('Œ®', ['greek capital letter psi', 'cap psi', 'cap psi']);
  this.executeCharTest('Œ©', ['greek capital letter omega', 'cap omega', 'cap omega']);
  this.executeCharTest('Œ±', ['greek small letter alpha', 'alpha', 'alpha']);
  this.executeCharTest('Œ≤', ['greek small letter beta', 'beta', 'beta']);
  this.executeCharTest('Œ≥', ['greek small letter gamma', 'gamma', 'gamma']);
  this.executeCharTest('Œ¥', ['greek small letter delta', 'delta', 'delta']);
  this.executeCharTest('Œµ', ['greek small letter epsilon', 'epsilon', 'epsilon']);
  this.executeCharTest('Œ∂', ['greek small letter zeta', 'zeta', 'zeta']);
  this.executeCharTest('Œ∑', ['greek small letter eta', 'eta', 'eta']);
  this.executeCharTest('Œ∏', ['greek small letter theta', 'theta', 'theta']);
  this.executeCharTest('Œπ', ['greek small letter iota', 'iota', 'iota']);
  this.executeCharTest('Œ∫', ['greek small letter kappa', 'kappa', 'kappa']);
  this.executeCharTest('Œª', ['greek small letter lamda', 'lamda', 'greek small letter lambda']);
  this.executeCharTest('Œº', ['greek small letter mu', 'mu', 'mu']);
  this.executeCharTest('ŒΩ', ['greek small letter nu', 'nu', 'nu']);
  this.executeCharTest('Œæ', ['greek small letter xi', 'xi', 'xi']);
  this.executeCharTest('Œø', ['greek small letter omicron', 'omicron', 'omicron']);
  this.executeCharTest('œÄ', ['greek small letter pi', 'pi', 'pi']);
  this.executeCharTest('œÅ', ['greek small letter rho', 'rho', 'rho']);
  this.executeCharTest('œÇ', ['greek small letter final sigma', 'final sigma', 'final sigma']);
  this.executeCharTest('œÉ', ['greek small letter sigma', 'sigma', 'sigma']);
  this.executeCharTest('œÑ', ['greek small letter tau', 'tau', 'tau']);
  this.executeCharTest('œÖ', ['greek small letter upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest('œÜ', ['greek small letter phi', 'phi', 'phi']);
  this.executeCharTest('œá', ['greek small letter chi', 'chi', 'chi']);
  this.executeCharTest('œà', ['greek small letter psi', 'psi', 'psi']);
  this.executeCharTest('œâ', ['greek small letter omega', 'omega', 'omega']);
  this.executeCharTest('·¥¶', ['greek letter small capital gamma', 'small cap gamma', 'greek letter gamma']);
  this.executeCharTest('·¥ß', ['greek letter small capital lamda', 'small cap lamda', 'greek letter lamda']);
  this.executeCharTest('·¥®', ['greek letter small capital pi', 'small cap pi', 'greek letter pi']);
  this.executeCharTest('·¥©', ['greek letter small capital rho', 'small cap rho', 'greek letter rho']);
  this.executeCharTest('·¥™', ['greek letter small capital psi', 'small cap psi', 'greek letter psi']);
  this.executeCharTest('·µû', ['modifier letter small greek gamma', 'superscript gamma', 'greek letter superscript gamma']);
  this.executeCharTest('·µ†', ['modifier letter small greek phi', 'superscript phi', 'greek letter superscript phi']);
  this.executeCharTest('·µ¶', ['greek subscript small letter beta', 'subscript beta', 'subscript beta']);
  this.executeCharTest('·µß', ['greek subscript small letter gamma', 'subscript gamma', 'greek letter gamma']);
  this.executeCharTest('·µ®', ['greek subscript small letter rho', 'subscript rho', 'greek letter rho']);
  this.executeCharTest('·µ©', ['greek subscript small letter phi', 'subscript phi', 'greek letter phi']);
  this.executeCharTest('·µ™', ['greek subscript small letter chi', 'subscript chi', 'greek letter chi']);
  this.executeCharTest('œê', ['greek beta symbol', 'beta', 'greek small letter curled beta']);
  this.executeCharTest('œë', ['greek theta symbol', 'theta', 'greek small letter script theta']);
  this.executeCharTest('œï', ['greek phi symbol', 'phi', 'greek small letter script phi']);
  this.executeCharTest('œñ', ['greek pi symbol', 'pi', 'greek small letter omega pi']);
  this.executeCharTest('œó', ['greek kai symbol', 'kai', 'kai']);
  this.executeCharTest('œ∞', ['greek kappa symbol', 'kappa', 'greek small letter script kappa']);
  this.executeCharTest('œ±', ['greek rho symbol', 'rho', 'greek small letter tailed rho']);
  this.executeCharTest('œµ', ['greek lunate epsilon symbol', 'epsilon', 'epsilon']);
  this.executeCharTest('œ∂', ['greek reversed lunate epsilon symbol', 'reversed epsilon', 'reversed epsilon']);
  this.executeCharTest('œ¥', ['greek capital theta symbol', 'cap theta', 'cap theta']);
  this.executeCharTest('ùöπ', ['mathematical bold capital theta symbol', 'bold cap theta', 'bold capital theta']);
  this.executeCharTest('ùõ≥', ['mathematical italic capital theta symbol', 'italic cap theta', 'italic capital theta']);
  this.executeCharTest('ùùß', ['mathematical sans serif bold capital theta symbol', 'sans serif bold cap theta', 'sans serif bold capital theta']);
  this.executeCharTest('ùõÅ', ['mathematical bold nabla', 'mathematical bold nabla', 'bold nabla']);
  this.executeCharTest('ùõõ', ['mathematical bold partial differential', 'bold partial differential', 'bold partial differential']);
  this.executeCharTest('ùõú', ['mathematical bold epsilon symbol', 'bold epsilon', 'bold epsilon']);
  this.executeCharTest('ùõù', ['mathematical bold theta symbol', 'bold theta', 'bold theta']);
  this.executeCharTest('ùõû', ['mathematical bold kappa symbol', 'bold kappa', 'bold kappa']);
  this.executeCharTest('ùõü', ['mathematical bold phi symbol', 'bold phi', 'bold phi']);
  this.executeCharTest('ùõ†', ['mathematical bold rho symbol', 'bold rho', 'bold rho']);
  this.executeCharTest('ùõ°', ['mathematical bold pi symbol', 'bold pi', 'bold pi']);
  this.executeCharTest('ùõª', ['mathematical italic nabla', 'italic nabla', 'italic nabla']);
  this.executeCharTest('ùúï', ['mathematical italic partial differential', 'italic partial differential', 'italic partial differential']);
  this.executeCharTest('ùúñ', ['mathematical italic epsilon symbol', 'italic epsilon', 'italic epsilon']);
  this.executeCharTest('ùúó', ['mathematical italic theta symbol', 'italic theta', 'italic theta']);
  this.executeCharTest('ùúò', ['mathematical italic kappa symbol', 'italic kappa', 'italic kappa']);
  this.executeCharTest('ùúô', ['mathematical italic phi symbol', 'italic phi', 'italic phi']);
  this.executeCharTest('ùúö', ['mathematical italic rho symbol', 'italic rho', 'italic rho']);
  this.executeCharTest('ùúõ', ['mathematical italic pi symbol', 'italic pi', 'italic pi']);
  this.executeCharTest('ùùØ', ['mathematical sans serif bold nabla', 'sans serif bold nabla', 'sans serif bold nabla']);
  this.executeCharTest('ùûâ', ['mathematical sans serif bold partial differential', 'sans serif bold partial differential', 'sans serif bold partial differential']);
  this.executeCharTest('ùûä', ['mathematical sans serif bold epsilon symbol', 'sans serif bold epsilon', 'sans serif bold epsilon']);
  this.executeCharTest('ùûã', ['mathematical sans serif bold theta symbol', 'sans serif bold theta', 'sans serif bold theta']);
  this.executeCharTest('ùûå', ['mathematical sans serif bold kappa symbol', 'sans serif bold kappa', 'sans serif bold kappa']);
  this.executeCharTest('ùûç', ['mathematical sans serif bold phi symbol', 'sans serif bold phi', 'sans serif bold phi']);
  this.executeCharTest('ùûé', ['mathematical sans serif bold rho symbol', 'sans serif bold rho', 'sans serif bold rho']);
  this.executeCharTest('ùûè', ['mathematical sans serif bold pi symbol', 'sans serif bold pi', 'sans serif bold pi']);
  this.executeCharTest('ùüä', ['mathematical bold capital digamma', 'bold cap digamma', 'bold capital digamma']);
  this.executeCharTest('ùüã', ['mathematical bold small digamma', 'bold digamma', 'bold small digamma']);
  this.executeCharTest('ùö®', ['mathematical bold capital alpha', 'bold cap alpha', 'bold capital alpha']);
  this.executeCharTest('ùö©', ['mathematical bold capital beta', 'bold cap beta', 'bold capital beta']);
  this.executeCharTest('ùö™', ['mathematical bold capital gamma', 'bold cap gamma', 'bold capital gamma']);
  this.executeCharTest('ùö´', ['mathematical bold capital delta', 'bold cap delta', 'bold capital delta']);
  this.executeCharTest('ùö¨', ['mathematical bold capital epsilon', 'bold cap epsilon', 'bold capital epsilon']);
  this.executeCharTest('ùö≠', ['mathematical bold capital zeta', 'bold cap zeta', 'bold capital zeta']);
  this.executeCharTest('ùöÆ', ['mathematical bold capital eta', 'bold cap eta', 'bold capital eta']);
  this.executeCharTest('ùöØ', ['mathematical bold capital theta', 'bold cap theta', 'bold capital theta']);
  this.executeCharTest('ùö∞', ['mathematical bold capital iota', 'bold cap iota', 'bold capital iota']);
  this.executeCharTest('ùö±', ['mathematical bold capital kappa', 'bold cap kappa', 'bold capital kappa']);
  this.executeCharTest('ùö≤', ['mathematical bold capital lamda', 'bold cap lamda', 'bold capital lamda']);
  this.executeCharTest('ùö≥', ['mathematical bold capital mu', 'bold cap mu', 'bold capital mu']);
  this.executeCharTest('ùö¥', ['mathematical bold capital nu', 'bold cap nu', 'bold capital nu']);
  this.executeCharTest('ùöµ', ['mathematical bold capital xi', 'bold cap xi', 'bold capital xi']);
  this.executeCharTest('ùö∂', ['mathematical bold capital omicron', 'bold cap omicron', 'bold capital omicron']);
  this.executeCharTest('ùö∑', ['mathematical bold capital pi', 'bold cap pi', 'bold capital pi']);
  this.executeCharTest('ùö∏', ['mathematical bold capital rho', 'bold cap rho', 'bold capital rho']);
  this.executeCharTest('ùö∫', ['mathematical bold capital sigma', 'bold cap sigma', 'bold capital sigma']);
  this.executeCharTest('ùöª', ['mathematical bold capital tau', 'bold cap tau', 'bold capital tau']);
  this.executeCharTest('ùöº', ['mathematical bold capital upsilon', 'bold cap upsilon', 'bold capital upsilon']);
  this.executeCharTest('ùöΩ', ['mathematical bold capital phi', 'bold cap phi', 'bold capital phi']);
  this.executeCharTest('ùöæ', ['mathematical bold capital chi', 'bold cap chi', 'bold capital chi']);
  this.executeCharTest('ùöø', ['mathematical bold capital psi', 'bold cap psi', 'bold capital psi']);
  this.executeCharTest('ùõÄ', ['mathematical bold capital omega', 'bold cap omega', 'bold capital omega']);
  this.executeCharTest('ùõÇ', ['mathematical bold small alpha', 'bold alpha', 'bold small alpha']);
  this.executeCharTest('ùõÉ', ['mathematical bold small beta', 'bold beta', 'bold small beta']);
  this.executeCharTest('ùõÑ', ['mathematical bold small gamma', 'bold gamma', 'bold small gamma']);
  this.executeCharTest('ùõÖ', ['mathematical bold small delta', 'bold delta', 'bold small delta']);
  this.executeCharTest('ùõÜ', ['mathematical bold small epsilon', 'bold epsilon', 'bold small epsilon']);
  this.executeCharTest('ùõá', ['mathematical bold small zeta', 'bold zeta', 'bold small zeta']);
  this.executeCharTest('ùõà', ['mathematical bold small eta', 'bold eta', 'bold small eta']);
  this.executeCharTest('ùõâ', ['mathematical bold small theta', 'bold theta', 'bold small theta']);
  this.executeCharTest('ùõä', ['mathematical bold small iota', 'bold iota', 'bold small iota']);
  this.executeCharTest('ùõã', ['mathematical bold small kappa', 'bold kappa', 'bold small kappa']);
  this.executeCharTest('ùõå', ['mathematical bold small lamda', 'bold lamda', 'bold small lamda']);
  this.executeCharTest('ùõç', ['mathematical bold small mu', 'bold mu', 'bold small mu']);
  this.executeCharTest('ùõé', ['mathematical bold small nu', 'bold nu', 'bold small nu']);
  this.executeCharTest('ùõè', ['mathematical bold small xi', 'bold xi', 'bold small xi']);
  this.executeCharTest('ùõê', ['mathematical bold small omicron', 'bold omicron', 'bold small omicron']);
  this.executeCharTest('ùõë', ['mathematical bold small pi', 'bold pi', 'bold small pi']);
  this.executeCharTest('ùõí', ['mathematical bold small rho', 'bold rho', 'bold small rho']);
  this.executeCharTest('ùõì', ['mathematical bold small final sigma', 'bold final sigma', 'bold small final sigma']);
  this.executeCharTest('ùõî', ['mathematical bold small sigma', 'bold sigma', 'bold small sigma']);
  this.executeCharTest('ùõï', ['mathematical bold small tau', 'bold tau', 'bold small tau']);
  this.executeCharTest('ùõñ', ['mathematical bold small upsilon', 'bold upsilon', 'bold small upsilon']);
  this.executeCharTest('ùõó', ['mathematical bold small phi', 'bold phi', 'bold small phi']);
  this.executeCharTest('ùõò', ['mathematical bold small chi', 'bold chi', 'bold small chi']);
  this.executeCharTest('ùõô', ['mathematical bold small psi', 'bold psi', 'bold small psi']);
  this.executeCharTest('ùõö', ['mathematical bold small omega', 'bold omega', 'bold small omega']);
  this.executeCharTest('ùõ¢', ['mathematical italic capital alpha', 'italic cap alpha', 'italic capital alpha']);
  this.executeCharTest('ùõ£', ['mathematical italic capital beta', 'italic cap beta', 'italic capital beta']);
  this.executeCharTest('ùõ§', ['mathematical italic capital gamma', 'italic cap gamma', 'italic capital gamma']);
  this.executeCharTest('ùõ•', ['mathematical italic capital delta', 'italic cap delta', 'italic capital delta']);
  this.executeCharTest('ùõ¶', ['mathematical italic capital epsilon', 'italic cap epsilon', 'italic capital epsilon']);
  this.executeCharTest('ùõß', ['mathematical italic capital zeta', 'italic cap zeta', 'italic capital zeta']);
  this.executeCharTest('ùõ®', ['mathematical italic capital eta', 'italic cap eta', 'italic capital eta']);
  this.executeCharTest('ùõ©', ['mathematical italic capital theta', 'italic cap theta', 'italic capital theta']);
  this.executeCharTest('ùõ™', ['mathematical italic capital iota', 'italic cap iota', 'italic capital iota']);
  this.executeCharTest('ùõ´', ['mathematical italic capital kappa', 'italic cap kappa', 'italic capital kappa']);
  this.executeCharTest('ùõ¨', ['mathematical italic capital lamda', 'italic cap lamda', 'italic capital lamda']);
  this.executeCharTest('ùõ≠', ['mathematical italic capital mu', 'italic cap mu', 'italic capital mu']);
  this.executeCharTest('ùõÆ', ['mathematical italic capital nu', 'italic cap nu', 'italic capital nu']);
  this.executeCharTest('ùõØ', ['mathematical italic capital xi', 'italic cap xi', 'italic capital xi']);
  this.executeCharTest('ùõ∞', ['mathematical italic capital omicron', 'italic cap omicron', 'italic capital omicron']);
  this.executeCharTest('ùõ±', ['mathematical italic capital pi', 'italic cap pi', 'italic capital pi']);
  this.executeCharTest('ùõ≤', ['mathematical italic capital rho', 'italic cap rho', 'italic capital rho']);
  this.executeCharTest('ùõ¥', ['mathematical italic capital sigma', 'italic cap sigma', 'italic capital sigma']);
  this.executeCharTest('ùõµ', ['mathematical italic capital tau', 'italic cap tau', 'italic capital tau']);
  this.executeCharTest('ùõ∂', ['mathematical italic capital upsilon', 'italic cap upsilon', 'italic capital upsilon']);
  this.executeCharTest('ùõ∑', ['mathematical italic capital phi', 'italic cap phi', 'italic capital phi']);
  this.executeCharTest('ùõ∏', ['mathematical italic capital chi', 'italic cap chi', 'italic capital chi']);
  this.executeCharTest('ùõπ', ['mathematical italic capital psi', 'italic cap psi', 'italic capital psi']);
  this.executeCharTest('ùõ∫', ['mathematical italic capital omega', 'italic cap omega', 'italic capital omega']);
  this.executeCharTest('ùõº', ['mathematical italic small alpha', 'italic alpha', 'italic small alpha']);
  this.executeCharTest('ùõΩ', ['mathematical italic small beta', 'italic beta', 'italic small beta']);
  this.executeCharTest('ùõæ', ['mathematical italic small gamma', 'italic gamma', 'italic small gamma']);
  this.executeCharTest('ùõø', ['mathematical italic small delta', 'italic delta', 'italic small delta']);
  this.executeCharTest('ùúÄ', ['mathematical italic small epsilon', 'italic epsilon', 'italic small epsilon']);
  this.executeCharTest('ùúÅ', ['mathematical italic small zeta', 'italic zeta', 'italic small zeta']);
  this.executeCharTest('ùúÇ', ['mathematical italic small eta', 'italic eta', 'italic small eta']);
  this.executeCharTest('ùúÉ', ['mathematical italic small theta', 'italic theta', 'italic small theta']);
  this.executeCharTest('ùúÑ', ['mathematical italic small iota', 'italic iota', 'italic small iota']);
  this.executeCharTest('ùúÖ', ['mathematical italic small kappa', 'italic kappa', 'italic small kappa']);
  this.executeCharTest('ùúÜ', ['mathematical italic small lamda', 'italic lamda', 'italic small lamda']);
  this.executeCharTest('ùúá', ['mathematical italic small mu', 'italic mu', 'italic small mu']);
  this.executeCharTest('ùúà', ['mathematical italic small nu', 'italic nu', 'italic small nu']);
  this.executeCharTest('ùúâ', ['mathematical italic small xi', 'italic xi', 'italic small xi']);
  this.executeCharTest('ùúä', ['mathematical italic small omicron', 'italic omicron', 'italic small omicron']);
  this.executeCharTest('ùúã', ['mathematical italic small pi', 'italic pi', 'italic small pi']);
  this.executeCharTest('ùúå', ['mathematical italic small rho', 'italic rho', 'italic small rho']);
  this.executeCharTest('ùúç', ['mathematical italic small final sigma', 'italic final sigma', 'italic small final sigma']);
  this.executeCharTest('ùúé', ['mathematical italic small sigma', 'italic sigma', 'italic small sigma']);
  this.executeCharTest('ùúè', ['mathematical italic small tau', 'italic tau', 'italic small tau']);
  this.executeCharTest('ùúê', ['mathematical italic small upsilon', 'italic upsilon', 'italic small upsilon']);
  this.executeCharTest('ùúë', ['mathematical italic small phi', 'italic phi', 'italic small phi']);
  this.executeCharTest('ùúí', ['mathematical italic small chi', 'italic chi', 'italic small chi']);
  this.executeCharTest('ùúì', ['mathematical italic small psi', 'italic psi', 'italic small psi']);
  this.executeCharTest('ùúî', ['mathematical italic small omega', 'italic omega', 'italic small omega']);
  this.executeCharTest('ùúú', ['mathematical bold italic capital alpha', 'bold italic cap alpha', 'bold italic capital alpha']);
  this.executeCharTest('ùúù', ['mathematical bold italic capital beta', 'bold italic cap beta', 'bold italic capital beta']);
  this.executeCharTest('ùúû', ['mathematical bold italic capital gamma', 'bold italic cap gamma', 'bold italic capital gamma']);
  this.executeCharTest('ùúü', ['mathematical bold italic capital delta', 'bold italic cap delta', 'bold italic capital delta']);
  this.executeCharTest('ùú†', ['mathematical bold italic capital epsilon', 'bold italic cap epsilon', 'bold italic capital epsilon']);
  this.executeCharTest('ùú°', ['mathematical bold italic capital zeta', 'bold italic cap zeta', 'bold italic capital zeta']);
  this.executeCharTest('ùú¢', ['mathematical bold italic capital eta', 'bold italic cap eta', 'bold italic capital eta']);
  this.executeCharTest('ùú£', ['mathematical bold italic capital theta', 'bold italic cap theta', 'bold italic capital theta']);
  this.executeCharTest('ùú§', ['mathematical bold italic capital iota', 'bold italic cap iota', 'bold italic capital iota']);
  this.executeCharTest('ùú•', ['mathematical bold italic capital kappa', 'bold italic cap kappa', 'bold italic capital kappa']);
  this.executeCharTest('ùú¶', ['mathematical bold italic capital lamda', 'bold italic cap lamda', 'bold italic capital lamda']);
  this.executeCharTest('ùúß', ['mathematical bold italic capital mu', 'bold italic cap mu', 'bold italic capital mu']);
  this.executeCharTest('ùú®', ['mathematical bold italic capital nu', 'bold italic cap nu', 'bold italic capital nu']);
  this.executeCharTest('ùú©', ['mathematical bold italic capital xi', 'bold italic cap xi', 'bold italic capital xi']);
  this.executeCharTest('ùú™', ['mathematical bold italic capital omicron', 'bold italic cap omicron', 'bold italic capital omicron']);
  this.executeCharTest('ùú´', ['mathematical bold italic capital pi', 'bold italic cap pi', 'bold italic capital pi']);
  this.executeCharTest('ùú¨', ['mathematical bold italic capital rho', 'bold italic cap rho', 'bold italic capital rho']);
  this.executeCharTest('ùúÆ', ['mathematical bold italic capital sigma', 'bold italic cap sigma', 'bold italic capital sigma']);
  this.executeCharTest('ùúØ', ['mathematical bold italic capital tau', 'bold italic cap tau', 'bold italic capital tau']);
  this.executeCharTest('ùú∞', ['mathematical bold italic capital upsilon', 'bold italic cap upsilon', 'bold italic capital upsilon']);
  this.executeCharTest('ùú±', ['mathematical bold italic capital phi', 'bold italic cap phi', 'bold italic capital phi']);
  this.executeCharTest('ùú≤', ['mathematical bold italic capital chi', 'bold italic cap chi', 'bold italic capital chi']);
  this.executeCharTest('ùú≥', ['mathematical bold italic capital psi', 'bold italic cap psi', 'bold italic capital psi']);
  this.executeCharTest('ùú¥', ['mathematical bold italic capital omega', 'bold italic cap omega', 'bold italic capital omega']);
  this.executeCharTest('ùú∂', ['mathematical bold italic small alpha', 'bold italic alpha', 'bold italic small alpha']);
  this.executeCharTest('ùú∑', ['mathematical bold italic small beta', 'bold italic beta', 'bold italic small beta']);
  this.executeCharTest('ùú∏', ['mathematical bold italic small gamma', 'bold italic gamma', 'bold italic small gamma']);
  this.executeCharTest('ùúπ', ['mathematical bold italic small delta', 'bold italic delta', 'bold italic small delta']);
  this.executeCharTest('ùú∫', ['mathematical bold italic small epsilon', 'bold italic epsilon', 'bold italic small epsilon']);
  this.executeCharTest('ùúª', ['mathematical bold italic small zeta', 'bold italic zeta', 'bold italic small zeta']);
  this.executeCharTest('ùúº', ['mathematical bold italic small eta', 'bold italic eta', 'bold italic small eta']);
  this.executeCharTest('ùúΩ', ['mathematical bold italic small theta', 'bold italic theta', 'bold italic small theta']);
  this.executeCharTest('ùúæ', ['mathematical bold italic small iota', 'bold italic iota', 'bold italic small iota']);
  this.executeCharTest('ùúø', ['mathematical bold italic small kappa', 'bold italic kappa', 'bold italic small kappa']);
  this.executeCharTest('ùùÄ', ['mathematical bold italic small lamda', 'bold italic lamda', 'bold italic small lamda']);
  this.executeCharTest('ùùÅ', ['mathematical bold italic small mu', 'bold italic mu', 'bold italic small mu']);
  this.executeCharTest('ùùÇ', ['mathematical bold italic small nu', 'bold italic nu', 'bold italic small nu']);
  this.executeCharTest('ùùÉ', ['mathematical bold italic small xi', 'bold italic xi', 'bold italic small xi']);
  this.executeCharTest('ùùÑ', ['mathematical bold italic small omicron', 'bold italic omicron', 'bold italic small omicron']);
  this.executeCharTest('ùùÖ', ['mathematical bold italic small pi', 'bold italic pi', 'bold italic small pi']);
  this.executeCharTest('ùùÜ', ['mathematical bold italic small rho', 'bold italic rho', 'bold italic small rho']);
  this.executeCharTest('ùùá', ['mathematical bold italic small final sigma', 'bold italic final sigma', 'bold italic small final sigma']);
  this.executeCharTest('ùùà', ['mathematical bold italic small sigma', 'bold italic sigma', 'bold italic small sigma']);
  this.executeCharTest('ùùâ', ['mathematical bold italic small tau', 'bold italic tau', 'bold italic small tau']);
  this.executeCharTest('ùùä', ['mathematical bold italic small upsilon', 'bold italic upsilon', 'bold italic small upsilon']);
  this.executeCharTest('ùùã', ['mathematical bold italic small phi', 'bold italic phi', 'bold italic small phi']);
  this.executeCharTest('ùùå', ['mathematical bold italic small chi', 'bold italic chi', 'bold italic small chi']);
  this.executeCharTest('ùùç', ['mathematical bold italic small psi', 'bold italic psi', 'bold italic small psi']);
  this.executeCharTest('ùùé', ['mathematical bold italic small omega', 'bold italic omega', 'bold italic small omega']);
  this.executeCharTest('ùùñ', ['mathematical sans serif bold capital alpha', 'sans serif bold cap alpha', 'sans serif bold capital alpha']);
  this.executeCharTest('ùùó', ['mathematical sans serif bold capital beta', 'sans serif bold cap beta', 'sans serif bold capital beta']);
  this.executeCharTest('ùùò', ['mathematical sans serif bold capital gamma', 'sans serif bold cap gamma', 'sans serif bold capital gamma']);
  this.executeCharTest('ùùô', ['mathematical sans serif bold capital delta', 'sans serif bold cap delta', 'sans serif bold capital delta']);
  this.executeCharTest('ùùö', ['mathematical sans serif bold capital epsilon', 'sans serif bold cap epsilon', 'sans serif bold capital epsilon']);
  this.executeCharTest('ùùõ', ['mathematical sans serif bold capital zeta', 'sans serif bold cap zeta', 'sans serif bold capital zeta']);
  this.executeCharTest('ùùú', ['mathematical sans serif bold capital eta', 'sans serif bold cap eta', 'sans serif bold capital eta']);
  this.executeCharTest('ùùù', ['mathematical sans serif bold capital theta', 'sans serif bold cap theta', 'sans serif bold capital theta']);
  this.executeCharTest('ùùû', ['mathematical sans serif bold capital iota', 'sans serif bold cap iota', 'sans serif bold capital iota']);
  this.executeCharTest('ùùü', ['mathematical sans serif bold capital kappa', 'sans serif bold cap kappa', 'sans serif bold capital kappa']);
  this.executeCharTest('ùù†', ['mathematical sans serif bold capital lamda', 'sans serif bold cap lamda', 'sans serif bold capital lamda']);
  this.executeCharTest('ùù°', ['mathematical sans serif bold capital mu', 'sans serif bold cap mu', 'sans serif bold capital mu']);
  this.executeCharTest('ùù¢', ['mathematical sans serif bold capital nu', 'sans serif bold cap nu', 'sans serif bold capital nu']);
  this.executeCharTest('ùù£', ['mathematical sans serif bold capital xi', 'sans serif bold cap xi', 'sans serif bold capital xi']);
  this.executeCharTest('ùù§', ['mathematical sans serif bold capital omicron', 'sans serif bold cap omicron', 'sans serif bold capital omicron']);
  this.executeCharTest('ùù•', ['mathematical sans serif bold capital pi', 'sans serif bold cap pi', 'sans serif bold capital pi']);
  this.executeCharTest('ùù¶', ['mathematical sans serif bold capital rho', 'sans serif bold cap rho', 'sans serif bold capital rho']);
  this.executeCharTest('ùù®', ['mathematical sans serif bold capital sigma', 'sans serif bold cap sigma', 'sans serif bold capital sigma']);
  this.executeCharTest('ùù©', ['mathematical sans serif bold capital tau', 'sans serif bold cap tau', 'sans serif bold capital tau']);
  this.executeCharTest('ùù™', ['mathematical sans serif bold capital upsilon', 'sans serif bold cap upsilon', 'sans serif bold capital upsilon']);
  this.executeCharTest('ùù´', ['mathematical sans serif bold capital phi', 'sans serif bold cap phi', 'sans serif bold capital phi']);
  this.executeCharTest('ùù¨', ['mathematical sans serif bold capital chi', 'sans serif bold cap chi', 'sans serif bold capital chi']);
  this.executeCharTest('ùù≠', ['mathematical sans serif bold capital psi', 'sans serif bold cap psi', 'sans serif bold capital psi']);
  this.executeCharTest('ùùÆ', ['mathematical sans serif bold capital omega', 'sans serif bold cap omega', 'sans serif bold capital omega']);
  this.executeCharTest('ùù∞', ['mathematical sans serif bold small alpha', 'sans serif bold alpha', 'sans serif bold small alpha']);
  this.executeCharTest('ùù±', ['mathematical sans serif bold small beta', 'sans serif bold beta', 'sans serif bold small beta']);
  this.executeCharTest('ùù≤', ['mathematical sans serif bold small gamma', 'sans serif bold gamma', 'sans serif bold small gamma']);
  this.executeCharTest('ùù≥', ['mathematical sans serif bold small delta', 'sans serif bold delta', 'sans serif bold small delta']);
  this.executeCharTest('ùù¥', ['mathematical sans serif bold small epsilon', 'sans serif bold epsilon', 'sans serif bold small epsilon']);
  this.executeCharTest('ùùµ', ['mathematical sans serif bold small zeta', 'sans serif bold zeta', 'sans serif bold small zeta']);
  this.executeCharTest('ùù∂', ['mathematical sans serif bold small eta', 'sans serif bold eta', 'sans serif bold small eta']);
  this.executeCharTest('ùù∑', ['mathematical sans serif bold small theta', 'sans serif bold theta', 'sans serif bold small theta']);
  this.executeCharTest('ùù∏', ['mathematical sans serif bold small iota', 'sans serif bold iota', 'sans serif bold small iota']);
  this.executeCharTest('ùùπ', ['mathematical sans serif bold small kappa', 'sans serif bold kappa', 'sans serif bold small kappa']);
  this.executeCharTest('ùù∫', ['mathematical sans serif bold small lamda', 'sans serif bold lamda', 'sans serif bold small lamda']);
  this.executeCharTest('ùùª', ['mathematical sans serif bold small mu', 'sans serif bold mu', 'sans serif bold small mu']);
  this.executeCharTest('ùùº', ['mathematical sans serif bold small nu', 'sans serif bold nu', 'sans serif bold small nu']);
  this.executeCharTest('ùùΩ', ['mathematical sans serif bold small xi', 'sans serif bold xi', 'sans serif bold small xi']);
  this.executeCharTest('ùùæ', ['mathematical sans serif bold small omicron', 'sans serif bold omicron', 'sans serif bold small omicron']);
  this.executeCharTest('ùùø', ['mathematical sans serif bold small pi', 'sans serif bold pi', 'sans serif bold small pi']);
  this.executeCharTest('ùûÄ', ['mathematical sans serif bold small rho', 'sans serif bold rho', 'sans serif bold small rho']);
  this.executeCharTest('ùûÅ', ['mathematical sans serif bold small final sigma', 'sans serif bold final sigma', 'sans serif bold small final sigma']);
  this.executeCharTest('ùûÇ', ['mathematical sans serif bold small sigma', 'sans serif bold sigma', 'sans serif bold small sigma']);
  this.executeCharTest('ùûÉ', ['mathematical sans serif bold small tau', 'sans serif bold tau', 'sans serif bold small tau']);
  this.executeCharTest('ùûÑ', ['mathematical sans serif bold small upsilon', 'sans serif bold upsilon', 'sans serif bold small upsilon']);
  this.executeCharTest('ùûÖ', ['mathematical sans serif bold small phi', 'sans serif bold phi', 'sans serif bold small phi']);
  this.executeCharTest('ùûÜ', ['mathematical sans serif bold small chi', 'sans serif bold chi', 'sans serif bold small chi']);
  this.executeCharTest('ùûá', ['mathematical sans serif bold small psi', 'sans serif bold psi', 'sans serif bold small psi']);
  this.executeCharTest('ùûà', ['mathematical sans serif bold small omega', 'sans serif bold omega', 'sans serif bold small omega']);
  this.executeCharTest('ùûê', ['mathematical sans serif bold italic capital alpha', 'sans serif bold italic cap alpha', 'sans serif bold italic capital alpha']);
  this.executeCharTest('ùûë', ['mathematical sans serif bold italic capital beta', 'sans serif bold italic cap beta', 'sans serif bold italic capital beta']);
  this.executeCharTest('ùûí', ['mathematical sans serif bold italic capital gamma', 'sans serif bold italic cap gamma', 'sans serif bold italic capital gamma']);
  this.executeCharTest('ùûì', ['mathematical sans serif bold italic capital delta', 'sans serif bold italic cap delta', 'sans serif bold italic capital delta']);
  this.executeCharTest('ùûî', ['mathematical sans serif bold italic capital epsilon', 'sans serif bold italic cap epsilon', 'sans serif bold italic capital epsilon']);
  this.executeCharTest('ùûï', ['mathematical sans serif bold italic capital zeta', 'sans serif bold italic cap zeta', 'sans serif bold italic capital zeta']);
  this.executeCharTest('ùûñ', ['mathematical sans serif bold italic capital eta', 'sans serif bold italic cap eta', 'sans serif bold italic capital eta']);
  this.executeCharTest('ùûó', ['mathematical sans serif bold italic capital theta', 'sans serif bold italic cap theta', 'sans serif bold italic capital theta']);
  this.executeCharTest('ùûò', ['mathematical sans serif bold italic capital iota', 'sans serif bold italic cap iota', 'sans serif bold italic capital iota']);
  this.executeCharTest('ùûô', ['mathematical sans serif bold italic capital kappa', 'sans serif bold italic cap kappa', 'sans serif bold italic capital kappa']);
  this.executeCharTest('ùûö', ['mathematical sans serif bold italic capital lamda', 'sans serif bold italic cap lamda', 'sans serif bold italic capital lamda']);
  this.executeCharTest('ùûõ', ['mathematical sans serif bold italic capital mu', 'sans serif bold italic cap mu', 'sans serif bold italic capital mu']);
  this.executeCharTest('ùûú', ['mathematical sans serif bold italic capital nu', 'sans serif bold italic cap nu', 'sans serif bold italic capital nu']);
  this.executeCharTest('ùûù', ['mathematical sans serif bold italic capital xi', 'sans serif bold italic cap xi', 'sans serif bold italic capital xi']);
  this.executeCharTest('ùûû', ['mathematical sans serif bold italic capital omicron', 'sans serif bold italic cap omicron', 'sans serif bold italic capital omicron']);
  this.executeCharTest('ùûü', ['mathematical sans serif bold italic capital pi', 'sans serif bold italic cap pi', 'sans serif bold italic capital pi']);
  this.executeCharTest('ùû†', ['mathematical sans serif bold italic capital rho', 'sans serif bold italic cap rho', 'sans serif bold italic capital rho']);
  this.executeCharTest('ùû¢', ['mathematical sans serif bold italic capital sigma', 'sans serif bold italic cap sigma', 'sans serif bold italic capital sigma']);
  this.executeCharTest('ùû£', ['mathematical sans serif bold italic capital tau', 'sans serif bold italic cap tau', 'sans serif bold italic capital tau']);
  this.executeCharTest('ùû§', ['mathematical sans serif bold italic capital upsilon', 'sans serif bold italic cap upsilon', 'sans serif bold italic capital upsilon']);
  this.executeCharTest('ùû•', ['mathematical sans serif bold italic capital phi', 'sans serif bold italic cap phi', 'sans serif bold italic capital phi']);
  this.executeCharTest('ùû¶', ['mathematical sans serif bold italic capital chi', 'sans serif bold italic cap chi', 'sans serif bold italic capital chi']);
  this.executeCharTest('ùûß', ['mathematical sans serif bold italic capital psi', 'sans serif bold italic cap psi', 'sans serif bold italic capital psi']);
  this.executeCharTest('ùû®', ['mathematical sans serif bold italic capital omega', 'sans serif bold italic cap omega', 'sans serif bold italic capital omega']);
  this.executeCharTest('ùû™', ['mathematical sans serif bold italic small alpha', 'sans serif bold italic alpha', 'sans serif bold italic small alpha']);
  this.executeCharTest('ùû´', ['mathematical sans serif bold italic small beta', 'sans serif bold italic beta', 'sans serif bold italic small beta']);
  this.executeCharTest('ùû¨', ['mathematical sans serif bold italic small gamma', 'sans serif bold italic gamma', 'sans serif bold italic small gamma']);
  this.executeCharTest('ùû≠', ['mathematical sans serif bold italic small delta', 'sans serif bold italic delta', 'sans serif bold italic small delta']);
  this.executeCharTest('ùûÆ', ['mathematical sans serif bold italic small epsilon', 'sans serif bold italic epsilon', 'sans serif bold italic small epsilon']);
  this.executeCharTest('ùûØ', ['mathematical sans serif bold italic small zeta', 'sans serif bold italic zeta', 'sans serif bold italic small zeta']);
  this.executeCharTest('ùû∞', ['mathematical sans serif bold italic small eta', 'sans serif bold italic eta', 'sans serif bold italic small eta']);
  this.executeCharTest('ùû±', ['mathematical sans serif bold italic small theta', 'sans serif bold italic theta', 'sans serif bold italic small theta']);
  this.executeCharTest('ùû≤', ['mathematical sans serif bold italic small iota', 'sans serif bold italic iota', 'sans serif bold italic small iota']);
  this.executeCharTest('ùû≥', ['mathematical sans serif bold italic small kappa', 'sans serif bold italic kappa', 'sans serif bold italic small kappa']);
  this.executeCharTest('ùû¥', ['mathematical sans serif bold italic small lamda', 'sans serif bold italic lamda', 'sans serif bold italic small lamda']);
  this.executeCharTest('ùûµ', ['mathematical sans serif bold italic small mu', 'sans serif bold italic mu', 'sans serif bold italic small mu']);
  this.executeCharTest('ùû∂', ['mathematical sans serif bold italic small nu', 'sans serif bold italic nu', 'sans serif bold italic small nu']);
  this.executeCharTest('ùû∑', ['mathematical sans serif bold italic small xi', 'sans serif bold italic xi', 'sans serif bold italic small xi']);
  this.executeCharTest('ùû∏', ['mathematical sans serif bold italic small omicron', 'sans serif bold italic omicron', 'sans serif bold italic small omicron']);
  this.executeCharTest('ùûπ', ['mathematical sans serif bold italic small pi', 'sans serif bold italic pi', 'sans serif bold italic small pi']);
  this.executeCharTest('ùû∫', ['mathematical sans serif bold italic small rho', 'sans serif bold italic rho', 'sans serif bold italic small rho']);
  this.executeCharTest('ùûª', ['mathematical sans serif bold italic small final sigma', 'sans serif bold italic final sigma', 'sans serif bold italic small final sigma']);
  this.executeCharTest('ùûº', ['mathematical sans serif bold italic small sigma', 'sans serif bold italic sigma', 'sans serif bold italic small sigma']);
  this.executeCharTest('ùûΩ', ['mathematical sans serif bold italic small tau', 'sans serif bold italic tau', 'sans serif bold italic small tau']);
  this.executeCharTest('ùûæ', ['mathematical sans serif bold italic small upsilon', 'sans serif bold italic upsilon', 'sans serif bold italic small upsilon']);
  this.executeCharTest('ùûø', ['mathematical sans serif bold italic small phi', 'sans serif bold italic phi', 'sans serif bold italic small phi']);
  this.executeCharTest('ùüÄ', ['mathematical sans serif bold italic small chi', 'sans serif bold italic chi', 'sans serif bold italic small chi']);
  this.executeCharTest('ùüÅ', ['mathematical sans serif bold italic small psi', 'sans serif bold italic psi', 'sans serif bold italic small psi']);
  this.executeCharTest('ùüÇ', ['mathematical sans serif bold italic small omega', 'sans serif bold italic omega', 'sans serif bold italic small omega']);
  this.executeCharTest('‚Ñµ', ['alef symbol', 'alef', 'first transfinite cardinal']);
  this.executeCharTest('‚Ñ∂', ['bet symbol', 'bet', 'second transfinite cardinal']);
  this.executeCharTest('‚Ñ∑', ['gimel symbol', 'gimel', 'third transfinite cardinal']);
  this.executeCharTest('‚Ñ∏', ['dalet symbol', 'dalet', 'fourth transfinite cardinal']);
  this.executeCharTest('«ñ', ['latin small letter u with diaeresis and macron', 'u double overdot overbar', 'latin small letter u double overdot overbar']);
  this.executeCharTest('«ò', ['latin small letter u with diaeresis and acute', 'u double overdot acute', 'latin small letter u double overdot acute']);
  this.executeCharTest('«ö', ['latin small letter u with diaeresis and caron', 'u double overdot caron', 'latin small letter u double overdot hacek']);
  this.executeCharTest('«ú', ['latin small letter u with diaeresis and grave', 'u double overdot grave', 'latin small letter u double overdot grave']);
  this.executeCharTest('«ü', ['latin small letter a with diaeresis and macron', 'a double overdot overbar', 'latin small letter a double overdot overbar']);
  this.executeCharTest('«°', ['latin small letter a with dot above and macron', 'a overdot overbar', 'latin small letter a dot overbar']);
  this.executeCharTest('«≠', ['latin small letter o with ogonek and macron', 'o ogonek overbar', 'latin small letter o ogonek overbar']);
  this.executeCharTest('«ª', ['latin small letter a with ring above and acute', 'a ring above acute', 'latin small letter a ring above acute']);
  this.executeCharTest('»´', ['latin small letter o with diaeresis and macron', 'o double overdot overbar', 'latin small letter o double overdot overbar']);
  this.executeCharTest('»≠', ['latin small letter o with tilde and macron', 'o tilde overbar', 'latin small letter o tilde overbar']);
  this.executeCharTest('»±', ['latin small letter o with dot above and macron', 'o overdot overbar', 'latin small letter o overdot overbar']);
  this.executeCharTest('·∏â', ['latin small letter c with cedilla and acute', 'c cedilla acute', 'latin small letter c cedilla acute']);
  this.executeCharTest('·∏ï', ['latin small letter e with macron and grave', 'e overbar grave', 'latin small letter e overbar grave']);
  this.executeCharTest('·∏ó', ['latin small letter e with macron and acute', 'e overbar acute', 'latin small letter e overbar acute']);
  this.executeCharTest('·∏ù', ['latin small letter e with cedilla and breve', 'e cedilla breve', 'latin small letter e cedilla breve']);
  this.executeCharTest('·∏Ø', ['latin small letter i with diaeresis and acute', 'i double overdot acute', 'latin small letter i double overdot acute']);
  this.executeCharTest('·∏π', ['latin small letter l with dot below and macron', 'l underdot overbar', 'latin small letter l underdot overbar']);
  this.executeCharTest('·πç', ['latin small letter o with tilde and acute', 'o tilde acute', 'latin small letter o tilde acute']);
  this.executeCharTest('·πè', ['latin small letter o with tilde and diaeresis', 'o tilde double overdot', 'latin small letter o tilde double overdot']);
  this.executeCharTest('·πë', ['latin small letter o with macron and grave', 'o overbar grave', 'latin small letter o overbar grave']);
  this.executeCharTest('·πì', ['latin small letter o with macron and acute', 'o overbar acute', 'latin small letter o overbar acute']);
  this.executeCharTest('·πù', ['latin small letter r with dot below and macron', 'r underdot overbar', 'latin small letter r underdot overbar']);
  this.executeCharTest('·π•', ['latin small letter s with acute and dot above', 's acute overdot', 'latin small letter s acute overdot']);
  this.executeCharTest('·πß', ['latin small letter s with caron and dot above', 's caron overdot', 'latin small letter s caron overdot']);
  this.executeCharTest('·π©', ['latin small letter s with dot below and dot above', 's underdot overdot', 'latin small letter s underdot overdot']);
  this.executeCharTest('·ππ', ['latin small letter u with tilde and acute', 'u tilde acute', 'latin small letter u tilde acute']);
  this.executeCharTest('·πª', ['latin small letter u with macron and diaeresis', 'u overbar double overdot', 'latin small letter u overbar double overdot']);
  this.executeCharTest('·∫•', ['latin small letter a with circumflex and acute', 'a hat acute', 'latin small letter a hat acute']);
  this.executeCharTest('·∫ß', ['latin small letter a with circumflex and grave', 'a hat grave', 'latin small letter a hat grave']);
  this.executeCharTest('·∫©', ['latin small letter a with circumflex and hook above', 'a hat hook above', 'latin small letter a hat hook above']);
  this.executeCharTest('·∫´', ['latin small letter a with circumflex and tilde', 'a hat tilde', 'latin small letter a hat tilde']);
  this.executeCharTest('·∫≠', ['latin small letter a with circumflex and dot below', 'a hat underdot', 'latin small letter a hat underdot']);
  this.executeCharTest('·∫Ø', ['latin small letter a with breve and acute', 'a breve acute', 'latin small letter a breve acute']);
  this.executeCharTest('·∫±', ['latin small letter a with breve and grave', 'a breve grave', 'latin small letter a breve grave']);
  this.executeCharTest('·∫≥', ['latin small letter a with breve and hook above', 'a breve hook above', 'latin small letter a breve hook above']);
  this.executeCharTest('·∫µ', ['latin small letter a with breve and tilde', 'a breve tilde', 'latin small letter a breve tilde']);
  this.executeCharTest('·∫∑', ['latin small letter a with breve and dot below', 'a breve underdot', 'latin small letter a breve underdot']);
  this.executeCharTest('·∫ø', ['latin small letter e with circumflex and acute', 'e hat acute', 'latin small letter e hat acute']);
  this.executeCharTest('·ªÅ', ['latin small letter e with circumflex and grave', 'e hat grave', 'latin small letter e hat grave']);
  this.executeCharTest('·ªÉ', ['latin small letter e with circumflex and hook above', 'e hat hook above', 'latin small letter e hat hook above']);
  this.executeCharTest('·ªÖ', ['latin small letter e with circumflex and tilde', 'e hat tilde', 'latin small letter e hat tilde']);
  this.executeCharTest('·ªá', ['latin small letter e with circumflex and dot below', 'e hat underdot', 'latin small letter e hat underdot']);
  this.executeCharTest('·ªë', ['latin small letter o with circumflex and acute', 'o hat acute', 'latin small letter o hat acute']);
  this.executeCharTest('·ªì', ['latin small letter o with circumflex and grave', 'o hat grave', 'latin small letter o hat grave']);
  this.executeCharTest('·ªï', ['latin small letter o with circumflex and hook above', 'o hat hook above', 'latin small letter o hat hook above']);
  this.executeCharTest('·ªó', ['latin small letter o with circumflex and tilde', 'o hat tilde', 'latin small letter o hat tilde']);
  this.executeCharTest('·ªô', ['latin small letter o with circumflex and dot below', 'o hat underdot', 'latin small letter o hat underdot']);
  this.executeCharTest('·ªõ', ['latin small letter o with horn and acute', 'o acute prime', 'latin small letter o acute prime']);
  this.executeCharTest('·ªù', ['latin small letter o with horn and grave', 'o grave prime', 'latin small letter o grave prime']);
  this.executeCharTest('·ªü', ['latin small letter o with horn and hook above', 'o hook above prime', 'latin small letter o hook above prime']);
  this.executeCharTest('·ª°', ['latin small letter o with horn and tilde', 'o tilde prime', 'latin small letter o tilde prime']);
  this.executeCharTest('·ª£', ['latin small letter o with horn and dot below', 'o underdot prime', 'latin small letter o underdot prime']);
  this.executeCharTest('·ª©', ['latin small letter u with horn and acute', 'u acute prime', 'latin small letter u acute prime']);
  this.executeCharTest('·ª´', ['latin small letter u with horn and grave', 'u grave prime', 'latin small letter u grave prime']);
  this.executeCharTest('·ª≠', ['latin small letter u with horn and hook above', 'u hook above prime', 'latin small letter u hook above prime']);
  this.executeCharTest('·ªØ', ['latin small letter u with horn and tilde', 'u tilde prime', 'latin small letter u tilde prime']);
  this.executeCharTest('·ª±', ['latin small letter u with horn and dot below', 'u underdot prime', 'latin small letter u underdot prime']);
  this.executeCharTest('a', ['latin small letter a', 'a', 'a']);
  this.executeCharTest('b', ['latin small letter b', 'b', 'b']);
  this.executeCharTest('c', ['latin small letter c', 'c', 'c']);
  this.executeCharTest('d', ['latin small letter d', 'd', 'd']);
  this.executeCharTest('e', ['latin small letter e', 'e', 'e']);
  this.executeCharTest('f', ['latin small letter f', 'f', 'f']);
  this.executeCharTest('g', ['latin small letter g', 'g', 'g']);
  this.executeCharTest('h', ['latin small letter h', 'h', 'h']);
  this.executeCharTest('i', ['latin small letter i', 'i', 'i']);
  this.executeCharTest('j', ['latin small letter j', 'j', 'j']);
  this.executeCharTest('k', ['latin small letter k', 'k', 'k']);
  this.executeCharTest('l', ['latin small letter l', 'l', 'l']);
  this.executeCharTest('m', ['latin small letter m', 'm', 'm']);
  this.executeCharTest('n', ['latin small letter n', 'n', 'n']);
  this.executeCharTest('o', ['latin small letter o', 'o', 'o']);
  this.executeCharTest('p', ['latin small letter p', 'p', 'p']);
  this.executeCharTest('q', ['latin small letter q', 'q', 'q']);
  this.executeCharTest('r', ['latin small letter r', 'r', 'r']);
  this.executeCharTest('s', ['latin small letter s', 's', 's']);
  this.executeCharTest('t', ['latin small letter t', 't', 't']);
  this.executeCharTest('u', ['latin small letter u', 'u', 'u']);
  this.executeCharTest('v', ['latin small letter v', 'v', 'v']);
  this.executeCharTest('w', ['latin small letter w', 'w', 'w']);
  this.executeCharTest('x', ['latin small letter x', 'x', 'x']);
  this.executeCharTest('y', ['latin small letter y', 'y', 'y']);
  this.executeCharTest('z', ['latin small letter z', 'z', 'z']);
  this.executeCharTest('ÔΩÅ', ['fullwidth latin small letter a', 'a', 'a']);
  this.executeCharTest('ÔΩÇ', ['fullwidth latin small letter b', 'b', 'b']);
  this.executeCharTest('ÔΩÉ', ['fullwidth latin small letter c', 'c', 'c']);
  this.executeCharTest('ÔΩÑ', ['fullwidth latin small letter d', 'd', 'd']);
  this.executeCharTest('ÔΩÖ', ['fullwidth latin small letter e', 'e', 'e']);
  this.executeCharTest('ÔΩÜ', ['fullwidth latin small letter f', 'f', 'f']);
  this.executeCharTest('ÔΩá', ['fullwidth latin small letter g', 'g', 'g']);
  this.executeCharTest('ÔΩà', ['fullwidth latin small letter h', 'h', 'h']);
  this.executeCharTest('ÔΩâ', ['fullwidth latin small letter i', 'i', 'i']);
  this.executeCharTest('ÔΩä', ['fullwidth latin small letter j', 'j', 'j']);
  this.executeCharTest('ÔΩã', ['fullwidth latin small letter k', 'k', 'k']);
  this.executeCharTest('ÔΩå', ['fullwidth latin small letter l', 'l', 'l']);
  this.executeCharTest('ÔΩç', ['fullwidth latin small letter m', 'm', 'm']);
  this.executeCharTest('ÔΩé', ['fullwidth latin small letter n', 'n', 'n']);
  this.executeCharTest('ÔΩè', ['fullwidth latin small letter o', 'o', 'o']);
  this.executeCharTest('ÔΩê', ['fullwidth latin small letter p', 'p', 'p']);
  this.executeCharTest('ÔΩë', ['fullwidth latin small letter q', 'q', 'q']);
  this.executeCharTest('ÔΩí', ['fullwidth latin small letter r', 'r', 'r']);
  this.executeCharTest('ÔΩì', ['fullwidth latin small letter s', 's', 's']);
  this.executeCharTest('ÔΩî', ['fullwidth latin small letter t', 't', 't']);
  this.executeCharTest('ÔΩï', ['fullwidth latin small letter u', 'u', 'u']);
  this.executeCharTest('ÔΩñ', ['fullwidth latin small letter v', 'v', 'v']);
  this.executeCharTest('ÔΩó', ['fullwidth latin small letter w', 'w', 'w']);
  this.executeCharTest('ÔΩò', ['fullwidth latin small letter x', 'x', 'x']);
  this.executeCharTest('ÔΩô', ['fullwidth latin small letter y', 'y', 'y']);
  this.executeCharTest('ÔΩö', ['fullwidth latin small letter z', 'z', 'z']);
  this.executeCharTest('√∏', ['latin small letter o with stroke', 'o with stroke', 'latin small letter o slash']);
  this.executeCharTest('ƒë', ['latin small letter d with stroke', 'd with stroke', 'latin small letter d bar']);
  this.executeCharTest('ƒß', ['latin small letter h with stroke', 'h with stroke', 'latin small letter h bar']);
  this.executeCharTest('≈Ç', ['latin small letter l with stroke', 'l with stroke', 'latin small letter l slash']);
  this.executeCharTest('≈ß', ['latin small letter t with stroke', 't with stroke', 'latin small letter t bar']);
  this.executeCharTest('∆Ä', ['latin small letter b with stroke', 'b with stroke', 'latin small letter b bar']);
  this.executeCharTest('∆õ', ['latin small letter lambda with stroke', 'lambda with stroke', 'latin small letter barred lambda']);
  this.executeCharTest('∆∂', ['latin small letter z with stroke', 'z with stroke', 'latin small letter z bar']);
  this.executeCharTest('∆æ', ['latin letter inverted glottal stop with stroke', 'latin letter inverted glottal stop with stroke', 'latin letter inverted glottal stop bar']);
  this.executeCharTest('«•', ['latin small letter g with stroke', 'g with stroke', 'latin small letter g bar']);
  this.executeCharTest('«ø', ['latin small letter o with stroke and acute', 'o with stroke and acute', 'o with stroke and acute']);
  this.executeCharTest('»º', ['latin small letter c with stroke', 'c with stroke', 'c with stroke']);
  this.executeCharTest('…á', ['latin small letter e with stroke', 'e with stroke', 'e with stroke']);
  this.executeCharTest('…â', ['latin small letter j with stroke', 'j with stroke', 'j with stroke']);
  this.executeCharTest('…ç', ['latin small letter r with stroke', 'r with stroke', 'r with stroke']);
  this.executeCharTest('…è', ['latin small letter y with stroke', 'y with stroke', 'y with stroke']);
  this.executeCharTest('…ü', ['latin small letter dotless j with stroke', 'dotless j with stroke', 'latin small letter dotless j bar']);
  this.executeCharTest('…®', ['latin small letter i with stroke', 'i with stroke', 'latin small letter barred i']);
  this.executeCharTest(' Ñ', ['latin small letter dotless j with stroke and hook', 'dotless j with stroke and hook', 'latin small letter dotless j bar hook']);
  this.executeCharTest(' °', ['latin letter glottal stop with stroke', 'latin letter glottal stop with stroke', 'latin letter glottal stop bar']);
  this.executeCharTest(' ¢', ['latin letter reversed glottal stop with stroke', 'latin letter reversed glottal stop with stroke', 'latin letter reversed glottal stop bar']);
  this.executeCharTest('·¥ì', ['latin small letter sideways o with stroke', 'sideways o with stroke', 'sideways o with stroke']);
  this.executeCharTest('·µº', ['latin small letter iota with stroke', 'iota with stroke', 'iota with stroke']);
  this.executeCharTest('·µΩ', ['latin small letter p with stroke', 'p with stroke', 'p with stroke']);
  this.executeCharTest('·µø', ['latin small letter upsilon with stroke', 'upsilon with stroke', 'upsilon with stroke']);
  this.executeCharTest('·∫ú', ['latin small letter long s with diagonal stroke', 'long s with diagonal stroke', 'long s with diagonal stroke']);
  this.executeCharTest('·∫ù', ['latin small letter long s with high stroke', 'long s with high stroke', 'long s with high stroke']);
  this.executeCharTest('∆ç', ['latin small letter turned delta', 'turned delta', 'turned delta']);
  this.executeCharTest('·∫õ', ['latin small letter long s with dot above', 'long s with dot above', 'long s with dot above']);
  this.executeCharTest('·∫ü', ['latin small letter delta', 'delta', 'delta']);
  this.executeCharTest('ƒ∏', ['latin small letter kra', 'kra', 'kra']);
  this.executeCharTest('≈ø', ['latin small letter long s', 'long s', 'long s']);
  this.executeCharTest('∆É', ['latin small letter b with topbar', 'b with topbar', 'latin small letter b topbar']);
  this.executeCharTest('∆Ö', ['latin small letter tone six', 'tone six', 'tone six']);
  this.executeCharTest('∆à', ['latin small letter c with hook', 'c with hook', 'latin small letter c hook']);
  this.executeCharTest('∆å', ['latin small letter d with topbar', 'd with topbar', 'latin small letter d topbar']);
  this.executeCharTest('∆í', ['latin small letter f with hook', 'f with hook', 'latin small letter script f']);
  this.executeCharTest('∆ï', ['latin small letter hv', 'hv', 'latin small letter h v']);
  this.executeCharTest('∆ô', ['latin small letter k with hook', 'k with hook', 'latin small letter k hook']);
  this.executeCharTest('∆ö', ['latin small letter l with bar', 'l with bar', 'latin small letter barred l']);
  this.executeCharTest('∆û', ['latin small letter n with long right leg', 'n with long right leg', 'n with long right leg']);
  this.executeCharTest('∆°', ['latin small letter o with horn', 'o with horn', 'latin small letter o horn']);
  this.executeCharTest('∆£', ['latin small letter oi', 'oi', 'latin small letter o i']);
  this.executeCharTest('∆•', ['latin small letter p with hook', 'p with hook', 'latin small letter p hook']);
  this.executeCharTest('∆®', ['latin small letter tone two', 'tone two', 'tone two']);
  this.executeCharTest('∆™', ['latin letter reversed esh loop', 'latin letter reversed esh loop', 'latin letter reversed esh loop']);
  this.executeCharTest('∆´', ['latin small letter t with palatal hook', 't with palatal hook', 'latin small letter t palatal hook']);
  this.executeCharTest('∆≠', ['latin small letter t with hook', 't with hook', 'latin small letter t hook']);
  this.executeCharTest('∆∞', ['latin small letter u with horn', 'u with horn', 'latin small letter u horn']);
  this.executeCharTest('∆¥', ['latin small letter y with hook', 'y with hook', 'latin small letter y hook']);
  this.executeCharTest('∆π', ['latin small letter ezh reversed', 'ezh reversed', 'latin small letter reversed yogh']);
  this.executeCharTest('∆∫', ['latin small letter ezh with tail', 'ezh with tail', 'latin small letter yogh with tail']);
  this.executeCharTest('∆Ω', ['latin small letter tone five', 'tone five', 'tone five']);
  this.executeCharTest('∆ø', ['latin letter wynn', 'latin letter wynn', 'latin letter wynn']);
  this.executeCharTest('«Ü', ['latin small letter dz with caron', 'dz with caron', 'latin small letter d z hacek']);
  this.executeCharTest('«â', ['latin small letter lj', 'lj', 'latin small letter l j']);
  this.executeCharTest('«å', ['latin small letter nj', 'nj', 'latin small letter n j']);
  this.executeCharTest('«£', ['latin small letter ae with macron', 'ae with macron', 'latin small letter a e macron']);
  this.executeCharTest('«Ø', ['latin small letter ezh with caron', 'ezh with caron', 'latin small letter yogh hacek']);
  this.executeCharTest('«≥', ['latin small letter dz', 'dz', 'dz']);
  this.executeCharTest('»ù', ['latin small letter yogh', 'yogh', 'yogh']);
  this.executeCharTest('…Æ', ['latin small letter lezh', 'lezh', 'latin small letter l yogh']);
  this.executeCharTest(' í', ['latin small letter ezh', 'ezh', 'latin small letter yogh']);
  this.executeCharTest(' ì', ['latin small letter ezh with curl', 'ezh with curl', 'latin small letter yogh curl']);
  this.executeCharTest(' §', ['latin small letter dezh digraph', 'dezh digraph', 'latin small letter d yogh']);
  this.executeCharTest('«ù', ['latin small letter turned e', 'turned e', 'turned e']);
  this.executeCharTest('«Ω', ['latin small letter ae with acute', 'ae with acute', 'ae with acute']);
  this.executeCharTest('»°', ['latin small letter d with curl', 'd with curl', 'd with curl']);
  this.executeCharTest('»£', ['latin small letter ou', 'ou', 'ou']);
  this.executeCharTest('»•', ['latin small letter z with hook', 'z with hook', 'z with hook']);
  this.executeCharTest('»¥', ['latin small letter l with curl', 'l with curl', 'l with curl']);
  this.executeCharTest('»µ', ['latin small letter n with curl', 'n with curl', 'n with curl']);
  this.executeCharTest('»∂', ['latin small letter t with curl', 't with curl', 't with curl']);
  this.executeCharTest('»∏', ['latin small letter db digraph', 'db digraph', 'db digraph']);
  this.executeCharTest('»π', ['latin small letter qp digraph', 'qp digraph', 'qp digraph']);
  this.executeCharTest('»ø', ['latin small letter s with swash tail', 's with swash tail', 's with swash tail']);
  this.executeCharTest('…Ä', ['latin small letter z with swash tail', 'z with swash tail', 'z with swash tail']);
  this.executeCharTest('…Ç', ['latin small letter glottal stop', 'glottal stop', 'glottal stop']);
  this.executeCharTest('…ã', ['latin small letter q with hook tail', 'q with hook tail', 'q with hook tail']);
  this.executeCharTest('…ê', ['latin small letter turned a', 'turned a', 'turned a']);
  this.executeCharTest('…ë', ['latin small letter alpha', 'alpha', 'latin small letter script a']);
  this.executeCharTest('…í', ['latin small letter turned alpha', 'turned alpha', 'latin small letter turned script a']);
  this.executeCharTest('…ì', ['latin small letter b with hook', 'b with hook', 'latin small letter b hook']);
  this.executeCharTest('…î', ['latin small letter open o', 'open o', 'open o']);
  this.executeCharTest('…ï', ['latin small letter c with curl', 'c with curl', 'latin small letter c curl']);
  this.executeCharTest('…ñ', ['latin small letter d with tail', 'd with tail', 'latin small letter d retroflex hook']);
  this.executeCharTest('…ó', ['latin small letter d with hook', 'd with hook', 'latin small letter d hook']);
  this.executeCharTest('…ò', ['latin small letter reversed e', 'reversed e', 'reversed e']);
  this.executeCharTest('…ô', ['latin small letter schwa', 'schwa', 'schwa']);
  this.executeCharTest('…ö', ['latin small letter schwa with hook', 'schwa with hook', 'latin small letter schwa hook']);
  this.executeCharTest('…õ', ['latin small letter open e', 'open e', 'latin small letter epsilon']);
  this.executeCharTest('…ú', ['latin small letter reversed open e', 'reversed open e', 'latin small letter reversed epsilon']);
  this.executeCharTest('…ù', ['latin small letter reversed open e with hook', 'reversed open e with hook', 'latin small letter reversed epsilon hook']);
  this.executeCharTest('…û', ['latin small letter closed reversed open e', 'closed reversed open e', 'latin small letter closed reversed epsilon']);
  this.executeCharTest('…†', ['latin small letter g with hook', 'g with hook', 'latin small letter g hook']);
  this.executeCharTest('…°', ['latin small letter script g', 'script g', 'script g']);
  this.executeCharTest('…£', ['latin small letter gamma', 'gamma', 'gamma']);
  this.executeCharTest('…§', ['latin small letter rams horn', 'rams horn', 'latin small letter baby gamma']);
  this.executeCharTest('…•', ['latin small letter turned h', 'turned h', 'turned h']);
  this.executeCharTest('…¶', ['latin small letter h with hook', 'h with hook', 'latin small letter h hook']);
  this.executeCharTest('…ß', ['latin small letter heng with hook', 'heng with hook', 'latin small letter heng hook']);
  this.executeCharTest('…©', ['latin small letter iota', 'iota', 'iota']);
  this.executeCharTest('…´', ['latin small letter l with middle tilde', 'l with middle tilde', 'l with middle tilde']);
  this.executeCharTest('…¨', ['latin small letter l with belt', 'l with belt', 'latin small letter l belt']);
  this.executeCharTest('…≠', ['latin small letter l with retroflex hook', 'l with retroflex hook', 'latin small letter l retroflex hook']);
  this.executeCharTest('…Ø', ['latin small letter turned m', 'turned m', 'turned m']);
  this.executeCharTest('…∞', ['latin small letter turned m with long leg', 'turned m with long leg', 'turned m with long leg']);
  this.executeCharTest('…±', ['latin small letter m with hook', 'm with hook', 'latin small letter m hook']);
  this.executeCharTest('…≤', ['latin small letter n with left hook', 'n with left hook', 'latin small letter n hook']);
  this.executeCharTest('…≥', ['latin small letter n with retroflex hook', 'n with retroflex hook', 'latin small letter n retroflex hook']);
  this.executeCharTest('…µ', ['latin small letter barred o', 'barred o', 'barred o']);
  this.executeCharTest('…∑', ['latin small letter closed omega', 'closed omega', 'closed omega']);
  this.executeCharTest('…∏', ['latin small letter phi', 'phi', 'phi']);
  this.executeCharTest('…π', ['latin small letter turned r', 'turned r', 'turned r']);
  this.executeCharTest('…∫', ['latin small letter turned r with long leg', 'turned r with long leg', 'turned r with long leg']);
  this.executeCharTest('…ª', ['latin small letter turned r with hook', 'turned r with hook', 'latin small letter turned r hook']);
  this.executeCharTest('…º', ['latin small letter r with long leg', 'r with long leg', 'r with long leg']);
  this.executeCharTest('…Ω', ['latin small letter r with tail', 'r with tail', 'latin small letter r hook']);
  this.executeCharTest('…æ', ['latin small letter r with fishhook', 'r with fishhook', 'latin small letter fishhook r']);
  this.executeCharTest('…ø', ['latin small letter reversed r with fishhook', 'reversed r with fishhook', 'latin small letter reversed fishhook r']);
  this.executeCharTest(' Ç', ['latin small letter s with hook', 's with hook', 'latin small letter s hook']);
  this.executeCharTest(' É', ['latin small letter esh', 'esh', 'esh']);
  this.executeCharTest(' Ö', ['latin small letter squat reversed esh', 'squat reversed esh', 'squat reversed esh']);
  this.executeCharTest(' Ü', ['latin small letter esh with curl', 'esh with curl', 'latin small letter esh curl']);
  this.executeCharTest(' á', ['latin small letter turned t', 'turned t', 'turned t']);
  this.executeCharTest(' à', ['latin small letter t with retroflex hook', 't with retroflex hook', 'latin small letter t retroflex hook']);
  this.executeCharTest(' â', ['latin small letter u bar', 'u bar', 'u bar']);
  this.executeCharTest(' ä', ['latin small letter upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest(' ã', ['latin small letter v with hook', 'v with hook', 'latin small letter script v']);
  this.executeCharTest(' å', ['latin small letter turned v', 'turned v', 'turned v']);
  this.executeCharTest(' ç', ['latin small letter turned w', 'turned w', 'turned w']);
  this.executeCharTest(' é', ['latin small letter turned y', 'turned y', 'turned y']);
  this.executeCharTest(' ê', ['latin small letter z with retroflex hook', 'z with retroflex hook', 'latin small letter z retroflex hook']);
  this.executeCharTest(' ë', ['latin small letter z with curl', 'z with curl', 'latin small letter z curl']);
  this.executeCharTest(' ï', ['latin letter pharyngeal voiced fricative', 'latin letter pharyngeal voiced fricative', 'latin letter reversed glottal stop']);
  this.executeCharTest(' ñ', ['latin letter inverted glottal stop', 'latin letter inverted glottal stop', 'latin letter inverted glottal stop']);
  this.executeCharTest(' ó', ['latin letter stretched c', 'latin letter stretched c', 'latin letter stretched c']);
  this.executeCharTest(' ò', ['latin letter bilabial click', 'latin letter bilabial click', 'latin letter bullseye']);
  this.executeCharTest(' ö', ['latin small letter closed open e', 'closed open e', 'latin small letter closed epsilon']);
  this.executeCharTest(' û', ['latin small letter turned k', 'turned k', 'turned k']);
  this.executeCharTest(' †', ['latin small letter q with hook', 'q with hook', 'latin small letter q hook']);
  this.executeCharTest(' £', ['latin small letter dz digraph', 'dz digraph', 'latin small letter d z']);
  this.executeCharTest(' •', ['latin small letter dz digraph with curl', 'dz digraph with curl', 'latin small letter d z curl']);
  this.executeCharTest(' ¶', ['latin small letter ts digraph', 'ts digraph', 'latin small letter t s']);
  this.executeCharTest(' ß', ['latin small letter tesh digraph', 'tesh digraph', 'latin small letter t esh']);
  this.executeCharTest(' ®', ['latin small letter tc digraph with curl', 'tc digraph with curl', 'latin small letter t c curl']);
  this.executeCharTest(' ©', ['latin small letter feng digraph', 'feng digraph', 'feng digraph']);
  this.executeCharTest(' ™', ['latin small letter ls digraph', 'ls digraph', 'ls digraph']);
  this.executeCharTest(' ´', ['latin small letter lz digraph', 'lz digraph', 'lz digraph']);
  this.executeCharTest(' ¨', ['latin letter bilabial percussive', 'latin letter bilabial percussive', 'latin letter bilabial percussive']);
  this.executeCharTest(' ≠', ['latin letter bidental percussive', 'latin letter bidental percussive', 'latin letter bidental percussive']);
  this.executeCharTest(' Æ', ['latin small letter turned h with fishhook', 'turned h with fishhook', 'turned h with fishhook']);
  this.executeCharTest(' Ø', ['latin small letter turned h with fishhook and tail', 'turned h with fishhook and tail', 'turned h with fishhook and tail']);
  this.executeCharTest('·¥Ç', ['latin small letter turned ae', 'turned ae', 'turned ae']);
  this.executeCharTest('·¥à', ['latin small letter turned open e', 'turned open e', 'turned open e']);
  this.executeCharTest('·¥â', ['latin small letter turned i', 'turned i', 'turned i']);
  this.executeCharTest('·¥ë', ['latin small letter sideways o', 'sideways o', 'sideways o']);
  this.executeCharTest('·¥í', ['latin small letter sideways open o', 'sideways open o', 'sideways open o']);
  this.executeCharTest('·¥î', ['latin small letter turned oe', 'turned oe', 'turned oe']);
  this.executeCharTest('·¥ñ', ['latin small letter top half o', 'top half o', 'top half o']);
  this.executeCharTest('·¥ó', ['latin small letter bottom half o', 'bottom half o', 'bottom half o']);
  this.executeCharTest('·¥ù', ['latin small letter sideways u', 'sideways u', 'sideways u']);
  this.executeCharTest('·¥û', ['latin small letter sideways diaeresized u', 'sideways diaeresized u', 'sideways diaeresized u']);
  this.executeCharTest('·¥ü', ['latin small letter sideways turned m', 'sideways turned m', 'sideways turned m']);
  this.executeCharTest('·¥§', ['latin letter voiced laryngeal spirant', 'latin letter voiced laryngeal spirant', 'latin letter voiced laryngeal spirant']);
  this.executeCharTest('·¥•', ['latin letter ain', 'latin letter ain', 'latin letter ain']);
  this.executeCharTest('·µ´', ['latin small letter ue', 'ue', 'ue']);
  this.executeCharTest('·µ¨', ['latin small letter b with middle tilde', 'b with middle tilde', 'b with middle tilde']);
  this.executeCharTest('·µ≠', ['latin small letter d with middle tilde', 'd with middle tilde', 'd with middle tilde']);
  this.executeCharTest('·µÆ', ['latin small letter f with middle tilde', 'f with middle tilde', 'f with middle tilde']);
  this.executeCharTest('·µØ', ['latin small letter m with middle tilde', 'm with middle tilde', 'm with middle tilde']);
  this.executeCharTest('·µ∞', ['latin small letter n with middle tilde', 'n with middle tilde', 'n with middle tilde']);
  this.executeCharTest('·µ±', ['latin small letter p with middle tilde', 'p with middle tilde', 'p with middle tilde']);
  this.executeCharTest('·µ≤', ['latin small letter r with middle tilde', 'r with middle tilde', 'r with middle tilde']);
  this.executeCharTest('·µ≥', ['latin small letter r with fishhook and middle tilde', 'r with fishhook and middle tilde', 'r with fishhook and middle tilde']);
  this.executeCharTest('·µ¥', ['latin small letter s with middle tilde', 's with middle tilde', 's with middle tilde']);
  this.executeCharTest('·µµ', ['latin small letter t with middle tilde', 't with middle tilde', 't with middle tilde']);
  this.executeCharTest('·µ∂', ['latin small letter z with middle tilde', 'z with middle tilde', 'z with middle tilde']);
  this.executeCharTest('·µ∑', ['latin small letter turned g', 'turned g', 'turned g']);
  this.executeCharTest('·µπ', ['latin small letter insular g', 'insular g', 'insular g']);
  this.executeCharTest('·µ∫', ['latin small letter th with strikethrough', 'th with strikethrough', 'th with strikethrough']);
  this.executeCharTest('·∂Ä', ['latin small letter b with palatal hook', 'b with palatal hook', 'b with palatal hook']);
  this.executeCharTest('·∂Å', ['latin small letter d with palatal hook', 'd with palatal hook', 'd with palatal hook']);
  this.executeCharTest('·∂Ç', ['latin small letter f with palatal hook', 'f with palatal hook', 'f with palatal hook']);
  this.executeCharTest('·∂É', ['latin small letter g with palatal hook', 'g with palatal hook', 'g with palatal hook']);
  this.executeCharTest('·∂Ñ', ['latin small letter k with palatal hook', 'k with palatal hook', 'k with palatal hook']);
  this.executeCharTest('·∂Ö', ['latin small letter l with palatal hook', 'l with palatal hook', 'l with palatal hook']);
  this.executeCharTest('·∂Ü', ['latin small letter m with palatal hook', 'm with palatal hook', 'm with palatal hook']);
  this.executeCharTest('·∂á', ['latin small letter n with palatal hook', 'n with palatal hook', 'n with palatal hook']);
  this.executeCharTest('·∂à', ['latin small letter p with palatal hook', 'p with palatal hook', 'p with palatal hook']);
  this.executeCharTest('·∂â', ['latin small letter r with palatal hook', 'r with palatal hook', 'r with palatal hook']);
  this.executeCharTest('·∂ä', ['latin small letter s with palatal hook', 's with palatal hook', 's with palatal hook']);
  this.executeCharTest('·∂ã', ['latin small letter esh with palatal hook', 'esh with palatal hook', 'esh with palatal hook']);
  this.executeCharTest('·∂å', ['latin small letter v with palatal hook', 'v with palatal hook', 'v with palatal hook']);
  this.executeCharTest('·∂ç', ['latin small letter x with palatal hook', 'x with palatal hook', 'x with palatal hook']);
  this.executeCharTest('·∂é', ['latin small letter z with palatal hook', 'z with palatal hook', 'z with palatal hook']);
  this.executeCharTest('·∂è', ['latin small letter a with retroflex hook', 'a with retroflex hook', 'a with retroflex hook']);
  this.executeCharTest('·∂ê', ['latin small letter alpha with retroflex hook', 'alpha with retroflex hook', 'alpha with retroflex hook']);
  this.executeCharTest('·∂ë', ['latin small letter d with hook and tail', 'd with hook and tail', 'd with hook and tail']);
  this.executeCharTest('·∂í', ['latin small letter e with retroflex hook', 'e with retroflex hook', 'e with retroflex hook']);
  this.executeCharTest('·∂ì', ['latin small letter open e with retroflex hook', 'open e with retroflex hook', 'open e with retroflex hook']);
  this.executeCharTest('·∂î', ['latin small letter reversed open e with retroflex hook', 'reversed open e with retroflex hook', 'reversed open e with retroflex hook']);
  this.executeCharTest('·∂ï', ['latin small letter schwa with retroflex hook', 'schwa with retroflex hook', 'schwa with retroflex hook']);
  this.executeCharTest('·∂ñ', ['latin small letter i with retroflex hook', 'i with retroflex hook', 'i with retroflex hook']);
  this.executeCharTest('·∂ó', ['latin small letter open o with retroflex hook', 'open o with retroflex hook', 'open o with retroflex hook']);
  this.executeCharTest('·∂ò', ['latin small letter esh with retroflex hook', 'esh with retroflex hook', 'esh with retroflex hook']);
  this.executeCharTest('·∂ô', ['latin small letter u with retroflex hook', 'u with retroflex hook', 'u with retroflex hook']);
  this.executeCharTest('·∂ö', ['latin small letter ezh with retroflex hook', 'ezh with retroflex hook', 'ezh with retroflex hook']);
  this.executeCharTest('≈â', ['latin small letter n preceded by apostrophe', 'n preceded by apostrophe', 'latin small letter apostrophe n']);
  this.executeCharTest('≈ã', ['latin small letter eng', 'eng', 'eng']);
  this.executeCharTest('√†', ['latin small letter a with grave', 'a grave', 'latin small letter a grave']);
  this.executeCharTest('√°', ['latin small letter a with acute', 'a acute', 'latin small letter a acute']);
  this.executeCharTest('√¢', ['latin small letter a with circumflex', 'a hat', 'latin small letter a hat']);
  this.executeCharTest('√£', ['latin small letter a with tilde', 'a tilde', 'latin small letter a tilde']);
  this.executeCharTest('√§', ['latin small letter a with diaeresis', 'a double overdot', 'latin small letter a double overdot']);
  this.executeCharTest('√•', ['latin small letter a with ring above', 'a ring', 'latin small letter a ring']);
  this.executeCharTest('√ß', ['latin small letter c with cedilla', 'c cedilla', 'latin small letter c cedilla']);
  this.executeCharTest('√®', ['latin small letter e with grave', 'e grave', 'latin small letter e grave']);
  this.executeCharTest('√©', ['latin small letter e with acute', 'e acute', 'latin small letter e acute']);
  this.executeCharTest('√™', ['latin small letter e with circumflex', 'e hat', 'latin small letter e hat']);
  this.executeCharTest('√´', ['latin small letter e with diaeresis', 'e double overdot', 'latin small letter e double overdot']);
  this.executeCharTest('√¨', ['latin small letter i with grave', 'i grave', 'latin small letter i grave']);
  this.executeCharTest('√≠', ['latin small letter i with acute', 'i acute', 'latin small letter i acute']);
  this.executeCharTest('√Æ', ['latin small letter i with circumflex', 'i hat', 'latin small letter i hat']);
  this.executeCharTest('√Ø', ['latin small letter i with diaeresis', 'i double overdot', 'latin small letter i double overdot']);
  this.executeCharTest('√±', ['latin small letter n with tilde', 'n tilde', 'latin small letter n tilde']);
  this.executeCharTest('√≤', ['latin small letter o with grave', 'o grave', 'latin small letter o grave']);
  this.executeCharTest('√≥', ['latin small letter o with acute', 'o acute', 'latin small letter o acute']);
  this.executeCharTest('√¥', ['latin small letter o with circumflex', 'o hat', 'latin small letter o hat']);
  this.executeCharTest('√µ', ['latin small letter o with tilde', 'o tilde', 'latin small letter o tilde']);
  this.executeCharTest('√∂', ['latin small letter o with diaeresis', 'o double overdot', 'latin small letter o double overdot']);
  this.executeCharTest('√π', ['latin small letter u with grave', 'u grave', 'latin small letter u grave']);
  this.executeCharTest('√∫', ['latin small letter u with acute', 'u acute', 'latin small letter u acute']);
  this.executeCharTest('√ª', ['latin small letter u with circumflex', 'u hat', 'latin small letter u hat']);
  this.executeCharTest('√º', ['latin small letter u with diaeresis', 'u double overdot', 'latin small letter u double overdot']);
  this.executeCharTest('√Ω', ['latin small letter y with acute', 'y acute', 'latin small letter y acute']);
  this.executeCharTest('√ø', ['latin small letter y with diaeresis', 'y double overdot', 'latin small letter y double overdot']);
  this.executeCharTest('ƒÅ', ['latin small letter a with macron', 'a overbar', 'latin small letter a overbar']);
  this.executeCharTest('ƒÉ', ['latin small letter a with breve', 'a breve', 'latin small letter a breve']);
  this.executeCharTest('ƒÖ', ['latin small letter a with ogonek', 'a ogonek', 'latin small letter a ogonek']);
  this.executeCharTest('ƒá', ['latin small letter c with acute', 'c acute', 'latin small letter c acute']);
  this.executeCharTest('ƒâ', ['latin small letter c with circumflex', 'c hat', 'latin small letter c hat']);
  this.executeCharTest('ƒã', ['latin small letter c with dot above', 'c overdot', 'latin small letter c dot']);
  this.executeCharTest('ƒç', ['latin small letter c with caron', 'c caron', 'latin small letter c hacek']);
  this.executeCharTest('ƒè', ['latin small letter d with caron', 'd caron', 'latin small letter d hacek']);
  this.executeCharTest('ƒì', ['latin small letter e with macron', 'e overbar', 'latin small letter e overbar']);
  this.executeCharTest('ƒï', ['latin small letter e with breve', 'e breve', 'latin small letter e breve']);
  this.executeCharTest('ƒó', ['latin small letter e with dot above', 'e overdot', 'latin small letter e dot']);
  this.executeCharTest('ƒô', ['latin small letter e with ogonek', 'e ogonek', 'latin small letter e ogonek']);
  this.executeCharTest('ƒõ', ['latin small letter e with caron', 'e caron', 'latin small letter e hacek']);
  this.executeCharTest('ƒù', ['latin small letter g with circumflex', 'g hat', 'latin small letter g hat']);
  this.executeCharTest('ƒü', ['latin small letter g with breve', 'g breve', 'latin small letter g breve']);
  this.executeCharTest('ƒ°', ['latin small letter g with dot above', 'g overdot', 'latin small letter g dot']);
  this.executeCharTest('ƒ£', ['latin small letter g with cedilla', 'g cedilla', 'latin small letter g cedilla']);
  this.executeCharTest('ƒ•', ['latin small letter h with circumflex', 'h hat', 'latin small letter h hat']);
  this.executeCharTest('ƒ©', ['latin small letter i with tilde', 'i tilde', 'latin small letter i tilde']);
  this.executeCharTest('ƒ´', ['latin small letter i with macron', 'i overbar', 'latin small letter i overbar']);
  this.executeCharTest('ƒ≠', ['latin small letter i with breve', 'i breve', 'latin small letter i breve']);
  this.executeCharTest('ƒØ', ['latin small letter i with ogonek', 'i ogonek', 'latin small letter i ogonek']);
  this.executeCharTest('ƒ±', ['latin small letter dotless i', 'dotless i', 'latin small letter dotless i']);
  this.executeCharTest('ƒµ', ['latin small letter j circumflex', 'j hat', 'latin small letter j hat']);
  this.executeCharTest('ƒ∑', ['latin small letter k with cedilla', 'k cedilla', 'latin small letter k cedilla']);
  this.executeCharTest('ƒ∫', ['latin small letter l with acute', 'l acute', 'latin small letter l acute']);
  this.executeCharTest('ƒº', ['latin small letter l with cedilla', 'l cedilla', 'latin small letter l cedilla']);
  this.executeCharTest('ƒæ', ['latin small letter l with caron', 'l caron', 'latin small letter l hacek']);
  this.executeCharTest('≈Ä', ['latin small letter l with middle dot', 'l middle dot', 'latin small letter l middle dot']);
  this.executeCharTest('≈Ñ', ['latin small letter n with acute', 'n acute', 'latin small letter n acute']);
  this.executeCharTest('≈Ü', ['latin small letter n with cedilla', 'n cedilla', 'latin small letter n cedilla']);
  this.executeCharTest('≈à', ['latin small letter n with caron', 'n caron', 'latin small letter n hacek']);
  this.executeCharTest('≈ç', ['latin small letter o macron', 'o overbar', 'latin small letter o overbar']);
  this.executeCharTest('≈è', ['latin small letter o with breve', 'o breve', 'latin small letter o breve']);
  this.executeCharTest('≈ë', ['latin small letter o with double acute', 'o double acute', 'latin small letter o double acute']);
  this.executeCharTest('≈ï', ['latin small letter r with acute', 'r acute', 'latin small letter r acute']);
  this.executeCharTest('≈ó', ['latin small letter r with cedilla', 'r cedilla', 'latin small letter r cedilla']);
  this.executeCharTest('≈ô', ['latin small letter r with caron', 'r caron', 'latin small letter r hacek']);
  this.executeCharTest('≈õ', ['latin small letter s with acute', 's acute', 'latin small letter s acute']);
  this.executeCharTest('≈ù', ['latin small letter s with circumflex', 's hat', 'latin small letter s hat']);
  this.executeCharTest('≈ü', ['latin small letter s with cedilla', 's cedilla', 'latin small letter s cedilla']);
  this.executeCharTest('≈°', ['latin small letter s with caron', 's caron', 'latin small letter s hacek']);
  this.executeCharTest('≈£', ['latin small letter t with cedilla', 't cedilla', 'latin small letter t cedilla']);
  this.executeCharTest('≈•', ['latin small letter t with caron', 't caron', 'latin small letter t hacek']);
  this.executeCharTest('≈©', ['latin small letter u with tilde', 'u tilde', 'latin small letter u tilde']);
  this.executeCharTest('≈´', ['latin small letter u with macron', 'u overbar', 'latin small letter u overbar']);
  this.executeCharTest('≈≠', ['latin small letter u with breve', 'u breve', 'latin small letter u breve']);
  this.executeCharTest('≈Ø', ['latin small letter u with ring above', 'u ring', 'latin small letter u ring']);
  this.executeCharTest('≈±', ['latin small letter u with double acute', 'u double acute', 'latin small letter u double acute']);
  this.executeCharTest('≈≥', ['latin small letter u with ogonek', 'u ogonek', 'latin small letter u ogonek']);
  this.executeCharTest('≈µ', ['latin small letter w with circumflex', 'w hat', 'latin small letter w hat']);
  this.executeCharTest('≈∑', ['latin small letter y with circumflex', 'y hat', 'latin small letter y hat']);
  this.executeCharTest('≈∫', ['latin small letter z with acute', 'z acute', 'latin small letter z acute']);
  this.executeCharTest('≈º', ['latin small letter z with dot above', 'z overdot', 'latin small letter z dot']);
  this.executeCharTest('≈æ', ['latin small letter z with caron', 'z caron', 'latin small letter z hacek']);
  this.executeCharTest('«é', ['latin small letter a with caron', 'a caron', 'latin small letter a hacek']);
  this.executeCharTest('«ê', ['latin small letter i with caron', 'i caron', 'latin small letter i hacek']);
  this.executeCharTest('«í', ['latin small letter o with caron', 'o caron', 'latin small letter o hacek']);
  this.executeCharTest('«î', ['latin small letter u with caron', 'u caron', 'latin small letter u hacek']);
  this.executeCharTest('«ß', ['latin small letter g with caron', 'g caron', 'latin small letter g hacek']);
  this.executeCharTest('«©', ['latin small letter k with caron', 'k caron', 'latin small letter k hacek']);
  this.executeCharTest('«´', ['latin small letter o with ogonek', 'o ogonek', 'latin small letter o ogonek']);
  this.executeCharTest('«∞', ['latin small letter j with caron', 'j caron', 'latin small letter j hacek']);
  this.executeCharTest('«µ', ['latin small letter g with acute', 'g acute', 'latin small letter g acute']);
  this.executeCharTest('«π', ['latin small letter n with grave', 'n grave', 'latin small letter n grave']);
  this.executeCharTest('»Å', ['latin small letter a with double grave', 'a double grave', 'latin small letter a double grave']);
  this.executeCharTest('»É', ['latin small letter a with inverted breve', 'a inverted breve', 'latin small letter a inverted breve']);
  this.executeCharTest('»Ö', ['latin small letter e with double grave', 'e double grave', 'latin small letter e double grave']);
  this.executeCharTest('»á', ['latin small letter e with inverted breve', 'e inverted breve', 'latin small letter e inverted breve']);
  this.executeCharTest('»â', ['latin small letter i with double grave', 'i double grave', 'latin small letter i double grave']);
  this.executeCharTest('»ã', ['latin small letter i with inverted breve', 'i inverted breve', 'latin small letter i inverted breve']);
  this.executeCharTest('»ç', ['latin small letter o with double grave', 'o double grave', 'latin small letter o double grave']);
  this.executeCharTest('»è', ['latin small letter o with inverted breve', 'o inverted breve', 'latin small letter o inverted breve']);
  this.executeCharTest('»ë', ['latin small letter r with double grave', 'r double grave', 'latin small letter r double grave']);
  this.executeCharTest('»ì', ['latin small letter r with inverted breve', 'r inverted breve', 'latin small letter r inverted breve']);
  this.executeCharTest('»ï', ['latin small letter u with double grave', 'u double grave', 'latin small letter u double grave']);
  this.executeCharTest('»ó', ['latin small letter u with inverted breve', 'u inverted breve', 'latin small letter u inverted breve']);
  this.executeCharTest('»ô', ['latin small letter s with comma below', 's comma below', 'latin small letter s comma below']);
  this.executeCharTest('»õ', ['latin small letter t with comma below', 't comma below', 'latin small letter t comma below']);
  this.executeCharTest('»ü', ['latin small letter h with caron', 'h caron', 'latin small letter h caron']);
  this.executeCharTest('»ß', ['latin small letter a with dot above', 'a overdot', 'latin small letter a overdot']);
  this.executeCharTest('»©', ['latin small letter e with cedilla', 'e cedilla', 'latin small letter e cedilla']);
  this.executeCharTest('»Ø', ['latin small letter o with dot above', 'o overdot', 'latin small letter o overdot']);
  this.executeCharTest('»≥', ['latin small letter y with macron', 'y overbar', 'latin small letter y overbar']);
  this.executeCharTest('»∑', ['latin small letter dotless j', 'dotless j', 'latin small letter dotless j']);
  this.executeCharTest('·∏Å', ['latin small letter a ring below', 'a ring below', 'latin small letter a ring below']);
  this.executeCharTest('·∏É', ['latin small letter b with dot above', 'b overdot', 'latin small letter b overdot']);
  this.executeCharTest('·∏Ö', ['latin small letter b with dot below', 'b underdot', 'latin small letter b underdot']);
  this.executeCharTest('·∏á', ['latin small letter b with line below', 'b underbar', 'latin small letter b underbar']);
  this.executeCharTest('·∏ã', ['latin small letter d with dot above', 'd overdot', 'latin small letter d overdot']);
  this.executeCharTest('·∏ç', ['latin small letter d with dot below', 'd underdot', 'latin small letter d underdot']);
  this.executeCharTest('·∏è', ['latin small letter d with line below', 'd underbar', 'latin small letter d underbar']);
  this.executeCharTest('·∏ë', ['latin small letter d with cedilla', 'd cedilla', 'latin small letter d cedilla']);
  this.executeCharTest('·∏ì', ['latin small letter d with circumflex below', 'd underhat', 'latin small letter d underhat']);
  this.executeCharTest('·∏ô', ['latin small letter e with circumflex below', 'e underhat', 'latin small letter e underhat']);
  this.executeCharTest('·∏õ', ['latin small letter e with tilde below', 'e tilde below', 'latin small letter e tilde below']);
  this.executeCharTest('·∏ü', ['latin small letter f with dot above', 'f overdot', 'latin small letter f overdot']);
  this.executeCharTest('·∏°', ['latin small letter g with macron', 'g overbar', 'latin small letter g overbar']);
  this.executeCharTest('·∏£', ['latin small letter h with dot above', 'h overdot', 'latin small letter h overdot']);
  this.executeCharTest('·∏•', ['latin small letter h with dot below', 'h underdot', 'latin small letter h underdot']);
  this.executeCharTest('·∏ß', ['latin small letter h with diaeresis', 'h double overdot', 'latin small letter h double overdot']);
  this.executeCharTest('·∏©', ['latin small letter h with cedilla', 'h cedilla', 'latin small letter h cedilla']);
  this.executeCharTest('·∏´', ['latin small letter h with breve below', 'h breve below', 'latin small letter h breve below']);
  this.executeCharTest('·∏≠', ['latin small letter i with tilde below', 'i tilde below', 'latin small letter i tilde below']);
  this.executeCharTest('·∏±', ['latin small letter k with acute', 'k acute', 'latin small letter k acute']);
  this.executeCharTest('·∏≥', ['latin small letter k with dot below', 'k underdot', 'latin small letter k underdot']);
  this.executeCharTest('·∏µ', ['latin small letter k with line below', 'k underbar', 'latin small letter k underbar']);
  this.executeCharTest('·∏∑', ['latin small letter l with dot below', 'l underdot', 'latin small letter l underdot']);
  this.executeCharTest('·∏ª', ['latin small letter l with line below', 'l underbar', 'latin small letter l underbar']);
  this.executeCharTest('·∏Ω', ['latin small letter l with circumflex below', 'l underhat', 'latin small letter l underhat']);
  this.executeCharTest('·∏ø', ['latin small letter m with acute', 'm acute', 'latin small letter m acute']);
  this.executeCharTest('·πÅ', ['latin small letter m with dot above', 'm overdot', 'latin small letter m overdot']);
  this.executeCharTest('·πÉ', ['latin small letter m with dot below', 'm underdot', 'latin small letter m underdot']);
  this.executeCharTest('·πÖ', ['latin small letter n with dot above', 'n overdot', 'latin small letter n overdot']);
  this.executeCharTest('·πá', ['latin small letter n with dot below', 'n underdot', 'latin small letter n underdot']);
  this.executeCharTest('·πâ', ['latin small letter n with line below', 'n underbar', 'latin small letter n underbar']);
  this.executeCharTest('·πã', ['latin small letter n with circumflex below', 'n underhat', 'latin small letter n underhat']);
  this.executeCharTest('·πï', ['latin small letter p with acute', 'p acute', 'latin small letter p acute']);
  this.executeCharTest('·πó', ['latin small letter p with dot above', 'p overdot', 'latin small letter p overdot']);
  this.executeCharTest('·πô', ['latin small letter r with dot above', 'r overdot', 'latin small letter r overdot']);
  this.executeCharTest('·πõ', ['latin small letter r with dot below', 'r underdot', 'latin small letter r underdot']);
  this.executeCharTest('·πü', ['latin small letter r with line below', 'r underbar', 'latin small letter r underbar']);
  this.executeCharTest('·π°', ['latin small letter s with dot above', 's overdot', 'latin small letter s overdot']);
  this.executeCharTest('·π£', ['latin small letter s with dot below', 's underdot', 'latin small letter s underdot']);
  this.executeCharTest('·π´', ['latin small letter t with dot above', 't overdot', 'latin small letter t overdot']);
  this.executeCharTest('·π≠', ['latin small letter t with dot below', 't underdot', 'latin small letter t underdot']);
  this.executeCharTest('·πØ', ['latin small letter t with line below', 't underbar', 'latin small letter t underbar']);
  this.executeCharTest('·π±', ['latin small letter t with circumflex below', 't underhat', 'latin small letter t underhat']);
  this.executeCharTest('·π≥', ['latin small letter u with diaeresis below', 'u double underdot', 'latin small letter u double underdot']);
  this.executeCharTest('·πµ', ['latin small letter u with tilde below', 'u tilde below', 'latin small letter u tilde below']);
  this.executeCharTest('·π∑', ['latin small letter u with circumflex below', 'u underhat', 'latin small letter u underhat']);
  this.executeCharTest('·πΩ', ['latin small letter v with tilde', 'v tilde', 'latin small letter v tilde']);
  this.executeCharTest('·πø', ['latin small letter v with dot below', 'v underdot', 'latin small letter v underdot']);
  this.executeCharTest('·∫Å', ['latin small letter w with grave', 'w grave', 'latin small letter w grave']);
  this.executeCharTest('·∫É', ['latin small letter w with acute', 'w acute', 'latin small letter w acute']);
  this.executeCharTest('·∫Ö', ['latin small letter w with diaeresis', 'w double overdot', 'latin small letter w double overdot']);
  this.executeCharTest('·∫á', ['latin small letter w with dot above', 'w overdot', 'latin small letter w overdot']);
  this.executeCharTest('·∫â', ['latin small letter w with dot below', 'w underdot', 'latin small letter w underdot']);
  this.executeCharTest('·∫ã', ['latin small letter x with dot above', 'x overdot', 'latin small letter x overdot']);
  this.executeCharTest('·∫ç', ['latin small letter x with diaeresis', 'x double overdot', 'latin small letter x double overdot']);
  this.executeCharTest('·∫è', ['latin small letter y with dot above', 'y overdot', 'latin small letter y overdot']);
  this.executeCharTest('·∫ë', ['latin small letter z with circumflex', 'z hat', 'latin small letter z hat']);
  this.executeCharTest('·∫ì', ['latin small letter z with dot below', 'z underdot', 'latin small letter z underdot']);
  this.executeCharTest('·∫ï', ['latin small letter z with line below', 'z underbar', 'latin small letter z underbar']);
  this.executeCharTest('·∫ñ', ['latin small letter h with line below', 'h underbar', 'latin small letter h underbar']);
  this.executeCharTest('·∫ó', ['latin small letter t with diaeresis', 't double overdot', 'latin small letter t double overdot']);
  this.executeCharTest('·∫ò', ['latin small letter w with ring above', 'w ring', 'latin small letter w ring']);
  this.executeCharTest('·∫ô', ['latin small letter y with ring above', 'y ring', 'latin small letter y ring']);
  this.executeCharTest('·∫ö', ['latin small letter a with right half ring', 'a right half ring', 'latin small letter a right half ring']);
  this.executeCharTest('·∫°', ['latin small letter a with dot below', 'a underdot', 'latin small letter a underdot']);
  this.executeCharTest('·∫£', ['latin small letter a with hook above', 'a hook', 'latin small letter a hook']);
  this.executeCharTest('·∫π', ['latin small letter e with dot below', 'e underdot', 'latin small letter e underdot']);
  this.executeCharTest('·∫ª', ['latin small letter e with hook above', 'e hook', 'latin small letter e hook']);
  this.executeCharTest('·∫Ω', ['latin small letter e with tilde', 'e tilde', 'latin small letter e tilde']);
  this.executeCharTest('·ªâ', ['latin small letter i with hook above', 'i hook', 'latin small letter i hook']);
  this.executeCharTest('·ªã', ['latin small letter i with dot below', 'i underdot', 'latin small letter i underdot']);
  this.executeCharTest('·ªç', ['latin small letter o with dot below', 'o underdot', 'latin small letter o underdot']);
  this.executeCharTest('·ªè', ['latin small letter o with hook above', 'o hook', 'latin small letter o hook']);
  this.executeCharTest('·ª•', ['latin small letter u with dot below', 'u underdot', 'latin small letter u underdot']);
  this.executeCharTest('·ªß', ['latin small letter u with hook above', 'u hook', 'latin small letter u hook']);
  this.executeCharTest('·ª≥', ['latin small letter y with grave', 'y grave', 'latin small letter y grave']);
  this.executeCharTest('·ªµ', ['latin small letter y with dot below', 'y underdot', 'latin small letter y underdot']);
  this.executeCharTest('·ª∑', ['latin small letter y with hook above', 'y hook', 'latin small letter y hook']);
  this.executeCharTest('·ªπ', ['latin small letter y with tilde', 'y tilde', 'latin small letter y tilde']);
  this.executeCharTest('Õ£', ['combining latin small letter a', 'combining a', 'combining a']);
  this.executeCharTest('Õ§', ['combining latin small letter e', 'combining e', 'combining e']);
  this.executeCharTest('Õ•', ['combining latin small letter i', 'combining i', 'combining i']);
  this.executeCharTest('Õ¶', ['combining latin small letter o', 'combining o', 'combining o']);
  this.executeCharTest('Õß', ['combining latin small letter u', 'combining u', 'combining u']);
  this.executeCharTest('Õ®', ['combining latin small letter c', 'combining c', 'combining c']);
  this.executeCharTest('Õ©', ['combining latin small letter d', 'combining d', 'combining d']);
  this.executeCharTest('Õ™', ['combining latin small letter h', 'combining h', 'combining h']);
  this.executeCharTest('Õ´', ['combining latin small letter m', 'combining m', 'combining m']);
  this.executeCharTest('Õ¨', ['combining latin small letter r', 'combining r', 'combining r']);
  this.executeCharTest('Õ≠', ['combining latin small letter t', 'combining t', 'combining t']);
  this.executeCharTest('ÕÆ', ['combining latin small letter v', 'combining v', 'combining v']);
  this.executeCharTest('ÕØ', ['combining latin small letter x', 'combining x', 'combining x']);
  this.executeCharTest('·µ¢', ['latin subscript small letter i', 'subscript i', 'subscript i']);
  this.executeCharTest('·µ£', ['latin subscript small letter r', 'subscript r', 'subscript r']);
  this.executeCharTest('·µ§', ['latin subscript small letter u', 'subscript u', 'subscript u']);
  this.executeCharTest('·µ•', ['latin subscript small letter v', 'subscript v', 'subscript v']);
  this.executeCharTest('·∑ä', ['combining latin small letter r below', 'combining r below', 'combining r below']);
  this.executeCharTest('·∑ì', ['combining latin small letter flattened open a above', 'combining flattened open a above', 'combining flattened open a above']);
  this.executeCharTest('·∑î', ['combining latin small letter ae', 'combining ae', 'combining ae']);
  this.executeCharTest('·∑ï', ['combining latin small letter ao', 'combining ao', 'combining ao']);
  this.executeCharTest('·∑ñ', ['combining latin small letter av', 'combining av', 'combining av']);
  this.executeCharTest('·∑ó', ['combining latin small letter c cedilla', 'combining c cedilla', 'combining c cedilla']);
  this.executeCharTest('·∑ò', ['combining latin small letter insular d', 'combining insular d', 'combining insular d']);
  this.executeCharTest('·∑ô', ['combining latin small letter eth', 'combining eth', 'combining eth']);
  this.executeCharTest('·∑ö', ['combining latin small letter g', 'combining g', 'combining g']);
  this.executeCharTest('·∑õ', ['combining latin letter small capital g', 'combining small cap g', 'combining small cap g']);
  this.executeCharTest('·∑ú', ['combining latin small letter k', 'combining k', 'combining k']);
  this.executeCharTest('·∑ù', ['combining latin small letter l', 'combining l', 'combining l']);
  this.executeCharTest('·∑û', ['combining latin letter small capital l', 'combining small cap l', 'combining small cap l']);
  this.executeCharTest('·∑ü', ['combining latin letter small capital m', 'combining small cap m', 'combining small cap m']);
  this.executeCharTest('·∑†', ['combining latin small letter n', 'combining n', 'combining n']);
  this.executeCharTest('·∑°', ['combining latin letter small capital n', 'combining small cap n', 'combining small cap n']);
  this.executeCharTest('·∑¢', ['combining latin letter small capital r', 'combining small cap r', 'combining small cap r']);
  this.executeCharTest('·∑£', ['combining latin small letter r rotunda', 'combining r rotunda', 'combining r rotunda']);
  this.executeCharTest('·∑§', ['combining latin small letter s', 'combining s', 'combining s']);
  this.executeCharTest('·∑•', ['combining latin small letter long s', 'combining long s', 'combining long s']);
  this.executeCharTest('·∑¶', ['combining latin small letter z', 'combining z', 'combining z']);
  this.executeCharTest('‚Å±', ['superscript latin small letter i', 'superscript i', 'superscript i']);
  this.executeCharTest('‚Åø', ['superscript latin small letter n', 'superscript n', 'superscript n']);
  this.executeCharTest('‚Çê', ['latin subscript small letter a', 'subscript a', 'subscript a']);
  this.executeCharTest('‚Çë', ['latin subscript small letter e', 'subscript e', 'subscript e']);
  this.executeCharTest('‚Çí', ['latin subscript small letter o', 'subscript o', 'subscript o']);
  this.executeCharTest('‚Çì', ['latin subscript small letter x', 'subscript x', 'subscript x']);
  this.executeCharTest('‚Çî', ['latin subscript small letter schwa', 'subscript schwa', 'subscript schwa']);
  this.executeCharTest('‚Çï', ['latin subscript small letter h', 'subscript h', 'subscript h']);
  this.executeCharTest('‚Çñ', ['latin subscript small letter k', 'subscript k', 'subscript k']);
  this.executeCharTest('‚Çó', ['latin subscript small letter l', 'subscript l', 'subscript l']);
  this.executeCharTest('‚Çò', ['latin subscript small letter m', 'subscript m', 'subscript m']);
  this.executeCharTest('‚Çô', ['latin subscript small letter n', 'subscript n', 'subscript n']);
  this.executeCharTest('‚Çö', ['latin subscript small letter p', 'subscript p', 'subscript p']);
  this.executeCharTest('‚Çõ', ['latin subscript small letter s', 'subscript s', 'subscript s']);
  this.executeCharTest('‚Çú', ['latin subscript small letter t', 'subscript t', 'subscript t']);
  this.executeCharTest('‚íú', ['parenthesized latin small letter a', 'parenthesized a', 'parenthesized a']);
  this.executeCharTest('‚íù', ['parenthesized latin small letter b', 'parenthesized b', 'parenthesized b']);
  this.executeCharTest('‚íû', ['parenthesized latin small letter c', 'parenthesized c', 'parenthesized c']);
  this.executeCharTest('‚íü', ['parenthesized latin small letter d', 'parenthesized d', 'parenthesized d']);
  this.executeCharTest('‚í†', ['parenthesized latin small letter e', 'parenthesized e', 'parenthesized e']);
  this.executeCharTest('‚í°', ['parenthesized latin small letter f', 'parenthesized f', 'parenthesized f']);
  this.executeCharTest('‚í¢', ['parenthesized latin small letter g', 'parenthesized g', 'parenthesized g']);
  this.executeCharTest('‚í£', ['parenthesized latin small letter h', 'parenthesized h', 'parenthesized h']);
  this.executeCharTest('‚í§', ['parenthesized latin small letter i', 'parenthesized i', 'parenthesized i']);
  this.executeCharTest('‚í•', ['parenthesized latin small letter j', 'parenthesized j', 'parenthesized j']);
  this.executeCharTest('‚í¶', ['parenthesized latin small letter k', 'parenthesized k', 'parenthesized k']);
  this.executeCharTest('‚íß', ['parenthesized latin small letter l', 'parenthesized l', 'parenthesized l']);
  this.executeCharTest('‚í®', ['parenthesized latin small letter m', 'parenthesized m', 'parenthesized m']);
  this.executeCharTest('‚í©', ['parenthesized latin small letter n', 'parenthesized n', 'parenthesized n']);
  this.executeCharTest('‚í™', ['parenthesized latin small letter o', 'parenthesized o', 'parenthesized o']);
  this.executeCharTest('‚í´', ['parenthesized latin small letter p', 'parenthesized p', 'parenthesized p']);
  this.executeCharTest('‚í¨', ['parenthesized latin small letter q', 'parenthesized q', 'parenthesized q']);
  this.executeCharTest('‚í≠', ['parenthesized latin small letter r', 'parenthesized r', 'parenthesized r']);
  this.executeCharTest('‚íÆ', ['parenthesized latin small letter s', 'parenthesized s', 'parenthesized s']);
  this.executeCharTest('‚íØ', ['parenthesized latin small letter t', 'parenthesized t', 'parenthesized t']);
  this.executeCharTest('‚í∞', ['parenthesized latin small letter u', 'parenthesized u', 'parenthesized u']);
  this.executeCharTest('‚í±', ['parenthesized latin small letter v', 'parenthesized v', 'parenthesized v']);
  this.executeCharTest('‚í≤', ['parenthesized latin small letter w', 'parenthesized w', 'parenthesized w']);
  this.executeCharTest('‚í≥', ['parenthesized latin small letter x', 'parenthesized x', 'parenthesized x']);
  this.executeCharTest('‚í¥', ['parenthesized latin small letter y', 'parenthesized y', 'parenthesized y']);
  this.executeCharTest('‚íµ', ['parenthesized latin small letter z', 'parenthesized z', 'parenthesized z']);
  this.executeCharTest('‚í∂', ['circled latin capital letter a', 'circled cap a', 'circled cap a']);
  this.executeCharTest('‚í∑', ['circled latin capital letter b', 'circled cap b', 'circled cap b']);
  this.executeCharTest('‚í∏', ['circled latin capital letter c', 'circled cap c', 'circled cap c']);
  this.executeCharTest('‚íπ', ['circled latin capital letter d', 'circled cap d', 'circled cap d']);
  this.executeCharTest('‚í∫', ['circled latin capital letter e', 'circled cap e', 'circled cap e']);
  this.executeCharTest('‚íª', ['circled latin capital letter f', 'circled cap f', 'circled cap f']);
  this.executeCharTest('‚íº', ['circled latin capital letter g', 'circled cap g', 'circled cap g']);
  this.executeCharTest('‚íΩ', ['circled latin capital letter h', 'circled cap h', 'circled cap h']);
  this.executeCharTest('‚íæ', ['circled latin capital letter i', 'circled cap i', 'circled cap i']);
  this.executeCharTest('‚íø', ['circled latin capital letter j', 'circled cap j', 'circled cap j']);
  this.executeCharTest('‚ìÄ', ['circled latin capital letter k', 'circled cap k', 'circled cap k']);
  this.executeCharTest('‚ìÅ', ['circled latin capital letter l', 'circled cap l', 'circled cap l']);
  this.executeCharTest('‚ìÇ', ['circled latin capital letter m', 'circled cap m', 'circled cap m']);
  this.executeCharTest('‚ìÉ', ['circled latin capital letter n', 'circled cap n', 'circled cap n']);
  this.executeCharTest('‚ìÑ', ['circled latin capital letter o', 'circled cap o', 'circled cap o']);
  this.executeCharTest('‚ìÖ', ['circled latin capital letter p', 'circled cap p', 'circled cap p']);
  this.executeCharTest('‚ìÜ', ['circled latin capital letter q', 'circled cap q', 'circled cap q']);
  this.executeCharTest('‚ìá', ['circled latin capital letter r', 'circled cap r', 'circled cap r']);
  this.executeCharTest('‚ìà', ['circled latin capital letter s', 'circled cap s', 'circled cap s']);
  this.executeCharTest('‚ìâ', ['circled latin capital letter t', 'circled cap t', 'circled cap t']);
  this.executeCharTest('‚ìä', ['circled latin capital letter u', 'circled cap u', 'circled cap u']);
  this.executeCharTest('‚ìã', ['circled latin capital letter v', 'circled cap v', 'circled cap v']);
  this.executeCharTest('‚ìå', ['circled latin capital letter w', 'circled cap w', 'circled cap w']);
  this.executeCharTest('‚ìç', ['circled latin capital letter x', 'circled cap x', 'circled cap x']);
  this.executeCharTest('‚ìé', ['circled latin capital letter y', 'circled cap y', 'circled cap y']);
  this.executeCharTest('‚ìè', ['circled latin capital letter z', 'circled cap z', 'circled cap z']);
  this.executeCharTest('‚ìê', ['circled latin small letter a', 'circled a', 'circled a']);
  this.executeCharTest('‚ìë', ['circled latin small letter b', 'circled b', 'circled b']);
  this.executeCharTest('‚ìí', ['circled latin small letter c', 'circled c', 'circled c']);
  this.executeCharTest('‚ìì', ['circled latin small letter d', 'circled d', 'circled d']);
  this.executeCharTest('‚ìî', ['circled latin small letter e', 'circled e', 'circled e']);
  this.executeCharTest('‚ìï', ['circled latin small letter f', 'circled f', 'circled f']);
  this.executeCharTest('‚ìñ', ['circled latin small letter g', 'circled g', 'circled g']);
  this.executeCharTest('‚ìó', ['circled latin small letter h', 'circled h', 'circled h']);
  this.executeCharTest('‚ìò', ['circled latin small letter i', 'circled i', 'circled i']);
  this.executeCharTest('‚ìô', ['circled latin small letter j', 'circled j', 'circled j']);
  this.executeCharTest('‚ìö', ['circled latin small letter k', 'circled k', 'circled k']);
  this.executeCharTest('‚ìõ', ['circled latin small letter l', 'circled l', 'circled l']);
  this.executeCharTest('‚ìú', ['circled latin small letter m', 'circled m', 'circled m']);
  this.executeCharTest('‚ìù', ['circled latin small letter n', 'circled n', 'circled n']);
  this.executeCharTest('‚ìû', ['circled latin small letter o', 'circled o', 'circled o']);
  this.executeCharTest('‚ìü', ['circled latin small letter p', 'circled p', 'circled p']);
  this.executeCharTest('‚ì†', ['circled latin small letter q', 'circled q', 'circled q']);
  this.executeCharTest('‚ì°', ['circled latin small letter r', 'circled r', 'circled r']);
  this.executeCharTest('‚ì¢', ['circled latin small letter s', 'circled s', 'circled s']);
  this.executeCharTest('‚ì£', ['circled latin small letter t', 'circled t', 'circled t']);
  this.executeCharTest('‚ì§', ['circled latin small letter u', 'circled u', 'circled u']);
  this.executeCharTest('‚ì•', ['circled latin small letter v', 'circled v', 'circled v']);
  this.executeCharTest('‚ì¶', ['circled latin small letter w', 'circled w', 'circled w']);
  this.executeCharTest('‚ìß', ['circled latin small letter x', 'circled x', 'circled x']);
  this.executeCharTest('‚ì®', ['circled latin small letter y', 'circled y', 'circled y']);
  this.executeCharTest('‚ì©', ['circled latin small letter z', 'circled z', 'circled z']);
  this.executeCharTest('‚±º', ['latin subscript small letter j', 'subscript j', 'subscript j']);
  this.executeCharTest('üÑê', ['parenthesized latin capital letter a', 'parenthesized cap a', 'parenthesized cap a']);
  this.executeCharTest('üÑë', ['parenthesized latin capital letter b', 'parenthesized cap b', 'parenthesized cap b']);
  this.executeCharTest('üÑí', ['parenthesized latin capital letter c', 'parenthesized cap c', 'parenthesized cap c']);
  this.executeCharTest('üÑì', ['parenthesized latin capital letter d', 'parenthesized cap d', 'parenthesized cap d']);
  this.executeCharTest('üÑî', ['parenthesized latin capital letter e', 'parenthesized cap e', 'parenthesized cap e']);
  this.executeCharTest('üÑï', ['parenthesized latin capital letter f', 'parenthesized cap f', 'parenthesized cap f']);
  this.executeCharTest('üÑñ', ['parenthesized latin capital letter g', 'parenthesized cap g', 'parenthesized cap g']);
  this.executeCharTest('üÑó', ['parenthesized latin capital letter h', 'parenthesized cap h', 'parenthesized cap h']);
  this.executeCharTest('üÑò', ['parenthesized latin capital letter i', 'parenthesized cap i', 'parenthesized cap i']);
  this.executeCharTest('üÑô', ['parenthesized latin capital letter j', 'parenthesized cap j', 'parenthesized cap j']);
  this.executeCharTest('üÑö', ['parenthesized latin capital letter k', 'parenthesized cap k', 'parenthesized cap k']);
  this.executeCharTest('üÑõ', ['parenthesized latin capital letter l', 'parenthesized cap l', 'parenthesized cap l']);
  this.executeCharTest('üÑú', ['parenthesized latin capital letter m', 'parenthesized cap m', 'parenthesized cap m']);
  this.executeCharTest('üÑù', ['parenthesized latin capital letter n', 'parenthesized cap n', 'parenthesized cap n']);
  this.executeCharTest('üÑû', ['parenthesized latin capital letter o', 'parenthesized cap o', 'parenthesized cap o']);
  this.executeCharTest('üÑü', ['parenthesized latin capital letter p', 'parenthesized cap p', 'parenthesized cap p']);
  this.executeCharTest('üÑ†', ['parenthesized latin capital letter q', 'parenthesized cap q', 'parenthesized cap q']);
  this.executeCharTest('üÑ°', ['parenthesized latin capital letter r', 'parenthesized cap r', 'parenthesized cap r']);
  this.executeCharTest('üÑ¢', ['parenthesized latin capital letter s', 'parenthesized cap s', 'parenthesized cap s']);
  this.executeCharTest('üÑ£', ['parenthesized latin capital letter t', 'parenthesized cap t', 'parenthesized cap t']);
  this.executeCharTest('üÑ§', ['parenthesized latin capital letter u', 'parenthesized cap u', 'parenthesized cap u']);
  this.executeCharTest('üÑ•', ['parenthesized latin capital letter v', 'parenthesized cap v', 'parenthesized cap v']);
  this.executeCharTest('üÑ¶', ['parenthesized latin capital letter w', 'parenthesized cap w', 'parenthesized cap w']);
  this.executeCharTest('üÑß', ['parenthesized latin capital letter x', 'parenthesized cap x', 'parenthesized cap x']);
  this.executeCharTest('üÑ®', ['parenthesized latin capital letter y', 'parenthesized cap y', 'parenthesized cap y']);
  this.executeCharTest('üÑ©', ['parenthesized latin capital letter z', 'parenthesized cap z', 'parenthesized cap z']);
  this.executeCharTest('üÑ™', ['tortoise shell bracketed latin capital letter s', 'tortoise shell bracketed cap s', 'tortoise shell bracketed cap s']);
  this.executeCharTest('üÑ´', ['circled italic latin capital letter c', 'circled italic cap c', 'circled italic cap c']);
  this.executeCharTest('üÑ¨', ['circled italic latin capital letter r', 'circled italic cap r', 'circled italic cap r']);
  this.executeCharTest('üÑ∞', ['squared latin capital letter a', 'squared cap a', 'squared cap a']);
  this.executeCharTest('üÑ±', ['squared latin capital letter b', 'squared cap b', 'squared cap b']);
  this.executeCharTest('üÑ≤', ['squared latin capital letter c', 'squared cap c', 'squared cap c']);
  this.executeCharTest('üÑ≥', ['squared latin capital letter d', 'squared cap d', 'squared cap d']);
  this.executeCharTest('üÑ¥', ['squared latin capital letter e', 'squared cap e', 'squared cap e']);
  this.executeCharTest('üÑµ', ['squared latin capital letter f', 'squared cap f', 'squared cap f']);
  this.executeCharTest('üÑ∂', ['squared latin capital letter g', 'squared cap g', 'squared cap g']);
  this.executeCharTest('üÑ∑', ['squared latin capital letter h', 'squared cap h', 'squared cap h']);
  this.executeCharTest('üÑ∏', ['squared latin capital letter i', 'squared cap i', 'squared cap i']);
  this.executeCharTest('üÑπ', ['squared latin capital letter j', 'squared cap j', 'squared cap j']);
  this.executeCharTest('üÑ∫', ['squared latin capital letter k', 'squared cap k', 'squared cap k']);
  this.executeCharTest('üÑª', ['squared latin capital letter l', 'squared cap l', 'squared cap l']);
  this.executeCharTest('üÑº', ['squared latin capital letter m', 'squared cap m', 'squared cap m']);
  this.executeCharTest('üÑΩ', ['squared latin capital letter n', 'squared cap n', 'squared cap n']);
  this.executeCharTest('üÑæ', ['squared latin capital letter o', 'squared cap o', 'squared cap o']);
  this.executeCharTest('üÑø', ['squared latin capital letter p', 'squared cap p', 'squared cap p']);
  this.executeCharTest('üÖÄ', ['squared latin capital letter q', 'squared cap q', 'squared cap q']);
  this.executeCharTest('üÖÅ', ['squared latin capital letter r', 'squared cap r', 'squared cap r']);
  this.executeCharTest('üÖÇ', ['squared latin capital letter s', 'squared cap s', 'squared cap s']);
  this.executeCharTest('üÖÉ', ['squared latin capital letter t', 'squared cap t', 'squared cap t']);
  this.executeCharTest('üÖÑ', ['squared latin capital letter u', 'squared cap u', 'squared cap u']);
  this.executeCharTest('üÖÖ', ['squared latin capital letter v', 'squared cap v', 'squared cap v']);
  this.executeCharTest('üÖÜ', ['squared latin capital letter w', 'squared cap w', 'squared cap w']);
  this.executeCharTest('üÖá', ['squared latin capital letter x', 'squared cap x', 'squared cap x']);
  this.executeCharTest('üÖà', ['squared latin capital letter y', 'squared cap y', 'squared cap y']);
  this.executeCharTest('üÖâ', ['squared latin capital letter z', 'squared cap z', 'squared cap z']);
  this.executeCharTest('üÖê', ['negative circled latin capital letter a', 'negative circled cap a', 'negative circled cap a']);
  this.executeCharTest('üÖë', ['negative circled latin capital letter b', 'negative circled cap b', 'negative circled cap b']);
  this.executeCharTest('üÖí', ['negative circled latin capital letter c', 'negative circled cap c', 'negative circled cap c']);
  this.executeCharTest('üÖì', ['negative circled latin capital letter d', 'negative circled cap d', 'negative circled cap d']);
  this.executeCharTest('üÖî', ['negative circled latin capital letter e', 'negative circled cap e', 'negative circled cap e']);
  this.executeCharTest('üÖï', ['negative circled latin capital letter f', 'negative circled cap f', 'negative circled cap f']);
  this.executeCharTest('üÖñ', ['negative circled latin capital letter g', 'negative circled cap g', 'negative circled cap g']);
  this.executeCharTest('üÖó', ['negative circled latin capital letter h', 'negative circled cap h', 'negative circled cap h']);
  this.executeCharTest('üÖò', ['negative circled latin capital letter i', 'negative circled cap i', 'negative circled cap i']);
  this.executeCharTest('üÖô', ['negative circled latin capital letter j', 'negative circled cap j', 'negative circled cap j']);
  this.executeCharTest('üÖö', ['negative circled latin capital letter k', 'negative circled cap k', 'negative circled cap k']);
  this.executeCharTest('üÖõ', ['negative circled latin capital letter l', 'negative circled cap l', 'negative circled cap l']);
  this.executeCharTest('üÖú', ['negative circled latin capital letter m', 'negative circled cap m', 'negative circled cap m']);
  this.executeCharTest('üÖù', ['negative circled latin capital letter n', 'negative circled cap n', 'negative circled cap n']);
  this.executeCharTest('üÖû', ['negative circled latin capital letter o', 'negative circled cap o', 'negative circled cap o']);
  this.executeCharTest('üÖü', ['negative circled latin capital letter p', 'negative circled cap p', 'negative circled cap p']);
  this.executeCharTest('üÖ†', ['negative circled latin capital letter q', 'negative circled cap q', 'negative circled cap q']);
  this.executeCharTest('üÖ°', ['negative circled latin capital letter r', 'negative circled cap r', 'negative circled cap r']);
  this.executeCharTest('üÖ¢', ['negative circled latin capital letter s', 'negative circled cap s', 'negative circled cap s']);
  this.executeCharTest('üÖ£', ['negative circled latin capital letter t', 'negative circled cap t', 'negative circled cap t']);
  this.executeCharTest('üÖ§', ['negative circled latin capital letter u', 'negative circled cap u', 'negative circled cap u']);
  this.executeCharTest('üÖ•', ['negative circled latin capital letter v', 'negative circled cap v', 'negative circled cap v']);
  this.executeCharTest('üÖ¶', ['negative circled latin capital letter w', 'negative circled cap w', 'negative circled cap w']);
  this.executeCharTest('üÖß', ['negative circled latin capital letter x', 'negative circled cap x', 'negative circled cap x']);
  this.executeCharTest('üÖ®', ['negative circled latin capital letter y', 'negative circled cap y', 'negative circled cap y']);
  this.executeCharTest('üÖ©', ['negative circled latin capital letter z', 'negative circled cap z', 'negative circled cap z']);
  this.executeCharTest('üÖ∞', ['negative squared latin capital letter a', 'negative squared cap a', 'negative squared cap a']);
  this.executeCharTest('üÖ±', ['negative squared latin capital letter b', 'negative squared cap b', 'negative squared cap b']);
  this.executeCharTest('üÖ≤', ['negative squared latin capital letter c', 'negative squared cap c', 'negative squared cap c']);
  this.executeCharTest('üÖ≥', ['negative squared latin capital letter d', 'negative squared cap d', 'negative squared cap d']);
  this.executeCharTest('üÖ¥', ['negative squared latin capital letter e', 'negative squared cap e', 'negative squared cap e']);
  this.executeCharTest('üÖµ', ['negative squared latin capital letter f', 'negative squared cap f', 'negative squared cap f']);
  this.executeCharTest('üÖ∂', ['negative squared latin capital letter g', 'negative squared cap g', 'negative squared cap g']);
  this.executeCharTest('üÖ∑', ['negative squared latin capital letter h', 'negative squared cap h', 'negative squared cap h']);
  this.executeCharTest('üÖ∏', ['negative squared latin capital letter i', 'negative squared cap i', 'negative squared cap i']);
  this.executeCharTest('üÖπ', ['negative squared latin capital letter j', 'negative squared cap j', 'negative squared cap j']);
  this.executeCharTest('üÖ∫', ['negative squared latin capital letter k', 'negative squared cap k', 'negative squared cap k']);
  this.executeCharTest('üÖª', ['negative squared latin capital letter l', 'negative squared cap l', 'negative squared cap l']);
  this.executeCharTest('üÖº', ['negative squared latin capital letter m', 'negative squared cap m', 'negative squared cap m']);
  this.executeCharTest('üÖΩ', ['negative squared latin capital letter n', 'negative squared cap n', 'negative squared cap n']);
  this.executeCharTest('üÖæ', ['negative squared latin capital letter o', 'negative squared cap o', 'negative squared cap o']);
  this.executeCharTest('üÖø', ['negative squared latin capital letter p', 'negative squared cap p', 'negative squared cap p']);
  this.executeCharTest('üÜÄ', ['negative squared latin capital letter q', 'negative squared cap q', 'negative squared cap q']);
  this.executeCharTest('üÜÅ', ['negative squared latin capital letter r', 'negative squared cap r', 'negative squared cap r']);
  this.executeCharTest('üÜÇ', ['negative squared latin capital letter s', 'negative squared cap s', 'negative squared cap s']);
  this.executeCharTest('üÜÉ', ['negative squared latin capital letter t', 'negative squared cap t', 'negative squared cap t']);
  this.executeCharTest('üÜÑ', ['negative squared latin capital letter u', 'negative squared cap u', 'negative squared cap u']);
  this.executeCharTest('üÜÖ', ['negative squared latin capital letter v', 'negative squared cap v', 'negative squared cap v']);
  this.executeCharTest('üÜÜ', ['negative squared latin capital letter w', 'negative squared cap w', 'negative squared cap w']);
  this.executeCharTest('üÜá', ['negative squared latin capital letter x', 'negative squared cap x', 'negative squared cap x']);
  this.executeCharTest('üÜà', ['negative squared latin capital letter y', 'negative squared cap y', 'negative squared cap y']);
  this.executeCharTest('üÜâ', ['negative squared latin capital letter z', 'negative squared cap z', 'negative squared cap z']);
  this.executeCharTest('üÜä', ['crossed negative squared latin capital letter p', 'crossed negative squared cap p', 'crossed negative squared cap p']);
  this.executeCharTest('«ï', ['latin capital letter u with diaeresis and macron', 'cap u double overdot overbar', 'latin capital letter u double overdot overbar']);
  this.executeCharTest('«ó', ['latin capital letter u with diaeresis and acute', 'cap u double overdot acute', 'latin capital letter u double overdot acute']);
  this.executeCharTest('«ô', ['latin capital letter u with diaeresis and caron', 'cap u double overdot caron', 'latin capital letter u double overdot hacek']);
  this.executeCharTest('«õ', ['latin capital letter u with diaeresis and grave', 'cap u double overdot grave', 'latin capital letter u double overdot grave']);
  this.executeCharTest('«û', ['latin capital letter a with diaeresis and macron', 'cap a double overdot overbar', 'latin capital letter a double overdot overbar']);
  this.executeCharTest('«†', ['latin capital letter a with dot above and macron', 'cap a overdot overbar', 'latin capital letter a dot overbar']);
  this.executeCharTest('«¨', ['latin capital letter o with ogonek and macron', 'cap o ogonek overbar', 'latin capital letter o ogonek overbar']);
  this.executeCharTest('«∫', ['latin capital letter a with ring above and acute', 'cap a ring acute', 'latin capital letter a ring acute']);
  this.executeCharTest('»™', ['latin capital letter o with diaeresis and macron', 'cap o double overdot overbar', 'latin capital letter o double overdot overbar']);
  this.executeCharTest('»¨', ['latin capital letter o with tilde and macron', 'cap o tilde overbar', 'latin capital letter o tilde overbar']);
  this.executeCharTest('»∞', ['latin capital letter o with dot above and macron', 'cap o overdot overbar', 'latin capital letter o overdot overbar']);
  this.executeCharTest('·∏à', ['latin capital letter c with cedilla and acute', 'cap c cedilla acute', 'latin capital letter c cedilla acute']);
  this.executeCharTest('·∏î', ['latin capital letter e with macron and grave', 'cap e overbar grave', 'latin capital letter e overbar grave']);
  this.executeCharTest('·∏ñ', ['latin capital letter e with macron and acute', 'cap e overbar acute', 'latin capital letter e overbar acute']);
  this.executeCharTest('·∏ú', ['latin capital letter e with cedilla and breve', 'cap e cedilla breve', 'latin capital letter e cedilla breve']);
  this.executeCharTest('·∏Æ', ['latin capital letter i with diaeresis and acute', 'cap i double overdot acute', 'latin capital letter i double overdot acute']);
  this.executeCharTest('·∏∏', ['latin capital letter l with dot below and macron', 'cap l underdot overbar', 'latin capital letter l underdot overbar']);
  this.executeCharTest('·πå', ['latin capital letter o with tilde and acute', 'cap o tilde acute', 'latin capital letter o tilde acute']);
  this.executeCharTest('·πé', ['latin capital letter o with tilde and diaeresis', 'cap o tilde double overdot', 'latin capital letter o tilde double overdot']);
  this.executeCharTest('·πê', ['latin capital letter o with macron and grave', 'cap o overbar grave', 'latin capital letter o overbar grave']);
  this.executeCharTest('·πí', ['latin capital letter o with macron and acute', 'cap o overbar acute', 'latin capital letter o overbar acute']);
  this.executeCharTest('·πú', ['latin capital letter r with dot below and macron', 'cap r overbar underdot', 'cap r underdot and overbar']);
  this.executeCharTest('·π§', ['latin capital letter s with acute dot above', 'cap s acute overdot', 'latin capital letter s acute overdot']);
  this.executeCharTest('·π¶', ['latin capital letter s with caron and dot above', 'cap s caron overdot', 'latin capital letter s caron overdot']);
  this.executeCharTest('·π®', ['latin capital letter s with dot below and dot above', 'cap s underdot overdot', 'latin capital letter s underdot overdot']);
  this.executeCharTest('·π∏', ['latin capital letter u with tilde and acute', 'cap u tilde acute', 'latin capital letter u tilde acute']);
  this.executeCharTest('·π∫', ['latin capital letter u with macron and diaeresis', 'cap u overbar double overdot', 'latin capital letter u overbar double overdot']);
  this.executeCharTest('·∫§', ['latin capital letter a with circumflex and acute', 'cap a hat acute', 'latin capital letter a hat acute']);
  this.executeCharTest('·∫¶', ['latin capital letter a with circumflex and grave', 'cap a hat grave', 'latin capital letter a hat grave']);
  this.executeCharTest('·∫®', ['latin capital letter a with circumflex and hook above', 'cap a hat hook', 'latin capital letter a hat hook']);
  this.executeCharTest('·∫™', ['latin capital letter a with circumflex and tilde', 'cap a hat tilde', 'latin capital letter a hat tilde']);
  this.executeCharTest('·∫¨', ['latin capital letter a with circumflex and dot below', 'cap a hat underdot', 'latin capital letter a hat underdot']);
  this.executeCharTest('·∫Æ', ['latin capital letter a with breve and acute', 'cap a breve acute', 'latin capital letter a breve acute']);
  this.executeCharTest('·∫∞', ['latin capital letter a with breve and grave', 'cap a breve grave', 'latin capital letter a breve grave']);
  this.executeCharTest('·∫≤', ['latin capital letter a with breve and hook above', 'cap a breve hook', 'latin capital letter a breve hook']);
  this.executeCharTest('·∫¥', ['latin capital letter a with breve and tilde', 'cap a breve tilde', 'latin capital letter a breve tilde']);
  this.executeCharTest('·∫∂', ['latin capital letter a with breve and dot below', 'cap a breve underdot', 'latin capital letter a breve underdot']);
  this.executeCharTest('·∫æ', ['latin capital letter e with circumflex and acute', 'cap e hat acute', 'latin capital letter e hat acute']);
  this.executeCharTest('·ªÄ', ['latin capital letter e with circumflex and grave', 'cap e hat grave', 'latin capital letter e hat grave']);
  this.executeCharTest('·ªÇ', ['latin capital letter e with circumflex and hook above', 'cap e hat hook', 'latin capital letter e hat hook']);
  this.executeCharTest('·ªÑ', ['latin capital letter e with circumflex and tilde', 'cap e hat tilde', 'latin capital letter e hat tilde']);
  this.executeCharTest('·ªÜ', ['latin capital letter e with circumflex and dot below', 'cap e hat underdot', 'latin capital letter e hat underdot']);
  this.executeCharTest('·ªê', ['latin capital letter o with circumflex and acute', 'cap o hat acute', 'latin capital letter o hat acute']);
  this.executeCharTest('·ªí', ['latin capital letter o with circumflex and grave', 'cap o hat grave', 'latin capital letter o hat grave']);
  this.executeCharTest('·ªî', ['latin capital letter o with circumflex and hook above', 'cap o hat hook', 'latin capital letter o hat hook']);
  this.executeCharTest('·ªñ', ['latin capital letter o with circumflex and tilde', 'cap o hat tilde', 'latin capital letter o hat tilde']);
  this.executeCharTest('·ªò', ['latin capital letter o with circumflex and dot below', 'cap o hat underdot', 'latin capital letter o hat underdot']);
  this.executeCharTest('·ªö', ['latin capital letter o with horn and acute', 'cap o acute prime', 'latin capital letter o acute prime']);
  this.executeCharTest('·ªú', ['latin capital letter o with horn and grave', 'cap o grave prime', 'latin capital letter o grave prime']);
  this.executeCharTest('·ªû', ['latin capital letter o with horn and hook above', 'cap o hook prime', 'latin capital letter o hook prime']);
  this.executeCharTest('·ª†', ['latin capital letter o with horn and tilde', 'cap o tilde prime', 'latin capital letter o tilde prime']);
  this.executeCharTest('·ª¢', ['latin capital letter o with horn and dot below', 'cap o underdot prime', 'latin capital letter o underdot prime']);
  this.executeCharTest('·ª®', ['latin capital letter u with horn and acute', 'cap u acute prime', 'latin capital letter u acute prime']);
  this.executeCharTest('·ª™', ['latin capital letter u with horn and grave', 'cap u grave prime', 'latin capital letter u grave prime']);
  this.executeCharTest('·ª¨', ['latin capital letter u with horn and hook above', 'cap u hook prime', 'latin capital letter u hook prime']);
  this.executeCharTest('·ªÆ', ['latin capital letter u with horn and tilde', 'cap u tilde prime', 'latin capital letter u tilde prime']);
  this.executeCharTest('·ª∞', ['latin capital letter u with horn and dot below', 'cap u underdot prime', 'latin capital letter u underdot prime']);
  this.executeCharTest('A', ['latin capital letter a', 'cap a', 'cap a']);
  this.executeCharTest('B', ['latin capital letter b', 'cap b', 'cap b']);
  this.executeCharTest('C', ['latin capital letter c', 'cap c', 'cap c']);
  this.executeCharTest('D', ['latin capital letter d', 'cap d', 'cap d']);
  this.executeCharTest('E', ['latin capital letter e', 'cap e', 'cap e']);
  this.executeCharTest('F', ['latin capital letter f', 'cap f', 'cap f']);
  this.executeCharTest('G', ['latin capital letter g', 'cap g', 'cap g']);
  this.executeCharTest('H', ['latin capital letter h', 'cap h', 'cap h']);
  this.executeCharTest('I', ['latin capital letter i', 'cap i', 'cap i']);
  this.executeCharTest('J', ['latin capital letter j', 'cap j', 'cap j']);
  this.executeCharTest('K', ['latin capital letter k', 'cap k', 'cap k']);
  this.executeCharTest('L', ['latin capital letter l', 'cap l', 'cap l']);
  this.executeCharTest('M', ['latin capital letter m', 'cap m', 'cap m']);
  this.executeCharTest('N', ['latin capital letter n', 'cap n', 'cap n']);
  this.executeCharTest('O', ['latin capital letter o', 'cap o', 'cap o']);
  this.executeCharTest('P', ['latin capital letter p', 'cap p', 'cap p']);
  this.executeCharTest('Q', ['latin capital letter q', 'cap q', 'cap q']);
  this.executeCharTest('R', ['latin capital letter r', 'cap r', 'cap r']);
  this.executeCharTest('S', ['latin capital letter s', 'cap s', 'cap s']);
  this.executeCharTest('T', ['latin capital letter t', 'cap t', 'cap t']);
  this.executeCharTest('U', ['latin capital letter u', 'cap u', 'cap u']);
  this.executeCharTest('V', ['latin capital letter v', 'cap v', 'cap v']);
  this.executeCharTest('W', ['latin capital letter w', 'cap w', 'cap w']);
  this.executeCharTest('X', ['latin capital letter x', 'cap x', 'cap x']);
  this.executeCharTest('Y', ['latin capital letter y', 'cap y', 'cap y']);
  this.executeCharTest('Z', ['latin capital letter z', 'cap z', 'cap z']);
  this.executeCharTest('Ôº°', ['fullwidth latin capital letter a', 'cap a', 'fullwidth latin cap a']);
  this.executeCharTest('Ôº¢', ['fullwidth latin capital letter b', 'cap b', 'fullwidth latin cap b']);
  this.executeCharTest('Ôº£', ['fullwidth latin capital letter c', 'cap c', 'fullwidth latin cap c']);
  this.executeCharTest('Ôº§', ['fullwidth latin capital letter d', 'cap d', 'fullwidth latin cap d']);
  this.executeCharTest('Ôº•', ['fullwidth latin capital letter e', 'cap e', 'fullwidth latin cap e']);
  this.executeCharTest('Ôº¶', ['fullwidth latin capital letter f', 'cap f', 'fullwidth latin cap f']);
  this.executeCharTest('Ôºß', ['fullwidth latin capital letter g', 'cap g', 'fullwidth latin cap g']);
  this.executeCharTest('Ôº®', ['fullwidth latin capital letter h', 'cap h', 'fullwidth latin cap h']);
  this.executeCharTest('Ôº©', ['fullwidth latin capital letter i', 'cap i', 'fullwidth latin cap i']);
  this.executeCharTest('Ôº™', ['fullwidth latin capital letter j', 'cap j', 'fullwidth latin cap j']);
  this.executeCharTest('Ôº´', ['fullwidth latin capital letter k', 'cap k', 'fullwidth latin cap k']);
  this.executeCharTest('Ôº¨', ['fullwidth latin capital letter l', 'cap l', 'fullwidth latin cap l']);
  this.executeCharTest('Ôº≠', ['fullwidth latin capital letter m', 'cap m', 'fullwidth latin cap m']);
  this.executeCharTest('ÔºÆ', ['fullwidth latin capital letter n', 'cap n', 'fullwidth latin cap n']);
  this.executeCharTest('ÔºØ', ['fullwidth latin capital letter o', 'cap o', 'fullwidth latin cap o']);
  this.executeCharTest('Ôº∞', ['fullwidth latin capital letter p', 'cap p', 'fullwidth latin cap p']);
  this.executeCharTest('Ôº±', ['fullwidth latin capital letter q', 'cap q', 'fullwidth latin cap q']);
  this.executeCharTest('Ôº≤', ['fullwidth latin capital letter r', 'cap r', 'fullwidth latin cap r']);
  this.executeCharTest('Ôº≥', ['fullwidth latin capital letter s', 'cap s', 'fullwidth latin cap s']);
  this.executeCharTest('Ôº¥', ['fullwidth latin capital letter t', 'cap t', 'fullwidth latin cap t']);
  this.executeCharTest('Ôºµ', ['fullwidth latin capital letter u', 'cap u', 'fullwidth latin cap u']);
  this.executeCharTest('Ôº∂', ['fullwidth latin capital letter v', 'cap v', 'fullwidth latin cap v']);
  this.executeCharTest('Ôº∑', ['fullwidth latin capital letter w', 'cap w', 'fullwidth latin cap w']);
  this.executeCharTest('Ôº∏', ['fullwidth latin capital letter x', 'cap x', 'fullwidth latin cap x']);
  this.executeCharTest('Ôºπ', ['fullwidth latin capital letter y', 'cap y', 'fullwidth latin cap y']);
  this.executeCharTest('Ôº∫', ['fullwidth latin capital letter z', 'cap z', 'fullwidth latin cap z']);
  this.executeCharTest('√Ä', ['latin capital letter a with grave', 'cap a grave', 'latin capital letter a grave']);
  this.executeCharTest('√Å', ['latin capital letter a with acute', 'cap a acute', 'latin capital letter a acute']);
  this.executeCharTest('√Ç', ['latin capital letter a with circumflex', 'cap a hat', 'latin capital letter a hat']);
  this.executeCharTest('√É', ['latin capital letter a with tilde', 'cap a tilde', 'latin capital letter a tilde']);
  this.executeCharTest('√Ñ', ['latin capital letter a with diaeresis', 'cap a double overdot', 'latin capital letter a double overdot']);
  this.executeCharTest('√Ö', ['latin capital letter a with ring above', 'cap a ring', 'latin capital letter a ring']);
  this.executeCharTest('√á', ['latin capital letter c cedilla', 'cap c cedilla', 'latin capital letter c cedilla']);
  this.executeCharTest('√à', ['latin capital letter e with grave', 'cap e grave', 'latin capital letter e grave']);
  this.executeCharTest('√â', ['latin capital letter e with acute', 'cap e acute', 'latin capital letter e acute']);
  this.executeCharTest('√ä', ['latin capital letter e with circumflex', 'cap e hat', 'latin capital letter e hat']);
  this.executeCharTest('√ã', ['latin capital letter e with diaeresis', 'cap e double overdot', 'latin capital letter e double overdot']);
  this.executeCharTest('√å', ['latin capital letter i with grave', 'cap i grave', 'latin capital letter i grave']);
  this.executeCharTest('√ç', ['latin capital letter i with acute', 'cap i acute', 'latin capital letter i acute']);
  this.executeCharTest('√é', ['latin capital letter i with circumflex', 'cap i hat', 'latin capital letter i hat']);
  this.executeCharTest('√è', ['latin capital letter i with diaeresis', 'cap i double overdot', 'latin capital letter i double overdot']);
  this.executeCharTest('√ë', ['latin capital letter n tilde', 'cap n tilde', 'latin capital letter n tilde']);
  this.executeCharTest('√í', ['latin capital letter o with grave', 'cap o grave', 'latin capital letter o grave']);
  this.executeCharTest('√ì', ['latin capital letter o with acute', 'cap o acute', 'latin capital letter o acute']);
  this.executeCharTest('√î', ['latin capital letter o with circumflex', 'cap o hat', 'latin capital letter o hat']);
  this.executeCharTest('√ï', ['latin capital letter o with tilde', 'cap o tilde', 'latin capital letter o tilde']);
  this.executeCharTest('√ñ', ['latin capital letter o with diaeresis', 'cap o double overdot', 'latin capital letter o double overdot']);
  this.executeCharTest('√ô', ['latin capital letter u with grave', 'cap u grave', 'latin capital letter u grave']);
  this.executeCharTest('√ö', ['latin capital letter u with acute', 'cap u acute', 'latin capital letter u acute']);
  this.executeCharTest('√õ', ['latin capital letter u with circumflex', 'cap u hat', 'latin capital letter u hat']);
  this.executeCharTest('√ú', ['latin capital letter u with diaeresis', 'cap u double overdot', 'latin capital letter u double overdot']);
  this.executeCharTest('√ù', ['latin capital letter y with acute', 'cap y acute', 'latin capital letter y acute']);
  this.executeCharTest('ƒÄ', ['latin capital letter a macron', 'cap a overbar', 'latin capital letter a overbar']);
  this.executeCharTest('ƒÇ', ['latin capital letter a with breve', 'cap a breve', 'latin capital letter a breve']);
  this.executeCharTest('ƒÑ', ['latin capital letter a with ogonek', 'cap a ogonek', 'latin capital letter a ogonek']);
  this.executeCharTest('ƒÜ', ['latin capital letter c with acute', 'cap c acute', 'latin capital letter c acute']);
  this.executeCharTest('ƒà', ['latin capital letter c with circumflex', 'cap c hat', 'latin capital letter c hat']);
  this.executeCharTest('ƒä', ['latin capital letter c with dot above', 'cap c overdot', 'latin capital letter c overdot']);
  this.executeCharTest('ƒå', ['latin capital letter c with caron', 'cap c caron', 'latin capital letter c hacek']);
  this.executeCharTest('ƒé', ['latin capital letter d with caron', 'cap d caron', 'latin capital letter d hacek']);
  this.executeCharTest('ƒí', ['latin capital letter e with macron', 'cap e overbar', 'latin capital letter e overbar']);
  this.executeCharTest('ƒî', ['latin capital letter e with breve', 'cap e breve', 'latin capital letter e breve']);
  this.executeCharTest('ƒñ', ['latin capital letter e with dot above', 'cap e overdot', 'latin capital letter e overdot']);
  this.executeCharTest('ƒò', ['latin capital letter e with ogonek', 'cap e ogonek', 'latin capital letter e ogonek']);
  this.executeCharTest('ƒö', ['latin capital letter e with caron', 'cap e caron', 'latin capital letter e hacek']);
  this.executeCharTest('ƒú', ['latin capital letter g with circumflex', 'cap g hat', 'latin capital letter g hat']);
  this.executeCharTest('ƒû', ['latin capital letter g with breve', 'cap g breve', 'latin capital letter g breve']);
  this.executeCharTest('ƒ†', ['latin capital letter g with dot above', 'cap g overdot', 'latin capital letter g overdot']);
  this.executeCharTest('ƒ¢', ['latin capital letter g with cedilla', 'cap g cedilla', 'latin capital letter g cedilla']);
  this.executeCharTest('ƒ§', ['latin capital letter h with circumflex', 'cap h hat', 'latin capital letter h hat']);
  this.executeCharTest('ƒ®', ['latin capital letter i with tilde', 'cap i tilde', 'latin capital letter i tilde']);
  this.executeCharTest('ƒ™', ['latin capital letter i with macron', 'cap i overbar', 'latin capital letter i overbar']);
  this.executeCharTest('ƒ¨', ['latin capital letter i with breve', 'cap i breve', 'latin capital letter i breve']);
  this.executeCharTest('ƒÆ', ['latin capital letter i with ogonek', 'cap i ogonek', 'latin capital letter i ogonek']);
  this.executeCharTest('ƒ∞', ['latin capital letter i with dot above', 'cap i overdot', 'latin capital letter i overdot']);
  this.executeCharTest('ƒ¥', ['latin capital letter j circumflex', 'cap j hat', 'latin capital letter j hat']);
  this.executeCharTest('ƒ∂', ['latin capital letter k with cedilla', 'cap k cedilla', 'latin capital letter k cedilla']);
  this.executeCharTest('ƒπ', ['latin capital letter l with acute', 'cap l acute', 'latin capital letter l acute']);
  this.executeCharTest('ƒª', ['latin capital letter l with cedilla', 'cap l cedilla', 'latin capital letter l cedilla']);
  this.executeCharTest('ƒΩ', ['latin capital letter l with caron', 'cap l caron', 'latin capital letter l hacek']);
  this.executeCharTest('ƒø', ['latin capital letter l with middle dot', 'cap l middle dot', 'latin capital letter l middle dot']);
  this.executeCharTest('≈É', ['latin capital letter n with acute', 'cap n acute', 'latin capital letter n acute']);
  this.executeCharTest('≈Ö', ['latin capital letter n with cedilla', 'cap n cedilla', 'latin capital letter n cedilla']);
  this.executeCharTest('≈á', ['latin capital letter n with caron', 'cap n caron', 'latin capital letter n hacek']);
  this.executeCharTest('≈å', ['latin capital letter o macron', 'cap o overbar', 'latin capital letter o overbar']);
  this.executeCharTest('≈é', ['latin capital letter o with breve', 'cap o breve', 'latin capital letter o breve']);
  this.executeCharTest('≈ê', ['latin capital letter o with double acute', 'cap o double acute', 'latin capital letter o double acute']);
  this.executeCharTest('≈î', ['latin capital letter r acute', 'cap r acute', 'latin capital letter r acute']);
  this.executeCharTest('≈ñ', ['latin capital letter r with cedilla', 'cap r cedilla', 'latin capital letter r cedilla']);
  this.executeCharTest('≈ò', ['latin capital letter r with caron', 'cap r caron', 'latin capital letter r hacek']);
  this.executeCharTest('≈ö', ['latin capital letter s with acute', 'cap s acute', 'latin capital letter s acute']);
  this.executeCharTest('≈ú', ['latin capital letter s with circumflex', 'cap s hat', 'latin capital letter s hat']);
  this.executeCharTest('≈û', ['latin capital letter s with cedilla', 'cap s cedilla', 'latin capital letter s cedilla']);
  this.executeCharTest('≈†', ['latin capital letter s with caron', 'cap s caron', 'latin capital letter s hacek']);
  this.executeCharTest('≈¢', ['latin capital letter t with cedilla', 'cap t cedilla', 'latin capital letter t cedilla']);
  this.executeCharTest('≈§', ['latin capital letter t with caron', 'cap t caron', 'latin capital letter t hacek']);
  this.executeCharTest('≈®', ['latin capital letter u with tilde', 'cap u tilde', 'latin capital letter u tilde']);
  this.executeCharTest('≈™', ['latin capital letter u with macron', 'cap u overbar', 'latin capital letter u overbar']);
  this.executeCharTest('≈¨', ['latin capital letter u with breve', 'cap u breve', 'latin capital letter u breve']);
  this.executeCharTest('≈Æ', ['latin capital letter u with ring above', 'cap u ring', 'latin capital letter u ring']);
  this.executeCharTest('≈∞', ['latin capital letter u with double acute', 'cap u double acute', 'latin capital letter u double acute']);
  this.executeCharTest('≈≤', ['latin capital letter u with ogonek', 'cap u ogonek', 'latin capital letter u ogonek']);
  this.executeCharTest('≈¥', ['latin capital letter w with circumflex', 'cap w hat', 'latin capital letter w hat']);
  this.executeCharTest('≈∂', ['latin capital letter y with circumflex', 'cap y hat', 'latin capital letter y hat']);
  this.executeCharTest('≈∏', ['latin capital letter y with diaeresis', 'cap y double overdot', 'latin capital letter y double overdot']);
  this.executeCharTest('≈π', ['latin capital letter z with acute', 'cap z acute', 'latin capital letter z acute']);
  this.executeCharTest('≈ª', ['latin capital letter z with dot above', 'cap z overdot', 'latin capital letter z overdot']);
  this.executeCharTest('≈Ω', ['latin capital letter z with caron', 'cap z caron', 'latin capital letter z hacek']);
  this.executeCharTest('«ç', ['latin capital letter a with caron', 'cap a caron', 'latin capital letter a hacek']);
  this.executeCharTest('«è', ['latin capital letter i with caron', 'cap i caron', 'latin capital letter i hacek']);
  this.executeCharTest('«ë', ['latin capital letter o with caron', 'cap o caron', 'latin capital letter o hacek']);
  this.executeCharTest('«ì', ['latin capital letter u with caron', 'cap u caron', 'latin capital letter u hacek']);
  this.executeCharTest('«¶', ['latin capital letter g with caron', 'cap g caron', 'latin capital letter g hacek']);
  this.executeCharTest('«®', ['latin capital letter k with caron', 'cap k caron', 'latin capital letter k hacek']);
  this.executeCharTest('«™', ['latin capital letter o with ogonek', 'cap o ogonek', 'latin capital letter o ogonek']);
  this.executeCharTest('«¥', ['latin capital letter g with acute', 'cap g acute', 'latin capital letter g acute']);
  this.executeCharTest('«∏', ['latin capital letter n with grave', 'cap n grave', 'latin capital letter n grave']);
  this.executeCharTest('»Ä', ['latin capital letter a with double grave', 'cap a double grave', 'latin capital letter a double grave']);
  this.executeCharTest('»Ç', ['latin capital letter a with inverted breve', 'cap a inverted breve', 'latin capital letter a inverted breve']);
  this.executeCharTest('»Ñ', ['latin capital letter e with double grave', 'cap e double grave', 'latin capital letter e double grave']);
  this.executeCharTest('»Ü', ['latin capital letter e with inverted breve', 'cap e inverted breve', 'latin capital letter e inverted breve']);
  this.executeCharTest('»à', ['latin capital letter i with double grave', 'cap i double grave', 'latin capital letter i double grave']);
  this.executeCharTest('»ä', ['latin capital letter i with inverted breve', 'cap i inverted breve', 'latin capital letter i inverted breve']);
  this.executeCharTest('»å', ['latin capital letter o with double grave', 'cap o double grave', 'latin capital letter o double grave']);
  this.executeCharTest('»é', ['latin capital letter o with inverted breve', 'cap o inverted breve', 'latin capital letter o inverted breve']);
  this.executeCharTest('»ê', ['latin capital letter r with double grave', 'cap r double grave', 'latin capital letter r double grave']);
  this.executeCharTest('»í', ['latin capital letter r with inverted breve', 'cap r inverted breve', 'latin capital letter r inverted breve']);
  this.executeCharTest('»î', ['latin capital letter u with double grave', 'cap u double grave', 'latin capital letter u double grave']);
  this.executeCharTest('»ñ', ['latin capital letter u with inverted breve', 'cap u inverted breve', 'latin capital letter u inverted breve']);
  this.executeCharTest('»ò', ['latin capital letter s with comma below', 'cap s comma below', 'latin capital letter s comma below']);
  this.executeCharTest('»ö', ['latin capital letter t with comma below', 'cap t comma below', 'latin capital letter t comma below']);
  this.executeCharTest('»û', ['latin capital letter h caron', 'cap h caron', 'cap h caron']);
  this.executeCharTest('»¶', ['latin capital letter a with dot above', 'cap a overdot', 'latin capital letter a overdot']);
  this.executeCharTest('»®', ['latin capital letter e with cedilla', 'cap e cedilla', 'latin capital letter e cedilla']);
  this.executeCharTest('»Æ', ['latin capital letter o with dot above', 'cap o overdot', 'latin capital letter o overdot']);
  this.executeCharTest('»≤', ['latin capital letter y with macron', 'cap y overbar', 'latin capital letter y overbar']);
  this.executeCharTest('·∏Ä', ['latin capital letter a with ring below', 'cap a ring below', 'latin capital letter a ring below']);
  this.executeCharTest('·∏Ç', ['latin capital letter b with dot above', 'cap b overdot', 'latin capital letter b overdot']);
  this.executeCharTest('·∏Ñ', ['latin capital letter b with dot below', 'cap b underdot', 'latin capital letter b underdot']);
  this.executeCharTest('·∏Ü', ['latin capital letter b with line below', 'cap b underbar', 'latin capital letter b underbar']);
  this.executeCharTest('·∏ä', ['latin capital letter d with dot above', 'cap d overdot', 'latin capital letter d overdot']);
  this.executeCharTest('·∏å', ['latin capital letter d with dot below', 'cap d underdot', 'latin capital letter d underdot']);
  this.executeCharTest('·∏é', ['latin capital letter d with line below', 'cap d underbar', 'latin capital letter d underbar']);
  this.executeCharTest('·∏ê', ['latin capital letter d with cedilla', 'cap d cedilla', 'latin capital letter d cedilla']);
  this.executeCharTest('·∏í', ['latin capital letter d with circumflex below', 'cap d underhat', 'latin capital letter d underhat']);
  this.executeCharTest('·∏ò', ['latin capital letter e with circumflex below', 'cap e underhat', 'latin capital letter e underhat']);
  this.executeCharTest('·∏ö', ['latin capital letter e with tilde below', 'cap e tilde below', 'latin capital letter e tilde below']);
  this.executeCharTest('·∏û', ['latin capital letter f with dot above', 'cap f overdot', 'latin capital letter f overdot']);
  this.executeCharTest('·∏†', ['latin capital letter g with macron', 'cap g overbar', 'latin capital letter g overbar']);
  this.executeCharTest('·∏¢', ['latin capital letter h with dot above', 'cap h overdot', 'latin capital letter h overdot']);
  this.executeCharTest('·∏§', ['latin capital letter h with dot below', 'cap h underdot', 'latin capital letter h underdot']);
  this.executeCharTest('·∏¶', ['latin capital letter h with diaeresis', 'cap h double overdot', 'latin capital letter h double overdot']);
  this.executeCharTest('·∏®', ['latin capital letter h with cedilla', 'cap h cedilla', 'latin capital letter h cedilla']);
  this.executeCharTest('·∏™', ['latin capital letter h with breve below', 'cap h breve below', 'latin capital letter h breve below']);
  this.executeCharTest('·∏¨', ['latin capital letter i with tilde below', 'cap i tilde below', 'latin capital letter i tilde below']);
  this.executeCharTest('·∏∞', ['latin capital letter k with acute', 'cap k acute', 'latin capital letter k acute']);
  this.executeCharTest('·∏≤', ['latin capital letter k with dot below', 'cap k underdot', 'latin capital letter k underdot']);
  this.executeCharTest('·∏¥', ['latin capital letter k with line below', 'cap k underbar', 'latin capital letter k underbar']);
  this.executeCharTest('·∏∂', ['latin capital letter l with dot below', 'cap l underdot', 'latin capital letter l underdot']);
  this.executeCharTest('·∏∫', ['latin capital letter l with line below', 'cap l underbar', 'latin capital letter l underbar']);
  this.executeCharTest('·∏º', ['latin capital letter l with circumflex below', 'cap l underhat', 'latin capital letter l underhat']);
  this.executeCharTest('·∏æ', ['latin capital letter m with acute', 'cap m acute', 'latin capital letter m acute']);
  this.executeCharTest('·πÄ', ['latin capital letter m with dot above', 'cap m overdot', 'latin capital letter m overdot']);
  this.executeCharTest('·πÇ', ['latin capital letter m with dot below', 'cap m underdot', 'latin capital letter m underdot']);
  this.executeCharTest('·πÑ', ['latin capital letter n with dot above', 'cap n overdot', 'latin capital letter n overdot']);
  this.executeCharTest('·πÜ', ['latin capital letter n with dot below', 'cap n underdot', 'latin capital letter n underdot']);
  this.executeCharTest('·πà', ['latin capital letter n with line below', 'cap n underbar', 'latin capital letter n underbar']);
  this.executeCharTest('·πä', ['latin capital letter n with circumflex below', 'cap n underhat', 'latin capital letter n underhat']);
  this.executeCharTest('·πî', ['latin capital letter p with acute', 'cap p acute', 'latin capital letter p acute']);
  this.executeCharTest('·πñ', ['latin capital letter p with dot above', 'cap p overdot', 'latin capital letter p overdot']);
  this.executeCharTest('·πò', ['latin capital letter r with dot above', 'cap r overdot', 'latin capital letter r overdot']);
  this.executeCharTest('·πö', ['latin capital letter r with dot below', 'cap r underdot', 'latin capital letter r underdot']);
  this.executeCharTest('·πû', ['latin capital letter r with line below', 'cap r underbar', 'latin capital letter r underbar']);
  this.executeCharTest('·π†', ['latin capital letter s with dot above', 'cap s overdot', 'latin capital letter s overdot']);
  this.executeCharTest('·π¢', ['latin capital letter s with dot below', 'cap s underdot', 'latin capital letter s underdot']);
  this.executeCharTest('·π™', ['latin capital letter t with dot above', 'cap t overdot', 'latin capital letter t overdot']);
  this.executeCharTest('·π¨', ['latin capital letter t with dot below', 'cap t underdot', 'latin capital letter t underdot']);
  this.executeCharTest('·πÆ', ['latin capital letter t with line below', 'cap t underbar', 'latin capital letter t underbar']);
  this.executeCharTest('·π∞', ['latin capital letter t with circumflex below', 'cap t underhat', 'latin capital letter t underhat']);
  this.executeCharTest('·π≤', ['latin capital letter u with diaeresis below', 'cap u double underdot', 'latin capital letter u double underdot']);
  this.executeCharTest('·π¥', ['latin capital letter u with tilde below', 'cap u tilde below', 'latin capital letter u tilde below']);
  this.executeCharTest('·π∂', ['latin capital letter u with circumflex below', 'cap u underhat', 'latin capital letter u underhat']);
  this.executeCharTest('·πº', ['latin capital letter v with tilde', 'cap v tilde', 'latin capital letter v tilde']);
  this.executeCharTest('·πæ', ['latin capital letter v with dot below', 'cap v underdot', 'latin capital letter v underdot']);
  this.executeCharTest('·∫Ä', ['latin capital letter w with grave', 'cap w grave', 'latin capital letter w grave']);
  this.executeCharTest('·∫Ç', ['latin capital letter w with acute', 'cap w acute', 'latin capital letter w acute']);
  this.executeCharTest('·∫Ñ', ['latin capital letter w with diaeresis', 'cap w double overdot', 'latin capital letter w double overdot']);
  this.executeCharTest('·∫Ü', ['latin capital letter w with dot above', 'cap w overdot', 'latin capital letter w overdot']);
  this.executeCharTest('·∫à', ['latin capital letter w with dot below', 'cap w underdot', 'latin capital letter w underdot']);
  this.executeCharTest('·∫ä', ['latin capital letter x with dot above', 'cap x overdot', 'latin capital letter x overdot']);
  this.executeCharTest('·∫å', ['latin capital letter x with diaeresis', 'cap x double overdot', 'latin capital letter x double overdot']);
  this.executeCharTest('·∫é', ['latin capital letter y with dot above', 'cap y overdot', 'latin capital letter y overdot']);
  this.executeCharTest('·∫ê', ['latin capital letter z with circumflex', 'cap z circumflex', 'latin capital letter z circumflex']);
  this.executeCharTest('·∫í', ['latin capital letter z with dot below', 'cap z underdot', 'latin capital letter z underdot']);
  this.executeCharTest('·∫î', ['latin capital letter z with line below', 'cap z underbar', 'latin capital letter z underbar']);
  this.executeCharTest('·∫†', ['latin capital letter with a dot below', 'cap a underdot', 'latin capital letter with a underdot']);
  this.executeCharTest('·∫¢', ['latin capital letter a with hook above', 'cap a hook', 'latin capital letter a hook']);
  this.executeCharTest('·∫∏', ['latin capital letter e with dot below', 'cap e underdot', 'latin capital letter e underdot']);
  this.executeCharTest('·∫∫', ['latin capital letter e with hook above', 'cap e hook', 'latin capital letter e hook']);
  this.executeCharTest('·∫º', ['latin capital letter e with tilde', 'cap e tilde', 'latin capital letter e tilde']);
  this.executeCharTest('·ªà', ['latin capital letter i with hook above', 'cap i hook', 'latin capital letter i hook']);
  this.executeCharTest('·ªä', ['latin capital letter i with dot below', 'cap i underdot', 'latin capital letter i underdot']);
  this.executeCharTest('·ªå', ['latin capital letter o with dot below', 'cap o underdot', 'latin capital letter o underdot']);
  this.executeCharTest('·ªé', ['latin capital letter o with hook above', 'cap o hook', 'latin capital letter o hook']);
  this.executeCharTest('·ª§', ['latin capital letter u with dot below', 'cap u underdot', 'latin capital letter u underdot']);
  this.executeCharTest('·ª¶', ['latin capital letter u with hook above', 'cap u hook', 'latin capital letter u hook']);
  this.executeCharTest('·ª≤', ['latin capital letter y with grave', 'cap y grave', 'latin capital letter y grave']);
  this.executeCharTest('·ª¥', ['latin capital letter y with dot below', 'cap y underdot', 'latin capital letter y underdot']);
  this.executeCharTest('·ª∂', ['latin capital letter y with hook above', 'cap y hook', 'latin capital letter y hook']);
  this.executeCharTest('·ª∏', ['latin capital letter y with tilde', 'cap y tilde', 'latin capital letter y tilde']);
  this.executeCharTest('ùï¨', ['bold fraktur capital a', 'bold fraktur cap a', 'bold fraktur cap a']);
  this.executeCharTest('ùï≠', ['bold fraktur capital b', 'bold fraktur cap b', 'bold fraktur cap b']);
  this.executeCharTest('ùïÆ', ['bold fraktur capital c', 'bold fraktur cap c', 'bold fraktur cap c']);
  this.executeCharTest('ùïØ', ['bold fraktur capital d', 'bold fraktur cap d', 'bold fraktur cap d']);
  this.executeCharTest('ùï∞', ['bold fraktur capital e', 'bold fraktur cap e', 'bold fraktur cap e']);
  this.executeCharTest('ùï±', ['bold fraktur capital f', 'bold fraktur cap f', 'bold fraktur cap f']);
  this.executeCharTest('ùï≤', ['bold fraktur capital g', 'bold fraktur cap g', 'bold fraktur cap g']);
  this.executeCharTest('ùï≥', ['bold fraktur capital h', 'bold fraktur cap h', 'bold fraktur cap h']);
  this.executeCharTest('ùï¥', ['bold fraktur capital i', 'bold fraktur cap i', 'bold fraktur cap i']);
  this.executeCharTest('ùïµ', ['bold fraktur capital j', 'bold fraktur cap j', 'bold fraktur cap j']);
  this.executeCharTest('ùï∂', ['bold fraktur capital k', 'bold fraktur cap k', 'bold fraktur cap k']);
  this.executeCharTest('ùï∑', ['bold fraktur capital l', 'bold fraktur cap l', 'bold fraktur cap l']);
  this.executeCharTest('ùï∏', ['bold fraktur capital m', 'bold fraktur cap m', 'bold fraktur cap m']);
  this.executeCharTest('ùïπ', ['bold fraktur capital n', 'bold fraktur cap n', 'bold fraktur cap n']);
  this.executeCharTest('ùï∫', ['bold fraktur capital o', 'bold fraktur cap o', 'bold fraktur cap o']);
  this.executeCharTest('ùïª', ['bold fraktur capital p', 'bold fraktur cap p', 'bold fraktur cap p']);
  this.executeCharTest('ùïº', ['bold fraktur capital q', 'bold fraktur cap q', 'bold fraktur cap q']);
  this.executeCharTest('ùïΩ', ['bold fraktur capital r', 'bold fraktur cap r', 'bold fraktur cap r']);
  this.executeCharTest('ùïæ', ['bold fraktur capital s', 'bold fraktur cap s', 'bold fraktur cap s']);
  this.executeCharTest('ùïø', ['bold fraktur capital t', 'bold fraktur cap t', 'bold fraktur cap t']);
  this.executeCharTest('ùñÄ', ['bold fraktur capital u', 'bold fraktur cap u', 'bold fraktur cap u']);
  this.executeCharTest('ùñÅ', ['bold fraktur capital v', 'bold fraktur cap v', 'bold fraktur cap v']);
  this.executeCharTest('ùñÇ', ['bold fraktur capital w', 'bold fraktur cap w', 'bold fraktur cap w']);
  this.executeCharTest('ùñÉ', ['bold fraktur capital x', 'bold fraktur cap x', 'bold fraktur cap x']);
  this.executeCharTest('ùñÑ', ['bold fraktur capital y', 'bold fraktur cap y', 'bold fraktur cap y']);
  this.executeCharTest('ùñÖ', ['bold fraktur capital z', 'bold fraktur cap z', 'bold fraktur cap z']);
  this.executeCharTest('ùñÜ', ['bold fraktur small a', 'bold fraktur a', 'bold fraktur a']);
  this.executeCharTest('ùñá', ['bold fraktur small b', 'bold fraktur b', 'bold fraktur b']);
  this.executeCharTest('ùñà', ['bold fraktur small c', 'bold fraktur c', 'bold fraktur c']);
  this.executeCharTest('ùñâ', ['bold fraktur small d', 'bold fraktur d', 'bold fraktur d']);
  this.executeCharTest('ùñä', ['bold fraktur small e', 'bold fraktur e', 'bold fraktur e']);
  this.executeCharTest('ùñã', ['bold fraktur small f', 'bold fraktur f', 'bold fraktur f']);
  this.executeCharTest('ùñå', ['bold fraktur small g', 'bold fraktur g', 'bold fraktur g']);
  this.executeCharTest('ùñç', ['bold fraktur small h', 'bold fraktur h', 'bold fraktur h']);
  this.executeCharTest('ùñé', ['bold fraktur small i', 'bold fraktur i', 'bold fraktur i']);
  this.executeCharTest('ùñè', ['bold fraktur small j', 'bold fraktur j', 'bold fraktur j']);
  this.executeCharTest('ùñê', ['bold fraktur small k', 'bold fraktur k', 'bold fraktur k']);
  this.executeCharTest('ùñë', ['bold fraktur small l', 'bold fraktur l', 'bold fraktur l']);
  this.executeCharTest('ùñí', ['bold fraktur small m', 'bold fraktur m', 'bold fraktur m']);
  this.executeCharTest('ùñì', ['bold fraktur small n', 'bold fraktur n', 'bold fraktur n']);
  this.executeCharTest('ùñî', ['bold fraktur small o', 'bold fraktur o', 'bold fraktur o']);
  this.executeCharTest('ùñï', ['bold fraktur small p', 'bold fraktur p', 'bold fraktur p']);
  this.executeCharTest('ùññ', ['bold fraktur small q', 'bold fraktur q', 'bold fraktur q']);
  this.executeCharTest('ùñó', ['bold fraktur small r', 'bold fraktur r', 'bold fraktur r']);
  this.executeCharTest('ùñò', ['bold fraktur small s', 'bold fraktur s', 'bold fraktur s']);
  this.executeCharTest('ùñô', ['bold fraktur small t', 'bold fraktur t', 'bold fraktur t']);
  this.executeCharTest('ùñö', ['bold fraktur small u', 'bold fraktur u', 'bold fraktur u']);
  this.executeCharTest('ùñõ', ['bold fraktur small v', 'bold fraktur v', 'bold fraktur v']);
  this.executeCharTest('ùñú', ['bold fraktur small w', 'bold fraktur w', 'bold fraktur w']);
  this.executeCharTest('ùñù', ['bold fraktur small x', 'bold fraktur x', 'bold fraktur x']);
  this.executeCharTest('ùñû', ['bold fraktur small y', 'bold fraktur y', 'bold fraktur y']);
  this.executeCharTest('ùñü', ['bold fraktur small z', 'bold fraktur z', 'bold fraktur z']);
  this.executeCharTest('ùêÄ', ['bold capital a', 'bold cap a', 'bold cap a']);
  this.executeCharTest('ùêÅ', ['bold capital b', 'bold cap b', 'bold cap b']);
  this.executeCharTest('ùêÇ', ['bold capital c', 'bold cap c', 'bold cap c']);
  this.executeCharTest('ùêÉ', ['bold capital d', 'bold cap d', 'bold cap d']);
  this.executeCharTest('ùêÑ', ['bold capital e', 'bold cap e', 'bold cap e']);
  this.executeCharTest('ùêÖ', ['bold capital f', 'bold cap f', 'bold cap f']);
  this.executeCharTest('ùêÜ', ['bold capital g', 'bold cap g', 'bold cap g']);
  this.executeCharTest('ùêá', ['bold capital h', 'bold cap h', 'bold cap h']);
  this.executeCharTest('ùêà', ['bold capital i', 'bold cap i', 'bold cap i']);
  this.executeCharTest('ùêâ', ['bold capital j', 'bold cap j', 'bold cap j']);
  this.executeCharTest('ùêä', ['bold capital k', 'bold cap k', 'bold cap k']);
  this.executeCharTest('ùêã', ['bold capital l', 'bold cap l', 'bold cap l']);
  this.executeCharTest('ùêå', ['bold capital m', 'bold cap m', 'bold cap m']);
  this.executeCharTest('ùêç', ['bold capital n', 'bold cap n', 'bold cap n']);
  this.executeCharTest('ùêé', ['bold capital o', 'bold cap o', 'bold cap o']);
  this.executeCharTest('ùêè', ['bold capital p', 'bold cap p', 'bold cap p']);
  this.executeCharTest('ùêê', ['bold capital q', 'bold cap q', 'bold cap q']);
  this.executeCharTest('ùêë', ['bold capital r', 'bold cap r', 'bold cap r']);
  this.executeCharTest('ùêí', ['bold capital s', 'bold cap s', 'bold cap s']);
  this.executeCharTest('ùêì', ['bold capital t', 'bold cap t', 'bold cap t']);
  this.executeCharTest('ùêî', ['bold capital u', 'bold cap u', 'bold cap u']);
  this.executeCharTest('ùêï', ['bold capital v', 'bold cap v', 'bold cap v']);
  this.executeCharTest('ùêñ', ['bold capital w', 'bold cap w', 'bold cap w']);
  this.executeCharTest('ùêó', ['bold capital x', 'bold cap x', 'bold cap x']);
  this.executeCharTest('ùêò', ['bold capital y', 'bold cap y', 'bold cap y']);
  this.executeCharTest('ùêô', ['bold capital z', 'bold cap z', 'bold cap z']);
  this.executeCharTest('ùêö', ['bold small a', 'bold a', 'bold a']);
  this.executeCharTest('ùêõ', ['bold small b', 'bold b', 'bold b']);
  this.executeCharTest('ùêú', ['bold small c', 'bold c', 'bold c']);
  this.executeCharTest('ùêù', ['bold small d', 'bold d', 'bold d']);
  this.executeCharTest('ùêû', ['bold small e', 'bold e', 'bold e']);
  this.executeCharTest('ùêü', ['bold small f', 'bold f', 'bold f']);
  this.executeCharTest('ùê†', ['bold small g', 'bold g', 'bold g']);
  this.executeCharTest('ùê°', ['bold small h', 'bold h', 'bold h']);
  this.executeCharTest('ùê¢', ['bold small i', 'bold i', 'bold i']);
  this.executeCharTest('ùê£', ['bold small j', 'bold j', 'bold j']);
  this.executeCharTest('ùê§', ['bold small k', 'bold k', 'bold k']);
  this.executeCharTest('ùê•', ['bold small l', 'bold l', 'bold l']);
  this.executeCharTest('ùê¶', ['bold small m', 'bold m', 'bold m']);
  this.executeCharTest('ùêß', ['bold small n', 'bold n', 'bold n']);
  this.executeCharTest('ùê®', ['bold small o', 'bold o', 'bold o']);
  this.executeCharTest('ùê©', ['bold small p', 'bold p', 'bold p']);
  this.executeCharTest('ùê™', ['bold small q', 'bold q', 'bold q']);
  this.executeCharTest('ùê´', ['bold small r', 'bold r', 'bold r']);
  this.executeCharTest('ùê¨', ['bold small s', 'bold s', 'bold s']);
  this.executeCharTest('ùê≠', ['bold small t', 'bold t', 'bold t']);
  this.executeCharTest('ùêÆ', ['bold small u', 'bold u', 'bold u']);
  this.executeCharTest('ùêØ', ['bold small v', 'bold v', 'bold v']);
  this.executeCharTest('ùê∞', ['bold small w', 'bold w', 'bold w']);
  this.executeCharTest('ùê±', ['bold small x', 'bold x', 'bold x']);
  this.executeCharTest('ùê≤', ['bold small y', 'bold y', 'bold y']);
  this.executeCharTest('ùê≥', ['bold small z', 'bold z', 'bold z']);
  this.executeCharTest('ùë®', ['bold italic capital a', 'bold italic cap a', 'bold italic cap a']);
  this.executeCharTest('ùë©', ['bold italic capital b', 'bold italic cap b', 'bold italic cap b']);
  this.executeCharTest('ùë™', ['bold italic capital c', 'bold italic cap c', 'bold italic cap c']);
  this.executeCharTest('ùë´', ['bold italic capital d', 'bold italic cap d', 'bold italic cap d']);
  this.executeCharTest('ùë¨', ['bold italic capital e', 'bold italic cap e', 'bold italic cap e']);
  this.executeCharTest('ùë≠', ['bold italic capital f', 'bold italic cap f', 'bold italic cap f']);
  this.executeCharTest('ùëÆ', ['bold italic capital g', 'bold italic cap g', 'bold italic cap g']);
  this.executeCharTest('ùëØ', ['bold italic capital h', 'bold italic cap h', 'bold italic cap h']);
  this.executeCharTest('ùë∞', ['bold italic capital i', 'bold italic cap i', 'bold italic cap i']);
  this.executeCharTest('ùë±', ['bold italic capital j', 'bold italic cap j', 'bold italic cap j']);
  this.executeCharTest('ùë≤', ['bold italic capital k', 'bold italic cap k', 'bold italic cap k']);
  this.executeCharTest('ùë≥', ['bold italic capital l', 'bold italic cap l', 'bold italic cap l']);
  this.executeCharTest('ùë¥', ['bold italic capital m', 'bold italic cap m', 'bold italic cap m']);
  this.executeCharTest('ùëµ', ['bold italic capital n', 'bold italic cap n', 'bold italic cap n']);
  this.executeCharTest('ùë∂', ['bold italic capital o', 'bold italic cap o', 'bold italic cap o']);
  this.executeCharTest('ùë∑', ['bold italic capital p', 'bold italic cap p', 'bold italic cap p']);
  this.executeCharTest('ùë∏', ['bold italic capital q', 'bold italic cap q', 'bold italic cap q']);
  this.executeCharTest('ùëπ', ['bold italic capital r', 'bold italic cap r', 'bold italic cap r']);
  this.executeCharTest('ùë∫', ['bold italic capital s', 'bold italic cap s', 'bold italic cap s']);
  this.executeCharTest('ùëª', ['bold italic capital t', 'bold italic cap t', 'bold italic cap t']);
  this.executeCharTest('ùëº', ['bold italic capital u', 'bold italic cap u', 'bold italic cap u']);
  this.executeCharTest('ùëΩ', ['bold italic capital v', 'bold italic cap v', 'bold italic cap v']);
  this.executeCharTest('ùëæ', ['bold italic capital w', 'bold italic cap w', 'bold italic cap w']);
  this.executeCharTest('ùëø', ['bold italic capital x', 'bold italic cap x', 'bold italic cap x']);
  this.executeCharTest('ùíÄ', ['bold italic capital y', 'bold italic cap y', 'bold italic cap y']);
  this.executeCharTest('ùíÅ', ['bold italic capital z', 'bold italic cap z', 'bold italic cap z']);
  this.executeCharTest('ùíÇ', ['bold italic small a', 'bold italic a', 'bold italic a']);
  this.executeCharTest('ùíÉ', ['bold italic small b', 'bold italic b', 'bold italic b']);
  this.executeCharTest('ùíÑ', ['bold italic small c', 'bold italic c', 'bold italic c']);
  this.executeCharTest('ùíÖ', ['bold italic small d', 'bold italic d', 'bold italic d']);
  this.executeCharTest('ùíÜ', ['bold italic small e', 'bold italic e', 'bold italic e']);
  this.executeCharTest('ùíá', ['bold italic small f', 'bold italic f', 'bold italic f']);
  this.executeCharTest('ùíà', ['bold italic small g', 'bold italic g', 'bold italic g']);
  this.executeCharTest('ùíâ', ['bold italic small h', 'bold italic h', 'bold italic h']);
  this.executeCharTest('ùíä', ['bold italic small i', 'bold italic i', 'bold italic i']);
  this.executeCharTest('ùíã', ['bold italic small j', 'bold italic j', 'bold italic j']);
  this.executeCharTest('ùíå', ['bold italic small k', 'bold italic k', 'bold italic k']);
  this.executeCharTest('ùíç', ['bold italic small l', 'bold italic l', 'bold italic l']);
  this.executeCharTest('ùíé', ['bold italic small m', 'bold italic m', 'bold italic m']);
  this.executeCharTest('ùíè', ['bold italic small n', 'bold italic n', 'bold italic n']);
  this.executeCharTest('ùíê', ['bold italic small o', 'bold italic o', 'bold italic o']);
  this.executeCharTest('ùíë', ['bold italic small p', 'bold italic p', 'bold italic p']);
  this.executeCharTest('ùíí', ['bold italic small q', 'bold italic q', 'bold italic q']);
  this.executeCharTest('ùíì', ['bold italic small r', 'bold italic r', 'bold italic r']);
  this.executeCharTest('ùíî', ['bold italic small s', 'bold italic s', 'bold italic s']);
  this.executeCharTest('ùíï', ['bold italic small t', 'bold italic t', 'bold italic t']);
  this.executeCharTest('ùíñ', ['bold italic small u', 'bold italic u', 'bold italic u']);
  this.executeCharTest('ùíó', ['bold italic small v', 'bold italic v', 'bold italic v']);
  this.executeCharTest('ùíò', ['bold italic small w', 'bold italic w', 'bold italic w']);
  this.executeCharTest('ùíô', ['bold italic small x', 'bold italic x', 'bold italic x']);
  this.executeCharTest('ùíö', ['bold italic small y', 'bold italic y', 'bold italic y']);
  this.executeCharTest('ùíõ', ['bold italic small z', 'bold italic z', 'bold italic z']);
  this.executeCharTest('ùìê', ['bold script capital a', 'bold script cap a', 'bold script cap a']);
  this.executeCharTest('ùìë', ['bold script capital b', 'bold script cap b', 'bold script cap b']);
  this.executeCharTest('ùìí', ['bold script capital c', 'bold script cap c', 'bold script cap c']);
  this.executeCharTest('ùìì', ['bold script capital d', 'bold script cap d', 'bold script cap d']);
  this.executeCharTest('ùìî', ['bold script capital e', 'bold script cap e', 'bold script cap e']);
  this.executeCharTest('ùìï', ['bold script capital f', 'bold script cap f', 'bold script cap f']);
  this.executeCharTest('ùìñ', ['bold script capital g', 'bold script cap g', 'bold script cap g']);
  this.executeCharTest('ùìó', ['bold script capital h', 'bold script cap h', 'bold script cap h']);
  this.executeCharTest('ùìò', ['bold script capital i', 'bold script cap i', 'bold script cap i']);
  this.executeCharTest('ùìô', ['bold script capital j', 'bold script cap j', 'bold script cap j']);
  this.executeCharTest('ùìö', ['bold script capital k', 'bold script cap k', 'bold script cap k']);
  this.executeCharTest('ùìõ', ['bold script capital l', 'bold script cap l', 'bold script cap l']);
  this.executeCharTest('ùìú', ['bold script capital m', 'bold script cap m', 'bold script cap m']);
  this.executeCharTest('ùìù', ['bold script capital n', 'bold script cap n', 'bold script cap n']);
  this.executeCharTest('ùìû', ['bold script capital o', 'bold script cap o', 'bold script cap o']);
  this.executeCharTest('ùìü', ['bold script capital p', 'bold script cap p', 'bold script cap p']);
  this.executeCharTest('ùì†', ['bold script capital q', 'bold script cap q', 'bold script cap q']);
  this.executeCharTest('ùì°', ['bold script capital r', 'bold script cap r', 'bold script cap r']);
  this.executeCharTest('ùì¢', ['bold script capital s', 'bold script cap s', 'bold script cap s']);
  this.executeCharTest('ùì£', ['bold script capital t', 'bold script cap t', 'bold script cap t']);
  this.executeCharTest('ùì§', ['bold script capital u', 'bold script cap u', 'bold script cap u']);
  this.executeCharTest('ùì•', ['bold script capital v', 'bold script cap v', 'bold script cap v']);
  this.executeCharTest('ùì¶', ['bold script capital w', 'bold script cap w', 'bold script cap w']);
  this.executeCharTest('ùìß', ['bold script capital x', 'bold script cap x', 'bold script cap x']);
  this.executeCharTest('ùì®', ['bold script capital y', 'bold script cap y', 'bold script cap y']);
  this.executeCharTest('ùì©', ['bold script capital z', 'bold script cap z', 'bold script cap z']);
  this.executeCharTest('ùì™', ['bold script small a', 'bold script a', 'bold script a']);
  this.executeCharTest('ùì´', ['bold script small b', 'bold script b', 'bold script b']);
  this.executeCharTest('ùì¨', ['bold script small c', 'bold script c', 'bold script c']);
  this.executeCharTest('ùì≠', ['bold script small d', 'bold script d', 'bold script d']);
  this.executeCharTest('ùìÆ', ['bold script small e', 'bold script e', 'bold script e']);
  this.executeCharTest('ùìØ', ['bold script small f', 'bold script f', 'bold script f']);
  this.executeCharTest('ùì∞', ['bold script small g', 'bold script g', 'bold script g']);
  this.executeCharTest('ùì±', ['bold script small h', 'bold script h', 'bold script h']);
  this.executeCharTest('ùì≤', ['bold script small i', 'bold script i', 'bold script i']);
  this.executeCharTest('ùì≥', ['bold script small j', 'bold script j', 'bold script j']);
  this.executeCharTest('ùì¥', ['bold script small k', 'bold script k', 'bold script k']);
  this.executeCharTest('ùìµ', ['bold script small l', 'bold script l', 'bold script l']);
  this.executeCharTest('ùì∂', ['bold script small m', 'bold script m', 'bold script m']);
  this.executeCharTest('ùì∑', ['bold script small n', 'bold script n', 'bold script n']);
  this.executeCharTest('ùì∏', ['bold script small o', 'bold script o', 'bold script o']);
  this.executeCharTest('ùìπ', ['bold script small p', 'bold script p', 'bold script p']);
  this.executeCharTest('ùì∫', ['bold script small q', 'bold script q', 'bold script q']);
  this.executeCharTest('ùìª', ['bold script small r', 'bold script r', 'bold script r']);
  this.executeCharTest('ùìº', ['bold script small s', 'bold script s', 'bold script s']);
  this.executeCharTest('ùìΩ', ['bold script small t', 'bold script t', 'bold script t']);
  this.executeCharTest('ùìæ', ['bold script small u', 'bold script u', 'bold script u']);
  this.executeCharTest('ùìø', ['bold script small v', 'bold script v', 'bold script v']);
  this.executeCharTest('ùîÄ', ['bold script small w', 'bold script w', 'bold script w']);
  this.executeCharTest('ùîÅ', ['bold script small x', 'bold script x', 'bold script x']);
  this.executeCharTest('ùîÇ', ['bold script small y', 'bold script y', 'bold script y']);
  this.executeCharTest('ùîÉ', ['bold script small z', 'bold script z', 'bold script z']);
  this.executeCharTest('ùî∏', ['double struck capital a', 'double struck cap a', 'double struck cap a']);
  this.executeCharTest('ùîπ', ['double struck capital b', 'double struck cap b', 'double struck cap b']);
  this.executeCharTest('‚ÑÇ', ['double struck capital c', 'double struck cap c', 'double struck cap c']);
  this.executeCharTest('ùîª', ['double struck capital d', 'double struck cap d', 'double struck cap d']);
  this.executeCharTest('ùîº', ['double struck capital e', 'double struck cap e', 'double struck cap e']);
  this.executeCharTest('ùîΩ', ['double struck capital f', 'double struck cap f', 'double struck cap f']);
  this.executeCharTest('ùîæ', ['double struck capital g', 'double struck cap g', 'double struck cap g']);
  this.executeCharTest('‚Ñç', ['double struck capital h', 'double struck cap h', 'double struck cap h']);
  this.executeCharTest('ùïÄ', ['double struck capital i', 'double struck cap i', 'double struck cap i']);
  this.executeCharTest('ùïÅ', ['double struck capital j', 'double struck cap j', 'double struck cap j']);
  this.executeCharTest('ùïÇ', ['double struck capital k', 'double struck cap k', 'double struck cap k']);
  this.executeCharTest('ùïÉ', ['double struck capital l', 'double struck cap l', 'double struck cap l']);
  this.executeCharTest('ùïÑ', ['double struck capital m', 'double struck cap m', 'double struck cap m']);
  this.executeCharTest('‚Ñï', ['double struck capital n', 'double struck cap n', 'double struck cap n']);
  this.executeCharTest('ùïÜ', ['double struck capital o', 'double struck cap o', 'double struck cap o']);
  this.executeCharTest('‚Ñô', ['double struck capital p', 'double struck cap p', 'double struck cap p']);
  this.executeCharTest('‚Ñö', ['double struck capital q', 'double struck cap q', 'double struck cap q']);
  this.executeCharTest('‚Ñù', ['double struck capital r', 'double struck cap r', 'double struck cap r']);
  this.executeCharTest('ùïä', ['double struck capital s', 'double struck cap s', 'double struck cap s']);
  this.executeCharTest('ùïã', ['double struck capital t', 'double struck cap t', 'double struck cap t']);
  this.executeCharTest('ùïå', ['double struck capital u', 'double struck cap u', 'double struck cap u']);
  this.executeCharTest('ùïç', ['double struck capital v', 'double struck cap v', 'double struck cap v']);
  this.executeCharTest('ùïé', ['double struck capital w', 'double struck cap w', 'double struck cap w']);
  this.executeCharTest('ùïè', ['double struck capital x', 'double struck cap x', 'double struck cap x']);
  this.executeCharTest('ùïê', ['double struck capital y', 'double struck cap y', 'double struck cap y']);
  this.executeCharTest('‚Ñ§', ['double struck capital z', 'double struck cap z', 'double struck cap z']);
  this.executeCharTest('ùïí', ['double struck small a', 'double struck a', 'double struck a']);
  this.executeCharTest('ùïì', ['double struck small b', 'double struck b', 'double struck b']);
  this.executeCharTest('ùïî', ['double struck small c', 'double struck c', 'double struck c']);
  this.executeCharTest('ùïï', ['double struck small d', 'double struck d', 'double struck d']);
  this.executeCharTest('ùïñ', ['double struck small e', 'double struck e', 'double struck e']);
  this.executeCharTest('ùïó', ['double struck small f', 'double struck f', 'double struck f']);
  this.executeCharTest('ùïò', ['double struck small g', 'double struck g', 'double struck g']);
  this.executeCharTest('ùïô', ['double struck small h', 'double struck h', 'double struck h']);
  this.executeCharTest('ùïö', ['double struck small i', 'double struck i', 'double struck i']);
  this.executeCharTest('ùïõ', ['double struck small j', 'double struck j', 'double struck j']);
  this.executeCharTest('ùïú', ['double struck small k', 'double struck k', 'double struck k']);
  this.executeCharTest('ùïù', ['double struck small l', 'double struck l', 'double struck l']);
  this.executeCharTest('ùïû', ['double struck small m', 'double struck m', 'double struck m']);
  this.executeCharTest('ùïü', ['double struck small n', 'double struck n', 'double struck n']);
  this.executeCharTest('ùï†', ['double struck small o', 'double struck o', 'double struck o']);
  this.executeCharTest('ùï°', ['double struck small p', 'double struck p', 'double struck p']);
  this.executeCharTest('ùï¢', ['double struck small q', 'double struck q', 'double struck q']);
  this.executeCharTest('ùï£', ['double struck small r', 'double struck r', 'double struck r']);
  this.executeCharTest('ùï§', ['double struck small s', 'double struck s', 'double struck s']);
  this.executeCharTest('ùï•', ['double struck small t', 'double struck t', 'double struck t']);
  this.executeCharTest('ùï¶', ['double struck small u', 'double struck u', 'double struck u']);
  this.executeCharTest('ùïß', ['double struck small v', 'double struck v', 'double struck v']);
  this.executeCharTest('ùï®', ['double struck small w', 'double struck w', 'double struck w']);
  this.executeCharTest('ùï©', ['double struck small x', 'double struck x', 'double struck x']);
  this.executeCharTest('ùï™', ['double struck small y', 'double struck y', 'double struck y']);
  this.executeCharTest('ùï´', ['double struck small z', 'double struck z', 'double struck z']);
  this.executeCharTest('ùîÑ', ['fraktur capital a', 'fraktur cap a', 'fraktur cap a']);
  this.executeCharTest('ùîÖ', ['fraktur capital b', 'fraktur cap b', 'fraktur cap b']);
  this.executeCharTest('‚Ñ≠', ['fraktur capital c', 'fraktur cap c', 'fraktur cap c']);
  this.executeCharTest('ùîá', ['fraktur capital d', 'fraktur cap d', 'fraktur cap d']);
  this.executeCharTest('ùîà', ['fraktur capital e', 'fraktur cap e', 'fraktur cap e']);
  this.executeCharTest('ùîâ', ['fraktur capital f', 'fraktur cap f', 'fraktur cap f']);
  this.executeCharTest('ùîä', ['fraktur capital g', 'fraktur cap g', 'fraktur cap g']);
  this.executeCharTest('‚Ñå', ['fraktur capital h', 'fraktur cap h', 'fraktur cap h']);
  this.executeCharTest('‚Ñë', ['fraktur capital i', 'fraktur cap i', 'fraktur cap i']);
  this.executeCharTest('ùîç', ['fraktur capital j', 'fraktur cap j', 'fraktur cap j']);
  this.executeCharTest('ùîé', ['fraktur capital k', 'fraktur cap k', 'fraktur cap k']);
  this.executeCharTest('ùîè', ['fraktur capital l', 'fraktur cap l', 'fraktur cap l']);
  this.executeCharTest('ùîê', ['fraktur capital m', 'fraktur cap m', 'fraktur cap m']);
  this.executeCharTest('ùîë', ['fraktur capital n', 'fraktur cap n', 'fraktur cap n']);
  this.executeCharTest('ùîí', ['fraktur capital o', 'fraktur cap o', 'fraktur cap o']);
  this.executeCharTest('ùîì', ['fraktur capital p', 'fraktur cap p', 'fraktur cap p']);
  this.executeCharTest('ùîî', ['fraktur capital q', 'fraktur cap q', 'fraktur cap q']);
  this.executeCharTest('‚Ñú', ['fraktur capital r', 'fraktur cap r', 'fraktur cap r']);
  this.executeCharTest('ùîñ', ['fraktur capital s', 'fraktur cap s', 'fraktur cap s']);
  this.executeCharTest('ùîó', ['fraktur capital t', 'fraktur cap t', 'fraktur cap t']);
  this.executeCharTest('ùîò', ['fraktur capital u', 'fraktur cap u', 'fraktur cap u']);
  this.executeCharTest('ùîô', ['fraktur capital v', 'fraktur cap v', 'fraktur cap v']);
  this.executeCharTest('ùîö', ['fraktur capital w', 'fraktur cap w', 'fraktur cap w']);
  this.executeCharTest('ùîõ', ['fraktur capital x', 'fraktur cap x', 'fraktur cap x']);
  this.executeCharTest('ùîú', ['fraktur capital y', 'fraktur cap y', 'fraktur cap y']);
  this.executeCharTest('‚Ñ®', ['fraktur capital z', 'fraktur cap z', 'fraktur cap z']);
  this.executeCharTest('ùîû', ['fraktur small a', 'fraktur a', 'fraktur a']);
  this.executeCharTest('ùîü', ['fraktur small b', 'fraktur b', 'fraktur b']);
  this.executeCharTest('ùî†', ['fraktur small c', 'fraktur c', 'fraktur c']);
  this.executeCharTest('ùî°', ['fraktur small d', 'fraktur d', 'fraktur d']);
  this.executeCharTest('ùî¢', ['fraktur small e', 'fraktur e', 'fraktur e']);
  this.executeCharTest('ùî£', ['fraktur small f', 'fraktur f', 'fraktur f']);
  this.executeCharTest('ùî§', ['fraktur small g', 'fraktur g', 'fraktur g']);
  this.executeCharTest('ùî•', ['fraktur small h', 'fraktur h', 'fraktur h']);
  this.executeCharTest('ùî¶', ['fraktur small i', 'fraktur i', 'fraktur i']);
  this.executeCharTest('ùîß', ['fraktur small j', 'fraktur j', 'fraktur j']);
  this.executeCharTest('ùî®', ['fraktur small k', 'fraktur k', 'fraktur k']);
  this.executeCharTest('ùî©', ['fraktur small l', 'fraktur l', 'fraktur l']);
  this.executeCharTest('ùî™', ['fraktur small m', 'fraktur m', 'fraktur m']);
  this.executeCharTest('ùî´', ['fraktur small n', 'fraktur n', 'fraktur n']);
  this.executeCharTest('ùî¨', ['fraktur small o', 'fraktur o', 'fraktur o']);
  this.executeCharTest('ùî≠', ['fraktur small p', 'fraktur p', 'fraktur p']);
  this.executeCharTest('ùîÆ', ['fraktur small q', 'fraktur q', 'fraktur q']);
  this.executeCharTest('ùîØ', ['fraktur small r', 'fraktur r', 'fraktur r']);
  this.executeCharTest('ùî∞', ['fraktur small s', 'fraktur s', 'fraktur s']);
  this.executeCharTest('ùî±', ['fraktur small t', 'fraktur t', 'fraktur t']);
  this.executeCharTest('ùî≤', ['fraktur small u', 'fraktur u', 'fraktur u']);
  this.executeCharTest('ùî≥', ['fraktur small v', 'fraktur v', 'fraktur v']);
  this.executeCharTest('ùî¥', ['fraktur small w', 'fraktur w', 'fraktur w']);
  this.executeCharTest('ùîµ', ['fraktur small x', 'fraktur x', 'fraktur x']);
  this.executeCharTest('ùî∂', ['fraktur small y', 'fraktur y', 'fraktur y']);
  this.executeCharTest('ùî∑', ['fraktur small z', 'fraktur z', 'fraktur z']);
  this.executeCharTest('ùê¥', ['italic capital a', 'italic cap a', 'italic cap a']);
  this.executeCharTest('ùêµ', ['italic capital b', 'italic cap b', 'italic cap b']);
  this.executeCharTest('ùê∂', ['italic capital c', 'italic cap c', 'italic cap c']);
  this.executeCharTest('ùê∑', ['italic capital d', 'italic cap d', 'italic cap d']);
  this.executeCharTest('ùê∏', ['italic capital e', 'italic cap e', 'italic cap e']);
  this.executeCharTest('ùêπ', ['italic capital f', 'italic cap f', 'italic cap f']);
  this.executeCharTest('ùê∫', ['italic capital g', 'italic cap g', 'italic cap g']);
  this.executeCharTest('ùêª', ['italic capital h', 'italic cap h', 'italic cap h']);
  this.executeCharTest('ùêº', ['italic capital i', 'italic cap i', 'italic cap i']);
  this.executeCharTest('ùêΩ', ['italic capital j', 'italic cap j', 'italic cap j']);
  this.executeCharTest('ùêæ', ['italic capital k', 'italic cap k', 'italic cap k']);
  this.executeCharTest('ùêø', ['italic capital l', 'italic cap l', 'italic cap l']);
  this.executeCharTest('ùëÄ', ['italic capital m', 'italic cap m', 'italic cap m']);
  this.executeCharTest('ùëÅ', ['italic capital n', 'italic cap n', 'italic cap n']);
  this.executeCharTest('ùëÇ', ['italic capital o', 'italic cap o', 'italic cap o']);
  this.executeCharTest('ùëÉ', ['italic capital p', 'italic cap p', 'italic cap p']);
  this.executeCharTest('ùëÑ', ['italic capital q', 'italic cap q', 'italic cap q']);
  this.executeCharTest('ùëÖ', ['italic capital r', 'italic cap r', 'italic cap r']);
  this.executeCharTest('ùëÜ', ['italic capital s', 'italic cap s', 'italic cap s']);
  this.executeCharTest('ùëá', ['italic capital t', 'italic cap t', 'italic cap t']);
  this.executeCharTest('ùëà', ['italic capital u', 'italic cap u', 'italic cap u']);
  this.executeCharTest('ùëâ', ['italic capital v', 'italic cap v', 'italic cap v']);
  this.executeCharTest('ùëä', ['italic capital w', 'italic cap w', 'italic cap w']);
  this.executeCharTest('ùëã', ['italic capital x', 'italic cap x', 'italic cap x']);
  this.executeCharTest('ùëå', ['italic capital y', 'italic cap y', 'italic cap y']);
  this.executeCharTest('ùëç', ['italic capital z', 'italic cap z', 'italic cap z']);
  this.executeCharTest('ùëé', ['italic small a', 'italic a', 'italic a']);
  this.executeCharTest('ùëè', ['italic small b', 'italic b', 'italic b']);
  this.executeCharTest('ùëê', ['italic small c', 'italic c', 'italic c']);
  this.executeCharTest('ùëë', ['italic small d', 'italic d', 'italic d']);
  this.executeCharTest('ùëí', ['italic small e', 'italic e', 'italic e']);
  this.executeCharTest('ùëì', ['italic small f', 'italic f', 'italic f']);
  this.executeCharTest('ùëî', ['italic small g', 'italic g', 'italic g']);
  this.executeCharTest('‚Ñé', ['italic small h', 'italic h', 'italic h']);
  this.executeCharTest('ùëñ', ['italic small i', 'italic i', 'italic i']);
  this.executeCharTest('ùëó', ['italic small j', 'italic j', 'italic j']);
  this.executeCharTest('ùëò', ['italic small k', 'italic k', 'italic k']);
  this.executeCharTest('ùëô', ['italic small l', 'italic l', 'italic l']);
  this.executeCharTest('ùëö', ['italic small m', 'italic m', 'italic m']);
  this.executeCharTest('ùëõ', ['italic small n', 'italic n', 'italic n']);
  this.executeCharTest('ùëú', ['italic small o', 'italic o', 'italic o']);
  this.executeCharTest('ùëù', ['italic small p', 'italic p', 'italic p']);
  this.executeCharTest('ùëû', ['italic small q', 'italic q', 'italic q']);
  this.executeCharTest('ùëü', ['italic small r', 'italic r', 'italic r']);
  this.executeCharTest('ùë†', ['italic small s', 'italic s', 'italic s']);
  this.executeCharTest('ùë°', ['italic small t', 'italic t', 'italic t']);
  this.executeCharTest('ùë¢', ['italic small u', 'italic u', 'italic u']);
  this.executeCharTest('ùë£', ['italic small v', 'italic v', 'italic v']);
  this.executeCharTest('ùë§', ['italic small w', 'italic w', 'italic w']);
  this.executeCharTest('ùë•', ['italic small x', 'italic x', 'italic x']);
  this.executeCharTest('ùë¶', ['italic small y', 'italic y', 'italic y']);
  this.executeCharTest('ùëß', ['italic small z', 'italic z', 'italic z']);
  this.executeCharTest('ùô∞', ['monospace capital a', 'monospace cap a', 'monospace cap a']);
  this.executeCharTest('ùô±', ['monospace capital b', 'monospace cap b', 'monospace cap b']);
  this.executeCharTest('ùô≤', ['monospace capital c', 'monospace cap c', 'monospace cap c']);
  this.executeCharTest('ùô≥', ['monospace capital d', 'monospace cap d', 'monospace cap d']);
  this.executeCharTest('ùô¥', ['monospace capital e', 'monospace cap e', 'monospace cap e']);
  this.executeCharTest('ùôµ', ['monospace capital f', 'monospace cap f', 'monospace cap f']);
  this.executeCharTest('ùô∂', ['monospace capital g', 'monospace cap g', 'monospace cap g']);
  this.executeCharTest('ùô∑', ['monospace capital h', 'monospace cap h', 'monospace cap h']);
  this.executeCharTest('ùô∏', ['monospace capital i', 'monospace cap i', 'monospace cap i']);
  this.executeCharTest('ùôπ', ['monospace capital j', 'monospace cap j', 'monospace cap j']);
  this.executeCharTest('ùô∫', ['monospace capital k', 'monospace cap k', 'monospace cap k']);
  this.executeCharTest('ùôª', ['monospace capital l', 'monospace cap l', 'monospace cap l']);
  this.executeCharTest('ùôº', ['monospace capital m', 'monospace cap m', 'monospace cap m']);
  this.executeCharTest('ùôΩ', ['monospace capital n', 'monospace cap n', 'monospace cap n']);
  this.executeCharTest('ùôæ', ['monospace capital o', 'monospace cap o', 'monospace cap o']);
  this.executeCharTest('ùôø', ['monospace capital p', 'monospace cap p', 'monospace cap p']);
  this.executeCharTest('ùöÄ', ['monospace capital q', 'monospace cap q', 'monospace cap q']);
  this.executeCharTest('ùöÅ', ['monospace capital r', 'monospace cap r', 'monospace cap r']);
  this.executeCharTest('ùöÇ', ['monospace capital s', 'monospace cap s', 'monospace cap s']);
  this.executeCharTest('ùöÉ', ['monospace capital t', 'monospace cap t', 'monospace cap t']);
  this.executeCharTest('ùöÑ', ['monospace capital u', 'monospace cap u', 'monospace cap u']);
  this.executeCharTest('ùöÖ', ['monospace capital v', 'monospace cap v', 'monospace cap v']);
  this.executeCharTest('ùöÜ', ['monospace capital w', 'monospace cap w', 'monospace cap w']);
  this.executeCharTest('ùöá', ['monospace capital x', 'monospace cap x', 'monospace cap x']);
  this.executeCharTest('ùöà', ['monospace capital y', 'monospace cap y', 'monospace cap y']);
  this.executeCharTest('ùöâ', ['monospace capital z', 'monospace cap z', 'monospace cap z']);
  this.executeCharTest('ùöä', ['monospace small a', 'monospace a', 'monospace a']);
  this.executeCharTest('ùöã', ['monospace small b', 'monospace b', 'monospace b']);
  this.executeCharTest('ùöå', ['monospace small c', 'monospace c', 'monospace c']);
  this.executeCharTest('ùöç', ['monospace small d', 'monospace d', 'monospace d']);
  this.executeCharTest('ùöé', ['monospace small e', 'monospace e', 'monospace e']);
  this.executeCharTest('ùöè', ['monospace small f', 'monospace f', 'monospace f']);
  this.executeCharTest('ùöê', ['monospace small g', 'monospace g', 'monospace g']);
  this.executeCharTest('ùöë', ['monospace small h', 'monospace h', 'monospace h']);
  this.executeCharTest('ùöí', ['monospace small i', 'monospace i', 'monospace i']);
  this.executeCharTest('ùöì', ['monospace small j', 'monospace j', 'monospace j']);
  this.executeCharTest('ùöî', ['monospace small k', 'monospace k', 'monospace k']);
  this.executeCharTest('ùöï', ['monospace small l', 'monospace l', 'monospace l']);
  this.executeCharTest('ùöñ', ['monospace small m', 'monospace m', 'monospace m']);
  this.executeCharTest('ùöó', ['monospace small n', 'monospace n', 'monospace n']);
  this.executeCharTest('ùöò', ['monospace small o', 'monospace o', 'monospace o']);
  this.executeCharTest('ùöô', ['monospace small p', 'monospace p', 'monospace p']);
  this.executeCharTest('ùöö', ['monospace small q', 'monospace q', 'monospace q']);
  this.executeCharTest('ùöõ', ['monospace small r', 'monospace r', 'monospace r']);
  this.executeCharTest('ùöú', ['monospace small s', 'monospace s', 'monospace s']);
  this.executeCharTest('ùöù', ['monospace small t', 'monospace t', 'monospace t']);
  this.executeCharTest('ùöû', ['monospace small u', 'monospace u', 'monospace u']);
  this.executeCharTest('ùöü', ['monospace small v', 'monospace v', 'monospace v']);
  this.executeCharTest('ùö†', ['monospace small w', 'monospace w', 'monospace w']);
  this.executeCharTest('ùö°', ['monospace small x', 'monospace x', 'monospace x']);
  this.executeCharTest('ùö¢', ['monospace small y', 'monospace y', 'monospace y']);
  this.executeCharTest('ùö£', ['monospace small z', 'monospace z', 'monospace z']);
  this.executeCharTest('ùóî', ['sans serif bold capital a', 'sans serif bold cap a', 'sans serif bold cap a']);
  this.executeCharTest('ùóï', ['sans serif bold capital b', 'sans serif bold cap b', 'sans serif bold cap b']);
  this.executeCharTest('ùóñ', ['sans serif bold capital c', 'sans serif bold cap c', 'sans serif bold cap c']);
  this.executeCharTest('ùóó', ['sans serif bold capital d', 'sans serif bold cap d', 'sans serif bold cap d']);
  this.executeCharTest('ùóò', ['sans serif bold capital e', 'sans serif bold cap e', 'sans serif bold cap e']);
  this.executeCharTest('ùóô', ['sans serif bold capital f', 'sans serif bold cap f', 'sans serif bold cap f']);
  this.executeCharTest('ùóö', ['sans serif bold capital g', 'sans serif bold cap g', 'sans serif bold cap g']);
  this.executeCharTest('ùóõ', ['sans serif bold capital h', 'sans serif bold cap h', 'sans serif bold cap h']);
  this.executeCharTest('ùóú', ['sans serif bold capital i', 'sans serif bold cap i', 'sans serif bold cap i']);
  this.executeCharTest('ùóù', ['sans serif bold capital j', 'sans serif bold cap j', 'sans serif bold cap j']);
  this.executeCharTest('ùóû', ['sans serif bold capital k', 'sans serif bold cap k', 'sans serif bold cap k']);
  this.executeCharTest('ùóü', ['sans serif bold capital l', 'sans serif bold cap l', 'sans serif bold cap l']);
  this.executeCharTest('ùó†', ['sans serif bold capital m', 'sans serif bold cap m', 'sans serif bold cap m']);
  this.executeCharTest('ùó°', ['sans serif bold capital n', 'sans serif bold cap n', 'sans serif bold cap n']);
  this.executeCharTest('ùó¢', ['sans serif bold capital o', 'sans serif bold cap o', 'sans serif bold cap o']);
  this.executeCharTest('ùó£', ['sans serif bold capital p', 'sans serif bold cap p', 'sans serif bold cap p']);
  this.executeCharTest('ùó§', ['sans serif bold capital q', 'sans serif bold cap q', 'sans serif bold cap q']);
  this.executeCharTest('ùó•', ['sans serif bold capital r', 'sans serif bold cap r', 'sans serif bold cap r']);
  this.executeCharTest('ùó¶', ['sans serif bold capital s', 'sans serif bold cap s', 'sans serif bold cap s']);
  this.executeCharTest('ùóß', ['sans serif bold capital t', 'sans serif bold cap t', 'sans serif bold cap t']);
  this.executeCharTest('ùó®', ['sans serif bold capital u', 'sans serif bold cap u', 'sans serif bold cap u']);
  this.executeCharTest('ùó©', ['sans serif bold capital v', 'sans serif bold cap v', 'sans serif bold cap v']);
  this.executeCharTest('ùó™', ['sans serif bold capital w', 'sans serif bold cap w', 'sans serif bold cap w']);
  this.executeCharTest('ùó´', ['sans serif bold capital x', 'sans serif bold cap x', 'sans serif bold cap x']);
  this.executeCharTest('ùó¨', ['sans serif bold capital y', 'sans serif bold cap y', 'sans serif bold cap y']);
  this.executeCharTest('ùó≠', ['sans serif bold capital z', 'sans serif bold cap z', 'sans serif bold cap z']);
  this.executeCharTest('ùóÆ', ['sans serif bold small a', 'sans serif bold a', 'sans serif bold a']);
  this.executeCharTest('ùóØ', ['sans serif bold small b', 'sans serif bold b', 'sans serif bold b']);
  this.executeCharTest('ùó∞', ['sans serif bold small c', 'sans serif bold c', 'sans serif bold c']);
  this.executeCharTest('ùó±', ['sans serif bold small d', 'sans serif bold d', 'sans serif bold d']);
  this.executeCharTest('ùó≤', ['sans serif bold small e', 'sans serif bold e', 'sans serif bold e']);
  this.executeCharTest('ùó≥', ['sans serif bold small f', 'sans serif bold f', 'sans serif bold f']);
  this.executeCharTest('ùó¥', ['sans serif bold small g', 'sans serif bold g', 'sans serif bold g']);
  this.executeCharTest('ùóµ', ['sans serif bold small h', 'sans serif bold h', 'sans serif bold h']);
  this.executeCharTest('ùó∂', ['sans serif bold small i', 'sans serif bold i', 'sans serif bold i']);
  this.executeCharTest('ùó∑', ['sans serif bold small j', 'sans serif bold j', 'sans serif bold j']);
  this.executeCharTest('ùó∏', ['sans serif bold small k', 'sans serif bold k', 'sans serif bold k']);
  this.executeCharTest('ùóπ', ['sans serif bold small l', 'sans serif bold l', 'sans serif bold l']);
  this.executeCharTest('ùó∫', ['sans serif bold small m', 'sans serif bold m', 'sans serif bold m']);
  this.executeCharTest('ùóª', ['sans serif bold small n', 'sans serif bold n', 'sans serif bold n']);
  this.executeCharTest('ùóº', ['sans serif bold small o', 'sans serif bold o', 'sans serif bold o']);
  this.executeCharTest('ùóΩ', ['sans serif bold small p', 'sans serif bold p', 'sans serif bold p']);
  this.executeCharTest('ùóæ', ['sans serif bold small q', 'sans serif bold q', 'sans serif bold q']);
  this.executeCharTest('ùóø', ['sans serif bold small r', 'sans serif bold r', 'sans serif bold r']);
  this.executeCharTest('ùòÄ', ['sans serif bold small s', 'sans serif bold s', 'sans serif bold s']);
  this.executeCharTest('ùòÅ', ['sans serif bold small t', 'sans serif bold t', 'sans serif bold t']);
  this.executeCharTest('ùòÇ', ['sans serif bold small u', 'sans serif bold u', 'sans serif bold u']);
  this.executeCharTest('ùòÉ', ['sans serif bold small v', 'sans serif bold v', 'sans serif bold v']);
  this.executeCharTest('ùòÑ', ['sans serif bold small w', 'sans serif bold w', 'sans serif bold w']);
  this.executeCharTest('ùòÖ', ['sans serif bold small x', 'sans serif bold x', 'sans serif bold x']);
  this.executeCharTest('ùòÜ', ['sans serif bold small y', 'sans serif bold y', 'sans serif bold y']);
  this.executeCharTest('ùòá', ['sans serif bold small z', 'sans serif bold z', 'sans serif bold z']);
  this.executeCharTest('ùòà', ['sans serif italic capital a', 'sans serif italic cap a', 'sans serif italic cap a']);
  this.executeCharTest('ùòâ', ['sans serif italic capital b', 'sans serif italic cap b', 'sans serif italic cap b']);
  this.executeCharTest('ùòä', ['sans serif italic capital c', 'sans serif italic cap c', 'sans serif italic cap c']);
  this.executeCharTest('ùòã', ['sans serif italic capital d', 'sans serif italic cap d', 'sans serif italic cap d']);
  this.executeCharTest('ùòå', ['sans serif italic capital e', 'sans serif italic cap e', 'sans serif italic cap e']);
  this.executeCharTest('ùòç', ['sans serif italic capital f', 'sans serif italic cap f', 'sans serif italic cap f']);
  this.executeCharTest('ùòé', ['sans serif italic capital g', 'sans serif italic cap g', 'sans serif italic cap g']);
  this.executeCharTest('ùòè', ['sans serif italic capital h', 'sans serif italic cap h', 'sans serif italic cap h']);
  this.executeCharTest('ùòê', ['sans serif italic capital i', 'sans serif italic cap i', 'sans serif italic cap i']);
  this.executeCharTest('ùòë', ['sans serif italic capital j', 'sans serif italic cap j', 'sans serif italic cap j']);
  this.executeCharTest('ùòí', ['sans serif italic capital k', 'sans serif italic cap k', 'sans serif italic cap k']);
  this.executeCharTest('ùòì', ['sans serif italic capital l', 'sans serif italic cap l', 'sans serif italic cap l']);
  this.executeCharTest('ùòî', ['sans serif italic capital m', 'sans serif italic cap m', 'sans serif italic cap m']);
  this.executeCharTest('ùòï', ['sans serif italic capital n', 'sans serif italic cap n', 'sans serif italic cap n']);
  this.executeCharTest('ùòñ', ['sans serif italic capital o', 'sans serif italic cap o', 'sans serif italic cap o']);
  this.executeCharTest('ùòó', ['sans serif italic capital p', 'sans serif italic cap p', 'sans serif italic cap p']);
  this.executeCharTest('ùòò', ['sans serif italic capital q', 'sans serif italic cap q', 'sans serif italic cap q']);
  this.executeCharTest('ùòô', ['sans serif italic capital r', 'sans serif italic cap r', 'sans serif italic cap r']);
  this.executeCharTest('ùòö', ['sans serif italic capital s', 'sans serif italic cap s', 'sans serif italic cap s']);
  this.executeCharTest('ùòõ', ['sans serif italic capital t', 'sans serif italic cap t', 'sans serif italic cap t']);
  this.executeCharTest('ùòú', ['sans serif italic capital u', 'sans serif italic cap u', 'sans serif italic cap u']);
  this.executeCharTest('ùòù', ['sans serif italic capital v', 'sans serif italic cap v', 'sans serif italic cap v']);
  this.executeCharTest('ùòû', ['sans serif italic capital w', 'sans serif italic cap w', 'sans serif italic cap w']);
  this.executeCharTest('ùòü', ['sans serif italic capital x', 'sans serif italic cap x', 'sans serif italic cap x']);
  this.executeCharTest('ùò†', ['sans serif italic capital y', 'sans serif italic cap y', 'sans serif italic cap y']);
  this.executeCharTest('ùò°', ['sans serif italic capital z', 'sans serif italic cap z', 'sans serif italic cap z']);
  this.executeCharTest('ùò¢', ['sans serif italic small a', 'sans serif italic a', 'sans serif italic a']);
  this.executeCharTest('ùò£', ['sans serif italic small b', 'sans serif italic b', 'sans serif italic b']);
  this.executeCharTest('ùò§', ['sans serif italic small c', 'sans serif italic c', 'sans serif italic c']);
  this.executeCharTest('ùò•', ['sans serif italic small d', 'sans serif italic d', 'sans serif italic d']);
  this.executeCharTest('ùò¶', ['sans serif italic small e', 'sans serif italic e', 'sans serif italic e']);
  this.executeCharTest('ùòß', ['sans serif italic small f', 'sans serif italic f', 'sans serif italic f']);
  this.executeCharTest('ùò®', ['sans serif italic small g', 'sans serif italic g', 'sans serif italic g']);
  this.executeCharTest('ùò©', ['sans serif italic small h', 'sans serif italic h', 'sans serif italic h']);
  this.executeCharTest('ùò™', ['sans serif italic small i', 'sans serif italic i', 'sans serif italic i']);
  this.executeCharTest('ùò´', ['sans serif italic small j', 'sans serif italic j', 'sans serif italic j']);
  this.executeCharTest('ùò¨', ['sans serif italic small k', 'sans serif italic k', 'sans serif italic k']);
  this.executeCharTest('ùò≠', ['sans serif italic small l', 'sans serif italic l', 'sans serif italic l']);
  this.executeCharTest('ùòÆ', ['sans serif italic small m', 'sans serif italic m', 'sans serif italic m']);
  this.executeCharTest('ùòØ', ['sans serif italic small n', 'sans serif italic n', 'sans serif italic n']);
  this.executeCharTest('ùò∞', ['sans serif italic small o', 'sans serif italic o', 'sans serif italic o']);
  this.executeCharTest('ùò±', ['sans serif italic small p', 'sans serif italic p', 'sans serif italic p']);
  this.executeCharTest('ùò≤', ['sans serif italic small q', 'sans serif italic q', 'sans serif italic q']);
  this.executeCharTest('ùò≥', ['sans serif italic small r', 'sans serif italic r', 'sans serif italic r']);
  this.executeCharTest('ùò¥', ['sans serif italic small s', 'sans serif italic s', 'sans serif italic s']);
  this.executeCharTest('ùòµ', ['sans serif italic small t', 'sans serif italic t', 'sans serif italic t']);
  this.executeCharTest('ùò∂', ['sans serif italic small u', 'sans serif italic u', 'sans serif italic u']);
  this.executeCharTest('ùò∑', ['sans serif italic small v', 'sans serif italic v', 'sans serif italic v']);
  this.executeCharTest('ùò∏', ['sans serif italic small w', 'sans serif italic w', 'sans serif italic w']);
  this.executeCharTest('ùòπ', ['sans serif italic small x', 'sans serif italic x', 'sans serif italic x']);
  this.executeCharTest('ùò∫', ['sans serif italic small y', 'sans serif italic y', 'sans serif italic y']);
  this.executeCharTest('ùòª', ['sans serif italic small z', 'sans serif italic z', 'sans serif italic z']);
  this.executeCharTest('ùòº', ['sans serif bold italic capital a', 'sans serif bold italic cap a', 'sans serif bold italic cap a']);
  this.executeCharTest('ùòΩ', ['sans serif bold italic capital b', 'sans serif bold italic cap b', 'sans serif bold italic cap b']);
  this.executeCharTest('ùòæ', ['sans serif bold italic capital c', 'sans serif bold italic cap c', 'sans serif bold italic cap c']);
  this.executeCharTest('ùòø', ['sans serif bold italic capital d', 'sans serif bold italic cap d', 'sans serif bold italic cap d']);
  this.executeCharTest('ùôÄ', ['sans serif bold italic capital e', 'sans serif bold italic cap e', 'sans serif bold italic cap e']);
  this.executeCharTest('ùôÅ', ['sans serif bold italic capital f', 'sans serif bold italic cap f', 'sans serif bold italic cap f']);
  this.executeCharTest('ùôÇ', ['sans serif bold italic capital g', 'sans serif bold italic cap g', 'sans serif bold italic cap g']);
  this.executeCharTest('ùôÉ', ['sans serif bold italic capital h', 'sans serif bold italic cap h', 'sans serif bold italic cap h']);
  this.executeCharTest('ùôÑ', ['sans serif bold italic capital i', 'sans serif bold italic cap i', 'sans serif bold italic cap i']);
  this.executeCharTest('ùôÖ', ['sans serif bold italic capital j', 'sans serif bold italic cap j', 'sans serif bold italic cap j']);
  this.executeCharTest('ùôÜ', ['sans serif bold italic capital k', 'sans serif bold italic cap k', 'sans serif bold italic cap k']);
  this.executeCharTest('ùôá', ['sans serif bold italic capital l', 'sans serif bold italic cap l', 'sans serif bold italic cap l']);
  this.executeCharTest('ùôà', ['sans serif bold italic capital m', 'sans serif bold italic cap m', 'sans serif bold italic cap m']);
  this.executeCharTest('ùôâ', ['sans serif bold italic capital n', 'sans serif bold italic cap n', 'sans serif bold italic cap n']);
  this.executeCharTest('ùôä', ['sans serif bold italic capital o', 'sans serif bold italic cap o', 'sans serif bold italic cap o']);
  this.executeCharTest('ùôã', ['sans serif bold italic capital p', 'sans serif bold italic cap p', 'sans serif bold italic cap p']);
  this.executeCharTest('ùôå', ['sans serif bold italic capital q', 'sans serif bold italic cap q', 'sans serif bold italic cap q']);
  this.executeCharTest('ùôç', ['sans serif bold italic capital r', 'sans serif bold italic cap r', 'sans serif bold italic cap r']);
  this.executeCharTest('ùôé', ['sans serif bold italic capital s', 'sans serif bold italic cap s', 'sans serif bold italic cap s']);
  this.executeCharTest('ùôè', ['sans serif bold italic capital t', 'sans serif bold italic cap t', 'sans serif bold italic cap t']);
  this.executeCharTest('ùôê', ['sans serif bold italic capital u', 'sans serif bold italic cap u', 'sans serif bold italic cap u']);
  this.executeCharTest('ùôë', ['sans serif bold italic capital v', 'sans serif bold italic cap v', 'sans serif bold italic cap v']);
  this.executeCharTest('ùôí', ['sans serif bold italic capital w', 'sans serif bold italic cap w', 'sans serif bold italic cap w']);
  this.executeCharTest('ùôì', ['sans serif bold italic capital x', 'sans serif bold italic cap x', 'sans serif bold italic cap x']);
  this.executeCharTest('ùôî', ['sans serif bold italic capital y', 'sans serif bold italic cap y', 'sans serif bold italic cap y']);
  this.executeCharTest('ùôï', ['sans serif bold italic capital z', 'sans serif bold italic cap z', 'sans serif bold italic cap z']);
  this.executeCharTest('ùôñ', ['sans serif bold italic small a', 'sans serif bold italic a', 'sans serif bold italic a']);
  this.executeCharTest('ùôó', ['sans serif bold italic small b', 'sans serif bold italic b', 'sans serif bold italic b']);
  this.executeCharTest('ùôò', ['sans serif bold italic small c', 'sans serif bold italic c', 'sans serif bold italic c']);
  this.executeCharTest('ùôô', ['sans serif bold italic small d', 'sans serif bold italic d', 'sans serif bold italic d']);
  this.executeCharTest('ùôö', ['sans serif bold italic small e', 'sans serif bold italic e', 'sans serif bold italic e']);
  this.executeCharTest('ùôõ', ['sans serif bold italic small f', 'sans serif bold italic f', 'sans serif bold italic f']);
  this.executeCharTest('ùôú', ['sans serif bold italic small g', 'sans serif bold italic g', 'sans serif bold italic g']);
  this.executeCharTest('ùôù', ['sans serif bold italic small h', 'sans serif bold italic h', 'sans serif bold italic h']);
  this.executeCharTest('ùôû', ['sans serif bold italic small i', 'sans serif bold italic i', 'sans serif bold italic i']);
  this.executeCharTest('ùôü', ['sans serif bold italic small j', 'sans serif bold italic j', 'sans serif bold italic j']);
  this.executeCharTest('ùô†', ['sans serif bold italic small k', 'sans serif bold italic k', 'sans serif bold italic k']);
  this.executeCharTest('ùô°', ['sans serif bold italic small l', 'sans serif bold italic l', 'sans serif bold italic l']);
  this.executeCharTest('ùô¢', ['sans serif bold italic small m', 'sans serif bold italic m', 'sans serif bold italic m']);
  this.executeCharTest('ùô£', ['sans serif bold italic small n', 'sans serif bold italic n', 'sans serif bold italic n']);
  this.executeCharTest('ùô§', ['sans serif bold italic small o', 'sans serif bold italic o', 'sans serif bold italic o']);
  this.executeCharTest('ùô•', ['sans serif bold italic small p', 'sans serif bold italic p', 'sans serif bold italic p']);
  this.executeCharTest('ùô¶', ['sans serif bold italic small q', 'sans serif bold italic q', 'sans serif bold italic q']);
  this.executeCharTest('ùôß', ['sans serif bold italic small r', 'sans serif bold italic r', 'sans serif bold italic r']);
  this.executeCharTest('ùô®', ['sans serif bold italic small s', 'sans serif bold italic s', 'sans serif bold italic s']);
  this.executeCharTest('ùô©', ['sans serif bold italic small t', 'sans serif bold italic t', 'sans serif bold italic t']);
  this.executeCharTest('ùô™', ['sans serif bold italic small u', 'sans serif bold italic u', 'sans serif bold italic u']);
  this.executeCharTest('ùô´', ['sans serif bold italic small v', 'sans serif bold italic v', 'sans serif bold italic v']);
  this.executeCharTest('ùô¨', ['sans serif bold italic small w', 'sans serif bold italic w', 'sans serif bold italic w']);
  this.executeCharTest('ùô≠', ['sans serif bold italic small x', 'sans serif bold italic x', 'sans serif bold italic x']);
  this.executeCharTest('ùôÆ', ['sans serif bold italic small y', 'sans serif bold italic y', 'sans serif bold italic y']);
  this.executeCharTest('ùôØ', ['sans serif bold italic small z', 'sans serif bold italic z', 'sans serif bold italic z']);
  this.executeCharTest('ùñ†', ['sans serif capital a', 'sans serif cap a', 'sans serif cap a']);
  this.executeCharTest('ùñ°', ['sans serif capital b', 'sans serif cap b', 'sans serif cap b']);
  this.executeCharTest('ùñ¢', ['sans serif capital c', 'sans serif cap c', 'sans serif cap c']);
  this.executeCharTest('ùñ£', ['sans serif capital d', 'sans serif cap d', 'sans serif cap d']);
  this.executeCharTest('ùñ§', ['sans serif capital e', 'sans serif cap e', 'sans serif cap e']);
  this.executeCharTest('ùñ•', ['sans serif capital f', 'sans serif cap f', 'sans serif cap f']);
  this.executeCharTest('ùñ¶', ['sans serif capital g', 'sans serif cap g', 'sans serif cap g']);
  this.executeCharTest('ùñß', ['sans serif capital h', 'sans serif cap h', 'sans serif cap h']);
  this.executeCharTest('ùñ®', ['sans serif capital i', 'sans serif cap i', 'sans serif cap i']);
  this.executeCharTest('ùñ©', ['sans serif capital j', 'sans serif cap j', 'sans serif cap j']);
  this.executeCharTest('ùñ™', ['sans serif capital k', 'sans serif cap k', 'sans serif cap k']);
  this.executeCharTest('ùñ´', ['sans serif capital l', 'sans serif cap l', 'sans serif cap l']);
  this.executeCharTest('ùñ¨', ['sans serif capital m', 'sans serif cap m', 'sans serif cap m']);
  this.executeCharTest('ùñ≠', ['sans serif capital n', 'sans serif cap n', 'sans serif cap n']);
  this.executeCharTest('ùñÆ', ['sans serif capital o', 'sans serif cap o', 'sans serif cap o']);
  this.executeCharTest('ùñØ', ['sans serif capital p', 'sans serif cap p', 'sans serif cap p']);
  this.executeCharTest('ùñ∞', ['sans serif capital q', 'sans serif cap q', 'sans serif cap q']);
  this.executeCharTest('ùñ±', ['sans serif capital r', 'sans serif cap r', 'sans serif cap r']);
  this.executeCharTest('ùñ≤', ['sans serif capital s', 'sans serif cap s', 'sans serif cap s']);
  this.executeCharTest('ùñ≥', ['sans serif capital t', 'sans serif cap t', 'sans serif cap t']);
  this.executeCharTest('ùñ¥', ['sans serif capital u', 'sans serif cap u', 'sans serif cap u']);
  this.executeCharTest('ùñµ', ['sans serif capital v', 'sans serif cap v', 'sans serif cap v']);
  this.executeCharTest('ùñ∂', ['sans serif capital w', 'sans serif cap w', 'sans serif cap w']);
  this.executeCharTest('ùñ∑', ['sans serif capital x', 'sans serif cap x', 'sans serif cap x']);
  this.executeCharTest('ùñ∏', ['sans serif capital y', 'sans serif cap y', 'sans serif cap y']);
  this.executeCharTest('ùñπ', ['sans serif capital z', 'sans serif cap z', 'sans serif cap z']);
  this.executeCharTest('ùñ∫', ['sans serif small a', 'sans serif a', 'sans serif a']);
  this.executeCharTest('ùñª', ['sans serif small b', 'sans serif b', 'sans serif b']);
  this.executeCharTest('ùñº', ['sans serif small c', 'sans serif c', 'sans serif c']);
  this.executeCharTest('ùñΩ', ['sans serif small d', 'sans serif d', 'sans serif d']);
  this.executeCharTest('ùñæ', ['sans serif small e', 'sans serif e', 'sans serif e']);
  this.executeCharTest('ùñø', ['sans serif small f', 'sans serif f', 'sans serif f']);
  this.executeCharTest('ùóÄ', ['sans serif small g', 'sans serif g', 'sans serif g']);
  this.executeCharTest('ùóÅ', ['sans serif small h', 'sans serif h', 'sans serif h']);
  this.executeCharTest('ùóÇ', ['sans serif small i', 'sans serif i', 'sans serif i']);
  this.executeCharTest('ùóÉ', ['sans serif small j', 'sans serif j', 'sans serif j']);
  this.executeCharTest('ùóÑ', ['sans serif small k', 'sans serif k', 'sans serif k']);
  this.executeCharTest('ùóÖ', ['sans serif small l', 'sans serif l', 'sans serif l']);
  this.executeCharTest('ùóÜ', ['sans serif small m', 'sans serif m', 'sans serif m']);
  this.executeCharTest('ùóá', ['sans serif small n', 'sans serif n', 'sans serif n']);
  this.executeCharTest('ùóà', ['sans serif small o', 'sans serif o', 'sans serif o']);
  this.executeCharTest('ùóâ', ['sans serif small p', 'sans serif p', 'sans serif p']);
  this.executeCharTest('ùóä', ['sans serif small q', 'sans serif q', 'sans serif q']);
  this.executeCharTest('ùóã', ['sans serif small r', 'sans serif r', 'sans serif r']);
  this.executeCharTest('ùóå', ['sans serif small s', 'sans serif s', 'sans serif s']);
  this.executeCharTest('ùóç', ['sans serif small t', 'sans serif t', 'sans serif t']);
  this.executeCharTest('ùóé', ['sans serif small u', 'sans serif u', 'sans serif u']);
  this.executeCharTest('ùóè', ['sans serif small v', 'sans serif v', 'sans serif v']);
  this.executeCharTest('ùóê', ['sans serif small w', 'sans serif w', 'sans serif w']);
  this.executeCharTest('ùóë', ['sans serif small x', 'sans serif x', 'sans serif x']);
  this.executeCharTest('ùóí', ['sans serif small y', 'sans serif y', 'sans serif y']);
  this.executeCharTest('ùóì', ['sans serif small z', 'sans serif z', 'sans serif z']);
  this.executeCharTest('ùíú', ['script capital a', 'script cap a', 'script cap a']);
  this.executeCharTest('‚Ñ¨', ['script capital b', 'script cap b', 'script cap b']);
  this.executeCharTest('ùíû', ['script capital c', 'script cap c', 'script cap c']);
  this.executeCharTest('ùíü', ['script capital d', 'script cap d', 'script cap d']);
  this.executeCharTest('‚Ñ∞', ['script capital e', 'script cap e', 'script cap e']);
  this.executeCharTest('‚Ñ±', ['script capital f', 'script cap f', 'script cap f']);
  this.executeCharTest('ùí¢', ['script capital g', 'script cap g', 'script cap g']);
  this.executeCharTest('‚Ñã', ['script capital h', 'script cap h', 'script cap h']);
  this.executeCharTest('‚Ñê', ['script capital i', 'script cap i', 'script cap i']);
  this.executeCharTest('ùí•', ['script capital j', 'script cap j', 'script cap j']);
  this.executeCharTest('ùí¶', ['script capital k', 'script cap k', 'script cap k']);
  this.executeCharTest('‚Ñí', ['script capital l', 'script cap l', 'script cap l']);
  this.executeCharTest('‚Ñ≥', ['script capital m', 'script cap m', 'script cap m']);
  this.executeCharTest('ùí©', ['script capital n', 'script cap n', 'script cap n']);
  this.executeCharTest('ùí™', ['script capital o', 'script cap o', 'script cap o']);
  this.executeCharTest('ùí´', ['script capital p', 'script cap p', 'script cap p']);
  this.executeCharTest('ùí¨', ['script capital q', 'script cap q', 'script cap q']);
  this.executeCharTest('‚Ñõ', ['script capital r', 'script cap r', 'script cap r']);
  this.executeCharTest('ùíÆ', ['script capital s', 'script cap s', 'script cap s']);
  this.executeCharTest('ùíØ', ['script capital t', 'script cap t', 'script cap t']);
  this.executeCharTest('ùí∞', ['script capital u', 'script cap u', 'script cap u']);
  this.executeCharTest('ùí±', ['script capital v', 'script cap v', 'script cap v']);
  this.executeCharTest('ùí≤', ['script capital w', 'script cap w', 'script cap w']);
  this.executeCharTest('ùí≥', ['script capital x', 'script cap x', 'script cap x']);
  this.executeCharTest('ùí¥', ['script capital y', 'script cap y', 'script cap y']);
  this.executeCharTest('ùíµ', ['script capital z', 'script cap z', 'script cap z']);
  this.executeCharTest('ùí∂', ['script small a', 'script a', 'script a']);
  this.executeCharTest('ùí∑', ['script small b', 'script b', 'script b']);
  this.executeCharTest('ùí∏', ['script small c', 'script c', 'script c']);
  this.executeCharTest('ùíπ', ['script small d', 'script d', 'script d']);
  this.executeCharTest('‚ÑØ', ['script small e', 'script e', 'script e']);
  this.executeCharTest('ùíª', ['script small f', 'script f', 'script f']);
  this.executeCharTest('‚Ñä', ['script small g', 'script g', 'script g']);
  this.executeCharTest('ùíΩ', ['script small h', 'script h', 'script h']);
  this.executeCharTest('ùíæ', ['script small i', 'script i', 'script i']);
  this.executeCharTest('ùíø', ['script small j', 'script j', 'script j']);
  this.executeCharTest('ùìÄ', ['script small k', 'script k', 'script k']);
  this.executeCharTest('ùìÅ', ['script small l', 'script l', 'script l']);
  this.executeCharTest('ùìÇ', ['script small m', 'script m', 'script m']);
  this.executeCharTest('ùìÉ', ['script small n', 'script n', 'script n']);
  this.executeCharTest('‚Ñ¥', ['script small o', 'script o', 'script o']);
  this.executeCharTest('ùìÖ', ['script small p', 'script p', 'script p']);
  this.executeCharTest('ùìÜ', ['script small q', 'script q', 'script q']);
  this.executeCharTest('ùìá', ['script small r', 'script r', 'script r']);
  this.executeCharTest('ùìà', ['script small s', 'script s', 'script s']);
  this.executeCharTest('ùìâ', ['script small t', 'script t', 'script t']);
  this.executeCharTest('ùìä', ['script small u', 'script u', 'script u']);
  this.executeCharTest('ùìã', ['script small v', 'script v', 'script v']);
  this.executeCharTest('ùìå', ['script small w', 'script w', 'script w']);
  this.executeCharTest('ùìç', ['script small x', 'script x', 'script x']);
  this.executeCharTest('ùìé', ['script small y', 'script y', 'script y']);
  this.executeCharTest('ùìè', ['script small z', 'script z', 'script z']);
  this.executeCharTest('‚äæ', ['right angle with arc', 'right angle with arc', 'right angle with arc']);
  this.executeCharTest('‚çº', ['right angle with downwards zigzag arrow', 'right angle with downwards zigzag arrow', 'right angle with downwards zigzag arrow']);
  this.executeCharTest('‚üÄ', ['three dimensional angle', 'three dimensional angle', 'three dimensional angle']);
  this.executeCharTest('‚¶õ', ['measured angle opening left', 'measured angle opening left', 'measured angle opening left']);
  this.executeCharTest('‚¶ú', ['right angle variant with square', 'right angle variant with square', 'right angle variant with square']);
  this.executeCharTest('‚¶ù', ['measured right angle with dot', 'measured right angle with dot', 'measured right angle with dot']);
  this.executeCharTest('‚¶û', ['angle with s inside', 'angle with s inside', 'angle with s inside']);
  this.executeCharTest('‚¶ü', ['acute angle', 'acute angle', 'acute angle']);
  this.executeCharTest('‚¶†', ['spherical angle opening left', 'spherical angle opening left', 'spherical angle opening left']);
  this.executeCharTest('‚¶°', ['spherical angle opening up', 'spherical angle opening up', 'spherical angle opening up']);
  this.executeCharTest('‚¶¢', ['turned angle', 'turned angle', 'turned angle']);
  this.executeCharTest('‚¶£', ['reversed angle', 'reversed angle', 'reversed angle']);
  this.executeCharTest('‚¶§', ['angle with underbar', 'angle with underbar', 'angle with underbar']);
  this.executeCharTest('‚¶•', ['reversed angle with underbar', 'reversed angle with underbar', 'reversed angle with underbar']);
  this.executeCharTest('‚¶¶', ['oblique angle opening up', 'oblique angle opening up', 'oblique angle opening up']);
  this.executeCharTest('‚¶ß', ['oblique angle opening down', 'oblique angle opening down', 'oblique angle opening down']);
  this.executeCharTest('‚¶®', ['measured angle with open arm ending in arrow pointing up and right', 'measured angle with open arm ending in arrow pointing up and right', 'measured angle with open arm ending in arrow pointing up and right']);
  this.executeCharTest('‚¶©', ['measured angle with open arm ending in arrow pointing up and left', 'measured angle with open arm ending in arrow pointing up and left', 'measured angle with open arm ending in arrow pointing up and left']);
  this.executeCharTest('‚¶™', ['measured angle with open arm ending in arrow pointing down and right', 'measured angle with open arm ending in arrow pointing down and right', 'measured angle with open arm ending in arrow pointing down and right']);
  this.executeCharTest('‚¶´', ['measured angle with open arm ending in arrow pointing down and left', 'measured angle with open arm ending in arrow pointing down and left', 'measured angle with open arm ending in arrow pointing down and left']);
  this.executeCharTest('‚¶¨', ['measured angle with open arm ending in arrow pointing right and up', 'measured angle with open arm ending in arrow pointing right and up', 'measured angle with open arm ending in arrow pointing right and up']);
  this.executeCharTest('‚¶≠', ['measured angle with open arm ending in arrow pointing left and up', 'measured angle with open arm ending in arrow pointing left and up', 'measured angle with open arm ending in arrow pointing left and up']);
  this.executeCharTest('‚¶Æ', ['measured angle with open arm ending in arrow pointing right and down', 'measured angle with open arm ending in arrow pointing right and down', 'measured angle with open arm ending in arrow pointing right and down']);
  this.executeCharTest('‚¶Ø', ['measured angle with open arm ending in arrow pointing left and down', 'measured angle with open arm ending in arrow pointing left and down', 'measured angle with open arm ending in arrow pointing left and down']);
  this.executeCharTest('‚Üê', ['leftwards arrow', 'left arrow', 'left arrow']);
  this.executeCharTest('‚Üë', ['upwards arrow', 'up arrow', 'up arrow']);
  this.executeCharTest('‚Üí', ['rightwards arrow', 'right arrow', 'right arrow']);
  this.executeCharTest('‚Üì', ['downwards arrow', 'down arrow', 'down arrow']);
  this.executeCharTest('‚Üî', ['left right arrow', 'left right arrow', 'left right arrow']);
  this.executeCharTest('‚Üï', ['up down arrow', 'up down arrow', 'up down arrow']);
  this.executeCharTest('‚Üñ', ['north west arrow', 'up left arrow', 'up left arrow']);
  this.executeCharTest('‚Üó', ['north east arrow', 'up right arrow', 'up right arrow']);
  this.executeCharTest('‚Üò', ['south east arrow', 'down right arrow', 'down right arrow']);
  this.executeCharTest('‚Üô', ['south west arrow', 'down left arrow', 'down left arrow']);
  this.executeCharTest('‚Üö', ['leftwards arrow with stroke', 'left arrow with stroke', 'left arrow with stroke']);
  this.executeCharTest('‚Üõ', ['rightwards arrow with stroke', 'right arrow with stroke', 'right arrow with stroke']);
  this.executeCharTest('‚Üú', ['leftwards wave arrow', 'left wave arrow', 'left wave arrow']);
  this.executeCharTest('‚Üù', ['rightwards wave arrow', 'right wave arrow', 'right wave arrow']);
  this.executeCharTest('‚Üû', ['leftwards two headed arrow', 'two headed left arrow', 'left two headed arrow']);
  this.executeCharTest('‚Üü', ['upwards two headed arrow', 'two headed up arrow', 'up two headed arrow']);
  this.executeCharTest('‚Ü†', ['rightwards two headed arrow', 'two headed right arrow', 'right two headed arrow']);
  this.executeCharTest('‚Ü°', ['downwards two headed arrow', 'two headed down arrow', 'down two headed arrow']);
  this.executeCharTest('‚Ü¢', ['leftwards arrow with tail', 'left arrow with tail', 'left arrow with tail']);
  this.executeCharTest('‚Ü£', ['rightwards arrow with tail', 'right arrow with tail', 'right arrow with tail']);
  this.executeCharTest('‚Ü§', ['leftwards arrow from bar', 'left arrow from bar', 'left arrow from bar']);
  this.executeCharTest('‚Ü•', ['upwards arrow from bar', 'up arrow from bar', 'up arrow from bar']);
  this.executeCharTest('‚Ü¶', ['rightwards arrow from bar', 'right arrow from bar', 'right arrow from bar']);
  this.executeCharTest('‚Üß', ['downwards arrow from bar', 'down arrow from bar', 'down arrow from bar']);
  this.executeCharTest('‚Ü®', ['up down arrow with base', 'up down arrow with base', 'up down arrow with base']);
  this.executeCharTest('‚Ü©', ['leftwards arrow with hook', 'left arrow with hook', 'left arrow with hook']);
  this.executeCharTest('‚Ü™', ['rightwards arrow with hook', 'right arrow with hook', 'right arrow with hook']);
  this.executeCharTest('‚Ü´', ['leftwards arrow with loop', 'left arrow with loop', 'left arrow with loop']);
  this.executeCharTest('‚Ü¨', ['rightwards arrow with loop', 'right arrow with loop', 'right arrow with loop']);
  this.executeCharTest('‚Ü≠', ['left right wave arrow', 'left right wave arrow', 'left right wave arrow']);
  this.executeCharTest('‚ÜÆ', ['left right arrow with stroke', 'left right arrow with stroke', 'left right arrow with stroke']);
  this.executeCharTest('‚ÜØ', ['downwards zigzag arrow', 'down zigzag arrow', 'down zigzag arrow']);
  this.executeCharTest('‚Ü∞', ['upwards arrow with tip leftwards', 'up arrow with tip left', 'up arrow with tip left']);
  this.executeCharTest('‚Ü±', ['upwards arrow with tip rightwards', 'up arrow with tip right', 'up arrow with tip right']);
  this.executeCharTest('‚Ü≤', ['downwards arrow with tip leftwards', 'down arrow with tip left', 'down arrow with tip left']);
  this.executeCharTest('‚Ü≥', ['downwards arrow with tip rightwards', 'down arrow with tip right', 'down arrow with tip right']);
  this.executeCharTest('‚Ü¥', ['rightwards arrow with corner downwards', 'right arrow with corner down', 'right arrow with corner down']);
  this.executeCharTest('‚Üµ', ['downwards arrow with corner leftwards', 'down arrow with corner left', 'down arrow with corner left']);
  this.executeCharTest('‚Ü∂', ['anticlockwise top semicircle arrow', 'anticlockwise top semicircle arrow', 'anticlockwise top semicircle arrow']);
  this.executeCharTest('‚Ü∑', ['clockwise top semicircle arrow', 'clockwise top semicircle arrow', 'clockwise top semicircle arrow']);
  this.executeCharTest('‚Ü∏', ['north west arrow to long bar', 'up left arrow to long bar', 'up left arrow to long bar']);
  this.executeCharTest('‚Üπ', ['leftwards arrow to bar over rightwards arrow to bar', 'left arrow to bar over right arrow to bar', 'left arrow to bar over right arrow to bar']);
  this.executeCharTest('‚Ü∫', ['anticlockwise open circle arrow', 'anticlockwise open circle arrow', 'anticlockwise open circle arrow']);
  this.executeCharTest('‚Üª', ['clockwise open circle arrow', 'clockwise open circle arrow', 'clockwise open circle arrow']);
  this.executeCharTest('‚áÑ', ['rightwards arrow over leftwards arrow', 'right arrow over left arrow', 'right arrow over left arrow']);
  this.executeCharTest('‚áÖ', ['upwards arrow leftwards of downwards arrow', 'up arrow left of down arrow', 'up arrow left of down arrow']);
  this.executeCharTest('‚áÜ', ['leftwards arrow over rightwards arrow', 'left arrow over right arrow', 'left arrow over right arrow']);
  this.executeCharTest('‚áá', ['leftwards paired arrows', 'left paired arrows', 'left paired arrows']);
  this.executeCharTest('‚áà', ['upwards paired arrows', 'up paired arrows', 'up paired arrows']);
  this.executeCharTest('‚áâ', ['rightwards paired arrows', 'right paired arrows', 'right paired arrows']);
  this.executeCharTest('‚áä', ['downwards paired arrows', 'down paired arrows', 'down paired arrows']);
  this.executeCharTest('‚áç', ['leftwards double arrow with stroke', 'left double arrow with stroke', 'left double arrow with stroke']);
  this.executeCharTest('‚áé', ['left right double arrow with stroke', 'left right double arrow with stroke', 'left right double arrow with stroke']);
  this.executeCharTest('‚áè', ['rightwards double arrow with stroke', 'right double arrow with stroke', 'right double arrow with stroke']);
  this.executeCharTest('‚áê', ['leftwards double arrow', 'left double arrow', 'left double arrow']);
  this.executeCharTest('‚áë', ['upwards double arrow', 'up double arrow', 'up double arrow']);
  this.executeCharTest('‚áí', ['rightwards double arrow', 'right double arrow', 'right double arrow']);
  this.executeCharTest('‚áì', ['downwards double arrow', 'down double arrow', 'down double arrow']);
  this.executeCharTest('‚áî', ['left right double arrow', 'left right double arrow', 'left right double arrow']);
  this.executeCharTest('‚áï', ['up down double arrow', 'up down double arrow', 'up down double arrow']);
  this.executeCharTest('‚áñ', ['north west double arrow', 'up left double arrow', 'up left double arrow']);
  this.executeCharTest('‚áó', ['north east double arrow', 'up right double arrow', 'up right double arrow']);
  this.executeCharTest('‚áò', ['south east double arrow', 'down right double arrow', 'down right double arrow']);
  this.executeCharTest('‚áô', ['south west double arrow', 'down left double arrow', 'down left double arrow']);
  this.executeCharTest('‚áö', ['leftwards triple arrow', 'left triple arrow', 'left triple arrow']);
  this.executeCharTest('‚áõ', ['rightwards triple arrow', 'right triple arrow', 'right triple arrow']);
  this.executeCharTest('‚áú', ['leftwards squiggle arrow', 'left squiggle arrow', 'left squiggle arrow']);
  this.executeCharTest('‚áù', ['rightwards squiggle arrow', 'right squiggle arrow', 'right squiggle arrow']);
  this.executeCharTest('‚áû', ['upwards arrow with double stroke', 'up arrow with double stroke', 'up arrow with double stroke']);
  this.executeCharTest('‚áü', ['downwards arrow with double stroke', 'down arrow with double stroke', 'down arrow with double stroke']);
  this.executeCharTest('‚á†', ['leftwards dasheD arrow', 'left dasheD arrow', 'left dasheD arrow']);
  this.executeCharTest('‚á°', ['upwards dasheD arrow', 'up dasheD arrow', 'up dasheD arrow']);
  this.executeCharTest('‚á¢', ['rightwards dasheD arrow', 'right dasheD arrow', 'right dasheD arrow']);
  this.executeCharTest('‚á£', ['downwards dasheD arrow', 'down dasheD arrow', 'down dasheD arrow']);
  this.executeCharTest('‚á§', ['leftwards arrow to bar', 'left arrow to bar', 'left arrow to bar']);
  this.executeCharTest('‚á•', ['rightwards arrow to bar', 'right arrow to bar', 'right arrow to bar']);
  this.executeCharTest('‚á¶', ['leftwards white arrow', 'white left arrow', 'white left arrow']);
  this.executeCharTest('‚áß', ['upwards white arrow', 'white up arrow', 'white up arrow']);
  this.executeCharTest('‚á®', ['rightwards white arrow', 'white right arrow', 'white right arrow']);
  this.executeCharTest('‚á©', ['downwards white arrow', 'white down arrow', 'white down arrow']);
  this.executeCharTest('‚á™', ['upwards white arrow from bar', 'white up arrow from bar', 'white up arrow from bar']);
  this.executeCharTest('‚á´', ['upwards white arrow on pedestal', 'white up arrow on pedestal', 'up white arrow on pedestal']);
  this.executeCharTest('‚á¨', ['upwards white arrow on pedestal with horizontal bar', 'white up arrow on pedestal with horizontal bar', 'up white arrow on pedestal with horizontal bar']);
  this.executeCharTest('‚á≠', ['upwards white arrow on pedestal with vertical bar', 'white up arrow on pedestal with vertical bar', 'up white arrow on pedestal with vertical bar']);
  this.executeCharTest('‚áÆ', ['upwards white double arrow', 'white double up arrow', 'up white double arrow']);
  this.executeCharTest('‚áØ', ['upwards white double arrow on pedestal', 'white double up arrow on pedestal', 'up white double arrow on pedestal']);
  this.executeCharTest('‚á∞', ['rightwards white arrow from wall', 'white right arrow from wall', 'right white arrow from wall']);
  this.executeCharTest('‚á±', ['north west arrow to corner', 'north west arrow to corner', 'north west arrow to corner']);
  this.executeCharTest('‚á≤', ['south east arrow to corner', 'south east arrow to corner', 'south east arrow to corner']);
  this.executeCharTest('‚á≥', ['up down white arrow', 'up down white arrow', 'up down white arrow']);
  this.executeCharTest('‚á¥', ['right arrow with small circle', 'right arrow with small circle', 'right arrow with small circle']);
  this.executeCharTest('‚áµ', ['down arrow leftwards of upwards arrow', 'down arrow left of up arrow', 'down arrow left of up arrow']);
  this.executeCharTest('‚á∂', ['three rightwards arrows', 'three right arrows', 'three right arrows']);
  this.executeCharTest('‚á∑', ['leftwards arrow with vertical stroke', 'left arrow with vertical stroke', 'left arrow with vertical stroke']);
  this.executeCharTest('‚á∏', ['rightwards arrow with vertical stroke', 'right arrow with vertical stroke', 'right arrow with vertical stroke']);
  this.executeCharTest('‚áπ', ['left right arrow with vertical stroke', 'left right arrow with vertical stroke', 'left right arrow with vertical stroke']);
  this.executeCharTest('‚á∫', ['leftwards arrow with double vertical stroke', 'left arrow with double vertical stroke', 'left arrow with double vertical stroke']);
  this.executeCharTest('‚áª', ['rightwards arrow with double vertical stroke', 'right arrow with double vertical stroke', 'right arrow with double vertical stroke']);
  this.executeCharTest('‚áº', ['left right arrow with double vertical stroke', 'left right arrow with double vertical stroke', 'left right arrow with double vertical stroke']);
  this.executeCharTest('‚áΩ', ['leftwards open headed arrow', 'left open headed arrow', 'left open headed arrow']);
  this.executeCharTest('‚áæ', ['rightwards open headed arrow', 'right open headed arrow', 'right open headed arrow']);
  this.executeCharTest('‚áø', ['left right open headed arrow', 'left right open headed arrow', 'left right open headed arrow']);
  this.executeCharTest('‚åÅ', ['electric arrow', 'electric arrow', 'electric arrow']);
  this.executeCharTest('‚åÉ', ['up arrowhead', 'up arrowhead', 'up arrowhead']);
  this.executeCharTest('‚åÑ', ['down arrowhead', 'down arrowhead', 'down arrowhead']);
  this.executeCharTest('‚å§', ['up arrowhead between two horizontal bars', 'up arrowhead between two horizontal bars', 'enter key']);
  this.executeCharTest('‚éã', ['broken circle with northwest arrow', 'broken circle with northwest arrow', 'broken circle with northwest arrow']);
  this.executeCharTest('‚ûî', ['heavy wide headed rightwards arrow', 'heavy wide headed right arrow', 'heavy wide headed right arrow']);
  this.executeCharTest('‚ûò', ['heavy south east arrow', 'heavy down right arrow', 'heavy down right arrow']);
  this.executeCharTest('‚ûô', ['heavy rightwards arrow', 'heavy right arrow', 'heavy right arrow']);
  this.executeCharTest('‚ûö', ['heavy north east arrow', 'heavy up right arrow', 'heavy up right arrow']);
  this.executeCharTest('‚ûõ', ['drafting point rightwards arrow', 'drafting point right arrow', 'drafting point right arrow']);
  this.executeCharTest('‚ûú', ['heavy round tipped rightwards arrow', 'heavy round tipped right arrow', 'heavy round tipped right arrow']);
  this.executeCharTest('‚ûù', ['triangle headed rightwards arrow', 'triangle headed right arrow', 'triangle headed right arrow']);
  this.executeCharTest('‚ûû', ['heavy triangle headed rightwards arrow', 'heavy triangle headed right arrow', 'heavy triangle headed right arrow']);
  this.executeCharTest('‚ûü', ['dashed triangle headed rightwards arrow', 'dashed triangle headed right arrow', 'dashed triangle headed right arrow']);
  this.executeCharTest('‚û†', ['heavy dashed triangle headed rightwards arrow', 'heavy dashed triangle headed right arrow', 'heavy dashed triangle headed right arrow']);
  this.executeCharTest('‚û°', ['black rightwards arrow', 'black right arrow', 'black right arrow']);
  this.executeCharTest('‚û¢', ['three d top lighted rightwards arrowhead', 'three d top lighted right arrowhead', 'three d top lighted right arrowhead']);
  this.executeCharTest('‚û£', ['three d bottom lighted rightwards arrowhead', 'three d bottom lighted right arrowhead', 'three d bottom lighted right arrowhead']);
  this.executeCharTest('‚û§', ['black rightwards arrowhead', 'black right arrowhead', 'black right arrowhead']);
  this.executeCharTest('‚û•', ['heavy black curved downwards and rightwards arrow', 'heavy black curved down and right arrow', 'heavy black curved down and right arrow']);
  this.executeCharTest('‚û¶', ['heavy black curved upwards and rightwards arrow', 'heavy black curved up and right arrow', 'heavy black curved up and right arrow']);
  this.executeCharTest('‚ûß', ['squat black rightwards arrow', 'squat black right arrow', 'squat black right arrow']);
  this.executeCharTest('‚û®', ['heavy concave pointed black rightwards arrow', 'heavy concave pointed black right arrow', 'heavy concave pointed black right arrow']);
  this.executeCharTest('‚û©', ['right shaded white rightwards arrow', 'right shaded white right arrow', 'right shaded white right arrow']);
  this.executeCharTest('‚û™', ['left shaded white rightwards arrow', 'left shaded white right arrow', 'left shaded white right arrow']);
  this.executeCharTest('‚û´', ['back tilted shadowed white rightwards arrow', 'back tilted shadowed white right arrow', 'back tilted shadowed white right arrow']);
  this.executeCharTest('‚û¨', ['front tilted shadowed white rightwards arrow', 'front tilted shadowed white right arrow', 'front tilted shadowed white right arrow']);
  this.executeCharTest('‚û≠', ['heavy lower right shadowed white rightwards arrow', 'heavy lower right shadowed white right arrow', 'heavy lower right shadowed white right arrow']);
  this.executeCharTest('‚ûÆ', ['heavy upper right shadowed white rightwards arrow', 'heavy upper right shadowed white right arrow', 'heavy upper right shadowed white right arrow']);
  this.executeCharTest('‚ûØ', ['notched lower right shadowed white rightwards arrow', 'notched lower right shadowed white right arrow', 'notched lower right shadowed white right arrow']);
  this.executeCharTest('‚û±', ['notched upper right shadowed white rightwards arrow', 'notched upper right shadowed white right arrow', 'notched upper right shadowed white right arrow']);
  this.executeCharTest('‚û≤', ['circled heavy white rightwards arrow', 'circled heavy white right arrow', 'circled heavy white right arrow']);
  this.executeCharTest('‚û≥', ['white feathered rightwards arrow', 'white feathered right arrow', 'white feathered right arrow']);
  this.executeCharTest('‚û¥', ['black feathered south east arrow', 'black feathered down right arrow', 'black feathered down right arrow']);
  this.executeCharTest('‚ûµ', ['black feathered rightwards arrow', 'black feathered right arrow', 'black feathered right arrow']);
  this.executeCharTest('‚û∂', ['black feathered north east arrow', 'black feathered up right arrow', 'black feathered up right arrow']);
  this.executeCharTest('‚û∑', ['heavy black feathered south east arrow', 'heavy black feathered down right arrow', 'heavy black feathered down right arrow']);
  this.executeCharTest('‚û∏', ['heavy black feathered rightwards arrow', 'heavy black feathered right arrow', 'heavy black feathered right arrow']);
  this.executeCharTest('‚ûπ', ['heavy black feathered north east arrow', 'heavy black feathered up right arrow', 'heavy black feathered up right arrow']);
  this.executeCharTest('‚û∫', ['teardrop barbed rightwards arrow', 'teardrop barbed right arrow', 'teardrop barbed right arrow']);
  this.executeCharTest('‚ûª', ['heavy teardrop shanked rightwards arrow', 'heavy teardrop shanked right arrow', 'heavy teardrop shanked right arrow']);
  this.executeCharTest('‚ûº', ['wedge tailed rightwards arrow', 'wedge tailed right arrow', 'wedge tailed right arrow']);
  this.executeCharTest('‚ûΩ', ['heavy wedge tailed rightwards arrow', 'heavy wedge tailed right arrow', 'heavy wedge tailed right arrow']);
  this.executeCharTest('‚ûæ', ['open outlined rightwards arrow', 'open outlined right arrow', 'open outlined right arrow']);
  this.executeCharTest('‚ü∞', ['upwards quadruple arrow', 'up quadruple arrow', 'up quadruple arrow']);
  this.executeCharTest('‚ü±', ['downwards quadruple arrow', 'down quadruple arrow', 'down quadruple arrow']);
  this.executeCharTest('‚ü≤', ['anticlockwise gapped circle arrow', 'anticlockwise gapped circle arrow', 'anticlockwise gapped circle arrow']);
  this.executeCharTest('‚ü≥', ['clockwise gapped circle arrow', 'clockwise gapped circle arrow', 'clockwise gapped circle arrow']);
  this.executeCharTest('‚ü¥', ['right arrow with circled plus', 'right arrow with circled plus', 'right arrow with circled plus']);
  this.executeCharTest('‚üµ', ['long leftwards arrow', 'long left arrow', 'long left arrow']);
  this.executeCharTest('‚ü∂', ['long rightwards arrow', 'long right arrow', 'long right arrow']);
  this.executeCharTest('‚ü∑', ['long left right arrow', 'long left right arrow', 'long left right arrow']);
  this.executeCharTest('‚ü∏', ['long leftwards double arrow', 'long left double arrow', 'long left double arrow']);
  this.executeCharTest('‚üπ', ['long rightwards double arrow', 'long right double arrow', 'long right double arrow']);
  this.executeCharTest('‚ü∫', ['long left right double arrow', 'long left right double arrow', 'long left right double arrow']);
  this.executeCharTest('‚üª', ['long leftwards arrow from bar', 'long left arrow from bar', 'long left arrow from bar']);
  this.executeCharTest('‚üº', ['long rightwards arrow from bar', 'long right arrow from bar', 'long right arrow from bar']);
  this.executeCharTest('‚üΩ', ['long leftwards double arrow from bar', 'long left double arrow from bar', 'long left double arrow from bar']);
  this.executeCharTest('‚üæ', ['long rightwards double arrow from bar', 'long right double arrow from bar', 'long right double arrow from bar']);
  this.executeCharTest('‚üø', ['long rightwards squiggle arrow', 'long right squiggle arrow', 'long right squiggle arrow']);
  this.executeCharTest('‚§Ä', ['rightwards two headed arrow with vertical stroke', 'two headed right arrow with vertical stroke', 'right two headed arrow with vertical stroke']);
  this.executeCharTest('‚§Å', ['rightwards two headed arrow with double vertical stroke', 'two headed right arrow with double vertical stroke', 'right two headed arrow with double vertical stroke']);
  this.executeCharTest('‚§Ç', ['leftwards double arrow with vertical stroke', 'double left arrow with vertical stroke', 'left double arrow with vertical stroke']);
  this.executeCharTest('‚§É', ['rightwards double arrow with vertical stroke', 'double right arrow with vertical stroke', 'right double arrow with vertical stroke']);
  this.executeCharTest('‚§Ñ', ['left right double arrow with vertical stroke', 'double left right arrow with vertical stroke', 'double left right arrow with vertical stroke']);
  this.executeCharTest('‚§Ö', ['rightwards two headed arrow from bar', 'two headed right arrow from bar', 'right two headed arrow from bar']);
  this.executeCharTest('‚§Ü', ['leftwards double arrow from bar', 'double left arrow from bar', 'left double arrow from bar']);
  this.executeCharTest('‚§á', ['rightwards double arrow from bar', 'double right arrow from bar', 'right double arrow from bar']);
  this.executeCharTest('‚§à', ['downwards arrow with horizontal stroke', 'arrow down with horizontal stroke', 'down arrow with horizontal stroke']);
  this.executeCharTest('‚§â', ['upwards arrow with horizontal stroke', 'up arrow with horizontal stroke', 'up arrow with horizontal stroke']);
  this.executeCharTest('‚§ä', ['upwards triple arrow', 'up triple arrow', 'up triple arrow']);
  this.executeCharTest('‚§ã', ['downwards triple arrow', 'down triple arrow', 'down triple arrow']);
  this.executeCharTest('‚§å', ['leftwards double dash arrow', 'left double dash arrow', 'left double dash arrow']);
  this.executeCharTest('‚§ç', ['rightwards double dash arrow', 'right double dash arrow', 'right double dash arrow']);
  this.executeCharTest('‚§é', ['leftwards triple dash arrow', 'left triple dash arrow', 'left triple dash arrow']);
  this.executeCharTest('‚§è', ['rightwards triple dash arrow', 'right triple dash arrow', 'right triple dash arrow']);
  this.executeCharTest('‚§ê', ['rightwards two headed triple dash arrow', 'right two headed triple dash arrow', 'right two headed triple dash arrow']);
  this.executeCharTest('‚§ë', ['rightwards arrow with dotted stem', 'right arrow with dotted stem', 'right arrow with dotted stem']);
  this.executeCharTest('‚§í', ['upwards arrow to bar', 'up arrow to bar', 'up arrow to bar']);
  this.executeCharTest('‚§ì', ['downwards arrow to bar', 'down arrow to bar', 'down arrow to bar']);
  this.executeCharTest('‚§î', ['rightwards arrow with tail with vertical stroke', 'right arrow with tail with vertical stroke', 'right arrow with tail with vertical stroke']);
  this.executeCharTest('‚§ï', ['rightwards arrow with tail with double vertical stroke', 'right arrow with tail with double vertical stroke', 'right arrow with tail with double vertical stroke']);
  this.executeCharTest('‚§ñ', ['rightwards two headed arrow with tail', 'right two headed arrow with tail', 'right two headed arrow with tail']);
  this.executeCharTest('‚§ó', ['rightwards two headed arrow with tail with vertical stroke', 'right two headed arrow with tail with vertical stroke', 'right two headed arrow with tail with vertical stroke']);
  this.executeCharTest('‚§ò', ['rightwards two headed arrow with tail with double vertical stroke', 'right two headed arrow with tail with double vertical stroke', 'right two headed arrow with tail with double vertical stroke']);
  this.executeCharTest('‚§ô', ['leftwards arrow tail', 'left arrow tail', 'left arrow tail']);
  this.executeCharTest('‚§ö', ['rightwards arrow tail', 'right arrow tail', 'right arrow tail']);
  this.executeCharTest('‚§õ', ['leftwards double arrow tail', 'left double arrow tail', 'left double arrow tail']);
  this.executeCharTest('‚§ú', ['rightwards double arrow tail', 'right double arrow tail', 'right double arrow tail']);
  this.executeCharTest('‚§ù', ['leftwards arrow to black diamond', 'left arrow to black diamond', 'left arrow to black diamond']);
  this.executeCharTest('‚§û', ['rightwards arrow to black diamond', 'right arrow to black diamond', 'right arrow to black diamond']);
  this.executeCharTest('‚§ü', ['leftwards arrow from bar to black diamond', 'left arrow from bar to black diamond', 'left arrow from bar to black diamond']);
  this.executeCharTest('‚§†', ['rightwards arrow from bar to black diamond', 'right arrow from bar to black diamond', 'right arrow from bar to black diamond']);
  this.executeCharTest('‚§°', ['north west and south east arrow', 'north west and south east arrow', 'north west and south east arrow']);
  this.executeCharTest('‚§¢', ['north east and south west arrow', 'north east and south west arrow', 'north east and south west arrow']);
  this.executeCharTest('‚§£', ['north west arrow with hook', 'north west arrow with hook', 'north west arrow with hook']);
  this.executeCharTest('‚§§', ['north east arrow with hook', 'north east arrow with hook', 'north east arrow with hook']);
  this.executeCharTest('‚§•', ['south east arrow with hook', 'south east arrow with hook', 'south east arrow with hook']);
  this.executeCharTest('‚§¶', ['south west arrow with hook', 'south west arrow with hook', 'south west arrow with hook']);
  this.executeCharTest('‚§ß', ['north west arrow and north east arrow', 'north west arrow and north east arrow', 'north west arrow and north east arrow']);
  this.executeCharTest('‚§®', ['north east arrow and south east arrow', 'north east arrow and south east arrow', 'north east arrow and south east arrow']);
  this.executeCharTest('‚§©', ['south east arrow and south west arrow', 'south east arrow and south west arrow', 'south east arrow and south west arrow']);
  this.executeCharTest('‚§™', ['south west arrow and north west arrow', 'south west arrow and north west arrow', 'south west arrow and north west arrow']);
  this.executeCharTest('‚§≠', ['south east arrow crossing north east arrow', 'south east arrow crossing north east arrow', 'south east arrow crossing north east arrow']);
  this.executeCharTest('‚§Æ', ['north east arrow crossing south east arrow', 'north east arrow crossing south east arrow', 'north east arrow crossing south east arrow']);
  this.executeCharTest('‚§Ø', ['falling diagonal crossing north east arrow', 'falling diagonal crossing north east arrow', 'falling diagonal crossing north east arrow']);
  this.executeCharTest('‚§∞', ['rising diagonal crossing south east arrow', 'rising diagonal crossing south east arrow', 'rising diagonal crossing south east arrow']);
  this.executeCharTest('‚§±', ['north east arrow crossing north west arrow', 'north east arrow crossing north west arrow', 'north east arrow crossing north west arrow']);
  this.executeCharTest('‚§≤', ['north west arrow crossing north east arrow', 'north west arrow crossing north east arrow', 'north west arrow crossing north east arrow']);
  this.executeCharTest('‚§≥', ['wave arrow pointing directly right', 'wave arrow pointing directly right', 'wave arrow pointing directly right']);
  this.executeCharTest('‚§¥', ['arrow pointing rightwards then curving upwards', 'arrow pointing right then curving up', 'arrow pointing right then curving up']);
  this.executeCharTest('‚§µ', ['arrow pointing rightwards then curving downwards', 'arrow pointing right then curving down', 'arrow pointing right then curving down']);
  this.executeCharTest('‚§∂', ['arrow pointing downwards then curving leftwards', 'arrow pointing down then curving left', 'arrow pointing down then curving left']);
  this.executeCharTest('‚§∑', ['arrow pointing downwards then curving rightwards', 'arrow pointing down then curving right', 'arrow pointing down then curving right']);
  this.executeCharTest('‚§∏', ['right side arc clockwise arrow', 'right side arc clockwise arrow', 'right side arc clockwise arrow']);
  this.executeCharTest('‚§π', ['left side arc anticlockwise arrow', 'left side arc anticlockwise arrow', 'left side arc anticlockwise arrow']);
  this.executeCharTest('‚§∫', ['top arc anticlockwise arrow', 'top arc anticlockwise arrow', 'top arc anticlockwise arrow']);
  this.executeCharTest('‚§ª', ['bottom arc anticlockwise arrow', 'bottom arc anticlockwise arrow', 'bottom arc anticlockwise arrow']);
  this.executeCharTest('‚§º', ['top arc clockwise arrow with minus', 'top arc clockwise arrow with minus', 'top arc clockwise arrow with minus']);
  this.executeCharTest('‚§Ω', ['top arc anticlockwise arrow with plus', 'top arc anticlockwise arrow with plus', 'top arc anticlockwise arrow with plus']);
  this.executeCharTest('‚§æ', ['lower right semicircular clockwise arrow', 'down right semicircular clockwise arrow', 'down right semicircular clockwise arrow']);
  this.executeCharTest('‚§ø', ['lower left semicircular anticlockwise arrow', 'down left semicircular anticlockwise arrow', 'down left semicircular anticlockwise arrow']);
  this.executeCharTest('‚•Ä', ['anticlockwise closed circle arrow', 'anticlockwise closed circle arrow', 'anticlockwise closed circle arrow']);
  this.executeCharTest('‚•Å', ['clockwise closed circle arrow', 'clockwise closed circle arrow', 'clockwise closed circle arrow']);
  this.executeCharTest('‚•Ç', ['rightwards arrow above short leftwards arrow', 'right arrow above short left arrow', 'right arrow above short left arrow']);
  this.executeCharTest('‚•É', ['leftwards arrow above short rightwards arrow', 'left arrow above short right arrow', 'left arrow above short right arrow']);
  this.executeCharTest('‚•Ñ', ['short rightwards arrow above leftwards arrow', 'short right arrow above left arrow', 'short right arrow above left arrow']);
  this.executeCharTest('‚•Ö', ['rightwards arrow with plus below', 'right arrow with plus below', 'right arrow with plus below']);
  this.executeCharTest('‚•Ü', ['leftwards arrow with plus below', 'left arrow with plus below', 'left arrow with plus below']);
  this.executeCharTest('‚•á', ['rightwards arrow through x', 'right arrow through x', 'right arrow through x']);
  this.executeCharTest('‚•à', ['left right arrow through small circle', 'left right arrow through small circle', 'left right arrow through small circle']);
  this.executeCharTest('‚•â', ['upwards two headed arrow from small circle', 'up two headed arrow from small circle', 'up two headed arrow from small circle']);
  this.executeCharTest('‚•∞', ['right double arrow with rounded head', 'right double arrow with rounded head', 'right double arrow with rounded head']);
  this.executeCharTest('‚•±', ['equals sign above rightwards arrow', 'equals sign above right arrow', 'equals sign above right arrow']);
  this.executeCharTest('‚•≤', ['tilde operator above rightwards arrow', 'tilde operator above right arrow', 'tilde operator above right arrow']);
  this.executeCharTest('‚•≥', ['leftwards arrow above tilde operator', 'left arrow above tilde operator', 'left arrow above tilde operator']);
  this.executeCharTest('‚•¥', ['rightwards arrow above tilde operator', 'right arrow above tilde operator', 'right arrow above tilde operator']);
  this.executeCharTest('‚•µ', ['rightwards arrow above almost equals', 'right arrow above almost equals', 'right arrow above almost equals']);
  this.executeCharTest('‚•∂', ['less than above leftwards arrow', 'less than above left arrow', 'less than above left arrow']);
  this.executeCharTest('‚•∑', ['leftwards arrow through less than', 'left arrow through less than', 'left arrow through less than']);
  this.executeCharTest('‚•∏', ['greater than above rightwards arrow', 'greater than above right arrow', 'greater than above right arrow']);
  this.executeCharTest('‚•π', ['subset above rightwards arrow', 'subset above right arrow', 'subset above right arrow']);
  this.executeCharTest('‚•∫', ['leftwards arrow through subset', 'left arrow through subset', 'left arrow through subset']);
  this.executeCharTest('‚•ª', ['superset above leftwards arrow', 'superset above left arrow', 'superset above left arrow']);
  this.executeCharTest('‚¶≥', ['empty set with right arrow above', 'empty set with right arrow above', 'empty set with right arrow above']);
  this.executeCharTest('‚¶¥', ['empty set with left arrow above', 'empty set with left arrow above', 'empty set with left arrow above']);
  this.executeCharTest('‚¶Ω', ['up arrow through circle', 'up arrow through circle', 'up arrow through circle']);
  this.executeCharTest('‚ß™', ['black diamond with down arrow', 'black diamond with down arrow', 'black diamond with down arrow']);
  this.executeCharTest('‚ß¨', ['white circle with down arrow', 'white circle with down arrow', 'white circle with down arrow']);
  this.executeCharTest('‚ß≠', ['black circle with down arrow', 'black circle with down arrow', 'black circle with down arrow']);
  this.executeCharTest('‚®ó', ['integral with leftwards arrow with hook', 'integral with left arrow with hook', 'integral with left arrow with hook']);
  this.executeCharTest('‚¨Ä', ['north east white arrow', 'north east white arrow', 'north east white arrow']);
  this.executeCharTest('‚¨Å', ['north west white arrow', 'north west white arrow', 'north west white arrow']);
  this.executeCharTest('‚¨Ç', ['south east white arrow', 'south east white arrow', 'south east white arrow']);
  this.executeCharTest('‚¨É', ['south west white arrow', 'south west white arrow', 'south west white arrow']);
  this.executeCharTest('‚¨Ñ', ['left right white arrow', 'left right white arrow', 'left right white arrow']);
  this.executeCharTest('‚¨Ö', ['leftwards black arrow', 'left black arrow', 'left black arrow']);
  this.executeCharTest('‚¨Ü', ['upwards black arrow', 'up black arrow', 'up black arrow']);
  this.executeCharTest('‚¨á', ['downwards black arrow', 'down black arrow', 'down black arrow']);
  this.executeCharTest('‚¨à', ['north east black arrow', 'north east black arrow', 'north east black arrow']);
  this.executeCharTest('‚¨â', ['north west black arrow', 'north west black arrow', 'north west black arrow']);
  this.executeCharTest('‚¨ä', ['south east black arrow', 'south east black arrow', 'south east black arrow']);
  this.executeCharTest('‚¨ã', ['south west black arrow', 'south west black arrow', 'south west black arrow']);
  this.executeCharTest('‚¨å', ['left right black arrow', 'left right black arrow', 'left right black arrow']);
  this.executeCharTest('‚¨ç', ['up down black arrow', 'up down black arrow', 'up down black arrow']);
  this.executeCharTest('‚¨é', ['rightwards arrow with tip downwards', 'right arrow with tip down', 'right arrow with tip down']);
  this.executeCharTest('‚¨è', ['rightwards arrow with tip upwards', 'right arrow with tip up', 'right arrow with tip up']);
  this.executeCharTest('‚¨ê', ['leftwards arrow with tip downwards', 'left arrow with tip down', 'left arrow with tip down']);
  this.executeCharTest('‚¨ë', ['leftwards arrow with tip upwards', 'left arrow with tip up', 'left arrow with tip up']);
  this.executeCharTest('‚¨∞', ['left arrow with small circle', 'left arrow with small circle', 'left arrow with small circle']);
  this.executeCharTest('‚¨±', ['three leftwards arrows', 'three left arrows', 'three left arrows']);
  this.executeCharTest('‚¨≤', ['left arrow with circled plus', 'left arrow with circled plus', 'left arrow with circled plus']);
  this.executeCharTest('‚¨≥', ['long leftwards squiggle arrow', 'long left squiggle arrow', 'long left squiggle arrow']);
  this.executeCharTest('‚¨¥', ['leftwards two headed arrow with vertical stroke', 'left two headed arrow with vertical stroke', 'left two headed arrow with vertical stroke']);
  this.executeCharTest('‚¨µ', ['leftwards two headed arrow with double vertical stroke', 'left two headed arrow with double vertical stroke', 'left two headed arrow with double vertical stroke']);
  this.executeCharTest('‚¨∂', ['leftwards two headed arrow from bar', 'left two headed arrow from bar', 'left two headed arrow from bar']);
  this.executeCharTest('‚¨∑', ['leftwards two headed triple dash arrow', 'left two headed triple dash arrow', 'left two headed triple dash arrow']);
  this.executeCharTest('‚¨∏', ['leftwards arrow with dotted stem', 'left arrow with dotted stem', 'left arrow with dotted stem']);
  this.executeCharTest('‚¨π', ['leftwards arrow with tail with vertical stroke', 'left arrow with tail with vertical stroke', 'left arrow with tail with vertical stroke']);
  this.executeCharTest('‚¨∫', ['leftwards arrow with tail with double vertical stroke', 'left arrow with tail with double vertical stroke', 'left arrow with tail with double vertical stroke']);
  this.executeCharTest('‚¨ª', ['leftwards two headed arrow with tail', 'left two headed arrow with tail', 'left two headed arrow with tail']);
  this.executeCharTest('‚¨º', ['leftwards two headed arrow with tail with vertical stroke', 'left two headed arrow with tail with vertical stroke', 'left two headed arrow with tail with vertical stroke']);
  this.executeCharTest('‚¨Ω', ['leftwards two headed arrow with tail with double vertical stroke', 'left two headed arrow with tail with double vertical stroke', 'left two headed arrow with tail with double vertical stroke']);
  this.executeCharTest('‚¨æ', ['leftwards arrow through x', 'left arrow through x', 'left arrow through x']);
  this.executeCharTest('‚¨ø', ['wave arrow pointing directly left', 'wave arrow pointing directly left', 'wave arrow pointing directly left']);
  this.executeCharTest('‚≠Ä', ['equals sign above leftwards arrow', 'equals sign above left arrow', 'equals sign above left arrow']);
  this.executeCharTest('‚≠Å', ['reverse tilde operator above leftwards arrow', 'reverse tilde operator above left arrow', 'reverse tilde operator above left arrow']);
  this.executeCharTest('‚≠Ç', ['leftwards arrow above reverse almost equals', 'left arrow above reverse almost equals', 'left arrow above reverse almost equals']);
  this.executeCharTest('‚≠É', ['rightwards arrow through greater than', 'right arrow through greater than', 'right arrow through greater than']);
  this.executeCharTest('‚≠Ñ', ['rightwards arrow through superset', 'right arrow through superset', 'right arrow through superset']);
  this.executeCharTest('‚≠Ö', ['leftwards quadruple arrow', 'left quadruple arrow', 'left quadruple arrow']);
  this.executeCharTest('‚≠Ü', ['rightwards quadruple arrow', 'right quadruple arrow', 'right quadruple arrow']);
  this.executeCharTest('‚≠á', ['reverse tilde operator above rightwards arrow', 'reverse tilde operator above right arrow', 'reverse tilde operator above right arrow']);
  this.executeCharTest('‚≠à', ['rightwards arrow above reverse almost equals', 'right arrow above reverse almost equals', 'right arrow above reverse almost equals']);
  this.executeCharTest('‚≠â', ['tilde operator above leftwards arrow', 'tilde operator above left arrow', 'tilde operator above left arrow']);
  this.executeCharTest('‚≠ä', ['leftwards arrow above almost equals', 'left arrow above almost equals', 'left arrow above almost equals']);
  this.executeCharTest('‚≠ã', ['leftwards arrow above reverse tilde operator', 'left arrow above reverse tilde operator', 'left arrow above reverse tilde operator']);
  this.executeCharTest('‚≠å', ['rightwards arrow above reverse tilde operator', 'right arrow above reverse tilde operator', 'right arrow above reverse tilde operator']);
  this.executeCharTest('Ôø©', ['halfwidth leftwards arrow', 'halfwidth left arrow', 'halfwidth left arrow']);
  this.executeCharTest('Ôø™', ['halfwidth upwards arrow', 'halfwidth up arrow', 'halfwidth up arrow']);
  this.executeCharTest('Ôø´', ['halfwidth rightwards arrow', 'halfwidth right arrow', 'halfwidth right arrow']);
  this.executeCharTest('Ôø¨', ['halfwidth downwards arrow', 'halfwidth down arrow', 'halfwidth down arrow']);
  this.executeCharTest('‚Ñì', ['script small l', 'script l', 'script l']);
  this.executeCharTest('‚Ñò', ['script capital p', 'script cap p', 'script p']);
  this.executeCharTest('‚Ñº', ['double struck small pi', 'double struck pi', 'double struck pi']);
  this.executeCharTest('‚ÑΩ', ['double struck small gamma', 'double struck gamma', 'double struck gamma']);
  this.executeCharTest('‚Ñæ', ['double struck capital gamma', 'double struck cap gamma', 'double struck cap gamma']);
  this.executeCharTest('‚Ñø', ['double struck capital pi', 'double struck cap pi', 'double struck cap pi']);
  this.executeCharTest('‚ÖÄ', ['double struck n ary summation', 'double struck n ary summation', 'double struck n ary summation']);
  this.executeCharTest('‚ÖÖ', ['double struck italic capital d', 'double struck italic cap d', 'double struck italic cap d']);
  this.executeCharTest('‚ÖÜ', ['double struck italic small d', 'double struck italic d', 'double struck italic d']);
  this.executeCharTest('‚Öá', ['double struck italic small e', 'double struck italic e', 'double struck italic e']);
  this.executeCharTest('‚Öà', ['double struck italic small i', 'double struck italic i', 'double struck italic i']);
  this.executeCharTest('‚Öâ', ['double struck italic small j', 'double struck italic j', 'double struck italic j']);
  this.executeCharTest('ùö§', ['italic small dotless i', 'italic dotless i', 'italic dotless i']);
  this.executeCharTest('ùö•', ['italic small dotless j', 'italic dotless j', 'italic dotless j']);
  this.executeCharTest('(', ['left parenthesis', 'left parenthesis', 'opening parenthesis']);
  this.executeCharTest(')', ['right parenthesis', 'right parenthesis', 'closing parenthesis']);
  this.executeCharTest('[', ['left square bracket', 'left square bracket', 'opening square bracket']);
  this.executeCharTest(']', ['right square bracket', 'right square bracket', 'closing square bracket']);
  this.executeCharTest('{', ['left curly bracket', 'left curly bracket', 'opening curly bracket']);
  this.executeCharTest('}', ['right curly bracket', 'right curly bracket', 'closing curly bracket']);
  this.executeCharTest('‚ÅÖ', ['left square bracket with quill', 'left square bracket with quill', 'left square bracket with quill']);
  this.executeCharTest('‚ÅÜ', ['right square bracket with quill', 'right square bracket with quill', 'right square bracket with quill']);
  this.executeCharTest('‚åà', ['left ceiling', 'left ceiling', 'left ceiling']);
  this.executeCharTest('‚åâ', ['right ceiling', 'right ceiling', 'right ceiling']);
  this.executeCharTest('‚åä', ['left floor', 'left floor', 'left floor']);
  this.executeCharTest('‚åã', ['right floor', 'right floor', 'right floor']);
  this.executeCharTest('‚åå', ['bottom right crop', 'bottom right crop', 'bottom right crop']);
  this.executeCharTest('‚åç', ['bottom left crop', 'bottom left crop', 'bottom left crop']);
  this.executeCharTest('‚åé', ['top right crop', 'top right crop', 'top right crop']);
  this.executeCharTest('‚åè', ['top left crop', 'top left crop', 'top left crop']);
  this.executeCharTest('‚åú', ['top left corner', 'top left corner', 'top left corner']);
  this.executeCharTest('‚åù', ['top right corner', 'top right corner', 'top right corner']);
  this.executeCharTest('‚åû', ['bottom left corner', 'bottom left corner', 'bottom left corner']);
  this.executeCharTest('‚åü', ['bottom right corner', 'bottom right corner', 'bottom right corner']);
  this.executeCharTest('‚å†', ['top half integral', 'top half integral', 'top half integral']);
  this.executeCharTest('‚å°', ['bottom half integral', 'bottom half integral', 'bottom half integral']);
  this.executeCharTest('‚å©', ['left pointing angle bracket', 'left pointing angle bracket', 'bra']);
  this.executeCharTest('‚å™', ['right pointing angle bracket', 'right pointing angle bracket', 'ket']);
  this.executeCharTest('‚éõ', ['left parenthesis upper hook', 'left parenthesis upper hook', 'left parenthesis upper hook']);
  this.executeCharTest('‚éú', ['left parenthesis extension', 'left parenthesis extension', 'left parenthesis extension']);
  this.executeCharTest('‚éù', ['left parenthesis lower hook', 'left parenthesis lower hook', 'left parenthesis lower hook']);
  this.executeCharTest('‚éû', ['right parenthesis upper hook', 'right parenthesis upper hook', 'right parenthesis upper hook']);
  this.executeCharTest('‚éü', ['right parenthesis extension', 'right parenthesis extension', 'right parenthesis extension']);
  this.executeCharTest('‚é†', ['right parenthesis lower hook', 'right parenthesis lower hook', 'right parenthesis lower hook']);
  this.executeCharTest('‚é°', ['left square bracket upper corner', 'left square bracket upper corner', 'left square bracket upper corner']);
  this.executeCharTest('‚é¢', ['left square bracket extension', 'left square bracket extension', 'left square bracket extension']);
  this.executeCharTest('‚é£', ['left square bracket lower corner', 'left square bracket lower corner', 'left square bracket lower corner']);
  this.executeCharTest('‚é§', ['right square bracket upper corner', 'right square bracket upper corner', 'right square bracket upper corner']);
  this.executeCharTest('‚é•', ['right square bracket extension', 'right square bracket extension', 'right square bracket extension']);
  this.executeCharTest('‚é¶', ['right square bracket lower corner', 'right square bracket lower corner', 'right square bracket lower corner']);
  this.executeCharTest('‚éß', ['left curly bracket upper hook', 'left curly bracket upper hook', 'left curly bracket upper hook']);
  this.executeCharTest('‚é®', ['left curly bracket middle piece', 'left curly bracket middle piece', 'left curly bracket middle piece']);
  this.executeCharTest('‚é©', ['left curly bracket lower hook', 'left curly bracket lower hook', 'left curly bracket lower hook']);
  this.executeCharTest('‚é™', ['curly bracket extension', 'curly bracket extension', 'curly bracket extension']);
  this.executeCharTest('‚é´', ['right curly bracket upper hook', 'right curly bracket upper hook', 'right curly bracket upper hook']);
  this.executeCharTest('‚é¨', ['right curly bracket middle piece', 'right curly bracket middle piece', 'right curly bracket middle piece']);
  this.executeCharTest('‚é≠', ['right curly bracket lower hook', 'right curly bracket lower hook', 'right curly bracket lower hook']);
  this.executeCharTest('‚éÆ', ['integral extension', 'integral extension', 'integral extension']);
  this.executeCharTest('‚éØ', ['horizontal line extension', 'horizontal line extension', 'horizontal line extension']);
  this.executeCharTest('‚é∞', ['upper left or lower right curly bracket section', 'upper left or lower right curly bracket section', 'upper left or lower right curly bracket section']);
  this.executeCharTest('‚é±', ['upper right or lower left curly bracket section', 'upper right or lower left curly bracket section', 'upper right or lower left curly bracket section']);
  this.executeCharTest('‚é≤', ['summation top', 'summation top', 'summation top']);
  this.executeCharTest('‚é≥', ['summation bottom', 'summation bottom', 'summation bottom']);
  this.executeCharTest('‚é¥', ['top square bracket', 'top square bracket', 'top square bracket']);
  this.executeCharTest('‚éµ', ['bottom square bracket', 'bottom square bracket', 'bottom square bracket']);
  this.executeCharTest('‚é∂', ['bottom square bracket over top square bracket', 'bottom square bracket over top square bracket', 'bottom square bracket over top square bracket']);
  this.executeCharTest('‚é∑', ['radical symbol bottom', 'radical symbol bottom', 'radical symbol bottom']);
  this.executeCharTest('‚é∏', ['left vertical box line', 'left vertical box line', 'left vertical box line']);
  this.executeCharTest('‚éπ', ['right vertical box line', 'right vertical box line', 'right vertical box line']);
  this.executeCharTest('‚èú', ['top parenthesis', 'top parenthesis', 'top parenthesis']);
  this.executeCharTest('‚èù', ['bottom parenthesis', 'bottom parenthesis', 'bottom parenthesis']);
  this.executeCharTest('‚èû', ['top curly bracket', 'top curly bracket', 'top curly bracket']);
  this.executeCharTest('‚èü', ['bottom curly bracket', 'bottom curly bracket', 'bottom curly bracket']);
  this.executeCharTest('‚è†', ['top tortoise shell bracket', 'top tortoise shell bracket', 'top tortoise shell bracket']);
  this.executeCharTest('‚è°', ['bottom tortoise shell bracket', 'bottom tortoise shell bracket', 'bottom tortoise shell bracket']);
  this.executeCharTest('‚ù®', ['medium left parenthesis ornament', 'medium left parenthesis ornament', 'medium left parenthesis ornament']);
  this.executeCharTest('‚ù©', ['medium right parenthesis ornament', 'medium right parenthesis ornament', 'medium right parenthesis ornament']);
  this.executeCharTest('‚ù™', ['medium flattened left parenthesis ornament', 'medium flattened left parenthesis ornament', 'medium flattened left parenthesis ornament']);
  this.executeCharTest('‚ù´', ['medium flattened right parenthesis ornament', 'medium flattened right parenthesis ornament', 'medium flattened right parenthesis ornament']);
  this.executeCharTest('‚ù¨', ['medium left pointing angle bracket ornament', 'medium left pointing angle bracket ornament', 'medium left pointing angle bracket ornament']);
  this.executeCharTest('‚ù≠', ['medium right pointing angle bracket ornament', 'medium right pointing angle bracket ornament', 'medium right pointing angle bracket ornament']);
  this.executeCharTest('‚ùÆ', ['heavy left pointing angle quotation mark ornament', 'heavy left pointing angle quotation mark ornament', 'heavy left pointing angle quotation mark ornament']);
  this.executeCharTest('‚ùØ', ['heavy right pointing angle quotation mark ornament', 'heavy right pointing angle quotation mark ornament', 'heavy right pointing angle quotation mark ornament']);
  this.executeCharTest('‚ù∞', ['heavy left pointing angle bracket ornament', 'heavy left pointing angle bracket ornament', 'heavy left pointing angle bracket ornament']);
  this.executeCharTest('‚ù±', ['heavy right pointing angle bracket ornament', 'heavy right pointing angle bracket ornament', 'heavy right pointing angle bracket ornament']);
  this.executeCharTest('‚ù≤', ['light left tortoise shell bracket ornament', 'light left tortoise shell bracket ornament', 'light left tortoise shell bracket ornament']);
  this.executeCharTest('‚ù≥', ['light right tortoise shell bracket ornament', 'light right tortoise shell bracket ornament', 'light right tortoise shell bracket ornament']);
  this.executeCharTest('‚ù¥', ['medium left curly bracket ornament', 'medium left curly bracket ornament', 'medium left curly bracket ornament']);
  this.executeCharTest('‚ùµ', ['medium right curly bracket ornament', 'medium right curly bracket ornament', 'medium right curly bracket ornament']);
  this.executeCharTest('‚üÖ', ['left s shaped bag delimiter', 'left s shaped bag delimiter', 'left s shaped bag delimiter']);
  this.executeCharTest('‚üÜ', ['right s shaped bag delimiter', 'right s shaped bag delimiter', 'right s shaped bag delimiter']);
  this.executeCharTest('‚ü¶', ['mathematical left white square bracket', 'mathematical left white square bracket', 'mathematical left white square bracket']);
  this.executeCharTest('‚üß', ['mathematical right white square bracket', 'mathematical right white square bracket', 'mathematical right white square bracket']);
  this.executeCharTest('‚ü®', ['mathematical left angle bracket', 'mathematical left angle bracket', 'mathematical left angle bracket']);
  this.executeCharTest('‚ü©', ['mathematical right angle bracket', 'mathematical right angle bracket', 'mathematical right angle bracket']);
  this.executeCharTest('‚ü™', ['mathematical left double angle bracket', 'mathematical left double angle bracket', 'mathematical left double angle bracket']);
  this.executeCharTest('‚ü´', ['mathematical right double angle bracket', 'mathematical right double angle bracket', 'mathematical right double angle bracket']);
  this.executeCharTest('‚ü¨', ['mathematical left white tortoise shell bracket', 'mathematical left white tortoise shell bracket', 'mathematical left white tortoise shell bracket']);
  this.executeCharTest('‚ü≠', ['mathematical right white tortoise shell bracket', 'mathematical right white tortoise shell bracket', 'mathematical right white tortoise shell bracket']);
  this.executeCharTest('‚üÆ', ['mathematical left flattened parenthesis', 'mathematical left flattened parenthesis', 'mathematical left flattened parenthesis']);
  this.executeCharTest('‚üØ', ['mathematical right flattened parenthesis', 'mathematical right flattened parenthesis', 'mathematical right flattened parenthesis']);
  this.executeCharTest('‚¶É', ['left white curly bracket', 'left white curly bracket', 'left white curly bracket']);
  this.executeCharTest('‚¶Ñ', ['right white curly bracket', 'right white curly bracket', 'right white curly bracket']);
  this.executeCharTest('‚¶Ö', ['left white parenthesis', 'left white parenthesis', 'left white parenthesis']);
  this.executeCharTest('‚¶Ü', ['right white parenthesis', 'right white parenthesis', 'right white parenthesis']);
  this.executeCharTest('‚¶á', ['z notation left image bracket', 'z notation left image bracket', 'z notation left image bracket']);
  this.executeCharTest('‚¶à', ['z notation right image bracket', 'z notation right image bracket', 'z notation right image bracket']);
  this.executeCharTest('‚¶â', ['z notation left binding bracket', 'z notation left binding bracket', 'z notation left binding bracket']);
  this.executeCharTest('‚¶ä', ['z notation right binding bracket', 'z notation right binding bracket', 'z notation right binding bracket']);
  this.executeCharTest('‚¶ã', ['left square bracket with underbar', 'left square bracket with underbar', 'left square bracket with underbar']);
  this.executeCharTest('‚¶å', ['right square bracket with underbar', 'right square bracket with underbar', 'right square bracket with underbar']);
  this.executeCharTest('‚¶ç', ['left square bracket with tick in top corner', 'left square bracket with tick in top corner', 'left square bracket with tick in top corner']);
  this.executeCharTest('‚¶é', ['right square bracket with tick in bottom corner', 'right square bracket with tick in bottom corner', 'right square bracket with tick in bottom corner']);
  this.executeCharTest('‚¶è', ['left square bracket with tick in bottom corner', 'left square bracket with tick in bottom corner', 'left square bracket with tick in bottom corner']);
  this.executeCharTest('‚¶ê', ['right square bracket with tick in top corner', 'right square bracket with tick in top corner', 'right square bracket with tick in top corner']);
  this.executeCharTest('‚¶ë', ['left angle bracket with dot', 'left angle bracket with dot', 'left angle bracket with dot']);
  this.executeCharTest('‚¶í', ['right angle bracket with dot', 'right angle bracket with dot', 'right angle bracket with dot']);
  this.executeCharTest('‚¶ì', ['left arc less than bracket', 'left arc less than bracket', 'left arc less than bracket']);
  this.executeCharTest('‚¶î', ['right arc greater than bracket', 'right arc greater than bracket', 'right arc greater than bracket']);
  this.executeCharTest('‚¶ï', ['double left arc greater than bracket', 'double left arc greater than bracket', 'double left arc greater than bracket']);
  this.executeCharTest('‚¶ñ', ['double right arc less than bracket', 'double right arc less than bracket', 'double right arc less than bracket']);
  this.executeCharTest('‚¶ó', ['left black tortoise shell bracket', 'left black tortoise shell bracket', 'left black tortoise shell bracket']);
  this.executeCharTest('‚¶ò', ['right black tortoise shell bracket', 'right black tortoise shell bracket', 'right black tortoise shell bracket']);
  this.executeCharTest('‚ßò', ['left wiggly fence', 'left wiggly fence', 'left wiggly fence']);
  this.executeCharTest('‚ßô', ['right wiggly fence', 'right wiggly fence', 'right wiggly fence']);
  this.executeCharTest('‚ßö', ['left double wiggly fence', 'left double wiggly fence', 'left double wiggly fence']);
  this.executeCharTest('‚ßõ', ['right double wiggly fence', 'right double wiggly fence', 'right double wiggly fence']);
  this.executeCharTest('‚ßº', ['left pointing curved angle bracket', 'left pointing curved angle bracket', 'left pointing curved angle bracket']);
  this.executeCharTest('‚ßΩ', ['right pointing curved angle bracket', 'right pointing curved angle bracket', 'right pointing curved angle bracket']);
  this.executeCharTest('‚∏¢', ['top left half bracket', 'top left half bracket', 'top left half bracket']);
  this.executeCharTest('‚∏£', ['top right half bracket', 'top right half bracket', 'top right half bracket']);
  this.executeCharTest('‚∏§', ['bottom left half bracket', 'bottom left half bracket', 'bottom left half bracket']);
  this.executeCharTest('‚∏•', ['bottom right half bracket', 'bottom right half bracket', 'bottom right half bracket']);
  this.executeCharTest('‚∏¶', ['left sideways U bracket', 'left sideways U bracket', 'left sideways U bracket']);
  this.executeCharTest('‚∏ß', ['right sideways U bracket', 'right sideways U bracket', 'right sideways U bracket']);
  this.executeCharTest('‚∏®', ['left double parenthesis', 'left double parenthesis', 'left double parenthesis']);
  this.executeCharTest('‚∏©', ['right double parenthesis', 'right double parenthesis', 'right double parenthesis']);
  this.executeCharTest('„Äà', ['left angle bracket', 'left angle bracket', 'opening angle bracket']);
  this.executeCharTest('„Äâ', ['right angle bracket', 'right angle bracket', 'closing angle bracket']);
  this.executeCharTest('„Ää', ['left double angle bracket', 'left double angle bracket', 'opening double angle bracket']);
  this.executeCharTest('„Äã', ['right double angle bracket', 'right double angle bracket', 'closing double angle bracket']);
  this.executeCharTest('„Äå', ['left corner bracket', 'left corner bracket', 'opening corner bracket']);
  this.executeCharTest('„Äç', ['right corner bracket', 'right corner bracket', 'closing corner bracket']);
  this.executeCharTest('„Äé', ['left white corner bracket', 'left white corner bracket', 'opening white corner bracket']);
  this.executeCharTest('„Äè', ['right white corner bracket', 'right white corner bracket', 'closing white corner bracket']);
  this.executeCharTest('„Äê', ['left black lenticular bracket', 'left black lenticular bracket', 'opening black lenticular bracket']);
  this.executeCharTest('„Äë', ['right black lenticular bracket', 'right black lenticular bracket', 'closing black lenticular bracket']);
  this.executeCharTest('„Äî', ['left tortoise shell bracket', 'left tortoise shell bracket', 'opening tortoise shell bracket']);
  this.executeCharTest('„Äï', ['right tortoise shell bracket', 'right tortoise shell bracket', 'closing tortoise shell bracket']);
  this.executeCharTest('„Äñ', ['left white lenticular bracket', 'left white lenticular bracket', 'opening white lenticular bracket']);
  this.executeCharTest('„Äó', ['right white lenticular bracket', 'right white lenticular bracket', 'closing white lenticular bracket']);
  this.executeCharTest('„Äò', ['left white tortoise shell bracket', 'left white tortoise shell bracket', 'opening white tortoise shell bracket']);
  this.executeCharTest('„Äô', ['right white tortoise shell bracket', 'right white tortoise shell bracket', 'closing white tortoise shell bracket']);
  this.executeCharTest('„Äö', ['left white square bracket', 'left white square bracket', 'opening white square bracket']);
  this.executeCharTest('„Äõ', ['right white square bracket', 'right white square bracket', 'closing white square bracket']);
  this.executeCharTest('„Äù', ['reversed double prime quotation mark', 'reversed double prime quotation mark', 'reversed double prime quotation mark']);
  this.executeCharTest('„Äû', ['double prime quotation mark', 'double prime quotation mark', 'double prime quotation mark']);
  this.executeCharTest('„Äü', ['low double prime quotation mark', 'low double prime quotation mark', 'low double prime quotation mark']);
  this.executeCharTest('Ô¥æ', ['ornate left parenthesis', 'ornate left parenthesis', 'ornate left parenthesis']);
  this.executeCharTest('Ô¥ø', ['ornate right parenthesis', 'ornate right parenthesis', 'ornate right parenthesis']);
  this.executeCharTest('Ô∏ó', ['presentation form for vertical left white lenticular bracket', 'presentation form for vertical left white lenticular bracket', 'presentation form for vertical left white lenticular bracket']);
  this.executeCharTest('Ô∏ò', ['presentation form for vertical right white lenticular brakcet', 'presentation form for vertical right white lenticular brakcet', 'presentation form for vertical right white lenticular brakcet']);
  this.executeCharTest('Ô∏µ', ['presentation form for vertical left parenthesis', 'presentation form for vertical left parenthesis', 'glyph for vertical opening parenthesis']);
  this.executeCharTest('Ô∏∂', ['presentation form for vertical right parenthesis', 'presentation form for vertical right parenthesis', 'glyph for vertical closing parenthesis']);
  this.executeCharTest('Ô∏∑', ['presentation form for vertical left curly bracket', 'presentation form for vertical left curly bracket', 'glyph for vertical opening curly bracket']);
  this.executeCharTest('Ô∏∏', ['presentation form for vertical right curly bracket', 'presentation form for vertical right curly bracket', 'glyph for vertical closing curly bracket']);
  this.executeCharTest('Ô∏π', ['presentation form for vertical left tortoise shell bracket', 'presentation form for vertical left tortoise shell bracket', 'glyph for vertical opening tortoise shell bracket']);
  this.executeCharTest('Ô∏∫', ['presentation form for vertical right tortoise shell bracket', 'presentation form for vertical right tortoise shell bracket', 'glyph for vertical closing tortoise shell bracket']);
  this.executeCharTest('Ô∏ª', ['presentation form for vertical left black lenticular bracket', 'presentation form for vertical left black lenticular bracket', 'glyph for vertical opening black lenticular bracket']);
  this.executeCharTest('Ô∏º', ['presentation form for vertical right black lenticular bracket', 'presentation form for vertical right black lenticular bracket', 'glyph for vertical closing black lenticular bracket']);
  this.executeCharTest('Ô∏Ω', ['presentation form for vertical left double angle bracket', 'presentation form for vertical left double angle bracket', 'glyph for vertical opening double angle bracket']);
  this.executeCharTest('Ô∏æ', ['presentation form for vertical right double angle bracket', 'presentation form for vertical right double angle bracket', 'glyph for vertical closing double angle bracket']);
  this.executeCharTest('Ô∏ø', ['presentation form for vertical left angle bracket', 'presentation form for vertical left angle bracket', 'glyph for vertical opening angle bracket']);
  this.executeCharTest('ÔπÄ', ['presentation form for vertical right angle bracket', 'presentation form for vertical right angle bracket', 'glyph for vertical closing angle bracket']);
  this.executeCharTest('ÔπÅ', ['presentation form for vertical left corner bracket', 'presentation form for vertical left corner bracket', 'glyph for vertical opening corner bracket']);
  this.executeCharTest('ÔπÇ', ['presentation form for vertical right corner bracket', 'presentation form for vertical right corner bracket', 'glyph for vertical closing corner bracket']);
  this.executeCharTest('ÔπÉ', ['presentation form for vertical left white corner bracket', 'presentation form for vertical left white corner bracket', 'glyph for vertical opening white corner bracket']);
  this.executeCharTest('ÔπÑ', ['presentation form for vertical right white corner bracket', 'presentation form for vertical right white corner bracket', 'glyph for vertical closing white corner bracket']);
  this.executeCharTest('Ôπá', ['presentation form for vertical left square bracket', 'presentation form for vertical left square bracket', 'presentation form for vertical left square bracket']);
  this.executeCharTest('Ôπà', ['presentation form for vertical right square bracket', 'presentation form for vertical right square bracket', 'presentation form for vertical right square bracket']);
  this.executeCharTest('Ôπô', ['small left parenthesis', 'small left parenthesis', 'small opening parenthesis']);
  this.executeCharTest('Ôπö', ['small right parenthesis', 'small right parenthesis', 'small closing parenthesis']);
  this.executeCharTest('Ôπõ', ['small left curly bracket', 'small left curly bracket', 'small opening curly bracket']);
  this.executeCharTest('Ôπú', ['small right curly bracket', 'small right curly bracket', 'small closing curly bracket']);
  this.executeCharTest('Ôπù', ['small left tortoise shell bracket', 'small left tortoise shell bracket', 'small opening tortoise shell bracket']);
  this.executeCharTest('Ôπû', ['small right tortoise shell bracket', 'small right tortoise shell bracket', 'small closing tortoise shell bracket']);
  this.executeCharTest('Ôºà', ['fullwidth left parenthesis', 'fullwidth left parenthesis', 'fullwidth opening parenthesis']);
  this.executeCharTest('Ôºâ', ['fullwidth right parenthesis', 'fullwidth right parenthesis', 'fullwidth closing parenthesis']);
  this.executeCharTest('Ôºª', ['fullwidth left square bracket', 'fullwidth left square bracket', 'fullwidth opening square bracket']);
  this.executeCharTest('ÔºΩ', ['fullwidth right square bracket', 'fullwidth right square bracket', 'fullwidth closing square bracket']);
  this.executeCharTest('ÔΩõ', ['fullwidth left curly bracket', 'fullwidth left curly bracket', 'fullwidth opening curly bracket']);
  this.executeCharTest('ÔΩù', ['fullwidth right curly bracket', 'fullwidth right curly bracket', 'fullwidth closing curly bracket']);
  this.executeCharTest('ÔΩü', ['fullwidth white left parenthesis', 'fullwidth white left parenthesis', 'fullwidth white left parenthesis']);
  this.executeCharTest('ÔΩ†', ['fullwidth white right parenthesis', 'fullwidth white right parenthesis', 'fullwidth white right parenthesis']);
  this.executeCharTest('ÔΩ¢', ['halfwidth left corner bracket', 'halfwidth left corner bracket', 'halfwidth opening corner bracket']);
  this.executeCharTest('ÔΩ£', ['halfwidth right corner bracket', 'halfwidth right corner bracket', 'halfwidth closing corner bracket']);
  this.executeCharTest('¬≤', ['superscript digit two', 'square', 'superscript two']);
  this.executeCharTest('¬≥', ['superscript digit three', 'cube', 'superscript three']);
  this.executeCharTest('¬π', ['superscript digit one', 'super one', 'superscript one']);
  this.executeCharTest('¬º', ['vulgar fraction one quarter', 'one quarter', 'fraction one quarter']);
  this.executeCharTest('¬Ω', ['vulgar fraction one half', 'one half', 'fraction one half']);
  this.executeCharTest('¬æ', ['vulgar fraction three quarters', 'three quarters', 'fraction three quarters']);
  this.executeCharTest('‚Å∞', ['superscript zero', 'super zero', 'super zero']);
  this.executeCharTest('‚Å¥', ['superscript digit four', 'super four', 'superscript four']);
  this.executeCharTest('‚Åµ', ['superscript digit five', 'super five', 'superscript five']);
  this.executeCharTest('‚Å∂', ['superscript digit six', 'super six', 'superscript six']);
  this.executeCharTest('‚Å∑', ['superscript digit seven', 'super seven', 'superscript seven']);
  this.executeCharTest('‚Å∏', ['superscript digit eight', 'super eight', 'superscript eight']);
  this.executeCharTest('‚Åπ', ['superscript digit nine', 'super nine', 'superscript nine']);
  this.executeCharTest('‚ÇÄ', ['subscript digit zero', 'sub zero', 'subscript zero']);
  this.executeCharTest('‚ÇÅ', ['subscript digit one', 'sub one', 'subscript one']);
  this.executeCharTest('‚ÇÇ', ['subscript digit two', 'sub two', 'subscript two']);
  this.executeCharTest('‚ÇÉ', ['subscript digit three', 'sub three', 'subscript three']);
  this.executeCharTest('‚ÇÑ', ['subscript digit four', 'sub four', 'subscript four']);
  this.executeCharTest('‚ÇÖ', ['subscript digit five', 'sub five', 'subscript five']);
  this.executeCharTest('‚ÇÜ', ['subscript digit six', 'sub six', 'subscript six']);
  this.executeCharTest('‚Çá', ['subscript digit seven', 'sub seven', 'subscript seven']);
  this.executeCharTest('‚Çà', ['subscript digit eight', 'sub eight', 'subscript eight']);
  this.executeCharTest('‚Çâ', ['subscript digit nine', 'sub nine', 'subscript nine']);
  this.executeCharTest('‚Öê', ['vulgar fraction one seventh', 'one seventh', 'one seventh']);
  this.executeCharTest('‚Öë', ['vulgar fraction one ninth', 'one ninth', 'one ninth']);
  this.executeCharTest('‚Öí', ['vulgar fraction one tenth', 'one tenth', 'one tenth']);
  this.executeCharTest('‚Öì', ['vulgar fraction one third', 'one third', 'fraction one third']);
  this.executeCharTest('‚Öî', ['vulgar fraction two thirds', 'two thirds', 'fraction two thirds']);
  this.executeCharTest('‚Öï', ['vulgar fraction one fifth', 'one fifth', 'fraction one fifth']);
  this.executeCharTest('‚Öñ', ['vulgar fraction two fifths', 'two fifths', 'fraction two fifths']);
  this.executeCharTest('‚Öó', ['vulgar fraction three fifths', 'three fifths', 'fraction three fifths']);
  this.executeCharTest('‚Öò', ['vulgar fraction four fifths', 'four fifths', 'fraction four fifths']);
  this.executeCharTest('‚Öô', ['vulgar fraction one sixth', 'one sixth', 'fraction one sixth']);
  this.executeCharTest('‚Öö', ['vulgar fraction five sixths', 'five sixths', 'fraction five sixths']);
  this.executeCharTest('‚Öõ', ['vulgar fraction one eighth', 'one eighth', 'fraction one eighth']);
  this.executeCharTest('‚Öú', ['vulgar fraction three eighths', 'three eighths', 'fraction three eighths']);
  this.executeCharTest('‚Öù', ['vulgar fraction five eighths', 'five eighths', 'fraction five eighths']);
  this.executeCharTest('‚Öû', ['vulgar fraction seven eighths', 'seven eighths', 'fraction seven eighths']);
  this.executeCharTest('‚Öü', ['fraction numerator one', 'numerator one', 'numerator one']);
  this.executeCharTest('‚Üâ', ['vulgar fraction zero thirds', 'zero thirds', 'zero thirds']);
  this.executeCharTest('‚ë†', ['circled digit one', 'circled one', 'circled one']);
  this.executeCharTest('‚ë°', ['circled digit two', 'circled two', 'circled two']);
  this.executeCharTest('‚ë¢', ['circled digit three', 'circled three', 'circled three']);
  this.executeCharTest('‚ë£', ['circled digit four', 'circled four', 'circled four']);
  this.executeCharTest('‚ë§', ['circled digit five', 'circled five', 'circled five']);
  this.executeCharTest('‚ë•', ['circled digit six', 'circled six', 'circled six']);
  this.executeCharTest('‚ë¶', ['circled digit seven', 'circled seven', 'circled seven']);
  this.executeCharTest('‚ëß', ['circled digit eight', 'circled eight', 'circled eight']);
  this.executeCharTest('‚ë®', ['circled digit nine', 'circled nine', 'circled nine']);
  this.executeCharTest('‚ë©', ['circled number ten', 'circled ten', 'circled ten']);
  this.executeCharTest('‚ë™', ['circled number eleven', 'circled eleven', 'circled eleven']);
  this.executeCharTest('‚ë´', ['circled number twelve', 'circled twelve', 'circled twelve']);
  this.executeCharTest('‚ë¨', ['circled number thirteen', 'circled thirteen', 'circled thirteen']);
  this.executeCharTest('‚ë≠', ['circled number fourteen', 'circled fourteen', 'circled fourteen']);
  this.executeCharTest('‚ëÆ', ['circled number fifteen', 'circled fifteen', 'circled fifteen']);
  this.executeCharTest('‚ëØ', ['circled number sixteen', 'circled sixteen', 'circled sixteen']);
  this.executeCharTest('‚ë∞', ['circled number seventeen', 'circled seventeen', 'circled seventeen']);
  this.executeCharTest('‚ë±', ['circled number eighteen', 'circled eighteen', 'circled eighteen']);
  this.executeCharTest('‚ë≤', ['circled number nineteen', 'circled nineteen', 'circled nineteen']);
  this.executeCharTest('‚ë≥', ['circled number twenty', 'circled twenty', 'circled twenty']);
  this.executeCharTest('‚ë¥', ['parenthesized digit one', 'parenthesized one', 'parenthesized one']);
  this.executeCharTest('‚ëµ', ['parenthesized digit two', 'parenthesized two', 'parenthesized two']);
  this.executeCharTest('‚ë∂', ['parenthesized digit three', 'parenthesized three', 'parenthesized three']);
  this.executeCharTest('‚ë∑', ['parenthesized digit four', 'parenthesized four', 'parenthesized four']);
  this.executeCharTest('‚ë∏', ['parenthesized digit five', 'parenthesized five', 'parenthesized five']);
  this.executeCharTest('‚ëπ', ['parenthesized digit six', 'parenthesized six', 'parenthesized six']);
  this.executeCharTest('‚ë∫', ['parenthesized digit seven', 'parenthesized seven', 'parenthesized seven']);
  this.executeCharTest('‚ëª', ['parenthesized digit eight', 'parenthesized eight', 'parenthesized eight']);
  this.executeCharTest('‚ëº', ['parenthesized digit nine', 'parenthesized nine', 'parenthesized nine']);
  this.executeCharTest('‚ëΩ', ['parenthesized number ten', 'parenthesized ten', 'parenthesized ten']);
  this.executeCharTest('‚ëæ', ['parenthesized number eleven', 'parenthesized eleven', 'parenthesized eleven']);
  this.executeCharTest('‚ëø', ['parenthesized number twelve', 'parenthesized twelve', 'parenthesized twelve']);
  this.executeCharTest('‚íÄ', ['parenthesized number thirteen', 'parenthesized thirteen', 'parenthesized thirteen']);
  this.executeCharTest('‚íÅ', ['parenthesized number fourteen', 'parenthesized fourteen', 'parenthesized fourteen']);
  this.executeCharTest('‚íÇ', ['parenthesized number fifteen', 'parenthesized fifteen', 'parenthesized fifteen']);
  this.executeCharTest('‚íÉ', ['parenthesized number sixteen', 'parenthesized sixteen', 'parenthesized sixteen']);
  this.executeCharTest('‚íÑ', ['parenthesized number seventeen', 'parenthesized seventeen', 'parenthesized seventeen']);
  this.executeCharTest('‚íÖ', ['parenthesized number eighteen', 'parenthesized eighteen', 'parenthesized eighteen']);
  this.executeCharTest('‚íÜ', ['parenthesized number nineteen', 'parenthesized nineteen', 'parenthesized nineteen']);
  this.executeCharTest('‚íá', ['parenthesized number twenty', 'parenthesized twenty', 'parenthesized twenty']);
  this.executeCharTest('‚íà', ['digit one full stop', 'one period', 'digit one period']);
  this.executeCharTest('‚íâ', ['digit two full stop', 'two period', 'digit two period']);
  this.executeCharTest('‚íä', ['digit three full stop', 'three period', 'digit three period']);
  this.executeCharTest('‚íã', ['digit four full stop', 'four period', 'digit four period']);
  this.executeCharTest('‚íå', ['digit five full stop', 'five period', 'digit five period']);
  this.executeCharTest('‚íç', ['digit six full stop', 'six period', 'digit six period']);
  this.executeCharTest('‚íé', ['digit seven full stop', 'seven period', 'digit seven period']);
  this.executeCharTest('‚íè', ['digit eight full stop', 'eight period', 'digit eight period']);
  this.executeCharTest('‚íê', ['digit nine full stop', 'nine period', 'digit nine period']);
  this.executeCharTest('‚íë', ['number ten full stop', 'ten period', 'number ten period']);
  this.executeCharTest('‚íí', ['number eleven full stop', 'eleven period', 'number eleven period']);
  this.executeCharTest('‚íì', ['number twelve full stop', 'twelve period', 'number twelve period']);
  this.executeCharTest('‚íî', ['number thirteen full stop', 'thirteen period', 'number thirteen period']);
  this.executeCharTest('‚íï', ['number fourteen full stop', 'fourteen period', 'number fourteen period']);
  this.executeCharTest('‚íñ', ['number fifteen full stop', 'fifteen period', 'number fifteen period']);
  this.executeCharTest('‚íó', ['number sixteen full stop', 'sixteen period', 'number sixteen period']);
  this.executeCharTest('‚íò', ['number seventeen full stop', 'seventeen period', 'number seventeen period']);
  this.executeCharTest('‚íô', ['number eighteen full stop', 'eighteen period', 'number eighteen period']);
  this.executeCharTest('‚íö', ['number nineteen full stop', 'nineteen period', 'number nineteen period']);
  this.executeCharTest('‚íõ', ['number twenty full stop', 'twenty period', 'number twenty period']);
  this.executeCharTest('‚ì™', ['circled digit zero', 'circled zero', 'circled zero']);
  this.executeCharTest('‚ì´', ['negative circled number eleven', 'negative circled eleven', 'negative circled eleven']);
  this.executeCharTest('‚ì¨', ['negative circled number twelve', 'negative circled twelve', 'negative circled twelve']);
  this.executeCharTest('‚ì≠', ['negative circled number thirteen', 'negative circled thirteen', 'negative circled thirteen']);
  this.executeCharTest('‚ìÆ', ['negative circled number fourteen', 'negative circled fourteen', 'negative circled fourteen']);
  this.executeCharTest('‚ìØ', ['negative circled number fifteen', 'negative circled fifteen', 'negative circled fifteen']);
  this.executeCharTest('‚ì∞', ['negative circled number sixteen', 'negative circled sixteen', 'negative circled sixteen']);
  this.executeCharTest('‚ì±', ['negative circled number seventeen', 'negative circled seventeen', 'negative circled seventeen']);
  this.executeCharTest('‚ì≤', ['negative circled number eighteen', 'negative circled eighteen', 'negative circled eighteen']);
  this.executeCharTest('‚ì≥', ['negative circled number nineteen', 'negative circled nineteen', 'negative circled nineteen']);
  this.executeCharTest('‚ì¥', ['negative circled number twenty', 'negative circled twenty', 'negative circled twenty']);
  this.executeCharTest('‚ìµ', ['double circled digit one', 'double circled one', 'double circled one']);
  this.executeCharTest('‚ì∂', ['double circled digit two', 'double circled two', 'double circled two']);
  this.executeCharTest('‚ì∑', ['double circled digit three', 'double circled three', 'double circled three']);
  this.executeCharTest('‚ì∏', ['double circled digit four', 'double circled four', 'double circled four']);
  this.executeCharTest('‚ìπ', ['double circled digit five', 'double circled five', 'double circled five']);
  this.executeCharTest('‚ì∫', ['double circled digit six', 'double circled six', 'double circled six']);
  this.executeCharTest('‚ìª', ['double circled digit seven', 'double circled seven', 'double circled seven']);
  this.executeCharTest('‚ìº', ['double circled digit eight', 'double circled eight', 'double circled eight']);
  this.executeCharTest('‚ìΩ', ['double circled digit nine', 'double circled nine', 'double circled nine']);
  this.executeCharTest('‚ìæ', ['double circled number ten', 'double circled ten', 'double circled ten']);
  this.executeCharTest('‚ìø', ['negative circled digit zero', 'negative circled zero', 'negative circled zero']);
  this.executeCharTest('‚ù∂', ['dingbat negative circled digit one', 'inverse circled one', 'inverse circled digit one']);
  this.executeCharTest('‚ù∑', ['dingbat negative circled digit two', 'inverse circled two', 'inverse circled digit two']);
  this.executeCharTest('‚ù∏', ['dingbat negative circled digit three', 'inverse circled three', 'inverse circled digit three']);
  this.executeCharTest('‚ùπ', ['dingbat negative circled digit four', 'inverse circled four', 'inverse circled digit four']);
  this.executeCharTest('‚ù∫', ['dingbat negative circled digit five', 'inverse circled five', 'inverse circled digit five']);
  this.executeCharTest('‚ùª', ['dingbat negative circled digit six', 'inverse circled six', 'inverse circled digit six']);
  this.executeCharTest('‚ùº', ['dingbat negative circled digit seven', 'inverse circled seven', 'inverse circled digit seven']);
  this.executeCharTest('‚ùΩ', ['dingbat negative circled digit eight', 'inverse circled eight', 'inverse circled digit eight']);
  this.executeCharTest('‚ùæ', ['dingbat negative circled digit nine', 'inverse circled nine', 'inverse circled digit nine']);
  this.executeCharTest('‚ùø', ['dingbat negative circled number ten', 'inverse circled ten', 'inverse circled number ten']);
  this.executeCharTest('‚ûÄ', ['dingbat circled sans serif digit one', 'circled one', 'circled sans serif digit one']);
  this.executeCharTest('‚ûÅ', ['dingbat circled sans serif digit two', 'circled two', 'circled sans serif digit two']);
  this.executeCharTest('‚ûÇ', ['dingbat circled sans serif digit three', 'circled three', 'circled sans serif digit three']);
  this.executeCharTest('‚ûÉ', ['dingbat circled sans serif digit four', 'circled four', 'circled sans serif digit four']);
  this.executeCharTest('‚ûÑ', ['dingbat circled sans serif digit five', 'circled five', 'circled sans serif digit five']);
  this.executeCharTest('‚ûÖ', ['dingbat circled sans serif digit six', 'circled six', 'circled sans serif digit six']);
  this.executeCharTest('‚ûÜ', ['dingbat circled sans serif digit seven', 'circled seven', 'circled sans serif digit seven']);
  this.executeCharTest('‚ûá', ['dingbat circled sans serif digit eight', 'circled eight', 'circled sans serif digit eight']);
  this.executeCharTest('‚ûà', ['dingbat circled sans serif digit nine', 'circled nine', 'circled sans serif digit nine']);
  this.executeCharTest('‚ûâ', ['dingbat circled sans serif number ten', 'circled ten', 'circled sans serif number ten']);
  this.executeCharTest('‚ûä', ['dingbat negative circled sans serif digit one', 'inverse circled one', 'inverse circled sans serif digit one']);
  this.executeCharTest('‚ûã', ['dingbat negative circled sans serif digit two', 'inverse circled two', 'inverse circled sans serif digit two']);
  this.executeCharTest('‚ûå', ['dingbat negative circled sans serif digit three', 'inverse circled three', 'inverse circled sans serif digit three']);
  this.executeCharTest('‚ûç', ['dingbat negative circled sans serif digit four', 'inverse circled four', 'inverse circled sans serif digit four']);
  this.executeCharTest('‚ûé', ['dingbat negative circled sans serif digit five', 'inverse circled five', 'inverse circled sans serif digit five']);
  this.executeCharTest('‚ûè', ['dingbat negative circled sans serif digit six', 'inverse circled six', 'inverse circled sans serif digit six']);
  this.executeCharTest('‚ûê', ['dingbat negative circled sans serif digit seven', 'inverse circled seven', 'inverse circled sans serif digit seven']);
  this.executeCharTest('‚ûë', ['dingbat negative circled sans serif digit eight', 'inverse circled eight', 'inverse circled sans serif digit eight']);
  this.executeCharTest('‚ûí', ['dingbat negative circled sans serif digit nine', 'inverse circled nine', 'inverse circled sans serif digit nine']);
  this.executeCharTest('‚ûì', ['dingbat negative circled sans serif number ten', 'inverse circled ten', 'inverse circled sans serif number ten']);
  this.executeCharTest('„âà', ['circled number ten on black square', 'circled ten on black square', 'circled ten on black square']);
  this.executeCharTest('„ââ', ['circled number twenty on black square', 'circled twenty on black square', 'circled twenty on black square']);
  this.executeCharTest('„âä', ['circled number thirty on black square', 'circled thirty on black square', 'circled thirty on black square']);
  this.executeCharTest('„âã', ['circled number forty on black square', 'circled forty on black square', 'circled forty on black square']);
  this.executeCharTest('„âå', ['circled number fifty on black square', 'circled fifty on black square', 'circled fifty on black square']);
  this.executeCharTest('„âç', ['circled number sixty on black square', 'circled sixty on black square', 'circled sixty on black square']);
  this.executeCharTest('„âé', ['circled number seventy on black square', 'circled seventy on black square', 'circled seventy on black square']);
  this.executeCharTest('„âè', ['circled number eighty on black square', 'circled eighty on black square', 'circled eighty on black square']);
  this.executeCharTest('„âë', ['circled number twenty one', 'circled twenty one', 'circled twenty one']);
  this.executeCharTest('„âí', ['circled number twenty two', 'circled twenty two', 'circled twenty two']);
  this.executeCharTest('„âì', ['circled number twenty three', 'circled twenty three', 'circled twenty three']);
  this.executeCharTest('„âî', ['circled number twenty four', 'circled twenty four', 'circled twenty four']);
  this.executeCharTest('„âï', ['circled number twenty five', 'circled twenty five', 'circled twenty five']);
  this.executeCharTest('„âñ', ['circled number twenty six', 'circled twenty six', 'circled twenty six']);
  this.executeCharTest('„âó', ['circled number twenty seven', 'circled twenty seven', 'circled twenty seven']);
  this.executeCharTest('„âò', ['circled number twenty eight', 'circled twenty eight', 'circled twenty eight']);
  this.executeCharTest('„âô', ['circled number twenty nine', 'circled twenty nine', 'circled twenty nine']);
  this.executeCharTest('„âö', ['circled number thirty', 'circled thirty', 'circled thirty']);
  this.executeCharTest('„âõ', ['circled number thirty one', 'circled thirty one', 'circled thirty one']);
  this.executeCharTest('„âú', ['circled number thirty two', 'circled thirty two', 'circled thirty two']);
  this.executeCharTest('„âù', ['circled number thirty three', 'circled thirty three', 'circled thirty three']);
  this.executeCharTest('„âû', ['circled number thirty four', 'circled thirty four', 'circled thirty four']);
  this.executeCharTest('„âü', ['circled number thirty five', 'circled thirty five', 'circled thirty five']);
  this.executeCharTest('„ä±', ['circled number thirty six', 'circled thirty six', 'circled thirty six']);
  this.executeCharTest('„ä≤', ['circled number thirty seven', 'circled thirty seven', 'circled thirty seven']);
  this.executeCharTest('„ä≥', ['circled number thirty eight', 'circled thirty eight', 'circled thirty eight']);
  this.executeCharTest('„ä¥', ['circled number thirty nine', 'circled thirty nine', 'circled thirty nine']);
  this.executeCharTest('„äµ', ['circled number forty', 'circled forty', 'circled forty']);
  this.executeCharTest('„ä∂', ['circled number forty one', 'circled forty one', 'circled forty one']);
  this.executeCharTest('„ä∑', ['circled number forty two', 'circled forty two', 'circled forty two']);
  this.executeCharTest('„ä∏', ['circled number forty three', 'circled forty three', 'circled forty three']);
  this.executeCharTest('„äπ', ['circled number forty four', 'circled forty four', 'circled forty four']);
  this.executeCharTest('„ä∫', ['circled number forty five', 'circled forty five', 'circled forty five']);
  this.executeCharTest('„äª', ['circled number forty six', 'circled forty six', 'circled forty six']);
  this.executeCharTest('„äº', ['circled number forty seven', 'circled forty seven', 'circled forty seven']);
  this.executeCharTest('„äΩ', ['circled number forty eight', 'circled forty eight', 'circled forty eight']);
  this.executeCharTest('„äæ', ['circled number forty nine', 'circled forty nine', 'circled forty nine']);
  this.executeCharTest('„äø', ['circled number fifty', 'circled fifty', 'circled fifty']);
  this.executeCharTest('Ôºê', ['fullwidth digit zero', 'zero', 'zero']);
  this.executeCharTest('Ôºë', ['fullwidth digit one', 'one', 'one']);
  this.executeCharTest('Ôºí', ['fullwidth digit two', 'two', 'two']);
  this.executeCharTest('Ôºì', ['fullwidth digit three', 'three', 'three']);
  this.executeCharTest('Ôºî', ['fullwidth digit four', 'four', 'four']);
  this.executeCharTest('Ôºï', ['fullwidth digit five', 'five', 'five']);
  this.executeCharTest('Ôºñ', ['fullwidth digit six', 'six', 'six']);
  this.executeCharTest('Ôºó', ['fullwidth digit seven', 'seven', 'seven']);
  this.executeCharTest('Ôºò', ['fullwidth digit eight', 'eight', 'eight']);
  this.executeCharTest('Ôºô', ['fullwidth digit nine', 'nine', 'nine']);
  this.executeCharTest('ùüé', ['mathematical bold digit zero', 'bold zero', 'bold digit zero']);
  this.executeCharTest('ùüè', ['mathematical bold digit one', 'bold one', 'bold digit one']);
  this.executeCharTest('ùüê', ['mathematical bold digit two', 'bold two', 'bold digit two']);
  this.executeCharTest('ùüë', ['mathematical bold digit three', 'bold three', 'bold digit three']);
  this.executeCharTest('ùüí', ['mathematical bold digit four', 'bold four', 'bold digit four']);
  this.executeCharTest('ùüì', ['mathematical bold digit five', 'bold five', 'bold digit five']);
  this.executeCharTest('ùüî', ['mathematical bold digit six', 'bold six', 'bold digit six']);
  this.executeCharTest('ùüï', ['mathematical bold digit seven', 'bold seven', 'bold digit seven']);
  this.executeCharTest('ùüñ', ['mathematical bold digit eight', 'bold eight', 'bold digit eight']);
  this.executeCharTest('ùüó', ['mathematical bold digit nine', 'bold nine', 'bold digit nine']);
  this.executeCharTest('ùüò', ['mathematical double struck digit zero', 'blackboard zero', 'double struck zero']);
  this.executeCharTest('ùüô', ['mathematical double struck digit one', 'blackboard one', 'double struck one']);
  this.executeCharTest('ùüö', ['mathematical double struck digit two', 'blackboard two', 'double struck two']);
  this.executeCharTest('ùüõ', ['mathematical double struck digit three', 'blackboard three', 'double struck three']);
  this.executeCharTest('ùüú', ['mathematical double struck digit four', 'blackboard four', 'double struck four']);
  this.executeCharTest('ùüù', ['mathematical double struck digit five', 'blackboard five', 'double struck five']);
  this.executeCharTest('ùüû', ['mathematical double struck digit six', 'blackboard six', 'double struck six']);
  this.executeCharTest('ùüü', ['mathematical double struck digit seven', 'blackboard seven', 'double struck seven']);
  this.executeCharTest('ùü†', ['mathematical double struck digit eight', 'blackboard eight', 'double struck eight']);
  this.executeCharTest('ùü°', ['mathematical double struck digit nine', 'blackboard nine', 'double struck nine']);
  this.executeCharTest('ùü¢', ['mathematical sans serif digit zero', 'sans serif zero', 'sans serif digit zero']);
  this.executeCharTest('ùü£', ['mathematical sans serif digit one', 'sans serif one', 'sans serif digit one']);
  this.executeCharTest('ùü§', ['mathematical sans serif digit two', 'sans serif two', 'sans serif digit two']);
  this.executeCharTest('ùü•', ['mathematical sans serif digit three', 'sans serif three', 'sans serif digit three']);
  this.executeCharTest('ùü¶', ['mathematical sans serif digit four', 'sans serif four', 'sans serif digit four']);
  this.executeCharTest('ùüß', ['mathematical sans serif digit five', 'sans serif five', 'sans serif digit five']);
  this.executeCharTest('ùü®', ['mathematical sans serif digit six', 'sans serif six', 'sans serif digit six']);
  this.executeCharTest('ùü©', ['mathematical sans serif digit seven', 'sans serif seven', 'sans serif digit seven']);
  this.executeCharTest('ùü™', ['mathematical sans serif digit eight', 'sans serif eight', 'sans serif digit eight']);
  this.executeCharTest('ùü´', ['mathematical sans serif digit nine', 'sans serif nine', 'sans serif digit nine']);
  this.executeCharTest('ùü¨', ['mathematical sans serif bold digit zero', 'sans serif bold zero', 'sans serif bold digit zero']);
  this.executeCharTest('ùü≠', ['mathematical sans serif bold digit one', 'sans serif bold one', 'sans serif bold digit one']);
  this.executeCharTest('ùüÆ', ['mathematical sans serif bold digit two', 'sans serif bold two', 'sans serif bold digit two']);
  this.executeCharTest('ùüØ', ['mathematical sans serif bold digit three', 'sans serif bold three', 'sans serif bold digit three']);
  this.executeCharTest('ùü∞', ['mathematical sans serif bold digit four', 'sans serif bold four', 'sans serif bold digit four']);
  this.executeCharTest('ùü±', ['mathematical sans serif bold digit five', 'sans serif bold five', 'sans serif bold digit five']);
  this.executeCharTest('ùü≤', ['mathematical sans serif bold digit six', 'sans serif bold six', 'sans serif bold digit six']);
  this.executeCharTest('ùü≥', ['mathematical sans serif bold digit seven', 'sans serif bold seven', 'sans serif bold digit seven']);
  this.executeCharTest('ùü¥', ['mathematical sans serif bold digit eight', 'sans serif bold eight', 'sans serif bold digit eight']);
  this.executeCharTest('ùüµ', ['mathematical sans serif bold digit nine', 'sans serif bold nine', 'sans serif bold digit nine']);
  this.executeCharTest('ùü∂', ['mathematical monospace digit zero', 'thin zero', 'monospace zero']);
  this.executeCharTest('ùü∑', ['mathematical monospace digit one', 'thin one', 'monospace one']);
  this.executeCharTest('ùü∏', ['mathematical monospace digit two', 'thin two', 'monospace two']);
  this.executeCharTest('ùüπ', ['mathematical monospace digit three', 'thin three', 'monospace three']);
  this.executeCharTest('ùü∫', ['mathematical monospace digit four', 'thin four', 'monospace four']);
  this.executeCharTest('ùüª', ['mathematical monospace digit five', 'thin five', 'monospace five']);
  this.executeCharTest('ùüº', ['mathematical monospace digit six', 'thin six', 'monospace six']);
  this.executeCharTest('ùüΩ', ['mathematical monospace digit seven', 'thin seven', 'monospace seven']);
  this.executeCharTest('ùüæ', ['mathematical monospace digit eight', 'thin eight', 'monospace eight']);
  this.executeCharTest('ùüø', ['mathematical monospace digit nine', 'thin nine', 'monospace nine']);
  this.executeCharTest('üÑÄ', ['digit zero full stop', 'zero period', 'zero period']);
  this.executeCharTest('üÑÅ', ['digit zero comma', 'zero comma', 'zero comma']);
  this.executeCharTest('üÑÇ', ['digit one comma', 'one comma', 'one comma']);
  this.executeCharTest('üÑÉ', ['digit two comma', 'two comma', 'two comma']);
  this.executeCharTest('üÑÑ', ['digit three comma', 'three comma', 'three comma']);
  this.executeCharTest('üÑÖ', ['digit four comma', 'four comma', 'four comma']);
  this.executeCharTest('üÑÜ', ['digit five comma', 'five comma', 'five comma']);
  this.executeCharTest('üÑá', ['digit six comma', 'six comma', 'six comma']);
  this.executeCharTest('üÑà', ['digit seven comma', 'seven comma', 'seven comma']);
  this.executeCharTest('üÑâ', ['digit eight comma', 'eight comma', 'eight comma']);
  this.executeCharTest('üÑä', ['digit nine comma', 'nine comma', 'nine comma']);
  this.executeCharTest('‚îÄ', ['box drawings light horizontal', 'box drawings light horizontal', 'forms light horizontal']);
  this.executeCharTest('‚îÅ', ['box drawings heavy horizontal', 'box drawings heavy horizontal', 'forms heavy horizontal']);
  this.executeCharTest('‚îÇ', ['box drawings light vertical', 'box drawings light vertical', 'forms light vertical']);
  this.executeCharTest('‚îÉ', ['box drawings heavy vertical', 'box drawings heavy vertical', 'forms heavy vertical']);
  this.executeCharTest('‚îÑ', ['box drawings light triple dash horizontal', 'box drawings light triple dash horizontal', 'forms light triple dash horizontal']);
  this.executeCharTest('‚îÖ', ['box drawings heavy triple dash horizontal', 'box drawings heavy triple dash horizontal', 'forms heavy triple dash horizontal']);
  this.executeCharTest('‚îÜ', ['box drawings light triple dash vertical', 'box drawings light triple dash vertical', 'forms light triple dash vertical']);
  this.executeCharTest('‚îá', ['box drawings heavy triple dash vertical', 'box drawings heavy triple dash vertical', 'forms heavy triple dash vertical']);
  this.executeCharTest('‚îà', ['box drawings light quadruple dash horizontal', 'box drawings light quadruple dash horizontal', 'forms light quadruple dash horizontal']);
  this.executeCharTest('‚îâ', ['box drawings heavy quadruple dash horizontal', 'box drawings heavy quadruple dash horizontal', 'forms heavy quadruple dash horizontal']);
  this.executeCharTest('‚îä', ['box drawings light quadruple dash vertical', 'box drawings light quadruple dash vertical', 'forms light quadruple dash vertical']);
  this.executeCharTest('‚îã', ['box drawings heavy quadruple dash vertical', 'box drawings heavy quadruple dash vertical', 'forms heavy quadruple dash vertical']);
  this.executeCharTest('‚îå', ['box drawings light down and right', 'box drawings light down and right', 'forms light down and right']);
  this.executeCharTest('‚îç', ['box drawings down light and right heavy', 'box drawings down light and right heavy', 'forms down light and right heavy']);
  this.executeCharTest('‚îé', ['box drawings down heavy and right light', 'box drawings down heavy and right light', 'forms down heavy and right light']);
  this.executeCharTest('‚îè', ['box drawings heavy down and right', 'box drawings heavy down and right', 'forms heavy down and right']);
  this.executeCharTest('‚îê', ['box drawings light down and left', 'box drawings light down and left', 'forms light down and left']);
  this.executeCharTest('‚îë', ['box drawings down light and left heavy', 'box drawings down light and left heavy', 'forms down light and left heavy']);
  this.executeCharTest('‚îí', ['box drawings down heavy and left light', 'box drawings down heavy and left light', 'forms down heavy and left light']);
  this.executeCharTest('‚îì', ['box drawings heavy down and left', 'box drawings heavy down and left', 'forms heavy down and left']);
  this.executeCharTest('‚îî', ['box drawings light up and right', 'box drawings light up and right', 'forms light up and right']);
  this.executeCharTest('‚îï', ['box drawings up light and right heavy', 'box drawings up light and right heavy', 'forms up light and right heavy']);
  this.executeCharTest('‚îñ', ['box drawings up heavy and right light', 'box drawings up heavy and right light', 'forms up heavy and right light']);
  this.executeCharTest('‚îó', ['box drawings heavy up and right', 'box drawings heavy up and right', 'forms heavy up and right']);
  this.executeCharTest('‚îò', ['box drawings light up and left', 'box drawings light up and left', 'forms light up and left']);
  this.executeCharTest('‚îô', ['box drawings up light and left heavy', 'box drawings up light and left heavy', 'forms up light and left heavy']);
  this.executeCharTest('‚îö', ['box drawings up heavy and left light', 'box drawings up heavy and left light', 'forms up heavy and left light']);
  this.executeCharTest('‚îõ', ['box drawings heavy up and left', 'box drawings heavy up and left', 'forms heavy up and left']);
  this.executeCharTest('‚îú', ['box drawings light vertical and right', 'box drawings light vertical and right', 'forms light vertical and right']);
  this.executeCharTest('‚îù', ['box drawings vertical light and right heavy', 'box drawings vertical light and right heavy', 'forms vertical light and right heavy']);
  this.executeCharTest('‚îû', ['box drawings up heavy and right down light', 'box drawings up heavy and right down light', 'forms up heavy and right down light']);
  this.executeCharTest('‚îü', ['box drawings down heavy and right up light', 'box drawings down heavy and right up light', 'forms down heavy and right up light']);
  this.executeCharTest('‚î†', ['box drawings vertical heavy and right light', 'box drawings vertical heavy and right light', 'forms vertical heavy and right light']);
  this.executeCharTest('‚î°', ['box drawings down light and right up heavy', 'box drawings down light and right up heavy', 'forms down light and right up heavy']);
  this.executeCharTest('‚î¢', ['box drawings up light and right down heavy', 'box drawings up light and right down heavy', 'forms up light and right down heavy']);
  this.executeCharTest('‚î£', ['box drawings heavy vertical and right', 'box drawings heavy vertical and right', 'forms heavy vertical and right']);
  this.executeCharTest('‚î§', ['box drawings light vertical and left', 'box drawings light vertical and left', 'forms light vertical and left']);
  this.executeCharTest('‚î•', ['box drawings vertical light and left heavy', 'box drawings vertical light and left heavy', 'forms vertical light and left heavy']);
  this.executeCharTest('‚î¶', ['box drawings up heavy and left down light', 'box drawings up heavy and left down light', 'forms up heavy and left down light']);
  this.executeCharTest('‚îß', ['box drawings down heavy and left up light', 'box drawings down heavy and left up light', 'forms down heavy and left up light']);
  this.executeCharTest('‚î®', ['box drawings vertical heavy and left light', 'box drawings vertical heavy and left light', 'forms vertical heavy and left light']);
  this.executeCharTest('‚î©', ['box drawings down light and left up heavy', 'box drawings down light and left up heavy', 'forms down light and left up heavy']);
  this.executeCharTest('‚î™', ['box drawings up light and left down heavy', 'box drawings up light and left down heavy', 'forms up light and left down heavy']);
  this.executeCharTest('‚î´', ['box drawings heavy vertical and left', 'box drawings heavy vertical and left', 'forms heavy vertical and left']);
  this.executeCharTest('‚î¨', ['box drawings light down and horizontal', 'box drawings light down and horizontal', 'forms light down and horizontal']);
  this.executeCharTest('‚î≠', ['box drawings left heavy and right down light', 'box drawings left heavy and right down light', 'forms left heavy and right down light']);
  this.executeCharTest('‚îÆ', ['box drawings right heavy and left down light', 'box drawings right heavy and left down light', 'forms right heavy and left down light']);
  this.executeCharTest('‚îØ', ['box drawings down light and horizontal heavy', 'box drawings down light and horizontal heavy', 'forms down light and horizontal heavy']);
  this.executeCharTest('‚î∞', ['box drawings down heavy and horizontal light', 'box drawings down heavy and horizontal light', 'forms down heavy and horizontal light']);
  this.executeCharTest('‚î±', ['box drawings right light and left down heavy', 'box drawings right light and left down heavy', 'forms right light and left down heavy']);
  this.executeCharTest('‚î≤', ['box drawings left light and right down heavy', 'box drawings left light and right down heavy', 'forms left light and right down heavy']);
  this.executeCharTest('‚î≥', ['box drawings heavy down and horizontal', 'box drawings heavy down and horizontal', 'forms heavy down and horizontal']);
  this.executeCharTest('‚î¥', ['box drawings light up and horizontal', 'box drawings light up and horizontal', 'forms light up and horizontal']);
  this.executeCharTest('‚îµ', ['box drawings left heavy and right up light', 'box drawings left heavy and right up light', 'forms left heavy and right up light']);
  this.executeCharTest('‚î∂', ['box drawings right heavy and left up light', 'box drawings right heavy and left up light', 'forms right heavy and left up light']);
  this.executeCharTest('‚î∑', ['box drawings up light and horizontal heavy', 'box drawings up light and horizontal heavy', 'forms up light and horizontal heavy']);
  this.executeCharTest('‚î∏', ['box drawings up heavy and horizontal light', 'box drawings up heavy and horizontal light', 'forms up heavy and horizontal light']);
  this.executeCharTest('‚îπ', ['box drawings right light and left up heavy', 'box drawings right light and left up heavy', 'forms right light and left up heavy']);
  this.executeCharTest('‚î∫', ['box drawings left light and right up heavy', 'box drawings left light and right up heavy', 'forms left light and right up heavy']);
  this.executeCharTest('‚îª', ['box drawings heavy up and horizontal', 'box drawings heavy up and horizontal', 'forms heavy up and horizontal']);
  this.executeCharTest('‚îº', ['box drawings light vertical and horizontal', 'box drawings light vertical and horizontal', 'forms light vertical and horizontal']);
  this.executeCharTest('‚îΩ', ['box drawings left heavy and right vertical light', 'box drawings left heavy and right vertical light', 'forms left heavy and right vertical light']);
  this.executeCharTest('‚îæ', ['box drawings right heavy and left vertical light', 'box drawings right heavy and left vertical light', 'forms right heavy and left vertical light']);
  this.executeCharTest('‚îø', ['box drawings vertical light and horizontal heavy', 'box drawings vertical light and horizontal heavy', 'forms vertical light and horizontal heavy']);
  this.executeCharTest('‚ïÄ', ['box drawings up heavy and down horizontal light', 'box drawings up heavy and down horizontal light', 'forms up heavy and down horizontal light']);
  this.executeCharTest('‚ïÅ', ['box drawings down heavy and up horizontal light', 'box drawings down heavy and up horizontal light', 'forms down heavy and up horizontal light']);
  this.executeCharTest('‚ïÇ', ['box drawings vertical heavy and horizontal light', 'box drawings vertical heavy and horizontal light', 'forms vertical heavy and horizontal light']);
  this.executeCharTest('‚ïÉ', ['box drawings left up heavy and right down light', 'box drawings left up heavy and right down light', 'forms left up heavy and right down light']);
  this.executeCharTest('‚ïÑ', ['box drawings right up heavy and left down light', 'box drawings right up heavy and left down light', 'forms right up heavy and left down light']);
  this.executeCharTest('‚ïÖ', ['box drawings left down heavy and right up light', 'box drawings left down heavy and right up light', 'forms left down heavy and right up light']);
  this.executeCharTest('‚ïÜ', ['box drawings right down heavy and left up light', 'box drawings right down heavy and left up light', 'forms right down heavy and left up light']);
  this.executeCharTest('‚ïá', ['box drawings down light and up horizontal heavy', 'box drawings down light and up horizontal heavy', 'forms down light and up horizontal heavy']);
  this.executeCharTest('‚ïà', ['box drawings up light and down horizontal heavy', 'box drawings up light and down horizontal heavy', 'forms up light and down horizontal heavy']);
  this.executeCharTest('‚ïâ', ['box drawings right light and left vertical heavy', 'box drawings right light and left vertical heavy', 'forms right light and left vertical heavy']);
  this.executeCharTest('‚ïä', ['box drawings left light and right vertical heavy', 'box drawings left light and right vertical heavy', 'forms left light and right vertical heavy']);
  this.executeCharTest('‚ïã', ['box drawings heavy vertical and horizontal', 'box drawings heavy vertical and horizontal', 'forms heavy vertical and horizontal']);
  this.executeCharTest('‚ïå', ['box drawings light double dash horizontal', 'box drawings light double dash horizontal', 'forms light double dash horizontal']);
  this.executeCharTest('‚ïç', ['box drawings heavy double dash horizontal', 'box drawings heavy double dash horizontal', 'forms heavy double dash horizontal']);
  this.executeCharTest('‚ïé', ['box drawings light double dash vertical', 'box drawings light double dash vertical', 'forms light double dash vertical']);
  this.executeCharTest('‚ïè', ['box drawings heavy double dash vertical', 'box drawings heavy double dash vertical', 'forms heavy double dash vertical']);
  this.executeCharTest('‚ïê', ['box drawings double horizontal', 'box drawings double horizontal', 'forms double horizontal']);
  this.executeCharTest('‚ïë', ['box drawings double vertical', 'box drawings double vertical', 'forms double vertical']);
  this.executeCharTest('‚ïí', ['box drawings down single and right double', 'box drawings down single and right double', 'forms down single and right double']);
  this.executeCharTest('‚ïì', ['box drawings down double and right single', 'box drawings down double and right single', 'forms down double and right single']);
  this.executeCharTest('‚ïî', ['box drawings double down and right', 'box drawings double down and right', 'forms double down and right']);
  this.executeCharTest('‚ïï', ['box drawings down single and left double', 'box drawings down single and left double', 'forms down single and left double']);
  this.executeCharTest('‚ïñ', ['box drawings down double and left single', 'box drawings down double and left single', 'forms down double and left single']);
  this.executeCharTest('‚ïó', ['box drawings double down and left', 'box drawings double down and left', 'forms double down and left']);
  this.executeCharTest('‚ïò', ['box drawings up single and right double', 'box drawings up single and right double', 'forms up single and right double']);
  this.executeCharTest('‚ïô', ['box drawings up double and right single', 'box drawings up double and right single', 'forms up double and right single']);
  this.executeCharTest('‚ïö', ['box drawings double up and right', 'box drawings double up and right', 'forms double up and right']);
  this.executeCharTest('‚ïõ', ['box drawings up single and left double', 'box drawings up single and left double', 'forms up single and left double']);
  this.executeCharTest('‚ïú', ['box drawings up double and left single', 'box drawings up double and left single', 'forms up double and left single']);
  this.executeCharTest('‚ïù', ['box drawings double up and left', 'box drawings double up and left', 'forms double up and left']);
  this.executeCharTest('‚ïû', ['box drawings vertical single and right double', 'box drawings vertical single and right double', 'forms vertical single and right double']);
  this.executeCharTest('‚ïü', ['box drawings vertical double and right single', 'box drawings vertical double and right single', 'forms vertical double and right single']);
  this.executeCharTest('‚ï†', ['box drawings double vertical and right', 'box drawings double vertical and right', 'forms double vertical and right']);
  this.executeCharTest('‚ï°', ['box drawings vertical single and left double', 'box drawings vertical single and left double', 'forms vertical single and left double']);
  this.executeCharTest('‚ï¢', ['box drawings vertical double and left single', 'box drawings vertical double and left single', 'forms vertical double and left single']);
  this.executeCharTest('‚ï£', ['box drawings double vertical and left', 'box drawings double vertical and left', 'forms double vertical and left']);
  this.executeCharTest('‚ï§', ['box drawings down single and horizontal double', 'box drawings down single and horizontal double', 'forms down single and horizontal double']);
  this.executeCharTest('‚ï•', ['box drawings down double and horizontal single', 'box drawings down double and horizontal single', 'forms down double and horizontal single']);
  this.executeCharTest('‚ï¶', ['box drawings double down and horizontal', 'box drawings double down and horizontal', 'forms double down and horizontal']);
  this.executeCharTest('‚ïß', ['box drawings up single and horizontal double', 'box drawings up single and horizontal double', 'forms up single and horizontal double']);
  this.executeCharTest('‚ï®', ['box drawings up double and horizontal single', 'box drawings up double and horizontal single', 'forms up double and horizontal single']);
  this.executeCharTest('‚ï©', ['box drawings double up and horizontal', 'box drawings double up and horizontal', 'forms double up and horizontal']);
  this.executeCharTest('‚ï™', ['box drawings vertical single and horizontal double', 'box drawings vertical single and horizontal double', 'forms vertical single and horizontal double']);
  this.executeCharTest('‚ï´', ['box drawings vertical double and horizontal single', 'box drawings vertical double and horizontal single', 'forms vertical double and horizontal single']);
  this.executeCharTest('‚ï¨', ['box drawings double vertical and horizontal', 'box drawings double vertical and horizontal', 'forms double vertical and horizontal']);
  this.executeCharTest('‚ï≠', ['box drawings light arc down and right', 'box drawings light arc down and right', 'forms light arc down and right']);
  this.executeCharTest('‚ïÆ', ['box drawings light arc down and left', 'box drawings light arc down and left', 'forms light arc down and left']);
  this.executeCharTest('‚ïØ', ['box drawings light arc up and left', 'box drawings light arc up and left', 'forms light arc up and left']);
  this.executeCharTest('‚ï∞', ['box drawings light arc up and right', 'box drawings light arc up and right', 'forms light arc up and right']);
  this.executeCharTest('‚ï±', ['box drawings light diagonal upper right to lower left', 'box drawings light diagonal upper right to lower left', 'forms light diagonal upper right to lower left']);
  this.executeCharTest('‚ï≤', ['box drawings light diagonal upper left to lower right', 'box drawings light diagonal upper left to lower right', 'forms light diagonal upper left to lower right']);
  this.executeCharTest('‚ï≥', ['box drawings light diagonal cross', 'box drawings light diagonal cross', 'forms light diagonal cross']);
  this.executeCharTest('‚ï¥', ['box drawings light left', 'box drawings light left', 'forms light left']);
  this.executeCharTest('‚ïµ', ['box drawings light up', 'box drawings light up', 'forms light up']);
  this.executeCharTest('‚ï∂', ['box drawings light right', 'box drawings light right', 'forms light right']);
  this.executeCharTest('‚ï∑', ['box drawings light down', 'box drawings light down', 'forms light down']);
  this.executeCharTest('‚ï∏', ['box drawings heavy left', 'box drawings heavy left', 'forms heavy left']);
  this.executeCharTest('‚ïπ', ['box drawings heavy up', 'box drawings heavy up', 'forms heavy up']);
  this.executeCharTest('‚ï∫', ['box drawings heavy right', 'box drawings heavy right', 'forms heavy right']);
  this.executeCharTest('‚ïª', ['box drawings heavy down', 'box drawings heavy down', 'forms heavy down']);
  this.executeCharTest('‚ïº', ['box drawings light left and heavy right', 'box drawings light left and heavy right', 'forms light left and heavy right']);
  this.executeCharTest('‚ïΩ', ['box drawings light up and heavy down', 'box drawings light up and heavy down', 'forms light up and heavy down']);
  this.executeCharTest('‚ïæ', ['box drawings heavy left and light right', 'box drawings heavy left and light right', 'forms heavy left and light right']);
  this.executeCharTest('‚ïø', ['box drawings heavy up and light down', 'box drawings heavy up and light down', 'forms heavy up and light down']);
  this.executeCharTest('‚ñÄ', ['upper half block', 'upper half block', 'upper half block']);
  this.executeCharTest('‚ñÅ', ['lower one eighth block', 'lower one eighth block', 'lower one eighth block']);
  this.executeCharTest('‚ñÇ', ['lower one quarter block', 'lower one quarter block', 'lower one quarter block']);
  this.executeCharTest('‚ñÉ', ['lower three eighths block', 'lower three eighths block', 'lower three eighths block']);
  this.executeCharTest('‚ñÑ', ['lower half block', 'lower half block', 'lower half block']);
  this.executeCharTest('‚ñÖ', ['lower five eighths block', 'lower five eighths block', 'lower five eighths block']);
  this.executeCharTest('‚ñÜ', ['lower three quarters block', 'lower three quarters block', 'lower three quarter block']);
  this.executeCharTest('‚ñá', ['lower seven eighths block', 'lower seven eighths block', 'lower seven eighths block']);
  this.executeCharTest('‚ñà', ['full block', 'full block', 'full block']);
  this.executeCharTest('‚ñâ', ['left seven eighths block', 'left seven eighths block', 'left seven eighths block']);
  this.executeCharTest('‚ñä', ['left three quarters block', 'left three quarters block', 'left three quarter block']);
  this.executeCharTest('‚ñã', ['left five eighths block', 'left five eighths block', 'left five eighths block']);
  this.executeCharTest('‚ñå', ['left half block', 'left half block', 'left half block']);
  this.executeCharTest('‚ñç', ['left three eighths block', 'left three eighths block', 'left three eighths block']);
  this.executeCharTest('‚ñé', ['left one quarter block', 'left one quarter block', 'left one quarter block']);
  this.executeCharTest('‚ñè', ['left one eighth block', 'left one eighth block', 'left one eighth block']);
  this.executeCharTest('‚ñê', ['right half block', 'right half block', 'right half block']);
  this.executeCharTest('‚ñë', ['light shade', 'light shade', 'light shade']);
  this.executeCharTest('‚ñí', ['medium shade', 'medium shade', 'medium shade']);
  this.executeCharTest('‚ñì', ['dark shade', 'dark shade', 'dark shade']);
  this.executeCharTest('‚ñî', ['upper one eighth block', 'upper one eighth block', 'upper one eighth block']);
  this.executeCharTest('‚ñï', ['right one eighth block', 'right one eighth block', 'right one eighth block']);
  this.executeCharTest('‚ññ', ['quadrant lower left', 'quadrant lower left', 'quadrant lower left']);
  this.executeCharTest('‚ñó', ['quadrant lower right', 'quadrant lower right', 'quadrant lower right']);
  this.executeCharTest('‚ñò', ['quadrant upper left', 'quadrant upper left', 'quadrant upper left']);
  this.executeCharTest('‚ñô', ['quadrant upper left and lower left and lower right', 'quadrant upper left and lower left and lower right', 'quadrant upper left and lower left and lower right']);
  this.executeCharTest('‚ñö', ['quadrant upper left and lower right', 'quadrant upper left and lower right', 'quadrant upper left and lower right']);
  this.executeCharTest('‚ñõ', ['quadrant upper left and upper right and lower left', 'quadrant upper left and upper right and lower left', 'quadrant upper left and upper right and lower left']);
  this.executeCharTest('‚ñú', ['quadrant upper left and upper right and lower right', 'quadrant upper left and upper right and lower right', 'quadrant upper left and upper right and lower right']);
  this.executeCharTest('‚ñù', ['quadrant upper right', 'quadrant upper right', 'quadrant upper right']);
  this.executeCharTest('‚ñû', ['quadrant upper right and lower left', 'quadrant upper right and lower left', 'quadrant upper right and lower left']);
  this.executeCharTest('‚ñü', ['quadrant upper right and lower left and lower right', 'quadrant upper right and lower left and lower right', 'quadrant upper right and lower left and lower right']);
  this.executeCharTest('‚ñ†', ['black square', 'black square', 'black square']);
  this.executeCharTest('‚ñ°', ['white square', 'white square', 'white square']);
  this.executeCharTest('‚ñ¢', ['white square with rounded corners', 'white square with rounded corners', 'white square with rounded corners']);
  this.executeCharTest('‚ñ£', ['white square containing black small square', 'white square containing black small square', 'white square containing black small square']);
  this.executeCharTest('‚ñ§', ['square with horizontal fill', 'square with horizontal fill', 'square with horizontal fill']);
  this.executeCharTest('‚ñ•', ['square with vertical fill', 'square with vertical fill', 'square with vertical fill']);
  this.executeCharTest('‚ñ¶', ['square with orthogonal crosshatch fill', 'square with orthogonal crosshatch fill', 'square with orthogonal crosshatch fill']);
  this.executeCharTest('‚ñß', ['square with upper left to lower right fill', 'square with upper left to lower right fill', 'square with upper left to lower right fill']);
  this.executeCharTest('‚ñ®', ['square with upper right to lower left fill', 'square with upper right to lower left fill', 'square with upper right to lower left fill']);
  this.executeCharTest('‚ñ©', ['square with diagonal crosshatch fill', 'square with diagonal crosshatch fill', 'square with diagonal crosshatch fill']);
  this.executeCharTest('‚ñ™', ['black small square', 'black small square', 'black small square']);
  this.executeCharTest('‚ñ´', ['white small square', 'white small square', 'white small square']);
  this.executeCharTest('‚ñ¨', ['black rectangle', 'black rectangle', 'black rectangle']);
  this.executeCharTest('‚ñ≠', ['white rectangle', 'white rectangle', 'white rectangle']);
  this.executeCharTest('‚ñÆ', ['black vertical rectangle', 'black vertical rectangle', 'black vertical rectangle']);
  this.executeCharTest('‚ñØ', ['white vertical rectangle', 'white vertical rectangle', 'white vertical rectangle']);
  this.executeCharTest('‚ñ∞', ['black parallelogram', 'black parallelogram', 'black parallelogram']);
  this.executeCharTest('‚ñ±', ['white parallelogram', 'white parallelogram', 'white parallelogram']);
  this.executeCharTest('‚ñ≤', ['black up pointing triangle', 'black up pointing triangle', 'black up pointing triangle']);
  this.executeCharTest('‚ñ≥', ['white up pointing triangle', 'white up pointing triangle', 'white up pointing triangle']);
  this.executeCharTest('‚ñ¥', ['black up pointing small triangle', 'black up pointing small triangle', 'black up pointing small triangle']);
  this.executeCharTest('‚ñµ', ['white up pointing small triangle', 'white up pointing small triangle', 'white up pointing small triangle']);
  this.executeCharTest('‚ñ∂', ['black right pointing triangle', 'black right pointing triangle', 'black right pointing triangle']);
  this.executeCharTest('‚ñ∑', ['white right pointing triangle', 'white right pointing triangle', 'white right pointing triangle']);
  this.executeCharTest('‚ñ∏', ['black right pointing small triangle', 'black right pointing small triangle', 'black right pointing small triangle']);
  this.executeCharTest('‚ñπ', ['white right pointing small triangle', 'white right pointing small triangle', 'white right pointing small triangle']);
  this.executeCharTest('‚ñ∫', ['black right pointing pointer', 'black right pointing pointer', 'black right pointing pointer']);
  this.executeCharTest('‚ñª', ['white right pointing pointer', 'white right pointing pointer', 'white right pointing pointer']);
  this.executeCharTest('‚ñº', ['black down pointing triangle', 'black down pointing triangle', 'black down pointing triangle']);
  this.executeCharTest('‚ñΩ', ['white down pointing triangle', 'white down pointing triangle', 'white down pointing triangle']);
  this.executeCharTest('‚ñæ', ['black down pointing small triangle', 'black down pointing small triangle', 'black down pointing small triangle']);
  this.executeCharTest('‚ñø', ['white down pointing small triangle', 'white down pointing small triangle', 'white down pointing small triangle']);
  this.executeCharTest('‚óÄ', ['black left pointing triangle', 'black left pointing triangle', 'black left pointing triangle']);
  this.executeCharTest('‚óÅ', ['white left pointing triangle', 'white left pointing triangle', 'white left pointing triangle']);
  this.executeCharTest('‚óÇ', ['black left pointing small triangle', 'black left pointing small triangle', 'black left pointing small triangle']);
  this.executeCharTest('‚óÉ', ['white left pointing small triangle', 'white left pointing small triangle', 'white left pointing small triangle']);
  this.executeCharTest('‚óÑ', ['black left pointing pointer', 'black left pointing pointer', 'black left pointing pointer']);
  this.executeCharTest('‚óÖ', ['white left pointing pointer', 'white left pointing pointer', 'white left pointing pointer']);
  this.executeCharTest('‚óÜ', ['black diamond', 'black diamond', 'black diamond']);
  this.executeCharTest('‚óá', ['white diamond', 'white diamond', 'white diamond']);
  this.executeCharTest('‚óà', ['white diamond containing black small diamond', 'white diamond containing black small diamond', 'white diamond containing black small diamond']);
  this.executeCharTest('‚óâ', ['fisheye', 'fisheye', 'fisheye']);
  this.executeCharTest('‚óä', ['lozenge', 'lozenge', 'lozenge']);
  this.executeCharTest('‚óã', ['white circle', 'white circle', 'white circle']);
  this.executeCharTest('‚óå', ['dotted circle', 'dotted circle', 'dotted circle']);
  this.executeCharTest('‚óç', ['circle with vertical fill', 'circle with vertical fill', 'circle with vertical fill']);
  this.executeCharTest('‚óé', ['bullseye', 'bullseye', 'bullseye']);
  this.executeCharTest('‚óè', ['black circle', 'black circle', 'black circle']);
  this.executeCharTest('‚óê', ['circle with left half black', 'circle with left half black', 'circle with left half black']);
  this.executeCharTest('‚óë', ['circle with right half black', 'circle with right half black', 'circle with right half black']);
  this.executeCharTest('‚óí', ['circle with lower half black', 'circle with lower half black', 'circle with lower half black']);
  this.executeCharTest('‚óì', ['circle with upper half black', 'circle with upper half black', 'circle with upper half black']);
  this.executeCharTest('‚óî', ['circle with upper right quadrant black', 'circle with upper right quadrant black', 'circle with upper right quadrant black']);
  this.executeCharTest('‚óï', ['circle with all but upper left quadrant black', 'circle with all but upper left quadrant black', 'circle with all but upper left quadrant black']);
  this.executeCharTest('‚óñ', ['left half black circle', 'left half black circle', 'left half black circle']);
  this.executeCharTest('‚óó', ['right half black circle', 'right half black circle', 'right half black circle']);
  this.executeCharTest('‚óò', ['inverse bullet', 'inverse bullet', 'inverse bullet']);
  this.executeCharTest('‚óô', ['inverse white circle', 'inverse white circle', 'inverse white circle']);
  this.executeCharTest('‚óö', ['upper half inverse white circle', 'upper half inverse white circle', 'upper half inverse white circle']);
  this.executeCharTest('‚óõ', ['lower half inverse white circle', 'lower half inverse white circle', 'lower half inverse white circle']);
  this.executeCharTest('‚óú', ['upper left quadrant circular arc', 'upper left quadrant circular arc', 'upper left quadrant circular arc']);
  this.executeCharTest('‚óù', ['upper right quadrant circular arc', 'upper right quadrant circular arc', 'upper right quadrant circular arc']);
  this.executeCharTest('‚óû', ['lower right quadrant circular arc', 'lower right quadrant circular arc', 'lower right quadrant circular arc']);
  this.executeCharTest('‚óü', ['lower left quadrant circular arc', 'lower left quadrant circular arc', 'lower left quadrant circular arc']);
  this.executeCharTest('‚ó†', ['upper half circle', 'upper half circle', 'upper half circle']);
  this.executeCharTest('‚ó°', ['lower half circle', 'lower half circle', 'lower half circle']);
  this.executeCharTest('‚ó¢', ['black lower right triangle', 'black lower right triangle', 'black lower right triangle']);
  this.executeCharTest('‚ó£', ['black lower left triangle', 'black lower left triangle', 'black lower left triangle']);
  this.executeCharTest('‚ó§', ['black upper left triangle', 'black upper left triangle', 'black upper left triangle']);
  this.executeCharTest('‚ó•', ['black upper right triangle', 'black upper right triangle', 'black upper right triangle']);
  this.executeCharTest('‚ó¶', ['white bullet', 'white bullet', 'white bullet']);
  this.executeCharTest('‚óß', ['square with left half black', 'square with left half black', 'square with left half black']);
  this.executeCharTest('‚ó®', ['square with right half black', 'square with right half black', 'square with right half black']);
  this.executeCharTest('‚ó©', ['square with upper left diagonal half black', 'square with upper left diagonal half black', 'square with upper left diagonal half black']);
  this.executeCharTest('‚ó™', ['square with lower right diagonal half black', 'square with lower right diagonal half black', 'square with lower right diagonal half black']);
  this.executeCharTest('‚ó´', ['white square with vertical bisecting line', 'white square with vertical bisecting line', 'white square with vertical bisecting line']);
  this.executeCharTest('‚ó¨', ['white up pointing triangle with dot', 'white up pointing triangle with dot', 'white up pointing triangle with dot']);
  this.executeCharTest('‚ó≠', ['up pointing triangle with left half black', 'up pointing triangle with left half black', 'up pointing triangle with left half black']);
  this.executeCharTest('‚óÆ', ['up pointing triangle with right half black', 'up pointing triangle with right half black', 'up pointing triangle with right half black']);
  this.executeCharTest('‚óØ', ['large circle', 'large circle', 'large circle']);
  this.executeCharTest('‚ó∞', ['white square with upper left quadrant', 'white square with upper left quadrant', 'white square with upper left quadrant']);
  this.executeCharTest('‚ó±', ['white square with lower left quadrant', 'white square with lower left quadrant', 'white square with lower left quadrant']);
  this.executeCharTest('‚ó≤', ['white square with lower right quadrant', 'white square with lower right quadrant', 'white square with lower right quadrant']);
  this.executeCharTest('‚ó≥', ['white square with upper right quadrant', 'white square with upper right quadrant', 'white square with upper right quadrant']);
  this.executeCharTest('‚ó¥', ['white circle with upper left quadrant', 'white circle with upper left quadrant', 'white circle with upper left quadrant']);
  this.executeCharTest('‚óµ', ['white circle with lower left quadrant', 'white circle with lower left quadrant', 'white circle with lower left quadrant']);
  this.executeCharTest('‚ó∂', ['white circle with lower right quadrant', 'white circle with lower right quadrant', 'white circle with lower right quadrant']);
  this.executeCharTest('‚ó∑', ['white circle with upper right quadrant', 'white circle with upper right quadrant', 'white circle with upper right quadrant']);
  this.executeCharTest('‚ó∏', ['upper left triangle', 'upper left triangle', 'upper left triangle']);
  this.executeCharTest('‚óπ', ['upper right triangle', 'upper right triangle', 'upper right triangle']);
  this.executeCharTest('‚ó∫', ['lower left triangle', 'lower left triangle', 'lower left triangle']);
  this.executeCharTest('‚óª', ['white medium square', 'white medium square', 'white medium square']);
  this.executeCharTest('‚óº', ['black medium square', 'black medium square', 'black medium square']);
  this.executeCharTest('‚óΩ', ['white medium small square', 'white medium small square', 'white medium small square']);
  this.executeCharTest('‚óæ', ['black medium small square', 'black medium small square', 'black medium small square']);
  this.executeCharTest('‚óø', ['lower right triangle', 'lower right triangle', 'lower right triangle']);
  this.executeCharTest('‚¨í', ['square with top half black', 'square with top half black', 'square with top half black']);
  this.executeCharTest('‚¨ì', ['square with bottom half black', 'square with bottom half black', 'square with bottom half black']);
  this.executeCharTest('‚¨î', ['square with upper right diagonal half black', 'square with upper right diagonal half black', 'square with upper right diagonal half black']);
  this.executeCharTest('‚¨ï', ['square with lower left diagonal half black', 'square with lower left diagonal half black', 'square with lower left diagonal half black']);
  this.executeCharTest('‚¨ñ', ['diamond with left half black', 'diamond with left half black', 'diamond with left half black']);
  this.executeCharTest('‚¨ó', ['diamond with right half black', 'diamond with right half black', 'diamond with right half black']);
  this.executeCharTest('‚¨ò', ['diamond with top half black', 'diamond with top half black', 'diamond with top half black']);
  this.executeCharTest('‚¨ô', ['diamond with bottom half black', 'diamond with bottom half black', 'diamond with bottom half black']);
  this.executeCharTest('‚¨ö', ['dotted square', 'dotted square', 'dotted square']);
  this.executeCharTest('‚¨õ', ['black large square', 'black large square', 'black large square']);
  this.executeCharTest('‚¨ú', ['white large square', 'white large square', 'white large square']);
  this.executeCharTest('‚¨ù', ['black very small square', 'black very small square', 'black very small square']);
  this.executeCharTest('‚¨û', ['white very small square', 'white very small square', 'white very small square']);
  this.executeCharTest('‚¨ü', ['black pentagon', 'black pentagon', 'black pentagon']);
  this.executeCharTest('‚¨†', ['white pentagon', 'white pentagon', 'white pentagon']);
  this.executeCharTest('‚¨°', ['white hexagon', 'white hexagon', 'white hexagon']);
  this.executeCharTest('‚¨¢', ['black hexagon', 'black hexagon', 'black hexagon']);
  this.executeCharTest('‚¨£', ['horizontal black hexagon', 'horizontal black hexagon', 'horizontal black hexagon']);
  this.executeCharTest('‚¨§', ['black large circle', 'black large circle', 'black large circle']);
  this.executeCharTest('‚¨•', ['black medium diamond', 'black medium diamond', 'black medium diamond']);
  this.executeCharTest('‚¨¶', ['white medium diamond', 'white medium diamond', 'white medium diamond']);
  this.executeCharTest('‚¨ß', ['black medium lozenge', 'black medium lozenge', 'black medium lozenge']);
  this.executeCharTest('‚¨®', ['white medium lozenge', 'white medium lozenge', 'white medium lozenge']);
  this.executeCharTest('‚¨©', ['black small diamond', 'black small diamond', 'black small diamond']);
  this.executeCharTest('‚¨™', ['black small lozenge', 'black small lozenge', 'black small lozenge']);
  this.executeCharTest('‚¨´', ['white small lozenge', 'white small lozenge', 'white small lozenge']);
  this.executeCharTest('‚¨¨', ['black horizontal ellipse', 'black horizontal ellipse', 'black horizontal ellipse']);
  this.executeCharTest('‚¨≠', ['white horizontal ellipse', 'white horizontal ellipse', 'white horizontal ellipse']);
  this.executeCharTest('‚¨Æ', ['black vertical ellipse', 'black vertical ellipse', 'black vertical ellipse']);
  this.executeCharTest('‚¨Ø', ['white vertical ellipse', 'white vertical ellipse', 'white vertical ellipse']);
  this.executeCharTest('‚≠ê', ['white medium star', 'white medium star', 'white medium star']);
  this.executeCharTest('‚≠ë', ['black small star', 'black small star', 'black small star']);
  this.executeCharTest('‚≠í', ['white small star', 'white small star', 'white small star']);
  this.executeCharTest('‚≠ì', ['black right pointing pentagon', 'black right pointing pentagon', 'black right pointing pentagon']);
  this.executeCharTest('‚≠î', ['white right pointing pentagon', 'white right pointing pentagon', 'white right pointing pentagon']);
  this.executeCharTest('‚≠ï', ['heavy large circle', 'heavy large circle', 'heavy large circle']);
  this.executeCharTest('‚≠ñ', ['heavy oval with oval inside', 'heavy oval with oval inside', 'heavy oval with oval inside']);
  this.executeCharTest('‚≠ó', ['heavy circle with circle inside', 'heavy circle with circle inside', 'heavy circle with circle inside']);
  this.executeCharTest('‚≠ò', ['heavy circle', 'heavy circle', 'heavy circle']);
  this.executeCharTest('‚≠ô', ['heavy circled saltire', 'heavy circled saltire', 'heavy circled saltire']);
  this.executeCharTest('‚Üº', ['leftwards harpoon with barb upwards', 'left harpoon with barb up', 'left harpoon with barb up']);
  this.executeCharTest('‚ÜΩ', ['leftwards harpoon with barb downwards', 'left harpoon with barb down', 'left harpoon with barb down']);
  this.executeCharTest('‚Üæ', ['upwards harpoon with barb rightwards', 'up harpoon with barb right', 'up harpoon with barb right']);
  this.executeCharTest('‚Üø', ['upwards harpoon with barb leftwards', 'up harpoon with barb left', 'up harpoon with barb left']);
  this.executeCharTest('‚áÄ', ['rightwards harpoon with barb upwards', 'right harpoon with barb up', 'right harpoon with barb up']);
  this.executeCharTest('‚áÅ', ['rightwards harpoon with barb downwards', 'right harpoon with barb down', 'right harpoon with barb down']);
  this.executeCharTest('‚áÇ', ['downwards harpoon with barb rightwards', 'down harpoon with barb right', 'down harpoon with barb right']);
  this.executeCharTest('‚áÉ', ['downwards harpoon with barb leftwards', 'down harpoon with barb left', 'down harpoon with barb left']);
  this.executeCharTest('‚áã', ['leftwards harpoon over rightwards harpoon', 'left harpoon over right harpoon', 'left harpoon over right harpoon']);
  this.executeCharTest('‚áå', ['rightwards harpoon over leftwards harpoon', 'right harpoon over left harpoon', 'right harpoon over left harpoon']);
  this.executeCharTest('‚•ä', ['left barb up right barb down harpoon', 'left barb up right barb down harpoon', 'left barb up right barb down harpoon']);
  this.executeCharTest('‚•ã', ['left barb down right barb up harpoon', 'left barb down right barb up harpoon', 'left barb down right barb up harpoon']);
  this.executeCharTest('‚•å', ['up barb right down barb left harpoon', 'up barb right down barb left harpoon', 'up barb right down barb left harpoon']);
  this.executeCharTest('‚•ç', ['up barb left down barb right harpoon', 'up barb left down barb right harpoon', 'up barb left down barb right harpoon']);
  this.executeCharTest('‚•é', ['left barb up right barb up harpoon', 'left barb up right barb up harpoon', 'left barb up right barb up harpoon']);
  this.executeCharTest('‚•è', ['up barb right down barb right harpoon', 'up barb right down barb right harpoon', 'up barb right down barb right harpoon']);
  this.executeCharTest('‚•ê', ['left barb down right barb down harpoon', 'left barb down right barb down harpoon', 'left barb down right barb down harpoon']);
  this.executeCharTest('‚•ë', ['up barb left down barb left harpoon', 'up barb left down barb left harpoon', 'up barb left down barb left harpoon']);
  this.executeCharTest('‚•í', ['leftwards harpoon with barb up to bar', 'left harpoon with barb up to bar', 'left harpoon with barb up to bar']);
  this.executeCharTest('‚•ì', ['rightwards harpoon with barb up to bar', 'right harpoon with barb up to bar', 'right harpoon with barb up to bar']);
  this.executeCharTest('‚•î', ['upwards harpoon with barb right to bar', 'up harpoon with barb right to bar', 'up harpoon with barb right to bar']);
  this.executeCharTest('‚•ï', ['downwards harpoon with barb right to bar', 'down harpoon with barb right to bar', 'down harpoon with barb right to bar']);
  this.executeCharTest('‚•ñ', ['leftwards harpoon with barb down to bar', 'left harpoon with barb down to bar', 'left harpoon with barb down to bar']);
  this.executeCharTest('‚•ó', ['rightwards harpoon with barb down to bar', 'right harpoon with barb down to bar', 'right harpoon with barb down to bar']);
  this.executeCharTest('‚•ò', ['upwards harpoon with barb left to bar', 'up harpoon with barb left to bar', 'up harpoon with barb left to bar']);
  this.executeCharTest('‚•ô', ['downwards harpoon with barb left to bar', 'down harpoon with barb left to bar', 'down harpoon with barb left to bar']);
  this.executeCharTest('‚•ö', ['leftwards harpoon with barb up from bar', 'left harpoon with barb up from bar', 'left harpoon with barb up from bar']);
  this.executeCharTest('‚•õ', ['rightwards harpoon with barb up from bar', 'right harpoon with barb up from bar', 'right harpoon with barb up from bar']);
  this.executeCharTest('‚•ú', ['upwards harpoon with barb right from bar', 'up harpoon with barb right from bar', 'up harpoon with barb right from bar']);
  this.executeCharTest('‚•ù', ['downwards harpoon with barb right from bar', 'down harpoon with barb right from bar', 'down harpoon with barb right from bar']);
  this.executeCharTest('‚•û', ['leftwards harpoon with barb down from bar', 'left harpoon with barb down from bar', 'left harpoon with barb down from bar']);
  this.executeCharTest('‚•ü', ['rightwards harpoon with barb down from bar', 'right harpoon with barb down from bar', 'right harpoon with barb down from bar']);
  this.executeCharTest('‚•†', ['upwards harpoon with barb left from bar', 'up harpoon with barb left from bar', 'up harpoon with barb left from bar']);
  this.executeCharTest('‚•°', ['downwards harpoon with barb left from bar', 'down harpoon with barb left from bar', 'down harpoon with barb left from bar']);
  this.executeCharTest('‚•¢', ['leftwards harpoon with barb up above leftwards harpoon with barb down', 'left harpoon with barb up above left harpoon with barb down', 'left harpoon with barb up above left harpoon with barb down']);
  this.executeCharTest('‚•£', ['upwards harpoon with barb left beside upwards harpoon with barb right', 'up harpoon with barb left beside up harpoon with barb right', 'up harpoon with barb left beside up harpoon with barb right']);
  this.executeCharTest('‚•§', ['rightwards harpoon with barb up above rightwards harpoon with barb down', 'right harpoon with barb up above right harpoon with barb down', 'right harpoon with barb up above right harpoon with barb down']);
  this.executeCharTest('‚••', ['downwards harpoon with barb left beside downwards harpoon with barb right', 'down harpoon with barb left beside down harpoon with barb right', 'down harpoon with barb left beside down harpoon with barb right']);
  this.executeCharTest('‚•¶', ['leftwards harpoon with barb up above rightwards harpoon with barb up', 'left harpoon with barb up above right harpoon with barb up', 'left harpoon with barb up above right harpoon with barb up']);
  this.executeCharTest('‚•ß', ['leftwards harpoon with barb down above rightwards harpoon with barb down', 'left harpoon with barb down above right harpoon with barb down', 'left harpoon with barb down above right harpoon with barb down']);
  this.executeCharTest('‚•®', ['rightwards harpoon with barb up above leftwards harpoon with barb up', 'right harpoon with barb up above left harpoon with barb up', 'right harpoon with barb up above left harpoon with barb up']);
  this.executeCharTest('‚•©', ['rightwards harpoon with barb down above leftwards harpoon with barb down', 'right harpoon with barb down above left harpoon with barb down', 'right harpoon with barb down above left harpoon with barb down']);
  this.executeCharTest('‚•™', ['leftwards harpoon with barb up above long dash', 'left harpoon with barb up above long dash', 'left harpoon with barb up above long dash']);
  this.executeCharTest('‚•´', ['leftwards harpoon with barb down below long dash', 'left harpoon with barb down below long dash', 'left harpoon with barb down below long dash']);
  this.executeCharTest('‚•¨', ['rightwards harpoon with barb up above long dash', 'right harpoon with barb up above long dash', 'right harpoon with barb up above long dash']);
  this.executeCharTest('‚•≠', ['rightwards harpoon with barb down below long dash', 'right harpoon with barb down below long dash', 'right harpoon with barb down below long dash']);
  this.executeCharTest('‚•Æ', ['upwards harpoon with barb left beside downwards harpoon with barb right', 'up harpoon with barb left beside down harpoon with barb right', 'up harpoon with barb left beside down harpoon with barb right']);
  this.executeCharTest('‚•Ø', ['downwards harpoon with barb left beside upwards harpoon with barb right', 'down harpoon with barb left beside up harpoon with barb right', 'down harpoon with barb left beside up harpoon with barb right']);
  this.executeCharTest('‚•º', ['left fish tail', 'left fish tail', 'left fish tail']);
  this.executeCharTest('‚•Ω', ['right fish tail', 'right fish tail', 'right fish tail']);
  this.executeCharTest('‚•æ', ['up fish tail', 'up fish tail', 'up fish tail']);
  this.executeCharTest('‚•ø', ['down fish tail', 'down fish tail', 'down fish tail']);
  this.executeCharTest('‚Ñè', ['mathematical italic small h over two time greek letter pi', 'italic h over two pi', 'italic small h over two pi']);
  this.executeCharTest('‚Ñî', ['l b bar symbol', 'l b bar', 'l b bar']);
  this.executeCharTest('‚Ññ', ['numero sign', 'numero', 'numero']);
  this.executeCharTest('‚Ñó', ['sound recording copyright', 'sound recording copyright', 'sound recording copyright']);
  this.executeCharTest('‚Ñû', ['prescription take', 'prescription take', 'prescription take']);
  this.executeCharTest('‚Ñü', ['response', 'response', 'response']);
  this.executeCharTest('‚Ñ†', ['service mark', 'service mark', 'service mark']);
  this.executeCharTest('‚Ñ°', ['telephone sign', 'telephone sign', 't e l symbol']);
  this.executeCharTest('‚Ñ¢', ['trade mark sign', 'trade mark', 'trademark']);
  this.executeCharTest('‚Ñ£', ['versicle', 'versicle', 'versicle']);
  this.executeCharTest('‚Ñ•', ['ounce sign', 'ounce', 'ounce']);
  this.executeCharTest('‚Ñ¶', ['ohm sign', 'ohm', 'ohm']);
  this.executeCharTest('‚Ñß', ['inverted ohm sign', 'inverted ohm', 'mho']);
  this.executeCharTest('‚Ñ™', ['kelvin sign', 'kelvin', 'degrees kelvin']);
  this.executeCharTest('‚Ñ´', ['angstrom sign', 'angstrom', 'angstrom unit']);
  this.executeCharTest('‚ÑÆ', ['estimated symbol', 'estimated', 'estimated']);
  this.executeCharTest('‚Ñ≤', ['turned capital f', 'turned cap f', 'turned f']);
  this.executeCharTest('‚Ñπ', ['information source', 'information source', 'information source']);
  this.executeCharTest('‚Ñ∫', ['rotated capital q', 'rotated cap q', 'rotated cap q']);
  this.executeCharTest('‚Ñª', ['facsimile sign', 'facsimile sign', 'facsimile sign']);
  this.executeCharTest('‚ÖÅ', ['turned sans serif capital g', 'turned sans serif cap g', 'turned sans serif cap g']);
  this.executeCharTest('‚ÖÇ', ['turned sans serif capital l', 'turned sans serif cap l', 'turned sans serif cap l']);
  this.executeCharTest('‚ÖÉ', ['reversed sans serif capital l', 'reversed sans serif cap l', 'reversed sans serif cap l']);
  this.executeCharTest('‚ÖÑ', ['turned sans serif capital y', 'turned sans serif cap y', 'turned sans serif cap y']);
  this.executeCharTest('!', ['factorial operator', 'factorial', 'exclamation mark']);
  this.executeCharTest('\'', ['quotation mark', 'quotation mark', 'quotation mark']);
  this.executeCharTest('#', ['number sign', 'number', 'hash']);
  this.executeCharTest('$', ['dollar sign', 'dollar', 'dollar']);
  this.executeCharTest('%', ['percent sign', 'percent', 'percent']);
  this.executeCharTest('&', ['ampersand', 'ampersand', 'ampersand']);
  this.executeCharTest('\'', ['apostrophe', 'apostrophe', 'apostrophe quote']);
  this.executeCharTest('*', ['asterisk', 'asterisk', 'asterisk']);
  this.executeCharTest('+', ['plus sign', 'plus', 'plus']);
  this.executeCharTest(',', ['comma', 'comma', 'comma']);
  this.executeCharTest('-', ['hyphen minus', 'minus', 'minus']);
  this.executeCharTest('.', ['full stop', 'full stop', 'period']);
  this.executeCharTest('/', ['solidus', 'solidus', 'slash']);
  this.executeCharTest(':', ['', '', '']);
  this.executeCharTest(';', ['semicolon', 'semicolon', 'semicolon']);
  this.executeCharTest('<', ['less than sign', 'less than', 'less than']);
  this.executeCharTest('=', ['equals sign', 'equals', 'equals']);
  this.executeCharTest('>', ['greater than sign', 'greater than', 'greater than']);
  this.executeCharTest('?', ['question mark', 'question mark', 'question mark']);
  this.executeCharTest('@', ['commercial at', 'at', 'at']);
  this.executeCharTest('\\', ['reverse solidus', 'reverse solidus', 'backslash']);
  this.executeCharTest('^', ['circumflex accent', 'hat', 'spacing circumflex']);
  this.executeCharTest('_', ['low line', 'low line', 'spacing underscore']);
  this.executeCharTest('`', ['grave accent', 'grave', 'spacing grave']);
  this.executeCharTest('|', ['vertical line', 'vertical line', 'vertical bar']);
  this.executeCharTest('~', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('¬°', ['inverted exclamation mark', 'inverted exclamation mark', 'inverted exclamation mark']);
  this.executeCharTest('¬¢', ['cent sign', 'cent', 'cent']);
  this.executeCharTest('¬£', ['pound sign', 'pound', 'pound']);
  this.executeCharTest('¬§', ['currency sign', 'currency', 'currency']);
  this.executeCharTest('¬•', ['yen sign', 'yen', 'yen']);
  this.executeCharTest('¬¶', ['broken bar', 'broken bar', 'broken vertical bar']);
  this.executeCharTest('¬ß', ['section sign', 'section', 'section']);
  this.executeCharTest('¬®', ['diaeresis', 'double dot', 'spacing diaeresis']);
  this.executeCharTest('¬©', ['copyright sign', 'copyright', 'copyright']);
  this.executeCharTest('¬™', ['feminine ordinal indicator', 'feminine ordinal indicator', 'feminine ordinal indicator']);
  this.executeCharTest('¬´', ['left pointing double angle quotation mark', 'left pointing double angle quotation mark', 'left pointing guillemet']);
  this.executeCharTest('¬¨', ['not sign', 'not', 'not']);
  this.executeCharTest('¬Æ', ['registered sign', 'registered', 'registered trade mark sign']);
  this.executeCharTest('¬Ø', ['macron', 'macron', 'spacing macron']);
  this.executeCharTest('¬∞', ['degree sign', 'degree', 'degree']);
  this.executeCharTest('¬±', ['plus minus sign', 'plus minus', 'plus or minus sign']);
  this.executeCharTest('¬¥', ['acute accent', 'acute', 'spacing acute']);
  this.executeCharTest('¬µ', ['micro sign', 'micro', 'micro']);
  this.executeCharTest('¬∂', ['pilcrow sign', 'pilcrow', 'paragraph sign']);
  this.executeCharTest('¬∑', ['middle dot', 'middle dot', 'middle dot']);
  this.executeCharTest('¬∏', ['cedilla', 'cedilla', 'spacing cedilla']);
  this.executeCharTest('¬∫', ['masculine ordinal indicator', 'masculine ordinal indicator', 'masculine ordinal indicator']);
  this.executeCharTest('¬ª', ['right pointing double angle quotation mark', 'right pointing double angle quotation mark', 'right pointing guillemet']);
  this.executeCharTest('¬ø', ['inverted question mark', 'inverted question mark', 'inverted question mark']);
  this.executeCharTest('√ó', ['multiplication sign', 'multiplication', 'multiplication']);
  this.executeCharTest('√∑', ['division sign', 'division', 'division']);
  this.executeCharTest('Àò', ['breve', 'breve', 'spacing breve']);
  this.executeCharTest('Àô', ['dot above', 'dot above', 'spacing dot above']);
  this.executeCharTest('Àö', ['ring above', 'ring above', 'spacing ring above']);
  this.executeCharTest('Àõ', ['ogonek', 'ogonek', 'spacing ogonek']);
  this.executeCharTest('Àú', ['small tilde', 'small tilde', 'spacing tilde']);
  this.executeCharTest('Àù', ['double acute accent', 'double acute accent', 'spacing double acute']);
  this.executeCharTest('‚Äê', ['hyphen', 'hyphen', 'hyphen']);
  this.executeCharTest('‚Äë', ['non breaking hyphen', 'non breaking hyphen', 'non breaking hyphen']);
  this.executeCharTest('‚Äí', ['figure dash', 'figure dash', 'figure dash']);
  this.executeCharTest('‚Äì', ['en dash', 'en dash', 'en dash']);
  this.executeCharTest('‚Äî', ['em dash', 'em dash', 'em dash']);
  this.executeCharTest('‚Äï', ['horizontal bar', 'horizontal bar', 'quotation dash']);
  this.executeCharTest('‚Äñ', ['double vertical line', 'double vertical line', 'double vertical bar']);
  this.executeCharTest('‚Äó', ['double low line', 'double low line', 'spacing double underscore']);
  this.executeCharTest('‚Äò', ['left single quotation mark', 'left single quotation mark', 'single turned comma quotation mark']);
  this.executeCharTest('‚Äô', ['right single quotation mark', 'right single quotation mark', 'single comma quotation mark']);
  this.executeCharTest('‚Äö', ['single low 9 quotation mark', 'single low 9 quotation mark', 'low single comma quotation mark']);
  this.executeCharTest('‚Äõ', ['single high reversed 9 quotation mark', 'single high reversed 9 quotation mark', 'single reversed comma quotation mark']);
  this.executeCharTest('‚Äú', ['left double quotation mark', 'left double quotation mark', 'double turned comma quotation mark']);
  this.executeCharTest('‚Äù', ['right double quotation mark', 'right double quotation mark', 'double comma quotation mark']);
  this.executeCharTest('‚Äû', ['double low 9 quotation mark', 'double low 9 quotation mark', 'low double comma quotation mark']);
  this.executeCharTest('‚Äü', ['double high reversed 9 quotation mark', 'double high reversed 9 quotation mark', 'double reversed comma quotation mark']);
  this.executeCharTest('‚Ä†', ['dagger', 'dagger', 'dagger']);
  this.executeCharTest('‚Ä°', ['double dagger', 'double dagger', 'double dagger']);
  this.executeCharTest('‚Ä¢', ['bullet', 'bullet', 'bullet']);
  this.executeCharTest('‚Ä£', ['triangular bullet', 'triangular bullet', 'triangular bullet']);
  this.executeCharTest('‚Ä§', ['one dot leader', 'one dot leader', 'one dot leader']);
  this.executeCharTest('‚Ä•', ['two dot leader', 'two dot leader', 'two dot leader']);
  this.executeCharTest('‚Ä¶', ['horizontal ellipsis', 'horizontal ellipsis', 'horizontal ellipsis']);
  this.executeCharTest('‚Äß', ['hyphenation point', 'hyphenation point', 'hyphenation point']);
  this.executeCharTest('‚Ä∞', ['per mille sign', 'per mille', 'per mille']);
  this.executeCharTest('‚Ä±', ['per ten thousand sign', 'per ten thousand', 'per ten thousand']);
  this.executeCharTest('‚Ä≤', ['prime', 'prime', 'prime']);
  this.executeCharTest('‚Ä≥', ['double prime', 'double prime', 'double prime']);
  this.executeCharTest('‚Ä¥', ['triple prime', 'triple prime', 'triple prime']);
  this.executeCharTest('‚Äµ', ['reversed prime', 'reversed prime', 'reversed prime']);
  this.executeCharTest('‚Ä∂', ['reversed double prime', 'reversed double prime', 'reversed double prime']);
  this.executeCharTest('‚Ä∑', ['reversed triple prime', 'reversed triple prime', 'reversed triple prime']);
  this.executeCharTest('‚Ä∏', ['caret', 'caret', 'caret']);
  this.executeCharTest('‚Äπ', ['single left pointing angle quotation mark', 'single left pointing angle quotation mark', 'left pointing single guillemet']);
  this.executeCharTest('‚Ä∫', ['single right pointing angle quotation mark', 'single right pointing angle quotation mark', 'right pointing single guillemet']);
  this.executeCharTest('‚Äª', ['reference mark', 'reference mark', 'reference mark']);
  this.executeCharTest('‚Äº', ['double exclamation mark', 'double exclamation mark', 'double exclamation mark']);
  this.executeCharTest('‚ÄΩ', ['interrobang', 'interrobang', 'interrobang']);
  this.executeCharTest('‚Äæ', ['overline', 'overline', 'spacing overscore']);
  this.executeCharTest('‚Äø', ['undertie', 'undertie', 'undertie']);
  this.executeCharTest('‚ÅÄ', ['character tie', 'character tie', 'character tie']);
  this.executeCharTest('‚ÅÅ', ['caret insertion point', 'caret insertion point', 'caret insertion point']);
  this.executeCharTest('‚ÅÇ', ['asterism', 'asterism', 'asterism']);
  this.executeCharTest('‚ÅÉ', ['hyphen bullet', 'hyphen bullet', 'hyphen bullet']);
  this.executeCharTest('‚ÅÑ', ['fraction slash', 'fraction slash', 'fraction slash']);
  this.executeCharTest('‚Åá', ['double question mark', 'double question mark', 'double question mark']);
  this.executeCharTest('‚Åà', ['question exclamation mark', 'question exclamation mark', 'question exclamation mark']);
  this.executeCharTest('‚Åâ', ['exclamation question mark', 'exclamation question mark', 'exclamation question mark']);
  this.executeCharTest('‚Åã', ['reversed pilcrow sign', 'reversed pilcrow', 'reversed pilcrow']);
  this.executeCharTest('‚Åå', ['black leftwards bullet', 'black leftwards bullet', 'black leftwards bullet']);
  this.executeCharTest('‚Åç', ['black rightwards bullet', 'black rightwards bullet', 'black rightwards bullet']);
  this.executeCharTest('‚Åé', ['low asterisk', 'low asterisk', 'low asterisk']);
  this.executeCharTest('‚Åè', ['reversed semicolon', 'reversed semicolon', 'reversed semicolon']);
  this.executeCharTest('‚Åê', ['close up', 'close up', 'close up']);
  this.executeCharTest('‚Åë', ['two asterisks aligned vertically', 'two asterisks aligned vertically', 'two asterisks aligned vertically']);
  this.executeCharTest('‚Åí', ['commercial minus sign', 'commercial minus', 'commercial minus']);
  this.executeCharTest('‚Åì', ['swung dash', 'swung dash', 'swung dash']);
  this.executeCharTest('‚Åî', ['inverted undertie', 'inverted undertie', 'inverted undertie']);
  this.executeCharTest('‚Åï', ['flower punctuation mark', 'flower punctuation mark', 'flower punctuation mark']);
  this.executeCharTest('‚Åñ', ['three dot punctuation', 'three dot punctuation', 'three dot punctuation']);
  this.executeCharTest('‚Åó', ['quadruple prime', 'quadruple prime', 'quadruple prime']);
  this.executeCharTest('‚Åò', ['four dot punctuation', 'four dot punctuation', 'four dot punctuation']);
  this.executeCharTest('‚Åô', ['five dot punctuation', 'five dot punctuation', 'five dot punctuation']);
  this.executeCharTest('‚Åö', ['two dot punctuation', 'two dot punctuation', 'two dot punctuation']);
  this.executeCharTest('‚Åõ', ['four dot mark', 'four dot mark', 'four dot mark']);
  this.executeCharTest('‚Åú', ['dotted cross', 'dotted cross', 'dotted cross']);
  this.executeCharTest('‚Åù', ['tricolon', 'tricolon', 'tricolon']);
  this.executeCharTest('‚Åû', ['vertical four dots', 'vertical four dots', 'vertical four dots']);
  this.executeCharTest('‚Å∫', ['superscript plus sign', 'superscript plus', 'superscript plus']);
  this.executeCharTest('‚Åª', ['superscript minus', 'superscript minus', 'superscript hyphen minus']);
  this.executeCharTest('‚Åº', ['superscript equals sign', 'superscript equals', 'superscript equals']);
  this.executeCharTest('‚ÅΩ', ['superscript left parenthesis', 'superscript left parenthesis', 'superscript opening parenthesis']);
  this.executeCharTest('‚Åæ', ['superscript right parenthesis', 'superscript right parenthesis', 'superscript closing parenthesis']);
  this.executeCharTest('‚Çä', ['subscript plus sign', 'subscript plus', 'subscript plus']);
  this.executeCharTest('‚Çã', ['subscript minus', 'subscript minus', 'subscript hyphen minus']);
  this.executeCharTest('‚Çå', ['subscript equals sign', 'subscript equals', 'subscript equals']);
  this.executeCharTest('‚Çç', ['subscript left parenthesis', 'subscript left parenthesis', 'subscript opening parenthesis']);
  this.executeCharTest('‚Çé', ['subscript right parenthesis', 'subscript right parenthesis', 'subscript closing parenthesis']);
  this.executeCharTest('‚Öä', ['property line', 'property line', 'property line']);
  this.executeCharTest('‚Öã', ['turned ampersand', 'turned ampersand', 'turned ampersand']);
  this.executeCharTest('‚Öå', ['per sign', 'per', 'per']);
  this.executeCharTest('‚Öç', ['aktieselskab', 'aktieselskab', 'aktieselskab']);
  this.executeCharTest('‚Öé', ['turned small f', 'turned small f', 'turned small f']);
  this.executeCharTest('‚àÄ', ['for all', 'for all', 'for all']);
  this.executeCharTest('‚àÅ', ['complement', 'complement', 'complement']);
  this.executeCharTest('‚àÇ', ['partial differential', 'partial differential', 'partial differential']);
  this.executeCharTest('‚àÉ', ['there exists', 'there exists', 'there exists']);
  this.executeCharTest('‚àÑ', ['there does not exist', 'there does not exist', 'there does not exist']);
  this.executeCharTest('‚àÖ', ['empty set', 'empty set', 'empty set']);
  this.executeCharTest('‚àÜ', ['increment', 'increment', 'increment']);
  this.executeCharTest('‚àá', ['nabla', 'nabla', 'nabla']);
  this.executeCharTest('‚àà', ['element of', 'element of', 'element of']);
  this.executeCharTest('‚àâ', ['not an element of', 'not an element of', 'not an element of']);
  this.executeCharTest('‚àä', ['small element of', 'small element of', 'small element of']);
  this.executeCharTest('‚àã', ['contains as member', 'contains as member', 'contains as member']);
  this.executeCharTest('‚àå', ['does not contain as member', 'does not contain as member', 'does not contain as member']);
  this.executeCharTest('‚àç', ['small contains as member', 'small contains as member', 'small contains as member']);
  this.executeCharTest('‚àé', ['end of proof', 'end of proof', 'end of proof']);
  this.executeCharTest('‚àè', ['n ary product', 'n ary product', 'n ary product']);
  this.executeCharTest('‚àê', ['n ary coproduct', 'n ary coproduct', 'n ary coproduct']);
  this.executeCharTest('‚àë', ['n ary summation', 'n ary summation', 'n ary summation']);
  this.executeCharTest('‚àí', ['minus sign', 'minus', 'minus']);
  this.executeCharTest('‚àì', ['minus or plus sign', 'minus or plus', 'minus or plus']);
  this.executeCharTest('‚àî', ['dot plus', 'dot plus', 'dot plus']);
  this.executeCharTest('‚àï', ['division slash', 'division slash', 'division slash']);
  this.executeCharTest('‚àñ', ['set minus', 'set minus', 'set minus']);
  this.executeCharTest('‚àó', ['asterisk operator', 'asterisk operator', 'asterisk operator']);
  this.executeCharTest('‚àò', ['ring operator', 'ring operator', 'ring operator']);
  this.executeCharTest('‚àô', ['bullet operator', 'bullet operator', 'bullet operator']);
  this.executeCharTest('‚àö', ['square root', 'square root', 'square root']);
  this.executeCharTest('‚àõ', ['cube root', 'cube root', 'cube root']);
  this.executeCharTest('‚àú', ['fourth root', 'fourth root', 'fourth root']);
  this.executeCharTest('‚àù', ['proportional to', 'proportional to', 'proportional to']);
  this.executeCharTest('‚àû', ['infinity', 'infinity', 'infinity']);
  this.executeCharTest('‚àü', ['right angle', 'right angle', 'right angle']);
  this.executeCharTest('‚à†', ['angle', 'angle', 'angle']);
  this.executeCharTest('‚à°', ['measured angle', 'measured angle', 'measured angle']);
  this.executeCharTest('‚à¢', ['spherical angle', 'spherical angle', 'spherical angle']);
  this.executeCharTest('‚à£', ['divides', 'bar', 'bar']);
  this.executeCharTest('‚à§', ['does not divide', 'does not divide', 'does not divide']);
  this.executeCharTest('‚à•', ['parallel to', 'parallel to', 'parallel to']);
  this.executeCharTest('‚à¶', ['not parallel to', 'not parallel to', 'not parallel to']);
  this.executeCharTest('‚àß', ['logical and', 'logical and', 'logical and']);
  this.executeCharTest('‚à®', ['logical or', 'logical or', 'logical or']);
  this.executeCharTest('‚à©', ['intersection', 'intersection', 'intersection']);
  this.executeCharTest('‚à™', ['union', 'union', 'union']);
  this.executeCharTest('‚à´', ['integral', 'integral', 'integral']);
  this.executeCharTest('‚à¨', ['double integral', 'double integral', 'double integral']);
  this.executeCharTest('‚à≠', ['triple integral', 'triple integral', 'triple integral']);
  this.executeCharTest('‚àÆ', ['contour integral', 'contour integral', 'contour integral']);
  this.executeCharTest('‚àØ', ['surface integral', 'surface integral', 'surface integral']);
  this.executeCharTest('‚à∞', ['volume integral', 'volume integral', 'volume integral']);
  this.executeCharTest('‚à±', ['clockwise integral', 'clockwise integral', 'clockwise integral']);
  this.executeCharTest('‚à≤', ['clockwise contour integral', 'clockwise contour integral', 'clockwise contour integral']);
  this.executeCharTest('‚à≥', ['anticlockwise contour integral', 'anticlockwise contour integral', 'anticlockwise contour integral']);
  this.executeCharTest('‚à¥', ['therefore', 'therefore', 'therefore']);
  this.executeCharTest('‚àµ', ['because', 'because', 'because']);
  this.executeCharTest('‚à∂', ['ratio', 'ratio', 'ratio']);
  this.executeCharTest('‚à∑', ['proportion', 'proportion', 'proportion']);
  this.executeCharTest('‚à∏', ['dot minus', 'dot minus', 'dot minus']);
  this.executeCharTest('‚àπ', ['excess', 'excess', 'excess']);
  this.executeCharTest('‚à∫', ['geometric proportion', 'geometric proportion', 'geometric proportion']);
  this.executeCharTest('‚àª', ['homothetic', 'homothetic', 'homothetic']);
  this.executeCharTest('‚àº', ['tilde operator', 'tilde operator', 'tilde operator']);
  this.executeCharTest('‚àΩ', ['reversed tilde', 'reversed tilde', 'reversed tilde']);
  this.executeCharTest('‚àæ', ['inverted lazy s', 'inverted lazy s', 'inverted lazy s']);
  this.executeCharTest('‚àø', ['sine wave', 'sine wave', 'sine wave']);
  this.executeCharTest('‚âÄ', ['wreath product', 'wreath product', 'wreath product']);
  this.executeCharTest('‚âÅ', ['not tilde', 'not tilde', 'not tilde']);
  this.executeCharTest('‚âÇ', ['minus tilde', 'minus tilde', 'minus tilde']);
  this.executeCharTest('‚âÉ', ['asymptotically equals', 'asymptotically equals', 'asymptotically equals']);
  this.executeCharTest('‚âÑ', ['not asymptotically equals', 'not asymptotically equals', 'not asymptotically equals']);
  this.executeCharTest('‚âÖ', ['approximately equals', 'approximately equals', 'approximately equals']);
  this.executeCharTest('‚âÜ', ['approximately but not actually equals', 'approximately but not actually equals', 'approximately but not actually equals']);
  this.executeCharTest('‚âá', ['neither approximately nor actually equals', 'neither approximately nor actually equals', 'neither approximately nor actually equals']);
  this.executeCharTest('‚âà', ['almost equals', 'almost equals', 'almost equals']);
  this.executeCharTest('‚ââ', ['not almost equals', 'not almost equals', 'not almost equals']);
  this.executeCharTest('‚âä', ['almost equal or equals', 'almost equal or equals', 'almost equal or equals']);
  this.executeCharTest('‚âã', ['triple tilde', 'triple tilde', 'triple tilde']);
  this.executeCharTest('‚âå', ['all equals', 'all equals', 'all equals']);
  this.executeCharTest('‚âç', ['equivalent to', 'equivalent to', 'equivalent to']);
  this.executeCharTest('‚âé', ['geometrically equivalent to', 'geometrically equivalent to', 'geometrically equivalent to']);
  this.executeCharTest('‚âè', ['difference between', 'difference between', 'difference between']);
  this.executeCharTest('‚âê', ['approaches the limit', 'approaches the limit', 'approaches the limit']);
  this.executeCharTest('‚âë', ['geometrically equals', 'geometrically equals', 'geometrically equals']);
  this.executeCharTest('‚âí', ['approximately equals or the image of', 'approximately equals or the image of', 'approximately equals or the image of']);
  this.executeCharTest('‚âì', ['image of or approximately equals', 'image of or approximately equals', 'image of or approximately equals']);
  this.executeCharTest('‚âî', ['colon equals', 'colon equals', 'colon equal']);
  this.executeCharTest('‚âï', ['equals colon', 'equals colon', 'equal colon']);
  this.executeCharTest('‚âñ', ['ring in equals', 'ring in equals', 'ring in equals']);
  this.executeCharTest('‚âó', ['ring equals', 'ring equals', 'ring equals']);
  this.executeCharTest('‚âò', ['corresponds to', 'corresponds to', 'corresponds to']);
  this.executeCharTest('‚âô', ['estimates', 'estimates', 'estimates']);
  this.executeCharTest('‚âö', ['equiangular to', 'equiangular to', 'equiangular to']);
  this.executeCharTest('‚âõ', ['star equals', 'star equals', 'star equals']);
  this.executeCharTest('‚âú', ['delta equals', 'delta equals', 'delta equals']);
  this.executeCharTest('‚âù', ['equals by definition', 'equals by definition', 'equals by definition']);
  this.executeCharTest('‚âû', ['measured by', 'measured by', 'measured by']);
  this.executeCharTest('‚âü', ['questioned equals', 'questioned equals', 'questioned equals']);
  this.executeCharTest('‚â†', ['not equals', 'not equals', 'not equals']);
  this.executeCharTest('‚â°', ['identical to', 'identical to', 'identical to']);
  this.executeCharTest('‚â¢', ['not identical to', 'not identical to', 'not identical to']);
  this.executeCharTest('‚â£', ['strictly equivalent to', 'strictly equivalent to', 'strictly equivalent to']);
  this.executeCharTest('‚â§', ['less than or equals', 'less than or equals', 'less than or equals']);
  this.executeCharTest('‚â•', ['greater than or equals', 'greater than or equals', 'greater than or equals']);
  this.executeCharTest('‚â¶', ['less than over equals', 'less than over equals', 'less than over equals']);
  this.executeCharTest('‚âß', ['greater than over equals', 'greater than over equals', 'greater than over equals']);
  this.executeCharTest('‚â®', ['less than but not equals', 'less than but not equals', 'less than but not equals']);
  this.executeCharTest('‚â©', ['greater than but not equals', 'greater than but not equals', 'greater than but not equals']);
  this.executeCharTest('‚â™', ['much less than', 'much less than', 'much less than']);
  this.executeCharTest('‚â´', ['much greater than', 'much greater than', 'much greater than']);
  this.executeCharTest('‚â¨', ['between', 'between', 'between']);
  this.executeCharTest('‚â≠', ['not equivalent to', 'not equivalent to', 'not equivalent to']);
  this.executeCharTest('‚âÆ', ['not less than', 'not less than', 'not less than']);
  this.executeCharTest('‚âØ', ['not greater than', 'not greater than', 'not greater than']);
  this.executeCharTest('‚â∞', ['neither less than nor equals', 'neither less than nor equals', 'neither less than nor equals']);
  this.executeCharTest('‚â±', ['neither greater than nor equals', 'neither greater than nor equals', 'neither greater than nor equals']);
  this.executeCharTest('‚â≤', ['less than or equivalent to', 'less than or equivalent to', 'less than or equivalent to']);
  this.executeCharTest('‚â≥', ['greater than or equivalent to', 'greater than or equivalent to', 'greater than or equivalent to']);
  this.executeCharTest('‚â¥', ['neither less than nor equivalent to', 'neither less than nor equivalent to', 'neither less than nor equivalent to']);
  this.executeCharTest('‚âµ', ['neither greater than nor equivalent to', 'neither greater than nor equivalent to', 'neither greater than nor equivalent to']);
  this.executeCharTest('‚â∂', ['less than or greater than', 'less than or greater than', 'less than or greater than']);
  this.executeCharTest('‚â∑', ['greater than or less than', 'greater than or less than', 'greater than or less than']);
  this.executeCharTest('‚â∏', ['neither less than nor greater than', 'neither less than nor greater than', 'neither less than nor greater than']);
  this.executeCharTest('‚âπ', ['neither greater than nor less than', 'neither greater than nor less than', 'neither greater than nor less than']);
  this.executeCharTest('‚â∫', ['precedes', 'precedes', 'precedes']);
  this.executeCharTest('‚âª', ['succeeds', 'succeeds', 'succeeds']);
  this.executeCharTest('‚âº', ['precedes or equals', 'precedes or equals', 'precedes or equals']);
  this.executeCharTest('‚âΩ', ['succeeds or equals', 'succeeds or equals', 'succeeds or equals']);
  this.executeCharTest('‚âæ', ['precedes or equivalent to', 'precedes or equivalent to', 'precedes or equivalent to']);
  this.executeCharTest('‚âø', ['succeeds or equivalent to', 'succeeds or equivalent to', 'succeeds or equivalent to']);
  this.executeCharTest('‚äÄ', ['does not precede', 'does not precede', 'does not precede']);
  this.executeCharTest('‚äÅ', ['does not succeed', 'does not succeed', 'does not succeed']);
  this.executeCharTest('‚äÇ', ['subset of', 'subset of', 'subset of']);
  this.executeCharTest('‚äÉ', ['superset of', 'superset of', 'superset of']);
  this.executeCharTest('‚äÑ', ['not a subset of', 'not a subset of', 'not a subset of']);
  this.executeCharTest('‚äÖ', ['not a superset of', 'not a superset of', 'not a superset of']);
  this.executeCharTest('‚äÜ', ['subset of or equals', 'subset of or equals', 'subset of or equals']);
  this.executeCharTest('‚äá', ['superset of or equals', 'superset of or equals', 'superset of or equals']);
  this.executeCharTest('‚äà', ['neither a subset of nor equals', 'neither a subset of nor equals', 'neither a subset of nor equals']);
  this.executeCharTest('‚äâ', ['neither a superset of nor equals', 'neither a superset of nor equals', 'neither a superset of nor equals']);
  this.executeCharTest('‚ää', ['subset of with not equals', 'subset of or not equals', 'subset of or not equals']);
  this.executeCharTest('‚äã', ['superset of with not equals', 'superset of or not equals', 'superset of or not equals']);
  this.executeCharTest('‚äå', ['multiset', 'multiset', 'multiset']);
  this.executeCharTest('‚äç', ['multiset multiplication', 'multiset multiplication', 'multiset multiplication']);
  this.executeCharTest('‚äé', ['multiset union', 'multiset union', 'multiset union']);
  this.executeCharTest('‚äè', ['square image of', 'square image of', 'square image of']);
  this.executeCharTest('‚äê', ['square original of', 'square original of', 'square original of']);
  this.executeCharTest('‚äë', ['square image of or equals', 'square image of or equals', 'square image of or equals']);
  this.executeCharTest('‚äí', ['square original of or equals', 'square original of or equals', 'square original of or equals']);
  this.executeCharTest('‚äì', ['square cap', 'square cap', 'square cap']);
  this.executeCharTest('‚äî', ['square cup', 'square cup', 'square cup']);
  this.executeCharTest('‚äï', ['circled plus', 'circled plus', 'circled plus']);
  this.executeCharTest('‚äñ', ['circled minus', 'circled minus', 'circled minus']);
  this.executeCharTest('‚äó', ['circled times', 'circled times', 'circled times']);
  this.executeCharTest('‚äò', ['circled division slash', 'circled division slash', 'circled division slash']);
  this.executeCharTest('‚äô', ['circled dot operator', 'circled dot operator', 'circled dot operator']);
  this.executeCharTest('‚äö', ['circled ring operator', 'circled ring operator', 'circled ring operator']);
  this.executeCharTest('‚äõ', ['circled asterisk operator', 'circled asterisk operator', 'circled asterisk operator']);
  this.executeCharTest('‚äú', ['circled equals', 'circled equals', 'circled equals']);
  this.executeCharTest('‚äù', ['circled dash', 'circled dash', 'circled dash']);
  this.executeCharTest('‚äû', ['squared plus', 'squared plus', 'squared plus']);
  this.executeCharTest('‚äü', ['squared minus', 'squared minus', 'squared minus']);
  this.executeCharTest('‚ä†', ['squared times', 'squared times', 'squared times']);
  this.executeCharTest('‚ä°', ['squared dot operator', 'squared dot operator', 'squared dot operator']);
  this.executeCharTest('‚ä¢', ['right tack', 'right tack', 'right tack']);
  this.executeCharTest('‚ä£', ['left tack', 'left tack', 'left tack']);
  this.executeCharTest('‚ä§', ['down tack', 'down tack', 'down tack']);
  this.executeCharTest('‚ä•', ['up tack', 'up tack', 'up tack']);
  this.executeCharTest('‚ä¶', ['assertion', 'assertion', 'assertion']);
  this.executeCharTest('‚äß', ['models', 'models', 'models']);
  this.executeCharTest('‚ä®', ['true', 'true', 'true']);
  this.executeCharTest('‚ä©', ['forces', 'forces', 'forces']);
  this.executeCharTest('‚ä™', ['triple vertical bar right turnstile', 'triple vertical bar right turnstile', 'triple vertical bar right turnstile']);
  this.executeCharTest('‚ä´', ['double vertical bar double right turnstile', 'double vertical bar double right turnstile', 'double vertical bar double right turnstile']);
  this.executeCharTest('‚ä¨', ['does not prove', 'does not prove', 'does not prove']);
  this.executeCharTest('‚ä≠', ['not true', 'not true', 'not true']);
  this.executeCharTest('‚äÆ', ['does not force', 'does not force', 'does not force']);
  this.executeCharTest('‚äØ', ['negated double vertical bar double right turnstile', 'negated double vertical bar double right turnstile', 'negated double vertical bar double right turnstile']);
  this.executeCharTest('‚ä∞', ['precedes under relation', 'precedes under relation', 'precedes under relation']);
  this.executeCharTest('‚ä±', ['succeeds under relation', 'succeeds under relation', 'succeeds under relation']);
  this.executeCharTest('‚ä≤', ['normal subgroup of', 'normal subgroup of', 'normal subgroup of']);
  this.executeCharTest('‚ä≥', ['contains as normal subgroup', 'contains as normal subgroup', 'contains as normal subgroup']);
  this.executeCharTest('‚ä¥', ['normal subgroup of or equals', 'normal subgroup of or equals', 'normal subgroup of or equals']);
  this.executeCharTest('‚äµ', ['contains as normal subgroup or equals', 'contains as normal subgroup or equals', 'contains as normal subgroup or equals']);
  this.executeCharTest('‚ä∂', ['original of', 'original of', 'original of']);
  this.executeCharTest('‚ä∑', ['image of', 'image of', 'image of']);
  this.executeCharTest('‚ä∏', ['multimap', 'multimap', 'multimap']);
  this.executeCharTest('‚äπ', ['hermitian conjugate matrix', 'hermitian conjugate matrix', 'hermitian conjugate matrix']);
  this.executeCharTest('‚ä∫', ['intercalate', 'intercalate', 'intercalate']);
  this.executeCharTest('‚äª', ['xor', 'xor', 'xor']);
  this.executeCharTest('‚äº', ['nand', 'nand', 'nand']);
  this.executeCharTest('‚äΩ', ['nor', 'nor', 'nor']);
  this.executeCharTest('‚äø', ['right triangle', 'right triangle', 'right triangle']);
  this.executeCharTest('‚ãÄ', ['n ary logical and', 'n ary logical and', 'n ary logical and']);
  this.executeCharTest('‚ãÅ', ['n ary logical or', 'n ary logical or', 'n ary logical or']);
  this.executeCharTest('‚ãÇ', ['n ary intersection', 'n ary intersection', 'n ary intersection']);
  this.executeCharTest('‚ãÉ', ['n ary union', 'n ary union', 'n ary union']);
  this.executeCharTest('‚ãÑ', ['diamond operator', 'diamond operator', 'diamond operator']);
  this.executeCharTest('‚ãÖ', ['dot operator', 'dot operator', 'dot operator']);
  this.executeCharTest('‚ãÜ', ['star operator', 'star operator', 'star operator']);
  this.executeCharTest('‚ãá', ['division times', 'division times', 'division times']);
  this.executeCharTest('‚ãà', ['bowtie', 'bowtie', 'bowtie']);
  this.executeCharTest('‚ãâ', ['left normal factor semidirect product', 'left normal factor semidirect product', 'left normal factor semidirect product']);
  this.executeCharTest('‚ãä', ['right normal factor semidirect product', 'right normal factor semidirect product', 'right normal factor semidirect product']);
  this.executeCharTest('‚ãã', ['left semidirect product', 'left semidirect product', 'left semidirect product']);
  this.executeCharTest('‚ãå', ['right semidirect product', 'right semidirect product', 'right semidirect product']);
  this.executeCharTest('‚ãç', ['reversed tilde equals', 'reversed tilde equals', 'reversed tilde equals']);
  this.executeCharTest('‚ãé', ['curly logical or', 'curly logical or', 'curly logical or']);
  this.executeCharTest('‚ãè', ['curly logical and', 'curly logical and', 'curly logical and']);
  this.executeCharTest('‚ãê', ['double subset', 'double subset', 'double subset']);
  this.executeCharTest('‚ãë', ['double superset', 'double superset', 'double superset']);
  this.executeCharTest('‚ãí', ['double intersection', 'double intersection', 'double intersection']);
  this.executeCharTest('‚ãì', ['double union', 'double union', 'double union']);
  this.executeCharTest('‚ãî', ['pitchfork', 'pitchfork', 'pitchfork']);
  this.executeCharTest('‚ãï', ['equal and parallel to', 'equal and parallel to', 'equal and parallel to']);
  this.executeCharTest('‚ãñ', ['less than with dot', 'less than dot', 'less than with dot']);
  this.executeCharTest('‚ãó', ['greater than with dot', 'greater than dot', 'greater than with dot']);
  this.executeCharTest('‚ãò', ['very much less than', 'very much less than', 'very much less than']);
  this.executeCharTest('‚ãô', ['very much greater than', 'very much greater than', 'very much greater than']);
  this.executeCharTest('‚ãö', ['less than equals or greater than', 'less than equals or greater than', 'less than equals or greater than']);
  this.executeCharTest('‚ãõ', ['greater than equals or less than', 'greater than equals or less than', 'greater than equals or less than']);
  this.executeCharTest('‚ãú', ['equals or less than', 'equals or less than', 'equals or less than']);
  this.executeCharTest('‚ãù', ['equals or greater than', 'equals or greater than', 'equals or greater than']);
  this.executeCharTest('‚ãû', ['equals or precedes', 'equals or precedes', 'equals or precedes']);
  this.executeCharTest('‚ãü', ['equals or succeeds', 'equals or succeeds', 'equals or succeeds']);
  this.executeCharTest('‚ã†', ['does not precede or equal', 'does not precede or equal', 'does not precede or equal']);
  this.executeCharTest('‚ã°', ['does not succeed or equal', 'does not succeed or equal', 'does not succeed or equal']);
  this.executeCharTest('‚ã¢', ['not square image of or equals', 'not square image of or equals', 'not square image of or equals']);
  this.executeCharTest('‚ã£', ['not square original of or equals', 'not square original of or equals', 'not square original of or equals']);
  this.executeCharTest('‚ã§', ['square image of or not equals', 'square image of or not equals', 'square image of or not equals']);
  this.executeCharTest('‚ã•', ['square original of or not equals', 'square original of or not equals', 'square original of or not equals']);
  this.executeCharTest('‚ã¶', ['less than but not equivalent to', 'less than but not equivalent to', 'less than but not equivalent to']);
  this.executeCharTest('‚ãß', ['greater than but not equivalent to', 'greater than but not equivalent to', 'greater than but not equivalent to']);
  this.executeCharTest('‚ã®', ['precedes but not equivalent to', 'precedes but not equivalent to', 'precedes but not equivalent to']);
  this.executeCharTest('‚ã©', ['succeeds but not equivalent to', 'succeeds but not equivalent to', 'succeeds but not equivalent to']);
  this.executeCharTest('‚ã™', ['not normal subgroup of', 'not normal subgroup of', 'not normal subgroup of']);
  this.executeCharTest('‚ã´', ['does not contain as normal subgroup', 'does not contain as normal subgroup', 'does not contain as normal subgroup']);
  this.executeCharTest('‚ã¨', ['not normal subgroup of or equals', 'not normal subgroup of or equals', 'not normal subgroup of or equals']);
  this.executeCharTest('‚ã≠', ['does not contain as normal subgroup or equal', 'does not contain as normal subgroup or equal', 'does not contain as normal subgroup or equal']);
  this.executeCharTest('‚ãÆ', ['vertical ellipsis', 'vertical ellipsis', 'vertical ellipsis']);
  this.executeCharTest('‚ãØ', ['midline horizontal ellipsis', 'midline horizontal ellipsis', 'midline horizontal ellipsis']);
  this.executeCharTest('‚ã∞', ['up right diagonal ellipsis', 'up right diagonal ellipsis', 'up right diagonal ellipsis']);
  this.executeCharTest('‚ã±', ['down right diagonal ellipsis', 'down right diagonal ellipsis', 'down right diagonal ellipsis']);
  this.executeCharTest('‚ã≤', ['element of with long horizontal stroke', 'element of with long horizontal stroke', 'element of with long horizontal stroke']);
  this.executeCharTest('‚ã≥', ['element of with vertical bar at end of horizontal stroke', 'element of with vertical bar at end of horizontal stroke', 'element of with vertical bar at end of horizontal stroke']);
  this.executeCharTest('‚ã¥', ['small element of with vertical bar at end of horizontal stroke', 'small element of with vertical bar at end of horizontal stroke', 'small element of with vertical bar at end of horizontal stroke']);
  this.executeCharTest('‚ãµ', ['element of with dot above', 'element of with dot above', 'element of with dot above']);
  this.executeCharTest('‚ã∂', ['element of with overbar', 'element of with overbar', 'element of with overbar']);
  this.executeCharTest('‚ã∑', ['small element of with overbar', 'small element of with overbar', 'small element of with overbar']);
  this.executeCharTest('‚ã∏', ['element of with underbar', 'element of with underbar', 'element of with underbar']);
  this.executeCharTest('‚ãπ', ['element of with two horizontal strokes', 'element of with two horizontal strokes', 'element of with two horizontal strokes']);
  this.executeCharTest('‚ã∫', ['contains with long horizontal stroke', 'contains with long horizontal stroke', 'contains with long horizontal stroke']);
  this.executeCharTest('‚ãª', ['contains with vertical bar at end of horizontal stroke', 'contains with vertical bar at end of horizontal stroke', 'contains with vertical bar at end of horizontal stroke']);
  this.executeCharTest('‚ãº', ['small contains with vertical bar at end of horizontal stroke', 'small contains with vertical bar at end of horizontal stroke', 'small contains with vertical bar at end of horizontal stroke']);
  this.executeCharTest('‚ãΩ', ['contains with overbar', 'contains with overbar', 'contains with overbar']);
  this.executeCharTest('‚ãæ', ['small contains with overbar', 'small contains with overbar', 'small contains with overbar']);
  this.executeCharTest('‚ãø', ['z notation bag membership', 'z notation bag membership', 'z notation bag membership']);
  this.executeCharTest('‚åÄ', ['diameter sign', 'diameter', 'diameter']);
  this.executeCharTest('‚åÇ', ['house', 'house', 'house']);
  this.executeCharTest('‚åÖ', ['projective', 'projective', 'projective']);
  this.executeCharTest('‚åÜ', ['perspective', 'perspective', 'perspective']);
  this.executeCharTest('‚åá', ['wavy line', 'wavy line', 'wavy line']);
  this.executeCharTest('‚åê', ['reversed not sign', 'reversed not', 'reversed not']);
  this.executeCharTest('‚åë', ['square lozenge', 'square lozenge', 'square lozenge']);
  this.executeCharTest('‚åí', ['arc', 'arc', 'arc']);
  this.executeCharTest('‚åì', ['segment', 'segment', 'segment']);
  this.executeCharTest('‚åî', ['sector', 'sector', 'sector']);
  this.executeCharTest('‚ûï', ['heavy plus sign', 'bold plus', 'heavy plus']);
  this.executeCharTest('‚ûñ', ['heavy minus sign', 'bold minus', 'heavy minus']);
  this.executeCharTest('‚ûó', ['heavy division sign', 'bold division', 'heavy division']);
  this.executeCharTest('‚û∞', ['curly loop', 'curly loop', 'curly loop']);
  this.executeCharTest('‚ûø', ['double curly loop', 'double curly loop', 'double curly loop']);
  this.executeCharTest('‚üÅ', ['white triangle containing small white triangle', 'white triangle containing small white triangle', 'white triangle containing small white triangle']);
  this.executeCharTest('‚üÇ', ['perpendicular', 'perpendicular', 'perpendicular']);
  this.executeCharTest('‚üÉ', ['open subset', 'open subset', 'open subset']);
  this.executeCharTest('‚üÑ', ['open superset', 'open superset', 'open superset']);
  this.executeCharTest('‚üá', ['or with dot inside', 'or with dot inside', 'or with dot inside']);
  this.executeCharTest('‚üà', ['reverse solidus preceding subset', 'reverse solidus preceding subset', 'reverse solidus preceding subset']);
  this.executeCharTest('‚üâ', ['superset preceding solidus', 'superset preceding solidus', 'superset preceding solidus']);
  this.executeCharTest('‚üä', ['vertical bar with horizontal stroke', 'vertical bar with horizontal stroke', 'vertical bar with horizontal stroke']);
  this.executeCharTest('‚üã', ['mathematical rising diagonal', 'mathematical rising diagonal', 'mathematical rising diagonal']);
  this.executeCharTest('‚üå', ['long division', 'long division', 'long division']);
  this.executeCharTest('‚üç', ['mathematical falling diagonal', 'mathematical falling diagonal', 'mathematical falling diagonal']);
  this.executeCharTest('‚üé', ['squared logical and', 'squared logical and', 'squared logical and']);
  this.executeCharTest('‚üè', ['squared logical or', 'squared logical or', 'squared logical or']);
  this.executeCharTest('‚üê', ['white diamond with centered dot', 'white diamond with centered dot', 'white diamond with centered dot']);
  this.executeCharTest('‚üë', ['and with dot', 'and with dot', 'and with dot']);
  this.executeCharTest('‚üí', ['element of opening upwards', 'element of opening upwards', 'element of opening upwards']);
  this.executeCharTest('‚üì', ['lower right corner with dot', 'lower right corner with dot', 'lower right corner with dot']);
  this.executeCharTest('‚üî', ['upper left corner with dot', 'upper left corner with dot', 'upper left corner with dot']);
  this.executeCharTest('‚üï', ['left outer join', 'left outer join', 'left outer join']);
  this.executeCharTest('‚üñ', ['right outer join', 'right outer join', 'right outer join']);
  this.executeCharTest('‚üó', ['full outer join', 'full outer join', 'full outer join']);
  this.executeCharTest('‚üò', ['large up tack', 'large up tack', 'large up tack']);
  this.executeCharTest('‚üô', ['large down tack', 'large down tack', 'large down tack']);
  this.executeCharTest('‚üö', ['left and right double turnstile', 'left and right double turnstile', 'left and right double turnstile']);
  this.executeCharTest('‚üõ', ['left and right tack', 'left and right tack', 'left and right tack']);
  this.executeCharTest('‚üú', ['left multimap', 'left multimap', 'left multimap']);
  this.executeCharTest('‚üù', ['long right tack', 'long right tack', 'long right tack']);
  this.executeCharTest('‚üû', ['long left tack', 'long left tack', 'long left tack']);
  this.executeCharTest('‚üü', ['up tack with circle above', 'up tack with circle above', 'up tack with circle above']);
  this.executeCharTest('‚ü†', ['lozenge divided by horizontal rule', 'lozenge divided by horizontal rule', 'lozenge divided by horizontal rule']);
  this.executeCharTest('‚ü°', ['white concave sided diamond', 'white concave sided diamond', 'white concave sided diamond']);
  this.executeCharTest('‚ü¢', ['white concave sided diamond with leftwards tick', 'white concave sided diamond with leftwards tick', 'white concave sided diamond with leftwards tick']);
  this.executeCharTest('‚ü£', ['white concave sided diamond with rightwards tick', 'white concave sided diamond with rightwards tick', 'white concave sided diamond with rightwards tick']);
  this.executeCharTest('‚ü§', ['white square with leftwards tick', 'white square with leftwards tick', 'white square with leftwards tick']);
  this.executeCharTest('‚ü•', ['white square with rightwards tick', 'white square with rightwards tick', 'white square with rightwards tick']);
  this.executeCharTest('‚§´', ['rising diagonal crossing falling diagonal', 'rising diagonal crossing falling diagonal', 'rising diagonal crossing falling diagonal']);
  this.executeCharTest('‚§¨', ['falling diagonal crossing rising diagonal', 'falling diagonal crossing rising diagonal', 'falling diagonal crossing rising diagonal']);
  this.executeCharTest('‚¶Ä', ['triple vertical bar delimiter', 'triple vertical bar delimiter', 'triple vertical bar delimiter']);
  this.executeCharTest('‚¶Å', ['z notation spot', 'z notation spot', 'z notation spot']);
  this.executeCharTest('‚¶Ç', ['z notation type colon', 'z notation type colon', 'z notation type colon']);
  this.executeCharTest('‚¶ô', ['dotted fence', 'dotted fence', 'dotted fence']);
  this.executeCharTest('‚¶ö', ['vertical zigzag line', 'vertical zigzag line', 'vertical zigzag line']);
  this.executeCharTest('‚¶∞', ['reversed empty set', 'reversed empty set', 'reversed empty set']);
  this.executeCharTest('‚¶±', ['empty set with overbar', 'empty set with overbar', 'empty set with overbar']);
  this.executeCharTest('‚¶≤', ['empty set with small circle above', 'empty set with small circle above', 'empty set with small circle above']);
  this.executeCharTest('‚¶µ', ['circle with horizontal bar', 'circle with horizontal bar', 'circle with horizontal bar']);
  this.executeCharTest('‚¶∂', ['circled vertical bar', 'circled vertical bar', 'circled vertical bar']);
  this.executeCharTest('‚¶∑', ['circled parallel', 'circled parallel', 'circled parallel']);
  this.executeCharTest('‚¶∏', ['circled reverse solidus', 'circled reverse solidus', 'circled reverse solidus']);
  this.executeCharTest('‚¶π', ['circled perpendicular', 'circled perpendicular', 'circled perpendicular']);
  this.executeCharTest('‚¶∫', ['circle divided by horizontal bar and top half divided by vertical bar', 'circle divided by horizontal bar and top half divided by vertical bar', 'circle divided by horizontal bar and top half divided by vertical bar']);
  this.executeCharTest('‚¶ª', ['circle with superimposed x', 'circle with superimposed x', 'circle with superimposed x']);
  this.executeCharTest('‚¶º', ['circled anticlockwise rotated division sign', 'circled anticlockwise rotated division', 'circled anticlockwise rotated division']);
  this.executeCharTest('‚¶æ', ['circled white bullet', 'circled white bullet', 'circled white bullet']);
  this.executeCharTest('‚¶ø', ['circled bullet', 'circled bullet', 'circled bullet']);
  this.executeCharTest('‚ßÄ', ['circled less than', 'circled less than', 'circled less than']);
  this.executeCharTest('‚ßÅ', ['circled greater than', 'circled greater than', 'circled greater than']);
  this.executeCharTest('‚ßÇ', ['circle with small circle to the right', 'circle with small circle to the right', 'circle with small circle to the right']);
  this.executeCharTest('‚ßÉ', ['circle with two horizontal strokes to the right', 'circle with two horizontal strokes to the right', 'circle with two horizontal strokes to the right']);
  this.executeCharTest('‚ßÑ', ['squared rising diagonal slash', 'squared rising diagonal slash', 'squared rising diagonal slash']);
  this.executeCharTest('‚ßÖ', ['squared falling diagonal slash', 'squared falling diagonal slash', 'squared falling diagonal slash']);
  this.executeCharTest('‚ßÜ', ['squared asterisk', 'squared asterisk', 'squared asterisk']);
  this.executeCharTest('‚ßá', ['squared small circle', 'squared small circle', 'squared small circle']);
  this.executeCharTest('‚ßà', ['squared square', 'squared square', 'squared square']);
  this.executeCharTest('‚ßâ', ['two joined squares', 'two joined squares', 'two joined squares']);
  this.executeCharTest('‚ßä', ['triangle with dot above', 'triangle with dot above', 'triangle with dot above']);
  this.executeCharTest('‚ßã', ['triangle with underbar', 'triangle with underbar', 'triangle with underbar']);
  this.executeCharTest('‚ßå', ['s in triangle', 's in triangle', 's in triangle']);
  this.executeCharTest('‚ßç', ['triangle with serifs at bottom', 'triangle with serifs at bottom', 'triangle with serifs at bottom']);
  this.executeCharTest('‚ßé', ['right triangle above left triangle', 'right triangle above left triangle', 'right triangle above left triangle']);
  this.executeCharTest('‚ßè', ['left triangle beside vertical bar', 'left triangle beside vertical bar', 'left triangle beside vertical bar']);
  this.executeCharTest('‚ßê', ['vertical bar beside right triangle', 'vertical bar beside right triangle', 'vertical bar beside right triangle']);
  this.executeCharTest('‚ßë', ['bowtie with left half black', 'bowtie with left half black', 'bowtie with left half black']);
  this.executeCharTest('‚ßí', ['bowtie with right half black', 'bowtie with right half black', 'bowtie with right half black']);
  this.executeCharTest('‚ßì', ['black bowtie', 'black bowtie', 'black bowtie']);
  this.executeCharTest('‚ßî', ['times with left half black', 'times with left half black', 'times with left half black']);
  this.executeCharTest('‚ßï', ['times with right half black', 'times with right half black', 'times with right half black']);
  this.executeCharTest('‚ßñ', ['white hourglass', 'white hourglass', 'white hourglass']);
  this.executeCharTest('‚ßó', ['black hourglass', 'black hourglass', 'black hourglass']);
  this.executeCharTest('‚ßú', ['incomplete infinity', 'incomplete infinity', 'incomplete infinity']);
  this.executeCharTest('‚ßù', ['tie over infinity', 'tie over infinity', 'tie over infinity']);
  this.executeCharTest('‚ßû', ['infinity negated with vertical bar', 'infinity negated with vertical bar', 'infinity negated with vertical bar']);
  this.executeCharTest('‚ßü', ['double ended multimap', 'double ended multimap', 'double ended multimap']);
  this.executeCharTest('‚ß†', ['square with contoured outline', 'square with contoured outline', 'square with contoured outline']);
  this.executeCharTest('‚ß°', ['increases as', 'increases as', 'increases as']);
  this.executeCharTest('‚ß¢', ['shuffle product', 'shuffle product', 'shuffle product']);
  this.executeCharTest('‚ß£', ['equals sign and slanted parallel', 'equals sign and slanted parallel', 'equals sign and slanted parallel']);
  this.executeCharTest('‚ß§', ['equals sign and slanted parallel with tilde above', 'equals sign and slanted parallel with tilde above', 'equals sign and slanted parallel with tilde above']);
  this.executeCharTest('‚ß•', ['identical to and slanted parallel', 'identical to and slanted parallel', 'identical to and slanted parallel']);
  this.executeCharTest('‚ß¶', ['gleich stark', 'gleich stark', 'gleich stark']);
  this.executeCharTest('‚ßß', ['thermodynamic', 'thermodynamic', 'thermodynamic']);
  this.executeCharTest('‚ß®', ['down pointing triangle with left half black', 'down pointing triangle with left half black', 'down pointing triangle with left half black']);
  this.executeCharTest('‚ß©', ['down pointing triangle with right half black', 'down pointing triangle with right half black', 'down pointing triangle with right half black']);
  this.executeCharTest('‚ß´', ['black lozenge', 'black lozenge', 'black lozenge']);
  this.executeCharTest('‚ßÆ', ['error barred white square', 'error barred white square', 'error barred white square']);
  this.executeCharTest('‚ßØ', ['error barred black square', 'error barred black square', 'error barred black square']);
  this.executeCharTest('‚ß∞', ['error barred white diamond', 'error barred white diamond', 'error barred white diamond']);
  this.executeCharTest('‚ß±', ['error barred black diamond', 'error barred black diamond', 'error barred black diamond']);
  this.executeCharTest('‚ß≤', ['error barred white circle', 'error barred white circle', 'error barred white circle']);
  this.executeCharTest('‚ß≥', ['error barred black circle', 'error barred black circle', 'error barred black circle']);
  this.executeCharTest('‚ß¥', ['rule delayed', 'rule delayed', 'rule delayed']);
  this.executeCharTest('‚ßµ', ['reverse solidus operator', 'reverse solidus operator', 'reverse solidus operator']);
  this.executeCharTest('‚ß∂', ['solidus with overbar', 'solidus with overbar', 'solidus with overbar']);
  this.executeCharTest('‚ß∑', ['reverse solidus with horizontal stroke', 'reverse solidus with horizontal stroke', 'reverse solidus with horizontal stroke']);
  this.executeCharTest('‚ß∏', ['big solidus', 'big solidus', 'big solidus']);
  this.executeCharTest('‚ßπ', ['big reverse solidus', 'big reverse solidus', 'big reverse solidus']);
  this.executeCharTest('‚ß∫', ['double plus', 'double plus', 'double plus']);
  this.executeCharTest('‚ßª', ['triple plus', 'triple plus', 'triple plus']);
  this.executeCharTest('‚ßæ', ['tiny', 'tiny', 'tiny']);
  this.executeCharTest('‚ßø', ['miny', 'miny', 'miny']);
  this.executeCharTest('‚®Ä', ['n ary circled dot operator', 'n ary circled dot operator', 'n ary circled dot operator']);
  this.executeCharTest('‚®Å', ['n ary circled plus operator', 'n ary circled plus operator', 'n ary circled plus operator']);
  this.executeCharTest('‚®Ç', ['n ary circled times operator', 'n ary circled times operator', 'n ary circled times operator']);
  this.executeCharTest('‚®É', ['n ary union operator with dot', 'n ary union operator with dot', 'n ary union operator with dot']);
  this.executeCharTest('‚®Ñ', ['n ary union operator with plus', 'n ary union operator with plus', 'n ary union operator with plus']);
  this.executeCharTest('‚®Ö', ['n ary square intersection operator', 'n ary square intersection operator', 'n ary square intersection operator']);
  this.executeCharTest('‚®Ü', ['n ary square union operator', 'n ary square union operator', 'n ary square union operator']);
  this.executeCharTest('‚®á', ['two logical and operator', 'two logical and operator', 'two logical and operator']);
  this.executeCharTest('‚®à', ['two logical or operator', 'two logical or operator', 'two logical or operator']);
  this.executeCharTest('‚®â', ['n ary times operator', 'n ary times operator', 'n ary times operator']);
  this.executeCharTest('‚®ä', ['modulo two sum', 'modulo two sum', 'modulo two sum']);
  this.executeCharTest('‚®ã', ['summation with integral', 'summation with integral', 'summation with integral']);
  this.executeCharTest('‚®å', ['quadruple integral operator', 'quadruple integral operator', 'quadruple integral operator']);
  this.executeCharTest('‚®ç', ['finite part integral', 'finite part integral', 'finite part integral']);
  this.executeCharTest('‚®é', ['integral with double stroke', 'integral with double stroke', 'integral with double stroke']);
  this.executeCharTest('‚®è', ['integral average with slash', 'integral average with slash', 'integral average with slash']);
  this.executeCharTest('‚®ê', ['circulation function', 'circulation function', 'circulation function']);
  this.executeCharTest('‚®ë', ['anticlockwise integration', 'anticlockwise integration', 'anticlockwise integration']);
  this.executeCharTest('‚®í', ['line integration with rectangular path around pole', 'line integration with rectangular path around pole', 'line integration with rectangular path around pole']);
  this.executeCharTest('‚®ì', ['line integration with semicircular path around pole', 'line integration with semicircular path around pole', 'line integration with semicircular path around pole']);
  this.executeCharTest('‚®î', ['line integration not including the pole', 'line integration not including the pole', 'line integration not including the pole']);
  this.executeCharTest('‚®ï', ['integral around a point operator', 'integral around a point operator', 'integral around a point operator']);
  this.executeCharTest('‚®ñ', ['quaternion integral operator', 'quaternion integral operator', 'quaternion integral operator']);
  this.executeCharTest('‚®ò', ['integral with times sign', 'integral with times', 'integral with times']);
  this.executeCharTest('‚®ô', ['integral with intersection', 'integral with intersection', 'integral with intersection']);
  this.executeCharTest('‚®ö', ['integral with union', 'integral with union', 'integral with union']);
  this.executeCharTest('‚®õ', ['integral with overbar', 'integral with overbar', 'integral with overbar']);
  this.executeCharTest('‚®ú', ['integral with underbar', 'integral with underbar', 'integral with underbar']);
  this.executeCharTest('‚®ù', ['join', 'join', 'join']);
  this.executeCharTest('‚®û', ['large left triangle operator', 'large left triangle operator', 'large left triangle operator']);
  this.executeCharTest('‚®ü', ['z notation schema composition', 'z notation schema composition', 'z notation schema composition']);
  this.executeCharTest('‚®†', ['z notation schema piping', 'z notation schema piping', 'z notation schema piping']);
  this.executeCharTest('‚®°', ['z notation schema projection', 'z notation schema projection', 'z notation schema projection']);
  this.executeCharTest('‚®¢', ['plus sign with small circle above', 'plus with circle above', 'plus with circle above']);
  this.executeCharTest('‚®£', ['plus sign with circumflex accent above', 'plus hat', 'plus hat']);
  this.executeCharTest('‚®§', ['plus sign with tilde above', 'plus tilde', 'plus tilde']);
  this.executeCharTest('‚®•', ['plus sign with dot below', 'plus underdot', 'plus underdot']);
  this.executeCharTest('‚®¶', ['plus sign with tilde below', 'plus sign with tilde below', 'plus sign with tilde below']);
  this.executeCharTest('‚®ß', ['plus sign with subscript two', 'plus sign with subscript two', 'plus sign with subscript two']);
  this.executeCharTest('‚®®', ['plus sign with black triangle', 'plus sign with black triangle', 'plus sign with black triangle']);
  this.executeCharTest('‚®©', ['minus sign with comma above', 'minus sign with comma above', 'minus sign with comma above']);
  this.executeCharTest('‚®™', ['minus sign with dot below', 'minus sign with dot below', 'minus sign with dot below']);
  this.executeCharTest('‚®´', ['minus sign with falling dots', 'minus sign with falling dots', 'minus sign with falling dots']);
  this.executeCharTest('‚®¨', ['minus sign with rising dots', 'minus sign with rising dots', 'minus sign with rising dots']);
  this.executeCharTest('‚®≠', ['plus sign in left half circle', 'plus sign in left half circle', 'plus sign in left half circle']);
  this.executeCharTest('‚®Æ', ['plus sign in right half circle', 'plus sign in right half circle', 'plus sign in right half circle']);
  this.executeCharTest('‚®Ø', ['vector or cross product', 'vector or cross product', 'vector or cross product']);
  this.executeCharTest('‚®∞', ['multiplication sign with dot above', 'multiplication sign with dot above', 'multiplication sign with dot above']);
  this.executeCharTest('‚®±', ['multiplication sign with underbar', 'multiplication sign with underbar', 'multiplication sign with underbar']);
  this.executeCharTest('‚®≤', ['semidirect product with bottom closed', 'semidirect product with bottom closed', 'semidirect product with bottom closed']);
  this.executeCharTest('‚®≥', ['smash product', 'smash product', 'smash product']);
  this.executeCharTest('‚®¥', ['multiplication sign in left half circle', 'multiplication sign in left half circle', 'multiplication sign in left half circle']);
  this.executeCharTest('‚®µ', ['multiplication sign in right half circle', 'multiplication sign in right half circle', 'multiplication sign in right half circle']);
  this.executeCharTest('‚®∂', ['circled multiplication sign with circumflex accent', 'circled multiplication sign with circumflex accent', 'circled multiplication sign with circumflex accent']);
  this.executeCharTest('‚®∑', ['multiplication sign in double circle', 'multiplication sign in double circle', 'multiplication sign in double circle']);
  this.executeCharTest('‚®∏', ['circled division sign', 'circled division', 'circled division']);
  this.executeCharTest('‚®π', ['plus sign in triangle', 'plus sign in triangle', 'plus sign in triangle']);
  this.executeCharTest('‚®∫', ['minus sign in triangle', 'minus sign in triangle', 'minus sign in triangle']);
  this.executeCharTest('‚®ª', ['multiplication sign in triangle', 'multiplication sign in triangle', 'multiplication sign in triangle']);
  this.executeCharTest('‚®º', ['interior product', 'interior product', 'interior product']);
  this.executeCharTest('‚®Ω', ['righthand interior product', 'righthand interior product', 'righthand interior product']);
  this.executeCharTest('‚®æ', ['z notation relational composition', 'z notation relational composition', 'z notation relational composition']);
  this.executeCharTest('‚®ø', ['amalgamation or coproduct', 'amalgamation or coproduct', 'amalgamation or coproduct']);
  this.executeCharTest('‚©Ä', ['intersection with dot', 'intersection with dot', 'intersection with dot']);
  this.executeCharTest('‚©Å', ['union with minus sign', 'union with minus', 'union with minus']);
  this.executeCharTest('‚©Ç', ['union with overbar', 'union with overbar', 'union with overbar']);
  this.executeCharTest('‚©É', ['intersection with overbar', 'intersection with overbar', 'intersection with overbar']);
  this.executeCharTest('‚©Ñ', ['intersection with logical and', 'intersection with logical and', 'intersection with logical and']);
  this.executeCharTest('‚©Ö', ['union with logical or', 'union with logical or', 'union with logical or']);
  this.executeCharTest('‚©Ü', ['union above intersection', 'union above intersection', 'union above intersection']);
  this.executeCharTest('‚©á', ['intersection above union', 'intersection above union', 'intersection above union']);
  this.executeCharTest('‚©à', ['union above bar above intersection', 'union above bar above intersection', 'union above bar above intersection']);
  this.executeCharTest('‚©â', ['intersection above bar above union', 'intersection above bar above union', 'intersection above bar above union']);
  this.executeCharTest('‚©ä', ['union beside and joined with union', 'union beside and joined with union', 'union beside and joined with union']);
  this.executeCharTest('‚©ã', ['intersection beside and joined with intersection', 'intersection beside and joined with intersection', 'intersection beside and joined with intersection']);
  this.executeCharTest('‚©å', ['closed union with serifs', 'closed union with serifs', 'closed union with serifs']);
  this.executeCharTest('‚©ç', ['closed intersection with serifs', 'closed intersection with serifs', 'closed intersection with serifs']);
  this.executeCharTest('‚©é', ['double square intersection', 'double square intersection', 'double square intersection']);
  this.executeCharTest('‚©è', ['double square union', 'double square union', 'double square union']);
  this.executeCharTest('‚©ê', ['closed union with serifs and smash product', 'closed union with serifs and smash product', 'closed union with serifs and smash product']);
  this.executeCharTest('‚©ë', ['logical and with dot above', 'logical and with dot above', 'logical and with dot above']);
  this.executeCharTest('‚©í', ['logical or with dot above', 'logical or with dot above', 'logical or with dot above']);
  this.executeCharTest('‚©ì', ['double logical and', 'double logical and', 'double logical and']);
  this.executeCharTest('‚©î', ['double logical or', 'double logical or', 'double logical or']);
  this.executeCharTest('‚©ï', ['two intersecting logical and', 'two intersecting logical and', 'two intersecting logical and']);
  this.executeCharTest('‚©ñ', ['two intersecting logical or', 'two intersecting logical or', 'two intersecting logical or']);
  this.executeCharTest('‚©ó', ['sloping large or', 'sloping large or', 'sloping large or']);
  this.executeCharTest('‚©ò', ['sloping large and', 'sloping large and', 'sloping large and']);
  this.executeCharTest('‚©ô', ['logical or overlapping logical and', 'logical or overlapping logical and', 'logical or overlapping logical and']);
  this.executeCharTest('‚©ö', ['logical and with middle stem', 'logical and with middle stem', 'logical and with middle stem']);
  this.executeCharTest('‚©õ', ['logical or with middle stem', 'logical or with middle stem', 'logical or with middle stem']);
  this.executeCharTest('‚©ú', ['logical and with horizontal dash', 'logical and with horizontal dash', 'logical and with horizontal dash']);
  this.executeCharTest('‚©ù', ['logical or with horizontal dash', 'logical or with horizontal dash', 'logical or with horizontal dash']);
  this.executeCharTest('‚©û', ['logical and with double overbar', 'logical and with double overbar', 'logical and with double overbar']);
  this.executeCharTest('‚©ü', ['logical and with underbar', 'logical and with underbar', 'logical and with underbar']);
  this.executeCharTest('‚©†', ['logical and with double underbar', 'logical and with double underbar', 'logical and with double underbar']);
  this.executeCharTest('‚©°', ['small vee with underbar', 'small vee with underbar', 'small vee with underbar']);
  this.executeCharTest('‚©¢', ['logical or with double overbar', 'logical or with double overbar', 'logical or with double overbar']);
  this.executeCharTest('‚©£', ['logical or with double underbar', 'logical or with double underbar', 'logical or with double underbar']);
  this.executeCharTest('‚©§', ['z notation domain antirestriction', 'z notation domain antirestriction', 'z notation domain antirestriction']);
  this.executeCharTest('‚©•', ['z notation range antirestriction', 'z notation range antirestriction', 'z notation range antirestriction']);
  this.executeCharTest('‚©¶', ['equals sign with dot below', 'equals sign with dot below', 'equals sign with dot below']);
  this.executeCharTest('‚©ß', ['identical with dot above', 'identical with dot above', 'identical with dot above']);
  this.executeCharTest('‚©®', ['triple horizontal bar with double vertical stroke', 'triple horizontal bar with double vertical stroke', 'triple horizontal bar with double vertical stroke']);
  this.executeCharTest('‚©©', ['triple horizontal bar with triple vertical stroke', 'triple horizontal bar with triple vertical stroke', 'triple horizontal bar with triple vertical stroke']);
  this.executeCharTest('‚©™', ['tilde operator with dot above', 'tilde operator with dot above', 'tilde operator with dot above']);
  this.executeCharTest('‚©´', ['tilde operator with rising dots', 'tilde operator with rising dots', 'tilde operator with rising dots']);
  this.executeCharTest('‚©¨', ['similar minus similar', 'similar minus similar', 'similar minus similar']);
  this.executeCharTest('‚©≠', ['congruent with dot above', 'congruent with dot above', 'congruent with dot above']);
  this.executeCharTest('‚©Æ', ['equals with asterisk', 'equals with asterisk', 'equals with asterisk']);
  this.executeCharTest('‚©Ø', ['almost equals with circumflex accent', 'almost equal hat', 'almost equal hat']);
  this.executeCharTest('‚©∞', ['approximately equal or equals', 'approximately equal or equals', 'approximately equal or equals']);
  this.executeCharTest('‚©±', ['equals sign above plus sign', 'equals above plus', 'equals above plus']);
  this.executeCharTest('‚©≤', ['plus sign above equals sign', 'plus above equals', 'plus above equals']);
  this.executeCharTest('‚©≥', ['equals sign above tilde operator', 'equals above tilde operator', 'equals above tilde operator']);
  this.executeCharTest('‚©¥', ['double colon equal', 'double colon equal', 'double colon equal']);
  this.executeCharTest('‚©µ', ['two consecutive equals signs', 'two consecutive equals', 'two consecutive equals']);
  this.executeCharTest('‚©∂', ['three consecutive equals signs', 'three consecutive equals', 'three consecutive equals']);
  this.executeCharTest('‚©∑', ['equals sign with two dots above and two dots below', 'equals sign with two dots above and two dots below', 'equals sign with two dots above and two dots below']);
  this.executeCharTest('‚©∏', ['equivalent with four dots above', 'equivalent with four dots above', 'equivalent with four dots above']);
  this.executeCharTest('‚©π', ['less than with circle inside', 'less than with circle inside', 'less than with circle inside']);
  this.executeCharTest('‚©∫', ['greater than with circle inside', 'greater than with circle inside', 'greater than with circle inside']);
  this.executeCharTest('‚©ª', ['less than with question mark above', 'less than with question mark above', 'less than with question mark above']);
  this.executeCharTest('‚©º', ['greater than with question mark above', 'greater than with question mark above', 'greater than with question mark above']);
  this.executeCharTest('‚©Ω', ['less than or slanted equals', 'less than or slanted equals', 'less than or slanted equals']);
  this.executeCharTest('‚©æ', ['greater than or slanted equals', 'greater than or slanted equals', 'greater than or slanted equals']);
  this.executeCharTest('‚©ø', ['less than or slanted equals with dot inside', 'less than or slanted equals with dot inside', 'less than or slanted equals with dot inside']);
  this.executeCharTest('‚™Ä', ['greater than or slanted equals with dot inside', 'greater than or slanted equals with dot inside', 'greater than or slanted equals with dot inside']);
  this.executeCharTest('‚™Å', ['less than or slanted equals with dot above', 'less than or slanted equals with dot above', 'less than or slanted equals with dot above']);
  this.executeCharTest('‚™Ç', ['greater than or slanted equals with dot above', 'greater than or slanted equals with dot above', 'greater than or slanted equals with dot above']);
  this.executeCharTest('‚™É', ['less than or slanted equals with dot above right', 'less than or slanted equals with dot above right', 'less than or slanted equals with dot above right']);
  this.executeCharTest('‚™Ñ', ['greater than or slanted equals with dot above left', 'greater than or slanted equals with dot above left', 'greater than or slanted equals with dot above left']);
  this.executeCharTest('‚™Ö', ['less than or approximate', 'less than or approximate', 'less than or approximate']);
  this.executeCharTest('‚™Ü', ['greater than or approximate', 'greater than or approximate', 'greater than or approximate']);
  this.executeCharTest('‚™á', ['less than and single line not equals', 'less than and single line not equals', 'less than and single line not equals']);
  this.executeCharTest('‚™à', ['greater than and single line not equals', 'greater than and single line not equals', 'greater than and single line not equals']);
  this.executeCharTest('‚™â', ['less than and not approximate', 'less than and not approximate', 'less than and not approximate']);
  this.executeCharTest('‚™ä', ['greater than and not approximate', 'greater than and not approximate', 'greater than and not approximate']);
  this.executeCharTest('‚™ã', ['less than above double line equal above greater than', 'less than above double line equal above greater than', 'less than above double line equal above greater than']);
  this.executeCharTest('‚™å', ['greater than above double line equal above less than', 'greater than above double line equal above less than', 'greater than above double line equal above less than']);
  this.executeCharTest('‚™ç', ['less than above similar or equal', 'less than above similar or equal', 'less than above similar or equal']);
  this.executeCharTest('‚™é', ['greater than above similar or equal', 'greater than above similar or equal', 'greater than above similar or equal']);
  this.executeCharTest('‚™è', ['less than above similar above greater than', 'less than above similar above greater than', 'less than above similar above greater than']);
  this.executeCharTest('‚™ê', ['greater than above similar above less than', 'greater than above similar above less than', 'greater than above similar above less than']);
  this.executeCharTest('‚™ë', ['less than above greater than above double line equal', 'less than above greater than above double line equal', 'less than above greater than above double line equal']);
  this.executeCharTest('‚™í', ['greater than above less than above double line equal', 'greater than above less than above double line equal', 'greater than above less than above double line equal']);
  this.executeCharTest('‚™ì', ['less than above slanted equal above greater than above slanted equal', 'less than above slanted equal above greater than above slanted equal', 'less than above slanted equal above greater than above slanted equal']);
  this.executeCharTest('‚™î', ['greater than above slanted equal above less than above slanted equal', 'greater than above slanted equal above less than above slanted equal', 'greater than above slanted equal above less than above slanted equal']);
  this.executeCharTest('‚™ï', ['slanted equals or less than', 'slanted equals or less than', 'slanted equals or less than']);
  this.executeCharTest('‚™ñ', ['slanted equals or greater than', 'slanted equals or greater than', 'slanted equals or greater than']);
  this.executeCharTest('‚™ó', ['slanted equals or less than with dot inside', 'slanted equals or less than with dot inside', 'slanted equals or less than with dot inside']);
  this.executeCharTest('‚™ò', ['slanted equals or greater than with dot inside', 'slanted equals or greater than with dot inside', 'slanted equals or greater than with dot inside']);
  this.executeCharTest('‚™ô', ['double line equals or less than', 'double line equals or less than', 'double line equals or less than']);
  this.executeCharTest('‚™ö', ['double line equals or greater than', 'double line equals or greater than', 'double line equals or greater than']);
  this.executeCharTest('‚™õ', ['double line slanted equals or less than', 'double line slanted equals or less than', 'double line slanted equals or less than']);
  this.executeCharTest('‚™ú', ['double line slanted equals or greater than', 'double line slanted equals or greater than', 'double line slanted equals or greater than']);
  this.executeCharTest('‚™ù', ['similar or less than', 'similar or less than', 'similar or less than']);
  this.executeCharTest('‚™û', ['similar or greater than', 'similar or greater than', 'similar or greater than']);
  this.executeCharTest('‚™ü', ['similar above less than above equals sign', 'similar above less than above equals sign', 'similar above less than above equals sign']);
  this.executeCharTest('‚™†', ['similar above greater than above equals sign', 'similar above greater than above equals sign', 'similar above greater than above equals sign']);
  this.executeCharTest('‚™°', ['double nested less than', 'double nested less than', 'double nested less than']);
  this.executeCharTest('‚™¢', ['double nested greater than', 'double nested greater than', 'double nested greater than']);
  this.executeCharTest('‚™£', ['double nested less than with underbar', 'double nested less than with underbar', 'double nested less than with underbar']);
  this.executeCharTest('‚™§', ['greater than overlapping less than', 'greater than overlapping less than', 'greater than overlapping less than']);
  this.executeCharTest('‚™•', ['greater than beside less than', 'greater than beside less than', 'greater than beside less than']);
  this.executeCharTest('‚™¶', ['less than closed by curve', 'less than closed by curve', 'less than closed by curve']);
  this.executeCharTest('‚™ß', ['greater than closed by curve', 'greater than closed by curve', 'greater than closed by curve']);
  this.executeCharTest('‚™®', ['less than closed by curve above slanted equal', 'less than closed by curve above slanted equal', 'less than closed by curve above slanted equal']);
  this.executeCharTest('‚™©', ['greater than closed by curve above slanted equal', 'greater than closed by curve above slanted equal', 'greater than closed by curve above slanted equal']);
  this.executeCharTest('‚™™', ['smaller than', 'smaller than', 'smaller than']);
  this.executeCharTest('‚™´', ['larger than', 'larger than', 'larger than']);
  this.executeCharTest('‚™¨', ['smaller than or equals', 'smaller than or equals', 'smaller than or equals']);
  this.executeCharTest('‚™≠', ['larger than or equals', 'larger than or equals', 'larger than or equals']);
  this.executeCharTest('‚™Æ', ['equals sign with bumpy above', 'equals sign with bumpy above', 'equals sign with bumpy above']);
  this.executeCharTest('‚™Ø', ['precedes above single line equals sign', 'precedes above single line equals sign', 'precedes above single line equals sign']);
  this.executeCharTest('‚™∞', ['succeeds above single line equals sign', 'succeeds above single line equals sign', 'succeeds above single line equals sign']);
  this.executeCharTest('‚™±', ['precedes above single line not equals', 'precedes above single line not equals', 'precedes above single line not equals']);
  this.executeCharTest('‚™≤', ['succeeds above single line not equals', 'succeeds above single line not equals', 'succeeds above single line not equals']);
  this.executeCharTest('‚™≥', ['precedes above equals sign', 'precedes above equals sign', 'precedes above equals sign']);
  this.executeCharTest('‚™¥', ['succeeds above equals sign', 'succeeds above equals sign', 'succeeds above equals sign']);
  this.executeCharTest('‚™µ', ['precedes above not equals', 'precedes above not equals', 'precedes above not equals']);
  this.executeCharTest('‚™∂', ['succeeds above not equals', 'succeeds above not equals', 'succeeds above not equals']);
  this.executeCharTest('‚™∑', ['precedes above almost equals', 'precedes above almost equals', 'precedes above almost equals']);
  this.executeCharTest('‚™∏', ['succeeds above almost equals', 'succeeds above almost equals', 'succeeds above almost equals']);
  this.executeCharTest('‚™π', ['precedes above not almost equals', 'precedes above not almost equals', 'precedes above not almost equals']);
  this.executeCharTest('‚™∫', ['succeeds above not almost equals', 'succeeds above not almost equals', 'succeeds above not almost equals']);
  this.executeCharTest('‚™ª', ['double precedes', 'double precedes', 'double precedes']);
  this.executeCharTest('‚™º', ['double succeeds', 'double succeeds', 'double succeeds']);
  this.executeCharTest('‚™Ω', ['subset with dot', 'subset with dot', 'subset with dot']);
  this.executeCharTest('‚™æ', ['superset with dot', 'superset with dot', 'superset with dot']);
  this.executeCharTest('‚™ø', ['subset with plus sign below', 'subset with plus sign below', 'subset with plus sign below']);
  this.executeCharTest('‚´Ä', ['superset with plus sign below', 'superset with plus sign below', 'superset with plus sign below']);
  this.executeCharTest('‚´Å', ['subset with multiplication sign below', 'subset with multiplication sign below', 'subset with multiplication sign below']);
  this.executeCharTest('‚´Ç', ['superset with multiplication sign below', 'superset with multiplication sign below', 'superset with multiplication sign below']);
  this.executeCharTest('‚´É', ['subset of or equals with dot above', 'subset of or equals with dot above', 'subset of or equals with dot above']);
  this.executeCharTest('‚´Ñ', ['superset of or equals with dot above', 'superset of or equals with dot above', 'superset of or equals with dot above']);
  this.executeCharTest('‚´Ö', ['subset of above equals sign', 'subset of above equals sign', 'subset of above equals sign']);
  this.executeCharTest('‚´Ü', ['superset of above equals sign', 'superset of above equals sign', 'superset of above equals sign']);
  this.executeCharTest('‚´á', ['subset of above tilde operator', 'subset of above tilde operator', 'subset of above tilde operator']);
  this.executeCharTest('‚´à', ['superset of above tilde operator', 'superset of above tilde operator', 'superset of above tilde operator']);
  this.executeCharTest('‚´â', ['subset of above almost equals', 'subset of above almost equals', 'subset of above almost equals']);
  this.executeCharTest('‚´ä', ['superset of above almost equals', 'superset of above almost equals', 'superset of above almost equals']);
  this.executeCharTest('‚´ã', ['subset of above not equals', 'subset of above not equals', 'subset of above not equals']);
  this.executeCharTest('‚´å', ['superset of above not equals', 'superset of above not equals', 'superset of above not equals']);
  this.executeCharTest('‚´ç', ['square left open box operator', 'square left open box operator', 'square left open box operator']);
  this.executeCharTest('‚´é', ['square right open box operator', 'square right open box operator', 'square right open box operator']);
  this.executeCharTest('‚´è', ['closed subset', 'closed subset', 'closed subset']);
  this.executeCharTest('‚´ê', ['closed superset', 'closed superset', 'closed superset']);
  this.executeCharTest('‚´ë', ['closed subset or equals', 'closed subset or equals', 'closed subset or equals']);
  this.executeCharTest('‚´í', ['closed superset or equals', 'closed superset or equals', 'closed superset or equals']);
  this.executeCharTest('‚´ì', ['subset above superset', 'subset above superset', 'subset above superset']);
  this.executeCharTest('‚´î', ['superset above subset', 'superset above subset', 'superset above subset']);
  this.executeCharTest('‚´ï', ['subset above subset', 'subset above subset', 'subset above subset']);
  this.executeCharTest('‚´ñ', ['superset above superset', 'superset above superset', 'superset above superset']);
  this.executeCharTest('‚´ó', ['superset beside subset', 'superset beside subset', 'superset beside subset']);
  this.executeCharTest('‚´ò', ['superset beside and joined by dash with subset', 'superset beside and joined by dash with subset', 'superset beside and joined by dash with subset']);
  this.executeCharTest('‚´ô', ['element of opening downwards', 'element of opening downwards', 'element of opening downwards']);
  this.executeCharTest('‚´ö', ['pitchfork with tee top', 'pitchfork with tee top', 'pitchfork with tee top']);
  this.executeCharTest('‚´õ', ['transversal intersection', 'transversal intersection', 'transversal intersection']);
  this.executeCharTest('‚´ú', ['forking', 'forking', 'forking']);
  this.executeCharTest('‚´ù', ['nonforking', 'nonforking', 'nonforking']);
  this.executeCharTest('‚´û', ['short left tack', 'short left tack', 'short left tack']);
  this.executeCharTest('‚´ü', ['short down tack', 'short down tack', 'short down tack']);
  this.executeCharTest('‚´†', ['short up tack', 'short up tack', 'short up tack']);
  this.executeCharTest('‚´°', ['perpendicular with s', 'perpendicular with s', 'perpendicular with s']);
  this.executeCharTest('‚´¢', ['vertical bar triple right turnstile', 'vertical bar triple right turnstile', 'vertical bar triple right turnstile']);
  this.executeCharTest('‚´£', ['double vertical bar left turnstile', 'double vertical bar left turnstile', 'double vertical bar left turnstile']);
  this.executeCharTest('‚´§', ['vertical bar double left turnstile', 'vertical bar double left turnstile', 'vertical bar double left turnstile']);
  this.executeCharTest('‚´•', ['double vertical bar double left turnstile', 'double vertical bar double left turnstile', 'double vertical bar double left turnstile']);
  this.executeCharTest('‚´¶', ['long dash from left member of double vertical', 'long dash from left member of double vertical', 'long dash from left member of double vertical']);
  this.executeCharTest('‚´ß', ['short down tack with overbar', 'short down tack with overbar', 'short down tack with overbar']);
  this.executeCharTest('‚´®', ['short up tack with underbar', 'short up tack with underbar', 'short up tack with underbar']);
  this.executeCharTest('‚´©', ['short up tack above short down tack', 'short up tack above short down tack', 'short up tack above short down tack']);
  this.executeCharTest('‚´™', ['double down tack', 'double down tack', 'double down tack']);
  this.executeCharTest('‚´´', ['double up tack', 'double up tack', 'double up tack']);
  this.executeCharTest('‚´¨', ['double stroke not sign', 'double stroke not sign', 'double stroke not sign']);
  this.executeCharTest('‚´≠', ['reversed double stroke not sign', 'reversed double stroke not sign', 'reversed double stroke not sign']);
  this.executeCharTest('‚´Æ', ['does not divide with reversed negation slash', 'does not divide with reversed negation slash', 'does not divide with reversed negation slash']);
  this.executeCharTest('‚´Ø', ['vertical line with circle above', 'vertical line with circle above', 'vertical line with circle above']);
  this.executeCharTest('‚´∞', ['vertical line with circle below', 'vertical line with circle below', 'vertical line with circle below']);
  this.executeCharTest('‚´±', ['down tack with circle below', 'down tack with circle below', 'down tack with circle below']);
  this.executeCharTest('‚´≤', ['parallel with horizontal stroke', 'parallel with horizontal stroke', 'parallel with horizontal stroke']);
  this.executeCharTest('‚´≥', ['parallel with tilde operator', 'parallel with tilde operator', 'parallel with tilde operator']);
  this.executeCharTest('‚´¥', ['triple vertical bar binary relation', 'triple vertical bar binary relation', 'triple vertical bar binary relation']);
  this.executeCharTest('‚´µ', ['triple vertical bar with horizontal stroke', 'triple vertical bar with horizontal stroke', 'triple vertical bar with horizontal stroke']);
  this.executeCharTest('‚´∂', ['triple colon operator', 'triple colon operator', 'triple colon operator']);
  this.executeCharTest('‚´∑', ['triple nested less than', 'triple nested less than', 'triple nested less than']);
  this.executeCharTest('‚´∏', ['triple nested greater than', 'triple nested greater than', 'triple nested greater than']);
  this.executeCharTest('‚´π', ['double line slanted less than or equals', 'double line slanted less than or equals', 'double line slanted less than or equals']);
  this.executeCharTest('‚´∫', ['double line slanted greater than or equals', 'double line slanted greater than or equals', 'double line slanted greater than or equals']);
  this.executeCharTest('‚´ª', ['triple solidus binary relation', 'triple solidus binary relation', 'triple solidus binary relation']);
  this.executeCharTest('‚´º', ['large triple vertical bar operator', 'large triple vertical bar operator', 'large triple vertical bar operator']);
  this.executeCharTest('‚´Ω', ['double solidus operator', 'double solidus operator', 'double solidus operator']);
  this.executeCharTest('‚´æ', ['white vertical bar', 'white vertical bar', 'white vertical bar']);
  this.executeCharTest('‚´ø', ['n ary white vertical bar', 'n ary white vertical bar', 'n ary white vertical bar']);
  this.executeCharTest('„Äú', ['wave dash', 'wave dash', 'wave dash']);
  this.executeCharTest('Ô∏ê', ['presentation form for vertical comma', 'presentation form for vertical comma', 'presentation form for vertical comma']);
  this.executeCharTest('Ô∏ì', ['presentation form for vertical colon', 'presentation form for vertical colon', 'presentation form for vertical colon']);
  this.executeCharTest('Ô∏î', ['presentation form for vertical semicolon', 'presentation form for vertical semicolon', 'presentation form for vertical semicolon']);
  this.executeCharTest('Ô∏ï', ['presentation form for vertical exclamation mark', 'presentation form for vertical exclamation mark', 'presentation form for vertical exclamation mark']);
  this.executeCharTest('Ô∏ñ', ['presentation form for vertical question mark', 'presentation form for vertical question mark', 'presentation form for vertical question mark']);
  this.executeCharTest('Ô∏ô', ['presentation form for vertical horizontal ellipsis', 'presentation form for vertical horizontal ellipsis', 'presentation form for vertical horizontal ellipsis']);
  this.executeCharTest('Ô∏∞', ['presentation form for vertical two dot leader', 'presentation form for vertical two dot leader', 'glyph for vertical two dot leader']);
  this.executeCharTest('Ô∏±', ['presentation form for vertical em dash', 'presentation form for vertical em dash', 'glyph for vertical em dash']);
  this.executeCharTest('Ô∏≤', ['presentation form for vertical en dash', 'presentation form for vertical en dash', 'glyph for vertical en dash']);
  this.executeCharTest('Ô∏≥', ['presentation form for vertical low line', 'presentation form for vertical low line', 'glyph for vertical spacing underscore']);
  this.executeCharTest('Ô∏¥', ['presentation form for vertical wavy low line', 'presentation form for vertical wavy low line', 'glyph for vertical spacing wavy underscore']);
  this.executeCharTest('ÔπÖ', ['sesame dot', 'sesame dot', 'sesame dot']);
  this.executeCharTest('ÔπÜ', ['white sesame dot', 'white sesame dot', 'white sesame dot']);
  this.executeCharTest('Ôπâ', ['dashed overline', 'dashed overline', 'spacing dashed overscore']);
  this.executeCharTest('Ôπä', ['centerline overline', 'centerline overline', 'spacing centerline overscore']);
  this.executeCharTest('Ôπã', ['wavy overline', 'wavy overline', 'spacing wavy overscore']);
  this.executeCharTest('Ôπå', ['double wavy overline', 'double wavy overline', 'spacing double wavy overscore']);
  this.executeCharTest('Ôπç', ['dashed low line', 'dashed low line', 'spacing dashed underscore']);
  this.executeCharTest('Ôπé', ['centerline low line', 'centerline low line', 'spacing centerline underscore']);
  this.executeCharTest('Ôπè', ['wavy low line', 'wavy low line', 'spacing wavy underscore']);
  this.executeCharTest('Ôπê', ['small comma', 'small comma', 'small comma']);
  this.executeCharTest('Ôπí', ['small full stop', 'small full stop', 'small period']);
  this.executeCharTest('Ôπî', ['small semicolon', 'small semicolon', 'small semicolon']);
  this.executeCharTest('Ôπï', ['small colon', 'small colon', 'small colon']);
  this.executeCharTest('Ôπñ', ['small question mark', 'small question mark', 'small question mark']);
  this.executeCharTest('Ôπó', ['small exclamation mark', 'small exclamation mark', 'small exclamation mark']);
  this.executeCharTest('Ôπò', ['small em dash', 'small em dash', 'small em dash']);
  this.executeCharTest('Ôπü', ['small number sign', 'small number sign', 'small number sign']);
  this.executeCharTest('Ôπ†', ['small ampersand', 'small ampersand', 'small ampersand']);
  this.executeCharTest('Ôπ°', ['small asterisk', 'small asterisk', 'small asterisk']);
  this.executeCharTest('Ôπ¢', ['small plus sign', 'small plus sign', 'small plus sign']);
  this.executeCharTest('Ôπ£', ['small hyphen minus', 'small hyphen minus', 'small hyphen minus']);
  this.executeCharTest('Ôπ§', ['small less than sign', 'small less than sign', 'small less than sign']);
  this.executeCharTest('Ôπ•', ['small greater than sign', 'small greater than sign', 'small greater than sign']);
  this.executeCharTest('Ôπ¶', ['small equals sign', 'small equals sign', 'small equals sign']);
  this.executeCharTest('Ôπ®', ['small reverse solidus', 'small reverse solidus', 'small backslash']);
  this.executeCharTest('Ôπ©', ['small dollar sign', 'small dollar sign', 'small dollar sign']);
  this.executeCharTest('Ôπ™', ['small percent sign', 'small percent sign', 'small percent sign']);
  this.executeCharTest('Ôπ´', ['small commercial at', 'small commercial at', 'small commercial at']);
  this.executeCharTest('ÔºÅ', ['fullwidth exclamation mark', 'fullwidth exclamation mark', 'fullwidth exclamation mark']);
  this.executeCharTest('ÔºÇ', ['fullwidth quotation mark', 'fullwidth quotation mark', 'fullwidth quotation mark']);
  this.executeCharTest('ÔºÉ', ['fullwidth number sign', 'fullwidth number sign', 'fullwidth number sign']);
  this.executeCharTest('ÔºÑ', ['fullwidth dollar sign', 'fullwidth dollar sign', 'fullwidth dollar sign']);
  this.executeCharTest('ÔºÖ', ['fullwidth percent sign', 'fullwidth percent sign', 'fullwidth percent sign']);
  this.executeCharTest('ÔºÜ', ['fullwidth ampersand', 'fullwidth ampersand', 'fullwidth ampersand']);
  this.executeCharTest('Ôºá', ['fullwidth apostrophe', 'fullwidth apostrophe', 'fullwidth apostrophe']);
  this.executeCharTest('Ôºä', ['fullwidth asterisk', 'fullwidth asterisk', 'fullwidth asterisk']);
  this.executeCharTest('Ôºã', ['fullwidth plus sign', 'fullwidth plus sign', 'fullwidth plus sign']);
  this.executeCharTest('Ôºå', ['fullwidth comma', 'fullwidth comma', 'fullwidth comma']);
  this.executeCharTest('Ôºç', ['fullwidth hyphen minus', 'fullwidth hyphen minus', 'fullwidth hyphen minus']);
  this.executeCharTest('Ôºé', ['fullwidth full stop', 'fullwidth full stop', 'fullwidth period']);
  this.executeCharTest('Ôºè', ['fullwidth solidus', 'fullwidth solidus', 'fullwidth slash']);
  this.executeCharTest('Ôºö', ['fullwidth colon', 'fullwidth colon', 'fullwidth colon']);
  this.executeCharTest('Ôºõ', ['fullwidth semicolon', 'fullwidth semicolon', 'fullwidth semicolon']);
  this.executeCharTest('Ôºú', ['fullwidth less than sign', 'fullwidth less than sign', 'fullwidth less than sign']);
  this.executeCharTest('Ôºù', ['fullwidth equals sign', 'fullwidth equals sign', 'fullwidth equals sign']);
  this.executeCharTest('Ôºû', ['fullwidth greater than sign', 'fullwidth greater than sign', 'fullwidth greater than sign']);
  this.executeCharTest('Ôºü', ['fullwidth question mark', 'fullwidth question mark', 'fullwidth question mark']);
  this.executeCharTest('Ôº†', ['fullwidth commercial at', 'fullwidth commercial at', 'fullwidth commercial at']);
  this.executeCharTest('Ôºº', ['fullwidth reverse solidus', 'fullwidth reverse solidus', 'fullwidth backslash']);
  this.executeCharTest('Ôºæ', ['fullwidth circumflex accent', 'fullwidth circumflex accent', 'fullwidth spacing circumflex']);
  this.executeCharTest('Ôºø', ['fullwidth low line', 'fullwidth low line', 'fullwidth spacing underscore']);
  this.executeCharTest('ÔΩÄ', ['fullwidth grave accent', 'fullwidth grave accent', 'fullwidth spacing grave']);
  this.executeCharTest('ÔΩú', ['fullwidth vertical line', 'fullwidth vertical line', 'fullwidth vertical bar']);
  this.executeCharTest('ÔΩû', ['fullwidth tilde', 'fullwidth tilde', 'fullwidth spacing tilde']);
  this.executeCharTest('Ôø†', ['fullwidth cent sign', 'fullwidth cent sign', 'fullwidth cent sign']);
  this.executeCharTest('Ôø°', ['fullwidth pound sign', 'fullwidth pound sign', 'fullwidth pound sign']);
  this.executeCharTest('Ôø¢', ['fullwidth not sign', 'fullwidth not sign', 'fullwidth not sign']);
  this.executeCharTest('Ôø£', ['fullwidth macron', 'fullwidth macron', 'fullwidth spacing macron']);
  this.executeCharTest('Ôø§', ['fullwidth broken bar', 'fullwidth broken bar', 'fullwidth broken vertical bar']);
  this.executeCharTest('Ôø•', ['fullwidth yen sign', 'fullwidth yen sign', 'fullwidth yen sign']);
  this.executeCharTest('Ôø¶', ['fullwidth won sign', 'fullwidth won sign', 'fullwidth won sign']);
  this.executeCharTest('Ôø®', ['halfwidth forms light vertical', 'halfwidth forms light vertical', 'halfwidth forms light vertical']);
  this.executeCharTest('Ôø≠', ['halfwidth black square', 'halfwidth black square', 'halfwidth black square']);
  this.executeCharTest('ÔøÆ', ['halfwidth white circle', 'halfwidth white circle', 'halfwidth white circle']);
  this.executeCharTest(' ', ['space', 'space', 'space']);
  this.executeCharTest('¬†', ['no break space', 'no break space', 'non breaking space']);
  this.executeCharTest('¬≠', ['soft hyphen', 'soft hyphen', 'soft hyphen']);
  this.executeCharTest('‚ÄÄ', ['en quad', 'en quad', 'en quad']);
  this.executeCharTest('‚ÄÅ', ['em quad', 'em quad', 'em quad']);
  this.executeCharTest('‚ÄÇ', ['en space', 'en space', 'en space']);
  this.executeCharTest('‚ÄÉ', ['em space', 'em space', 'em space']);
  this.executeCharTest('‚ÄÑ', ['three per em space', 'three per em space', 'three per em space']);
  this.executeCharTest('‚ÄÖ', ['four per em space', 'four per em space', 'four per em space']);
  this.executeCharTest('‚ÄÜ', ['six per em space', 'six per em space', 'six per em space']);
  this.executeCharTest('‚Äá', ['figure space', 'figure space', 'figure space']);
  this.executeCharTest('‚Äà', ['punctuation space', 'punctuation space', 'punctuation space']);
  this.executeCharTest('‚Äâ', ['thin space', 'thin space', 'thin space']);
  this.executeCharTest('‚Ää', ['hair space', 'hair space', 'hair space']);
  this.executeCharTest('‚Äã', ['zero width space', 'zero width space', 'zero width space']);
  this.executeCharTest('‚Äå', ['zero width non joiner', 'zero width non joiner', 'zero width non joiner']);
  this.executeCharTest('‚Äç', ['zero width joiner', 'zero width joiner', 'zero width joiner']);
  this.executeCharTest('‚Äé', ['left to right mark', 'left to right mark', 'left to right mark']);
  this.executeCharTest('‚Äè', ['right to left mark', 'right to left mark', 'right to left mark']);
  this.executeCharTest('‚Ä®', ['line separator', 'line separator', 'line separator']);
  this.executeCharTest('‚Ä©', ['paragraph separator', 'paragraph separator', 'paragraph separator']);
  this.executeCharTest('‚Ä™', ['left to right embedding', 'left to right embedding', 'left to right embedding']);
  this.executeCharTest('‚Ä´', ['right to left embedding', 'right to left embedding', 'right to left embedding']);
  this.executeCharTest('‚Ä¨', ['pop directional formatting', 'pop directional formatting', 'pop directional formatting']);
  this.executeCharTest('‚Ä≠', ['left to right override', 'left to right override', 'left to right override']);
  this.executeCharTest('‚ÄÆ', ['right to left override', 'right to left override', 'right to left override']);
  this.executeCharTest('‚ÄØ', ['narrow no break space', 'narrow no break space', 'narrow no break space']);
  this.executeCharTest('‚Åü', ['medium mathematical space', 'medium mathematical space', 'medium mathematical space']);
  this.executeCharTest('‚Å†', ['word joiner', 'word joiner', 'word joiner']);
  this.executeCharTest('‚Å°', ['function application', 'of', 'of']);
  this.executeCharTest('‚Å¢', ['invisible times', 'times', 'times']);
  this.executeCharTest('‚Å£', ['invisible separator', 'separator', 'separator']);
  this.executeCharTest('‚Å§', ['invisible plus', 'plus', 'plus']);
  this.executeCharTest('‚Å™', ['inhibit symmetric swapping', 'inhibit symmetric swapping', 'inhibit symmetric swapping']);
  this.executeCharTest('‚Å´', ['activate symmetric swapping', 'activate symmetric swapping', 'activate symmetric swapping']);
  this.executeCharTest('‚ÅÆ', ['national digit shapes', 'national digit shapes', 'national digit shapes']);
  this.executeCharTest('‚ÅØ', ['nominal digit shapes', 'nominal digit shapes', 'nominal digit shapes']);
  this.executeCharTest('Ôªø', ['zero width no break space', 'zero width no break space', 'byte order mark']);
  this.executeCharTest('Ôøπ', ['interlinear annotation anchor', 'interlinear annotation anchor', 'interlinear annotation anchor']);
  this.executeCharTest('Ôø∫', ['interlinear annotation separator', 'interlinear annotation separator', 'interlinear annotation separator']);
  this.executeCharTest('Ôøª', ['interlinear annotation terminator', 'interlinear annotation terminator', 'interlinear annotation terminator']);
  this.executeCharTest('‚è®', ['decimal exponent symbol', 'decimal exponent symbol', 'decimal exponent symbol']);
  this.executeCharTest('‚òÖ', ['black star', 'black star', 'black star']);
  this.executeCharTest('‚òÜ', ['white star', 'white star', 'white star']);
  this.executeCharTest('‚ö™', ['medium white circle', 'white circle', 'white circle']);
  this.executeCharTest('‚ö´', ['medium black circle', 'black circle', 'black circle']);
  this.executeCharTest('‚úÖ', ['white heavy check mark', 'white check', 'white check']);
  this.executeCharTest('‚úì', ['check mark', 'check', 'check']);
  this.executeCharTest('‚úî', ['heavy check mark', 'heavy check', 'heavy check']);
  this.executeCharTest('‚úï', ['multiplication x', 'multiplication x', 'multiplication x']);
  this.executeCharTest('‚úñ', ['heavy multiplication x', 'heavy multiplication x', 'heavy multiplication x']);
  this.executeCharTest('‚úó', ['ballot x', 'ballot x', 'ballot x']);
  this.executeCharTest('‚úò', ['heavy ballot x', 'heavy ballot x', 'heavy ballot x']);
  this.executeCharTest('‚úõ', ['open center cross', 'open center cross', 'open center cross']);
  this.executeCharTest('‚úú', ['heavy open center cross', 'heavy open center cross', 'heavy open center cross']);
  this.executeCharTest('‚ú†', ['maltese cross', 'maltese cross', 'maltese cross']);
  this.executeCharTest('‚ú°', ['star of david', 'star of david', 'star of david']);
  this.executeCharTest('‚ú¢', ['four teardrop spoked asterisk', 'four teardrop spoked asterisk', 'four teardrop spoked asterisk']);
  this.executeCharTest('‚ú£', ['four balloon spoked asterisk', 'four balloon spoked asterisk', 'four balloon spoked asterisk']);
  this.executeCharTest('‚ú§', ['heavy four balloon spoked asterisk', 'heavy four balloon spoked asterisk', 'heavy four balloon spoked asterisk']);
  this.executeCharTest('‚ú•', ['four club spoked asterisk', 'four club spoked asterisk', 'four club spoked asterisk']);
  this.executeCharTest('‚ú¶', ['black four pointed star', 'black four pointed star', 'black four pointed star']);
  this.executeCharTest('‚úß', ['white four pointed star', 'white four pointed star', 'white four pointed star']);
  this.executeCharTest('‚ú®', ['sparkles', 'sparkles', 'sparkles']);
  this.executeCharTest('‚ú©', ['stress outlined white star', 'stress outlined white star', 'stress outlined white star']);
  this.executeCharTest('‚ú™', ['circled white star', 'circled white star', 'circled white star']);
  this.executeCharTest('‚ú´', ['open center black star', 'open center black star', 'open center black star']);
  this.executeCharTest('‚ú¨', ['black center white star', 'black center white star', 'black center white star']);
  this.executeCharTest('‚ú≠', ['outlined black star', 'outlined black star', 'outlined black star']);
  this.executeCharTest('‚úÆ', ['heavy outlined black star', 'heavy outlined black star', 'heavy outlined black star']);
  this.executeCharTest('‚úØ', ['pinwheel star', 'pinwheel star', 'pinwheel star']);
  this.executeCharTest('‚ú∞', ['shadowed white star', 'shadowed white star', 'shadowed white star']);
  this.executeCharTest('‚ú±', ['heavy asterisk', 'heavy asterisk', 'heavy asterisk']);
  this.executeCharTest('‚ú≤', ['open center asterisk', 'open center asterisk', 'open center asterisk']);
  this.executeCharTest('‚ú≥', ['eight spoked asterisk', 'eight spoked asterisk', 'eight spoked asterisk']);
  this.executeCharTest('‚ú¥', ['eight pointed black star', 'eight pointed black star', 'eight pointed black star']);
  this.executeCharTest('‚úµ', ['eight pointed pinwheel star', 'eight pointed pinwheel star', 'eight pointed pinwheel star']);
  this.executeCharTest('‚ú∂', ['six pointed black star', 'six pointed black star', 'six pointed black star']);
  this.executeCharTest('‚úπ', ['twelve pointed black star', 'twelve pointed black star', 'twelve pointed black star']);
  this.executeCharTest('‚ú∫', ['sixteen pointed asterisk', 'sixteen pointed asterisk', 'sixteen pointed asterisk']);
  this.executeCharTest('‚úª', ['teardrop spoked asterisk', 'teardrop spoked asterisk', 'teardrop spoked asterisk']);
  this.executeCharTest('‚úº', ['open center teardrop spoked asterisk', 'open center teardrop spoked asterisk', 'open center teardrop spoked asterisk']);
  this.executeCharTest('‚úΩ', ['heavy teardrop spoked asterisk', 'heavy teardrop spoked asterisk', 'heavy teardrop spoked asterisk']);
  this.executeCharTest('‚úæ', ['six petalled black and white florette', 'six petalled black and white florette', 'six petalled black and white florette']);
  this.executeCharTest('‚úø', ['black florette', 'black florette', 'black florette']);
  this.executeCharTest('‚ùÄ', ['white florette', 'white florette', 'white florette']);
  this.executeCharTest('‚ùÅ', ['eight petalled outlined black florette', 'eight petalled outlined black florette', 'eight petalled outlined black florette']);
  this.executeCharTest('‚ùÇ', ['circled open center eight pointed star', 'circled open center eight pointed star', 'circled open center eight pointed star']);
  this.executeCharTest('‚ùÉ', ['heavy teardrop spoked pinwheel asterisk', 'heavy teardrop spoked pinwheel asterisk', 'heavy teardrop spoked pinwheel asterisk']);
  this.executeCharTest('‚ùÑ', ['snowflake', 'snowflake', 'snowflake']);
  this.executeCharTest('‚ùÖ', ['tight trifoliate snowflake', 'tight trifoliate snowflake', 'tight trifoliate snowflake']);
  this.executeCharTest('‚ùÜ', ['heavy chevron snowflake', 'heavy chevron snowflake', 'heavy chevron snowflake']);
  this.executeCharTest('‚ùá', ['sparkle', 'sparkle', 'sparkle']);
  this.executeCharTest('‚ùà', ['heavy sparkle', 'heavy sparkle', 'heavy sparkle']);
  this.executeCharTest('‚ùâ', ['balloon spoked asterisk', 'balloon spoked asterisk', 'balloon spoked asterisk']);
  this.executeCharTest('‚ùä', ['eight teardrop spoked propeller asterisk', 'eight teardrop spoked propeller asterisk', 'eight teardrop spoked propeller asterisk']);
  this.executeCharTest('‚ùã', ['heavy eight teardrop spoked propeller asterisk', 'heavy eight teardrop spoked propeller asterisk', 'heavy eight teardrop spoked propeller asterisk']);
  this.executeCharTest('‚ùå', ['cross mark', 'cross mark', 'cross mark']);
  this.executeCharTest('‚ùç', ['shadowed white circle', 'shadowed white circle', 'shadowed white circle']);
};


sre.DefaultCharEnglishTest.prototype.testFunctions = function() {
  this.executeCharTest('deg', ['degree', 'degree', 'degree']);
  this.executeCharTest('det', ['determinant', 'det', 'det']);
  this.executeCharTest('dim', ['dimension', 'dimension', 'dimension']);
  this.executeCharTest('hom', ['homomorphism', 'hom', 'hom']);
  this.executeCharTest('Hom', ['homomorphism', 'hom', 'hom']);
  this.executeCharTest('ker', ['kernel', 'kernel', 'kernel']);
  this.executeCharTest('Tr', ['trace', 'trace', 'trace']);
  this.executeCharTest('tr', ['trace', 'trace', 'trace']);
  this.executeCharTest('log', ['logarithm', 'log', 'logarithm function']);
  this.executeCharTest('ln', ['natural logarithm', 'natural log', 'natural logarithm function']);
  this.executeCharTest('lg', ['logarithm base 10', 'log base 10', 'log base 10']);
  this.executeCharTest('exp', ['exponential', 'exp', 'exponential function']);
  this.executeCharTest('expt', ['exponential', 'exp', 'exponential function']);
  this.executeCharTest('gcd', ['greatest common divisor', 'gcd', 'gcd']);
  this.executeCharTest('lcm', ['least common multiple', 'lcm', 'lcm']);
  this.executeCharTest('arg', ['argument', 'arg', 'arg']);
  this.executeCharTest('im', ['imaginary part', 'imaginary', 'imaginary']);
  this.executeCharTest('re', ['real part', 'real', 'real']);
  this.executeCharTest('inf', ['infimum', 'inf', 'inf']);
  this.executeCharTest('lim', ['limit', 'lim', 'lim']);
  this.executeCharTest('lim inf', ['infimum default', 'liminf', 'inferior limit']);
  this.executeCharTest('liminf', ['infimum default', 'liminf', 'inferior limit']);
  this.executeCharTest('lim sup', ['supremum limit', 'limsup', 'superior limit']);
  this.executeCharTest('limsup', ['supremum limit', 'limsup', 'superior limit']);
  this.executeCharTest('max', ['maximum', 'max', 'max']);
  this.executeCharTest('min', ['minimum', 'min', 'min']);
  this.executeCharTest('sup', ['supremum', 'sup', 'sup']);
  this.executeCharTest('injlim', ['injective limit', 'colimit', 'direct limit']);
  this.executeCharTest('inj lim', ['injective limit', 'colimit', 'direct limit']);
  this.executeCharTest('projlim', ['projective limit', 'limit', 'inverse limit']);
  this.executeCharTest('proj lim', ['projective limit', 'limit', 'inverse limit']);
  this.executeCharTest('mod', ['modulo', 'mod', 'mod']);
  this.executeCharTest('Pr', ['probability', 'probability', 'probability']);
  this.executeCharTest('cosh', ['hyperbolic cosine function', 'hyperbolic cosine', 'hyperbolic cosine']);
  this.executeCharTest('coth', ['hyperbolic cotangent function', 'hyperbolic cotangent', 'hyperbolic cotangent']);
  this.executeCharTest('csch', ['hyperbolic cosecant function', 'hyperbolic cosecant', 'hyperbolic cosecant']);
  this.executeCharTest('sech', ['hyperbolic secant function', 'hyperbolic secant', 'hyperbolic secant']);
  this.executeCharTest('sinh', ['hyperbolic sine function', 'hyperbolic sine', 'hyperbolic sine']);
  this.executeCharTest('tanh', ['hyperbolic tangent function', 'hyperbolic tangent', 'hyperbolic tangent']);
  this.executeCharTest('arcosh', ['inverse hyperbolic cosine function', 'area hyperbolic cosine', 'area hyperbolic cosine function']);
  this.executeCharTest('arccosh', ['inverse hyperbolic cosine function', 'area hyperbolic cosine', 'area hyperbolic cosine function']);
  this.executeCharTest('arcoth', ['inverse hyperbolic cotangent function', 'area hyperbolic cotangent', 'area hyperbolic cotangent function']);
  this.executeCharTest('arccoth', ['inverse hyperbolic cotangent function', 'area hyperbolic cotangent', 'area hyperbolic cotangent function']);
  this.executeCharTest('arcsch', ['inverse hyperbolic cosecant function', 'area hyperbolic cosecant', 'area hyperbolic cosecant function']);
  this.executeCharTest('arccsch', ['inverse hyperbolic cosecant function', 'area hyperbolic cosecant', 'area hyperbolic cosecant function']);
  this.executeCharTest('arsech', ['inverse hyperbolic secant function', 'area hyperbolic secant', 'area hyperbolic secant function']);
  this.executeCharTest('arcsech', ['inverse hyperbolic secant function', 'area hyperbolic secant', 'area hyperbolic secant function']);
  this.executeCharTest('arsinh', ['inverse hyperbolic sine function', 'area hyperbolic sine', 'area hyperbolic sine function']);
  this.executeCharTest('arcsinh', ['inverse hyperbolic sine function', 'area hyperbolic sine', 'area hyperbolic sine function']);
  this.executeCharTest('artanh', ['inverse hyperbolic tangent function', 'area hyperbolic tangent', 'area hyperbolic tangent function']);
  this.executeCharTest('arctanh', ['inverse hyperbolic tangent function', 'area hyperbolic tangent', 'area hyperbolic tangent function']);
  this.executeCharTest('cos', ['cosine function', 'cosine', 'cosine']);
  this.executeCharTest('cosine', ['cosine function', 'cosine', 'cosine']);
  this.executeCharTest('cot', ['cotangent function', 'cotangent', 'cotangent']);
  this.executeCharTest('csc', ['cosecant function', 'cosecant', 'cosecant']);
  this.executeCharTest('sec', ['secant function', 'secant', 'secant']);
  this.executeCharTest('sin', ['sine function', 'sine', 'sine function']);
  this.executeCharTest('sine', ['sine function', 'sine', 'sine function']);
  this.executeCharTest('tan', ['tangent function', 'tangent', 'tangent']);
  this.executeCharTest('arccos', ['inverse cosine function', 'arc cosine', 'arc cosine function']);
  this.executeCharTest('arccot', ['inverse cotangent function', 'arc cotangent', 'arc cotangent function']);
  this.executeCharTest('arccsc', ['inverse cosecant function', 'arc cosecant', 'arc cosecant function']);
  this.executeCharTest('arcsec', ['inverse secant function', 'arc secant', 'arc secant function']);
  this.executeCharTest('arcsin', ['inverse sine function', 'arc sine', 'arc sine function']);
  this.executeCharTest('arctan', ['inverse tangent function', 'arc tangent', 'arc tangent function']);
};


sre.DefaultCharEnglishTest.prototype.testUnits = function() {
  this.executeUnitTest('W', ['watty', 'watt', 'watt']);
  this.executeUnitTest('w', ['watt', 'watt', 'watt']);
  this.executeUnitTest('kw', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('kW', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('mw', ['milliwatt', 'milliwatt', 'milliwatt']);
  this.executeUnitTest('mW', ['milliwatt', 'milliwatt', 'milliwatt']);
  this.executeUnitTest('kwh', ['kilowatt hour', 'kilowatt hour', 'kilowatt hour']);
  this.executeUnitTest('kWh', ['kilowatt hour', 'kilowatt hour', 'kilowatt hour']);
  this.executeUnitTest('J', ['joule', 'joule', 'joule']);
  this.executeUnitTest('N', ['Newton', 'Newton', 'Newton']);
  this.executeUnitTest('A', ['ampere', 'ampere', 'ampere']);
  this.executeUnitTest('V', ['volt', 'volt', 'volt']);
  this.executeUnitTest('¬µŒ©', ['microohm', 'microohm', 'microohm']);
  this.executeUnitTest('mŒ©', ['milliohm', 'milliohm', 'milliohm']);
  this.executeUnitTest('Œ©', ['ohm', 'ohm', 'ohm']);
  this.executeUnitTest('Ohm', ['ohm', 'ohm', 'ohm']);
  this.executeUnitTest('kŒ©', ['kilohm', 'kilohm', 'kilohm']);
  this.executeUnitTest('KŒ©', ['kilohm', 'kilohm', 'kilohm']);
  this.executeUnitTest('MŒ©', ['megaohm', 'megaohm', 'megaohm']);
  this.executeUnitTest('GŒ©', ['gigaohm', 'gigaohm', 'gigaohm']);
  this.executeUnitTest('mm', ['millimeter', 'millimeter', 'millimeter']);
  this.executeUnitTest('cm', ['centimeter', 'centimeter', 'centimeter']);
  this.executeUnitTest('m', ['meter', 'meter', 'meter']);
  this.executeUnitTest('km', ['kilometer', 'kilometer', 'kilometer']);
  this.executeUnitTest('ft', ['foot', 'foot', 'foot']);
  this.executeUnitTest('ft.', ['foot', 'foot', 'foot']);
  this.executeUnitTest('in', ['inch', 'inch', 'inch']);
  this.executeUnitTest('in.', ['inch', 'inch', 'inch']);
  this.executeUnitTest('mi', ['mile', 'mile', 'mile']);
  this.executeUnitTest('mi.', ['mile', 'mile', 'mile']);
  this.executeUnitTest('yd', ['yard', 'yard', 'yard']);
  this.executeUnitTest('yd.', ['yard', 'yard', 'yard']);
  this.executeUnitTest('n.m.', ['nautical mile', 'nautical mile', 'nautical mile']);
  this.executeUnitTest('b', ['bit', 'bit', 'bit']);
  this.executeUnitTest('B', ['byte', 'byte', 'byte']);
  this.executeUnitTest('KB', ['kilobyte', 'kilobyte', 'kilobyte']);
  this.executeUnitTest('MB', ['megabyte', 'megabyte', 'megabyte']);
  this.executeUnitTest('GB', ['gigabyte', 'gigabyte', 'gigabyte']);
  this.executeUnitTest('TB', ['terabyte', 'terabyte', 'terabyte']);
  this.executeUnitTest('doz', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('doz.', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('dz', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('dz.', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('sq', ['square', 'square', 'square']);
  this.executeUnitTest('sq.', ['square', 'square', 'square']);
  this.executeUnitTest('ha', ['hectare', 'hectare', 'hectare']);
  this.executeUnitTest('kt', ['knot', 'knot', 'knot']);
  this.executeUnitTest('kt.', ['knot', 'knot', 'knot']);
  this.executeUnitTest('mph', ['miles per hour', 'miles per hour', 'miles per hour']);
  this.executeUnitTest('rpm', ['revolutions per minute', 'revolutions per minute', 'revolutions per minute']);
  this.executeUnitTest('kmh', ['kilometers per hour', 'kilometers per hour', 'kilometers per hour']);
  this.executeUnitTest('F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('F.', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('¬∞F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('C', ['Celsius', 'Celsius', 'Centigrade']);
  this.executeUnitTest('¬∞C', ['Celsius', 'Celsius', 'Centigrade']);
  this.executeUnitTest('K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('¬∞K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('ns', ['nanosecond', 'nanosecond', 'nanosecond']);
  this.executeUnitTest('¬µs', ['microsecond', 'microsecond', 'microsecond']);
  this.executeUnitTest('ms', ['millisecond', 'millisecond', 'millisecond']);
  this.executeUnitTest('s', ['second', 'second', 'second']);
  this.executeUnitTest('min', ['minute', 'minute', 'minute']);
  this.executeUnitTest('h', ['hour', 'hour', 'hour']);
  this.executeUnitTest('hr', ['hour', 'hour', 'hour']);
  this.executeUnitTest('bbl.', ['barrel', 'barrel', 'barrel']);
  this.executeUnitTest('bbl', ['barrel', 'barrel', 'barrel']);
  this.executeUnitTest('cu', ['cubic', 'cubic', 'cubic']);
  this.executeUnitTest('cu.', ['cubic', 'cubic', 'cubic']);
  this.executeUnitTest('fl. oz.', ['fluid ounce', 'fluid ounce', 'fluid ounce']);
  this.executeUnitTest('gal', ['gallon', 'gallon', 'gallon']);
  this.executeUnitTest('gal.', ['gallon', 'gallon', 'gallon']);
  this.executeUnitTest('pt', ['pint', 'pint', 'pint']);
  this.executeUnitTest('pt.', ['pint', 'pint', 'pint']);
  this.executeUnitTest('qt', ['quart', 'quart', 'quart']);
  this.executeUnitTest('qt.', ['quart', 'quart', 'quart']);
  this.executeUnitTest('tbsp', ['tablespoon', 'tablespoon', 'tablespoon']);
  this.executeUnitTest('tbsp.', ['tablespoon', 'tablespoon', 'tablespoon']);
  this.executeUnitTest('tsp', ['teaspoon', 'teaspoon', 'teaspoon']);
  this.executeUnitTest('tsp.', ['teaspoon', 'teaspoon', 'teaspoon']);
  this.executeUnitTest('cc', ['cubic centimeter', 'cubic centimeter', 'cubic centimeter']);
  this.executeUnitTest('kl', ['kiloliter', 'kiloliter', 'kiloliter']);
  this.executeUnitTest('l', ['liter', 'liter', 'liter']);
  this.executeUnitTest('ml', ['milliliter', 'milliliter', 'milliliter']);
  this.executeUnitTest('lb', ['pound', 'pound', 'pound']);
  this.executeUnitTest('lb.', ['pound', 'pound', 'pound']);
  this.executeUnitTest('LT', ['long ton', 'long ton', 'long ton']);
  this.executeUnitTest('L.T.', ['long ton', 'long ton', 'long ton']);
  this.executeUnitTest('oz', ['ounce', 'ounce', 'ounce']);
  this.executeUnitTest('oz.', ['ounce', 'ounce', 'ounce']);
  this.executeUnitTest('g', ['gram', 'gram', 'gram']);
  this.executeUnitTest('gr', ['gram', 'gram', 'gram']);
  this.executeUnitTest('kg', ['kilogram', 'kilogram', 'kilogram']);
  this.executeUnitTest('mcg', ['microgram', 'microgram', 'microgram']);
  this.executeUnitTest('¬µg', ['microgram', 'microgram', 'microgram']);
  this.executeUnitTest('mg', ['milligram', 'milligram', 'milligram']);
  this.executeUnitTest('t', ['ton', 'ton', 'ton']);
  this.executeUnitTest('T', ['ton', 'ton', 'ton']);
};
