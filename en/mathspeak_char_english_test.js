// Copyright 2019 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract class for test cases of single characters.
 * @author Volker.Sorge@gmail.com (Volker Sorge)
 */

goog.provide('sre.MathspeakCharEnglishTest');

goog.require('sre.AbstractCharacterTest');



/**
 * @constructor
 * @extends {sre.AbstractCharacterTest}
 */
sre.MathspeakCharEnglishTest = function() {
  sre.MathspeakCharEnglishTest.base(this, 'constructor');

  this.locale = 'en';
  this.domain = 'mathspeak';
  this.semantics = true;
  
  /**
   * @type {Array.<string>}
   */
  this.styles = ['default', 'brief', 'sbrief'];

  this.setActive('MathspeakCharactersEnglish');
};
goog.inherits(sre.MathspeakCharEnglishTest, sre.AbstractCharacterTest);

                                            
sre.MathspeakCharEnglishTest.prototype.testMathspeakChars = function() {
  this.executeCharTest('0', ['0', '0', '0']);
  this.executeCharTest('1', ['1', '1', '1']);
  this.executeCharTest('2', ['2', '2', '2']);
  this.executeCharTest('3', ['3', '3', '3']);
  this.executeCharTest('4', ['4', '4', '4']);
  this.executeCharTest('5', ['5', '5', '5']);
  this.executeCharTest('6', ['6', '6', '6']);
  this.executeCharTest('7', ['7', '7', '7']);
  this.executeCharTest('8', ['8', '8', '8']);
  this.executeCharTest('9', ['9', '9', '9']);
  this.executeCharTest('Α', ['upper Alpha', 'upper Alpha', 'upper Alpha']);
  this.executeCharTest('Β', ['upper Beta', 'upper Beta', 'upper Beta']);
  this.executeCharTest('Γ', ['upper Gamma', 'upper Gamma', 'upper Gamma']);
  this.executeCharTest('Δ', ['upper Delta', 'upper Delta', 'upper Delta']);
  this.executeCharTest('Ε', ['upper Epsilon', 'upper Epsilon', 'upper Epsilon']);
  this.executeCharTest('Ζ', ['upper Zeta', 'upper Zeta', 'upper Zeta']);
  this.executeCharTest('Η', ['upper Eta', 'upper Eta', 'upper Eta']);
  this.executeCharTest('Θ', ['upper Theta', 'upper Theta', 'upper Theta']);
  this.executeCharTest('Ι', ['upper Iota', 'upper Iota', 'upper Iota']);
  this.executeCharTest('Κ', ['upper Kappa', 'upper Kappa', 'upper Kappa']);
  this.executeCharTest('Λ', ['upper Lamda', 'upper Lamda', 'upper Lamda']);
  this.executeCharTest('Μ', ['upper Mu', 'upper Mu', 'upper Mu']);
  this.executeCharTest('Ν', ['upper Nu', 'upper Nu', 'upper Nu']);
  this.executeCharTest('Ξ', ['upper Xi', 'upper Xi', 'upper Xi']);
  this.executeCharTest('Ο', ['upper Omicron', 'upper Omicron', 'upper Omicron']);
  this.executeCharTest('Π', ['upper Pi', 'upper Pi', 'upper Pi']);
  this.executeCharTest('Ρ', ['upper Rho', 'upper Rho', 'upper Rho']);
  this.executeCharTest('Σ', ['upper Sigma', 'upper Sigma', 'upper Sigma']);
  this.executeCharTest('Τ', ['upper Tau', 'upper Tau', 'upper Tau']);
  this.executeCharTest('Υ', ['upper Upsilon', 'upper Upsilon', 'upper Upsilon']);
  this.executeCharTest('Φ', ['upper Phi', 'upper Phi', 'upper Phi']);
  this.executeCharTest('Χ', ['upper Chi', 'upper Chi', 'upper Chi']);
  this.executeCharTest('Ψ', ['upper Psi', 'upper Psi', 'upper Psi']);
  this.executeCharTest('Ω', ['upper Omega', 'upper Omega', 'upper Omega']);
  this.executeCharTest('α', ['alpha', 'alpha', 'alpha']);
  this.executeCharTest('β', ['beta', 'beta', 'beta']);
  this.executeCharTest('γ', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('δ', ['delta', 'delta', 'delta']);
  this.executeCharTest('ε', ['epsilon', 'epsilon', 'epsilon']);
  this.executeCharTest('ζ', ['zeta', 'zeta', 'zeta']);
  this.executeCharTest('η', ['eta', 'eta', 'eta']);
  this.executeCharTest('θ', ['theta', 'theta', 'theta']);
  this.executeCharTest('ι', ['iota', 'iota', 'iota']);
  this.executeCharTest('κ', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('λ', ['lamda', 'lamda', 'lamda']);
  this.executeCharTest('μ', ['mu', 'mu', 'mu']);
  this.executeCharTest('ν', ['nu', 'nu', 'nu']);
  this.executeCharTest('ξ', ['xi', 'xi', 'xi']);
  this.executeCharTest('ο', ['omicron', 'omicron', 'omicron']);
  this.executeCharTest('π', ['pi', 'pi', 'pi']);
  this.executeCharTest('ρ', ['rho', 'rho', 'rho']);
  this.executeCharTest('ς', ['final sigma', 'final sigma', 'final sigma']);
  this.executeCharTest('σ', ['sigma', 'sigma', 'sigma']);
  this.executeCharTest('τ', ['tau', 'tau', 'tau']);
  this.executeCharTest('υ', ['upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest('φ', ['phi', 'phi', 'phi']);
  this.executeCharTest('χ', ['chi', 'chi', 'chi']);
  this.executeCharTest('ψ', ['psi', 'psi', 'psi']);
  this.executeCharTest('ω', ['omega', 'omega', 'omega']);
  this.executeCharTest('ᴦ', ['small upper Gamma', 'small upper Gamma', 'small upper Gamma']);
  this.executeCharTest('ᴧ', ['small upper Lamda', 'small upper Lamda', 'small upper Lamda']);
  this.executeCharTest('ᴨ', ['small upper Pi', 'small upper Pi', 'small upper Pi']);
  this.executeCharTest('ᴩ', ['small upper Rho', 'small upper Rho', 'small upper Rho']);
  this.executeCharTest('ᴪ', ['small upper Psi', 'small upper Psi', 'small upper Psi']);
  this.executeCharTest('ᵞ', ['superscript gamma', 'superscript gamma', 'superscript gamma']);
  this.executeCharTest('ᵠ', ['superscript phi', 'superscript phi', 'superscript phi']);
  this.executeCharTest('ᵦ', ['subscript beta', 'subscript beta', 'subscript beta']);
  this.executeCharTest('ᵧ', ['subscript gamma', 'subscript gamma', 'subscript gamma']);
  this.executeCharTest('ᵨ', ['subscript rho', 'subscript rho', 'subscript rho']);
  this.executeCharTest('ᵩ', ['subscript phi', 'subscript phi', 'subscript phi']);
  this.executeCharTest('ᵪ', ['subscript chi', 'subscript chi', 'subscript chi']);
  this.executeCharTest('ϐ', ['beta', 'beta', 'beta']);
  this.executeCharTest('ϑ', ['theta', 'theta', 'theta']);
  this.executeCharTest('ϕ', ['phi', 'phi', 'phi']);
  this.executeCharTest('ϖ', ['pi', 'pi', 'pi']);
  this.executeCharTest('ϗ', ['kai', 'kai', 'kai']);
  this.executeCharTest('ϰ', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('ϱ', ['rho', 'rho', 'rho']);
  this.executeCharTest('ϵ', ['epsilon', 'epsilon', 'epsilon']);
  this.executeCharTest('϶', ['reversed epsilon', 'reversed epsilon', 'reversed epsilon']);
  this.executeCharTest('ϴ', ['upper Theta', 'upper Theta', 'upper Theta']);
  this.executeCharTest('𝚹', ['bold upper Theta', 'bold upper Theta', 'bold upper Theta']);
  this.executeCharTest('𝛳', ['italic upper Theta', 'italic upper Theta', 'italic upper Theta']);
  this.executeCharTest('𝝧', ['sans serif bold upper Theta', 'sans serif bold upper Theta', 'sans serif bold upper Theta']);
  this.executeCharTest('𝛁', ['bold nabla', 'bold nabla', 'bold nabla']);
  this.executeCharTest('𝛛', ['bold partial differential', 'bold partial differential', 'bold partial differential']);
  this.executeCharTest('𝛜', ['bold epsilon', 'bold epsilon', 'bold epsilon']);
  this.executeCharTest('𝛝', ['bold theta', 'bold theta', 'bold theta']);
  this.executeCharTest('𝛞', ['bold kappa', 'bold kappa', 'bold kappa']);
  this.executeCharTest('𝛟', ['bold phi', 'bold phi', 'bold phi']);
  this.executeCharTest('𝛠', ['bold rho', 'bold rho', 'bold rho']);
  this.executeCharTest('𝛡', ['bold pi', 'bold pi', 'bold pi']);
  this.executeCharTest('𝛻', ['italic nabla', 'italic nabla', 'italic nabla']);
  this.executeCharTest('𝜕', ['italic partial differential', 'italic partial differential', 'italic partial differential']);
  this.executeCharTest('𝜖', ['italic epsilon', 'italic epsilon', 'italic epsilon']);
  this.executeCharTest('𝜗', ['italic theta', 'italic theta', 'italic theta']);
  this.executeCharTest('𝜘', ['italic kappa', 'italic kappa', 'italic kappa']);
  this.executeCharTest('𝜙', ['italic phi', 'italic phi', 'italic phi']);
  this.executeCharTest('𝜚', ['italic rho', 'italic rho', 'italic rho']);
  this.executeCharTest('𝜛', ['italic pi', 'italic pi', 'italic pi']);
  this.executeCharTest('𝝯', ['sans serif bold nabla', 'sans serif bold nabla', 'sans serif bold nabla']);
  this.executeCharTest('𝞉', ['sans serif bold partial differential', 'sans serif bold partial differential', 'sans serif bold partial differential']);
  this.executeCharTest('𝞊', ['sans serif bold epsilon', 'sans serif bold epsilon', 'sans serif bold epsilon']);
  this.executeCharTest('𝞋', ['sans serif bold theta', 'sans serif bold theta', 'sans serif bold theta']);
  this.executeCharTest('𝞌', ['sans serif bold kappa', 'sans serif bold kappa', 'sans serif bold kappa']);
  this.executeCharTest('𝞍', ['sans serif bold phi', 'sans serif bold phi', 'sans serif bold phi']);
  this.executeCharTest('𝞎', ['sans serif bold rho', 'sans serif bold rho', 'sans serif bold rho']);
  this.executeCharTest('𝞏', ['sans serif bold pi', 'sans serif bold pi', 'sans serif bold pi']);
  this.executeCharTest('𝟊', ['bold upper Digamma', 'bold upper Digamma', 'bold upper Digamma']);
  this.executeCharTest('𝟋', ['bold digamma', 'bold digamma', 'bold digamma']);
  this.executeCharTest('𝚨', ['bold upper Alpha', 'bold upper Alpha', 'bold upper Alpha']);
  this.executeCharTest('𝚩', ['bold upper Beta', 'bold upper Beta', 'bold upper Beta']);
  this.executeCharTest('𝚪', ['bold upper Gamma', 'bold upper Gamma', 'bold upper Gamma']);
  this.executeCharTest('𝚫', ['bold upper Delta', 'bold upper Delta', 'bold upper Delta']);
  this.executeCharTest('𝚬', ['bold upper Epsilon', 'bold upper Epsilon', 'bold upper Epsilon']);
  this.executeCharTest('𝚭', ['bold upper Zeta', 'bold upper Zeta', 'bold upper Zeta']);
  this.executeCharTest('𝚮', ['bold upper Eta', 'bold upper Eta', 'bold upper Eta']);
  this.executeCharTest('𝚯', ['bold upper Theta', 'bold upper Theta', 'bold upper Theta']);
  this.executeCharTest('𝚰', ['bold upper Iota', 'bold upper Iota', 'bold upper Iota']);
  this.executeCharTest('𝚱', ['bold upper Kappa', 'bold upper Kappa', 'bold upper Kappa']);
  this.executeCharTest('𝚲', ['bold upper Lamda', 'bold upper Lamda', 'bold upper Lamda']);
  this.executeCharTest('𝚳', ['bold upper Mu', 'bold upper Mu', 'bold upper Mu']);
  this.executeCharTest('𝚴', ['bold upper Nu', 'bold upper Nu', 'bold upper Nu']);
  this.executeCharTest('𝚵', ['bold upper Xi', 'bold upper Xi', 'bold upper Xi']);
  this.executeCharTest('𝚶', ['bold upper Omicron', 'bold upper Omicron', 'bold upper Omicron']);
  this.executeCharTest('𝚷', ['bold upper Pi', 'bold upper Pi', 'bold upper Pi']);
  this.executeCharTest('𝚸', ['bold upper Rho', 'bold upper Rho', 'bold upper Rho']);
  this.executeCharTest('𝚺', ['bold upper Sigma', 'bold upper Sigma', 'bold upper Sigma']);
  this.executeCharTest('𝚻', ['bold upper Tau', 'bold upper Tau', 'bold upper Tau']);
  this.executeCharTest('𝚼', ['bold upper Upsilon', 'bold upper Upsilon', 'bold upper Upsilon']);
  this.executeCharTest('𝚽', ['bold upper Phi', 'bold upper Phi', 'bold upper Phi']);
  this.executeCharTest('𝚾', ['bold upper Chi', 'bold upper Chi', 'bold upper Chi']);
  this.executeCharTest('𝚿', ['bold upper Psi', 'bold upper Psi', 'bold upper Psi']);
  this.executeCharTest('𝛀', ['bold upper Omega', 'bold upper Omega', 'bold upper Omega']);
  this.executeCharTest('𝛂', ['bold alpha', 'bold alpha', 'bold alpha']);
  this.executeCharTest('𝛃', ['bold beta', 'bold beta', 'bold beta']);
  this.executeCharTest('𝛄', ['bold gamma', 'bold gamma', 'bold gamma']);
  this.executeCharTest('𝛅', ['bold delta', 'bold delta', 'bold delta']);
  this.executeCharTest('𝛆', ['bold epsilon', 'bold epsilon', 'bold epsilon']);
  this.executeCharTest('𝛇', ['bold zeta', 'bold zeta', 'bold zeta']);
  this.executeCharTest('𝛈', ['bold eta', 'bold eta', 'bold eta']);
  this.executeCharTest('𝛉', ['bold theta', 'bold theta', 'bold theta']);
  this.executeCharTest('𝛊', ['bold iota', 'bold iota', 'bold iota']);
  this.executeCharTest('𝛋', ['bold kappa', 'bold kappa', 'bold kappa']);
  this.executeCharTest('𝛌', ['bold lamda', 'bold lamda', 'bold lamda']);
  this.executeCharTest('𝛍', ['bold mu', 'bold mu', 'bold mu']);
  this.executeCharTest('𝛎', ['bold nu', 'bold nu', 'bold nu']);
  this.executeCharTest('𝛏', ['bold xi', 'bold xi', 'bold xi']);
  this.executeCharTest('𝛐', ['bold omicron', 'bold omicron', 'bold omicron']);
  this.executeCharTest('𝛑', ['bold pi', 'bold pi', 'bold pi']);
  this.executeCharTest('𝛒', ['bold rho', 'bold rho', 'bold rho']);
  this.executeCharTest('𝛓', ['bold final sigma', 'bold final sigma', 'bold final sigma']);
  this.executeCharTest('𝛔', ['bold sigma', 'bold sigma', 'bold sigma']);
  this.executeCharTest('𝛕', ['bold tau', 'bold tau', 'bold tau']);
  this.executeCharTest('𝛖', ['bold upsilon', 'bold upsilon', 'bold upsilon']);
  this.executeCharTest('𝛗', ['bold phi', 'bold phi', 'bold phi']);
  this.executeCharTest('𝛘', ['bold chi', 'bold chi', 'bold chi']);
  this.executeCharTest('𝛙', ['bold psi', 'bold psi', 'bold psi']);
  this.executeCharTest('𝛚', ['bold omega', 'bold omega', 'bold omega']);
  this.executeCharTest('𝛢', ['italic upper Alpha', 'italic upper Alpha', 'italic upper Alpha']);
  this.executeCharTest('𝛣', ['italic upper Beta', 'italic upper Beta', 'italic upper Beta']);
  this.executeCharTest('𝛤', ['italic upper Gamma', 'italic upper Gamma', 'italic upper Gamma']);
  this.executeCharTest('𝛥', ['italic upper Delta', 'italic upper Delta', 'italic upper Delta']);
  this.executeCharTest('𝛦', ['italic upper Epsilon', 'italic upper Epsilon', 'italic upper Epsilon']);
  this.executeCharTest('𝛧', ['italic upper Zeta', 'italic upper Zeta', 'italic upper Zeta']);
  this.executeCharTest('𝛨', ['italic upper Eta', 'italic upper Eta', 'italic upper Eta']);
  this.executeCharTest('𝛩', ['italic upper Theta', 'italic upper Theta', 'italic upper Theta']);
  this.executeCharTest('𝛪', ['italic upper Iota', 'italic upper Iota', 'italic upper Iota']);
  this.executeCharTest('𝛫', ['italic upper Kappa', 'italic upper Kappa', 'italic upper Kappa']);
  this.executeCharTest('𝛬', ['italic upper Lamda', 'italic upper Lamda', 'italic upper Lamda']);
  this.executeCharTest('𝛭', ['italic upper Mu', 'italic upper Mu', 'italic upper Mu']);
  this.executeCharTest('𝛮', ['italic upper Nu', 'italic upper Nu', 'italic upper Nu']);
  this.executeCharTest('𝛯', ['italic upper Xi', 'italic upper Xi', 'italic upper Xi']);
  this.executeCharTest('𝛰', ['italic upper Omicron', 'italic upper Omicron', 'italic upper Omicron']);
  this.executeCharTest('𝛱', ['italic upper Pi', 'italic upper Pi', 'italic upper Pi']);
  this.executeCharTest('𝛲', ['italic upper Rho', 'italic upper Rho', 'italic upper Rho']);
  this.executeCharTest('𝛴', ['italic upper Sigma', 'italic upper Sigma', 'italic upper Sigma']);
  this.executeCharTest('𝛵', ['italic upper Tau', 'italic upper Tau', 'italic upper Tau']);
  this.executeCharTest('𝛶', ['italic upper Upsilon', 'italic upper Upsilon', 'italic upper Upsilon']);
  this.executeCharTest('𝛷', ['italic upper Phi', 'italic upper Phi', 'italic upper Phi']);
  this.executeCharTest('𝛸', ['italic upper Chi', 'italic upper Chi', 'italic upper Chi']);
  this.executeCharTest('𝛹', ['italic upper Psi', 'italic upper Psi', 'italic upper Psi']);
  this.executeCharTest('𝛺', ['italic upper Omega', 'italic upper Omega', 'italic upper Omega']);
  this.executeCharTest('𝛼', ['italic alpha', 'italic alpha', 'italic alpha']);
  this.executeCharTest('𝛽', ['italic beta', 'italic beta', 'italic beta']);
  this.executeCharTest('𝛾', ['italic gamma', 'italic gamma', 'italic gamma']);
  this.executeCharTest('𝛿', ['italic delta', 'italic delta', 'italic delta']);
  this.executeCharTest('𝜀', ['italic epsilon', 'italic epsilon', 'italic epsilon']);
  this.executeCharTest('𝜁', ['italic zeta', 'italic zeta', 'italic zeta']);
  this.executeCharTest('𝜂', ['italic eta', 'italic eta', 'italic eta']);
  this.executeCharTest('𝜃', ['italic theta', 'italic theta', 'italic theta']);
  this.executeCharTest('𝜄', ['italic iota', 'italic iota', 'italic iota']);
  this.executeCharTest('𝜅', ['italic kappa', 'italic kappa', 'italic kappa']);
  this.executeCharTest('𝜆', ['italic lamda', 'italic lamda', 'italic lamda']);
  this.executeCharTest('𝜇', ['italic mu', 'italic mu', 'italic mu']);
  this.executeCharTest('𝜈', ['italic nu', 'italic nu', 'italic nu']);
  this.executeCharTest('𝜉', ['italic xi', 'italic xi', 'italic xi']);
  this.executeCharTest('𝜊', ['italic omicron', 'italic omicron', 'italic omicron']);
  this.executeCharTest('𝜋', ['italic pi', 'italic pi', 'italic pi']);
  this.executeCharTest('𝜌', ['italic rho', 'italic rho', 'italic rho']);
  this.executeCharTest('𝜍', ['italic final sigma', 'italic final sigma', 'italic final sigma']);
  this.executeCharTest('𝜎', ['italic sigma', 'italic sigma', 'italic sigma']);
  this.executeCharTest('𝜏', ['italic tau', 'italic tau', 'italic tau']);
  this.executeCharTest('𝜐', ['italic upsilon', 'italic upsilon', 'italic upsilon']);
  this.executeCharTest('𝜑', ['italic phi', 'italic phi', 'italic phi']);
  this.executeCharTest('𝜒', ['italic chi', 'italic chi', 'italic chi']);
  this.executeCharTest('𝜓', ['italic psi', 'italic psi', 'italic psi']);
  this.executeCharTest('𝜔', ['italic omega', 'italic omega', 'italic omega']);
  this.executeCharTest('𝜜', ['bold italic upper Alpha', 'bold italic upper Alpha', 'bold italic upper Alpha']);
  this.executeCharTest('𝜝', ['bold italic upper Beta', 'bold italic upper Beta', 'bold italic upper Beta']);
  this.executeCharTest('𝜞', ['bold italic upper Gamma', 'bold italic upper Gamma', 'bold italic upper Gamma']);
  this.executeCharTest('𝜟', ['bold italic upper Delta', 'bold italic upper Delta', 'bold italic upper Delta']);
  this.executeCharTest('𝜠', ['bold italic upper Epsilon', 'bold italic upper Epsilon', 'bold italic upper Epsilon']);
  this.executeCharTest('𝜡', ['bold italic upper Zeta', 'bold italic upper Zeta', 'bold italic upper Zeta']);
  this.executeCharTest('𝜢', ['bold italic upper Eta', 'bold italic upper Eta', 'bold italic upper Eta']);
  this.executeCharTest('𝜣', ['bold italic upper Theta', 'bold italic upper Theta', 'bold italic upper Theta']);
  this.executeCharTest('𝜤', ['bold italic upper Iota', 'bold italic upper Iota', 'bold italic upper Iota']);
  this.executeCharTest('𝜥', ['bold italic upper Kappa', 'bold italic upper Kappa', 'bold italic upper Kappa']);
  this.executeCharTest('𝜦', ['bold italic upper Lamda', 'bold italic upper Lamda', 'bold italic upper Lamda']);
  this.executeCharTest('𝜧', ['bold italic upper Mu', 'bold italic upper Mu', 'bold italic upper Mu']);
  this.executeCharTest('𝜨', ['bold italic upper Nu', 'bold italic upper Nu', 'bold italic upper Nu']);
  this.executeCharTest('𝜩', ['bold italic upper Xi', 'bold italic upper Xi', 'bold italic upper Xi']);
  this.executeCharTest('𝜪', ['bold italic upper Omicron', 'bold italic upper Omicron', 'bold italic upper Omicron']);
  this.executeCharTest('𝜫', ['bold italic upper Pi', 'bold italic upper Pi', 'bold italic upper Pi']);
  this.executeCharTest('𝜬', ['bold italic upper Rho', 'bold italic upper Rho', 'bold italic upper Rho']);
  this.executeCharTest('𝜮', ['bold italic upper Sigma', 'bold italic upper Sigma', 'bold italic upper Sigma']);
  this.executeCharTest('𝜯', ['bold italic upper Tau', 'bold italic upper Tau', 'bold italic upper Tau']);
  this.executeCharTest('𝜰', ['bold italic upper Upsilon', 'bold italic upper Upsilon', 'bold italic upper Upsilon']);
  this.executeCharTest('𝜱', ['bold italic upper Phi', 'bold italic upper Phi', 'bold italic upper Phi']);
  this.executeCharTest('𝜲', ['bold italic upper Chi', 'bold italic upper Chi', 'bold italic upper Chi']);
  this.executeCharTest('𝜳', ['bold italic upper Psi', 'bold italic upper Psi', 'bold italic upper Psi']);
  this.executeCharTest('𝜴', ['bold italic upper Omega', 'bold italic upper Omega', 'bold italic upper Omega']);
  this.executeCharTest('𝜶', ['bold italic alpha', 'bold italic alpha', 'bold italic alpha']);
  this.executeCharTest('𝜷', ['bold italic beta', 'bold italic beta', 'bold italic beta']);
  this.executeCharTest('𝜸', ['bold italic gamma', 'bold italic gamma', 'bold italic gamma']);
  this.executeCharTest('𝜹', ['bold italic delta', 'bold italic delta', 'bold italic delta']);
  this.executeCharTest('𝜺', ['bold italic epsilon', 'bold italic epsilon', 'bold italic epsilon']);
  this.executeCharTest('𝜻', ['bold italic zeta', 'bold italic zeta', 'bold italic zeta']);
  this.executeCharTest('𝜼', ['bold italic eta', 'bold italic eta', 'bold italic eta']);
  this.executeCharTest('𝜽', ['bold italic theta', 'bold italic theta', 'bold italic theta']);
  this.executeCharTest('𝜾', ['bold italic iota', 'bold italic iota', 'bold italic iota']);
  this.executeCharTest('𝜿', ['bold italic kappa', 'bold italic kappa', 'bold italic kappa']);
  this.executeCharTest('𝝀', ['bold italic lamda', 'bold italic lamda', 'bold italic lamda']);
  this.executeCharTest('𝝁', ['bold italic mu', 'bold italic mu', 'bold italic mu']);
  this.executeCharTest('𝝂', ['bold italic nu', 'bold italic nu', 'bold italic nu']);
  this.executeCharTest('𝝃', ['bold italic xi', 'bold italic xi', 'bold italic xi']);
  this.executeCharTest('𝝄', ['bold italic omicron', 'bold italic omicron', 'bold italic omicron']);
  this.executeCharTest('𝝅', ['bold italic pi', 'bold italic pi', 'bold italic pi']);
  this.executeCharTest('𝝆', ['bold italic rho', 'bold italic rho', 'bold italic rho']);
  this.executeCharTest('𝝇', ['bold italic final sigma', 'bold italic final sigma', 'bold italic final sigma']);
  this.executeCharTest('𝝈', ['bold italic sigma', 'bold italic sigma', 'bold italic sigma']);
  this.executeCharTest('𝝉', ['bold italic tau', 'bold italic tau', 'bold italic tau']);
  this.executeCharTest('𝝊', ['bold italic upsilon', 'bold italic upsilon', 'bold italic upsilon']);
  this.executeCharTest('𝝋', ['bold italic phi', 'bold italic phi', 'bold italic phi']);
  this.executeCharTest('𝝌', ['bold italic chi', 'bold italic chi', 'bold italic chi']);
  this.executeCharTest('𝝍', ['bold italic psi', 'bold italic psi', 'bold italic psi']);
  this.executeCharTest('𝝎', ['bold italic omega', 'bold italic omega', 'bold italic omega']);
  this.executeCharTest('𝝖', ['sans serif bold upper Alpha', 'sans serif bold upper Alpha', 'sans serif bold upper Alpha']);
  this.executeCharTest('𝝗', ['sans serif bold upper Beta', 'sans serif bold upper Beta', 'sans serif bold upper Beta']);
  this.executeCharTest('𝝘', ['sans serif bold upper Gamma', 'sans serif bold upper Gamma', 'sans serif bold upper Gamma']);
  this.executeCharTest('𝝙', ['sans serif bold upper Delta', 'sans serif bold upper Delta', 'sans serif bold upper Delta']);
  this.executeCharTest('𝝚', ['sans serif bold upper Epsilon', 'sans serif bold upper Epsilon', 'sans serif bold upper Epsilon']);
  this.executeCharTest('𝝛', ['sans serif bold upper Zeta', 'sans serif bold upper Zeta', 'sans serif bold upper Zeta']);
  this.executeCharTest('𝝜', ['sans serif bold upper Eta', 'sans serif bold upper Eta', 'sans serif bold upper Eta']);
  this.executeCharTest('𝝝', ['sans serif bold upper Theta', 'sans serif bold upper Theta', 'sans serif bold upper Theta']);
  this.executeCharTest('𝝞', ['sans serif bold upper Iota', 'sans serif bold upper Iota', 'sans serif bold upper Iota']);
  this.executeCharTest('𝝟', ['sans serif bold upper Kappa', 'sans serif bold upper Kappa', 'sans serif bold upper Kappa']);
  this.executeCharTest('𝝠', ['sans serif bold upper Lamda', 'sans serif bold upper Lamda', 'sans serif bold upper Lamda']);
  this.executeCharTest('𝝡', ['sans serif bold upper Mu', 'sans serif bold upper Mu', 'sans serif bold upper Mu']);
  this.executeCharTest('𝝢', ['sans serif bold upper Nu', 'sans serif bold upper Nu', 'sans serif bold upper Nu']);
  this.executeCharTest('𝝣', ['sans serif bold upper Xi', 'sans serif bold upper Xi', 'sans serif bold upper Xi']);
  this.executeCharTest('𝝤', ['sans serif bold upper Omicron', 'sans serif bold upper Omicron', 'sans serif bold upper Omicron']);
  this.executeCharTest('𝝥', ['sans serif bold upper Pi', 'sans serif bold upper Pi', 'sans serif bold upper Pi']);
  this.executeCharTest('𝝦', ['sans serif bold upper Rho', 'sans serif bold upper Rho', 'sans serif bold upper Rho']);
  this.executeCharTest('𝝨', ['sans serif bold upper Sigma', 'sans serif bold upper Sigma', 'sans serif bold upper Sigma']);
  this.executeCharTest('𝝩', ['sans serif bold upper Tau', 'sans serif bold upper Tau', 'sans serif bold upper Tau']);
  this.executeCharTest('𝝪', ['sans serif bold upper Upsilon', 'sans serif bold upper Upsilon', 'sans serif bold upper Upsilon']);
  this.executeCharTest('𝝫', ['sans serif bold upper Phi', 'sans serif bold upper Phi', 'sans serif bold upper Phi']);
  this.executeCharTest('𝝬', ['sans serif bold upper Chi', 'sans serif bold upper Chi', 'sans serif bold upper Chi']);
  this.executeCharTest('𝝭', ['sans serif bold upper Psi', 'sans serif bold upper Psi', 'sans serif bold upper Psi']);
  this.executeCharTest('𝝮', ['sans serif bold upper Omega', 'sans serif bold upper Omega', 'sans serif bold upper Omega']);
  this.executeCharTest('𝝰', ['sans serif bold alpha', 'sans serif bold alpha', 'sans serif bold alpha']);
  this.executeCharTest('𝝱', ['sans serif bold beta', 'sans serif bold beta', 'sans serif bold beta']);
  this.executeCharTest('𝝲', ['sans serif bold gamma', 'sans serif bold gamma', 'sans serif bold gamma']);
  this.executeCharTest('𝝳', ['sans serif bold delta', 'sans serif bold delta', 'sans serif bold delta']);
  this.executeCharTest('𝝴', ['sans serif bold epsilon', 'sans serif bold epsilon', 'sans serif bold epsilon']);
  this.executeCharTest('𝝵', ['sans serif bold zeta', 'sans serif bold zeta', 'sans serif bold zeta']);
  this.executeCharTest('𝝶', ['sans serif bold eta', 'sans serif bold eta', 'sans serif bold eta']);
  this.executeCharTest('𝝷', ['sans serif bold theta', 'sans serif bold theta', 'sans serif bold theta']);
  this.executeCharTest('𝝸', ['sans serif bold iota', 'sans serif bold iota', 'sans serif bold iota']);
  this.executeCharTest('𝝹', ['sans serif bold kappa', 'sans serif bold kappa', 'sans serif bold kappa']);
  this.executeCharTest('𝝺', ['sans serif bold lamda', 'sans serif bold lamda', 'sans serif bold lamda']);
  this.executeCharTest('𝝻', ['sans serif bold mu', 'sans serif bold mu', 'sans serif bold mu']);
  this.executeCharTest('𝝼', ['sans serif bold nu', 'sans serif bold nu', 'sans serif bold nu']);
  this.executeCharTest('𝝽', ['sans serif bold xi', 'sans serif bold xi', 'sans serif bold xi']);
  this.executeCharTest('𝝾', ['sans serif bold omicron', 'sans serif bold omicron', 'sans serif bold omicron']);
  this.executeCharTest('𝝿', ['sans serif bold pi', 'sans serif bold pi', 'sans serif bold pi']);
  this.executeCharTest('𝞀', ['sans serif bold rho', 'sans serif bold rho', 'sans serif bold rho']);
  this.executeCharTest('𝞁', ['sans serif bold final sigma', 'sans serif bold final sigma', 'sans serif bold final sigma']);
  this.executeCharTest('𝞂', ['sans serif bold sigma', 'sans serif bold sigma', 'sans serif bold sigma']);
  this.executeCharTest('𝞃', ['sans serif bold tau', 'sans serif bold tau', 'sans serif bold tau']);
  this.executeCharTest('𝞄', ['sans serif bold upsilon', 'sans serif bold upsilon', 'sans serif bold upsilon']);
  this.executeCharTest('𝞅', ['sans serif bold phi', 'sans serif bold phi', 'sans serif bold phi']);
  this.executeCharTest('𝞆', ['sans serif bold chi', 'sans serif bold chi', 'sans serif bold chi']);
  this.executeCharTest('𝞇', ['sans serif bold psi', 'sans serif bold psi', 'sans serif bold psi']);
  this.executeCharTest('𝞈', ['sans serif bold omega', 'sans serif bold omega', 'sans serif bold omega']);
  this.executeCharTest('𝞐', ['sans serif bold italic upper Alpha', 'sans serif bold italic upper Alpha', 'sans serif bold italic upper Alpha']);
  this.executeCharTest('𝞑', ['sans serif bold italic upper Beta', 'sans serif bold italic upper Beta', 'sans serif bold italic upper Beta']);
  this.executeCharTest('𝞒', ['sans serif bold italic upper Gamma', 'sans serif bold italic upper Gamma', 'sans serif bold italic upper Gamma']);
  this.executeCharTest('𝞓', ['sans serif bold italic upper Delta', 'sans serif bold italic upper Delta', 'sans serif bold italic upper Delta']);
  this.executeCharTest('𝞔', ['sans serif bold italic upper Epsilon', 'sans serif bold italic upper Epsilon', 'sans serif bold italic upper Epsilon']);
  this.executeCharTest('𝞕', ['sans serif bold italic upper Zeta', 'sans serif bold italic upper Zeta', 'sans serif bold italic upper Zeta']);
  this.executeCharTest('𝞖', ['sans serif bold italic upper Eta', 'sans serif bold italic upper Eta', 'sans serif bold italic upper Eta']);
  this.executeCharTest('𝞗', ['sans serif bold italic upper Theta', 'sans serif bold italic upper Theta', 'sans serif bold italic upper Theta']);
  this.executeCharTest('𝞘', ['sans serif bold italic upper Iota', 'sans serif bold italic upper Iota', 'sans serif bold italic upper Iota']);
  this.executeCharTest('𝞙', ['sans serif bold italic upper Kappa', 'sans serif bold italic upper Kappa', 'sans serif bold italic upper Kappa']);
  this.executeCharTest('𝞚', ['sans serif bold italic upper Lamda', 'sans serif bold italic upper Lamda', 'sans serif bold italic upper Lamda']);
  this.executeCharTest('𝞛', ['sans serif bold italic upper Mu', 'sans serif bold italic upper Mu', 'sans serif bold italic upper Mu']);
  this.executeCharTest('𝞜', ['sans serif bold italic upper Nu', 'sans serif bold italic upper Nu', 'sans serif bold italic upper Nu']);
  this.executeCharTest('𝞝', ['sans serif bold italic upper Xi', 'sans serif bold italic upper Xi', 'sans serif bold italic upper Xi']);
  this.executeCharTest('𝞞', ['sans serif bold italic upper Omicron', 'sans serif bold italic upper Omicron', 'sans serif bold italic upper Omicron']);
  this.executeCharTest('𝞟', ['sans serif bold italic upper Pi', 'sans serif bold italic upper Pi', 'sans serif bold italic upper Pi']);
  this.executeCharTest('𝞠', ['sans serif bold italic upper Rho', 'sans serif bold italic upper Rho', 'sans serif bold italic upper Rho']);
  this.executeCharTest('𝞢', ['sans serif bold italic upper Sigma', 'sans serif bold italic upper Sigma', 'sans serif bold italic upper Sigma']);
  this.executeCharTest('𝞣', ['sans serif bold italic upper Tau', 'sans serif bold italic upper Tau', 'sans serif bold italic upper Tau']);
  this.executeCharTest('𝞤', ['sans serif bold italic upper Upsilon', 'sans serif bold italic upper Upsilon', 'sans serif bold italic upper Upsilon']);
  this.executeCharTest('𝞥', ['sans serif bold italic upper Phi', 'sans serif bold italic upper Phi', 'sans serif bold italic upper Phi']);
  this.executeCharTest('𝞦', ['sans serif bold italic upper Chi', 'sans serif bold italic upper Chi', 'sans serif bold italic upper Chi']);
  this.executeCharTest('𝞧', ['sans serif bold italic upper Psi', 'sans serif bold italic upper Psi', 'sans serif bold italic upper Psi']);
  this.executeCharTest('𝞨', ['sans serif bold italic upper Omega', 'sans serif bold italic upper Omega', 'sans serif bold italic upper Omega']);
  this.executeCharTest('𝞪', ['sans serif bold italic alpha', 'sans serif bold italic alpha', 'sans serif bold italic alpha']);
  this.executeCharTest('𝞫', ['sans serif bold italic beta', 'sans serif bold italic beta', 'sans serif bold italic beta']);
  this.executeCharTest('𝞬', ['sans serif bold italic gamma', 'sans serif bold italic gamma', 'sans serif bold italic gamma']);
  this.executeCharTest('𝞭', ['sans serif bold italic delta', 'sans serif bold italic delta', 'sans serif bold italic delta']);
  this.executeCharTest('𝞮', ['sans serif bold italic epsilon', 'sans serif bold italic epsilon', 'sans serif bold italic epsilon']);
  this.executeCharTest('𝞯', ['sans serif bold italic zeta', 'sans serif bold italic zeta', 'sans serif bold italic zeta']);
  this.executeCharTest('𝞰', ['sans serif bold italic eta', 'sans serif bold italic eta', 'sans serif bold italic eta']);
  this.executeCharTest('𝞱', ['sans serif bold italic theta', 'sans serif bold italic theta', 'sans serif bold italic theta']);
  this.executeCharTest('𝞲', ['sans serif bold italic iota', 'sans serif bold italic iota', 'sans serif bold italic iota']);
  this.executeCharTest('𝞳', ['sans serif bold italic kappa', 'sans serif bold italic kappa', 'sans serif bold italic kappa']);
  this.executeCharTest('𝞴', ['sans serif bold italic lamda', 'sans serif bold italic lamda', 'sans serif bold italic lamda']);
  this.executeCharTest('𝞵', ['sans serif bold italic mu', 'sans serif bold italic mu', 'sans serif bold italic mu']);
  this.executeCharTest('𝞶', ['sans serif bold italic nu', 'sans serif bold italic nu', 'sans serif bold italic nu']);
  this.executeCharTest('𝞷', ['sans serif bold italic xi', 'sans serif bold italic xi', 'sans serif bold italic xi']);
  this.executeCharTest('𝞸', ['sans serif bold italic omicron', 'sans serif bold italic omicron', 'sans serif bold italic omicron']);
  this.executeCharTest('𝞹', ['sans serif bold italic pi', 'sans serif bold italic pi', 'sans serif bold italic pi']);
  this.executeCharTest('𝞺', ['sans serif bold italic rho', 'sans serif bold italic rho', 'sans serif bold italic rho']);
  this.executeCharTest('𝞻', ['sans serif bold italic final sigma', 'sans serif bold italic final sigma', 'sans serif bold italic final sigma']);
  this.executeCharTest('𝞼', ['sans serif bold italic sigma', 'sans serif bold italic sigma', 'sans serif bold italic sigma']);
  this.executeCharTest('𝞽', ['sans serif bold italic tau', 'sans serif bold italic tau', 'sans serif bold italic tau']);
  this.executeCharTest('𝞾', ['sans serif bold italic upsilon', 'sans serif bold italic upsilon', 'sans serif bold italic upsilon']);
  this.executeCharTest('𝞿', ['sans serif bold italic phi', 'sans serif bold italic phi', 'sans serif bold italic phi']);
  this.executeCharTest('𝟀', ['sans serif bold italic chi', 'sans serif bold italic chi', 'sans serif bold italic chi']);
  this.executeCharTest('𝟁', ['sans serif bold italic psi', 'sans serif bold italic psi', 'sans serif bold italic psi']);
  this.executeCharTest('𝟂', ['sans serif bold italic omega', 'sans serif bold italic omega', 'sans serif bold italic omega']);
  this.executeCharTest('ℵ', ['alef', 'alef', 'alef']);
  this.executeCharTest('ℶ', ['bet', 'bet', 'bet']);
  this.executeCharTest('ℷ', ['gimel', 'gimel', 'gimel']);
  this.executeCharTest('ℸ', ['dalet', 'dalet', 'dalet']);
  this.executeCharTest('ǖ', ['u double overdot overbar', 'u double overdot overbar', 'u double overdot overbar']);
  this.executeCharTest('ǘ', ['u double overdot acute', 'u double overdot acute', 'u double overdot acute']);
  this.executeCharTest('ǚ', ['u double overdot caron', 'u double overdot caron', 'u double overdot caron']);
  this.executeCharTest('ǜ', ['u double overdot grave', 'u double overdot grave', 'u double overdot grave']);
  this.executeCharTest('ǟ', ['a double overdot overbar', 'a double overdot overbar', 'a double overdot overbar']);
  this.executeCharTest('ǡ', ['a overdot overbar', 'a overdot overbar', 'a overdot overbar']);
  this.executeCharTest('ǭ', ['o ogonek overbar', 'o ogonek overbar', 'o ogonek overbar']);
  this.executeCharTest('ǻ', ['a ring above acute', 'a ring above acute', 'a ring above acute']);
  this.executeCharTest('ȫ', ['o double overdot overbar', 'o double overdot overbar', 'o double overdot overbar']);
  this.executeCharTest('ȭ', ['o tilde overbar', 'o tilde overbar', 'o tilde overbar']);
  this.executeCharTest('ȱ', ['o overdot overbar', 'o overdot overbar', 'o overdot overbar']);
  this.executeCharTest('ḉ', ['c cedilla acute', 'c cedilla acute', 'c cedilla acute']);
  this.executeCharTest('ḕ', ['e overbar grave', 'e overbar grave', 'e overbar grave']);
  this.executeCharTest('ḗ', ['e overbar acute', 'e overbar acute', 'e overbar acute']);
  this.executeCharTest('ḝ', ['e cedilla breve', 'e cedilla breve', 'e cedilla breve']);
  this.executeCharTest('ḯ', ['i double overdot acute', 'i double overdot acute', 'i double overdot acute']);
  this.executeCharTest('ḹ', ['l underdot overbar', 'l underdot overbar', 'l underdot overbar']);
  this.executeCharTest('ṍ', ['o tilde acute', 'o tilde acute', 'o tilde acute']);
  this.executeCharTest('ṏ', ['o tilde double overdot', 'o tilde double overdot', 'o tilde double overdot']);
  this.executeCharTest('ṑ', ['o overbar grave', 'o overbar grave', 'o overbar grave']);
  this.executeCharTest('ṓ', ['o overbar acute', 'o overbar acute', 'o overbar acute']);
  this.executeCharTest('ṝ', ['r underdot overbar', 'r underdot overbar', 'r underdot overbar']);
  this.executeCharTest('ṥ', ['s acute overdot', 's acute overdot', 's acute overdot']);
  this.executeCharTest('ṧ', ['s caron overdot', 's caron overdot', 's caron overdot']);
  this.executeCharTest('ṩ', ['s underdot overdot', 's underdot overdot', 's underdot overdot']);
  this.executeCharTest('ṹ', ['u tilde acute', 'u tilde acute', 'u tilde acute']);
  this.executeCharTest('ṻ', ['u overbar double overdot', 'u overbar double overdot', 'u overbar double overdot']);
  this.executeCharTest('ấ', ['a hat acute', 'a hat acute', 'a hat acute']);
  this.executeCharTest('ầ', ['a hat grave', 'a hat grave', 'a hat grave']);
  this.executeCharTest('ẩ', ['a hat hook above', 'a hat hook above', 'a hat hook above']);
  this.executeCharTest('ẫ', ['a hat tilde', 'a hat tilde', 'a hat tilde']);
  this.executeCharTest('ậ', ['a hat underdot', 'a hat underdot', 'a hat underdot']);
  this.executeCharTest('ắ', ['a breve acute', 'a breve acute', 'a breve acute']);
  this.executeCharTest('ằ', ['a breve grave', 'a breve grave', 'a breve grave']);
  this.executeCharTest('ẳ', ['a breve hook above', 'a breve hook above', 'a breve hook above']);
  this.executeCharTest('ẵ', ['a breve tilde', 'a breve tilde', 'a breve tilde']);
  this.executeCharTest('ặ', ['a breve underdot', 'a breve underdot', 'a breve underdot']);
  this.executeCharTest('ế', ['e hat acute', 'e hat acute', 'e hat acute']);
  this.executeCharTest('ề', ['e hat grave', 'e hat grave', 'e hat grave']);
  this.executeCharTest('ể', ['e hat hook above', 'e hat hook above', 'e hat hook above']);
  this.executeCharTest('ễ', ['e hat tilde', 'e hat tilde', 'e hat tilde']);
  this.executeCharTest('ệ', ['e hat underdot', 'e hat underdot', 'e hat underdot']);
  this.executeCharTest('ố', ['o hat acute', 'o hat acute', 'o hat acute']);
  this.executeCharTest('ồ', ['o hat grave', 'o hat grave', 'o hat grave']);
  this.executeCharTest('ổ', ['o hat hook above', 'o hat hook above', 'o hat hook above']);
  this.executeCharTest('ỗ', ['o hat tilde', 'o hat tilde', 'o hat tilde']);
  this.executeCharTest('ộ', ['o hat underdot', 'o hat underdot', 'o hat underdot']);
  this.executeCharTest('ớ', ['o acute prime', 'o acute prime', 'o acute prime']);
  this.executeCharTest('ờ', ['o grave prime', 'o grave prime', 'o grave prime']);
  this.executeCharTest('ở', ['o hook above prime', 'o hook above prime', 'o hook above prime']);
  this.executeCharTest('ỡ', ['o tilde prime', 'o tilde prime', 'o tilde prime']);
  this.executeCharTest('ợ', ['o underdot prime', 'o underdot prime', 'o underdot prime']);
  this.executeCharTest('ứ', ['u acute prime', 'u acute prime', 'u acute prime']);
  this.executeCharTest('ừ', ['u grave prime', 'u grave prime', 'u grave prime']);
  this.executeCharTest('ử', ['u hook above prime', 'u hook above prime', 'u hook above prime']);
  this.executeCharTest('ữ', ['u tilde prime', 'u tilde prime', 'u tilde prime']);
  this.executeCharTest('ự', ['u underdot prime', 'u underdot prime', 'u underdot prime']);
  this.executeCharTest('a', ['a', 'a', 'a']);
  this.executeCharTest('b', ['b', 'b', 'b']);
  this.executeCharTest('c', ['c', 'c', 'c']);
  this.executeCharTest('d', ['d', 'd', 'd']);
  this.executeCharTest('e', ['e', 'e', 'e']);
  this.executeCharTest('f', ['f', 'f', 'f']);
  this.executeCharTest('g', ['g', 'g', 'g']);
  this.executeCharTest('h', ['h', 'h', 'h']);
  this.executeCharTest('i', ['i', 'i', 'i']);
  this.executeCharTest('j', ['j', 'j', 'j']);
  this.executeCharTest('k', ['k', 'k', 'k']);
  this.executeCharTest('l', ['l', 'l', 'l']);
  this.executeCharTest('m', ['m', 'm', 'm']);
  this.executeCharTest('n', ['n', 'n', 'n']);
  this.executeCharTest('o', ['o', 'o', 'o']);
  this.executeCharTest('p', ['p', 'p', 'p']);
  this.executeCharTest('q', ['q', 'q', 'q']);
  this.executeCharTest('r', ['r', 'r', 'r']);
  this.executeCharTest('s', ['s', 's', 's']);
  this.executeCharTest('t', ['t', 't', 't']);
  this.executeCharTest('u', ['u', 'u', 'u']);
  this.executeCharTest('v', ['v', 'v', 'v']);
  this.executeCharTest('w', ['w', 'w', 'w']);
  this.executeCharTest('x', ['x', 'x', 'x']);
  this.executeCharTest('y', ['y', 'y', 'y']);
  this.executeCharTest('z', ['z', 'z', 'z']);
  this.executeCharTest('ａ', ['a', 'a', 'a']);
  this.executeCharTest('ｂ', ['b', 'b', 'b']);
  this.executeCharTest('ｃ', ['c', 'c', 'c']);
  this.executeCharTest('ｄ', ['d', 'd', 'd']);
  this.executeCharTest('ｅ', ['e', 'e', 'e']);
  this.executeCharTest('ｆ', ['f', 'f', 'f']);
  this.executeCharTest('ｇ', ['g', 'g', 'g']);
  this.executeCharTest('ｈ', ['h', 'h', 'h']);
  this.executeCharTest('ｉ', ['i', 'i', 'i']);
  this.executeCharTest('ｊ', ['j', 'j', 'j']);
  this.executeCharTest('ｋ', ['k', 'k', 'k']);
  this.executeCharTest('ｌ', ['l', 'l', 'l']);
  this.executeCharTest('ｍ', ['m', 'm', 'm']);
  this.executeCharTest('ｎ', ['n', 'n', 'n']);
  this.executeCharTest('ｏ', ['o', 'o', 'o']);
  this.executeCharTest('ｐ', ['p', 'p', 'p']);
  this.executeCharTest('ｑ', ['q', 'q', 'q']);
  this.executeCharTest('ｒ', ['r', 'r', 'r']);
  this.executeCharTest('ｓ', ['s', 's', 's']);
  this.executeCharTest('ｔ', ['t', 't', 't']);
  this.executeCharTest('ｕ', ['u', 'u', 'u']);
  this.executeCharTest('ｖ', ['v', 'v', 'v']);
  this.executeCharTest('ｗ', ['w', 'w', 'w']);
  this.executeCharTest('ｘ', ['x', 'x', 'x']);
  this.executeCharTest('ｙ', ['y', 'y', 'y']);
  this.executeCharTest('ｚ', ['z', 'z', 'z']);
  this.executeCharTest('ø', ['o with stroke', 'o with stroke', 'o with stroke']);
  this.executeCharTest('đ', ['d with stroke', 'd with stroke', 'd with stroke']);
  this.executeCharTest('ħ', ['h with stroke', 'h with stroke', 'h with stroke']);
  this.executeCharTest('ł', ['l with stroke', 'l with stroke', 'l with stroke']);
  this.executeCharTest('ŧ', ['t with stroke', 't with stroke', 't with stroke']);
  this.executeCharTest('ƀ', ['b with stroke', 'b with stroke', 'b with stroke']);
  this.executeCharTest('ƛ', ['lambda with stroke', 'lambda with stroke', 'lambda with stroke']);
  this.executeCharTest('ƶ', ['z with stroke', 'z with stroke', 'z with stroke']);
  this.executeCharTest('ƾ', ['latin letter inverted glottal stop with stroke', 'latin letter inverted glottal stop with stroke', 'latin letter inverted glottal stop with stroke']);
  this.executeCharTest('ǥ', ['g with stroke', 'g with stroke', 'g with stroke']);
  this.executeCharTest('ǿ', ['o with stroke and acute', 'o with stroke and acute', 'o with stroke and acute']);
  this.executeCharTest('ȼ', ['c with stroke', 'c with stroke', 'c with stroke']);
  this.executeCharTest('ɇ', ['e with stroke', 'e with stroke', 'e with stroke']);
  this.executeCharTest('ɉ', ['j with stroke', 'j with stroke', 'j with stroke']);
  this.executeCharTest('ɍ', ['r with stroke', 'r with stroke', 'r with stroke']);
  this.executeCharTest('ɏ', ['y with stroke', 'y with stroke', 'y with stroke']);
  this.executeCharTest('ɟ', ['dotless j with stroke', 'dotless j with stroke', 'dotless j with stroke']);
  this.executeCharTest('ɨ', ['i with stroke', 'i with stroke', 'i with stroke']);
  this.executeCharTest('ʄ', ['dotless j with stroke and hook', 'dotless j with stroke and hook', 'dotless j with stroke and hook']);
  this.executeCharTest('ʡ', ['latin letter glottal stop with stroke', 'latin letter glottal stop with stroke', 'latin letter glottal stop with stroke']);
  this.executeCharTest('ʢ', ['latin letter reversed glottal stop with stroke', 'latin letter reversed glottal stop with stroke', 'latin letter reversed glottal stop with stroke']);
  this.executeCharTest('ᴓ', ['sideways o with stroke', 'sideways o with stroke', 'sideways o with stroke']);
  this.executeCharTest('ᵼ', ['iota with stroke', 'iota with stroke', 'iota with stroke']);
  this.executeCharTest('ᵽ', ['p with stroke', 'p with stroke', 'p with stroke']);
  this.executeCharTest('ᵿ', ['upsilon with stroke', 'upsilon with stroke', 'upsilon with stroke']);
  this.executeCharTest('ẜ', ['long s with diagonal stroke', 'long s with diagonal stroke', 'long s with diagonal stroke']);
  this.executeCharTest('ẝ', ['long s with high stroke', 'long s with high stroke', 'long s with high stroke']);
  this.executeCharTest('ƍ', ['turned delta', 'turned delta', 'turned delta']);
  this.executeCharTest('ẛ', ['long s with dot above', 'long s with dot above', 'long s with dot above']);
  this.executeCharTest('ẟ', ['delta', 'delta', 'delta']);
  this.executeCharTest('ĸ', ['kra', 'kra', 'kra']);
  this.executeCharTest('ſ', ['long s', 'long s', 'long s']);
  this.executeCharTest('ƃ', ['b with topbar', 'b with topbar', 'b with topbar']);
  this.executeCharTest('ƅ', ['tone six', 'tone six', 'tone six']);
  this.executeCharTest('ƈ', ['c with hook', 'c with hook', 'c with hook']);
  this.executeCharTest('ƌ', ['d with topbar', 'd with topbar', 'd with topbar']);
  this.executeCharTest('ƒ', ['f with hook', 'f with hook', 'f with hook']);
  this.executeCharTest('ƕ', ['hv', 'hv', 'hv']);
  this.executeCharTest('ƙ', ['k with hook', 'k with hook', 'k with hook']);
  this.executeCharTest('ƚ', ['l with bar', 'l with bar', 'l with bar']);
  this.executeCharTest('ƞ', ['n with long right leg', 'n with long right leg', 'n with long right leg']);
  this.executeCharTest('ơ', ['o with horn', 'o with horn', 'o with horn']);
  this.executeCharTest('ƣ', ['oi', 'oi', 'oi']);
  this.executeCharTest('ƥ', ['p with hook', 'p with hook', 'p with hook']);
  this.executeCharTest('ƨ', ['tone two', 'tone two', 'tone two']);
  this.executeCharTest('ƪ', ['latin letter reversed esh loop', 'latin letter reversed esh loop', 'latin letter reversed esh loop']);
  this.executeCharTest('ƫ', ['t with palatal hook', 't with palatal hook', 't with palatal hook']);
  this.executeCharTest('ƭ', ['t with hook', 't with hook', 't with hook']);
  this.executeCharTest('ư', ['u with horn', 'u with horn', 'u with horn']);
  this.executeCharTest('ƴ', ['y with hook', 'y with hook', 'y with hook']);
  this.executeCharTest('ƹ', ['ezh reversed', 'ezh reversed', 'ezh reversed']);
  this.executeCharTest('ƺ', ['ezh with tail', 'ezh with tail', 'ezh with tail']);
  this.executeCharTest('ƽ', ['tone five', 'tone five', 'tone five']);
  this.executeCharTest('ƿ', ['latin letter wynn', 'latin letter wynn', 'latin letter wynn']);
  this.executeCharTest('ǆ', ['dz with caron', 'dz with caron', 'dz with caron']);
  this.executeCharTest('ǉ', ['lj', 'lj', 'lj']);
  this.executeCharTest('ǌ', ['nj', 'nj', 'nj']);
  this.executeCharTest('ǣ', ['ae with macron', 'ae with macron', 'ae with macron']);
  this.executeCharTest('ǯ', ['ezh with caron', 'ezh with caron', 'ezh with caron']);
  this.executeCharTest('ǳ', ['dz', 'dz', 'dz']);
  this.executeCharTest('ȝ', ['yogh', 'yogh', 'yogh']);
  this.executeCharTest('ɮ', ['lezh', 'lezh', 'lezh']);
  this.executeCharTest('ʒ', ['ezh', 'ezh', 'ezh']);
  this.executeCharTest('ʓ', ['ezh with curl', 'ezh with curl', 'ezh with curl']);
  this.executeCharTest('ʤ', ['dezh digraph', 'dezh digraph', 'dezh digraph']);
  this.executeCharTest('ǝ', ['turned e', 'turned e', 'turned e']);
  this.executeCharTest('ǽ', ['ae with acute', 'ae with acute', 'ae with acute']);
  this.executeCharTest('ȡ', ['d with curl', 'd with curl', 'd with curl']);
  this.executeCharTest('ȣ', ['ou', 'ou', 'ou']);
  this.executeCharTest('ȥ', ['z with hook', 'z with hook', 'z with hook']);
  this.executeCharTest('ȴ', ['l with curl', 'l with curl', 'l with curl']);
  this.executeCharTest('ȵ', ['n with curl', 'n with curl', 'n with curl']);
  this.executeCharTest('ȶ', ['t with curl', 't with curl', 't with curl']);
  this.executeCharTest('ȸ', ['db digraph', 'db digraph', 'db digraph']);
  this.executeCharTest('ȹ', ['qp digraph', 'qp digraph', 'qp digraph']);
  this.executeCharTest('ȿ', ['s with swash tail', 's with swash tail', 's with swash tail']);
  this.executeCharTest('ɀ', ['z with swash tail', 'z with swash tail', 'z with swash tail']);
  this.executeCharTest('ɂ', ['glottal stop', 'glottal stop', 'glottal stop']);
  this.executeCharTest('ɋ', ['q with hook tail', 'q with hook tail', 'q with hook tail']);
  this.executeCharTest('ɐ', ['turned a', 'turned a', 'turned a']);
  this.executeCharTest('ɑ', ['alpha', 'alpha', 'alpha']);
  this.executeCharTest('ɒ', ['turned alpha', 'turned alpha', 'turned alpha']);
  this.executeCharTest('ɓ', ['b with hook', 'b with hook', 'b with hook']);
  this.executeCharTest('ɔ', ['open o', 'open o', 'open o']);
  this.executeCharTest('ɕ', ['c with curl', 'c with curl', 'c with curl']);
  this.executeCharTest('ɖ', ['d with tail', 'd with tail', 'd with tail']);
  this.executeCharTest('ɗ', ['d with hook', 'd with hook', 'd with hook']);
  this.executeCharTest('ɘ', ['reversed e', 'reversed e', 'reversed e']);
  this.executeCharTest('ə', ['schwa', 'schwa', 'schwa']);
  this.executeCharTest('ɚ', ['schwa with hook', 'schwa with hook', 'schwa with hook']);
  this.executeCharTest('ɛ', ['open e', 'open e', 'open e']);
  this.executeCharTest('ɜ', ['reversed open e', 'reversed open e', 'reversed open e']);
  this.executeCharTest('ɝ', ['reversed open e with hook', 'reversed open e with hook', 'reversed open e with hook']);
  this.executeCharTest('ɞ', ['closed reversed open e', 'closed reversed open e', 'closed reversed open e']);
  this.executeCharTest('ɠ', ['g with hook', 'g with hook', 'g with hook']);
  this.executeCharTest('ɡ', ['script g', 'script g', 'script g']);
  this.executeCharTest('ɣ', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('ɤ', ['rams horn', 'rams horn', 'rams horn']);
  this.executeCharTest('ɥ', ['turned h', 'turned h', 'turned h']);
  this.executeCharTest('ɦ', ['h with hook', 'h with hook', 'h with hook']);
  this.executeCharTest('ɧ', ['heng with hook', 'heng with hook', 'heng with hook']);
  this.executeCharTest('ɩ', ['iota', 'iota', 'iota']);
  this.executeCharTest('ɫ', ['l with middle tilde', 'l with middle tilde', 'l with middle tilde']);
  this.executeCharTest('ɬ', ['l with belt', 'l with belt', 'l with belt']);
  this.executeCharTest('ɭ', ['l with retroflex hook', 'l with retroflex hook', 'l with retroflex hook']);
  this.executeCharTest('ɯ', ['turned m', 'turned m', 'turned m']);
  this.executeCharTest('ɰ', ['turned m with long leg', 'turned m with long leg', 'turned m with long leg']);
  this.executeCharTest('ɱ', ['m with hook', 'm with hook', 'm with hook']);
  this.executeCharTest('ɲ', ['n with left hook', 'n with left hook', 'n with left hook']);
  this.executeCharTest('ɳ', ['n with retroflex hook', 'n with retroflex hook', 'n with retroflex hook']);
  this.executeCharTest('ɵ', ['barred o', 'barred o', 'barred o']);
  this.executeCharTest('ɷ', ['closed omega', 'closed omega', 'closed omega']);
  this.executeCharTest('ɸ', ['phi', 'phi', 'phi']);
  this.executeCharTest('ɹ', ['turned r', 'turned r', 'turned r']);
  this.executeCharTest('ɺ', ['turned r with long leg', 'turned r with long leg', 'turned r with long leg']);
  this.executeCharTest('ɻ', ['turned r with hook', 'turned r with hook', 'turned r with hook']);
  this.executeCharTest('ɼ', ['r with long leg', 'r with long leg', 'r with long leg']);
  this.executeCharTest('ɽ', ['r with tail', 'r with tail', 'r with tail']);
  this.executeCharTest('ɾ', ['r with fishhook', 'r with fishhook', 'r with fishhook']);
  this.executeCharTest('ɿ', ['reversed r with fishhook', 'reversed r with fishhook', 'reversed r with fishhook']);
  this.executeCharTest('ʂ', ['s with hook', 's with hook', 's with hook']);
  this.executeCharTest('ʃ', ['esh', 'esh', 'esh']);
  this.executeCharTest('ʅ', ['squat reversed esh', 'squat reversed esh', 'squat reversed esh']);
  this.executeCharTest('ʆ', ['esh with curl', 'esh with curl', 'esh with curl']);
  this.executeCharTest('ʇ', ['turned t', 'turned t', 'turned t']);
  this.executeCharTest('ʈ', ['t with retroflex hook', 't with retroflex hook', 't with retroflex hook']);
  this.executeCharTest('ʉ', ['u bar', 'u bar', 'u bar']);
  this.executeCharTest('ʊ', ['upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest('ʋ', ['v with hook', 'v with hook', 'v with hook']);
  this.executeCharTest('ʌ', ['turned v', 'turned v', 'turned v']);
  this.executeCharTest('ʍ', ['turned w', 'turned w', 'turned w']);
  this.executeCharTest('ʎ', ['turned y', 'turned y', 'turned y']);
  this.executeCharTest('ʐ', ['z with retroflex hook', 'z with retroflex hook', 'z with retroflex hook']);
  this.executeCharTest('ʑ', ['z with curl', 'z with curl', 'z with curl']);
  this.executeCharTest('ʕ', ['latin letter pharyngeal voiced fricative', 'latin letter pharyngeal voiced fricative', 'latin letter pharyngeal voiced fricative']);
  this.executeCharTest('ʖ', ['latin letter inverted glottal stop', 'latin letter inverted glottal stop', 'latin letter inverted glottal stop']);
  this.executeCharTest('ʗ', ['latin letter stretched c', 'latin letter stretched c', 'latin letter stretched c']);
  this.executeCharTest('ʘ', ['latin letter bilabial click', 'latin letter bilabial click', 'latin letter bilabial click']);
  this.executeCharTest('ʚ', ['closed open e', 'closed open e', 'closed open e']);
  this.executeCharTest('ʞ', ['turned k', 'turned k', 'turned k']);
  this.executeCharTest('ʠ', ['q with hook', 'q with hook', 'q with hook']);
  this.executeCharTest('ʣ', ['dz digraph', 'dz digraph', 'dz digraph']);
  this.executeCharTest('ʥ', ['dz digraph with curl', 'dz digraph with curl', 'dz digraph with curl']);
  this.executeCharTest('ʦ', ['ts digraph', 'ts digraph', 'ts digraph']);
  this.executeCharTest('ʧ', ['tesh digraph', 'tesh digraph', 'tesh digraph']);
  this.executeCharTest('ʨ', ['tc digraph with curl', 'tc digraph with curl', 'tc digraph with curl']);
  this.executeCharTest('ʩ', ['feng digraph', 'feng digraph', 'feng digraph']);
  this.executeCharTest('ʪ', ['ls digraph', 'ls digraph', 'ls digraph']);
  this.executeCharTest('ʫ', ['lz digraph', 'lz digraph', 'lz digraph']);
  this.executeCharTest('ʬ', ['latin letter bilabial percussive', 'latin letter bilabial percussive', 'latin letter bilabial percussive']);
  this.executeCharTest('ʭ', ['latin letter bidental percussive', 'latin letter bidental percussive', 'latin letter bidental percussive']);
  this.executeCharTest('ʮ', ['turned h with fishhook', 'turned h with fishhook', 'turned h with fishhook']);
  this.executeCharTest('ʯ', ['turned h with fishhook and tail', 'turned h with fishhook and tail', 'turned h with fishhook and tail']);
  this.executeCharTest('ᴂ', ['turned ae', 'turned ae', 'turned ae']);
  this.executeCharTest('ᴈ', ['turned open e', 'turned open e', 'turned open e']);
  this.executeCharTest('ᴉ', ['turned i', 'turned i', 'turned i']);
  this.executeCharTest('ᴑ', ['sideways o', 'sideways o', 'sideways o']);
  this.executeCharTest('ᴒ', ['sideways open o', 'sideways open o', 'sideways open o']);
  this.executeCharTest('ᴔ', ['turned oe', 'turned oe', 'turned oe']);
  this.executeCharTest('ᴖ', ['top half o', 'top half o', 'top half o']);
  this.executeCharTest('ᴗ', ['bottom half o', 'bottom half o', 'bottom half o']);
  this.executeCharTest('ᴝ', ['sideways u', 'sideways u', 'sideways u']);
  this.executeCharTest('ᴞ', ['sideways diaeresized u', 'sideways diaeresized u', 'sideways diaeresized u']);
  this.executeCharTest('ᴟ', ['sideways turned m', 'sideways turned m', 'sideways turned m']);
  this.executeCharTest('ᴤ', ['latin letter voiced laryngeal spirant', 'latin letter voiced laryngeal spirant', 'latin letter voiced laryngeal spirant']);
  this.executeCharTest('ᴥ', ['latin letter ain', 'latin letter ain', 'latin letter ain']);
  this.executeCharTest('ᵫ', ['ue', 'ue', 'ue']);
  this.executeCharTest('ᵬ', ['b with middle tilde', 'b with middle tilde', 'b with middle tilde']);
  this.executeCharTest('ᵭ', ['d with middle tilde', 'd with middle tilde', 'd with middle tilde']);
  this.executeCharTest('ᵮ', ['f with middle tilde', 'f with middle tilde', 'f with middle tilde']);
  this.executeCharTest('ᵯ', ['m with middle tilde', 'm with middle tilde', 'm with middle tilde']);
  this.executeCharTest('ᵰ', ['n with middle tilde', 'n with middle tilde', 'n with middle tilde']);
  this.executeCharTest('ᵱ', ['p with middle tilde', 'p with middle tilde', 'p with middle tilde']);
  this.executeCharTest('ᵲ', ['r with middle tilde', 'r with middle tilde', 'r with middle tilde']);
  this.executeCharTest('ᵳ', ['r with fishhook and middle tilde', 'r with fishhook and middle tilde', 'r with fishhook and middle tilde']);
  this.executeCharTest('ᵴ', ['s with middle tilde', 's with middle tilde', 's with middle tilde']);
  this.executeCharTest('ᵵ', ['t with middle tilde', 't with middle tilde', 't with middle tilde']);
  this.executeCharTest('ᵶ', ['z with middle tilde', 'z with middle tilde', 'z with middle tilde']);
  this.executeCharTest('ᵷ', ['turned g', 'turned g', 'turned g']);
  this.executeCharTest('ᵹ', ['insular g', 'insular g', 'insular g']);
  this.executeCharTest('ᵺ', ['th with strikethrough', 'th with strikethrough', 'th with strikethrough']);
  this.executeCharTest('ᶀ', ['b with palatal hook', 'b with palatal hook', 'b with palatal hook']);
  this.executeCharTest('ᶁ', ['d with palatal hook', 'd with palatal hook', 'd with palatal hook']);
  this.executeCharTest('ᶂ', ['f with palatal hook', 'f with palatal hook', 'f with palatal hook']);
  this.executeCharTest('ᶃ', ['g with palatal hook', 'g with palatal hook', 'g with palatal hook']);
  this.executeCharTest('ᶄ', ['k with palatal hook', 'k with palatal hook', 'k with palatal hook']);
  this.executeCharTest('ᶅ', ['l with palatal hook', 'l with palatal hook', 'l with palatal hook']);
  this.executeCharTest('ᶆ', ['m with palatal hook', 'm with palatal hook', 'm with palatal hook']);
  this.executeCharTest('ᶇ', ['n with palatal hook', 'n with palatal hook', 'n with palatal hook']);
  this.executeCharTest('ᶈ', ['p with palatal hook', 'p with palatal hook', 'p with palatal hook']);
  this.executeCharTest('ᶉ', ['r with palatal hook', 'r with palatal hook', 'r with palatal hook']);
  this.executeCharTest('ᶊ', ['s with palatal hook', 's with palatal hook', 's with palatal hook']);
  this.executeCharTest('ᶋ', ['esh with palatal hook', 'esh with palatal hook', 'esh with palatal hook']);
  this.executeCharTest('ᶌ', ['v with palatal hook', 'v with palatal hook', 'v with palatal hook']);
  this.executeCharTest('ᶍ', ['x with palatal hook', 'x with palatal hook', 'x with palatal hook']);
  this.executeCharTest('ᶎ', ['z with palatal hook', 'z with palatal hook', 'z with palatal hook']);
  this.executeCharTest('ᶏ', ['a with retroflex hook', 'a with retroflex hook', 'a with retroflex hook']);
  this.executeCharTest('ᶐ', ['alpha with retroflex hook', 'alpha with retroflex hook', 'alpha with retroflex hook']);
  this.executeCharTest('ᶑ', ['d with hook and tail', 'd with hook and tail', 'd with hook and tail']);
  this.executeCharTest('ᶒ', ['e with retroflex hook', 'e with retroflex hook', 'e with retroflex hook']);
  this.executeCharTest('ᶓ', ['open e with retroflex hook', 'open e with retroflex hook', 'open e with retroflex hook']);
  this.executeCharTest('ᶔ', ['reversed open e with retroflex hook', 'reversed open e with retroflex hook', 'reversed open e with retroflex hook']);
  this.executeCharTest('ᶕ', ['schwa with retroflex hook', 'schwa with retroflex hook', 'schwa with retroflex hook']);
  this.executeCharTest('ᶖ', ['i with retroflex hook', 'i with retroflex hook', 'i with retroflex hook']);
  this.executeCharTest('ᶗ', ['open o with retroflex hook', 'open o with retroflex hook', 'open o with retroflex hook']);
  this.executeCharTest('ᶘ', ['esh with retroflex hook', 'esh with retroflex hook', 'esh with retroflex hook']);
  this.executeCharTest('ᶙ', ['u with retroflex hook', 'u with retroflex hook', 'u with retroflex hook']);
  this.executeCharTest('ᶚ', ['ezh with retroflex hook', 'ezh with retroflex hook', 'ezh with retroflex hook']);
  this.executeCharTest('ŉ', ['n preceded by apostrophe', 'n preceded by apostrophe', 'n preceded by apostrophe']);
  this.executeCharTest('ŋ', ['eng', 'eng', 'eng']);
  this.executeCharTest('à', ['modifying above a with grave', 'mod above a with grave', 'mod above a with grave']);
  this.executeCharTest('á', ['modifying above a with acute', 'mod above a with acute', 'mod above a with acute']);
  this.executeCharTest('â', ['modifying above a with caret', 'mod above a with caret', 'mod above a with caret']);
  this.executeCharTest('ã', ['a overtilde', 'a overtilde', 'a overtilde']);
  this.executeCharTest('ä', ['modifying above a with double dot', 'mod above a with double dot', 'mod above a with double dot']);
  this.executeCharTest('å', ['modifying above a with ring', 'mod above a with ring', 'mod above a with ring']);
  this.executeCharTest('ç', ['modifying above c with cedilla', 'mod above c with cedilla', 'mod above c with cedilla']);
  this.executeCharTest('è', ['modifying above e with grave', 'mod above e with grave', 'mod above e with grave']);
  this.executeCharTest('é', ['modifying above e with acute', 'mod above e with acute', 'mod above e with acute']);
  this.executeCharTest('ê', ['modifying above e with caret', 'mod above e with caret', 'mod above e with caret']);
  this.executeCharTest('ë', ['modifying above e with double dot', 'mod above e with double dot', 'mod above e with double dot']);
  this.executeCharTest('ì', ['modifying above i with grave', 'mod above i with grave', 'mod above i with grave']);
  this.executeCharTest('í', ['modifying above i with acute', 'mod above i with acute', 'mod above i with acute']);
  this.executeCharTest('î', ['modifying above i with caret', 'mod above i with caret', 'mod above i with caret']);
  this.executeCharTest('ï', ['modifying above i with double dot', 'mod above i with double dot', 'mod above i with double dot']);
  this.executeCharTest('ñ', ['n overtilde', 'n overtilde', 'n overtilde']);
  this.executeCharTest('ò', ['modifying above o with grave', 'mod above o with grave', 'mod above o with grave']);
  this.executeCharTest('ó', ['modifying above o with acute', 'mod above o with acute', 'mod above o with acute']);
  this.executeCharTest('ô', ['modifying above o with caret', 'mod above o with caret', 'mod above o with caret']);
  this.executeCharTest('õ', ['o overtilde', 'o overtilde', 'o overtilde']);
  this.executeCharTest('ö', ['modifying above o with double dot', 'mod above o with double dot', 'mod above o with double dot']);
  this.executeCharTest('ù', ['modifying above u with grave', 'mod above u with grave', 'mod above u with grave']);
  this.executeCharTest('ú', ['modifying above u with acute', 'mod above u with acute', 'mod above u with acute']);
  this.executeCharTest('û', ['modifying above u with caret', 'mod above u with caret', 'mod above u with caret']);
  this.executeCharTest('ü', ['modifying above u with double dot', 'mod above u with double dot', 'mod above u with double dot']);
  this.executeCharTest('ý', ['modifying above y with acute', 'mod above y with acute', 'mod above y with acute']);
  this.executeCharTest('ÿ', ['modifying above y with double dot', 'mod above y with double dot', 'mod above y with double dot']);
  this.executeCharTest('ā', ['a overbar', 'a overbar', 'a overbar']);
  this.executeCharTest('ă', ['modifying above a with breve', 'mod above a with breve', 'mod above a with breve']);
  this.executeCharTest('ą', ['modifying above a with ogonek', 'mod above a with ogonek', 'mod above a with ogonek']);
  this.executeCharTest('ć', ['modifying above c with acute', 'mod above c with acute', 'mod above c with acute']);
  this.executeCharTest('ĉ', ['modifying above c with caret', 'mod above c with caret', 'mod above c with caret']);
  this.executeCharTest('ċ', ['modifying above c with dot', 'mod above c with dot', 'mod above c with dot']);
  this.executeCharTest('č', ['modifying above c with caron', 'mod above c with caron', 'mod above c with caron']);
  this.executeCharTest('ď', ['modifying above d with caron', 'mod above d with caron', 'mod above d with caron']);
  this.executeCharTest('ē', ['e overbar', 'e overbar', 'e overbar']);
  this.executeCharTest('ĕ', ['modifying above e with breve', 'mod above e with breve', 'mod above e with breve']);
  this.executeCharTest('ė', ['modifying above e with dot', 'mod above e with dot', 'mod above e with dot']);
  this.executeCharTest('ę', ['modifying above e with ogonek', 'mod above e with ogonek', 'mod above e with ogonek']);
  this.executeCharTest('ě', ['modifying above e with caron', 'mod above e with caron', 'mod above e with caron']);
  this.executeCharTest('ĝ', ['modifying above g with caret', 'mod above g with caret', 'mod above g with caret']);
  this.executeCharTest('ğ', ['modifying above g with breve', 'mod above g with breve', 'mod above g with breve']);
  this.executeCharTest('ġ', ['modifying above g with dot', 'mod above g with dot', 'mod above g with dot']);
  this.executeCharTest('ģ', ['modifying above g with cedilla', 'mod above g with cedilla', 'mod above g with cedilla']);
  this.executeCharTest('ĥ', ['modifying above h with caret', 'mod above h with caret', 'mod above h with caret']);
  this.executeCharTest('ĩ', ['i overtilde', 'i overtilde', 'i overtilde']);
  this.executeCharTest('ī', ['i overbar', 'i overbar', 'i overbar']);
  this.executeCharTest('ĭ', ['modifying above i with breve', 'mod above i with breve', 'mod above i with breve']);
  this.executeCharTest('į', ['modifying above i with ogonek', 'mod above i with ogonek', 'mod above i with ogonek']);
  this.executeCharTest('ı', ['modifying above dotless i', 'mod above dotless i', 'mod above dotless i']);
  this.executeCharTest('ĵ', ['modifying above j with caret', 'mod above j with caret', 'mod above j with caret']);
  this.executeCharTest('ķ', ['modifying above k with cedilla', 'mod above k with cedilla', 'mod above k with cedilla']);
  this.executeCharTest('ĺ', ['modifying above l with acute', 'mod above l with acute', 'mod above l with acute']);
  this.executeCharTest('ļ', ['modifying above l with cedilla', 'mod above l with cedilla', 'mod above l with cedilla']);
  this.executeCharTest('ľ', ['modifying above l with caron', 'mod above l with caron', 'mod above l with caron']);
  this.executeCharTest('ŀ', ['modifying above l with middle dot', 'mod above l with middle dot', 'mod above l with middle dot']);
  this.executeCharTest('ń', ['modifying above n with acute', 'mod above n with acute', 'mod above n with acute']);
  this.executeCharTest('ņ', ['modifying above n with cedilla', 'mod above n with cedilla', 'mod above n with cedilla']);
  this.executeCharTest('ň', ['modifying above n with caron', 'mod above n with caron', 'mod above n with caron']);
  this.executeCharTest('ō', ['o overbar', 'o overbar', 'o overbar']);
  this.executeCharTest('ŏ', ['modifying above o with breve', 'mod above o with breve', 'mod above o with breve']);
  this.executeCharTest('ő', ['modifying above o with double acute', 'mod above o with double acute', 'mod above o with double acute']);
  this.executeCharTest('ŕ', ['modifying above r with acute', 'mod above r with acute', 'mod above r with acute']);
  this.executeCharTest('ŗ', ['modifying above r with cedilla', 'mod above r with cedilla', 'mod above r with cedilla']);
  this.executeCharTest('ř', ['modifying above r with caron', 'mod above r with caron', 'mod above r with caron']);
  this.executeCharTest('ś', ['modifying above s with acute', 'mod above s with acute', 'mod above s with acute']);
  this.executeCharTest('ŝ', ['modifying above s with caret', 'mod above s with caret', 'mod above s with caret']);
  this.executeCharTest('ş', ['modifying above s with cedilla', 'mod above s with cedilla', 'mod above s with cedilla']);
  this.executeCharTest('š', ['modifying above s with caron', 'mod above s with caron', 'mod above s with caron']);
  this.executeCharTest('ţ', ['modifying above t with cedilla', 'mod above t with cedilla', 'mod above t with cedilla']);
  this.executeCharTest('ť', ['modifying above t with caron', 'mod above t with caron', 'mod above t with caron']);
  this.executeCharTest('ũ', ['u overtilde', 'u overtilde', 'u overtilde']);
  this.executeCharTest('ū', ['u overbar', 'u overbar', 'u overbar']);
  this.executeCharTest('ŭ', ['modifying above u with breve', 'mod above u with breve', 'mod above u with breve']);
  this.executeCharTest('ů', ['modifying above u with ring', 'mod above u with ring', 'mod above u with ring']);
  this.executeCharTest('ű', ['modifying above u with double acute', 'mod above u with double acute', 'mod above u with double acute']);
  this.executeCharTest('ų', ['modifying above u with ogonek', 'mod above u with ogonek', 'mod above u with ogonek']);
  this.executeCharTest('ŵ', ['modifying above w with caret', 'mod above w with caret', 'mod above w with caret']);
  this.executeCharTest('ŷ', ['modifying above y with caret', 'mod above y with caret', 'mod above y with caret']);
  this.executeCharTest('ź', ['modifying above z with acute', 'mod above z with acute', 'mod above z with acute']);
  this.executeCharTest('ż', ['modifying above z with dot', 'mod above z with dot', 'mod above z with dot']);
  this.executeCharTest('ž', ['modifying above z with caron', 'mod above z with caron', 'mod above z with caron']);
  this.executeCharTest('ǎ', ['modifying above a with caron', 'mod above a with caron', 'mod above a with caron']);
  this.executeCharTest('ǐ', ['modifying above i with caron', 'mod above i with caron', 'mod above i with caron']);
  this.executeCharTest('ǒ', ['modifying above o with caron', 'mod above o with caron', 'mod above o with caron']);
  this.executeCharTest('ǔ', ['modifying above u with caron', 'mod above u with caron', 'mod above u with caron']);
  this.executeCharTest('ǧ', ['modifying above g with caron', 'mod above g with caron', 'mod above g with caron']);
  this.executeCharTest('ǩ', ['modifying above k with caron', 'mod above k with caron', 'mod above k with caron']);
  this.executeCharTest('ǫ', ['modifying above o with ogonek', 'mod above o with ogonek', 'mod above o with ogonek']);
  this.executeCharTest('ǰ', ['modifying above j with caron', 'mod above j with caron', 'mod above j with caron']);
  this.executeCharTest('ǵ', ['modifying above g with acute', 'mod above g with acute', 'mod above g with acute']);
  this.executeCharTest('ǹ', ['modifying above n with grave', 'mod above n with grave', 'mod above n with grave']);
  this.executeCharTest('ȁ', ['modifying above a with double grave', 'mod above a with double grave', 'mod above a with double grave']);
  this.executeCharTest('ȃ', ['modifying above a with inverted breve', 'mod above a with inverted breve', 'mod above a with inverted breve']);
  this.executeCharTest('ȅ', ['modifying above e with double grave', 'mod above e with double grave', 'mod above e with double grave']);
  this.executeCharTest('ȇ', ['modifying above e with inverted breve', 'mod above e with inverted breve', 'mod above e with inverted breve']);
  this.executeCharTest('ȉ', ['modifying above i with double grave', 'mod above i with double grave', 'mod above i with double grave']);
  this.executeCharTest('ȋ', ['modifying above i with inverted breve', 'mod above i with inverted breve', 'mod above i with inverted breve']);
  this.executeCharTest('ȍ', ['modifying above o with double grave', 'mod above o with double grave', 'mod above o with double grave']);
  this.executeCharTest('ȏ', ['modifying above o with inverted breve', 'mod above o with inverted breve', 'mod above o with inverted breve']);
  this.executeCharTest('ȑ', ['modifying above r with double grave', 'mod above r with double grave', 'mod above r with double grave']);
  this.executeCharTest('ȓ', ['modifying above r with inverted breve', 'mod above r with inverted breve', 'mod above r with inverted breve']);
  this.executeCharTest('ȕ', ['modifying above u with double grave', 'mod above u with double grave', 'mod above u with double grave']);
  this.executeCharTest('ȗ', ['modifying above u with inverted breve', 'mod above u with inverted breve', 'mod above u with inverted breve']);
  this.executeCharTest('ș', ['modifying below s with comma below', 'mod below s with comma below', 'mod below s with comma below']);
  this.executeCharTest('ț', ['modifying below t with comma below', 'mod below t with comma below', 'mod below t with comma below']);
  this.executeCharTest('ȟ', ['modifying above h with caron', 'mod above h with caron', 'mod above h with caron']);
  this.executeCharTest('ȧ', ['modifying above a with dot', 'mod above a with dot', 'mod above a with dot']);
  this.executeCharTest('ȩ', ['modifying above e with cedilla', 'mod above e with cedilla', 'mod above e with cedilla']);
  this.executeCharTest('ȯ', ['modifying above o with dot', 'mod above o with dot', 'mod above o with dot']);
  this.executeCharTest('ȳ', ['y overbar', 'y overbar', 'y overbar']);
  this.executeCharTest('ȷ', ['modifying above dotless j', 'mod above dotless j', 'mod above dotless j']);
  this.executeCharTest('ḁ', ['modifying below a with ring below', 'mod below a with ring below', 'mod below a with ring below']);
  this.executeCharTest('ḃ', ['modifying above b with dot', 'mod above b with dot', 'mod above b with dot']);
  this.executeCharTest('ḅ', ['modifying below b with dot', 'mod below b with dot', 'mod below b with dot']);
  this.executeCharTest('ḇ', ['b underbar', 'b underbar', 'b underbar']);
  this.executeCharTest('ḋ', ['modifying above d with dot', 'mod above d with dot', 'mod above d with dot']);
  this.executeCharTest('ḍ', ['modifying below d with dot', 'mod below d with dot', 'mod below d with dot']);
  this.executeCharTest('ḏ', ['d underbar', 'd underbar', 'd underbar']);
  this.executeCharTest('ḑ', ['modifying above d with cedilla', 'mod above d with cedilla', 'mod above d with cedilla']);
  this.executeCharTest('ḓ', ['modifying below d with caret', 'mod below d with caret', 'mod below d with caret']);
  this.executeCharTest('ḙ', ['modifying below e with caret', 'mod below e with caret', 'mod below e with caret']);
  this.executeCharTest('ḛ', ['e undertilde', 'e undertilde', 'e undertilde']);
  this.executeCharTest('ḟ', ['modifying above f with dot', 'mod above f with dot', 'mod above f with dot']);
  this.executeCharTest('ḡ', ['g overbar', 'g overbar', 'g overbar']);
  this.executeCharTest('ḣ', ['modifying above h with dot', 'mod above h with dot', 'mod above h with dot']);
  this.executeCharTest('ḥ', ['modifying below h with dot', 'mod below h with dot', 'mod below h with dot']);
  this.executeCharTest('ḧ', ['modifying above h with double dot', 'mod above h with double dot', 'mod above h with double dot']);
  this.executeCharTest('ḩ', ['modifying above h with cedilla', 'mod above h with cedilla', 'mod above h with cedilla']);
  this.executeCharTest('ḫ', ['modifying below h with breve below', 'mod below h with breve below', 'mod below h with breve below']);
  this.executeCharTest('ḭ', ['i undertilde', 'i undertilde', 'i undertilde']);
  this.executeCharTest('ḱ', ['modifying above k with acute', 'mod above k with acute', 'mod above k with acute']);
  this.executeCharTest('ḳ', ['modifying below k with dot', 'mod below k with dot', 'mod below k with dot']);
  this.executeCharTest('ḵ', ['k underbar', 'k underbar', 'k underbar']);
  this.executeCharTest('ḷ', ['modifying below l with dot', 'mod below l with dot', 'mod below l with dot']);
  this.executeCharTest('ḻ', ['l underbar', 'l underbar', 'l underbar']);
  this.executeCharTest('ḽ', ['modifying below l with caret', 'mod below l with caret', 'mod below l with caret']);
  this.executeCharTest('ḿ', ['modifying above m with acute', 'mod above m with acute', 'mod above m with acute']);
  this.executeCharTest('ṁ', ['modifying above m with dot', 'mod above m with dot', 'mod above m with dot']);
  this.executeCharTest('ṃ', ['modifying below m with dot', 'mod below m with dot', 'mod below m with dot']);
  this.executeCharTest('ṅ', ['modifying above n with dot', 'mod above n with dot', 'mod above n with dot']);
  this.executeCharTest('ṇ', ['modifying below n with dot', 'mod below n with dot', 'mod below n with dot']);
  this.executeCharTest('ṉ', ['n underbar', 'n underbar', 'n underbar']);
  this.executeCharTest('ṋ', ['modifying below n with caret', 'mod below n with caret', 'mod below n with caret']);
  this.executeCharTest('ṕ', ['modifying above p with acute', 'mod above p with acute', 'mod above p with acute']);
  this.executeCharTest('ṗ', ['modifying above p with dot', 'mod above p with dot', 'mod above p with dot']);
  this.executeCharTest('ṙ', ['modifying above r with dot', 'mod above r with dot', 'mod above r with dot']);
  this.executeCharTest('ṛ', ['modifying below r with dot', 'mod below r with dot', 'mod below r with dot']);
  this.executeCharTest('ṟ', ['r underbar', 'r underbar', 'r underbar']);
  this.executeCharTest('ṡ', ['modifying above s with dot', 'mod above s with dot', 'mod above s with dot']);
  this.executeCharTest('ṣ', ['modifying below s with dot', 'mod below s with dot', 'mod below s with dot']);
  this.executeCharTest('ṫ', ['modifying above t with dot', 'mod above t with dot', 'mod above t with dot']);
  this.executeCharTest('ṭ', ['modifying below t with dot', 'mod below t with dot', 'mod below t with dot']);
  this.executeCharTest('ṯ', ['t underbar', 't underbar', 't underbar']);
  this.executeCharTest('ṱ', ['modifying below t with caret', 'mod below t with caret', 'mod below t with caret']);
  this.executeCharTest('ṳ', ['modifying below u with double dot', 'mod below u with double dot', 'mod below u with double dot']);
  this.executeCharTest('ṵ', ['u undertilde', 'u undertilde', 'u undertilde']);
  this.executeCharTest('ṷ', ['modifying below u with caret', 'mod below u with caret', 'mod below u with caret']);
  this.executeCharTest('ṽ', ['v overtilde', 'v overtilde', 'v overtilde']);
  this.executeCharTest('ṿ', ['modifying below v with dot', 'mod below v with dot', 'mod below v with dot']);
  this.executeCharTest('ẁ', ['modifying above w with grave', 'mod above w with grave', 'mod above w with grave']);
  this.executeCharTest('ẃ', ['modifying above w with acute', 'mod above w with acute', 'mod above w with acute']);
  this.executeCharTest('ẅ', ['modifying above w with double dot', 'mod above w with double dot', 'mod above w with double dot']);
  this.executeCharTest('ẇ', ['modifying above w with dot', 'mod above w with dot', 'mod above w with dot']);
  this.executeCharTest('ẉ', ['modifying below w with dot', 'mod below w with dot', 'mod below w with dot']);
  this.executeCharTest('ẋ', ['modifying above x with dot', 'mod above x with dot', 'mod above x with dot']);
  this.executeCharTest('ẍ', ['modifying above x with double dot', 'mod above x with double dot', 'mod above x with double dot']);
  this.executeCharTest('ẏ', ['modifying above y with dot', 'mod above y with dot', 'mod above y with dot']);
  this.executeCharTest('ẑ', ['modifying above z with caret', 'mod above z with caret', 'mod above z with caret']);
  this.executeCharTest('ẓ', ['modifying below z with dot', 'mod below z with dot', 'mod below z with dot']);
  this.executeCharTest('ẕ', ['z underbar', 'z underbar', 'z underbar']);
  this.executeCharTest('ẖ', ['h underbar', 'h underbar', 'h underbar']);
  this.executeCharTest('ẗ', ['modifying above t with double dot', 'mod above t with double dot', 'mod above t with double dot']);
  this.executeCharTest('ẘ', ['modifying above w with ring', 'mod above w with ring', 'mod above w with ring']);
  this.executeCharTest('ẙ', ['modifying above y with ring', 'mod above y with ring', 'mod above y with ring']);
  this.executeCharTest('ẚ', ['modifying above a with right half ring', 'mod above a with right half ring', 'mod above a with right half ring']);
  this.executeCharTest('ạ', ['modifying below a with dot', 'mod below a with dot', 'mod below a with dot']);
  this.executeCharTest('ả', ['modifying above a with hook', 'mod above a with hook', 'mod above a with hook']);
  this.executeCharTest('ẹ', ['modifying below e with dot', 'mod below e with dot', 'mod below e with dot']);
  this.executeCharTest('ẻ', ['modifying above e with hook', 'mod above e with hook', 'mod above e with hook']);
  this.executeCharTest('ẽ', ['e overtilde', 'e overtilde', 'e overtilde']);
  this.executeCharTest('ỉ', ['modifying above i with hook', 'mod above i with hook', 'mod above i with hook']);
  this.executeCharTest('ị', ['modifying below i with dot', 'mod below i with dot', 'mod below i with dot']);
  this.executeCharTest('ọ', ['modifying below o with dot', 'mod below o with dot', 'mod below o with dot']);
  this.executeCharTest('ỏ', ['modifying above o with hook', 'mod above o with hook', 'mod above o with hook']);
  this.executeCharTest('ụ', ['modifying below u with dot', 'mod below u with dot', 'mod below u with dot']);
  this.executeCharTest('ủ', ['modifying above u with hook', 'mod above u with hook', 'mod above u with hook']);
  this.executeCharTest('ỳ', ['modifying above y with grave', 'mod above y with grave', 'mod above y with grave']);
  this.executeCharTest('ỵ', ['modifying below y with dot', 'mod below y with dot', 'mod below y with dot']);
  this.executeCharTest('ỷ', ['modifying above y with hook', 'mod above y with hook', 'mod above y with hook']);
  this.executeCharTest('ỹ', ['y overtilde', 'y overtilde', 'y overtilde']);
  this.executeCharTest('ͣ', ['combining a', 'combining a', 'combining a']);
  this.executeCharTest('ͤ', ['combining e', 'combining e', 'combining e']);
  this.executeCharTest('ͥ', ['combining i', 'combining i', 'combining i']);
  this.executeCharTest('ͦ', ['combining o', 'combining o', 'combining o']);
  this.executeCharTest('ͧ', ['combining u', 'combining u', 'combining u']);
  this.executeCharTest('ͨ', ['combining c', 'combining c', 'combining c']);
  this.executeCharTest('ͩ', ['combining d', 'combining d', 'combining d']);
  this.executeCharTest('ͪ', ['combining h', 'combining h', 'combining h']);
  this.executeCharTest('ͫ', ['combining m', 'combining m', 'combining m']);
  this.executeCharTest('ͬ', ['combining r', 'combining r', 'combining r']);
  this.executeCharTest('ͭ', ['combining t', 'combining t', 'combining t']);
  this.executeCharTest('ͮ', ['combining v', 'combining v', 'combining v']);
  this.executeCharTest('ͯ', ['combining x', 'combining x', 'combining x']);
  this.executeCharTest('ᵢ', ['subscript i', 'subscript i', 'subscript i']);
  this.executeCharTest('ᵣ', ['subscript r', 'subscript r', 'subscript r']);
  this.executeCharTest('ᵤ', ['subscript u', 'subscript u', 'subscript u']);
  this.executeCharTest('ᵥ', ['subscript v', 'subscript v', 'subscript v']);
  this.executeCharTest('᷊', ['combining r below', 'combining r below', 'combining r below']);
  this.executeCharTest('ᷓ', ['combining flattened open a above', 'combining flattened open a above', 'combining flattened open a above']);
  this.executeCharTest('ᷔ', ['combining ae', 'combining ae', 'combining ae']);
  this.executeCharTest('ᷕ', ['combining ao', 'combining ao', 'combining ao']);
  this.executeCharTest('ᷖ', ['combining av', 'combining av', 'combining av']);
  this.executeCharTest('ᷗ', ['combining c cedilla', 'combining c cedilla', 'combining c cedilla']);
  this.executeCharTest('ᷘ', ['combining insular d', 'combining insular d', 'combining insular d']);
  this.executeCharTest('ᷙ', ['combining eth', 'combining eth', 'combining eth']);
  this.executeCharTest('ᷚ', ['combining g', 'combining g', 'combining g']);
  this.executeCharTest('ᷛ', ['combining small upper G', 'combining small upper G', 'combining small upper G']);
  this.executeCharTest('ᷜ', ['combining k', 'combining k', 'combining k']);
  this.executeCharTest('ᷝ', ['combining l', 'combining l', 'combining l']);
  this.executeCharTest('ᷞ', ['combining small upper L', 'combining small upper L', 'combining small upper L']);
  this.executeCharTest('ᷟ', ['combining small upper M', 'combining small upper M', 'combining small upper M']);
  this.executeCharTest('ᷠ', ['combining n', 'combining n', 'combining n']);
  this.executeCharTest('ᷡ', ['combining small upper N', 'combining small upper N', 'combining small upper N']);
  this.executeCharTest('ᷢ', ['combining small upper R', 'combining small upper R', 'combining small upper R']);
  this.executeCharTest('ᷣ', ['combining r rotunda', 'combining r rotunda', 'combining r rotunda']);
  this.executeCharTest('ᷤ', ['combining s', 'combining s', 'combining s']);
  this.executeCharTest('ᷥ', ['combining long s', 'combining long s', 'combining long s']);
  this.executeCharTest('ᷦ', ['combining z', 'combining z', 'combining z']);
  this.executeCharTest('ⁱ', ['superscript i', 'superscript i', 'superscript i']);
  this.executeCharTest('ⁿ', ['superscript n', 'superscript n', 'superscript n']);
  this.executeCharTest('ₐ', ['subscript a', 'subscript a', 'subscript a']);
  this.executeCharTest('ₑ', ['subscript e', 'subscript e', 'subscript e']);
  this.executeCharTest('ₒ', ['subscript o', 'subscript o', 'subscript o']);
  this.executeCharTest('ₓ', ['subscript x', 'subscript x', 'subscript x']);
  this.executeCharTest('ₔ', ['subscript schwa', 'subscript schwa', 'subscript schwa']);
  this.executeCharTest('ₕ', ['subscript h', 'subscript h', 'subscript h']);
  this.executeCharTest('ₖ', ['subscript k', 'subscript k', 'subscript k']);
  this.executeCharTest('ₗ', ['subscript l', 'subscript l', 'subscript l']);
  this.executeCharTest('ₘ', ['subscript m', 'subscript m', 'subscript m']);
  this.executeCharTest('ₙ', ['subscript n', 'subscript n', 'subscript n']);
  this.executeCharTest('ₚ', ['subscript p', 'subscript p', 'subscript p']);
  this.executeCharTest('ₛ', ['subscript s', 'subscript s', 'subscript s']);
  this.executeCharTest('ₜ', ['subscript t', 'subscript t', 'subscript t']);
  this.executeCharTest('⒜', ['parenthesized a', 'parenthesized a', 'parenthesized a']);
  this.executeCharTest('⒝', ['parenthesized b', 'parenthesized b', 'parenthesized b']);
  this.executeCharTest('⒞', ['parenthesized c', 'parenthesized c', 'parenthesized c']);
  this.executeCharTest('⒟', ['parenthesized d', 'parenthesized d', 'parenthesized d']);
  this.executeCharTest('⒠', ['parenthesized e', 'parenthesized e', 'parenthesized e']);
  this.executeCharTest('⒡', ['parenthesized f', 'parenthesized f', 'parenthesized f']);
  this.executeCharTest('⒢', ['parenthesized g', 'parenthesized g', 'parenthesized g']);
  this.executeCharTest('⒣', ['parenthesized h', 'parenthesized h', 'parenthesized h']);
  this.executeCharTest('⒤', ['parenthesized i', 'parenthesized i', 'parenthesized i']);
  this.executeCharTest('⒥', ['parenthesized j', 'parenthesized j', 'parenthesized j']);
  this.executeCharTest('⒦', ['parenthesized k', 'parenthesized k', 'parenthesized k']);
  this.executeCharTest('⒧', ['parenthesized l', 'parenthesized l', 'parenthesized l']);
  this.executeCharTest('⒨', ['parenthesized m', 'parenthesized m', 'parenthesized m']);
  this.executeCharTest('⒩', ['parenthesized n', 'parenthesized n', 'parenthesized n']);
  this.executeCharTest('⒪', ['parenthesized o', 'parenthesized o', 'parenthesized o']);
  this.executeCharTest('⒫', ['parenthesized p', 'parenthesized p', 'parenthesized p']);
  this.executeCharTest('⒬', ['parenthesized q', 'parenthesized q', 'parenthesized q']);
  this.executeCharTest('⒭', ['parenthesized r', 'parenthesized r', 'parenthesized r']);
  this.executeCharTest('⒮', ['parenthesized s', 'parenthesized s', 'parenthesized s']);
  this.executeCharTest('⒯', ['parenthesized t', 'parenthesized t', 'parenthesized t']);
  this.executeCharTest('⒰', ['parenthesized u', 'parenthesized u', 'parenthesized u']);
  this.executeCharTest('⒱', ['parenthesized v', 'parenthesized v', 'parenthesized v']);
  this.executeCharTest('⒲', ['parenthesized w', 'parenthesized w', 'parenthesized w']);
  this.executeCharTest('⒳', ['parenthesized x', 'parenthesized x', 'parenthesized x']);
  this.executeCharTest('⒴', ['parenthesized y', 'parenthesized y', 'parenthesized y']);
  this.executeCharTest('⒵', ['parenthesized z', 'parenthesized z', 'parenthesized z']);
  this.executeCharTest('Ⓐ', ['circled upper A', 'circled upper A', 'circled upper A']);
  this.executeCharTest('Ⓑ', ['circled upper B', 'circled upper B', 'circled upper B']);
  this.executeCharTest('Ⓒ', ['circled upper C', 'circled upper C', 'circled upper C']);
  this.executeCharTest('Ⓓ', ['circled upper D', 'circled upper D', 'circled upper D']);
  this.executeCharTest('Ⓔ', ['circled upper E', 'circled upper E', 'circled upper E']);
  this.executeCharTest('Ⓕ', ['circled upper F', 'circled upper F', 'circled upper F']);
  this.executeCharTest('Ⓖ', ['circled upper G', 'circled upper G', 'circled upper G']);
  this.executeCharTest('Ⓗ', ['circled upper H', 'circled upper H', 'circled upper H']);
  this.executeCharTest('Ⓘ', ['circled upper I', 'circled upper I', 'circled upper I']);
  this.executeCharTest('Ⓙ', ['circled upper J', 'circled upper J', 'circled upper J']);
  this.executeCharTest('Ⓚ', ['circled upper K', 'circled upper K', 'circled upper K']);
  this.executeCharTest('Ⓛ', ['circled upper L', 'circled upper L', 'circled upper L']);
  this.executeCharTest('Ⓜ', ['circled upper M', 'circled upper M', 'circled upper M']);
  this.executeCharTest('Ⓝ', ['circled upper N', 'circled upper N', 'circled upper N']);
  this.executeCharTest('Ⓞ', ['circled upper O', 'circled upper O', 'circled upper O']);
  this.executeCharTest('Ⓟ', ['circled upper P', 'circled upper P', 'circled upper P']);
  this.executeCharTest('Ⓠ', ['circled upper Q', 'circled upper Q', 'circled upper Q']);
  this.executeCharTest('Ⓡ', ['circled upper R', 'circled upper R', 'circled upper R']);
  this.executeCharTest('Ⓢ', ['circled upper S', 'circled upper S', 'circled upper S']);
  this.executeCharTest('Ⓣ', ['circled upper T', 'circled upper T', 'circled upper T']);
  this.executeCharTest('Ⓤ', ['circled upper U', 'circled upper U', 'circled upper U']);
  this.executeCharTest('Ⓥ', ['circled upper V', 'circled upper V', 'circled upper V']);
  this.executeCharTest('Ⓦ', ['circled upper W', 'circled upper W', 'circled upper W']);
  this.executeCharTest('Ⓧ', ['circled upper X', 'circled upper X', 'circled upper X']);
  this.executeCharTest('Ⓨ', ['circled upper Y', 'circled upper Y', 'circled upper Y']);
  this.executeCharTest('Ⓩ', ['circled upper Z', 'circled upper Z', 'circled upper Z']);
  this.executeCharTest('ⓐ', ['circled a', 'circled a', 'circled a']);
  this.executeCharTest('ⓑ', ['circled b', 'circled b', 'circled b']);
  this.executeCharTest('ⓒ', ['circled c', 'circled c', 'circled c']);
  this.executeCharTest('ⓓ', ['circled d', 'circled d', 'circled d']);
  this.executeCharTest('ⓔ', ['circled e', 'circled e', 'circled e']);
  this.executeCharTest('ⓕ', ['circled f', 'circled f', 'circled f']);
  this.executeCharTest('ⓖ', ['circled g', 'circled g', 'circled g']);
  this.executeCharTest('ⓗ', ['circled h', 'circled h', 'circled h']);
  this.executeCharTest('ⓘ', ['circled i', 'circled i', 'circled i']);
  this.executeCharTest('ⓙ', ['circled j', 'circled j', 'circled j']);
  this.executeCharTest('ⓚ', ['circled k', 'circled k', 'circled k']);
  this.executeCharTest('ⓛ', ['circled l', 'circled l', 'circled l']);
  this.executeCharTest('ⓜ', ['circled m', 'circled m', 'circled m']);
  this.executeCharTest('ⓝ', ['circled n', 'circled n', 'circled n']);
  this.executeCharTest('ⓞ', ['circled o', 'circled o', 'circled o']);
  this.executeCharTest('ⓟ', ['circled p', 'circled p', 'circled p']);
  this.executeCharTest('ⓠ', ['circled q', 'circled q', 'circled q']);
  this.executeCharTest('ⓡ', ['circled r', 'circled r', 'circled r']);
  this.executeCharTest('ⓢ', ['circled s', 'circled s', 'circled s']);
  this.executeCharTest('ⓣ', ['circled t', 'circled t', 'circled t']);
  this.executeCharTest('ⓤ', ['circled u', 'circled u', 'circled u']);
  this.executeCharTest('ⓥ', ['circled v', 'circled v', 'circled v']);
  this.executeCharTest('ⓦ', ['circled w', 'circled w', 'circled w']);
  this.executeCharTest('ⓧ', ['circled x', 'circled x', 'circled x']);
  this.executeCharTest('ⓨ', ['circled y', 'circled y', 'circled y']);
  this.executeCharTest('ⓩ', ['circled z', 'circled z', 'circled z']);
  this.executeCharTest('ⱼ', ['subscript j', 'subscript j', 'subscript j']);
  this.executeCharTest('🄐', ['parenthesized upper A', 'parenthesized upper A', 'parenthesized upper A']);
  this.executeCharTest('🄑', ['parenthesized upper B', 'parenthesized upper B', 'parenthesized upper B']);
  this.executeCharTest('🄒', ['parenthesized upper C', 'parenthesized upper C', 'parenthesized upper C']);
  this.executeCharTest('🄓', ['parenthesized upper D', 'parenthesized upper D', 'parenthesized upper D']);
  this.executeCharTest('🄔', ['parenthesized upper E', 'parenthesized upper E', 'parenthesized upper E']);
  this.executeCharTest('🄕', ['parenthesized upper F', 'parenthesized upper F', 'parenthesized upper F']);
  this.executeCharTest('🄖', ['parenthesized upper G', 'parenthesized upper G', 'parenthesized upper G']);
  this.executeCharTest('🄗', ['parenthesized upper H', 'parenthesized upper H', 'parenthesized upper H']);
  this.executeCharTest('🄘', ['parenthesized upper I', 'parenthesized upper I', 'parenthesized upper I']);
  this.executeCharTest('🄙', ['parenthesized upper J', 'parenthesized upper J', 'parenthesized upper J']);
  this.executeCharTest('🄚', ['parenthesized upper K', 'parenthesized upper K', 'parenthesized upper K']);
  this.executeCharTest('🄛', ['parenthesized upper L', 'parenthesized upper L', 'parenthesized upper L']);
  this.executeCharTest('🄜', ['parenthesized upper M', 'parenthesized upper M', 'parenthesized upper M']);
  this.executeCharTest('🄝', ['parenthesized upper N', 'parenthesized upper N', 'parenthesized upper N']);
  this.executeCharTest('🄞', ['parenthesized upper O', 'parenthesized upper O', 'parenthesized upper O']);
  this.executeCharTest('🄟', ['parenthesized upper P', 'parenthesized upper P', 'parenthesized upper P']);
  this.executeCharTest('🄠', ['parenthesized upper Q', 'parenthesized upper Q', 'parenthesized upper Q']);
  this.executeCharTest('🄡', ['parenthesized upper R', 'parenthesized upper R', 'parenthesized upper R']);
  this.executeCharTest('🄢', ['parenthesized upper S', 'parenthesized upper S', 'parenthesized upper S']);
  this.executeCharTest('🄣', ['parenthesized upper T', 'parenthesized upper T', 'parenthesized upper T']);
  this.executeCharTest('🄤', ['parenthesized upper U', 'parenthesized upper U', 'parenthesized upper U']);
  this.executeCharTest('🄥', ['parenthesized upper V', 'parenthesized upper V', 'parenthesized upper V']);
  this.executeCharTest('🄦', ['parenthesized upper W', 'parenthesized upper W', 'parenthesized upper W']);
  this.executeCharTest('🄧', ['parenthesized upper X', 'parenthesized upper X', 'parenthesized upper X']);
  this.executeCharTest('🄨', ['parenthesized upper Y', 'parenthesized upper Y', 'parenthesized upper Y']);
  this.executeCharTest('🄩', ['parenthesized upper Z', 'parenthesized upper Z', 'parenthesized upper Z']);
  this.executeCharTest('🄪', ['tortoise shell bracketed upper S', 'tortoise shell bracketed upper S', 'tortoise shell bracketed upper S']);
  this.executeCharTest('🄫', ['circled italic upper C', 'circled italic upper C', 'circled italic upper C']);
  this.executeCharTest('🄬', ['circled italic upper R', 'circled italic upper R', 'circled italic upper R']);
  this.executeCharTest('🄰', ['squared upper A', 'squared upper A', 'squared upper A']);
  this.executeCharTest('🄱', ['squared upper B', 'squared upper B', 'squared upper B']);
  this.executeCharTest('🄲', ['squared upper C', 'squared upper C', 'squared upper C']);
  this.executeCharTest('🄳', ['squared upper D', 'squared upper D', 'squared upper D']);
  this.executeCharTest('🄴', ['squared upper E', 'squared upper E', 'squared upper E']);
  this.executeCharTest('🄵', ['squared upper F', 'squared upper F', 'squared upper F']);
  this.executeCharTest('🄶', ['squared upper G', 'squared upper G', 'squared upper G']);
  this.executeCharTest('🄷', ['squared upper H', 'squared upper H', 'squared upper H']);
  this.executeCharTest('🄸', ['squared upper I', 'squared upper I', 'squared upper I']);
  this.executeCharTest('🄹', ['squared upper J', 'squared upper J', 'squared upper J']);
  this.executeCharTest('🄺', ['squared upper K', 'squared upper K', 'squared upper K']);
  this.executeCharTest('🄻', ['squared upper L', 'squared upper L', 'squared upper L']);
  this.executeCharTest('🄼', ['squared upper M', 'squared upper M', 'squared upper M']);
  this.executeCharTest('🄽', ['squared upper N', 'squared upper N', 'squared upper N']);
  this.executeCharTest('🄾', ['squared upper O', 'squared upper O', 'squared upper O']);
  this.executeCharTest('🄿', ['squared upper P', 'squared upper P', 'squared upper P']);
  this.executeCharTest('🅀', ['squared upper Q', 'squared upper Q', 'squared upper Q']);
  this.executeCharTest('🅁', ['squared upper R', 'squared upper R', 'squared upper R']);
  this.executeCharTest('🅂', ['squared upper S', 'squared upper S', 'squared upper S']);
  this.executeCharTest('🅃', ['squared upper T', 'squared upper T', 'squared upper T']);
  this.executeCharTest('🅄', ['squared upper U', 'squared upper U', 'squared upper U']);
  this.executeCharTest('🅅', ['squared upper V', 'squared upper V', 'squared upper V']);
  this.executeCharTest('🅆', ['squared upper W', 'squared upper W', 'squared upper W']);
  this.executeCharTest('🅇', ['squared upper X', 'squared upper X', 'squared upper X']);
  this.executeCharTest('🅈', ['squared upper Y', 'squared upper Y', 'squared upper Y']);
  this.executeCharTest('🅉', ['squared upper Z', 'squared upper Z', 'squared upper Z']);
  this.executeCharTest('🅐', ['black circled upper A', 'black circled upper A', 'black circled upper A']);
  this.executeCharTest('🅑', ['black circled upper B', 'black circled upper B', 'black circled upper B']);
  this.executeCharTest('🅒', ['black circled upper C', 'black circled upper C', 'black circled upper C']);
  this.executeCharTest('🅓', ['black circled upper D', 'black circled upper D', 'black circled upper D']);
  this.executeCharTest('🅔', ['black circled upper E', 'black circled upper E', 'black circled upper E']);
  this.executeCharTest('🅕', ['black circled upper F', 'black circled upper F', 'black circled upper F']);
  this.executeCharTest('🅖', ['black circled upper G', 'black circled upper G', 'black circled upper G']);
  this.executeCharTest('🅗', ['black circled upper H', 'black circled upper H', 'black circled upper H']);
  this.executeCharTest('🅘', ['black circled upper I', 'black circled upper I', 'black circled upper I']);
  this.executeCharTest('🅙', ['black circled upper J', 'black circled upper J', 'black circled upper J']);
  this.executeCharTest('🅚', ['black circled upper K', 'black circled upper K', 'black circled upper K']);
  this.executeCharTest('🅛', ['black circled upper L', 'black circled upper L', 'black circled upper L']);
  this.executeCharTest('🅜', ['black circled upper M', 'black circled upper M', 'black circled upper M']);
  this.executeCharTest('🅝', ['black circled upper N', 'black circled upper N', 'black circled upper N']);
  this.executeCharTest('🅞', ['black circled upper O', 'black circled upper O', 'black circled upper O']);
  this.executeCharTest('🅟', ['black circled upper P', 'black circled upper P', 'black circled upper P']);
  this.executeCharTest('🅠', ['black circled upper Q', 'black circled upper Q', 'black circled upper Q']);
  this.executeCharTest('🅡', ['black circled upper R', 'black circled upper R', 'black circled upper R']);
  this.executeCharTest('🅢', ['black circled upper S', 'black circled upper S', 'black circled upper S']);
  this.executeCharTest('🅣', ['black circled upper T', 'black circled upper T', 'black circled upper T']);
  this.executeCharTest('🅤', ['black circled upper U', 'black circled upper U', 'black circled upper U']);
  this.executeCharTest('🅥', ['black circled upper V', 'black circled upper V', 'black circled upper V']);
  this.executeCharTest('🅦', ['black circled upper W', 'black circled upper W', 'black circled upper W']);
  this.executeCharTest('🅧', ['black circled upper X', 'black circled upper X', 'black circled upper X']);
  this.executeCharTest('🅨', ['black circled upper Y', 'black circled upper Y', 'black circled upper Y']);
  this.executeCharTest('🅩', ['black circled upper Z', 'black circled upper Z', 'black circled upper Z']);
  this.executeCharTest('🅰', ['black squared upper A', 'black squared upper A', 'black squared upper A']);
  this.executeCharTest('🅱', ['black squared upper B', 'black squared upper B', 'black squared upper B']);
  this.executeCharTest('🅲', ['black squared upper C', 'black squared upper C', 'black squared upper C']);
  this.executeCharTest('🅳', ['black squared upper D', 'black squared upper D', 'black squared upper D']);
  this.executeCharTest('🅴', ['black squared upper E', 'black squared upper E', 'black squared upper E']);
  this.executeCharTest('🅵', ['black squared upper F', 'black squared upper F', 'black squared upper F']);
  this.executeCharTest('🅶', ['black squared upper G', 'black squared upper G', 'black squared upper G']);
  this.executeCharTest('🅷', ['black squared upper H', 'black squared upper H', 'black squared upper H']);
  this.executeCharTest('🅸', ['black squared upper I', 'black squared upper I', 'black squared upper I']);
  this.executeCharTest('🅹', ['black squared upper J', 'black squared upper J', 'black squared upper J']);
  this.executeCharTest('🅺', ['black squared upper K', 'black squared upper K', 'black squared upper K']);
  this.executeCharTest('🅻', ['black squared upper L', 'black squared upper L', 'black squared upper L']);
  this.executeCharTest('🅼', ['black squared upper M', 'black squared upper M', 'black squared upper M']);
  this.executeCharTest('🅽', ['black squared upper N', 'black squared upper N', 'black squared upper N']);
  this.executeCharTest('🅾', ['black squared upper O', 'black squared upper O', 'black squared upper O']);
  this.executeCharTest('🅿', ['black squared upper P', 'black squared upper P', 'black squared upper P']);
  this.executeCharTest('🆀', ['black squared upper Q', 'black squared upper Q', 'black squared upper Q']);
  this.executeCharTest('🆁', ['black squared upper R', 'black squared upper R', 'black squared upper R']);
  this.executeCharTest('🆂', ['black squared upper S', 'black squared upper S', 'black squared upper S']);
  this.executeCharTest('🆃', ['black squared upper T', 'black squared upper T', 'black squared upper T']);
  this.executeCharTest('🆄', ['black squared upper U', 'black squared upper U', 'black squared upper U']);
  this.executeCharTest('🆅', ['black squared upper V', 'black squared upper V', 'black squared upper V']);
  this.executeCharTest('🆆', ['black squared upper W', 'black squared upper W', 'black squared upper W']);
  this.executeCharTest('🆇', ['black squared upper X', 'black squared upper X', 'black squared upper X']);
  this.executeCharTest('🆈', ['black squared upper Y', 'black squared upper Y', 'black squared upper Y']);
  this.executeCharTest('🆉', ['black squared upper Z', 'black squared upper Z', 'black squared upper Z']);
  this.executeCharTest('🆊', ['crossed negative squared upper P', 'crossed negative squared upper P', 'crossed negative squared upper P']);
  this.executeCharTest('Ǖ', ['upper U double overdot overbar', 'upper U double overdot overbar', 'upper U double overdot overbar']);
  this.executeCharTest('Ǘ', ['upper U double overdot acute', 'upper U double overdot acute', 'upper U double overdot acute']);
  this.executeCharTest('Ǚ', ['upper U double overdot caron', 'upper U double overdot caron', 'upper U double overdot caron']);
  this.executeCharTest('Ǜ', ['upper U double overdot grave', 'upper U double overdot grave', 'upper U double overdot grave']);
  this.executeCharTest('Ǟ', ['upper A double overdot overbar', 'upper A double overdot overbar', 'upper A double overdot overbar']);
  this.executeCharTest('Ǡ', ['upper A overdot overbar', 'upper A overdot overbar', 'upper A overdot overbar']);
  this.executeCharTest('Ǭ', ['upper O ogonek overbar', 'upper O ogonek overbar', 'upper O ogonek overbar']);
  this.executeCharTest('Ǻ', ['upper A ring acute', 'upper A ring acute', 'upper A ring acute']);
  this.executeCharTest('Ȫ', ['upper O double overdot overbar', 'upper O double overdot overbar', 'upper O double overdot overbar']);
  this.executeCharTest('Ȭ', ['upper O tilde overbar', 'upper O tilde overbar', 'upper O tilde overbar']);
  this.executeCharTest('Ȱ', ['upper O overdot overbar', 'upper O overdot overbar', 'upper O overdot overbar']);
  this.executeCharTest('Ḉ', ['upper C cedilla acute', 'upper C cedilla acute', 'upper C cedilla acute']);
  this.executeCharTest('Ḕ', ['upper E overbar grave', 'upper E overbar grave', 'upper E overbar grave']);
  this.executeCharTest('Ḗ', ['upper E overbar acute', 'upper E overbar acute', 'upper E overbar acute']);
  this.executeCharTest('Ḝ', ['upper E cedilla breve', 'upper E cedilla breve', 'upper E cedilla breve']);
  this.executeCharTest('Ḯ', ['upper I double overdot acute', 'upper I double overdot acute', 'upper I double overdot acute']);
  this.executeCharTest('Ḹ', ['upper L underdot overbar', 'upper L underdot overbar', 'upper L underdot overbar']);
  this.executeCharTest('Ṍ', ['upper O tilde acute', 'upper O tilde acute', 'upper O tilde acute']);
  this.executeCharTest('Ṏ', ['upper O tilde double overdot', 'upper O tilde double overdot', 'upper O tilde double overdot']);
  this.executeCharTest('Ṑ', ['upper O overbar grave', 'upper O overbar grave', 'upper O overbar grave']);
  this.executeCharTest('Ṓ', ['upper O overbar acute', 'upper O overbar acute', 'upper O overbar acute']);
  this.executeCharTest('Ṝ', ['upper R overbar underdot', 'upper R overbar underdot', 'upper R overbar underdot']);
  this.executeCharTest('Ṥ', ['upper S acute overdot', 'upper S acute overdot', 'upper S acute overdot']);
  this.executeCharTest('Ṧ', ['upper S caron overdot', 'upper S caron overdot', 'upper S caron overdot']);
  this.executeCharTest('Ṩ', ['upper S underdot overdot', 'upper S underdot overdot', 'upper S underdot overdot']);
  this.executeCharTest('Ṹ', ['upper U tilde acute', 'upper U tilde acute', 'upper U tilde acute']);
  this.executeCharTest('Ṻ', ['upper U overbar double overdot', 'upper U overbar double overdot', 'upper U overbar double overdot']);
  this.executeCharTest('Ấ', ['upper A hat acute', 'upper A hat acute', 'upper A hat acute']);
  this.executeCharTest('Ầ', ['upper A hat grave', 'upper A hat grave', 'upper A hat grave']);
  this.executeCharTest('Ẩ', ['upper A hat hook', 'upper A hat hook', 'upper A hat hook']);
  this.executeCharTest('Ẫ', ['upper A hat tilde', 'upper A hat tilde', 'upper A hat tilde']);
  this.executeCharTest('Ậ', ['upper A hat underdot', 'upper A hat underdot', 'upper A hat underdot']);
  this.executeCharTest('Ắ', ['upper A breve acute', 'upper A breve acute', 'upper A breve acute']);
  this.executeCharTest('Ằ', ['upper A breve grave', 'upper A breve grave', 'upper A breve grave']);
  this.executeCharTest('Ẳ', ['upper A breve hook', 'upper A breve hook', 'upper A breve hook']);
  this.executeCharTest('Ẵ', ['upper A breve tilde', 'upper A breve tilde', 'upper A breve tilde']);
  this.executeCharTest('Ặ', ['upper A breve underdot', 'upper A breve underdot', 'upper A breve underdot']);
  this.executeCharTest('Ế', ['upper E hat acute', 'upper E hat acute', 'upper E hat acute']);
  this.executeCharTest('Ề', ['upper E hat grave', 'upper E hat grave', 'upper E hat grave']);
  this.executeCharTest('Ể', ['upper E hat hook', 'upper E hat hook', 'upper E hat hook']);
  this.executeCharTest('Ễ', ['upper E hat tilde', 'upper E hat tilde', 'upper E hat tilde']);
  this.executeCharTest('Ệ', ['upper E hat underdot', 'upper E hat underdot', 'upper E hat underdot']);
  this.executeCharTest('Ố', ['upper O hat acute', 'upper O hat acute', 'upper O hat acute']);
  this.executeCharTest('Ồ', ['upper O hat grave', 'upper O hat grave', 'upper O hat grave']);
  this.executeCharTest('Ổ', ['upper O hat hook', 'upper O hat hook', 'upper O hat hook']);
  this.executeCharTest('Ỗ', ['upper O hat tilde', 'upper O hat tilde', 'upper O hat tilde']);
  this.executeCharTest('Ộ', ['upper O hat underdot', 'upper O hat underdot', 'upper O hat underdot']);
  this.executeCharTest('Ớ', ['upper O acute prime', 'upper O acute prime', 'upper O acute prime']);
  this.executeCharTest('Ờ', ['upper O grave prime', 'upper O grave prime', 'upper O grave prime']);
  this.executeCharTest('Ở', ['upper O hook prime', 'upper O hook prime', 'upper O hook prime']);
  this.executeCharTest('Ỡ', ['upper O tilde prime', 'upper O tilde prime', 'upper O tilde prime']);
  this.executeCharTest('Ợ', ['upper O underdot prime', 'upper O underdot prime', 'upper O underdot prime']);
  this.executeCharTest('Ứ', ['upper U acute prime', 'upper U acute prime', 'upper U acute prime']);
  this.executeCharTest('Ừ', ['upper U grave prime', 'upper U grave prime', 'upper U grave prime']);
  this.executeCharTest('Ử', ['upper U hook prime', 'upper U hook prime', 'upper U hook prime']);
  this.executeCharTest('Ữ', ['upper U tilde prime', 'upper U tilde prime', 'upper U tilde prime']);
  this.executeCharTest('Ự', ['upper U underdot prime', 'upper U underdot prime', 'upper U underdot prime']);
  this.executeCharTest('A', ['upper A', 'upper A', 'upper A']);
  this.executeCharTest('B', ['upper B', 'upper B', 'upper B']);
  this.executeCharTest('C', ['upper C', 'upper C', 'upper C']);
  this.executeCharTest('D', ['upper D', 'upper D', 'upper D']);
  this.executeCharTest('E', ['upper E', 'upper E', 'upper E']);
  this.executeCharTest('F', ['upper F', 'upper F', 'upper F']);
  this.executeCharTest('G', ['upper G', 'upper G', 'upper G']);
  this.executeCharTest('H', ['upper H', 'upper H', 'upper H']);
  this.executeCharTest('I', ['upper I', 'upper I', 'upper I']);
  this.executeCharTest('J', ['upper J', 'upper J', 'upper J']);
  this.executeCharTest('K', ['upper K', 'upper K', 'upper K']);
  this.executeCharTest('L', ['upper L', 'upper L', 'upper L']);
  this.executeCharTest('M', ['upper M', 'upper M', 'upper M']);
  this.executeCharTest('N', ['upper N', 'upper N', 'upper N']);
  this.executeCharTest('O', ['upper O', 'upper O', 'upper O']);
  this.executeCharTest('P', ['upper P', 'upper P', 'upper P']);
  this.executeCharTest('Q', ['upper Q', 'upper Q', 'upper Q']);
  this.executeCharTest('R', ['upper R', 'upper R', 'upper R']);
  this.executeCharTest('S', ['upper S', 'upper S', 'upper S']);
  this.executeCharTest('T', ['upper T', 'upper T', 'upper T']);
  this.executeCharTest('U', ['upper U', 'upper U', 'upper U']);
  this.executeCharTest('V', ['upper V', 'upper V', 'upper V']);
  this.executeCharTest('W', ['upper W', 'upper W', 'upper W']);
  this.executeCharTest('X', ['upper X', 'upper X', 'upper X']);
  this.executeCharTest('Y', ['upper Y', 'upper Y', 'upper Y']);
  this.executeCharTest('Z', ['upper Z', 'upper Z', 'upper Z']);
  this.executeCharTest('Ａ', ['upper A', 'upper A', 'upper A']);
  this.executeCharTest('Ｂ', ['upper B', 'upper B', 'upper B']);
  this.executeCharTest('Ｃ', ['upper C', 'upper C', 'upper C']);
  this.executeCharTest('Ｄ', ['upper D', 'upper D', 'upper D']);
  this.executeCharTest('Ｅ', ['upper E', 'upper E', 'upper E']);
  this.executeCharTest('Ｆ', ['upper F', 'upper F', 'upper F']);
  this.executeCharTest('Ｇ', ['upper G', 'upper G', 'upper G']);
  this.executeCharTest('Ｈ', ['upper H', 'upper H', 'upper H']);
  this.executeCharTest('Ｉ', ['upper I', 'upper I', 'upper I']);
  this.executeCharTest('Ｊ', ['upper J', 'upper J', 'upper J']);
  this.executeCharTest('Ｋ', ['upper K', 'upper K', 'upper K']);
  this.executeCharTest('Ｌ', ['upper L', 'upper L', 'upper L']);
  this.executeCharTest('Ｍ', ['upper M', 'upper M', 'upper M']);
  this.executeCharTest('Ｎ', ['upper N', 'upper N', 'upper N']);
  this.executeCharTest('Ｏ', ['upper O', 'upper O', 'upper O']);
  this.executeCharTest('Ｐ', ['upper P', 'upper P', 'upper P']);
  this.executeCharTest('Ｑ', ['upper Q', 'upper Q', 'upper Q']);
  this.executeCharTest('Ｒ', ['upper R', 'upper R', 'upper R']);
  this.executeCharTest('Ｓ', ['upper S', 'upper S', 'upper S']);
  this.executeCharTest('Ｔ', ['upper T', 'upper T', 'upper T']);
  this.executeCharTest('Ｕ', ['upper U', 'upper U', 'upper U']);
  this.executeCharTest('Ｖ', ['upper V', 'upper V', 'upper V']);
  this.executeCharTest('Ｗ', ['upper W', 'upper W', 'upper W']);
  this.executeCharTest('Ｘ', ['upper X', 'upper X', 'upper X']);
  this.executeCharTest('Ｙ', ['upper Y', 'upper Y', 'upper Y']);
  this.executeCharTest('Ｚ', ['upper Z', 'upper Z', 'upper Z']);
  this.executeCharTest('À', ['modifying above upper A with grave', 'mod above upper A with grave', 'mod above upper A with grave']);
  this.executeCharTest('Á', ['modifying above upper A with acute', 'mod above upper A with acute', 'mod above upper A with acute']);
  this.executeCharTest('Â', ['modifying above upper A with caret', 'mod above upper A with caret', 'mod above upper A with caret']);
  this.executeCharTest('Ã', ['upper A overtilde', 'upper A overtilde', 'upper A overtilde']);
  this.executeCharTest('Ä', ['modifying above upper A with double dot', 'mod above upper A with double dot', 'mod above upper A with double dot']);
  this.executeCharTest('Å', ['modifying above upper A with ring', 'mod above upper A with ring', 'mod above upper A with ring']);
  this.executeCharTest('Ç', ['modifying above upper C with cedilla', 'mod above upper C with cedilla', 'mod above upper C with cedilla']);
  this.executeCharTest('È', ['modifying above upper E with grave', 'mod above upper E with grave', 'mod above upper E with grave']);
  this.executeCharTest('É', ['modifying above upper E with acute', 'mod above upper E with acute', 'mod above upper E with acute']);
  this.executeCharTest('Ê', ['modifying above upper E with caret', 'mod above upper E with caret', 'mod above upper E with caret']);
  this.executeCharTest('Ë', ['modifying above upper E with double dot', 'mod above upper E with double dot', 'mod above upper E with double dot']);
  this.executeCharTest('Ì', ['modifying above upper I with grave', 'mod above upper I with grave', 'mod above upper I with grave']);
  this.executeCharTest('Í', ['modifying above upper I with acute', 'mod above upper I with acute', 'mod above upper I with acute']);
  this.executeCharTest('Î', ['modifying above upper I with caret', 'mod above upper I with caret', 'mod above upper I with caret']);
  this.executeCharTest('Ï', ['modifying above upper I with double dot', 'mod above upper I with double dot', 'mod above upper I with double dot']);
  this.executeCharTest('Ñ', ['upper N overtilde', 'upper N overtilde', 'upper N overtilde']);
  this.executeCharTest('Ò', ['modifying above upper O with grave', 'mod above upper O with grave', 'mod above upper O with grave']);
  this.executeCharTest('Ó', ['modifying above upper O with acute', 'mod above upper O with acute', 'mod above upper O with acute']);
  this.executeCharTest('Ô', ['modifying above upper O with caret', 'mod above upper O with caret', 'mod above upper O with caret']);
  this.executeCharTest('Õ', ['upper O overtilde', 'upper O overtilde', 'upper O overtilde']);
  this.executeCharTest('Ö', ['modifying above upper O with double dot', 'mod above upper O with double dot', 'mod above upper O with double dot']);
  this.executeCharTest('Ù', ['modifying above upper U with grave', 'mod above upper U with grave', 'mod above upper U with grave']);
  this.executeCharTest('Ú', ['modifying above upper U with acute', 'mod above upper U with acute', 'mod above upper U with acute']);
  this.executeCharTest('Û', ['modifying above upper U with caret', 'mod above upper U with caret', 'mod above upper U with caret']);
  this.executeCharTest('Ü', ['modifying above upper U with double dot', 'mod above upper U with double dot', 'mod above upper U with double dot']);
  this.executeCharTest('Ý', ['modifying above upper Y with acute', 'mod above upper Y with acute', 'mod above upper Y with acute']);
  this.executeCharTest('Ā', ['upper A overbar', 'upper A overbar', 'upper A overbar']);
  this.executeCharTest('Ă', ['modifying above upper A with breve', 'mod above upper A with breve', 'mod above upper A with breve']);
  this.executeCharTest('Ą', ['modifying above upper A with ogonek', 'mod above upper A with ogonek', 'mod above upper A with ogonek']);
  this.executeCharTest('Ć', ['modifying above upper C with acute', 'mod above upper C with acute', 'mod above upper C with acute']);
  this.executeCharTest('Ĉ', ['modifying above upper C with caret', 'mod above upper C with caret', 'mod above upper C with caret']);
  this.executeCharTest('Ċ', ['modifying above upper C with dot', 'mod above upper C with dot', 'mod above upper C with dot']);
  this.executeCharTest('Č', ['modifying above upper C with caron', 'mod above upper C with caron', 'mod above upper C with caron']);
  this.executeCharTest('Ď', ['modifying above upper D with caron', 'mod above upper D with caron', 'mod above upper D with caron']);
  this.executeCharTest('Ē', ['upper E overbar', 'upper E overbar', 'upper E overbar']);
  this.executeCharTest('Ĕ', ['modifying above upper E with breve', 'mod above upper E with breve', 'mod above upper E with breve']);
  this.executeCharTest('Ė', ['modifying above upper E with dot', 'mod above upper E with dot', 'mod above upper E with dot']);
  this.executeCharTest('Ę', ['modifying above upper E with ogonek', 'mod above upper E with ogonek', 'mod above upper E with ogonek']);
  this.executeCharTest('Ě', ['modifying above upper E with caron', 'mod above upper E with caron', 'mod above upper E with caron']);
  this.executeCharTest('Ĝ', ['modifying above upper G with caret', 'mod above upper G with caret', 'mod above upper G with caret']);
  this.executeCharTest('Ğ', ['modifying above upper G with breve', 'mod above upper G with breve', 'mod above upper G with breve']);
  this.executeCharTest('Ġ', ['modifying above upper G with dot', 'mod above upper G with dot', 'mod above upper G with dot']);
  this.executeCharTest('Ģ', ['modifying above upper G with cedilla', 'mod above upper G with cedilla', 'mod above upper G with cedilla']);
  this.executeCharTest('Ĥ', ['modifying above upper H with caret', 'mod above upper H with caret', 'mod above upper H with caret']);
  this.executeCharTest('Ĩ', ['upper I overtilde', 'upper I overtilde', 'upper I overtilde']);
  this.executeCharTest('Ī', ['upper I overbar', 'upper I overbar', 'upper I overbar']);
  this.executeCharTest('Ĭ', ['modifying above upper I with breve', 'mod above upper I with breve', 'mod above upper I with breve']);
  this.executeCharTest('Į', ['modifying above upper I with ogonek', 'mod above upper I with ogonek', 'mod above upper I with ogonek']);
  this.executeCharTest('İ', ['modifying above upper I with dot', 'mod above upper I with dot', 'mod above upper I with dot']);
  this.executeCharTest('Ĵ', ['modifying above upper J with caret', 'mod above upper J with caret', 'mod above upper J with caret']);
  this.executeCharTest('Ķ', ['modifying above upper K with cedilla', 'mod above upper K with cedilla', 'mod above upper K with cedilla']);
  this.executeCharTest('Ĺ', ['modifying above upper L with acute', 'mod above upper L with acute', 'mod above upper L with acute']);
  this.executeCharTest('Ļ', ['modifying above upper L with cedilla', 'mod above upper L with cedilla', 'mod above upper L with cedilla']);
  this.executeCharTest('Ľ', ['modifying above upper L with caron', 'mod above upper L with caron', 'mod above upper L with caron']);
  this.executeCharTest('Ŀ', ['modifying above upper L with middle dot', 'mod above upper L with middle dot', 'mod above upper L with middle dot']);
  this.executeCharTest('Ń', ['modifying above upper N with acute', 'mod above upper N with acute', 'mod above upper N with acute']);
  this.executeCharTest('Ņ', ['modifying above upper N with cedilla', 'mod above upper N with cedilla', 'mod above upper N with cedilla']);
  this.executeCharTest('Ň', ['modifying above upper N with caron', 'mod above upper N with caron', 'mod above upper N with caron']);
  this.executeCharTest('Ō', ['upper O overbar', 'upper O overbar', 'upper O overbar']);
  this.executeCharTest('Ŏ', ['modifying above upper O with breve', 'mod above upper O with breve', 'mod above upper O with breve']);
  this.executeCharTest('Ő', ['modifying above upper O with double acute', 'mod above upper O with double acute', 'mod above upper O with double acute']);
  this.executeCharTest('Ŕ', ['modifying above upper R with acute', 'mod above upper R with acute', 'mod above upper R with acute']);
  this.executeCharTest('Ŗ', ['modifying above upper R with cedilla', 'mod above upper R with cedilla', 'mod above upper R with cedilla']);
  this.executeCharTest('Ř', ['modifying above upper R with caron', 'mod above upper R with caron', 'mod above upper R with caron']);
  this.executeCharTest('Ś', ['modifying above upper S with acute', 'mod above upper S with acute', 'mod above upper S with acute']);
  this.executeCharTest('Ŝ', ['modifying above upper S with caret', 'mod above upper S with caret', 'mod above upper S with caret']);
  this.executeCharTest('Ş', ['modifying above upper S with cedilla', 'mod above upper S with cedilla', 'mod above upper S with cedilla']);
  this.executeCharTest('Š', ['modifying above upper S with caron', 'mod above upper S with caron', 'mod above upper S with caron']);
  this.executeCharTest('Ţ', ['modifying above upper T with cedilla', 'mod above upper T with cedilla', 'mod above upper T with cedilla']);
  this.executeCharTest('Ť', ['modifying above upper T with caron', 'mod above upper T with caron', 'mod above upper T with caron']);
  this.executeCharTest('Ũ', ['upper U overtilde', 'upper U overtilde', 'upper U overtilde']);
  this.executeCharTest('Ū', ['upper U overbar', 'upper U overbar', 'upper U overbar']);
  this.executeCharTest('Ŭ', ['modifying above upper U with breve', 'mod above upper U with breve', 'mod above upper U with breve']);
  this.executeCharTest('Ů', ['modifying above upper U with ring', 'mod above upper U with ring', 'mod above upper U with ring']);
  this.executeCharTest('Ű', ['modifying above upper U with double acute', 'mod above upper U with double acute', 'mod above upper U with double acute']);
  this.executeCharTest('Ų', ['modifying above upper U with ogonek', 'mod above upper U with ogonek', 'mod above upper U with ogonek']);
  this.executeCharTest('Ŵ', ['modifying above upper W with caret', 'mod above upper W with caret', 'mod above upper W with caret']);
  this.executeCharTest('Ŷ', ['modifying above upper Y with caret', 'mod above upper Y with caret', 'mod above upper Y with caret']);
  this.executeCharTest('Ÿ', ['modifying above upper Y with double dot', 'mod above upper Y with double dot', 'mod above upper Y with double dot']);
  this.executeCharTest('Ź', ['modifying above upper Z with acute', 'mod above upper Z with acute', 'mod above upper Z with acute']);
  this.executeCharTest('Ż', ['modifying above upper Z with dot', 'mod above upper Z with dot', 'mod above upper Z with dot']);
  this.executeCharTest('Ž', ['modifying above upper Z with caron', 'mod above upper Z with caron', 'mod above upper Z with caron']);
  this.executeCharTest('Ǎ', ['modifying above upper A with caron', 'mod above upper A with caron', 'mod above upper A with caron']);
  this.executeCharTest('Ǐ', ['modifying above upper I with caron', 'mod above upper I with caron', 'mod above upper I with caron']);
  this.executeCharTest('Ǒ', ['modifying above upper O with caron', 'mod above upper O with caron', 'mod above upper O with caron']);
  this.executeCharTest('Ǔ', ['modifying above upper U with caron', 'mod above upper U with caron', 'mod above upper U with caron']);
  this.executeCharTest('Ǧ', ['modifying above upper G with caron', 'mod above upper G with caron', 'mod above upper G with caron']);
  this.executeCharTest('Ǩ', ['modifying above upper K with caron', 'mod above upper K with caron', 'mod above upper K with caron']);
  this.executeCharTest('Ǫ', ['modifying above upper O with ogonek', 'mod above upper O with ogonek', 'mod above upper O with ogonek']);
  this.executeCharTest('Ǵ', ['modifying above upper G with acute', 'mod above upper G with acute', 'mod above upper G with acute']);
  this.executeCharTest('Ǹ', ['modifying above upper N with grave', 'mod above upper N with grave', 'mod above upper N with grave']);
  this.executeCharTest('Ȁ', ['modifying above upper A with double grave', 'mod above upper A with double grave', 'mod above upper A with double grave']);
  this.executeCharTest('Ȃ', ['modifying above upper A with inverted breve', 'mod above upper A with inverted breve', 'mod above upper A with inverted breve']);
  this.executeCharTest('Ȅ', ['modifying above upper E with double grave', 'mod above upper E with double grave', 'mod above upper E with double grave']);
  this.executeCharTest('Ȇ', ['modifying above upper E with inverted breve', 'mod above upper E with inverted breve', 'mod above upper E with inverted breve']);
  this.executeCharTest('Ȉ', ['modifying above upper I with double grave', 'mod above upper I with double grave', 'mod above upper I with double grave']);
  this.executeCharTest('Ȋ', ['modifying above upper I with inverted breve', 'mod above upper I with inverted breve', 'mod above upper I with inverted breve']);
  this.executeCharTest('Ȍ', ['modifying above upper O with double grave', 'mod above upper O with double grave', 'mod above upper O with double grave']);
  this.executeCharTest('Ȏ', ['modifying above upper O with inverted breve', 'mod above upper O with inverted breve', 'mod above upper O with inverted breve']);
  this.executeCharTest('Ȑ', ['modifying above upper R with double grave', 'mod above upper R with double grave', 'mod above upper R with double grave']);
  this.executeCharTest('Ȓ', ['modifying above upper R with inverted breve', 'mod above upper R with inverted breve', 'mod above upper R with inverted breve']);
  this.executeCharTest('Ȕ', ['modifying above upper U with double grave', 'mod above upper U with double grave', 'mod above upper U with double grave']);
  this.executeCharTest('Ȗ', ['modifying above upper U with inverted breve', 'mod above upper U with inverted breve', 'mod above upper U with inverted breve']);
  this.executeCharTest('Ș', ['modifying below upper S with comma below', 'mod below upper S with comma below', 'mod below upper S with comma below']);
  this.executeCharTest('Ț', ['modifying below upper T with comma below', 'mod below upper T with comma below', 'mod below upper T with comma below']);
  this.executeCharTest('Ȟ', ['modifying above upper H with caron', 'mod above upper H with caron', 'mod above upper H with caron']);
  this.executeCharTest('Ȧ', ['modifying above upper A with dot', 'mod above upper A with dot', 'mod above upper A with dot']);
  this.executeCharTest('Ȩ', ['modifying above upper E with cedilla', 'mod above upper E with cedilla', 'mod above upper E with cedilla']);
  this.executeCharTest('Ȯ', ['modifying above upper O with dot', 'mod above upper O with dot', 'mod above upper O with dot']);
  this.executeCharTest('Ȳ', ['upper Y overbar', 'upper Y overbar', 'upper Y overbar']);
  this.executeCharTest('Ḁ', ['modifying below upper A with ring below', 'mod below upper A with ring below', 'mod below upper A with ring below']);
  this.executeCharTest('Ḃ', ['modifying above upper B with dot', 'mod above upper B with dot', 'mod above upper B with dot']);
  this.executeCharTest('Ḅ', ['modifying below upper B with dot', 'mod below upper B with dot', 'mod below upper B with dot']);
  this.executeCharTest('Ḇ', ['upper B underbar', 'upper B underbar', 'upper B underbar']);
  this.executeCharTest('Ḋ', ['modifying above upper D with dot', 'mod above upper D with dot', 'mod above upper D with dot']);
  this.executeCharTest('Ḍ', ['modifying below upper D with dot', 'mod below upper D with dot', 'mod below upper D with dot']);
  this.executeCharTest('Ḏ', ['upper D underbar', 'upper D underbar', 'upper D underbar']);
  this.executeCharTest('Ḑ', ['modifying above upper D with cedilla', 'mod above upper D with cedilla', 'mod above upper D with cedilla']);
  this.executeCharTest('Ḓ', ['modifying below upper D with caret', 'mod below upper D with caret', 'mod below upper D with caret']);
  this.executeCharTest('Ḙ', ['modifying below upper E with caret', 'mod below upper E with caret', 'mod below upper E with caret']);
  this.executeCharTest('Ḛ', ['upper E undertilde', 'upper E undertilde', 'upper E undertilde']);
  this.executeCharTest('Ḟ', ['modifying above upper F with dot', 'mod above upper F with dot', 'mod above upper F with dot']);
  this.executeCharTest('Ḡ', ['upper G overbar', 'upper G overbar', 'upper G overbar']);
  this.executeCharTest('Ḣ', ['modifying above upper H with dot', 'mod above upper H with dot', 'mod above upper H with dot']);
  this.executeCharTest('Ḥ', ['modifying below upper H with dot', 'mod below upper H with dot', 'mod below upper H with dot']);
  this.executeCharTest('Ḧ', ['modifying above upper H with double dot', 'mod above upper H with double dot', 'mod above upper H with double dot']);
  this.executeCharTest('Ḩ', ['modifying above upper H with cedilla', 'mod above upper H with cedilla', 'mod above upper H with cedilla']);
  this.executeCharTest('Ḫ', ['modifying below upper H with breve below', 'mod below upper H with breve below', 'mod below upper H with breve below']);
  this.executeCharTest('Ḭ', ['upper I undertilde', 'upper I undertilde', 'upper I undertilde']);
  this.executeCharTest('Ḱ', ['modifying above upper K with acute', 'mod above upper K with acute', 'mod above upper K with acute']);
  this.executeCharTest('Ḳ', ['modifying below upper K with dot', 'mod below upper K with dot', 'mod below upper K with dot']);
  this.executeCharTest('Ḵ', ['upper K underbar', 'upper K underbar', 'upper K underbar']);
  this.executeCharTest('Ḷ', ['modifying below upper L with dot', 'mod below upper L with dot', 'mod below upper L with dot']);
  this.executeCharTest('Ḻ', ['upper L underbar', 'upper L underbar', 'upper L underbar']);
  this.executeCharTest('Ḽ', ['modifying below upper L with caret', 'mod below upper L with caret', 'mod below upper L with caret']);
  this.executeCharTest('Ḿ', ['modifying above upper M with acute', 'mod above upper M with acute', 'mod above upper M with acute']);
  this.executeCharTest('Ṁ', ['modifying above upper M with dot', 'mod above upper M with dot', 'mod above upper M with dot']);
  this.executeCharTest('Ṃ', ['modifying below upper M with dot', 'mod below upper M with dot', 'mod below upper M with dot']);
  this.executeCharTest('Ṅ', ['modifying above upper N with dot', 'mod above upper N with dot', 'mod above upper N with dot']);
  this.executeCharTest('Ṇ', ['modifying below upper N with dot', 'mod below upper N with dot', 'mod below upper N with dot']);
  this.executeCharTest('Ṉ', ['upper N underbar', 'upper N underbar', 'upper N underbar']);
  this.executeCharTest('Ṋ', ['modifying below upper N with caret', 'mod below upper N with caret', 'mod below upper N with caret']);
  this.executeCharTest('Ṕ', ['modifying above upper P with acute', 'mod above upper P with acute', 'mod above upper P with acute']);
  this.executeCharTest('Ṗ', ['modifying above upper P with dot', 'mod above upper P with dot', 'mod above upper P with dot']);
  this.executeCharTest('Ṙ', ['modifying above upper R with dot', 'mod above upper R with dot', 'mod above upper R with dot']);
  this.executeCharTest('Ṛ', ['modifying below upper R with dot', 'mod below upper R with dot', 'mod below upper R with dot']);
  this.executeCharTest('Ṟ', ['upper R underbar', 'upper R underbar', 'upper R underbar']);
  this.executeCharTest('Ṡ', ['modifying above upper S with dot', 'mod above upper S with dot', 'mod above upper S with dot']);
  this.executeCharTest('Ṣ', ['modifying below upper S with dot', 'mod below upper S with dot', 'mod below upper S with dot']);
  this.executeCharTest('Ṫ', ['modifying above upper T with dot', 'mod above upper T with dot', 'mod above upper T with dot']);
  this.executeCharTest('Ṭ', ['modifying below upper T with dot', 'mod below upper T with dot', 'mod below upper T with dot']);
  this.executeCharTest('Ṯ', ['upper T underbar', 'upper T underbar', 'upper T underbar']);
  this.executeCharTest('Ṱ', ['modifying below upper T with caret', 'mod below upper T with caret', 'mod below upper T with caret']);
  this.executeCharTest('Ṳ', ['modifying below upper U with double dot', 'mod below upper U with double dot', 'mod below upper U with double dot']);
  this.executeCharTest('Ṵ', ['upper U undertilde', 'upper U undertilde', 'upper U undertilde']);
  this.executeCharTest('Ṷ', ['modifying below upper U with caret', 'mod below upper U with caret', 'mod below upper U with caret']);
  this.executeCharTest('Ṽ', ['upper V overtilde', 'upper V overtilde', 'upper V overtilde']);
  this.executeCharTest('Ṿ', ['modifying below upper V with dot', 'mod below upper V with dot', 'mod below upper V with dot']);
  this.executeCharTest('Ẁ', ['modifying above upper W with grave', 'mod above upper W with grave', 'mod above upper W with grave']);
  this.executeCharTest('Ẃ', ['modifying above upper W with acute', 'mod above upper W with acute', 'mod above upper W with acute']);
  this.executeCharTest('Ẅ', ['modifying above upper W with double dot', 'mod above upper W with double dot', 'mod above upper W with double dot']);
  this.executeCharTest('Ẇ', ['modifying above upper W with dot', 'mod above upper W with dot', 'mod above upper W with dot']);
  this.executeCharTest('Ẉ', ['modifying below upper W with dot', 'mod below upper W with dot', 'mod below upper W with dot']);
  this.executeCharTest('Ẋ', ['modifying above upper X with dot', 'mod above upper X with dot', 'mod above upper X with dot']);
  this.executeCharTest('Ẍ', ['modifying above upper X with double dot', 'mod above upper X with double dot', 'mod above upper X with double dot']);
  this.executeCharTest('Ẏ', ['modifying above upper Y with dot', 'mod above upper Y with dot', 'mod above upper Y with dot']);
  this.executeCharTest('Ẑ', ['modifying above upper Z with circumflex', 'mod above upper Z with circumflex', 'mod above upper Z with circumflex']);
  this.executeCharTest('Ẓ', ['modifying below upper Z with dot', 'mod below upper Z with dot', 'mod below upper Z with dot']);
  this.executeCharTest('Ẕ', ['upper Z underbar', 'upper Z underbar', 'upper Z underbar']);
  this.executeCharTest('Ạ', ['modifying below upper A with dot', 'mod below upper A with dot', 'mod below upper A with dot']);
  this.executeCharTest('Ả', ['modifying above upper A with hook', 'mod above upper A with hook', 'mod above upper A with hook']);
  this.executeCharTest('Ẹ', ['modifying below upper E with dot', 'mod below upper E with dot', 'mod below upper E with dot']);
  this.executeCharTest('Ẻ', ['modifying above upper E with hook', 'mod above upper E with hook', 'mod above upper E with hook']);
  this.executeCharTest('Ẽ', ['upper E overtilde', 'upper E overtilde', 'upper E overtilde']);
  this.executeCharTest('Ỉ', ['modifying above upper I with hook', 'mod above upper I with hook', 'mod above upper I with hook']);
  this.executeCharTest('Ị', ['modifying below upper I with dot', 'mod below upper I with dot', 'mod below upper I with dot']);
  this.executeCharTest('Ọ', ['modifying below upper O with dot', 'mod below upper O with dot', 'mod below upper O with dot']);
  this.executeCharTest('Ỏ', ['modifying above upper O with hook', 'mod above upper O with hook', 'mod above upper O with hook']);
  this.executeCharTest('Ụ', ['modifying below upper U with dot', 'mod below upper U with dot', 'mod below upper U with dot']);
  this.executeCharTest('Ủ', ['modifying above upper U with hook', 'mod above upper U with hook', 'mod above upper U with hook']);
  this.executeCharTest('Ỳ', ['modifying above upper Y with grave', 'mod above upper Y with grave', 'mod above upper Y with grave']);
  this.executeCharTest('Ỵ', ['modifying below upper Y with dot', 'mod below upper Y with dot', 'mod below upper Y with dot']);
  this.executeCharTest('Ỷ', ['modifying above upper Y with hook', 'mod above upper Y with hook', 'mod above upper Y with hook']);
  this.executeCharTest('Ỹ', ['upper Y overtilde', 'upper Y overtilde', 'upper Y overtilde']);
  this.executeCharTest('𝕬', ['bold fraktur upper A', 'bold fraktur upper A', 'bold fraktur upper A']);
  this.executeCharTest('𝕭', ['bold fraktur upper B', 'bold fraktur upper B', 'bold fraktur upper B']);
  this.executeCharTest('𝕮', ['bold fraktur upper C', 'bold fraktur upper C', 'bold fraktur upper C']);
  this.executeCharTest('𝕯', ['bold fraktur upper D', 'bold fraktur upper D', 'bold fraktur upper D']);
  this.executeCharTest('𝕰', ['bold fraktur upper E', 'bold fraktur upper E', 'bold fraktur upper E']);
  this.executeCharTest('𝕱', ['bold fraktur upper F', 'bold fraktur upper F', 'bold fraktur upper F']);
  this.executeCharTest('𝕲', ['bold fraktur upper G', 'bold fraktur upper G', 'bold fraktur upper G']);
  this.executeCharTest('𝕳', ['bold fraktur upper H', 'bold fraktur upper H', 'bold fraktur upper H']);
  this.executeCharTest('𝕴', ['bold fraktur upper I', 'bold fraktur upper I', 'bold fraktur upper I']);
  this.executeCharTest('𝕵', ['bold fraktur upper J', 'bold fraktur upper J', 'bold fraktur upper J']);
  this.executeCharTest('𝕶', ['bold fraktur upper K', 'bold fraktur upper K', 'bold fraktur upper K']);
  this.executeCharTest('𝕷', ['bold fraktur upper L', 'bold fraktur upper L', 'bold fraktur upper L']);
  this.executeCharTest('𝕸', ['bold fraktur upper M', 'bold fraktur upper M', 'bold fraktur upper M']);
  this.executeCharTest('𝕹', ['bold fraktur upper N', 'bold fraktur upper N', 'bold fraktur upper N']);
  this.executeCharTest('𝕺', ['bold fraktur upper O', 'bold fraktur upper O', 'bold fraktur upper O']);
  this.executeCharTest('𝕻', ['bold fraktur upper P', 'bold fraktur upper P', 'bold fraktur upper P']);
  this.executeCharTest('𝕼', ['bold fraktur upper Q', 'bold fraktur upper Q', 'bold fraktur upper Q']);
  this.executeCharTest('𝕽', ['bold fraktur upper R', 'bold fraktur upper R', 'bold fraktur upper R']);
  this.executeCharTest('𝕾', ['bold fraktur upper S', 'bold fraktur upper S', 'bold fraktur upper S']);
  this.executeCharTest('𝕿', ['bold fraktur upper T', 'bold fraktur upper T', 'bold fraktur upper T']);
  this.executeCharTest('𝖀', ['bold fraktur upper U', 'bold fraktur upper U', 'bold fraktur upper U']);
  this.executeCharTest('𝖁', ['bold fraktur upper V', 'bold fraktur upper V', 'bold fraktur upper V']);
  this.executeCharTest('𝖂', ['bold fraktur upper W', 'bold fraktur upper W', 'bold fraktur upper W']);
  this.executeCharTest('𝖃', ['bold fraktur upper X', 'bold fraktur upper X', 'bold fraktur upper X']);
  this.executeCharTest('𝖄', ['bold fraktur upper Y', 'bold fraktur upper Y', 'bold fraktur upper Y']);
  this.executeCharTest('𝖅', ['bold fraktur upper Z', 'bold fraktur upper Z', 'bold fraktur upper Z']);
  this.executeCharTest('𝖆', ['bold fraktur a', 'bold fraktur a', 'bold fraktur a']);
  this.executeCharTest('𝖇', ['bold fraktur b', 'bold fraktur b', 'bold fraktur b']);
  this.executeCharTest('𝖈', ['bold fraktur c', 'bold fraktur c', 'bold fraktur c']);
  this.executeCharTest('𝖉', ['bold fraktur d', 'bold fraktur d', 'bold fraktur d']);
  this.executeCharTest('𝖊', ['bold fraktur e', 'bold fraktur e', 'bold fraktur e']);
  this.executeCharTest('𝖋', ['bold fraktur f', 'bold fraktur f', 'bold fraktur f']);
  this.executeCharTest('𝖌', ['bold fraktur g', 'bold fraktur g', 'bold fraktur g']);
  this.executeCharTest('𝖍', ['bold fraktur h', 'bold fraktur h', 'bold fraktur h']);
  this.executeCharTest('𝖎', ['bold fraktur i', 'bold fraktur i', 'bold fraktur i']);
  this.executeCharTest('𝖏', ['bold fraktur j', 'bold fraktur j', 'bold fraktur j']);
  this.executeCharTest('𝖐', ['bold fraktur k', 'bold fraktur k', 'bold fraktur k']);
  this.executeCharTest('𝖑', ['bold fraktur l', 'bold fraktur l', 'bold fraktur l']);
  this.executeCharTest('𝖒', ['bold fraktur m', 'bold fraktur m', 'bold fraktur m']);
  this.executeCharTest('𝖓', ['bold fraktur n', 'bold fraktur n', 'bold fraktur n']);
  this.executeCharTest('𝖔', ['bold fraktur o', 'bold fraktur o', 'bold fraktur o']);
  this.executeCharTest('𝖕', ['bold fraktur p', 'bold fraktur p', 'bold fraktur p']);
  this.executeCharTest('𝖖', ['bold fraktur q', 'bold fraktur q', 'bold fraktur q']);
  this.executeCharTest('𝖗', ['bold fraktur r', 'bold fraktur r', 'bold fraktur r']);
  this.executeCharTest('𝖘', ['bold fraktur s', 'bold fraktur s', 'bold fraktur s']);
  this.executeCharTest('𝖙', ['bold fraktur t', 'bold fraktur t', 'bold fraktur t']);
  this.executeCharTest('𝖚', ['bold fraktur u', 'bold fraktur u', 'bold fraktur u']);
  this.executeCharTest('𝖛', ['bold fraktur v', 'bold fraktur v', 'bold fraktur v']);
  this.executeCharTest('𝖜', ['bold fraktur w', 'bold fraktur w', 'bold fraktur w']);
  this.executeCharTest('𝖝', ['bold fraktur x', 'bold fraktur x', 'bold fraktur x']);
  this.executeCharTest('𝖞', ['bold fraktur y', 'bold fraktur y', 'bold fraktur y']);
  this.executeCharTest('𝖟', ['bold fraktur z', 'bold fraktur z', 'bold fraktur z']);
  this.executeCharTest('𝐀', ['bold upper A', 'bold upper A', 'bold upper A']);
  this.executeCharTest('𝐁', ['bold upper B', 'bold upper B', 'bold upper B']);
  this.executeCharTest('𝐂', ['bold upper C', 'bold upper C', 'bold upper C']);
  this.executeCharTest('𝐃', ['bold upper D', 'bold upper D', 'bold upper D']);
  this.executeCharTest('𝐄', ['bold upper E', 'bold upper E', 'bold upper E']);
  this.executeCharTest('𝐅', ['bold upper F', 'bold upper F', 'bold upper F']);
  this.executeCharTest('𝐆', ['bold upper G', 'bold upper G', 'bold upper G']);
  this.executeCharTest('𝐇', ['bold upper H', 'bold upper H', 'bold upper H']);
  this.executeCharTest('𝐈', ['bold upper I', 'bold upper I', 'bold upper I']);
  this.executeCharTest('𝐉', ['bold upper J', 'bold upper J', 'bold upper J']);
  this.executeCharTest('𝐊', ['bold upper K', 'bold upper K', 'bold upper K']);
  this.executeCharTest('𝐋', ['bold upper L', 'bold upper L', 'bold upper L']);
  this.executeCharTest('𝐌', ['bold upper M', 'bold upper M', 'bold upper M']);
  this.executeCharTest('𝐍', ['bold upper N', 'bold upper N', 'bold upper N']);
  this.executeCharTest('𝐎', ['bold upper O', 'bold upper O', 'bold upper O']);
  this.executeCharTest('𝐏', ['bold upper P', 'bold upper P', 'bold upper P']);
  this.executeCharTest('𝐐', ['bold upper Q', 'bold upper Q', 'bold upper Q']);
  this.executeCharTest('𝐑', ['bold upper R', 'bold upper R', 'bold upper R']);
  this.executeCharTest('𝐒', ['bold upper S', 'bold upper S', 'bold upper S']);
  this.executeCharTest('𝐓', ['bold upper T', 'bold upper T', 'bold upper T']);
  this.executeCharTest('𝐔', ['bold upper U', 'bold upper U', 'bold upper U']);
  this.executeCharTest('𝐕', ['bold upper V', 'bold upper V', 'bold upper V']);
  this.executeCharTest('𝐖', ['bold upper W', 'bold upper W', 'bold upper W']);
  this.executeCharTest('𝐗', ['bold upper X', 'bold upper X', 'bold upper X']);
  this.executeCharTest('𝐘', ['bold upper Y', 'bold upper Y', 'bold upper Y']);
  this.executeCharTest('𝐙', ['bold upper Z', 'bold upper Z', 'bold upper Z']);
  this.executeCharTest('𝐚', ['bold a', 'bold a', 'bold a']);
  this.executeCharTest('𝐛', ['bold b', 'bold b', 'bold b']);
  this.executeCharTest('𝐜', ['bold c', 'bold c', 'bold c']);
  this.executeCharTest('𝐝', ['bold d', 'bold d', 'bold d']);
  this.executeCharTest('𝐞', ['bold e', 'bold e', 'bold e']);
  this.executeCharTest('𝐟', ['bold f', 'bold f', 'bold f']);
  this.executeCharTest('𝐠', ['bold g', 'bold g', 'bold g']);
  this.executeCharTest('𝐡', ['bold h', 'bold h', 'bold h']);
  this.executeCharTest('𝐢', ['bold i', 'bold i', 'bold i']);
  this.executeCharTest('𝐣', ['bold j', 'bold j', 'bold j']);
  this.executeCharTest('𝐤', ['bold k', 'bold k', 'bold k']);
  this.executeCharTest('𝐥', ['bold l', 'bold l', 'bold l']);
  this.executeCharTest('𝐦', ['bold m', 'bold m', 'bold m']);
  this.executeCharTest('𝐧', ['bold n', 'bold n', 'bold n']);
  this.executeCharTest('𝐨', ['bold o', 'bold o', 'bold o']);
  this.executeCharTest('𝐩', ['bold p', 'bold p', 'bold p']);
  this.executeCharTest('𝐪', ['bold q', 'bold q', 'bold q']);
  this.executeCharTest('𝐫', ['bold r', 'bold r', 'bold r']);
  this.executeCharTest('𝐬', ['bold s', 'bold s', 'bold s']);
  this.executeCharTest('𝐭', ['bold t', 'bold t', 'bold t']);
  this.executeCharTest('𝐮', ['bold u', 'bold u', 'bold u']);
  this.executeCharTest('𝐯', ['bold v', 'bold v', 'bold v']);
  this.executeCharTest('𝐰', ['bold w', 'bold w', 'bold w']);
  this.executeCharTest('𝐱', ['bold x', 'bold x', 'bold x']);
  this.executeCharTest('𝐲', ['bold y', 'bold y', 'bold y']);
  this.executeCharTest('𝐳', ['bold z', 'bold z', 'bold z']);
  this.executeCharTest('𝑨', ['bold italic upper A', 'bold italic upper A', 'bold italic upper A']);
  this.executeCharTest('𝑩', ['bold italic upper B', 'bold italic upper B', 'bold italic upper B']);
  this.executeCharTest('𝑪', ['bold italic upper C', 'bold italic upper C', 'bold italic upper C']);
  this.executeCharTest('𝑫', ['bold italic upper D', 'bold italic upper D', 'bold italic upper D']);
  this.executeCharTest('𝑬', ['bold italic upper E', 'bold italic upper E', 'bold italic upper E']);
  this.executeCharTest('𝑭', ['bold italic upper F', 'bold italic upper F', 'bold italic upper F']);
  this.executeCharTest('𝑮', ['bold italic upper G', 'bold italic upper G', 'bold italic upper G']);
  this.executeCharTest('𝑯', ['bold italic upper H', 'bold italic upper H', 'bold italic upper H']);
  this.executeCharTest('𝑰', ['bold italic upper I', 'bold italic upper I', 'bold italic upper I']);
  this.executeCharTest('𝑱', ['bold italic upper J', 'bold italic upper J', 'bold italic upper J']);
  this.executeCharTest('𝑲', ['bold italic upper K', 'bold italic upper K', 'bold italic upper K']);
  this.executeCharTest('𝑳', ['bold italic upper L', 'bold italic upper L', 'bold italic upper L']);
  this.executeCharTest('𝑴', ['bold italic upper M', 'bold italic upper M', 'bold italic upper M']);
  this.executeCharTest('𝑵', ['bold italic upper N', 'bold italic upper N', 'bold italic upper N']);
  this.executeCharTest('𝑶', ['bold italic upper O', 'bold italic upper O', 'bold italic upper O']);
  this.executeCharTest('𝑷', ['bold italic upper P', 'bold italic upper P', 'bold italic upper P']);
  this.executeCharTest('𝑸', ['bold italic upper Q', 'bold italic upper Q', 'bold italic upper Q']);
  this.executeCharTest('𝑹', ['bold italic upper R', 'bold italic upper R', 'bold italic upper R']);
  this.executeCharTest('𝑺', ['bold italic upper S', 'bold italic upper S', 'bold italic upper S']);
  this.executeCharTest('𝑻', ['bold italic upper T', 'bold italic upper T', 'bold italic upper T']);
  this.executeCharTest('𝑼', ['bold italic upper U', 'bold italic upper U', 'bold italic upper U']);
  this.executeCharTest('𝑽', ['bold italic upper V', 'bold italic upper V', 'bold italic upper V']);
  this.executeCharTest('𝑾', ['bold italic upper W', 'bold italic upper W', 'bold italic upper W']);
  this.executeCharTest('𝑿', ['bold italic upper X', 'bold italic upper X', 'bold italic upper X']);
  this.executeCharTest('𝒀', ['bold italic upper Y', 'bold italic upper Y', 'bold italic upper Y']);
  this.executeCharTest('𝒁', ['bold italic upper Z', 'bold italic upper Z', 'bold italic upper Z']);
  this.executeCharTest('𝒂', ['bold italic a', 'bold italic a', 'bold italic a']);
  this.executeCharTest('𝒃', ['bold italic b', 'bold italic b', 'bold italic b']);
  this.executeCharTest('𝒄', ['bold italic c', 'bold italic c', 'bold italic c']);
  this.executeCharTest('𝒅', ['bold italic d', 'bold italic d', 'bold italic d']);
  this.executeCharTest('𝒆', ['bold italic e', 'bold italic e', 'bold italic e']);
  this.executeCharTest('𝒇', ['bold italic f', 'bold italic f', 'bold italic f']);
  this.executeCharTest('𝒈', ['bold italic g', 'bold italic g', 'bold italic g']);
  this.executeCharTest('𝒉', ['bold italic h', 'bold italic h', 'bold italic h']);
  this.executeCharTest('𝒊', ['bold italic i', 'bold italic i', 'bold italic i']);
  this.executeCharTest('𝒋', ['bold italic j', 'bold italic j', 'bold italic j']);
  this.executeCharTest('𝒌', ['bold italic k', 'bold italic k', 'bold italic k']);
  this.executeCharTest('𝒍', ['bold italic l', 'bold italic l', 'bold italic l']);
  this.executeCharTest('𝒎', ['bold italic m', 'bold italic m', 'bold italic m']);
  this.executeCharTest('𝒏', ['bold italic n', 'bold italic n', 'bold italic n']);
  this.executeCharTest('𝒐', ['bold italic o', 'bold italic o', 'bold italic o']);
  this.executeCharTest('𝒑', ['bold italic p', 'bold italic p', 'bold italic p']);
  this.executeCharTest('𝒒', ['bold italic q', 'bold italic q', 'bold italic q']);
  this.executeCharTest('𝒓', ['bold italic r', 'bold italic r', 'bold italic r']);
  this.executeCharTest('𝒔', ['bold italic s', 'bold italic s', 'bold italic s']);
  this.executeCharTest('𝒕', ['bold italic t', 'bold italic t', 'bold italic t']);
  this.executeCharTest('𝒖', ['bold italic u', 'bold italic u', 'bold italic u']);
  this.executeCharTest('𝒗', ['bold italic v', 'bold italic v', 'bold italic v']);
  this.executeCharTest('𝒘', ['bold italic w', 'bold italic w', 'bold italic w']);
  this.executeCharTest('𝒙', ['bold italic x', 'bold italic x', 'bold italic x']);
  this.executeCharTest('𝒚', ['bold italic y', 'bold italic y', 'bold italic y']);
  this.executeCharTest('𝒛', ['bold italic z', 'bold italic z', 'bold italic z']);
  this.executeCharTest('𝓐', ['bold script upper A', 'bold script upper A', 'bold script upper A']);
  this.executeCharTest('𝓑', ['bold script upper B', 'bold script upper B', 'bold script upper B']);
  this.executeCharTest('𝓒', ['bold script upper C', 'bold script upper C', 'bold script upper C']);
  this.executeCharTest('𝓓', ['bold script upper D', 'bold script upper D', 'bold script upper D']);
  this.executeCharTest('𝓔', ['bold script upper E', 'bold script upper E', 'bold script upper E']);
  this.executeCharTest('𝓕', ['bold script upper F', 'bold script upper F', 'bold script upper F']);
  this.executeCharTest('𝓖', ['bold script upper G', 'bold script upper G', 'bold script upper G']);
  this.executeCharTest('𝓗', ['bold script upper H', 'bold script upper H', 'bold script upper H']);
  this.executeCharTest('𝓘', ['bold script upper I', 'bold script upper I', 'bold script upper I']);
  this.executeCharTest('𝓙', ['bold script upper J', 'bold script upper J', 'bold script upper J']);
  this.executeCharTest('𝓚', ['bold script upper K', 'bold script upper K', 'bold script upper K']);
  this.executeCharTest('𝓛', ['bold script upper L', 'bold script upper L', 'bold script upper L']);
  this.executeCharTest('𝓜', ['bold script upper M', 'bold script upper M', 'bold script upper M']);
  this.executeCharTest('𝓝', ['bold script upper N', 'bold script upper N', 'bold script upper N']);
  this.executeCharTest('𝓞', ['bold script upper O', 'bold script upper O', 'bold script upper O']);
  this.executeCharTest('𝓟', ['bold script upper P', 'bold script upper P', 'bold script upper P']);
  this.executeCharTest('𝓠', ['bold script upper Q', 'bold script upper Q', 'bold script upper Q']);
  this.executeCharTest('𝓡', ['bold script upper R', 'bold script upper R', 'bold script upper R']);
  this.executeCharTest('𝓢', ['bold script upper S', 'bold script upper S', 'bold script upper S']);
  this.executeCharTest('𝓣', ['bold script upper T', 'bold script upper T', 'bold script upper T']);
  this.executeCharTest('𝓤', ['bold script upper U', 'bold script upper U', 'bold script upper U']);
  this.executeCharTest('𝓥', ['bold script upper V', 'bold script upper V', 'bold script upper V']);
  this.executeCharTest('𝓦', ['bold script upper W', 'bold script upper W', 'bold script upper W']);
  this.executeCharTest('𝓧', ['bold script upper X', 'bold script upper X', 'bold script upper X']);
  this.executeCharTest('𝓨', ['bold script upper Y', 'bold script upper Y', 'bold script upper Y']);
  this.executeCharTest('𝓩', ['bold script upper Z', 'bold script upper Z', 'bold script upper Z']);
  this.executeCharTest('𝓪', ['bold script a', 'bold script a', 'bold script a']);
  this.executeCharTest('𝓫', ['bold script b', 'bold script b', 'bold script b']);
  this.executeCharTest('𝓬', ['bold script c', 'bold script c', 'bold script c']);
  this.executeCharTest('𝓭', ['bold script d', 'bold script d', 'bold script d']);
  this.executeCharTest('𝓮', ['bold script e', 'bold script e', 'bold script e']);
  this.executeCharTest('𝓯', ['bold script f', 'bold script f', 'bold script f']);
  this.executeCharTest('𝓰', ['bold script g', 'bold script g', 'bold script g']);
  this.executeCharTest('𝓱', ['bold script h', 'bold script h', 'bold script h']);
  this.executeCharTest('𝓲', ['bold script i', 'bold script i', 'bold script i']);
  this.executeCharTest('𝓳', ['bold script j', 'bold script j', 'bold script j']);
  this.executeCharTest('𝓴', ['bold script k', 'bold script k', 'bold script k']);
  this.executeCharTest('𝓵', ['bold script l', 'bold script l', 'bold script l']);
  this.executeCharTest('𝓶', ['bold script m', 'bold script m', 'bold script m']);
  this.executeCharTest('𝓷', ['bold script n', 'bold script n', 'bold script n']);
  this.executeCharTest('𝓸', ['bold script o', 'bold script o', 'bold script o']);
  this.executeCharTest('𝓹', ['bold script p', 'bold script p', 'bold script p']);
  this.executeCharTest('𝓺', ['bold script q', 'bold script q', 'bold script q']);
  this.executeCharTest('𝓻', ['bold script r', 'bold script r', 'bold script r']);
  this.executeCharTest('𝓼', ['bold script s', 'bold script s', 'bold script s']);
  this.executeCharTest('𝓽', ['bold script t', 'bold script t', 'bold script t']);
  this.executeCharTest('𝓾', ['bold script u', 'bold script u', 'bold script u']);
  this.executeCharTest('𝓿', ['bold script v', 'bold script v', 'bold script v']);
  this.executeCharTest('𝔀', ['bold script w', 'bold script w', 'bold script w']);
  this.executeCharTest('𝔁', ['bold script x', 'bold script x', 'bold script x']);
  this.executeCharTest('𝔂', ['bold script y', 'bold script y', 'bold script y']);
  this.executeCharTest('𝔃', ['bold script z', 'bold script z', 'bold script z']);
  this.executeCharTest('𝔸', ['double struck upper A', 'double struck upper A', 'double struck upper A']);
  this.executeCharTest('𝔹', ['double struck upper B', 'double struck upper B', 'double struck upper B']);
  this.executeCharTest('ℂ', ['double struck upper C', 'double struck upper C', 'double struck upper C']);
  this.executeCharTest('𝔻', ['double struck upper D', 'double struck upper D', 'double struck upper D']);
  this.executeCharTest('𝔼', ['double struck upper E', 'double struck upper E', 'double struck upper E']);
  this.executeCharTest('𝔽', ['double struck upper F', 'double struck upper F', 'double struck upper F']);
  this.executeCharTest('𝔾', ['double struck upper G', 'double struck upper G', 'double struck upper G']);
  this.executeCharTest('ℍ', ['double struck upper H', 'double struck upper H', 'double struck upper H']);
  this.executeCharTest('𝕀', ['double struck upper I', 'double struck upper I', 'double struck upper I']);
  this.executeCharTest('𝕁', ['double struck upper J', 'double struck upper J', 'double struck upper J']);
  this.executeCharTest('𝕂', ['double struck upper K', 'double struck upper K', 'double struck upper K']);
  this.executeCharTest('𝕃', ['double struck upper L', 'double struck upper L', 'double struck upper L']);
  this.executeCharTest('𝕄', ['double struck upper M', 'double struck upper M', 'double struck upper M']);
  this.executeCharTest('ℕ', ['double struck upper N', 'double struck upper N', 'double struck upper N']);
  this.executeCharTest('𝕆', ['double struck upper O', 'double struck upper O', 'double struck upper O']);
  this.executeCharTest('ℙ', ['double struck upper P', 'double struck upper P', 'double struck upper P']);
  this.executeCharTest('ℚ', ['double struck upper Q', 'double struck upper Q', 'double struck upper Q']);
  this.executeCharTest('ℝ', ['double struck upper R', 'double struck upper R', 'double struck upper R']);
  this.executeCharTest('𝕊', ['double struck upper S', 'double struck upper S', 'double struck upper S']);
  this.executeCharTest('𝕋', ['double struck upper T', 'double struck upper T', 'double struck upper T']);
  this.executeCharTest('𝕌', ['double struck upper U', 'double struck upper U', 'double struck upper U']);
  this.executeCharTest('𝕍', ['double struck upper V', 'double struck upper V', 'double struck upper V']);
  this.executeCharTest('𝕎', ['double struck upper W', 'double struck upper W', 'double struck upper W']);
  this.executeCharTest('𝕏', ['double struck upper X', 'double struck upper X', 'double struck upper X']);
  this.executeCharTest('𝕐', ['double struck upper Y', 'double struck upper Y', 'double struck upper Y']);
  this.executeCharTest('ℤ', ['double struck upper Z', 'double struck upper Z', 'double struck upper Z']);
  this.executeCharTest('𝕒', ['double struck a', 'double struck a', 'double struck a']);
  this.executeCharTest('𝕓', ['double struck b', 'double struck b', 'double struck b']);
  this.executeCharTest('𝕔', ['double struck c', 'double struck c', 'double struck c']);
  this.executeCharTest('𝕕', ['double struck d', 'double struck d', 'double struck d']);
  this.executeCharTest('𝕖', ['double struck e', 'double struck e', 'double struck e']);
  this.executeCharTest('𝕗', ['double struck f', 'double struck f', 'double struck f']);
  this.executeCharTest('𝕘', ['double struck g', 'double struck g', 'double struck g']);
  this.executeCharTest('𝕙', ['double struck h', 'double struck h', 'double struck h']);
  this.executeCharTest('𝕚', ['double struck i', 'double struck i', 'double struck i']);
  this.executeCharTest('𝕛', ['double struck j', 'double struck j', 'double struck j']);
  this.executeCharTest('𝕜', ['double struck k', 'double struck k', 'double struck k']);
  this.executeCharTest('𝕝', ['double struck l', 'double struck l', 'double struck l']);
  this.executeCharTest('𝕞', ['double struck m', 'double struck m', 'double struck m']);
  this.executeCharTest('𝕟', ['double struck n', 'double struck n', 'double struck n']);
  this.executeCharTest('𝕠', ['double struck o', 'double struck o', 'double struck o']);
  this.executeCharTest('𝕡', ['double struck p', 'double struck p', 'double struck p']);
  this.executeCharTest('𝕢', ['double struck q', 'double struck q', 'double struck q']);
  this.executeCharTest('𝕣', ['double struck r', 'double struck r', 'double struck r']);
  this.executeCharTest('𝕤', ['double struck s', 'double struck s', 'double struck s']);
  this.executeCharTest('𝕥', ['double struck t', 'double struck t', 'double struck t']);
  this.executeCharTest('𝕦', ['double struck u', 'double struck u', 'double struck u']);
  this.executeCharTest('𝕧', ['double struck v', 'double struck v', 'double struck v']);
  this.executeCharTest('𝕨', ['double struck w', 'double struck w', 'double struck w']);
  this.executeCharTest('𝕩', ['double struck x', 'double struck x', 'double struck x']);
  this.executeCharTest('𝕪', ['double struck y', 'double struck y', 'double struck y']);
  this.executeCharTest('𝕫', ['double struck z', 'double struck z', 'double struck z']);
  this.executeCharTest('𝔄', ['fraktur upper A', 'fraktur upper A', 'fraktur upper A']);
  this.executeCharTest('𝔅', ['fraktur upper B', 'fraktur upper B', 'fraktur upper B']);
  this.executeCharTest('ℭ', ['fraktur upper C', 'fraktur upper C', 'fraktur upper C']);
  this.executeCharTest('𝔇', ['fraktur upper D', 'fraktur upper D', 'fraktur upper D']);
  this.executeCharTest('𝔈', ['fraktur upper E', 'fraktur upper E', 'fraktur upper E']);
  this.executeCharTest('𝔉', ['fraktur upper F', 'fraktur upper F', 'fraktur upper F']);
  this.executeCharTest('𝔊', ['fraktur upper G', 'fraktur upper G', 'fraktur upper G']);
  this.executeCharTest('ℌ', ['fraktur upper H', 'fraktur upper H', 'fraktur upper H']);
  this.executeCharTest('ℑ', ['fraktur upper I', 'fraktur upper I', 'fraktur upper I']);
  this.executeCharTest('𝔍', ['fraktur upper J', 'fraktur upper J', 'fraktur upper J']);
  this.executeCharTest('𝔎', ['fraktur upper K', 'fraktur upper K', 'fraktur upper K']);
  this.executeCharTest('𝔏', ['fraktur upper L', 'fraktur upper L', 'fraktur upper L']);
  this.executeCharTest('𝔐', ['fraktur upper M', 'fraktur upper M', 'fraktur upper M']);
  this.executeCharTest('𝔑', ['fraktur upper N', 'fraktur upper N', 'fraktur upper N']);
  this.executeCharTest('𝔒', ['fraktur upper O', 'fraktur upper O', 'fraktur upper O']);
  this.executeCharTest('𝔓', ['fraktur upper P', 'fraktur upper P', 'fraktur upper P']);
  this.executeCharTest('𝔔', ['fraktur upper Q', 'fraktur upper Q', 'fraktur upper Q']);
  this.executeCharTest('ℜ', ['fraktur upper R', 'fraktur upper R', 'fraktur upper R']);
  this.executeCharTest('𝔖', ['fraktur upper S', 'fraktur upper S', 'fraktur upper S']);
  this.executeCharTest('𝔗', ['fraktur upper T', 'fraktur upper T', 'fraktur upper T']);
  this.executeCharTest('𝔘', ['fraktur upper U', 'fraktur upper U', 'fraktur upper U']);
  this.executeCharTest('𝔙', ['fraktur upper V', 'fraktur upper V', 'fraktur upper V']);
  this.executeCharTest('𝔚', ['fraktur upper W', 'fraktur upper W', 'fraktur upper W']);
  this.executeCharTest('𝔛', ['fraktur upper X', 'fraktur upper X', 'fraktur upper X']);
  this.executeCharTest('𝔜', ['fraktur upper Y', 'fraktur upper Y', 'fraktur upper Y']);
  this.executeCharTest('ℨ', ['fraktur upper Z', 'fraktur upper Z', 'fraktur upper Z']);
  this.executeCharTest('𝔞', ['fraktur a', 'fraktur a', 'fraktur a']);
  this.executeCharTest('𝔟', ['fraktur b', 'fraktur b', 'fraktur b']);
  this.executeCharTest('𝔠', ['fraktur c', 'fraktur c', 'fraktur c']);
  this.executeCharTest('𝔡', ['fraktur d', 'fraktur d', 'fraktur d']);
  this.executeCharTest('𝔢', ['fraktur e', 'fraktur e', 'fraktur e']);
  this.executeCharTest('𝔣', ['fraktur f', 'fraktur f', 'fraktur f']);
  this.executeCharTest('𝔤', ['fraktur g', 'fraktur g', 'fraktur g']);
  this.executeCharTest('𝔥', ['fraktur h', 'fraktur h', 'fraktur h']);
  this.executeCharTest('𝔦', ['fraktur i', 'fraktur i', 'fraktur i']);
  this.executeCharTest('𝔧', ['fraktur j', 'fraktur j', 'fraktur j']);
  this.executeCharTest('𝔨', ['fraktur k', 'fraktur k', 'fraktur k']);
  this.executeCharTest('𝔩', ['fraktur l', 'fraktur l', 'fraktur l']);
  this.executeCharTest('𝔪', ['fraktur m', 'fraktur m', 'fraktur m']);
  this.executeCharTest('𝔫', ['fraktur n', 'fraktur n', 'fraktur n']);
  this.executeCharTest('𝔬', ['fraktur o', 'fraktur o', 'fraktur o']);
  this.executeCharTest('𝔭', ['fraktur p', 'fraktur p', 'fraktur p']);
  this.executeCharTest('𝔮', ['fraktur q', 'fraktur q', 'fraktur q']);
  this.executeCharTest('𝔯', ['fraktur r', 'fraktur r', 'fraktur r']);
  this.executeCharTest('𝔰', ['fraktur s', 'fraktur s', 'fraktur s']);
  this.executeCharTest('𝔱', ['fraktur t', 'fraktur t', 'fraktur t']);
  this.executeCharTest('𝔲', ['fraktur u', 'fraktur u', 'fraktur u']);
  this.executeCharTest('𝔳', ['fraktur v', 'fraktur v', 'fraktur v']);
  this.executeCharTest('𝔴', ['fraktur w', 'fraktur w', 'fraktur w']);
  this.executeCharTest('𝔵', ['fraktur x', 'fraktur x', 'fraktur x']);
  this.executeCharTest('𝔶', ['fraktur y', 'fraktur y', 'fraktur y']);
  this.executeCharTest('𝔷', ['fraktur z', 'fraktur z', 'fraktur z']);
  this.executeCharTest('𝐴', ['italic upper A', 'italic upper A', 'italic upper A']);
  this.executeCharTest('𝐵', ['italic upper B', 'italic upper B', 'italic upper B']);
  this.executeCharTest('𝐶', ['italic upper C', 'italic upper C', 'italic upper C']);
  this.executeCharTest('𝐷', ['italic upper D', 'italic upper D', 'italic upper D']);
  this.executeCharTest('𝐸', ['italic upper E', 'italic upper E', 'italic upper E']);
  this.executeCharTest('𝐹', ['italic upper F', 'italic upper F', 'italic upper F']);
  this.executeCharTest('𝐺', ['italic upper G', 'italic upper G', 'italic upper G']);
  this.executeCharTest('𝐻', ['italic upper H', 'italic upper H', 'italic upper H']);
  this.executeCharTest('𝐼', ['italic upper I', 'italic upper I', 'italic upper I']);
  this.executeCharTest('𝐽', ['italic upper J', 'italic upper J', 'italic upper J']);
  this.executeCharTest('𝐾', ['italic upper K', 'italic upper K', 'italic upper K']);
  this.executeCharTest('𝐿', ['italic upper L', 'italic upper L', 'italic upper L']);
  this.executeCharTest('𝑀', ['italic upper M', 'italic upper M', 'italic upper M']);
  this.executeCharTest('𝑁', ['italic upper N', 'italic upper N', 'italic upper N']);
  this.executeCharTest('𝑂', ['italic upper O', 'italic upper O', 'italic upper O']);
  this.executeCharTest('𝑃', ['italic upper P', 'italic upper P', 'italic upper P']);
  this.executeCharTest('𝑄', ['italic upper Q', 'italic upper Q', 'italic upper Q']);
  this.executeCharTest('𝑅', ['italic upper R', 'italic upper R', 'italic upper R']);
  this.executeCharTest('𝑆', ['italic upper S', 'italic upper S', 'italic upper S']);
  this.executeCharTest('𝑇', ['italic upper T', 'italic upper T', 'italic upper T']);
  this.executeCharTest('𝑈', ['italic upper U', 'italic upper U', 'italic upper U']);
  this.executeCharTest('𝑉', ['italic upper V', 'italic upper V', 'italic upper V']);
  this.executeCharTest('𝑊', ['italic upper W', 'italic upper W', 'italic upper W']);
  this.executeCharTest('𝑋', ['italic upper X', 'italic upper X', 'italic upper X']);
  this.executeCharTest('𝑌', ['italic upper Y', 'italic upper Y', 'italic upper Y']);
  this.executeCharTest('𝑍', ['italic upper Z', 'italic upper Z', 'italic upper Z']);
  this.executeCharTest('𝑎', ['italic a', 'italic a', 'italic a']);
  this.executeCharTest('𝑏', ['italic b', 'italic b', 'italic b']);
  this.executeCharTest('𝑐', ['italic c', 'italic c', 'italic c']);
  this.executeCharTest('𝑑', ['italic d', 'italic d', 'italic d']);
  this.executeCharTest('𝑒', ['italic e', 'italic e', 'italic e']);
  this.executeCharTest('𝑓', ['italic f', 'italic f', 'italic f']);
  this.executeCharTest('𝑔', ['italic g', 'italic g', 'italic g']);
  this.executeCharTest('ℎ', ['italic h', 'italic h', 'italic h']);
  this.executeCharTest('𝑖', ['italic i', 'italic i', 'italic i']);
  this.executeCharTest('𝑗', ['italic j', 'italic j', 'italic j']);
  this.executeCharTest('𝑘', ['italic k', 'italic k', 'italic k']);
  this.executeCharTest('𝑙', ['italic l', 'italic l', 'italic l']);
  this.executeCharTest('𝑚', ['italic m', 'italic m', 'italic m']);
  this.executeCharTest('𝑛', ['italic n', 'italic n', 'italic n']);
  this.executeCharTest('𝑜', ['italic o', 'italic o', 'italic o']);
  this.executeCharTest('𝑝', ['italic p', 'italic p', 'italic p']);
  this.executeCharTest('𝑞', ['italic q', 'italic q', 'italic q']);
  this.executeCharTest('𝑟', ['italic r', 'italic r', 'italic r']);
  this.executeCharTest('𝑠', ['italic s', 'italic s', 'italic s']);
  this.executeCharTest('𝑡', ['italic t', 'italic t', 'italic t']);
  this.executeCharTest('𝑢', ['italic u', 'italic u', 'italic u']);
  this.executeCharTest('𝑣', ['italic v', 'italic v', 'italic v']);
  this.executeCharTest('𝑤', ['italic w', 'italic w', 'italic w']);
  this.executeCharTest('𝑥', ['italic x', 'italic x', 'italic x']);
  this.executeCharTest('𝑦', ['italic y', 'italic y', 'italic y']);
  this.executeCharTest('𝑧', ['italic z', 'italic z', 'italic z']);
  this.executeCharTest('𝙰', ['monospace upper A', 'monospace upper A', 'monospace upper A']);
  this.executeCharTest('𝙱', ['monospace upper B', 'monospace upper B', 'monospace upper B']);
  this.executeCharTest('𝙲', ['monospace upper C', 'monospace upper C', 'monospace upper C']);
  this.executeCharTest('𝙳', ['monospace upper D', 'monospace upper D', 'monospace upper D']);
  this.executeCharTest('𝙴', ['monospace upper E', 'monospace upper E', 'monospace upper E']);
  this.executeCharTest('𝙵', ['monospace upper F', 'monospace upper F', 'monospace upper F']);
  this.executeCharTest('𝙶', ['monospace upper G', 'monospace upper G', 'monospace upper G']);
  this.executeCharTest('𝙷', ['monospace upper H', 'monospace upper H', 'monospace upper H']);
  this.executeCharTest('𝙸', ['monospace upper I', 'monospace upper I', 'monospace upper I']);
  this.executeCharTest('𝙹', ['monospace upper J', 'monospace upper J', 'monospace upper J']);
  this.executeCharTest('𝙺', ['monospace upper K', 'monospace upper K', 'monospace upper K']);
  this.executeCharTest('𝙻', ['monospace upper L', 'monospace upper L', 'monospace upper L']);
  this.executeCharTest('𝙼', ['monospace upper M', 'monospace upper M', 'monospace upper M']);
  this.executeCharTest('𝙽', ['monospace upper N', 'monospace upper N', 'monospace upper N']);
  this.executeCharTest('𝙾', ['monospace upper O', 'monospace upper O', 'monospace upper O']);
  this.executeCharTest('𝙿', ['monospace upper P', 'monospace upper P', 'monospace upper P']);
  this.executeCharTest('𝚀', ['monospace upper Q', 'monospace upper Q', 'monospace upper Q']);
  this.executeCharTest('𝚁', ['monospace upper R', 'monospace upper R', 'monospace upper R']);
  this.executeCharTest('𝚂', ['monospace upper S', 'monospace upper S', 'monospace upper S']);
  this.executeCharTest('𝚃', ['monospace upper T', 'monospace upper T', 'monospace upper T']);
  this.executeCharTest('𝚄', ['monospace upper U', 'monospace upper U', 'monospace upper U']);
  this.executeCharTest('𝚅', ['monospace upper V', 'monospace upper V', 'monospace upper V']);
  this.executeCharTest('𝚆', ['monospace upper W', 'monospace upper W', 'monospace upper W']);
  this.executeCharTest('𝚇', ['monospace upper X', 'monospace upper X', 'monospace upper X']);
  this.executeCharTest('𝚈', ['monospace upper Y', 'monospace upper Y', 'monospace upper Y']);
  this.executeCharTest('𝚉', ['monospace upper Z', 'monospace upper Z', 'monospace upper Z']);
  this.executeCharTest('𝚊', ['monospace a', 'monospace a', 'monospace a']);
  this.executeCharTest('𝚋', ['monospace b', 'monospace b', 'monospace b']);
  this.executeCharTest('𝚌', ['monospace c', 'monospace c', 'monospace c']);
  this.executeCharTest('𝚍', ['monospace d', 'monospace d', 'monospace d']);
  this.executeCharTest('𝚎', ['monospace e', 'monospace e', 'monospace e']);
  this.executeCharTest('𝚏', ['monospace f', 'monospace f', 'monospace f']);
  this.executeCharTest('𝚐', ['monospace g', 'monospace g', 'monospace g']);
  this.executeCharTest('𝚑', ['monospace h', 'monospace h', 'monospace h']);
  this.executeCharTest('𝚒', ['monospace i', 'monospace i', 'monospace i']);
  this.executeCharTest('𝚓', ['monospace j', 'monospace j', 'monospace j']);
  this.executeCharTest('𝚔', ['monospace k', 'monospace k', 'monospace k']);
  this.executeCharTest('𝚕', ['monospace l', 'monospace l', 'monospace l']);
  this.executeCharTest('𝚖', ['monospace m', 'monospace m', 'monospace m']);
  this.executeCharTest('𝚗', ['monospace n', 'monospace n', 'monospace n']);
  this.executeCharTest('𝚘', ['monospace o', 'monospace o', 'monospace o']);
  this.executeCharTest('𝚙', ['monospace p', 'monospace p', 'monospace p']);
  this.executeCharTest('𝚚', ['monospace q', 'monospace q', 'monospace q']);
  this.executeCharTest('𝚛', ['monospace r', 'monospace r', 'monospace r']);
  this.executeCharTest('𝚜', ['monospace s', 'monospace s', 'monospace s']);
  this.executeCharTest('𝚝', ['monospace t', 'monospace t', 'monospace t']);
  this.executeCharTest('𝚞', ['monospace u', 'monospace u', 'monospace u']);
  this.executeCharTest('𝚟', ['monospace v', 'monospace v', 'monospace v']);
  this.executeCharTest('𝚠', ['monospace w', 'monospace w', 'monospace w']);
  this.executeCharTest('𝚡', ['monospace x', 'monospace x', 'monospace x']);
  this.executeCharTest('𝚢', ['monospace y', 'monospace y', 'monospace y']);
  this.executeCharTest('𝚣', ['monospace z', 'monospace z', 'monospace z']);
  this.executeCharTest('𝗔', ['sans serif bold upper A', 'sans serif bold upper A', 'sans serif bold upper A']);
  this.executeCharTest('𝗕', ['sans serif bold upper B', 'sans serif bold upper B', 'sans serif bold upper B']);
  this.executeCharTest('𝗖', ['sans serif bold upper C', 'sans serif bold upper C', 'sans serif bold upper C']);
  this.executeCharTest('𝗗', ['sans serif bold upper D', 'sans serif bold upper D', 'sans serif bold upper D']);
  this.executeCharTest('𝗘', ['sans serif bold upper E', 'sans serif bold upper E', 'sans serif bold upper E']);
  this.executeCharTest('𝗙', ['sans serif bold upper F', 'sans serif bold upper F', 'sans serif bold upper F']);
  this.executeCharTest('𝗚', ['sans serif bold upper G', 'sans serif bold upper G', 'sans serif bold upper G']);
  this.executeCharTest('𝗛', ['sans serif bold upper H', 'sans serif bold upper H', 'sans serif bold upper H']);
  this.executeCharTest('𝗜', ['sans serif bold upper I', 'sans serif bold upper I', 'sans serif bold upper I']);
  this.executeCharTest('𝗝', ['sans serif bold upper J', 'sans serif bold upper J', 'sans serif bold upper J']);
  this.executeCharTest('𝗞', ['sans serif bold upper K', 'sans serif bold upper K', 'sans serif bold upper K']);
  this.executeCharTest('𝗟', ['sans serif bold upper L', 'sans serif bold upper L', 'sans serif bold upper L']);
  this.executeCharTest('𝗠', ['sans serif bold upper M', 'sans serif bold upper M', 'sans serif bold upper M']);
  this.executeCharTest('𝗡', ['sans serif bold upper N', 'sans serif bold upper N', 'sans serif bold upper N']);
  this.executeCharTest('𝗢', ['sans serif bold upper O', 'sans serif bold upper O', 'sans serif bold upper O']);
  this.executeCharTest('𝗣', ['sans serif bold upper P', 'sans serif bold upper P', 'sans serif bold upper P']);
  this.executeCharTest('𝗤', ['sans serif bold upper Q', 'sans serif bold upper Q', 'sans serif bold upper Q']);
  this.executeCharTest('𝗥', ['sans serif bold upper R', 'sans serif bold upper R', 'sans serif bold upper R']);
  this.executeCharTest('𝗦', ['sans serif bold upper S', 'sans serif bold upper S', 'sans serif bold upper S']);
  this.executeCharTest('𝗧', ['sans serif bold upper T', 'sans serif bold upper T', 'sans serif bold upper T']);
  this.executeCharTest('𝗨', ['sans serif bold upper U', 'sans serif bold upper U', 'sans serif bold upper U']);
  this.executeCharTest('𝗩', ['sans serif bold upper V', 'sans serif bold upper V', 'sans serif bold upper V']);
  this.executeCharTest('𝗪', ['sans serif bold upper W', 'sans serif bold upper W', 'sans serif bold upper W']);
  this.executeCharTest('𝗫', ['sans serif bold upper X', 'sans serif bold upper X', 'sans serif bold upper X']);
  this.executeCharTest('𝗬', ['sans serif bold upper Y', 'sans serif bold upper Y', 'sans serif bold upper Y']);
  this.executeCharTest('𝗭', ['sans serif bold upper Z', 'sans serif bold upper Z', 'sans serif bold upper Z']);
  this.executeCharTest('𝗮', ['sans serif bold a', 'sans serif bold a', 'sans serif bold a']);
  this.executeCharTest('𝗯', ['sans serif bold b', 'sans serif bold b', 'sans serif bold b']);
  this.executeCharTest('𝗰', ['sans serif bold c', 'sans serif bold c', 'sans serif bold c']);
  this.executeCharTest('𝗱', ['sans serif bold d', 'sans serif bold d', 'sans serif bold d']);
  this.executeCharTest('𝗲', ['sans serif bold e', 'sans serif bold e', 'sans serif bold e']);
  this.executeCharTest('𝗳', ['sans serif bold f', 'sans serif bold f', 'sans serif bold f']);
  this.executeCharTest('𝗴', ['sans serif bold g', 'sans serif bold g', 'sans serif bold g']);
  this.executeCharTest('𝗵', ['sans serif bold h', 'sans serif bold h', 'sans serif bold h']);
  this.executeCharTest('𝗶', ['sans serif bold i', 'sans serif bold i', 'sans serif bold i']);
  this.executeCharTest('𝗷', ['sans serif bold j', 'sans serif bold j', 'sans serif bold j']);
  this.executeCharTest('𝗸', ['sans serif bold k', 'sans serif bold k', 'sans serif bold k']);
  this.executeCharTest('𝗹', ['sans serif bold l', 'sans serif bold l', 'sans serif bold l']);
  this.executeCharTest('𝗺', ['sans serif bold m', 'sans serif bold m', 'sans serif bold m']);
  this.executeCharTest('𝗻', ['sans serif bold n', 'sans serif bold n', 'sans serif bold n']);
  this.executeCharTest('𝗼', ['sans serif bold o', 'sans serif bold o', 'sans serif bold o']);
  this.executeCharTest('𝗽', ['sans serif bold p', 'sans serif bold p', 'sans serif bold p']);
  this.executeCharTest('𝗾', ['sans serif bold q', 'sans serif bold q', 'sans serif bold q']);
  this.executeCharTest('𝗿', ['sans serif bold r', 'sans serif bold r', 'sans serif bold r']);
  this.executeCharTest('𝘀', ['sans serif bold s', 'sans serif bold s', 'sans serif bold s']);
  this.executeCharTest('𝘁', ['sans serif bold t', 'sans serif bold t', 'sans serif bold t']);
  this.executeCharTest('𝘂', ['sans serif bold u', 'sans serif bold u', 'sans serif bold u']);
  this.executeCharTest('𝘃', ['sans serif bold v', 'sans serif bold v', 'sans serif bold v']);
  this.executeCharTest('𝘄', ['sans serif bold w', 'sans serif bold w', 'sans serif bold w']);
  this.executeCharTest('𝘅', ['sans serif bold x', 'sans serif bold x', 'sans serif bold x']);
  this.executeCharTest('𝘆', ['sans serif bold y', 'sans serif bold y', 'sans serif bold y']);
  this.executeCharTest('𝘇', ['sans serif bold z', 'sans serif bold z', 'sans serif bold z']);
  this.executeCharTest('𝘈', ['sans serif italic upper A', 'sans serif italic upper A', 'sans serif italic upper A']);
  this.executeCharTest('𝘉', ['sans serif italic upper B', 'sans serif italic upper B', 'sans serif italic upper B']);
  this.executeCharTest('𝘊', ['sans serif italic upper C', 'sans serif italic upper C', 'sans serif italic upper C']);
  this.executeCharTest('𝘋', ['sans serif italic upper D', 'sans serif italic upper D', 'sans serif italic upper D']);
  this.executeCharTest('𝘌', ['sans serif italic upper E', 'sans serif italic upper E', 'sans serif italic upper E']);
  this.executeCharTest('𝘍', ['sans serif italic upper F', 'sans serif italic upper F', 'sans serif italic upper F']);
  this.executeCharTest('𝘎', ['sans serif italic upper G', 'sans serif italic upper G', 'sans serif italic upper G']);
  this.executeCharTest('𝘏', ['sans serif italic upper H', 'sans serif italic upper H', 'sans serif italic upper H']);
  this.executeCharTest('𝘐', ['sans serif italic upper I', 'sans serif italic upper I', 'sans serif italic upper I']);
  this.executeCharTest('𝘑', ['sans serif italic upper J', 'sans serif italic upper J', 'sans serif italic upper J']);
  this.executeCharTest('𝘒', ['sans serif italic upper K', 'sans serif italic upper K', 'sans serif italic upper K']);
  this.executeCharTest('𝘓', ['sans serif italic upper L', 'sans serif italic upper L', 'sans serif italic upper L']);
  this.executeCharTest('𝘔', ['sans serif italic upper M', 'sans serif italic upper M', 'sans serif italic upper M']);
  this.executeCharTest('𝘕', ['sans serif italic upper N', 'sans serif italic upper N', 'sans serif italic upper N']);
  this.executeCharTest('𝘖', ['sans serif italic upper O', 'sans serif italic upper O', 'sans serif italic upper O']);
  this.executeCharTest('𝘗', ['sans serif italic upper P', 'sans serif italic upper P', 'sans serif italic upper P']);
  this.executeCharTest('𝘘', ['sans serif italic upper Q', 'sans serif italic upper Q', 'sans serif italic upper Q']);
  this.executeCharTest('𝘙', ['sans serif italic upper R', 'sans serif italic upper R', 'sans serif italic upper R']);
  this.executeCharTest('𝘚', ['sans serif italic upper S', 'sans serif italic upper S', 'sans serif italic upper S']);
  this.executeCharTest('𝘛', ['sans serif italic upper T', 'sans serif italic upper T', 'sans serif italic upper T']);
  this.executeCharTest('𝘜', ['sans serif italic upper U', 'sans serif italic upper U', 'sans serif italic upper U']);
  this.executeCharTest('𝘝', ['sans serif italic upper V', 'sans serif italic upper V', 'sans serif italic upper V']);
  this.executeCharTest('𝘞', ['sans serif italic upper W', 'sans serif italic upper W', 'sans serif italic upper W']);
  this.executeCharTest('𝘟', ['sans serif italic upper X', 'sans serif italic upper X', 'sans serif italic upper X']);
  this.executeCharTest('𝘠', ['sans serif italic upper Y', 'sans serif italic upper Y', 'sans serif italic upper Y']);
  this.executeCharTest('𝘡', ['sans serif italic upper Z', 'sans serif italic upper Z', 'sans serif italic upper Z']);
  this.executeCharTest('𝘢', ['sans serif italic a', 'sans serif italic a', 'sans serif italic a']);
  this.executeCharTest('𝘣', ['sans serif italic b', 'sans serif italic b', 'sans serif italic b']);
  this.executeCharTest('𝘤', ['sans serif italic c', 'sans serif italic c', 'sans serif italic c']);
  this.executeCharTest('𝘥', ['sans serif italic d', 'sans serif italic d', 'sans serif italic d']);
  this.executeCharTest('𝘦', ['sans serif italic e', 'sans serif italic e', 'sans serif italic e']);
  this.executeCharTest('𝘧', ['sans serif italic f', 'sans serif italic f', 'sans serif italic f']);
  this.executeCharTest('𝘨', ['sans serif italic g', 'sans serif italic g', 'sans serif italic g']);
  this.executeCharTest('𝘩', ['sans serif italic h', 'sans serif italic h', 'sans serif italic h']);
  this.executeCharTest('𝘪', ['sans serif italic i', 'sans serif italic i', 'sans serif italic i']);
  this.executeCharTest('𝘫', ['sans serif italic j', 'sans serif italic j', 'sans serif italic j']);
  this.executeCharTest('𝘬', ['sans serif italic k', 'sans serif italic k', 'sans serif italic k']);
  this.executeCharTest('𝘭', ['sans serif italic l', 'sans serif italic l', 'sans serif italic l']);
  this.executeCharTest('𝘮', ['sans serif italic m', 'sans serif italic m', 'sans serif italic m']);
  this.executeCharTest('𝘯', ['sans serif italic n', 'sans serif italic n', 'sans serif italic n']);
  this.executeCharTest('𝘰', ['sans serif italic o', 'sans serif italic o', 'sans serif italic o']);
  this.executeCharTest('𝘱', ['sans serif italic p', 'sans serif italic p', 'sans serif italic p']);
  this.executeCharTest('𝘲', ['sans serif italic q', 'sans serif italic q', 'sans serif italic q']);
  this.executeCharTest('𝘳', ['sans serif italic r', 'sans serif italic r', 'sans serif italic r']);
  this.executeCharTest('𝘴', ['sans serif italic s', 'sans serif italic s', 'sans serif italic s']);
  this.executeCharTest('𝘵', ['sans serif italic t', 'sans serif italic t', 'sans serif italic t']);
  this.executeCharTest('𝘶', ['sans serif italic u', 'sans serif italic u', 'sans serif italic u']);
  this.executeCharTest('𝘷', ['sans serif italic v', 'sans serif italic v', 'sans serif italic v']);
  this.executeCharTest('𝘸', ['sans serif italic w', 'sans serif italic w', 'sans serif italic w']);
  this.executeCharTest('𝘹', ['sans serif italic x', 'sans serif italic x', 'sans serif italic x']);
  this.executeCharTest('𝘺', ['sans serif italic y', 'sans serif italic y', 'sans serif italic y']);
  this.executeCharTest('𝘻', ['sans serif italic z', 'sans serif italic z', 'sans serif italic z']);
  this.executeCharTest('𝘼', ['sans serif bold italic upper A', 'sans serif bold italic upper A', 'sans serif bold italic upper A']);
  this.executeCharTest('𝘽', ['sans serif bold italic upper B', 'sans serif bold italic upper B', 'sans serif bold italic upper B']);
  this.executeCharTest('𝘾', ['sans serif bold italic upper C', 'sans serif bold italic upper C', 'sans serif bold italic upper C']);
  this.executeCharTest('𝘿', ['sans serif bold italic upper D', 'sans serif bold italic upper D', 'sans serif bold italic upper D']);
  this.executeCharTest('𝙀', ['sans serif bold italic upper E', 'sans serif bold italic upper E', 'sans serif bold italic upper E']);
  this.executeCharTest('𝙁', ['sans serif bold italic upper F', 'sans serif bold italic upper F', 'sans serif bold italic upper F']);
  this.executeCharTest('𝙂', ['sans serif bold italic upper G', 'sans serif bold italic upper G', 'sans serif bold italic upper G']);
  this.executeCharTest('𝙃', ['sans serif bold italic upper H', 'sans serif bold italic upper H', 'sans serif bold italic upper H']);
  this.executeCharTest('𝙄', ['sans serif bold italic upper I', 'sans serif bold italic upper I', 'sans serif bold italic upper I']);
  this.executeCharTest('𝙅', ['sans serif bold italic upper J', 'sans serif bold italic upper J', 'sans serif bold italic upper J']);
  this.executeCharTest('𝙆', ['sans serif bold italic upper K', 'sans serif bold italic upper K', 'sans serif bold italic upper K']);
  this.executeCharTest('𝙇', ['sans serif bold italic upper L', 'sans serif bold italic upper L', 'sans serif bold italic upper L']);
  this.executeCharTest('𝙈', ['sans serif bold italic upper M', 'sans serif bold italic upper M', 'sans serif bold italic upper M']);
  this.executeCharTest('𝙉', ['sans serif bold italic upper N', 'sans serif bold italic upper N', 'sans serif bold italic upper N']);
  this.executeCharTest('𝙊', ['sans serif bold italic upper O', 'sans serif bold italic upper O', 'sans serif bold italic upper O']);
  this.executeCharTest('𝙋', ['sans serif bold italic upper P', 'sans serif bold italic upper P', 'sans serif bold italic upper P']);
  this.executeCharTest('𝙌', ['sans serif bold italic upper Q', 'sans serif bold italic upper Q', 'sans serif bold italic upper Q']);
  this.executeCharTest('𝙍', ['sans serif bold italic upper R', 'sans serif bold italic upper R', 'sans serif bold italic upper R']);
  this.executeCharTest('𝙎', ['sans serif bold italic upper S', 'sans serif bold italic upper S', 'sans serif bold italic upper S']);
  this.executeCharTest('𝙏', ['sans serif bold italic upper T', 'sans serif bold italic upper T', 'sans serif bold italic upper T']);
  this.executeCharTest('𝙐', ['sans serif bold italic upper U', 'sans serif bold italic upper U', 'sans serif bold italic upper U']);
  this.executeCharTest('𝙑', ['sans serif bold italic upper V', 'sans serif bold italic upper V', 'sans serif bold italic upper V']);
  this.executeCharTest('𝙒', ['sans serif bold italic upper W', 'sans serif bold italic upper W', 'sans serif bold italic upper W']);
  this.executeCharTest('𝙓', ['sans serif bold italic upper X', 'sans serif bold italic upper X', 'sans serif bold italic upper X']);
  this.executeCharTest('𝙔', ['sans serif bold italic upper Y', 'sans serif bold italic upper Y', 'sans serif bold italic upper Y']);
  this.executeCharTest('𝙕', ['sans serif bold italic upper Z', 'sans serif bold italic upper Z', 'sans serif bold italic upper Z']);
  this.executeCharTest('𝙖', ['sans serif bold italic a', 'sans serif bold italic a', 'sans serif bold italic a']);
  this.executeCharTest('𝙗', ['sans serif bold italic b', 'sans serif bold italic b', 'sans serif bold italic b']);
  this.executeCharTest('𝙘', ['sans serif bold italic c', 'sans serif bold italic c', 'sans serif bold italic c']);
  this.executeCharTest('𝙙', ['sans serif bold italic d', 'sans serif bold italic d', 'sans serif bold italic d']);
  this.executeCharTest('𝙚', ['sans serif bold italic e', 'sans serif bold italic e', 'sans serif bold italic e']);
  this.executeCharTest('𝙛', ['sans serif bold italic f', 'sans serif bold italic f', 'sans serif bold italic f']);
  this.executeCharTest('𝙜', ['sans serif bold italic g', 'sans serif bold italic g', 'sans serif bold italic g']);
  this.executeCharTest('𝙝', ['sans serif bold italic h', 'sans serif bold italic h', 'sans serif bold italic h']);
  this.executeCharTest('𝙞', ['sans serif bold italic i', 'sans serif bold italic i', 'sans serif bold italic i']);
  this.executeCharTest('𝙟', ['sans serif bold italic j', 'sans serif bold italic j', 'sans serif bold italic j']);
  this.executeCharTest('𝙠', ['sans serif bold italic k', 'sans serif bold italic k', 'sans serif bold italic k']);
  this.executeCharTest('𝙡', ['sans serif bold italic l', 'sans serif bold italic l', 'sans serif bold italic l']);
  this.executeCharTest('𝙢', ['sans serif bold italic m', 'sans serif bold italic m', 'sans serif bold italic m']);
  this.executeCharTest('𝙣', ['sans serif bold italic n', 'sans serif bold italic n', 'sans serif bold italic n']);
  this.executeCharTest('𝙤', ['sans serif bold italic o', 'sans serif bold italic o', 'sans serif bold italic o']);
  this.executeCharTest('𝙥', ['sans serif bold italic p', 'sans serif bold italic p', 'sans serif bold italic p']);
  this.executeCharTest('𝙦', ['sans serif bold italic q', 'sans serif bold italic q', 'sans serif bold italic q']);
  this.executeCharTest('𝙧', ['sans serif bold italic r', 'sans serif bold italic r', 'sans serif bold italic r']);
  this.executeCharTest('𝙨', ['sans serif bold italic s', 'sans serif bold italic s', 'sans serif bold italic s']);
  this.executeCharTest('𝙩', ['sans serif bold italic t', 'sans serif bold italic t', 'sans serif bold italic t']);
  this.executeCharTest('𝙪', ['sans serif bold italic u', 'sans serif bold italic u', 'sans serif bold italic u']);
  this.executeCharTest('𝙫', ['sans serif bold italic v', 'sans serif bold italic v', 'sans serif bold italic v']);
  this.executeCharTest('𝙬', ['sans serif bold italic w', 'sans serif bold italic w', 'sans serif bold italic w']);
  this.executeCharTest('𝙭', ['sans serif bold italic x', 'sans serif bold italic x', 'sans serif bold italic x']);
  this.executeCharTest('𝙮', ['sans serif bold italic y', 'sans serif bold italic y', 'sans serif bold italic y']);
  this.executeCharTest('𝙯', ['sans serif bold italic z', 'sans serif bold italic z', 'sans serif bold italic z']);
  this.executeCharTest('𝖠', ['sans serif upper A', 'sans serif upper A', 'sans serif upper A']);
  this.executeCharTest('𝖡', ['sans serif upper B', 'sans serif upper B', 'sans serif upper B']);
  this.executeCharTest('𝖢', ['sans serif upper C', 'sans serif upper C', 'sans serif upper C']);
  this.executeCharTest('𝖣', ['sans serif upper D', 'sans serif upper D', 'sans serif upper D']);
  this.executeCharTest('𝖤', ['sans serif upper E', 'sans serif upper E', 'sans serif upper E']);
  this.executeCharTest('𝖥', ['sans serif upper F', 'sans serif upper F', 'sans serif upper F']);
  this.executeCharTest('𝖦', ['sans serif upper G', 'sans serif upper G', 'sans serif upper G']);
  this.executeCharTest('𝖧', ['sans serif upper H', 'sans serif upper H', 'sans serif upper H']);
  this.executeCharTest('𝖨', ['sans serif upper I', 'sans serif upper I', 'sans serif upper I']);
  this.executeCharTest('𝖩', ['sans serif upper J', 'sans serif upper J', 'sans serif upper J']);
  this.executeCharTest('𝖪', ['sans serif upper K', 'sans serif upper K', 'sans serif upper K']);
  this.executeCharTest('𝖫', ['sans serif upper L', 'sans serif upper L', 'sans serif upper L']);
  this.executeCharTest('𝖬', ['sans serif upper M', 'sans serif upper M', 'sans serif upper M']);
  this.executeCharTest('𝖭', ['sans serif upper N', 'sans serif upper N', 'sans serif upper N']);
  this.executeCharTest('𝖮', ['sans serif upper O', 'sans serif upper O', 'sans serif upper O']);
  this.executeCharTest('𝖯', ['sans serif upper P', 'sans serif upper P', 'sans serif upper P']);
  this.executeCharTest('𝖰', ['sans serif upper Q', 'sans serif upper Q', 'sans serif upper Q']);
  this.executeCharTest('𝖱', ['sans serif upper R', 'sans serif upper R', 'sans serif upper R']);
  this.executeCharTest('𝖲', ['sans serif upper S', 'sans serif upper S', 'sans serif upper S']);
  this.executeCharTest('𝖳', ['sans serif upper T', 'sans serif upper T', 'sans serif upper T']);
  this.executeCharTest('𝖴', ['sans serif upper U', 'sans serif upper U', 'sans serif upper U']);
  this.executeCharTest('𝖵', ['sans serif upper V', 'sans serif upper V', 'sans serif upper V']);
  this.executeCharTest('𝖶', ['sans serif upper W', 'sans serif upper W', 'sans serif upper W']);
  this.executeCharTest('𝖷', ['sans serif upper X', 'sans serif upper X', 'sans serif upper X']);
  this.executeCharTest('𝖸', ['sans serif upper Y', 'sans serif upper Y', 'sans serif upper Y']);
  this.executeCharTest('𝖹', ['sans serif upper Z', 'sans serif upper Z', 'sans serif upper Z']);
  this.executeCharTest('𝖺', ['sans serif a', 'sans serif a', 'sans serif a']);
  this.executeCharTest('𝖻', ['sans serif b', 'sans serif b', 'sans serif b']);
  this.executeCharTest('𝖼', ['sans serif c', 'sans serif c', 'sans serif c']);
  this.executeCharTest('𝖽', ['sans serif d', 'sans serif d', 'sans serif d']);
  this.executeCharTest('𝖾', ['sans serif e', 'sans serif e', 'sans serif e']);
  this.executeCharTest('𝖿', ['sans serif f', 'sans serif f', 'sans serif f']);
  this.executeCharTest('𝗀', ['sans serif g', 'sans serif g', 'sans serif g']);
  this.executeCharTest('𝗁', ['sans serif h', 'sans serif h', 'sans serif h']);
  this.executeCharTest('𝗂', ['sans serif i', 'sans serif i', 'sans serif i']);
  this.executeCharTest('𝗃', ['sans serif j', 'sans serif j', 'sans serif j']);
  this.executeCharTest('𝗄', ['sans serif k', 'sans serif k', 'sans serif k']);
  this.executeCharTest('𝗅', ['sans serif l', 'sans serif l', 'sans serif l']);
  this.executeCharTest('𝗆', ['sans serif m', 'sans serif m', 'sans serif m']);
  this.executeCharTest('𝗇', ['sans serif n', 'sans serif n', 'sans serif n']);
  this.executeCharTest('𝗈', ['sans serif o', 'sans serif o', 'sans serif o']);
  this.executeCharTest('𝗉', ['sans serif p', 'sans serif p', 'sans serif p']);
  this.executeCharTest('𝗊', ['sans serif q', 'sans serif q', 'sans serif q']);
  this.executeCharTest('𝗋', ['sans serif r', 'sans serif r', 'sans serif r']);
  this.executeCharTest('𝗌', ['sans serif s', 'sans serif s', 'sans serif s']);
  this.executeCharTest('𝗍', ['sans serif t', 'sans serif t', 'sans serif t']);
  this.executeCharTest('𝗎', ['sans serif u', 'sans serif u', 'sans serif u']);
  this.executeCharTest('𝗏', ['sans serif v', 'sans serif v', 'sans serif v']);
  this.executeCharTest('𝗐', ['sans serif w', 'sans serif w', 'sans serif w']);
  this.executeCharTest('𝗑', ['sans serif x', 'sans serif x', 'sans serif x']);
  this.executeCharTest('𝗒', ['sans serif y', 'sans serif y', 'sans serif y']);
  this.executeCharTest('𝗓', ['sans serif z', 'sans serif z', 'sans serif z']);
  this.executeCharTest('𝒜', ['script upper A', 'script upper A', 'script upper A']);
  this.executeCharTest('ℬ', ['script upper B', 'script upper B', 'script upper B']);
  this.executeCharTest('𝒞', ['script upper C', 'script upper C', 'script upper C']);
  this.executeCharTest('𝒟', ['script upper D', 'script upper D', 'script upper D']);
  this.executeCharTest('ℰ', ['script upper E', 'script upper E', 'script upper E']);
  this.executeCharTest('ℱ', ['script upper F', 'script upper F', 'script upper F']);
  this.executeCharTest('𝒢', ['script upper G', 'script upper G', 'script upper G']);
  this.executeCharTest('ℋ', ['script upper H', 'script upper H', 'script upper H']);
  this.executeCharTest('ℐ', ['script upper I', 'script upper I', 'script upper I']);
  this.executeCharTest('𝒥', ['script upper J', 'script upper J', 'script upper J']);
  this.executeCharTest('𝒦', ['script upper K', 'script upper K', 'script upper K']);
  this.executeCharTest('ℒ', ['script upper L', 'script upper L', 'script upper L']);
  this.executeCharTest('ℳ', ['script upper M', 'script upper M', 'script upper M']);
  this.executeCharTest('𝒩', ['script upper N', 'script upper N', 'script upper N']);
  this.executeCharTest('𝒪', ['script upper O', 'script upper O', 'script upper O']);
  this.executeCharTest('𝒫', ['script upper P', 'script upper P', 'script upper P']);
  this.executeCharTest('𝒬', ['script upper Q', 'script upper Q', 'script upper Q']);
  this.executeCharTest('ℛ', ['script upper R', 'script upper R', 'script upper R']);
  this.executeCharTest('𝒮', ['script upper S', 'script upper S', 'script upper S']);
  this.executeCharTest('𝒯', ['script upper T', 'script upper T', 'script upper T']);
  this.executeCharTest('𝒰', ['script upper U', 'script upper U', 'script upper U']);
  this.executeCharTest('𝒱', ['script upper V', 'script upper V', 'script upper V']);
  this.executeCharTest('𝒲', ['script upper W', 'script upper W', 'script upper W']);
  this.executeCharTest('𝒳', ['script upper X', 'script upper X', 'script upper X']);
  this.executeCharTest('𝒴', ['script upper Y', 'script upper Y', 'script upper Y']);
  this.executeCharTest('𝒵', ['script upper Z', 'script upper Z', 'script upper Z']);
  this.executeCharTest('𝒶', ['script a', 'script a', 'script a']);
  this.executeCharTest('𝒷', ['script b', 'script b', 'script b']);
  this.executeCharTest('𝒸', ['script c', 'script c', 'script c']);
  this.executeCharTest('𝒹', ['script d', 'script d', 'script d']);
  this.executeCharTest('ℯ', ['script e', 'script e', 'script e']);
  this.executeCharTest('𝒻', ['script f', 'script f', 'script f']);
  this.executeCharTest('ℊ', ['script g', 'script g', 'script g']);
  this.executeCharTest('𝒽', ['script h', 'script h', 'script h']);
  this.executeCharTest('𝒾', ['script i', 'script i', 'script i']);
  this.executeCharTest('𝒿', ['script j', 'script j', 'script j']);
  this.executeCharTest('𝓀', ['script k', 'script k', 'script k']);
  this.executeCharTest('𝓁', ['script l', 'script l', 'script l']);
  this.executeCharTest('𝓂', ['script m', 'script m', 'script m']);
  this.executeCharTest('𝓃', ['script n', 'script n', 'script n']);
  this.executeCharTest('ℴ', ['script o', 'script o', 'script o']);
  this.executeCharTest('𝓅', ['script p', 'script p', 'script p']);
  this.executeCharTest('𝓆', ['script q', 'script q', 'script q']);
  this.executeCharTest('𝓇', ['script r', 'script r', 'script r']);
  this.executeCharTest('𝓈', ['script s', 'script s', 'script s']);
  this.executeCharTest('𝓉', ['script t', 'script t', 'script t']);
  this.executeCharTest('𝓊', ['script u', 'script u', 'script u']);
  this.executeCharTest('𝓋', ['script v', 'script v', 'script v']);
  this.executeCharTest('𝓌', ['script w', 'script w', 'script w']);
  this.executeCharTest('𝓍', ['script x', 'script x', 'script x']);
  this.executeCharTest('𝓎', ['script y', 'script y', 'script y']);
  this.executeCharTest('𝓏', ['script z', 'script z', 'script z']);
  this.executeCharTest('⊾', ['right angle with arc', 'right angle with arc', 'right angle with arc']);
  this.executeCharTest('⍼', ['right angle with downwards zigzag arrow', 'right angle with downwards zigzag arrow', 'right angle with downwards zigzag arrow']);
  this.executeCharTest('⟀', ['three dimensional angle', 'three dimensional angle', 'three dimensional angle']);
  this.executeCharTest('⦛', ['measured angle opening left', 'measured angle opening left', 'measured angle opening left']);
  this.executeCharTest('⦜', ['right angle variant with square', 'right angle variant with square', 'right angle variant with square']);
  this.executeCharTest('⦝', ['measured right angle with dot', 'measured right angle with dot', 'measured right angle with dot']);
  this.executeCharTest('⦞', ['angle with s inside', 'angle with s inside', 'angle with s inside']);
  this.executeCharTest('⦟', ['acute angle', 'acute angle', 'acute angle']);
  this.executeCharTest('⦠', ['spherical angle opening left', 'spherical angle opening left', 'spherical angle opening left']);
  this.executeCharTest('⦡', ['spherical angle opening up', 'spherical angle opening up', 'spherical angle opening up']);
  this.executeCharTest('⦢', ['turned angle', 'turned angle', 'turned angle']);
  this.executeCharTest('⦣', ['reversed angle', 'reversed angle', 'reversed angle']);
  this.executeCharTest('⦤', ['angle with underbar', 'angle with underbar', 'angle with underbar']);
  this.executeCharTest('⦥', ['reversed angle with underbar', 'reversed angle with underbar', 'reversed angle with underbar']);
  this.executeCharTest('⦦', ['oblique angle opening up', 'oblique angle opening up', 'oblique angle opening up']);
  this.executeCharTest('⦧', ['oblique angle opening down', 'oblique angle opening down', 'oblique angle opening down']);
  this.executeCharTest('⦨', ['measured angle with open arm ending in arrow pointing up and right', 'measured angle with open arm ending in arrow pointing up and right', 'measured angle with open arm ending in arrow pointing up and right']);
  this.executeCharTest('⦩', ['measured angle with open arm ending in arrow pointing up and left', 'measured angle with open arm ending in arrow pointing up and left', 'measured angle with open arm ending in arrow pointing up and left']);
  this.executeCharTest('⦪', ['measured angle with open arm ending in arrow pointing down and right', 'measured angle with open arm ending in arrow pointing down and right', 'measured angle with open arm ending in arrow pointing down and right']);
  this.executeCharTest('⦫', ['measured angle with open arm ending in arrow pointing down and left', 'measured angle with open arm ending in arrow pointing down and left', 'measured angle with open arm ending in arrow pointing down and left']);
  this.executeCharTest('⦬', ['measured angle with open arm ending in arrow pointing right and up', 'measured angle with open arm ending in arrow pointing right and up', 'measured angle with open arm ending in arrow pointing right and up']);
  this.executeCharTest('⦭', ['measured angle with open arm ending in arrow pointing left and up', 'measured angle with open arm ending in arrow pointing left and up', 'measured angle with open arm ending in arrow pointing left and up']);
  this.executeCharTest('⦮', ['measured angle with open arm ending in arrow pointing right and down', 'measured angle with open arm ending in arrow pointing right and down', 'measured angle with open arm ending in arrow pointing right and down']);
  this.executeCharTest('⦯', ['measured angle with open arm ending in arrow pointing left and down', 'measured angle with open arm ending in arrow pointing left and down', 'measured angle with open arm ending in arrow pointing left and down']);
  this.executeCharTest('←', ['left-arrow', 'left-arrow', 'L arrow']);
  this.executeCharTest('↑', ['up-arrow', 'up-arrow', 'U arrow']);
  this.executeCharTest('→', ['right-arrow', 'right-arrow', 'R arrow']);
  this.executeCharTest('↓', ['down-arrow', 'down-arrow', 'D arrow']);
  this.executeCharTest('↔', ['left-right-arrow', 'left-right-arrow', 'L R arrow']);
  this.executeCharTest('↕', ['up down-arrow', 'up down-arrow', 'U D arrow']);
  this.executeCharTest('↖', ['up left-arrow', 'up left-arrow', 'U L arrow']);
  this.executeCharTest('↗', ['up right-arrow', 'up right-arrow', 'U R arrow']);
  this.executeCharTest('↘', ['down right-arrow', 'down right-arrow', 'D R arrow']);
  this.executeCharTest('↙', ['down left-arrow', 'down left-arrow', 'D L arrow']);
  this.executeCharTest('↚', ['left-arrow with stroke', 'left-arrow with stroke', 'L arrow with stroke']);
  this.executeCharTest('↛', ['right-arrow with stroke', 'right-arrow with stroke', 'R arrow with stroke']);
  this.executeCharTest('↜', ['left wave arrow', 'left wave arrow', 'L wave arrow']);
  this.executeCharTest('↝', ['right wave arrow', 'right wave arrow', 'R wave arrow']);
  this.executeCharTest('↞', ['two headed left-arrow', 'two headed left-arrow', 'two headed L arrow']);
  this.executeCharTest('↟', ['two headed up-arrow', 'two headed up-arrow', 'two headed U arrow']);
  this.executeCharTest('↠', ['two headed right-arrow', 'two headed right-arrow', 'two headed R arrow']);
  this.executeCharTest('↡', ['two headed down-arrow', 'two headed down-arrow', 'two headed D arrow']);
  this.executeCharTest('↢', ['left-arrow with tail', 'left-arrow with tail', 'L arrow with tail']);
  this.executeCharTest('↣', ['right-arrow with tail', 'right-arrow with tail', 'R arrow with tail']);
  this.executeCharTest('↤', ['left-arrow from bar', 'left-arrow from bar', 'L arrow from bar']);
  this.executeCharTest('↥', ['up-arrow from bar', 'up-arrow from bar', 'U arrow from bar']);
  this.executeCharTest('↦', ['right-arrow from bar', 'right-arrow from bar', 'R arrow from bar']);
  this.executeCharTest('↧', ['down-arrow from bar', 'down-arrow from bar', 'D arrow from bar']);
  this.executeCharTest('↨', ['up down-arrow with base', 'up down-arrow with base', 'U D arrow with base']);
  this.executeCharTest('↩', ['left-arrow with hook', 'left-arrow with hook', 'L arrow with hook']);
  this.executeCharTest('↪', ['right-arrow with hook', 'right-arrow with hook', 'R arrow with hook']);
  this.executeCharTest('↫', ['left-arrow with loop', 'left-arrow with loop', 'L arrow with loop']);
  this.executeCharTest('↬', ['right-arrow with loop', 'right-arrow with loop', 'R arrow with loop']);
  this.executeCharTest('↭', ['left right wave arrow', 'left right wave arrow', 'L R wave arrow']);
  this.executeCharTest('↮', ['left-right-arrow with stroke', 'left-right-arrow with stroke', 'L R arrow with stroke']);
  this.executeCharTest('↯', ['down zigzag arrow', 'down zigzag arrow', 'd zigzag arrow']);
  this.executeCharTest('↰', ['up-arrow with tip left', 'up-arrow with tip left', 'U arrow with tip left']);
  this.executeCharTest('↱', ['up-arrow with tip right', 'up-arrow with tip right', 'U arrow with tip right']);
  this.executeCharTest('↲', ['down-arrow with tip left', 'down-arrow with tip left', 'D arrow with tip left']);
  this.executeCharTest('↳', ['down-arrow with tip right', 'down-arrow with tip right', 'D arrow with tip right']);
  this.executeCharTest('↴', ['right-arrow with corner down', 'right-arrow with corner down', 'R arrow with corner down']);
  this.executeCharTest('↵', ['down-arrow with corner left', 'down-arrow with corner left', 'D arrow with corner left']);
  this.executeCharTest('↶', ['anticlockwise top semicircle arrow', 'anticlockwise top semicircle arrow', 'anticlockwise top semicircle arrow']);
  this.executeCharTest('↷', ['clockwise top semicircle arrow', 'clockwise top semicircle arrow', 'clockwise top semicircle arrow']);
  this.executeCharTest('↸', ['up left-arrow to long bar', 'up left-arrow to long bar', 'U L arrow to long bar']);
  this.executeCharTest('↹', ['left-arrow to bar over right-arrow to bar', 'left-arrow to bar over right-arrow to bar', 'L arrow to bar over R arrow to bar']);
  this.executeCharTest('↺', ['anticlockwise open circle arrow', 'anticlockwise open circle arrow', 'anticlockwise open circle arrow']);
  this.executeCharTest('↻', ['clockwise open circle arrow', 'clockwise open circle arrow', 'clockwise open circle arrow']);
  this.executeCharTest('⇄', ['right-arrow over left-arrow', 'right-arrow over left-arrow', 'R arrow over L arrow']);
  this.executeCharTest('⇅', ['up-arrow left of down-arrow', 'up-arrow left of down-arrow', 'U arrow L of D arrow']);
  this.executeCharTest('⇆', ['left-arrow over right-arrow', 'left-arrow over right-arrow', 'L arrow over R arrow']);
  this.executeCharTest('⇇', ['left paired arrows', 'left paired arrows', 'L paired arrows']);
  this.executeCharTest('⇈', ['up paired arrows', 'up paired arrows', 'U paired arrows']);
  this.executeCharTest('⇉', ['right paired arrows', 'right paired arrows', 'R paired arrows']);
  this.executeCharTest('⇊', ['down paired arrows', 'down paired arrows', 'D paired arrows']);
  this.executeCharTest('⇍', ['left double arrow with stroke', 'left double arrow with stroke', 'L double arrow with stroke']);
  this.executeCharTest('⇎', ['left right double arrow with stroke', 'left right double arrow with stroke', 'L R double arrow with stroke']);
  this.executeCharTest('⇏', ['right double arrow with stroke', 'right double arrow with stroke', 'R double arrow with stroke']);
  this.executeCharTest('⇐', ['left double arrow', 'left double arrow', 'L double arrow']);
  this.executeCharTest('⇑', ['up double arrow', 'up double arrow', 'U double arrow']);
  this.executeCharTest('⇒', ['right double arrow', 'right double arrow', 'R double arrow']);
  this.executeCharTest('⇓', ['down double arrow', 'down double arrow', 'd double arrow']);
  this.executeCharTest('⇔', ['left right double arrow', 'left right double arrow', 'L R double arrow']);
  this.executeCharTest('⇕', ['up down double arrow', 'up down double arrow', 'U d double arrow']);
  this.executeCharTest('⇖', ['up left double arrow', 'up left double arrow', 'U L double arrow']);
  this.executeCharTest('⇗', ['up right double arrow', 'up right double arrow', 'U R double arrow']);
  this.executeCharTest('⇘', ['down right double arrow', 'down right double arrow', 'd R double arrow']);
  this.executeCharTest('⇙', ['down left double arrow', 'down left double arrow', 'd L double arrow']);
  this.executeCharTest('⇚', ['left triple arrow', 'left triple arrow', 'L triple arrow']);
  this.executeCharTest('⇛', ['right triple arrow', 'right triple arrow', 'r triple arrow']);
  this.executeCharTest('⇜', ['left squiggle arrow', 'left squiggle arrow', 'L squiggle arrow']);
  this.executeCharTest('⇝', ['right squiggle arrow', 'right squiggle arrow', 'r squiggle arrow']);
  this.executeCharTest('⇞', ['up-arrow with double stroke', 'up-arrow with double stroke', 'U arrow with double stroke']);
  this.executeCharTest('⇟', ['down-arrow with double stroke', 'down-arrow with double stroke', 'D arrow with double stroke']);
  this.executeCharTest('⇠', ['left dasheD arrow', 'left dasheD arrow', 'L dasheD arrow']);
  this.executeCharTest('⇡', ['up dasheD arrow', 'up dasheD arrow', 'U dasheD arrow']);
  this.executeCharTest('⇢', ['right dasheD arrow', 'right dasheD arrow', 'r dasheD arrow']);
  this.executeCharTest('⇣', ['down dasheD arrow', 'down dasheD arrow', 'd dasheD arrow']);
  this.executeCharTest('⇤', ['left-arrow to bar', 'left-arrow to bar', 'L arrow to bar']);
  this.executeCharTest('⇥', ['right-arrow to bar', 'right-arrow to bar', 'R arrow to bar']);
  this.executeCharTest('⇦', ['white left-arrow', 'white left-arrow', 'white L arrow']);
  this.executeCharTest('⇧', ['white up-arrow', 'white up-arrow', 'white U arrow']);
  this.executeCharTest('⇨', ['white right-arrow', 'white right-arrow', 'white R arrow']);
  this.executeCharTest('⇩', ['white down-arrow', 'white down-arrow', 'white D arrow']);
  this.executeCharTest('⇪', ['white up-arrow from bar', 'white up-arrow from bar', 'white U arrow from bar']);
  this.executeCharTest('⇫', ['white up-arrow on pedestal', 'white up-arrow on pedestal', 'white U arrow on pedestal']);
  this.executeCharTest('⇬', ['white up-arrow on pedestal with horizontal bar', 'white up-arrow on pedestal with horizontal bar', 'white U arrow on pedestal with horizontal bar']);
  this.executeCharTest('⇭', ['white up-arrow on pedestal with vertical bar', 'white up-arrow on pedestal with vertical bar', 'white U arrow on pedestal with vertical bar']);
  this.executeCharTest('⇮', ['white double up-arrow', 'white double up-arrow', 'white double U arrow']);
  this.executeCharTest('⇯', ['white double up-arrow on pedestal', 'white double up-arrow on pedestal', 'white double U arrow on pedestal']);
  this.executeCharTest('⇰', ['white right-arrow from wall', 'white right-arrow from wall', 'white R arrow from wall']);
  this.executeCharTest('⇱', ['north west arrow to corner', 'north west arrow to corner', 'north west arrow to corner']);
  this.executeCharTest('⇲', ['south east arrow to corner', 'south east arrow to corner', 'south east arrow to corner']);
  this.executeCharTest('⇳', ['up down white arrow', 'up down white arrow', 'U d white arrow']);
  this.executeCharTest('⇴', ['right-arrow with small circle', 'right-arrow with small circle', 'R arrow with small circle']);
  this.executeCharTest('⇵', ['down-arrow left of up-arrow', 'down-arrow left of up-arrow', 'D arrow l of U arrow']);
  this.executeCharTest('⇶', ['three right-arrows', 'three right-arrows', 'three R arrows']);
  this.executeCharTest('⇷', ['left-arrow with vertical stroke', 'left-arrow with vertical stroke', 'L arrow with vertical stroke']);
  this.executeCharTest('⇸', ['right-arrow with vertical stroke', 'right-arrow with vertical stroke', 'R arrow with vertical stroke']);
  this.executeCharTest('⇹', ['left-right-arrow with vertical stroke', 'left-right-arrow with vertical stroke', 'L R arrow with vertical stroke']);
  this.executeCharTest('⇺', ['left-arrow with double vertical stroke', 'left-arrow with double vertical stroke', 'L arrow with double vertical stroke']);
  this.executeCharTest('⇻', ['right-arrow with double vertical stroke', 'right-arrow with double vertical stroke', 'R arrow with double vertical stroke']);
  this.executeCharTest('⇼', ['left-right-arrow with double vertical stroke', 'left-right-arrow with double vertical stroke', 'L R arrow with double vertical stroke']);
  this.executeCharTest('⇽', ['left open headed arrow', 'left open headed arrow', 'l open headed arrow']);
  this.executeCharTest('⇾', ['right open headed arrow', 'right open headed arrow', 'r open headed arrow']);
  this.executeCharTest('⇿', ['left right open headed arrow', 'left right open headed arrow', 'L R open headed arrow']);
  this.executeCharTest('⌁', ['electric arrow', 'electric arrow', 'electric arrow']);
  this.executeCharTest('⌃', ['up-arrowhead', 'up-arrowhead', 'U arrowhead']);
  this.executeCharTest('⌄', ['down-arrowhead', 'down-arrowhead', 'D arrowhead']);
  this.executeCharTest('⌤', ['up-arrowhead between two horizontal bars', 'up-arrowhead between two horizontal bars', 'U arrowhead between two horizontal bars']);
  this.executeCharTest('⎋', ['broken circle with northwest arrow', 'broken circle with northwest arrow', 'broken circle with northwest arrow']);
  this.executeCharTest('➔', ['heavy wide headed right-arrow', 'heavy wide headed right-arrow', 'heavy wide headed R arrow']);
  this.executeCharTest('➘', ['heavy down right-arrow', 'heavy down right-arrow', 'heavy d R arrow']);
  this.executeCharTest('➙', ['heavy right-arrow', 'heavy right-arrow', 'heavy R arrow']);
  this.executeCharTest('➚', ['heavy up right-arrow', 'heavy up right-arrow', 'heavy U R arrow']);
  this.executeCharTest('➛', ['drafting point right-arrow', 'drafting point right-arrow', 'drafting point R arrow']);
  this.executeCharTest('➜', ['heavy round tipped right-arrow', 'heavy round tipped right-arrow', 'heavy round tipped R arrow']);
  this.executeCharTest('➝', ['triangle headed right-arrow', 'triangle headed right-arrow', 'triangle headed R arrow']);
  this.executeCharTest('➞', ['heavy triangle headed right-arrow', 'heavy triangle headed right-arrow', 'heavy triangle headed R arrow']);
  this.executeCharTest('➟', ['dashed triangle headed right-arrow', 'dashed triangle headed right-arrow', 'dashed triangle headed R arrow']);
  this.executeCharTest('➠', ['heavy dashed triangle headed right-arrow', 'heavy dashed triangle headed right-arrow', 'heavy dashed triangle headed R arrow']);
  this.executeCharTest('➡', ['black right-arrow', 'black right-arrow', 'black R arrow']);
  this.executeCharTest('➢', ['three d top lighted right-arrowhead', 'three d top lighted right-arrowhead', 'three d top lighted R arrowhead']);
  this.executeCharTest('➣', ['three d bottom lighted right-arrowhead', 'three d bottom lighted right-arrowhead', 'three d bottom lighted R arrowhead']);
  this.executeCharTest('➤', ['black right-arrowhead', 'black right-arrowhead', 'black R arrowhead']);
  this.executeCharTest('➥', ['heavy black curved down and right-arrow', 'heavy black curved down and right-arrow', 'heavy black curved d and R arrow']);
  this.executeCharTest('➦', ['heavy black curved up and right-arrow', 'heavy black curved up and right-arrow', 'heavy black curved U and R arrow']);
  this.executeCharTest('➧', ['squat black right-arrow', 'squat black right-arrow', 'squat black R arrow']);
  this.executeCharTest('➨', ['heavy concave pointed black right-arrow', 'heavy concave pointed black right-arrow', 'heavy concave pointed black R arrow']);
  this.executeCharTest('➩', ['right shaded white right-arrow', 'right shaded white right-arrow', 'right shaded white R arrow']);
  this.executeCharTest('➪', ['left shaded white right-arrow', 'left shaded white right-arrow', 'left shaded white R arrow']);
  this.executeCharTest('➫', ['back tilted shadowed white right-arrow', 'back tilted shadowed white right-arrow', 'back tilted shadowed white R arrow']);
  this.executeCharTest('➬', ['front tilted shadowed white right-arrow', 'front tilted shadowed white right-arrow', 'front tilted shadowed white R arrow']);
  this.executeCharTest('➭', ['heavy lower right shadowed white right-arrow', 'heavy lower right shadowed white right-arrow', 'heavy lower right shadowed white R arrow']);
  this.executeCharTest('➮', ['heavy upper right shadowed white right-arrow', 'heavy upper right shadowed white right-arrow', 'heavy upper right shadowed white R arrow']);
  this.executeCharTest('➯', ['notched lower right shadowed white right-arrow', 'notched lower right shadowed white right-arrow', 'notched lower right shadowed white R arrow']);
  this.executeCharTest('➱', ['notched upper right shadowed white right-arrow', 'notched upper right shadowed white right-arrow', 'notched upper right shadowed white R arrow']);
  this.executeCharTest('➲', ['circled heavy white right-arrow', 'circled heavy white right-arrow', 'circled heavy white R arrow']);
  this.executeCharTest('➳', ['white feathered right-arrow', 'white feathered right-arrow', 'white feathered R arrow']);
  this.executeCharTest('➴', ['black feathered down right-arrow', 'black feathered down right-arrow', 'black feathered d R arrow']);
  this.executeCharTest('➵', ['black feathered right-arrow', 'black feathered right-arrow', 'black feathered R arrow']);
  this.executeCharTest('➶', ['black feathered up right-arrow', 'black feathered up right-arrow', 'black feathered U R arrow']);
  this.executeCharTest('➷', ['heavy black feathered down right-arrow', 'heavy black feathered down right-arrow', 'heavy black feathered d R arrow']);
  this.executeCharTest('➸', ['heavy black feathered right-arrow', 'heavy black feathered right-arrow', 'heavy black feathered R arrow']);
  this.executeCharTest('➹', ['heavy black feathered up right-arrow', 'heavy black feathered up right-arrow', 'heavy black feathered U R arrow']);
  this.executeCharTest('➺', ['teardrop barbed right-arrow', 'teardrop barbed right-arrow', 'teardrop barbed R arrow']);
  this.executeCharTest('➻', ['heavy teardrop shanked right-arrow', 'heavy teardrop shanked right-arrow', 'heavy teardrop shanked R arrow']);
  this.executeCharTest('➼', ['wedge tailed right-arrow', 'wedge tailed right-arrow', 'wedge tailed R arrow']);
  this.executeCharTest('➽', ['heavy wedge tailed right-arrow', 'heavy wedge tailed right-arrow', 'heavy wedge tailed R arrow']);
  this.executeCharTest('➾', ['open outlined right-arrow', 'open outlined right-arrow', 'open outlined R arrow']);
  this.executeCharTest('⟰', ['up quadruple arrow', 'up quadruple arrow', 'U quadruple arrow']);
  this.executeCharTest('⟱', ['down quadruple arrow', 'down quadruple arrow', 'd quadrule arrow']);
  this.executeCharTest('⟲', ['anticlockwise gapped circle arrow', 'anticlockwise gapped circle arrow', 'anticlockwise gapped circle arrow']);
  this.executeCharTest('⟳', ['clockwise gapped circle arrow', 'clockwise gapped circle arrow', 'clockwise gapped circle arrow']);
  this.executeCharTest('⟴', ['right-arrow with circled plus', 'right-arrow with circled plus', 'R arrow with circled plus']);
  this.executeCharTest('⟵', ['long left-arrow', 'long left-arrow', 'long L arrow']);
  this.executeCharTest('⟶', ['long right-arrow', 'long right-arrow', 'long R arrow']);
  this.executeCharTest('⟷', ['long left-right-arrow', 'long left-right-arrow', 'long L R arrow']);
  this.executeCharTest('⟸', ['long left double arrow', 'long left double arrow', 'long l double arrow']);
  this.executeCharTest('⟹', ['long right double arrow', 'long right double arrow', 'long R double arrow']);
  this.executeCharTest('⟺', ['long left right double arrow', 'long left right double arrow', 'long L R double arrow']);
  this.executeCharTest('⟻', ['long left-arrow from bar', 'long left-arrow from bar', 'long L arrow from bar']);
  this.executeCharTest('⟼', ['long right-arrow from bar', 'long right-arrow from bar', 'long R arrow from bar']);
  this.executeCharTest('⟽', ['long left double arrow from bar', 'long left double arrow from bar', 'long l double arrow from bar']);
  this.executeCharTest('⟾', ['long right double arrow from bar', 'long right double arrow from bar', 'long R double arrow from bar']);
  this.executeCharTest('⟿', ['long right squiggle arrow', 'long right squiggle arrow', 'long r squiggle arrow']);
  this.executeCharTest('⤀', ['two headed right-arrow with vertical stroke', 'two headed right-arrow with vertical stroke', 'two headed R arrow with vertical stroke']);
  this.executeCharTest('⤁', ['two headed right-arrow with double vertical stroke', 'two headed right-arrow with double vertical stroke', 'two headed R arrow with double vertical stroke']);
  this.executeCharTest('⤂', ['double left-arrow with vertical stroke', 'double left-arrow with vertical stroke', 'double L arrow with vertical stroke']);
  this.executeCharTest('⤃', ['double right-arrow with vertical stroke', 'double right-arrow with vertical stroke', 'double R arrow with vertical stroke']);
  this.executeCharTest('⤄', ['double left-right-arrow with vertical stroke', 'double left-right-arrow with vertical stroke', 'double L R arrow with vertical stroke']);
  this.executeCharTest('⤅', ['two headed right-arrow from bar', 'two headed right-arrow from bar', 'two headed R arrow from bar']);
  this.executeCharTest('⤆', ['double left-arrow from bar', 'double left-arrow from bar', 'double L arrow from bar']);
  this.executeCharTest('⤇', ['double right-arrow from bar', 'double right-arrow from bar', 'double R arrow from bar']);
  this.executeCharTest('⤈', ['arrow down with horizontal stroke', 'arrow down with horizontal stroke', 'arrow down with horizontal stroke']);
  this.executeCharTest('⤉', ['up-arrow with horizontal stroke', 'up-arrow with horizontal stroke', 'U arrow with horizontal stroke']);
  this.executeCharTest('⤊', ['up triple arrow', 'up triple arrow', 'U triple arrow']);
  this.executeCharTest('⤋', ['down triple arrow', 'down triple arrow', 'd triple arrow']);
  this.executeCharTest('⤌', ['left double dash arrow', 'left double dash arrow', 'l double dash arrow']);
  this.executeCharTest('⤍', ['right double dash arrow', 'right double dash arrow', 'R double dash arrow']);
  this.executeCharTest('⤎', ['left triple dash arrow', 'left triple dash arrow', 'l triple dash arrow']);
  this.executeCharTest('⤏', ['right triple dash arrow', 'right triple dash arrow', 'r triple dash arrow']);
  this.executeCharTest('⤐', ['right two headed triple dash arrow', 'right two headed triple dash arrow', 'r two headed triple dash arrow']);
  this.executeCharTest('⤑', ['right-arrow with dotted stem', 'right-arrow with dotted stem', 'R arrow with dotted stem']);
  this.executeCharTest('⤒', ['up-arrow to bar', 'up-arrow to bar', 'U arrow to bar']);
  this.executeCharTest('⤓', ['down-arrow to bar', 'down-arrow to bar', 'D arrow to bar']);
  this.executeCharTest('⤔', ['right-arrow with tail with vertical stroke', 'right-arrow with tail with vertical stroke', 'R arrow with tail with vertical stroke']);
  this.executeCharTest('⤕', ['right-arrow with tail with double vertical stroke', 'right-arrow with tail with double vertical stroke', 'R arrow with tail with double vertical stroke']);
  this.executeCharTest('⤖', ['right two headed arrow with tail', 'right two headed arrow with tail', 'r two headed arrow with tail']);
  this.executeCharTest('⤗', ['right two headed arrow with tail with vertical stroke', 'right two headed arrow with tail with vertical stroke', 'r two headed arrow with tail with vertical stroke']);
  this.executeCharTest('⤘', ['right two headed arrow with tail with double vertical stroke', 'right two headed arrow with tail with double vertical stroke', 'r two headed arrow with tail with double vertical stroke']);
  this.executeCharTest('⤙', ['left-arrow tail', 'left-arrow tail', 'L arrow tail']);
  this.executeCharTest('⤚', ['right-arrow tail', 'right-arrow tail', 'R arrow tail']);
  this.executeCharTest('⤛', ['left double arrow tail', 'left double arrow tail', 'l double arrow tail']);
  this.executeCharTest('⤜', ['right double arrow tail', 'right double arrow tail', 'R double arrow tail']);
  this.executeCharTest('⤝', ['left-arrow to black diamond', 'left-arrow to black diamond', 'L arrow to black diamond']);
  this.executeCharTest('⤞', ['right-arrow to black diamond', 'right-arrow to black diamond', 'R arrow to black diamond']);
  this.executeCharTest('⤟', ['left-arrow from bar to black diamond', 'left-arrow from bar to black diamond', 'L arrow from bar to black diamond']);
  this.executeCharTest('⤠', ['right-arrow from bar to black diamond', 'right-arrow from bar to black diamond', 'R arrow from bar to black diamond']);
  this.executeCharTest('⤡', ['north west and south east arrow', 'north west and south east arrow', 'north west and south east arrow']);
  this.executeCharTest('⤢', ['north east and south west arrow', 'north east and south west arrow', 'north east and south west arrow']);
  this.executeCharTest('⤣', ['north west arrow with hook', 'north west arrow with hook', 'north west arrow with hook']);
  this.executeCharTest('⤤', ['north east arrow with hook', 'north east arrow with hook', 'north east arrow with hook']);
  this.executeCharTest('⤥', ['south east arrow with hook', 'south east arrow with hook', 'south east arrow with hook']);
  this.executeCharTest('⤦', ['south west arrow with hook', 'south west arrow with hook', 'south west arrow with hook']);
  this.executeCharTest('⤧', ['north west arrow and north east arrow', 'north west arrow and north east arrow', 'north west arrow and north east arrow']);
  this.executeCharTest('⤨', ['north east arrow and south east arrow', 'north east arrow and south east arrow', 'north east arrow and south east arrow']);
  this.executeCharTest('⤩', ['south east arrow and south west arrow', 'south east arrow and south west arrow', 'south east arrow and south west arrow']);
  this.executeCharTest('⤪', ['south west arrow and north west arrow', 'south west arrow and north west arrow', 'south west arrow and north west arrow']);
  this.executeCharTest('⤭', ['south east arrow crossing north east arrow', 'south east arrow crossing north east arrow', 'south east arrow crossing north east arrow']);
  this.executeCharTest('⤮', ['north east arrow crossing south east arrow', 'north east arrow crossing south east arrow', 'north east arrow crossing south east arrow']);
  this.executeCharTest('⤯', ['falling diagonal crossing north east arrow', 'falling diagonal crossing north east arrow', 'falling diagonal crossing north east arrow']);
  this.executeCharTest('⤰', ['rising diagonal crossing south east arrow', 'rising diagonal crossing south east arrow', 'rising diagonal crossing south east arrow']);
  this.executeCharTest('⤱', ['north east arrow crossing north west arrow', 'north east arrow crossing north west arrow', 'north east arrow crossing north west arrow']);
  this.executeCharTest('⤲', ['north west arrow crossing north east arrow', 'north west arrow crossing north east arrow', 'north west arrow crossing north east arrow']);
  this.executeCharTest('⤳', ['wave arrow pointing directly right', 'wave arrow pointing directly right', 'wave arrow pointing directly right']);
  this.executeCharTest('⤴', ['arrow pointing right then curving up', 'arrow pointing right then curving up', 'arrow pointing right then curving up']);
  this.executeCharTest('⤵', ['arrow pointing right then curving down', 'arrow pointing right then curving down', 'arrow pointing right then curving down']);
  this.executeCharTest('⤶', ['arrow pointing down then curving left', 'arrow pointing down then curving left', 'arrow pointing down then curving left']);
  this.executeCharTest('⤷', ['arrow pointing down then curving right', 'arrow pointing down then curving right', 'arrow pointing down then curving right']);
  this.executeCharTest('⤸', ['right side arc clockwise arrow', 'right side arc clockwise arrow', 'r side arc clockwise arrow']);
  this.executeCharTest('⤹', ['left side arc anticlockwise arrow', 'left side arc anticlockwise arrow', 'l side arc anticlockwise arrow']);
  this.executeCharTest('⤺', ['top arc anticlockwise arrow', 'top arc anticlockwise arrow', 'top arc anticlockwise arrow']);
  this.executeCharTest('⤻', ['bottom arc anticlockwise arrow', 'bottom arc anticlockwise arrow', 'bottom arc anticlockwise arrow']);
  this.executeCharTest('⤼', ['top arc clockwise arrow with minus', 'top arc clockwise arrow with minus', 'top arc clockwise arrow with minus']);
  this.executeCharTest('⤽', ['top arc anticlockwise arrow with plus', 'top arc anticlockwise arrow with plus', 'top arc anticlockwise arrow with plus']);
  this.executeCharTest('⤾', ['down right semicircular clockwise arrow', 'down right semicircular clockwise arrow', 'd r semicircular clockwise arrow']);
  this.executeCharTest('⤿', ['down left semicircular anticlockwise arrow', 'down left semicircular anticlockwise arrow', 'd l semicircular anticlockwise arrow']);
  this.executeCharTest('⥀', ['anticlockwise closed circle arrow', 'anticlockwise closed circle arrow', 'anticlockwise closed circle arrow']);
  this.executeCharTest('⥁', ['clockwise closed circle arrow', 'clockwise closed circle arrow', 'clockwise closed circle arrow']);
  this.executeCharTest('⥂', ['right-arrow above short left-arrow', 'right-arrow above short left-arrow', 'R arrow above short L arrow']);
  this.executeCharTest('⥃', ['left-arrow above short right-arrow', 'left-arrow above short right-arrow', 'L arrow above short R arrow']);
  this.executeCharTest('⥄', ['short right-arrow above left-arrow', 'short right-arrow above left-arrow', 'short R arrow above L arrow']);
  this.executeCharTest('⥅', ['right-arrow with plus below', 'right-arrow with plus below', 'R arrow with plus below']);
  this.executeCharTest('⥆', ['left-arrow with plus below', 'left-arrow with plus below', 'L arrow with plus below']);
  this.executeCharTest('⥇', ['right-arrow through x', 'right-arrow through x', 'R arrow through x']);
  this.executeCharTest('⥈', ['left-right-arrow through small circle', 'left-right-arrow through small circle', 'L R arrow through small circle']);
  this.executeCharTest('⥉', ['up two headed arrow from small circle', 'up two headed arrow from small circle', 'U two headed arrow from small circle']);
  this.executeCharTest('⥰', ['right double arrow with rounded head', 'right double arrow with rounded head', 'R double arrow with rounded head']);
  this.executeCharTest('⥱', ['equals sign above right-arrow', 'equals sign above right-arrow', 'equals sign above R arrow']);
  this.executeCharTest('⥲', ['tilde operator above right-arrow', 'tilde operator above right-arrow', 'tilde operator above R arrow']);
  this.executeCharTest('⥳', ['left-arrow above tilde operator', 'left-arrow above tilde operator', 'L arrow above tilde operator']);
  this.executeCharTest('⥴', ['right-arrow above tilde operator', 'right-arrow above tilde operator', 'R arrow above tilde operator']);
  this.executeCharTest('⥵', ['right-arrow above almost equals', 'right-arrow above almost equals', 'R arrow above almost equals']);
  this.executeCharTest('⥶', ['less than above left-arrow', 'less than above left-arrow', 'less than above L arrow']);
  this.executeCharTest('⥷', ['left-arrow through less than', 'left-arrow through less than', 'L arrow through less than']);
  this.executeCharTest('⥸', ['greater than above right-arrow', 'greater than above right-arrow', 'greater than above R arrow']);
  this.executeCharTest('⥹', ['subset above right-arrow', 'subset above right-arrow', 'subset above R arrow']);
  this.executeCharTest('⥺', ['left-arrow through subset', 'left-arrow through subset', 'L arrow through subset']);
  this.executeCharTest('⥻', ['superset above left-arrow', 'superset above left-arrow', 'suerset above L arrow']);
  this.executeCharTest('⦳', ['empty set with right-arrow above', 'empty set with right-arrow above', 'empty set with R arrow above']);
  this.executeCharTest('⦴', ['empty set with left-arrow above', 'empty set with left-arrow above', 'empty set with L arrow above']);
  this.executeCharTest('⦽', ['up-arrow through circle', 'up-arrow through circle', 'U arrow through circle']);
  this.executeCharTest('⧪', ['black diamond with down-arrow', 'black diamond with down-arrow', 'black diamond with D arrow']);
  this.executeCharTest('⧬', ['white circle with down-arrow', 'white circle with down-arrow', 'white circle with D arrow']);
  this.executeCharTest('⧭', ['black circle with down-arrow', 'black circle with down-arrow', 'black circle with D arrow']);
  this.executeCharTest('⨗', ['integral with left-arrow with hook', 'integral with left-arrow with hook', 'integral with L arrow with hook']);
  this.executeCharTest('⬀', ['north east white arrow', 'north east white arrow', 'north east white arrow']);
  this.executeCharTest('⬁', ['north west white arrow', 'north west white arrow', 'north west white arrow']);
  this.executeCharTest('⬂', ['south east white arrow', 'south east white arrow', 'south east white arrow']);
  this.executeCharTest('⬃', ['south west white arrow', 'south west white arrow', 'south west white arrow']);
  this.executeCharTest('⬄', ['left right white arrow', 'left right white arrow', 'L R white arrow']);
  this.executeCharTest('⬅', ['left black arrow', 'left black arrow', 'L black arrow']);
  this.executeCharTest('⬆', ['up black arrow', 'up black arrow', 'U black arrow']);
  this.executeCharTest('⬇', ['down black arrow', 'down black arrow', 'D black arrow']);
  this.executeCharTest('⬈', ['north east black arrow', 'north east black arrow', 'north east black arrow']);
  this.executeCharTest('⬉', ['north west black arrow', 'north west black arrow', 'north west black arrow']);
  this.executeCharTest('⬊', ['south east black arrow', 'south east black arrow', 'south east black arrow']);
  this.executeCharTest('⬋', ['south west black arrow', 'south west black arrow', 'south west black arrow']);
  this.executeCharTest('⬌', ['left right black arrow', 'left right black arrow', 'L R black arrow']);
  this.executeCharTest('⬍', ['up down black arrow', 'up down black arrow', 'U D black arrow']);
  this.executeCharTest('⬎', ['right-arrow with tip down', 'right-arrow with tip down', 'R arrow with tip down']);
  this.executeCharTest('⬏', ['right-arrow with tip up', 'right-arrow with tip up', 'R arrow with tip up']);
  this.executeCharTest('⬐', ['left-arrow with tip down', 'left-arrow with tip down', 'L arrow with tip down']);
  this.executeCharTest('⬑', ['left-arrow with tip up', 'left-arrow with tip up', 'L arrow with tip up']);
  this.executeCharTest('⬰', ['left-arrow with small circle', 'left-arrow with small circle', 'L arrow with small circle']);
  this.executeCharTest('⬱', ['three left-arrows', 'three left-arrows', 'three L arrows']);
  this.executeCharTest('⬲', ['left-arrow with circled plus', 'left-arrow with circled plus', 'L arrow with circled plus']);
  this.executeCharTest('⬳', ['long left squiggle arrow', 'long left squiggle arrow', 'long l squiggle arrow']);
  this.executeCharTest('⬴', ['left two headed arrow with vertical stroke', 'left two headed arrow with vertical stroke', 'l two headed arrow with vertical stroke']);
  this.executeCharTest('⬵', ['left two headed arrow with double vertical stroke', 'left two headed arrow with double vertical stroke', 'l two headed arrow with double vertical stroke']);
  this.executeCharTest('⬶', ['left two headed arrow from bar', 'left two headed arrow from bar', 'l two headed arrow from bar']);
  this.executeCharTest('⬷', ['left two headed triple dash arrow', 'left two headed triple dash arrow', 'l two headed triple dash arrow']);
  this.executeCharTest('⬸', ['left-arrow with dotted stem', 'left-arrow with dotted stem', 'L arrow with dotted stem']);
  this.executeCharTest('⬹', ['left-arrow with tail with vertical stroke', 'left-arrow with tail with vertical stroke', 'L arrow with tail with vertical stroke']);
  this.executeCharTest('⬺', ['left-arrow with tail with double vertical stroke', 'left-arrow with tail with double vertical stroke', 'L arrow with tail with double vertical stroke']);
  this.executeCharTest('⬻', ['left two headed arrow with tail', 'left two headed arrow with tail', 'l two headed arrow with tail']);
  this.executeCharTest('⬼', ['left two headed arrow with tail with vertical stroke', 'left two headed arrow with tail with vertical stroke', 'l two headed arrow with tail with vertical stroke']);
  this.executeCharTest('⬽', ['left two headed arrow with tail with double vertical stroke', 'left two headed arrow with tail with double vertical stroke', 'l two headed arrow with tail with double vertical stroke']);
  this.executeCharTest('⬾', ['left-arrow through x', 'left-arrow through x', 'L arrow through x']);
  this.executeCharTest('⬿', ['wave arrow pointing directly left', 'wave arrow pointing directly left', 'wave arrow pointing directly left']);
  this.executeCharTest('⭀', ['equals sign above left-arrow', 'equals sign above left-arrow', 'equals sign above L arrow']);
  this.executeCharTest('⭁', ['reverse tilde operator above left-arrow', 'reverse tilde operator above left-arrow', 'reverse tilde operator above L arrow']);
  this.executeCharTest('⭂', ['left-arrow above reverse almost equals', 'left-arrow above reverse almost equals', 'L arrow above reverse almost equals']);
  this.executeCharTest('⭃', ['right-arrow through greater than', 'right-arrow through greater than', 'R arrow through greater than']);
  this.executeCharTest('⭄', ['right-arrow through superset', 'right-arrow through superset', 'R arrow through superset']);
  this.executeCharTest('⭅', ['left quadruple arrow', 'left quadruple arrow', 'l quadrule arrow']);
  this.executeCharTest('⭆', ['right quadruple arrow', 'right quadruple arrow', 'r quadrule arrow']);
  this.executeCharTest('⭇', ['reverse tilde operator above right-arrow', 'reverse tilde operator above right-arrow', 'reverse tilde operator above R arrow']);
  this.executeCharTest('⭈', ['right-arrow above reverse almost equals', 'right-arrow above reverse almost equals', 'R arrow above reverse almost equals']);
  this.executeCharTest('⭉', ['tilde operator above left-arrow', 'tilde operator above left-arrow', 'tilde operator above L arrow']);
  this.executeCharTest('⭊', ['left-arrow above almost equals', 'left-arrow above almost equals', 'L arrow above almost equals']);
  this.executeCharTest('⭋', ['left-arrow above reverse tilde operator', 'left-arrow above reverse tilde operator', 'L arrow above reverse tilde operator']);
  this.executeCharTest('⭌', ['right-arrow above reverse tilde operator', 'right-arrow above reverse tilde operator', 'R arrow above reverse tilde operator']);
  this.executeCharTest('￩', ['halfwidth left-arrow', 'halfwidth left-arrow', 'halfwidth L arrow']);
  this.executeCharTest('￪', ['halfwidth up-arrow', 'halfwidth up-arrow', 'halfwidth U arrow']);
  this.executeCharTest('￫', ['halfwidth right-arrow', 'halfwidth right-arrow', 'halfwidth R arrow']);
  this.executeCharTest('￬', ['halfwidth down-arrow', 'halfwidth down-arrow', 'halfwidth D arrow']);
  this.executeCharTest('ℓ', ['script l', 'script l', 'script l']);
  this.executeCharTest('℘', ['script upper P', 'script upper P', 'script upper P']);
  this.executeCharTest('ℼ', ['double struck pi', 'double struck pi', 'double struck pi']);
  this.executeCharTest('ℽ', ['double struck gamma', 'double struck gamma', 'double struck gamma']);
  this.executeCharTest('ℾ', ['double struck upper Gamma', 'double struck upper Gamma', 'double struck upper Gamma']);
  this.executeCharTest('ℿ', ['double struck upper Pi', 'double struck upper Pi', 'double struck upper Pi']);
  this.executeCharTest('⅀', ['double struck n ary summation', 'double struck n ary summation', 'double struck n ary summation']);
  this.executeCharTest('ⅅ', ['double struck italic upper D', 'double struck italic upper D', 'double struck italic upper D']);
  this.executeCharTest('ⅆ', ['double struck italic d', 'double struck italic d', 'double struck italic d']);
  this.executeCharTest('ⅇ', ['double struck italic e', 'double struck italic e', 'double struck italic e']);
  this.executeCharTest('ⅈ', ['double struck italic i', 'double struck italic i', 'double struck italic i']);
  this.executeCharTest('ⅉ', ['double struck italic j', 'double struck italic j', 'double struck italic j']);
  this.executeCharTest('𝚤', ['italic dotless i', 'italic dotless i', 'italic dotless i']);
  this.executeCharTest('𝚥', ['italic dotless j', 'italic dotless j', 'italic dotless j']);
  this.executeCharTest('(', ['left-parenthesis', 'left-p\'ren', 'L p\'ren']);
  this.executeCharTest(')', ['right-parenthesis', 'right-p\'ren', 'R p\'ren']);
  this.executeCharTest('[', ['left-bracket', 'left-brack', 'L brack']);
  this.executeCharTest(']', ['right-bracket', 'right-brack', 'R brack']);
  this.executeCharTest('{', ['left-brace', 'left-brace', 'L brace']);
  this.executeCharTest('}', ['right-brace', 'right-brace', 'R brace']);
  this.executeCharTest('⁅', ['left-bracket with quill', 'left-brack with quill', 'L brack with quill']);
  this.executeCharTest('⁆', ['right-bracket with quill', 'right-brack with quill', 'R brack with quill']);
  this.executeCharTest('⌈', ['left ceiling', 'left ceiling', 'left ceiling']);
  this.executeCharTest('⌉', ['right ceiling', 'right ceiling', 'right ceiling']);
  this.executeCharTest('⌊', ['left floor', 'left floor', 'left floor']);
  this.executeCharTest('⌋', ['right floor', 'right floor', 'right floor']);
  this.executeCharTest('⌌', ['bottom right crop', 'bottom right crop', 'bottom right crop']);
  this.executeCharTest('⌍', ['bottom left crop', 'bottom left crop', 'bottom left crop']);
  this.executeCharTest('⌎', ['top right crop', 'top right crop', 'top right crop']);
  this.executeCharTest('⌏', ['top left crop', 'top left crop', 'top left crop']);
  this.executeCharTest('⌜', ['top left corner', 'top left corner', 'top left corner']);
  this.executeCharTest('⌝', ['top right corner', 'top right corner', 'top right corner']);
  this.executeCharTest('⌞', ['bottom left corner', 'bottom left corner', 'bottom left corner']);
  this.executeCharTest('⌟', ['bottom right corner', 'bottom right corner', 'bottom right corner']);
  this.executeCharTest('⌠', ['top half integral', 'top half integral', 'top half integral']);
  this.executeCharTest('⌡', ['bottom half integral', 'bottom half integral', 'bottom half integral']);
  this.executeCharTest('〈', ['left pointing angle', 'left pointing angle', 'left pointing angle']);
  this.executeCharTest('〉', ['right pointing angle', 'right pointing angle', 'right pointing angle']);
  this.executeCharTest('⎛', ['left-parenthesis upper hook', 'left-p\'ren upper hook', 'L p\'ren upper hook']);
  this.executeCharTest('⎜', ['left-parenthesis extension', 'left-p\'ren extension', 'L p\'ren extension']);
  this.executeCharTest('⎝', ['left-parenthesis lower hook', 'left-p\'ren lower hook', 'L p\'ren lower hook']);
  this.executeCharTest('⎞', ['right-parenthesis upper hook', 'right-p\'ren upper hook', 'R p\'ren upper hook']);
  this.executeCharTest('⎟', ['right-parenthesis extension', 'right-p\'ren extension', 'R p\'ren extension']);
  this.executeCharTest('⎠', ['right-parenthesis lower hook', 'right-p\'ren lower hook', 'R p\'ren lower hook']);
  this.executeCharTest('⎡', ['left-bracket upper corner', 'left-brack upper corner', 'L brack upper corner']);
  this.executeCharTest('⎢', ['left-bracket extension', 'left-brack extension', 'L brack extension']);
  this.executeCharTest('⎣', ['left-bracket lower corner', 'left-brack lower corner', 'L brack lower corner']);
  this.executeCharTest('⎤', ['right-bracket upper corner', 'right-brack upper corner', 'R brack upper corner']);
  this.executeCharTest('⎥', ['right-bracket extension', 'right-brack extension', 'R brack extension']);
  this.executeCharTest('⎦', ['right-bracket lower corner', 'right-brack lower corner', 'R brack lower corner']);
  this.executeCharTest('⎧', ['left-brace upper hook', 'left-brace upper hook', 'L brace upper hook']);
  this.executeCharTest('⎨', ['left-brace middle piece', 'left-brace middle piece', 'L brace middle piece']);
  this.executeCharTest('⎩', ['left-brace lower hook', 'left-brace lower hook', 'L brace lower hook']);
  this.executeCharTest('⎪', ['brace extension', 'brace extension', 'brace extension']);
  this.executeCharTest('⎫', ['right-brace upper hook', 'right-brace upper hook', 'R brace upper hook']);
  this.executeCharTest('⎬', ['right-brace middle piece', 'right-brace middle piece', 'R brace middle piece']);
  this.executeCharTest('⎭', ['right-brace lower hook', 'right-brace lower hook', 'R brace lower hook']);
  this.executeCharTest('⎮', ['integral extension', 'integral extension', 'integral extension']);
  this.executeCharTest('⎯', ['horizontal line extension', 'horizontal line extension', 'horizontal line extension']);
  this.executeCharTest('⎰', ['upper left or lower right-brace section', 'upper left or lower right-brace section', 'upper left or lower right-brace section']);
  this.executeCharTest('⎱', ['upper right or lower left-brace section', 'upper right or lower left-brace section', 'upper right or lower left-brace section']);
  this.executeCharTest('⎲', ['summation top', 'summation top', 'summation top']);
  this.executeCharTest('⎳', ['summation bottom', 'summation bottom', 'summation bottom']);
  this.executeCharTest('⎴', ['top-bracket', 'top-brack', 'T brack']);
  this.executeCharTest('⎵', ['bottom-bracket', 'bottom-brack', 'B brack']);
  this.executeCharTest('⎶', ['bottom-bracket over top-bracket', 'bottom-brack over top-brack', 'B brack over T brack']);
  this.executeCharTest('⎷', ['radical symbol bottom', 'radical symbol bottom', 'radical symbol bottom']);
  this.executeCharTest('⎸', ['left vertical box line', 'left vertical box line', 'left vertical box line']);
  this.executeCharTest('⎹', ['right vertical box line', 'right vertical box line', 'right vertical box line']);
  this.executeCharTest('⏜', ['top-parenthesis', 'top-p\'ren', 't p\'ren']);
  this.executeCharTest('⏝', ['bottom-parenthesis', 'bottom-p\'ren', 'b p\'ren']);
  this.executeCharTest('⏞', ['top-brace', 'top-brace', 'T brace']);
  this.executeCharTest('⏟', ['bottom-brace', 'bottom-brace', 'B brace']);
  this.executeCharTest('⏠', ['top tortoise shell bracket', 'top tortoise shell bracket', 'top tortoise shell bracket']);
  this.executeCharTest('⏡', ['bottom tortoise shell bracket', 'bottom tortoise shell bracket', 'bottom tortoise shell bracket']);
  this.executeCharTest('❨', ['medium left-parenthesis ornament', 'medium left-p\'ren ornament', 'medium L p\'ren ornament']);
  this.executeCharTest('❩', ['medium right-parenthesis ornament', 'medium right-p\'ren ornament', 'medium R p\'ren ornament']);
  this.executeCharTest('❪', ['medium flattened left-parenthesis ornament', 'medium flattened left-p\'ren ornament', 'medium flattened L p\'ren ornament']);
  this.executeCharTest('❫', ['medium flattened right-parenthesis ornament', 'medium flattened right-p\'ren ornament', 'medium flattened R p\'ren ornament']);
  this.executeCharTest('❬', ['medium left pointing angle ornament', 'medium left pointing angle ornament', 'medium left pointing angle ornament']);
  this.executeCharTest('❭', ['medium right pointing angle ornament', 'medium right pointing angle ornament', 'medium right pointing angle ornament']);
  this.executeCharTest('❮', ['heavy left pointing angle quotation mark ornament', 'heavy left pointing angle quotation mark ornament', 'heavy left pointing angle quotation mark ornament']);
  this.executeCharTest('❯', ['heavy right pointing angle quotation mark ornament', 'heavy right pointing angle quotation mark ornament', 'heavy right pointing angle quotation mark ornament']);
  this.executeCharTest('❰', ['heavy left pointing angle ornament', 'heavy left pointing angle ornament', 'heavy left pointing angle ornament']);
  this.executeCharTest('❱', ['heavy right pointing angle ornament', 'heavy right pointing angle ornament', 'heavy right pointing angle ornament']);
  this.executeCharTest('❲', ['light left tortoise shell bracket ornament', 'light left tortoise shell bracket ornament', 'light left tortoise shell bracket ornament']);
  this.executeCharTest('❳', ['light right tortoise shell bracket ornament', 'light right tortoise shell bracket ornament', 'light right tortoise shell bracket ornament']);
  this.executeCharTest('❴', ['medium left-brace ornament', 'medium left-brace ornament', 'medium L brace ornament']);
  this.executeCharTest('❵', ['medium right-brace ornament', 'medium right-brace ornament', 'medium R brace ornament']);
  this.executeCharTest('⟅', ['left s shaped bag delimiter', 'left s shaped bag delimiter', 'left s shaped bag delimiter']);
  this.executeCharTest('⟆', ['right s shaped bag delimiter', 'right s shaped bag delimiter', 'right s shaped bag delimiter']);
  this.executeCharTest('⟦', ['mathematical left white bracket', 'mathematical left white bracket', 'mathematical left white bracket']);
  this.executeCharTest('⟧', ['mathematical right white bracket', 'mathematical right white bracket', 'mathematical right white bracket']);
  this.executeCharTest('⟨', ['mathematical left-angle', 'mathematical left-angle', 'mathematical l angle']);
  this.executeCharTest('⟩', ['mathematical right-angle', 'mathematical right-angle', 'mathematical r angle']);
  this.executeCharTest('⟪', ['mathematical left double angle', 'mathematical left double angle', 'mathematical left double angle']);
  this.executeCharTest('⟫', ['mathematical right double angle', 'mathematical right double angle', 'mathematical right double angle']);
  this.executeCharTest('⟬', ['mathematical left white tortoise shell bracket', 'mathematical left white tortoise shell bracket', 'mathematical left white tortoise shell bracket']);
  this.executeCharTest('⟭', ['mathematical right white tortoise shell bracket', 'mathematical right white tortoise shell bracket', 'mathematical right white tortoise shell bracket']);
  this.executeCharTest('⟮', ['mathematical flattened left-parenthesis', 'mathematical flattened left-p\'ren', 'mathematical flattened L p\'ren']);
  this.executeCharTest('⟯', ['mathematical flattened right-parenthesis', 'mathematical flattened right-p\'ren', 'mathematical flattened R p\'ren']);
  this.executeCharTest('⦃', ['left white brace', 'left white brace', 'left white brace']);
  this.executeCharTest('⦄', ['right white brace', 'right white brace', 'right white brace']);
  this.executeCharTest('⦅', ['white left-parenthesis', 'white left-p\'ren', 'white L p\'ren']);
  this.executeCharTest('⦆', ['white right-parenthesis', 'white right-p\'ren', 'white R p\'ren']);
  this.executeCharTest('⦇', ['z notation left image bracket', 'z notation left image bracket', 'z notation left image bracket']);
  this.executeCharTest('⦈', ['z notation right image bracket', 'z notation right image bracket', 'z notation right image bracket']);
  this.executeCharTest('⦉', ['z notation left binding bracket', 'z notation left binding bracket', 'z notation left binding bracket']);
  this.executeCharTest('⦊', ['z notation right binding bracket', 'z notation right binding bracket', 'z notation right binding bracket']);
  this.executeCharTest('⦋', ['left-bracket with underbar', 'left-brack with underbar', 'L brack with underbar']);
  this.executeCharTest('⦌', ['right-bracket with underbar', 'right-brack with underbar', 'R brack with underbar']);
  this.executeCharTest('⦍', ['left-bracket with tick in top corner', 'left-brack with tick in top corner', 'L brack with tick in top corner']);
  this.executeCharTest('⦎', ['right-bracket with tick in bottom corner', 'right-brack with tick in bottom corner', 'R brack with tick in bottom corner']);
  this.executeCharTest('⦏', ['left-bracket with tick in bottom corner', 'left-brack with tick in bottom corner', 'L brack with tick in bottom corner']);
  this.executeCharTest('⦐', ['right-bracket with tick in top corner', 'right-brack with tick in top corner', 'R brack with tick in top corner']);
  this.executeCharTest('⦑', ['left-angle with dot', 'left-angle with dot', 'l angle with dot']);
  this.executeCharTest('⦒', ['right-angle with dot', 'right-angle with dot', 'r angle with dot']);
  this.executeCharTest('⦓', ['left arc less than bracket', 'left arc less than bracket', 'left arc less than bracket']);
  this.executeCharTest('⦔', ['right arc greater than bracket', 'right arc greater than bracket', 'right arc greater than bracket']);
  this.executeCharTest('⦕', ['double left arc greater than bracket', 'double left arc greater than bracket', 'double left arc greater than bracket']);
  this.executeCharTest('⦖', ['double right arc less than bracket', 'double right arc less than bracket', 'double right arc less than bracket']);
  this.executeCharTest('⦗', ['left black tortoise shell bracket', 'left black tortoise shell bracket', 'left black tortoise shell bracket']);
  this.executeCharTest('⦘', ['right black tortoise shell bracket', 'right black tortoise shell bracket', 'right black tortoise shell bracket']);
  this.executeCharTest('⧘', ['left wiggly fence', 'left wiggly fence', 'left wiggly fence']);
  this.executeCharTest('⧙', ['right wiggly fence', 'right wiggly fence', 'right wiggly fence']);
  this.executeCharTest('⧚', ['left double wiggly fence', 'left double wiggly fence', 'left double wiggly fence']);
  this.executeCharTest('⧛', ['right double wiggly fence', 'right double wiggly fence', 'right double wiggly fence']);
  this.executeCharTest('⧼', ['left pointing curved angle', 'left pointing curved angle', 'left pointing curved angle']);
  this.executeCharTest('⧽', ['right pointing curved angle', 'right pointing curved angle', 'right pointing curved angle']);
  this.executeCharTest('⸢', ['top half left-bracket', 'top half left-brack', 'top half L brack']);
  this.executeCharTest('⸣', ['top half right-bracket', 'top half right-brack', 'top half R brack']);
  this.executeCharTest('⸤', ['bottom half left-bracket', 'bottom half left-brack', 'bottom half L brack']);
  this.executeCharTest('⸥', ['bottom half right-bracket', 'bottom half right-brack', 'bottom half R brack']);
  this.executeCharTest('⸦', ['left sideways U bracket', 'left sideways U bracket', 'left sideways U bracket']);
  this.executeCharTest('⸧', ['right sideways U bracket', 'right sideways U bracket', 'right sideways U bracket']);
  this.executeCharTest('⸨', ['double left-parenthesis', 'double left-p\'ren', 'double L p\'ren']);
  this.executeCharTest('⸩', ['double right-parenthesis', 'double right-p\'ren', 'double R p\'ren']);
  this.executeCharTest('〈', ['left-angle', 'left-angle', 'l angle']);
  this.executeCharTest('〉', ['right-angle', 'right-angle', 'r angle']);
  this.executeCharTest('《', ['left double angle', 'left double angle', 'left double angle']);
  this.executeCharTest('》', ['right double angle', 'right double angle', 'right double angle']);
  this.executeCharTest('「', ['left corner bracket', 'left corner bracket', 'left corner bracket']);
  this.executeCharTest('」', ['right corner bracket', 'right corner bracket', 'right corner bracket']);
  this.executeCharTest('『', ['left white corner bracket', 'left white corner bracket', 'left white corner bracket']);
  this.executeCharTest('』', ['right white corner bracket', 'right white corner bracket', 'right white corner bracket']);
  this.executeCharTest('【', ['left black lenticular bracket', 'left black lenticular bracket', 'left black lenticular bracket']);
  this.executeCharTest('】', ['right black lenticular bracket', 'right black lenticular bracket', 'right black lenticular bracket']);
  this.executeCharTest('〔', ['left tortoise shell bracket', 'left tortoise shell bracket', 'left tortoise shell bracket']);
  this.executeCharTest('〕', ['right tortoise shell bracket', 'right tortoise shell bracket', 'right tortoise shell bracket']);
  this.executeCharTest('〖', ['left white lenticular bracket', 'left white lenticular bracket', 'left white lenticular bracket']);
  this.executeCharTest('〗', ['right white lenticular bracket', 'right white lenticular bracket', 'right white lenticular bracket']);
  this.executeCharTest('〘', ['left white tortoise shell bracket', 'left white tortoise shell bracket', 'left white tortoise shell bracket']);
  this.executeCharTest('〙', ['right white tortoise shell bracket', 'right white tortoise shell bracket', 'right white tortoise shell bracket']);
  this.executeCharTest('〚', ['left white bracket', 'left white bracket', 'left white bracket']);
  this.executeCharTest('〛', ['right white bracket', 'right white bracket', 'right white bracket']);
  this.executeCharTest('〝', ['reversed double prime quotation mark', 'reversed double prime quotation mark', 'reversed double prime quotation mark']);
  this.executeCharTest('〞', ['double prime quotation mark', 'double prime quotation mark', 'double prime quotation mark']);
  this.executeCharTest('〟', ['low double prime quotation mark', 'low double prime quotation mark', 'low double prime quotation mark']);
  this.executeCharTest('﴾', ['ornate left-parenthesis', 'ornate left-p\'ren', 'ornate L p\'ren']);
  this.executeCharTest('﴿', ['ornate right-parenthesis', 'ornate right-p\'ren', 'ornate R p\'ren']);
  this.executeCharTest('︗', ['presentation form for vertical left white lenticular bracket', 'presentation form for vertical left white lenticular bracket', 'presentation form for vertical left white lenticular bracket']);
  this.executeCharTest('︘', ['presentation form for vertical right white lenticular brakcet', 'presentation form for vertical right white lenticular brakcet', 'presentation form for vertical right white lenticular brakcet']);
  this.executeCharTest('︵', ['presentation form for vertical left-parenthesis', 'presentation form for vertical left-p\'ren', 'presentation form for vertical L p\'ren']);
  this.executeCharTest('︶', ['presentation form for vertical right-parenthesis', 'presentation form for vertical right-p\'ren', 'presentation form for vertical R p\'ren']);
  this.executeCharTest('︷', ['presentation form for vertical left-brace', 'presentation form for vertical left-brace', 'presentation form for vertical L brace']);
  this.executeCharTest('︸', ['presentation form for vertical right-brace', 'presentation form for vertical right-brace', 'presentation form for vertical r brace']);
  this.executeCharTest('︹', ['presentation form for vertical left tortoise shell bracket', 'presentation form for vertical left tortoise shell bracket', 'presentation form for vertical left tortoise shell bracket']);
  this.executeCharTest('︺', ['presentation form for vertical right tortoise shell bracket', 'presentation form for vertical right tortoise shell bracket', 'presentation form for vertical right tortoise shell bracket']);
  this.executeCharTest('︻', ['presentation form for vertical left black lenticular bracket', 'presentation form for vertical left black lenticular bracket', 'presentation form for vertical left black lenticular bracket']);
  this.executeCharTest('︼', ['presentation form for vertical right black lenticular bracket', 'presentation form for vertical right black lenticular bracket', 'presentation form for vertical right black lenticular bracket']);
  this.executeCharTest('︽', ['presentation form for vertical left double angle', 'presentation form for vertical left double angle', 'presentation form for vertical left double angle']);
  this.executeCharTest('︾', ['presentation form for vertical right double angle', 'presentation form for vertical right double angle', 'presentation form for vertical right double angle']);
  this.executeCharTest('︿', ['presentation form for vertical left-angle', 'presentation form for vertical left-angle', 'presentation form for vertical l angle']);
  this.executeCharTest('﹀', ['presentation form for vertical right-angle', 'presentation form for vertical right-angle', 'presentation form for vertical r angle']);
  this.executeCharTest('﹁', ['presentation form for vertical left corner bracket', 'presentation form for vertical left corner bracket', 'presentation form for vertical left corner bracket']);
  this.executeCharTest('﹂', ['presentation form for vertical right corner bracket', 'presentation form for vertical right corner bracket', 'presentation form for vertical right corner bracket']);
  this.executeCharTest('﹃', ['presentation form for vertical left white corner bracket', 'presentation form for vertical left white corner bracket', 'presentation form for vertical left white corner bracket']);
  this.executeCharTest('﹄', ['presentation form for vertical right white corner bracket', 'presentation form for vertical right white corner bracket', 'presentation form for vertical right white corner bracket']);
  this.executeCharTest('﹇', ['presentation form for vertical left-bracket', 'presentation form for vertical left-brack', 'presentation form for vertical L brack']);
  this.executeCharTest('﹈', ['presentation form for vertical right-bracket', 'presentation form for vertical right-brack', 'presentation form for vertical r brack']);
  this.executeCharTest('﹙', ['small left-parenthesis', 'small left-p\'ren', 'small L p\'ren']);
  this.executeCharTest('﹚', ['small right-parenthesis', 'small right-p\'ren', 'small R p\'ren']);
  this.executeCharTest('﹛', ['small left-brace', 'small left-brace', 'small L brace']);
  this.executeCharTest('﹜', ['small right-brace', 'small right-brace', 'small r brace']);
  this.executeCharTest('﹝', ['small left tortoise shell bracket', 'small left tortoise shell bracket', 'small left tortoise shell bracket']);
  this.executeCharTest('﹞', ['small right tortoise shell bracket', 'small right tortoise shell bracket', 'small right tortoise shell bracket']);
  this.executeCharTest('（', ['fullwidth left-parenthesis', 'fullwidth left-p\'ren', 'fullwidth L p\'ren']);
  this.executeCharTest('）', ['fullwidth right-parenthesis', 'fullwidth right-p\'ren', 'fullwidth R p\'ren']);
  this.executeCharTest('［', ['fullwidth left-bracket', 'fullwidth left-brack', 'fullwidth L brack']);
  this.executeCharTest('］', ['fullwidth right-bracket', 'fullwidth right-brack', 'fullwidth r brack']);
  this.executeCharTest('｛', ['fullwidth left-brace', 'fullwidth left-brace', 'fullwidth L brace']);
  this.executeCharTest('｝', ['fullwidth right-brace', 'fullwidth right-brace', 'fullwidth r brace']);
  this.executeCharTest('｟', ['fullwidth white left-parenthesis', 'fullwidth white left-p\'ren', 'fullwidth white L p\'ren']);
  this.executeCharTest('｠', ['fullwidth white right-parenthesis', 'fullwidth white right-p\'ren', 'fullwidth white R p\'ren']);
  this.executeCharTest('｢', ['halfwidth left corner bracket', 'halfwidth left corner bracket', 'halfwidth left corner bracket']);
  this.executeCharTest('｣', ['halfwidth right corner bracket', 'halfwidth right corner bracket', 'halfwidth right corner bracket']);
  this.executeCharTest('²', ['squared', 'squared', 'squared']);
  this.executeCharTest('³', ['cubed', 'cubed', 'cubed']);
  this.executeCharTest('¹', ['super 1', 'super 1', 'super 1']);
  this.executeCharTest('¼', ['one quarter', 'one quarter', 'one quarter']);
  this.executeCharTest('½', ['one half', 'one half', 'one half']);
  this.executeCharTest('¾', ['three quarters', 'three quarters', 'three quarters']);
  this.executeCharTest('⁰', ['super 0', 'super 0', 'super 0']);
  this.executeCharTest('⁴', ['super 4', 'super 4', 'super 4']);
  this.executeCharTest('⁵', ['super 5', 'super 5', 'super 5']);
  this.executeCharTest('⁶', ['super 6', 'super 6', 'super 6']);
  this.executeCharTest('⁷', ['super 7', 'super 7', 'super 7']);
  this.executeCharTest('⁸', ['super 8', 'super 8', 'super 8']);
  this.executeCharTest('⁹', ['super 9', 'super 9', 'super 9']);
  this.executeCharTest('₀', ['sub 0', 'sub 0', 'sub 0']);
  this.executeCharTest('₁', ['sub 1', 'sub 1', 'sub 1']);
  this.executeCharTest('₂', ['sub 2', 'sub 2', 'sub 2']);
  this.executeCharTest('₃', ['sub 3', 'sub 3', 'sub 3']);
  this.executeCharTest('₄', ['sub 4', 'sub 4', 'sub 4']);
  this.executeCharTest('₅', ['sub 5', 'sub 5', 'sub 5']);
  this.executeCharTest('₆', ['sub 6', 'sub 6', 'sub 6']);
  this.executeCharTest('₇', ['sub 7', 'sub 7', 'sub 7']);
  this.executeCharTest('₈', ['sub 8', 'sub 8', 'sub 8']);
  this.executeCharTest('₉', ['sub 9', 'sub 9', 'sub 9']);
  this.executeCharTest('⅐', ['one seventh', 'one seventh', 'one seventh']);
  this.executeCharTest('⅑', ['one ninth', 'one ninth', 'one ninth']);
  this.executeCharTest('⅒', ['one tenth', 'one tenth', 'one tenth']);
  this.executeCharTest('⅓', ['one third', 'one third', 'one third']);
  this.executeCharTest('⅔', ['two thirds', 'two thirds', 'two thirds']);
  this.executeCharTest('⅕', ['one fifth', 'one fifth', 'one fifth']);
  this.executeCharTest('⅖', ['two fifths', 'two fifths', 'two fifths']);
  this.executeCharTest('⅗', ['three fifths', 'three fifths', 'three fifths']);
  this.executeCharTest('⅘', ['four fifths', 'four fifths', 'four fifths']);
  this.executeCharTest('⅙', ['one sixth', 'one sixth', 'one sixth']);
  this.executeCharTest('⅚', ['five sixths', 'five sixths', 'five sixths']);
  this.executeCharTest('⅛', ['one eighth', 'one eighth', 'one eighth']);
  this.executeCharTest('⅜', ['three eighths', 'three eighths', 'three eighths']);
  this.executeCharTest('⅝', ['five eighths', 'five eighths', 'five eighths']);
  this.executeCharTest('⅞', ['seven eighths', 'seven eighths', 'seven eighths']);
  this.executeCharTest('⅟', ['numerator one', 'numerator one', 'numerator one']);
  this.executeCharTest('↉', ['zero thirds', 'zero thirds', 'zero thirds']);
  this.executeCharTest('①', ['circled 1', 'circled 1', 'circled 1']);
  this.executeCharTest('②', ['circled 2', 'circled 2', 'circled 2']);
  this.executeCharTest('③', ['circled 3', 'circled 3', 'circled 3']);
  this.executeCharTest('④', ['circled 4', 'circled 4', 'circled 4']);
  this.executeCharTest('⑤', ['circled 5', 'circled 5', 'circled 5']);
  this.executeCharTest('⑥', ['circled 6', 'circled 6', 'circled 6']);
  this.executeCharTest('⑦', ['circled 7', 'circled 7', 'circled 7']);
  this.executeCharTest('⑧', ['circled 8', 'circled 8', 'circled 8']);
  this.executeCharTest('⑨', ['circled 9', 'circled 9', 'circled 9']);
  this.executeCharTest('⑩', ['circled 10', 'circled 10', 'circled 10']);
  this.executeCharTest('⑪', ['circled 11', 'circled 11', 'circled 11']);
  this.executeCharTest('⑫', ['circled 12', 'circled 12', 'circled 12']);
  this.executeCharTest('⑬', ['circled 13', 'circled 13', 'circled 13']);
  this.executeCharTest('⑭', ['circled 14', 'circled 14', 'circled 14']);
  this.executeCharTest('⑮', ['circled 15', 'circled 15', 'circled 15']);
  this.executeCharTest('⑯', ['circled 16', 'circled 16', 'circled 16']);
  this.executeCharTest('⑰', ['circled 17', 'circled 17', 'circled 17']);
  this.executeCharTest('⑱', ['circled 18', 'circled 18', 'circled 18']);
  this.executeCharTest('⑲', ['circled 19', 'circled 19', 'circled 19']);
  this.executeCharTest('⑳', ['circled 20', 'circled 20', 'circled 20']);
  this.executeCharTest('⑴', ['parenthesized 1', 'parenthesized 1', 'parenthesized 1']);
  this.executeCharTest('⑵', ['parenthesized 2', 'parenthesized 2', 'parenthesized 2']);
  this.executeCharTest('⑶', ['parenthesized 3', 'parenthesized 3', 'parenthesized 3']);
  this.executeCharTest('⑷', ['parenthesized 4', 'parenthesized 4', 'parenthesized 4']);
  this.executeCharTest('⑸', ['parenthesized 5', 'parenthesized 5', 'parenthesized 5']);
  this.executeCharTest('⑹', ['parenthesized 6', 'parenthesized 6', 'parenthesized 6']);
  this.executeCharTest('⑺', ['parenthesized 7', 'parenthesized 7', 'parenthesized 7']);
  this.executeCharTest('⑻', ['parenthesized 8', 'parenthesized 8', 'parenthesized 8']);
  this.executeCharTest('⑼', ['parenthesized 9', 'parenthesized 9', 'parenthesized 9']);
  this.executeCharTest('⑽', ['parenthesized 10', 'parenthesized 10', 'parenthesized 10']);
  this.executeCharTest('⑾', ['parenthesized 11', 'parenthesized 11', 'parenthesized 11']);
  this.executeCharTest('⑿', ['parenthesized 12', 'parenthesized 12', 'parenthesized 12']);
  this.executeCharTest('⒀', ['parenthesized 13', 'parenthesized 13', 'parenthesized 13']);
  this.executeCharTest('⒁', ['parenthesized 14', 'parenthesized 14', 'parenthesized 14']);
  this.executeCharTest('⒂', ['parenthesized 15', 'parenthesized 15', 'parenthesized 15']);
  this.executeCharTest('⒃', ['parenthesized 16', 'parenthesized 16', 'parenthesized 16']);
  this.executeCharTest('⒄', ['parenthesized 17', 'parenthesized 17', 'parenthesized 17']);
  this.executeCharTest('⒅', ['parenthesized 18', 'parenthesized 18', 'parenthesized 18']);
  this.executeCharTest('⒆', ['parenthesized 19', 'parenthesized 19', 'parenthesized 19']);
  this.executeCharTest('⒇', ['parenthesized 20', 'parenthesized 20', 'parenthesized 20']);
  this.executeCharTest('⒈', ['1 period', '1 period', '1 period']);
  this.executeCharTest('⒉', ['2 period', '2 period', '2 period']);
  this.executeCharTest('⒊', ['3 period', '3 period', '3 period']);
  this.executeCharTest('⒋', ['4 period', '4 period', '4 period']);
  this.executeCharTest('⒌', ['5 period', '5 period', '5 period']);
  this.executeCharTest('⒍', ['6 period', '6 period', '6 period']);
  this.executeCharTest('⒎', ['7 period', '7 period', '7 period']);
  this.executeCharTest('⒏', ['8 period', '8 period', '8 period']);
  this.executeCharTest('⒐', ['9 period', '9 period', '9 period']);
  this.executeCharTest('⒑', ['10 period', '10 period', '10 period']);
  this.executeCharTest('⒒', ['11 period', '11 period', '11 period']);
  this.executeCharTest('⒓', ['12 period', '12 period', '12 period']);
  this.executeCharTest('⒔', ['13 period', '13 period', '13 period']);
  this.executeCharTest('⒕', ['14 period', '14 period', '14 period']);
  this.executeCharTest('⒖', ['15 period', '15 period', '15 period']);
  this.executeCharTest('⒗', ['16 period', '16 period', '16 period']);
  this.executeCharTest('⒘', ['17 period', '17 period', '17 period']);
  this.executeCharTest('⒙', ['18 period', '18 period', '18 period']);
  this.executeCharTest('⒚', ['19 period', '19 period', '19 period']);
  this.executeCharTest('⒛', ['20 period', '20 period', '20 period']);
  this.executeCharTest('⓪', ['circled 0', 'circled 0', 'circled 0']);
  this.executeCharTest('⓫', ['black circled 11', 'black circled 11', 'black circled 11']);
  this.executeCharTest('⓬', ['black circled 12', 'black circled 12', 'black circled 12']);
  this.executeCharTest('⓭', ['black circled 13', 'black circled 13', 'black circled 13']);
  this.executeCharTest('⓮', ['black circled 14', 'black circled 14', 'black circled 14']);
  this.executeCharTest('⓯', ['black circled 15', 'black circled 15', 'black circled 15']);
  this.executeCharTest('⓰', ['black circled 16', 'black circled 16', 'black circled 16']);
  this.executeCharTest('⓱', ['black circled 17', 'black circled 17', 'black circled 17']);
  this.executeCharTest('⓲', ['black circled 18', 'black circled 18', 'black circled 18']);
  this.executeCharTest('⓳', ['black circled 19', 'black circled 19', 'black circled 19']);
  this.executeCharTest('⓴', ['black circled 20', 'black circled 20', 'black circled 20']);
  this.executeCharTest('⓵', ['double circled 1', 'double circled 1', 'double circled 1']);
  this.executeCharTest('⓶', ['double circled 2', 'double circled 2', 'double circled 2']);
  this.executeCharTest('⓷', ['double circled 3', 'double circled 3', 'double circled 3']);
  this.executeCharTest('⓸', ['double circled 4', 'double circled 4', 'double circled 4']);
  this.executeCharTest('⓹', ['double circled 5', 'double circled 5', 'double circled 5']);
  this.executeCharTest('⓺', ['double circled 6', 'double circled 6', 'double circled 6']);
  this.executeCharTest('⓻', ['double circled 7', 'double circled 7', 'double circled 7']);
  this.executeCharTest('⓼', ['double circled 8', 'double circled 8', 'double circled 8']);
  this.executeCharTest('⓽', ['double circled 9', 'double circled 9', 'double circled 9']);
  this.executeCharTest('⓾', ['double circled 10', 'double circled 10', 'double circled 10']);
  this.executeCharTest('⓿', ['black circled 0', 'black circled 0', 'black circled 0']);
  this.executeCharTest('❶', ['black circled 1', 'black circled 1', 'black circled 1']);
  this.executeCharTest('❷', ['black circled 2', 'black circled 2', 'black circled 2']);
  this.executeCharTest('❸', ['black circled 3', 'black circled 3', 'black circled 3']);
  this.executeCharTest('❹', ['black circled 4', 'black circled 4', 'black circled 4']);
  this.executeCharTest('❺', ['black circled 5', 'black circled 5', 'black circled 5']);
  this.executeCharTest('❻', ['black circled 6', 'black circled 6', 'black circled 6']);
  this.executeCharTest('❼', ['black circled 7', 'black circled 7', 'black circled 7']);
  this.executeCharTest('❽', ['black circled 8', 'black circled 8', 'black circled 8']);
  this.executeCharTest('❾', ['black circled 9', 'black circled 9', 'black circled 9']);
  this.executeCharTest('❿', ['black circled 10', 'black circled 10', 'black circled 10']);
  this.executeCharTest('➀', ['circled sans serif 1', 'circled sans serif 1', 'circled sans serif 1']);
  this.executeCharTest('➁', ['circled sans serif 2', 'circled sans serif 2', 'circled sans serif 2']);
  this.executeCharTest('➂', ['circled sans serif 3', 'circled sans serif 3', 'circled sans serif 3']);
  this.executeCharTest('➃', ['circled sans serif 4', 'circled sans serif 4', 'circled sans serif 4']);
  this.executeCharTest('➄', ['circled sans serif 5', 'circled sans serif 5', 'circled sans serif 5']);
  this.executeCharTest('➅', ['circled sans serif 6', 'circled sans serif 6', 'circled sans serif 6']);
  this.executeCharTest('➆', ['circled sans serif 7', 'circled sans serif 7', 'circled sans serif 7']);
  this.executeCharTest('➇', ['circled sans serif 8', 'circled sans serif 8', 'circled sans serif 8']);
  this.executeCharTest('➈', ['circled sans serif 9', 'circled sans serif 9', 'circled sans serif 9']);
  this.executeCharTest('➉', ['circled sans serif 10', 'circled sans serif 10', 'circled sans serif 10']);
  this.executeCharTest('➊', ['black circled sans serif 1', 'black circled sans serif 1', 'black circled sans serif 1']);
  this.executeCharTest('➋', ['black circled sans serif 2', 'black circled sans serif 2', 'black circled sans serif 2']);
  this.executeCharTest('➌', ['black circled sans serif 3', 'black circled sans serif 3', 'black circled sans serif 3']);
  this.executeCharTest('➍', ['black circled sans serif 4', 'black circled sans serif 4', 'black circled sans serif 4']);
  this.executeCharTest('➎', ['black circled sans serif 5', 'black circled sans serif 5', 'black circled sans serif 5']);
  this.executeCharTest('➏', ['black circled sans serif 6', 'black circled sans serif 6', 'black circled sans serif 6']);
  this.executeCharTest('➐', ['black circled sans serif 7', 'black circled sans serif 7', 'black circled sans serif 7']);
  this.executeCharTest('➑', ['black circled sans serif 8', 'black circled sans serif 8', 'black circled sans serif 8']);
  this.executeCharTest('➒', ['black circled sans serif 9', 'black circled sans serif 9', 'black circled sans serif 9']);
  this.executeCharTest('➓', ['black circled sans serif 10', 'black circled sans serif 10', 'black circled sans serif 10']);
  this.executeCharTest('㉈', ['circled ten on black square', 'circled ten on black square', 'circled ten on black square']);
  this.executeCharTest('㉉', ['circled twenty on black square', 'circled twenty on black square', 'circled twenty on black square']);
  this.executeCharTest('㉊', ['circled thirty on black square', 'circled thirty on black square', 'circled thirty on black square']);
  this.executeCharTest('㉋', ['circled forty on black square', 'circled forty on black square', 'circled forty on black square']);
  this.executeCharTest('㉌', ['circled fifty on black square', 'circled fifty on black square', 'circled fifty on black square']);
  this.executeCharTest('㉍', ['circled sixty on black square', 'circled sixty on black square', 'circled sixty on black square']);
  this.executeCharTest('㉎', ['circled seventy on black square', 'circled seventy on black square', 'circled seventy on black square']);
  this.executeCharTest('㉏', ['circled eighty on black square', 'circled eighty on black square', 'circled eighty on black square']);
  this.executeCharTest('㉑', ['circled 21', 'circled 21', 'circled 21']);
  this.executeCharTest('㉒', ['circled 22', 'circled 22', 'circled 22']);
  this.executeCharTest('㉓', ['circled 23', 'circled 23', 'circled 23']);
  this.executeCharTest('㉔', ['circled 24', 'circled 24', 'circled 24']);
  this.executeCharTest('㉕', ['circled 25', 'circled 25', 'circled 25']);
  this.executeCharTest('㉖', ['circled 26', 'circled 26', 'circled 26']);
  this.executeCharTest('㉗', ['circled 27', 'circled 27', 'circled 27']);
  this.executeCharTest('㉘', ['circled 28', 'circled 28', 'circled 28']);
  this.executeCharTest('㉙', ['circled 29', 'circled 29', 'circled 29']);
  this.executeCharTest('㉚', ['circled 30', 'circled 30', 'circled 30']);
  this.executeCharTest('㉛', ['circled 31', 'circled 31', 'circled 31']);
  this.executeCharTest('㉜', ['circled 32', 'circled 32', 'circled 32']);
  this.executeCharTest('㉝', ['circled 33', 'circled 33', 'circled 33']);
  this.executeCharTest('㉞', ['circled 34', 'circled 34', 'circled 34']);
  this.executeCharTest('㉟', ['circled 35', 'circled 35', 'circled 35']);
  this.executeCharTest('㊱', ['circled 36', 'circled 36', 'circled 36']);
  this.executeCharTest('㊲', ['circled 37', 'circled 37', 'circled 37']);
  this.executeCharTest('㊳', ['circled 38', 'circled 38', 'circled 38']);
  this.executeCharTest('㊴', ['circled 39', 'circled 39', 'circled 39']);
  this.executeCharTest('㊵', ['circled 40', 'circled 40', 'circled 40']);
  this.executeCharTest('㊶', ['circled 41', 'circled 41', 'circled 41']);
  this.executeCharTest('㊷', ['circled 42', 'circled 42', 'circled 42']);
  this.executeCharTest('㊸', ['circled 43', 'circled 43', 'circled 43']);
  this.executeCharTest('㊹', ['circled 44', 'circled 44', 'circled 44']);
  this.executeCharTest('㊺', ['circled 45', 'circled 45', 'circled 45']);
  this.executeCharTest('㊻', ['circled 46', 'circled 46', 'circled 46']);
  this.executeCharTest('㊼', ['circled 47', 'circled 47', 'circled 47']);
  this.executeCharTest('㊽', ['circled 48', 'circled 48', 'circled 48']);
  this.executeCharTest('㊾', ['circled 49', 'circled 49', 'circled 49']);
  this.executeCharTest('㊿', ['circled 50', 'circled 50', 'circled 50']);
  this.executeCharTest('０', ['0', '0', '0']);
  this.executeCharTest('１', ['1', '1', '1']);
  this.executeCharTest('２', ['2', '2', '2']);
  this.executeCharTest('３', ['3', '3', '3']);
  this.executeCharTest('４', ['4', '4', '4']);
  this.executeCharTest('５', ['5', '5', '5']);
  this.executeCharTest('６', ['6', '6', '6']);
  this.executeCharTest('７', ['7', '7', '7']);
  this.executeCharTest('８', ['8', '8', '8']);
  this.executeCharTest('９', ['9', '9', '9']);
  this.executeCharTest('𝟎', ['bold 0', 'bold 0', 'bold 0']);
  this.executeCharTest('𝟏', ['bold 1', 'bold 1', 'bold 1']);
  this.executeCharTest('𝟐', ['bold 2', 'bold 2', 'bold 2']);
  this.executeCharTest('𝟑', ['bold 3', 'bold 3', 'bold 3']);
  this.executeCharTest('𝟒', ['bold 4', 'bold 4', 'bold 4']);
  this.executeCharTest('𝟓', ['bold 5', 'bold 5', 'bold 5']);
  this.executeCharTest('𝟔', ['bold 6', 'bold 6', 'bold 6']);
  this.executeCharTest('𝟕', ['bold 7', 'bold 7', 'bold 7']);
  this.executeCharTest('𝟖', ['bold 8', 'bold 8', 'bold 8']);
  this.executeCharTest('𝟗', ['bold 9', 'bold 9', 'bold 9']);
  this.executeCharTest('𝟘', ['double struck 0', 'double struck 0', 'double struck 0']);
  this.executeCharTest('𝟙', ['double struck 1', 'double struck 1', 'double struck 1']);
  this.executeCharTest('𝟚', ['double struck 2', 'double struck 2', 'double struck 2']);
  this.executeCharTest('𝟛', ['double struck 3', 'double struck 3', 'double struck 3']);
  this.executeCharTest('𝟜', ['double struck 4', 'double struck 4', 'double struck 4']);
  this.executeCharTest('𝟝', ['double struck 5', 'double struck 5', 'double struck 5']);
  this.executeCharTest('𝟞', ['double struck 6', 'double struck 6', 'double struck 6']);
  this.executeCharTest('𝟟', ['double struck 7', 'double struck 7', 'double struck 7']);
  this.executeCharTest('𝟠', ['double struck 8', 'double struck 8', 'double struck 8']);
  this.executeCharTest('𝟡', ['double struck 9', 'double struck 9', 'double struck 9']);
  this.executeCharTest('𝟢', ['sans serif 0', 'sans serif 0', 'sans serif 0']);
  this.executeCharTest('𝟣', ['sans serif 1', 'sans serif 1', 'sans serif 1']);
  this.executeCharTest('𝟤', ['sans serif 2', 'sans serif 2', 'sans serif 2']);
  this.executeCharTest('𝟥', ['sans serif 3', 'sans serif 3', 'sans serif 3']);
  this.executeCharTest('𝟦', ['sans serif 4', 'sans serif 4', 'sans serif 4']);
  this.executeCharTest('𝟧', ['sans serif 5', 'sans serif 5', 'sans serif 5']);
  this.executeCharTest('𝟨', ['sans serif 6', 'sans serif 6', 'sans serif 6']);
  this.executeCharTest('𝟩', ['sans serif 7', 'sans serif 7', 'sans serif 7']);
  this.executeCharTest('𝟪', ['sans serif 8', 'sans serif 8', 'sans serif 8']);
  this.executeCharTest('𝟫', ['sans serif 9', 'sans serif 9', 'sans serif 9']);
  this.executeCharTest('𝟬', ['sans serif bold 0', 'sans serif bold 0', 'sans serif bold 0']);
  this.executeCharTest('𝟭', ['sans serif bold 1', 'sans serif bold 1', 'sans serif bold 1']);
  this.executeCharTest('𝟮', ['sans serif bold 2', 'sans serif bold 2', 'sans serif bold 2']);
  this.executeCharTest('𝟯', ['sans serif bold 3', 'sans serif bold 3', 'sans serif bold 3']);
  this.executeCharTest('𝟰', ['sans serif bold 4', 'sans serif bold 4', 'sans serif bold 4']);
  this.executeCharTest('𝟱', ['sans serif bold 5', 'sans serif bold 5', 'sans serif bold 5']);
  this.executeCharTest('𝟲', ['sans serif bold 6', 'sans serif bold 6', 'sans serif bold 6']);
  this.executeCharTest('𝟳', ['sans serif bold 7', 'sans serif bold 7', 'sans serif bold 7']);
  this.executeCharTest('𝟴', ['sans serif bold 8', 'sans serif bold 8', 'sans serif bold 8']);
  this.executeCharTest('𝟵', ['sans serif bold 9', 'sans serif bold 9', 'sans serif bold 9']);
  this.executeCharTest('𝟶', ['monospace 0', 'monospace 0', 'monospace 0']);
  this.executeCharTest('𝟷', ['monospace 1', 'monospace 1', 'monospace 1']);
  this.executeCharTest('𝟸', ['monospace 2', 'monospace 2', 'monospace 2']);
  this.executeCharTest('𝟹', ['monospace 3', 'monospace 3', 'monospace 3']);
  this.executeCharTest('𝟺', ['monospace 4', 'monospace 4', 'monospace 4']);
  this.executeCharTest('𝟻', ['monospace 5', 'monospace 5', 'monospace 5']);
  this.executeCharTest('𝟼', ['monospace 6', 'monospace 6', 'monospace 6']);
  this.executeCharTest('𝟽', ['monospace 7', 'monospace 7', 'monospace 7']);
  this.executeCharTest('𝟾', ['monospace 8', 'monospace 8', 'monospace 8']);
  this.executeCharTest('𝟿', ['monospace 9', 'monospace 9', 'monospace 9']);
  this.executeCharTest('🄀', ['0 period', '0 period', '0 period']);
  this.executeCharTest('🄁', ['0 comma', '0 comma', '0 comma']);
  this.executeCharTest('🄂', ['1 comma', '1 comma', '1 comma']);
  this.executeCharTest('🄃', ['2 comma', '2 comma', '2 comma']);
  this.executeCharTest('🄄', ['3 comma', '3 comma', '3 comma']);
  this.executeCharTest('🄅', ['4 comma', '4 comma', '4 comma']);
  this.executeCharTest('🄆', ['5 comma', '5 comma', '5 comma']);
  this.executeCharTest('🄇', ['6 comma', '6 comma', '6 comma']);
  this.executeCharTest('🄈', ['7 comma', '7 comma', '7 comma']);
  this.executeCharTest('🄉', ['8 comma', '8 comma', '8 comma']);
  this.executeCharTest('🄊', ['9 comma', '9 comma', '9 comma']);
  this.executeCharTest('─', ['box drawings light horizontal', 'box drawings light horizontal', 'box drawings light horizontal']);
  this.executeCharTest('━', ['box drawings heavy horizontal', 'box drawings heavy horizontal', 'box drawings heavy horizontal']);
  this.executeCharTest('│', ['box drawings light vertical', 'box drawings light vertical', 'box drawings light vertical']);
  this.executeCharTest('┃', ['box drawings heavy vertical', 'box drawings heavy vertical', 'box drawings heavy vertical']);
  this.executeCharTest('┄', ['box drawings light triple dash horizontal', 'box drawings light triple dash horizontal', 'box drawings light triple dash horizontal']);
  this.executeCharTest('┅', ['box drawings heavy triple dash horizontal', 'box drawings heavy triple dash horizontal', 'box drawings heavy triple dash horizontal']);
  this.executeCharTest('┆', ['box drawings light triple dash vertical', 'box drawings light triple dash vertical', 'box drawings light triple dash vertical']);
  this.executeCharTest('┇', ['box drawings heavy triple dash vertical', 'box drawings heavy triple dash vertical', 'box drawings heavy triple dash vertical']);
  this.executeCharTest('┈', ['box drawings light quadruple dash horizontal', 'box drawings light quadruple dash horizontal', 'box drawings light quadruple dash horizontal']);
  this.executeCharTest('┉', ['box drawings heavy quadruple dash horizontal', 'box drawings heavy quadruple dash horizontal', 'box drawings heavy quadruple dash horizontal']);
  this.executeCharTest('┊', ['box drawings light quadruple dash vertical', 'box drawings light quadruple dash vertical', 'box drawings light quadruple dash vertical']);
  this.executeCharTest('┋', ['box drawings heavy quadruple dash vertical', 'box drawings heavy quadruple dash vertical', 'box drawings heavy quadruple dash vertical']);
  this.executeCharTest('┌', ['box drawings light down and right', 'box drawings light down and right', 'box drawings light down and right']);
  this.executeCharTest('┍', ['box drawings down light and right heavy', 'box drawings down light and right heavy', 'box drawings down light and right heavy']);
  this.executeCharTest('┎', ['box drawings down heavy and right light', 'box drawings down heavy and right light', 'box drawings down heavy and right light']);
  this.executeCharTest('┏', ['box drawings heavy down and right', 'box drawings heavy down and right', 'box drawings heavy down and right']);
  this.executeCharTest('┐', ['box drawings light down and left', 'box drawings light down and left', 'box drawings light down and left']);
  this.executeCharTest('┑', ['box drawings down light and left heavy', 'box drawings down light and left heavy', 'box drawings down light and left heavy']);
  this.executeCharTest('┒', ['box drawings down heavy and left light', 'box drawings down heavy and left light', 'box drawings down heavy and left light']);
  this.executeCharTest('┓', ['box drawings heavy down and left', 'box drawings heavy down and left', 'box drawings heavy down and left']);
  this.executeCharTest('└', ['box drawings light up and right', 'box drawings light up and right', 'box drawings light up and right']);
  this.executeCharTest('┕', ['box drawings up light and right heavy', 'box drawings up light and right heavy', 'box drawings up light and right heavy']);
  this.executeCharTest('┖', ['box drawings up heavy and right light', 'box drawings up heavy and right light', 'box drawings up heavy and right light']);
  this.executeCharTest('┗', ['box drawings heavy up and right', 'box drawings heavy up and right', 'box drawings heavy up and right']);
  this.executeCharTest('┘', ['box drawings light up and left', 'box drawings light up and left', 'box drawings light up and left']);
  this.executeCharTest('┙', ['box drawings up light and left heavy', 'box drawings up light and left heavy', 'box drawings up light and left heavy']);
  this.executeCharTest('┚', ['box drawings up heavy and left light', 'box drawings up heavy and left light', 'box drawings up heavy and left light']);
  this.executeCharTest('┛', ['box drawings heavy up and left', 'box drawings heavy up and left', 'box drawings heavy up and left']);
  this.executeCharTest('├', ['box drawings light vertical and right', 'box drawings light vertical and right', 'box drawings light vertical and right']);
  this.executeCharTest('┝', ['box drawings vertical light and right heavy', 'box drawings vertical light and right heavy', 'box drawings vertical light and right heavy']);
  this.executeCharTest('┞', ['box drawings up heavy and right down light', 'box drawings up heavy and right down light', 'box drawings up heavy and right down light']);
  this.executeCharTest('┟', ['box drawings down heavy and right up light', 'box drawings down heavy and right up light', 'box drawings down heavy and right up light']);
  this.executeCharTest('┠', ['box drawings vertical heavy and right light', 'box drawings vertical heavy and right light', 'box drawings vertical heavy and right light']);
  this.executeCharTest('┡', ['box drawings down light and right up heavy', 'box drawings down light and right up heavy', 'box drawings down light and right up heavy']);
  this.executeCharTest('┢', ['box drawings up light and right down heavy', 'box drawings up light and right down heavy', 'box drawings up light and right down heavy']);
  this.executeCharTest('┣', ['box drawings heavy vertical and right', 'box drawings heavy vertical and right', 'box drawings heavy vertical and right']);
  this.executeCharTest('┤', ['box drawings light vertical and left', 'box drawings light vertical and left', 'box drawings light vertical and left']);
  this.executeCharTest('┥', ['box drawings vertical light and left heavy', 'box drawings vertical light and left heavy', 'box drawings vertical light and left heavy']);
  this.executeCharTest('┦', ['box drawings up heavy and left down light', 'box drawings up heavy and left down light', 'box drawings up heavy and left down light']);
  this.executeCharTest('┧', ['box drawings down heavy and left up light', 'box drawings down heavy and left up light', 'box drawings down heavy and left up light']);
  this.executeCharTest('┨', ['box drawings vertical heavy and left light', 'box drawings vertical heavy and left light', 'box drawings vertical heavy and left light']);
  this.executeCharTest('┩', ['box drawings down light and left up heavy', 'box drawings down light and left up heavy', 'box drawings down light and left up heavy']);
  this.executeCharTest('┪', ['box drawings up light and left down heavy', 'box drawings up light and left down heavy', 'box drawings up light and left down heavy']);
  this.executeCharTest('┫', ['box drawings heavy vertical and left', 'box drawings heavy vertical and left', 'box drawings heavy vertical and left']);
  this.executeCharTest('┬', ['box drawings light down and horizontal', 'box drawings light down and horizontal', 'box drawings light down and horizontal']);
  this.executeCharTest('┭', ['box drawings left heavy and right down light', 'box drawings left heavy and right down light', 'box drawings left heavy and right down light']);
  this.executeCharTest('┮', ['box drawings right heavy and left down light', 'box drawings right heavy and left down light', 'box drawings right heavy and left down light']);
  this.executeCharTest('┯', ['box drawings down light and horizontal heavy', 'box drawings down light and horizontal heavy', 'box drawings down light and horizontal heavy']);
  this.executeCharTest('┰', ['box drawings down heavy and horizontal light', 'box drawings down heavy and horizontal light', 'box drawings down heavy and horizontal light']);
  this.executeCharTest('┱', ['box drawings right light and left down heavy', 'box drawings right light and left down heavy', 'box drawings right light and left down heavy']);
  this.executeCharTest('┲', ['box drawings left light and right down heavy', 'box drawings left light and right down heavy', 'box drawings left light and right down heavy']);
  this.executeCharTest('┳', ['box drawings heavy down and horizontal', 'box drawings heavy down and horizontal', 'box drawings heavy down and horizontal']);
  this.executeCharTest('┴', ['box drawings light up and horizontal', 'box drawings light up and horizontal', 'box drawings light up and horizontal']);
  this.executeCharTest('┵', ['box drawings left heavy and right up light', 'box drawings left heavy and right up light', 'box drawings left heavy and right up light']);
  this.executeCharTest('┶', ['box drawings right heavy and left up light', 'box drawings right heavy and left up light', 'box drawings right heavy and left up light']);
  this.executeCharTest('┷', ['box drawings up light and horizontal heavy', 'box drawings up light and horizontal heavy', 'box drawings up light and horizontal heavy']);
  this.executeCharTest('┸', ['box drawings up heavy and horizontal light', 'box drawings up heavy and horizontal light', 'box drawings up heavy and horizontal light']);
  this.executeCharTest('┹', ['box drawings right light and left up heavy', 'box drawings right light and left up heavy', 'box drawings right light and left up heavy']);
  this.executeCharTest('┺', ['box drawings left light and right up heavy', 'box drawings left light and right up heavy', 'box drawings left light and right up heavy']);
  this.executeCharTest('┻', ['box drawings heavy up and horizontal', 'box drawings heavy up and horizontal', 'box drawings heavy up and horizontal']);
  this.executeCharTest('┼', ['box drawings light vertical and horizontal', 'box drawings light vertical and horizontal', 'box drawings light vertical and horizontal']);
  this.executeCharTest('┽', ['box drawings left heavy and right vertical light', 'box drawings left heavy and right vertical light', 'box drawings left heavy and right vertical light']);
  this.executeCharTest('┾', ['box drawings right heavy and left vertical light', 'box drawings right heavy and left vertical light', 'box drawings right heavy and left vertical light']);
  this.executeCharTest('┿', ['box drawings vertical light and horizontal heavy', 'box drawings vertical light and horizontal heavy', 'box drawings vertical light and horizontal heavy']);
  this.executeCharTest('╀', ['box drawings up heavy and down horizontal light', 'box drawings up heavy and down horizontal light', 'box drawings up heavy and down horizontal light']);
  this.executeCharTest('╁', ['box drawings down heavy and up horizontal light', 'box drawings down heavy and up horizontal light', 'box drawings down heavy and up horizontal light']);
  this.executeCharTest('╂', ['box drawings vertical heavy and horizontal light', 'box drawings vertical heavy and horizontal light', 'box drawings vertical heavy and horizontal light']);
  this.executeCharTest('╃', ['box drawings left up heavy and right down light', 'box drawings left up heavy and right down light', 'box drawings left up heavy and right down light']);
  this.executeCharTest('╄', ['box drawings right up heavy and left down light', 'box drawings right up heavy and left down light', 'box drawings right up heavy and left down light']);
  this.executeCharTest('╅', ['box drawings left down heavy and right up light', 'box drawings left down heavy and right up light', 'box drawings left down heavy and right up light']);
  this.executeCharTest('╆', ['box drawings right down heavy and left up light', 'box drawings right down heavy and left up light', 'box drawings right down heavy and left up light']);
  this.executeCharTest('╇', ['box drawings down light and up horizontal heavy', 'box drawings down light and up horizontal heavy', 'box drawings down light and up horizontal heavy']);
  this.executeCharTest('╈', ['box drawings up light and down horizontal heavy', 'box drawings up light and down horizontal heavy', 'box drawings up light and down horizontal heavy']);
  this.executeCharTest('╉', ['box drawings right light and left vertical heavy', 'box drawings right light and left vertical heavy', 'box drawings right light and left vertical heavy']);
  this.executeCharTest('╊', ['box drawings left light and right vertical heavy', 'box drawings left light and right vertical heavy', 'box drawings left light and right vertical heavy']);
  this.executeCharTest('╋', ['box drawings heavy vertical and horizontal', 'box drawings heavy vertical and horizontal', 'box drawings heavy vertical and horizontal']);
  this.executeCharTest('╌', ['box drawings light double dash horizontal', 'box drawings light double dash horizontal', 'box drawings light double dash horizontal']);
  this.executeCharTest('╍', ['box drawings heavy double dash horizontal', 'box drawings heavy double dash horizontal', 'box drawings heavy double dash horizontal']);
  this.executeCharTest('╎', ['box drawings light double dash vertical', 'box drawings light double dash vertical', 'box drawings light double dash vertical']);
  this.executeCharTest('╏', ['box drawings heavy double dash vertical', 'box drawings heavy double dash vertical', 'box drawings heavy double dash vertical']);
  this.executeCharTest('═', ['box drawings double horizontal', 'box drawings double horizontal', 'box drawings double horizontal']);
  this.executeCharTest('║', ['box drawings double vertical', 'box drawings double vertical', 'box drawings double vertical']);
  this.executeCharTest('╒', ['box drawings down single and right double', 'box drawings down single and right double', 'box drawings down single and right double']);
  this.executeCharTest('╓', ['box drawings down double and right single', 'box drawings down double and right single', 'box drawings down double and right single']);
  this.executeCharTest('╔', ['box drawings double down and right', 'box drawings double down and right', 'box drawings double down and right']);
  this.executeCharTest('╕', ['box drawings down single and left double', 'box drawings down single and left double', 'box drawings down single and left double']);
  this.executeCharTest('╖', ['box drawings down double and left single', 'box drawings down double and left single', 'box drawings down double and left single']);
  this.executeCharTest('╗', ['box drawings double down and left', 'box drawings double down and left', 'box drawings double down and left']);
  this.executeCharTest('╘', ['box drawings up single and right double', 'box drawings up single and right double', 'box drawings up single and right double']);
  this.executeCharTest('╙', ['box drawings up double and right single', 'box drawings up double and right single', 'box drawings up double and right single']);
  this.executeCharTest('╚', ['box drawings double up and right', 'box drawings double up and right', 'box drawings double up and right']);
  this.executeCharTest('╛', ['box drawings up single and left double', 'box drawings up single and left double', 'box drawings up single and left double']);
  this.executeCharTest('╜', ['box drawings up double and left single', 'box drawings up double and left single', 'box drawings up double and left single']);
  this.executeCharTest('╝', ['box drawings double up and left', 'box drawings double up and left', 'box drawings double up and left']);
  this.executeCharTest('╞', ['box drawings vertical single and right double', 'box drawings vertical single and right double', 'box drawings vertical single and right double']);
  this.executeCharTest('╟', ['box drawings vertical double and right single', 'box drawings vertical double and right single', 'box drawings vertical double and right single']);
  this.executeCharTest('╠', ['box drawings double vertical and right', 'box drawings double vertical and right', 'box drawings double vertical and right']);
  this.executeCharTest('╡', ['box drawings vertical single and left double', 'box drawings vertical single and left double', 'box drawings vertical single and left double']);
  this.executeCharTest('╢', ['box drawings vertical double and left single', 'box drawings vertical double and left single', 'box drawings vertical double and left single']);
  this.executeCharTest('╣', ['box drawings double vertical and left', 'box drawings double vertical and left', 'box drawings double vertical and left']);
  this.executeCharTest('╤', ['box drawings down single and horizontal double', 'box drawings down single and horizontal double', 'box drawings down single and horizontal double']);
  this.executeCharTest('╥', ['box drawings down double and horizontal single', 'box drawings down double and horizontal single', 'box drawings down double and horizontal single']);
  this.executeCharTest('╦', ['box drawings double down and horizontal', 'box drawings double down and horizontal', 'box drawings double down and horizontal']);
  this.executeCharTest('╧', ['box drawings up single and horizontal double', 'box drawings up single and horizontal double', 'box drawings up single and horizontal double']);
  this.executeCharTest('╨', ['box drawings up double and horizontal single', 'box drawings up double and horizontal single', 'box drawings up double and horizontal single']);
  this.executeCharTest('╩', ['box drawings double up and horizontal', 'box drawings double up and horizontal', 'box drawings double up and horizontal']);
  this.executeCharTest('╪', ['box drawings vertical single and horizontal double', 'box drawings vertical single and horizontal double', 'box drawings vertical single and horizontal double']);
  this.executeCharTest('╫', ['box drawings vertical double and horizontal single', 'box drawings vertical double and horizontal single', 'box drawings vertical double and horizontal single']);
  this.executeCharTest('╬', ['box drawings double vertical and horizontal', 'box drawings double vertical and horizontal', 'box drawings double vertical and horizontal']);
  this.executeCharTest('╭', ['box drawings light arc down and right', 'box drawings light arc down and right', 'box drawings light arc down and right']);
  this.executeCharTest('╮', ['box drawings light arc down and left', 'box drawings light arc down and left', 'box drawings light arc down and left']);
  this.executeCharTest('╯', ['box drawings light arc up and left', 'box drawings light arc up and left', 'box drawings light arc up and left']);
  this.executeCharTest('╰', ['box drawings light arc up and right', 'box drawings light arc up and right', 'box drawings light arc up and right']);
  this.executeCharTest('╱', ['box drawings light diagonal upper right to lower left', 'box drawings light diagonal upper right to lower left', 'box drawings light diagonal upper right to lower left']);
  this.executeCharTest('╲', ['box drawings light diagonal upper left to lower right', 'box drawings light diagonal upper left to lower right', 'box drawings light diagonal upper left to lower right']);
  this.executeCharTest('╳', ['box drawings light diagonal cross', 'box drawings light diagonal cross', 'box drawings light diagonal cross']);
  this.executeCharTest('╴', ['box drawings light left', 'box drawings light left', 'box drawings light left']);
  this.executeCharTest('╵', ['box drawings light up', 'box drawings light up', 'box drawings light up']);
  this.executeCharTest('╶', ['box drawings light right', 'box drawings light right', 'box drawings light right']);
  this.executeCharTest('╷', ['box drawings light down', 'box drawings light down', 'box drawings light down']);
  this.executeCharTest('╸', ['box drawings heavy left', 'box drawings heavy left', 'box drawings heavy left']);
  this.executeCharTest('╹', ['box drawings heavy up', 'box drawings heavy up', 'box drawings heavy up']);
  this.executeCharTest('╺', ['box drawings heavy right', 'box drawings heavy right', 'box drawings heavy right']);
  this.executeCharTest('╻', ['box drawings heavy down', 'box drawings heavy down', 'box drawings heavy down']);
  this.executeCharTest('╼', ['box drawings light left and heavy right', 'box drawings light left and heavy right', 'box drawings light left and heavy right']);
  this.executeCharTest('╽', ['box drawings light up and heavy down', 'box drawings light up and heavy down', 'box drawings light up and heavy down']);
  this.executeCharTest('╾', ['box drawings heavy left and light right', 'box drawings heavy left and light right', 'box drawings heavy left and light right']);
  this.executeCharTest('╿', ['box drawings heavy up and light down', 'box drawings heavy up and light down', 'box drawings heavy up and light down']);
  this.executeCharTest('▀', ['upper half block', 'upper half block', 'upper half block']);
  this.executeCharTest('▁', ['lower one eighth block', 'lower one eighth block', 'lower one eighth block']);
  this.executeCharTest('▂', ['lower one quarter block', 'lower one quarter block', 'lower one quarter block']);
  this.executeCharTest('▃', ['lower three eighths block', 'lower three eighths block', 'lower three eighths block']);
  this.executeCharTest('▄', ['lower half block', 'lower half block', 'lower half block']);
  this.executeCharTest('▅', ['lower five eighths block', 'lower five eighths block', 'lower five eighths block']);
  this.executeCharTest('▆', ['lower three quarters block', 'lower three quarters block', 'lower three quarters block']);
  this.executeCharTest('▇', ['lower seven eighths block', 'lower seven eighths block', 'lower seven eighths block']);
  this.executeCharTest('█', ['full block', 'full block', 'full block']);
  this.executeCharTest('▉', ['left seven eighths block', 'left seven eighths block', 'left seven eighths block']);
  this.executeCharTest('▊', ['left three quarters block', 'left three quarters block', 'left three quarters block']);
  this.executeCharTest('▋', ['left five eighths block', 'left five eighths block', 'left five eighths block']);
  this.executeCharTest('▌', ['left half block', 'left half block', 'left half block']);
  this.executeCharTest('▍', ['left three eighths block', 'left three eighths block', 'left three eighths block']);
  this.executeCharTest('▎', ['left one quarter block', 'left one quarter block', 'left one quarter block']);
  this.executeCharTest('▏', ['left one eighth block', 'left one eighth block', 'left one eighth block']);
  this.executeCharTest('▐', ['right half block', 'right half block', 'right half block']);
  this.executeCharTest('░', ['light shade', 'light shade', 'light shade']);
  this.executeCharTest('▒', ['medium shade', 'medium shade', 'medium shade']);
  this.executeCharTest('▓', ['dark shade', 'dark shade', 'dark shade']);
  this.executeCharTest('▔', ['upper one eighth block', 'upper one eighth block', 'upper one eighth block']);
  this.executeCharTest('▕', ['right one eighth block', 'right one eighth block', 'right one eighth block']);
  this.executeCharTest('▖', ['quadrant lower left', 'quadrant lower left', 'quadrant lower left']);
  this.executeCharTest('▗', ['quadrant lower right', 'quadrant lower right', 'quadrant lower right']);
  this.executeCharTest('▘', ['quadrant upper left', 'quadrant upper left', 'quadrant upper left']);
  this.executeCharTest('▙', ['quadrant upper left and lower left and lower right', 'quadrant upper left and lower left and lower right', 'quadrant upper left and lower left and lower right']);
  this.executeCharTest('▚', ['quadrant upper left and lower right', 'quadrant upper left and lower right', 'quadrant upper left and lower right']);
  this.executeCharTest('▛', ['quadrant upper left and upper right and lower left', 'quadrant upper left and upper right and lower left', 'quadrant upper left and upper right and lower left']);
  this.executeCharTest('▜', ['quadrant upper left and upper right and lower right', 'quadrant upper left and upper right and lower right', 'quadrant upper left and upper right and lower right']);
  this.executeCharTest('▝', ['quadrant upper right', 'quadrant upper right', 'quadrant upper right']);
  this.executeCharTest('▞', ['quadrant upper right and lower left', 'quadrant upper right and lower left', 'quadrant upper right and lower left']);
  this.executeCharTest('▟', ['quadrant upper right and lower left and lower right', 'quadrant upper right and lower left and lower right', 'quadrant upper right and lower left and lower right']);
  this.executeCharTest('■', ['black square', 'black square', 'black square']);
  this.executeCharTest('□', ['white square', 'white square', 'white square']);
  this.executeCharTest('▢', ['white square with rounded corners', 'white square with rounded corners', 'white square with rounded corners']);
  this.executeCharTest('▣', ['white square containing black small square', 'white square containing black small square', 'white square containing black small square']);
  this.executeCharTest('▤', ['square with horizontal fill', 'square with horizontal fill', 'square with horizontal fill']);
  this.executeCharTest('▥', ['square with vertical fill', 'square with vertical fill', 'square with vertical fill']);
  this.executeCharTest('▦', ['square with orthogonal crosshatch fill', 'square with orthogonal crosshatch fill', 'square with orthogonal crosshatch fill']);
  this.executeCharTest('▧', ['square with upper left to lower right fill', 'square with upper left to lower right fill', 'square with upper left to lower right fill']);
  this.executeCharTest('▨', ['square with upper right to lower left fill', 'square with upper right to lower left fill', 'square with upper right to lower left fill']);
  this.executeCharTest('▩', ['square with diagonal crosshatch fill', 'square with diagonal crosshatch fill', 'square with diagonal crosshatch fill']);
  this.executeCharTest('▪', ['black small square', 'black small square', 'black small square']);
  this.executeCharTest('▫', ['white small square', 'white small square', 'white small square']);
  this.executeCharTest('▬', ['black rectangle', 'black rectangle', 'black rectangle']);
  this.executeCharTest('▭', ['white rectangle', 'white rectangle', 'white rectangle']);
  this.executeCharTest('▮', ['black vertical rectangle', 'black vertical rectangle', 'black vertical rectangle']);
  this.executeCharTest('▯', ['white vertical rectangle', 'white vertical rectangle', 'white vertical rectangle']);
  this.executeCharTest('▰', ['black parallelogram', 'black parallelogram', 'black parallelogram']);
  this.executeCharTest('▱', ['white parallelogram', 'white parallelogram', 'white parallelogram']);
  this.executeCharTest('▲', ['black up pointing triangle', 'black up pointing triangle', 'black up pointing triangle']);
  this.executeCharTest('△', ['white up pointing triangle', 'white up pointing triangle', 'white up pointing triangle']);
  this.executeCharTest('▴', ['black up pointing small triangle', 'black up pointing small triangle', 'black up pointing small triangle']);
  this.executeCharTest('▵', ['white up pointing small triangle', 'white up pointing small triangle', 'white up pointing small triangle']);
  this.executeCharTest('▶', ['black right pointing triangle', 'black right pointing triangle', 'black right pointing triangle']);
  this.executeCharTest('▷', ['white right pointing triangle', 'white right pointing triangle', 'white right pointing triangle']);
  this.executeCharTest('▸', ['black right pointing small triangle', 'black right pointing small triangle', 'black right pointing small triangle']);
  this.executeCharTest('▹', ['white right pointing small triangle', 'white right pointing small triangle', 'white right pointing small triangle']);
  this.executeCharTest('►', ['black right pointing pointer', 'black right pointing pointer', 'black right pointing pointer']);
  this.executeCharTest('▻', ['white right pointing pointer', 'white right pointing pointer', 'white right pointing pointer']);
  this.executeCharTest('▼', ['black down pointing triangle', 'black down pointing triangle', 'black down pointing triangle']);
  this.executeCharTest('▽', ['white down pointing triangle', 'white down pointing triangle', 'white down pointing triangle']);
  this.executeCharTest('▾', ['black down pointing small triangle', 'black down pointing small triangle', 'black down pointing small triangle']);
  this.executeCharTest('▿', ['white down pointing small triangle', 'white down pointing small triangle', 'white down pointing small triangle']);
  this.executeCharTest('◀', ['black left pointing triangle', 'black left pointing triangle', 'black left pointing triangle']);
  this.executeCharTest('◁', ['white left pointing triangle', 'white left pointing triangle', 'white left pointing triangle']);
  this.executeCharTest('◂', ['black left pointing small triangle', 'black left pointing small triangle', 'black left pointing small triangle']);
  this.executeCharTest('◃', ['white left pointing small triangle', 'white left pointing small triangle', 'white left pointing small triangle']);
  this.executeCharTest('◄', ['black left pointing pointer', 'black left pointing pointer', 'black left pointing pointer']);
  this.executeCharTest('◅', ['white left pointing pointer', 'white left pointing pointer', 'white left pointing pointer']);
  this.executeCharTest('◆', ['black diamond', 'black diamond', 'black diamond']);
  this.executeCharTest('◇', ['white diamond', 'white diamond', 'white diamond']);
  this.executeCharTest('◈', ['white diamond containing black small diamond', 'white diamond containing black small diamond', 'white diamond containing black small diamond']);
  this.executeCharTest('◉', ['fisheye', 'fisheye', 'fisheye']);
  this.executeCharTest('◊', ['lozenge', 'lozenge', 'lozenge']);
  this.executeCharTest('○', ['white circle', 'white circle', 'white circle']);
  this.executeCharTest('◌', ['dotted circle', 'dotted circle', 'dotted circle']);
  this.executeCharTest('◍', ['circle with vertical fill', 'circle with vertical fill', 'circle with vertical fill']);
  this.executeCharTest('◎', ['bullseye', 'bullseye', 'bullseye']);
  this.executeCharTest('●', ['black circle', 'black circle', 'black circle']);
  this.executeCharTest('◐', ['circle with left half black', 'circle with left half black', 'circle with left half black']);
  this.executeCharTest('◑', ['circle with right half black', 'circle with right half black', 'circle with right half black']);
  this.executeCharTest('◒', ['circle with lower half black', 'circle with lower half black', 'circle with lower half black']);
  this.executeCharTest('◓', ['circle with upper half black', 'circle with upper half black', 'circle with upper half black']);
  this.executeCharTest('◔', ['circle with upper right quadrant black', 'circle with upper right quadrant black', 'circle with upper right quadrant black']);
  this.executeCharTest('◕', ['circle with all but upper left quadrant black', 'circle with all but upper left quadrant black', 'circle with all but upper left quadrant black']);
  this.executeCharTest('◖', ['left half black circle', 'left half black circle', 'left half black circle']);
  this.executeCharTest('◗', ['right half black circle', 'right half black circle', 'right half black circle']);
  this.executeCharTest('◘', ['inverse bullet', 'inverse bullet', 'inverse bullet']);
  this.executeCharTest('◙', ['inverse white circle', 'inverse white circle', 'inverse white circle']);
  this.executeCharTest('◚', ['upper half inverse white circle', 'upper half inverse white circle', 'upper half inverse white circle']);
  this.executeCharTest('◛', ['lower half inverse white circle', 'lower half inverse white circle', 'lower half inverse white circle']);
  this.executeCharTest('◜', ['upper left quadrant circular arc', 'upper left quadrant circular arc', 'upper left quadrant circular arc']);
  this.executeCharTest('◝', ['upper right quadrant circular arc', 'upper right quadrant circular arc', 'upper right quadrant circular arc']);
  this.executeCharTest('◞', ['lower right quadrant circular arc', 'lower right quadrant circular arc', 'lower right quadrant circular arc']);
  this.executeCharTest('◟', ['lower left quadrant circular arc', 'lower left quadrant circular arc', 'lower left quadrant circular arc']);
  this.executeCharTest('◠', ['upper half circle', 'upper half circle', 'upper half circle']);
  this.executeCharTest('◡', ['lower half circle', 'lower half circle', 'lower half circle']);
  this.executeCharTest('◢', ['black lower right triangle', 'black lower right triangle', 'black lower right triangle']);
  this.executeCharTest('◣', ['black lower left triangle', 'black lower left triangle', 'black lower left triangle']);
  this.executeCharTest('◤', ['black upper left triangle', 'black upper left triangle', 'black upper left triangle']);
  this.executeCharTest('◥', ['black upper right triangle', 'black upper right triangle', 'black upper right triangle']);
  this.executeCharTest('◦', ['white bullet', 'white bullet', 'white bullet']);
  this.executeCharTest('◧', ['square with left half black', 'square with left half black', 'square with left half black']);
  this.executeCharTest('◨', ['square with right half black', 'square with right half black', 'square with right half black']);
  this.executeCharTest('◩', ['square with upper left diagonal half black', 'square with upper left diagonal half black', 'square with upper left diagonal half black']);
  this.executeCharTest('◪', ['square with lower right diagonal half black', 'square with lower right diagonal half black', 'square with lower right diagonal half black']);
  this.executeCharTest('◫', ['white square with vertical bisecting line', 'white square with vertical bisecting line', 'white square with vertical bisecting line']);
  this.executeCharTest('◬', ['white up pointing triangle with dot', 'white up pointing triangle with dot', 'white up pointing triangle with dot']);
  this.executeCharTest('◭', ['up pointing triangle with left half black', 'up pointing triangle with left half black', 'up pointing triangle with left half black']);
  this.executeCharTest('◮', ['up pointing triangle with right half black', 'up pointing triangle with right half black', 'up pointing triangle with right half black']);
  this.executeCharTest('◯', ['large circle', 'large circle', 'large circle']);
  this.executeCharTest('◰', ['white square with upper left quadrant', 'white square with upper left quadrant', 'white square with upper left quadrant']);
  this.executeCharTest('◱', ['white square with lower left quadrant', 'white square with lower left quadrant', 'white square with lower left quadrant']);
  this.executeCharTest('◲', ['white square with lower right quadrant', 'white square with lower right quadrant', 'white square with lower right quadrant']);
  this.executeCharTest('◳', ['white square with upper right quadrant', 'white square with upper right quadrant', 'white square with upper right quadrant']);
  this.executeCharTest('◴', ['white circle with upper left quadrant', 'white circle with upper left quadrant', 'white circle with upper left quadrant']);
  this.executeCharTest('◵', ['white circle with lower left quadrant', 'white circle with lower left quadrant', 'white circle with lower left quadrant']);
  this.executeCharTest('◶', ['white circle with lower right quadrant', 'white circle with lower right quadrant', 'white circle with lower right quadrant']);
  this.executeCharTest('◷', ['white circle with upper right quadrant', 'white circle with upper right quadrant', 'white circle with upper right quadrant']);
  this.executeCharTest('◸', ['upper left triangle', 'upper left triangle', 'upper left triangle']);
  this.executeCharTest('◹', ['upper right triangle', 'upper right triangle', 'upper right triangle']);
  this.executeCharTest('◺', ['lower left triangle', 'lower left triangle', 'lower left triangle']);
  this.executeCharTest('◻', ['white medium square', 'white medium square', 'white medium square']);
  this.executeCharTest('◼', ['black medium square', 'black medium square', 'black medium square']);
  this.executeCharTest('◽', ['white medium small square', 'white medium small square', 'white medium small square']);
  this.executeCharTest('◾', ['black medium small square', 'black medium small square', 'black medium small square']);
  this.executeCharTest('◿', ['lower right triangle', 'lower right triangle', 'lower right triangle']);
  this.executeCharTest('⬒', ['square with top half black', 'square with top half black', 'square with top half black']);
  this.executeCharTest('⬓', ['square with bottom half black', 'square with bottom half black', 'square with bottom half black']);
  this.executeCharTest('⬔', ['square with upper right diagonal half black', 'square with upper right diagonal half black', 'square with upper right diagonal half black']);
  this.executeCharTest('⬕', ['square with lower left diagonal half black', 'square with lower left diagonal half black', 'square with lower left diagonal half black']);
  this.executeCharTest('⬖', ['diamond with left half black', 'diamond with left half black', 'diamond with left half black']);
  this.executeCharTest('⬗', ['diamond with right half black', 'diamond with right half black', 'diamond with right half black']);
  this.executeCharTest('⬘', ['diamond with top half black', 'diamond with top half black', 'diamond with top half black']);
  this.executeCharTest('⬙', ['diamond with bottom half black', 'diamond with bottom half black', 'diamond with bottom half black']);
  this.executeCharTest('⬚', ['dotted square', 'dotted square', 'dotted square']);
  this.executeCharTest('⬛', ['black large square', 'black large square', 'black large square']);
  this.executeCharTest('⬜', ['white large square', 'white large square', 'white large square']);
  this.executeCharTest('⬝', ['black very small square', 'black very small square', 'black very small square']);
  this.executeCharTest('⬞', ['white very small square', 'white very small square', 'white very small square']);
  this.executeCharTest('⬟', ['black pentagon', 'black pentagon', 'black pentagon']);
  this.executeCharTest('⬠', ['white pentagon', 'white pentagon', 'white pentagon']);
  this.executeCharTest('⬡', ['white hexagon', 'white hexagon', 'white hexagon']);
  this.executeCharTest('⬢', ['black hexagon', 'black hexagon', 'black hexagon']);
  this.executeCharTest('⬣', ['horizontal black hexagon', 'horizontal black hexagon', 'horizontal black hexagon']);
  this.executeCharTest('⬤', ['black large circle', 'black large circle', 'black large circle']);
  this.executeCharTest('⬥', ['black medium diamond', 'black medium diamond', 'black medium diamond']);
  this.executeCharTest('⬦', ['white medium diamond', 'white medium diamond', 'white medium diamond']);
  this.executeCharTest('⬧', ['black medium lozenge', 'black medium lozenge', 'black medium lozenge']);
  this.executeCharTest('⬨', ['white medium lozenge', 'white medium lozenge', 'white medium lozenge']);
  this.executeCharTest('⬩', ['black small diamond', 'black small diamond', 'black small diamond']);
  this.executeCharTest('⬪', ['black small lozenge', 'black small lozenge', 'black small lozenge']);
  this.executeCharTest('⬫', ['white small lozenge', 'white small lozenge', 'white small lozenge']);
  this.executeCharTest('⬬', ['black horizontal ellipse', 'black horizontal ellipse', 'black horizontal ellipse']);
  this.executeCharTest('⬭', ['white horizontal ellipse', 'white horizontal ellipse', 'white horizontal ellipse']);
  this.executeCharTest('⬮', ['black vertical ellipse', 'black vertical ellipse', 'black vertical ellipse']);
  this.executeCharTest('⬯', ['white vertical ellipse', 'white vertical ellipse', 'white vertical ellipse']);
  this.executeCharTest('⭐', ['white medium star', 'white medium star', 'white medium star']);
  this.executeCharTest('⭑', ['black small star', 'black small star', 'black small star']);
  this.executeCharTest('⭒', ['white small star', 'white small star', 'white small star']);
  this.executeCharTest('⭓', ['black right pointing pentagon', 'black right pointing pentagon', 'black right pointing pentagon']);
  this.executeCharTest('⭔', ['white right pointing pentagon', 'white right pointing pentagon', 'white right pointing pentagon']);
  this.executeCharTest('⭕', ['heavy large circle', 'heavy large circle', 'heavy large circle']);
  this.executeCharTest('⭖', ['heavy oval with oval inside', 'heavy oval with oval inside', 'heavy oval with oval inside']);
  this.executeCharTest('⭗', ['heavy circle with circle inside', 'heavy circle with circle inside', 'heavy circle with circle inside']);
  this.executeCharTest('⭘', ['heavy circle', 'heavy circle', 'heavy circle']);
  this.executeCharTest('⭙', ['heavy circled saltire', 'heavy circled saltire', 'heavy circled saltire']);
  this.executeCharTest('↼', ['left harpoon with barb up', 'left harpoon with barb up', 'left harpoon with barb up']);
  this.executeCharTest('↽', ['left harpoon with barb down', 'left harpoon with barb down', 'left harpoon with barb down']);
  this.executeCharTest('↾', ['up harpoon with barb right', 'up harpoon with barb right', 'up harpoon with barb right']);
  this.executeCharTest('↿', ['up harpoon with barb left', 'up harpoon with barb left', 'up harpoon with barb left']);
  this.executeCharTest('⇀', ['right harpoon with barb up', 'right harpoon with barb up', 'right harpoon with barb up']);
  this.executeCharTest('⇁', ['right harpoon with barb down', 'right harpoon with barb down', 'right harpoon with barb down']);
  this.executeCharTest('⇂', ['down harpoon with barb right', 'down harpoon with barb right', 'down harpoon with barb right']);
  this.executeCharTest('⇃', ['down harpoon with barb left', 'down harpoon with barb left', 'down harpoon with barb left']);
  this.executeCharTest('⇋', ['left harpoon over right harpoon', 'left harpoon over right harpoon', 'left harpoon over right harpoon']);
  this.executeCharTest('⇌', ['right harpoon over left harpoon', 'right harpoon over left harpoon', 'right harpoon over left harpoon']);
  this.executeCharTest('⥊', ['left barb up right barb down harpoon', 'left barb up right barb down harpoon', 'left barb up right barb down harpoon']);
  this.executeCharTest('⥋', ['left barb down right barb up harpoon', 'left barb down right barb up harpoon', 'left barb down right barb up harpoon']);
  this.executeCharTest('⥌', ['up barb right down barb left harpoon', 'up barb right down barb left harpoon', 'up barb right down barb left harpoon']);
  this.executeCharTest('⥍', ['up barb left down barb right harpoon', 'up barb left down barb right harpoon', 'up barb left down barb right harpoon']);
  this.executeCharTest('⥎', ['left barb up right barb up harpoon', 'left barb up right barb up harpoon', 'left barb up right barb up harpoon']);
  this.executeCharTest('⥏', ['up barb right down barb right harpoon', 'up barb right down barb right harpoon', 'up barb right down barb right harpoon']);
  this.executeCharTest('⥐', ['left barb down right barb down harpoon', 'left barb down right barb down harpoon', 'left barb down right barb down harpoon']);
  this.executeCharTest('⥑', ['up barb left down barb left harpoon', 'up barb left down barb left harpoon', 'up barb left down barb left harpoon']);
  this.executeCharTest('⥒', ['left harpoon with barb up to bar', 'left harpoon with barb up to bar', 'left harpoon with barb up to bar']);
  this.executeCharTest('⥓', ['right harpoon with barb up to bar', 'right harpoon with barb up to bar', 'right harpoon with barb up to bar']);
  this.executeCharTest('⥔', ['up harpoon with barb right to bar', 'up harpoon with barb right to bar', 'up harpoon with barb right to bar']);
  this.executeCharTest('⥕', ['down harpoon with barb right to bar', 'down harpoon with barb right to bar', 'down harpoon with barb right to bar']);
  this.executeCharTest('⥖', ['left harpoon with barb down to bar', 'left harpoon with barb down to bar', 'left harpoon with barb down to bar']);
  this.executeCharTest('⥗', ['right harpoon with barb down to bar', 'right harpoon with barb down to bar', 'right harpoon with barb down to bar']);
  this.executeCharTest('⥘', ['up harpoon with barb left to bar', 'up harpoon with barb left to bar', 'up harpoon with barb left to bar']);
  this.executeCharTest('⥙', ['down harpoon with barb left to bar', 'down harpoon with barb left to bar', 'down harpoon with barb left to bar']);
  this.executeCharTest('⥚', ['left harpoon with barb up from bar', 'left harpoon with barb up from bar', 'left harpoon with barb up from bar']);
  this.executeCharTest('⥛', ['right harpoon with barb up from bar', 'right harpoon with barb up from bar', 'right harpoon with barb up from bar']);
  this.executeCharTest('⥜', ['up harpoon with barb right from bar', 'up harpoon with barb right from bar', 'up harpoon with barb right from bar']);
  this.executeCharTest('⥝', ['down harpoon with barb right from bar', 'down harpoon with barb right from bar', 'down harpoon with barb right from bar']);
  this.executeCharTest('⥞', ['left harpoon with barb down from bar', 'left harpoon with barb down from bar', 'left harpoon with barb down from bar']);
  this.executeCharTest('⥟', ['right harpoon with barb down from bar', 'right harpoon with barb down from bar', 'right harpoon with barb down from bar']);
  this.executeCharTest('⥠', ['up harpoon with barb left from bar', 'up harpoon with barb left from bar', 'up harpoon with barb left from bar']);
  this.executeCharTest('⥡', ['down harpoon with barb left from bar', 'down harpoon with barb left from bar', 'down harpoon with barb left from bar']);
  this.executeCharTest('⥢', ['left harpoon with barb up above left harpoon with barb down', 'left harpoon with barb up above left harpoon with barb down', 'left harpoon with barb up above left harpoon with barb down']);
  this.executeCharTest('⥣', ['up harpoon with barb left beside up harpoon with barb right', 'up harpoon with barb left beside up harpoon with barb right', 'up harpoon with barb left beside up harpoon with barb right']);
  this.executeCharTest('⥤', ['right harpoon with barb up above right harpoon with barb down', 'right harpoon with barb up above right harpoon with barb down', 'right harpoon with barb up above right harpoon with barb down']);
  this.executeCharTest('⥥', ['down harpoon with barb left beside down harpoon with barb right', 'down harpoon with barb left beside down harpoon with barb right', 'down harpoon with barb left beside down harpoon with barb right']);
  this.executeCharTest('⥦', ['left harpoon with barb up above right harpoon with barb up', 'left harpoon with barb up above right harpoon with barb up', 'left harpoon with barb up above right harpoon with barb up']);
  this.executeCharTest('⥧', ['left harpoon with barb down above right harpoon with barb down', 'left harpoon with barb down above right harpoon with barb down', 'left harpoon with barb down above right harpoon with barb down']);
  this.executeCharTest('⥨', ['right harpoon with barb up above left harpoon with barb up', 'right harpoon with barb up above left harpoon with barb up', 'right harpoon with barb up above left harpoon with barb up']);
  this.executeCharTest('⥩', ['right harpoon with barb down above left harpoon with barb down', 'right harpoon with barb down above left harpoon with barb down', 'right harpoon with barb down above left harpoon with barb down']);
  this.executeCharTest('⥪', ['left harpoon with barb up above long dash', 'left harpoon with barb up above long dash', 'left harpoon with barb up above long dash']);
  this.executeCharTest('⥫', ['left harpoon with barb down below long dash', 'left harpoon with barb down below long dash', 'left harpoon with barb down below long dash']);
  this.executeCharTest('⥬', ['right harpoon with barb up above long dash', 'right harpoon with barb up above long dash', 'right harpoon with barb up above long dash']);
  this.executeCharTest('⥭', ['right harpoon with barb down below long dash', 'right harpoon with barb down below long dash', 'right harpoon with barb down below long dash']);
  this.executeCharTest('⥮', ['up harpoon with barb left beside down harpoon with barb right', 'up harpoon with barb left beside down harpoon with barb right', 'up harpoon with barb left beside down harpoon with barb right']);
  this.executeCharTest('⥯', ['down harpoon with barb left beside up harpoon with barb right', 'down harpoon with barb left beside up harpoon with barb right', 'down harpoon with barb left beside up harpoon with barb right']);
  this.executeCharTest('⥼', ['left fish tail', 'left fish tail', 'left fish tail']);
  this.executeCharTest('⥽', ['right fish tail', 'right fish tail', 'right fish tail']);
  this.executeCharTest('⥾', ['up fish tail', 'up fish tail', 'up fish tail']);
  this.executeCharTest('⥿', ['down fish tail', 'down fish tail', 'down fish tail']);
  this.executeCharTest('ℏ', ['italic h over two pi', 'italic h over two pi', 'italic h over two pi']);
  this.executeCharTest('℔', ['l b bar', 'l b bar', 'l b bar']);
  this.executeCharTest('№', ['numero', 'numero', 'numero']);
  this.executeCharTest('℗', ['sound recording copyright', 'sound recording copyright', 'sound recording copyright']);
  this.executeCharTest('℞', ['prescription take', 'prescription take', 'prescription take']);
  this.executeCharTest('℟', ['response', 'response', 'response']);
  this.executeCharTest('℠', ['service mark', 'service mark', 'service mark']);
  this.executeCharTest('℡', ['telephone sign', 'telephone sign', 'telephone sign']);
  this.executeCharTest('™', ['trade mark', 'trade mark', 'trade mark']);
  this.executeCharTest('℣', ['versicle', 'versicle', 'versicle']);
  this.executeCharTest('℥', ['ounce', 'ounce', 'ounce']);
  this.executeCharTest('Ω', ['ohm', 'ohm', 'ohm']);
  this.executeCharTest('℧', ['inverted ohm', 'inverted ohm', 'inverted ohm']);
  this.executeCharTest('K', ['kelvin', 'kelvin', 'kelvin']);
  this.executeCharTest('Å', ['angstrom', 'angstrom', 'angstrom']);
  this.executeCharTest('℮', ['estimated', 'estimated', 'estimated']);
  this.executeCharTest('Ⅎ', ['turned upper F', 'turned upper F', 'turned upper F']);
  this.executeCharTest('ℹ', ['information source', 'information source', 'information source']);
  this.executeCharTest('℺', ['rotated upper Q', 'rotated upper Q', 'rotated upper Q']);
  this.executeCharTest('℻', ['facsimile sign', 'facsimile sign', 'facsimile sign']);
  this.executeCharTest('⅁', ['turned sans serif upper G', 'turned sans serif upper G', 'turned sans serif upper G']);
  this.executeCharTest('⅂', ['turned sans serif upper L', 'turned sans serif upper L', 'turned sans serif upper L']);
  this.executeCharTest('⅃', ['reversed sans serif upper L', 'reversed sans serif upper L', 'reversed sans serif upper L']);
  this.executeCharTest('⅄', ['turned sans serif upper Y', 'turned sans serif upper Y', 'turned sans serif upper Y']);
  this.executeCharTest('!', ['exclamation-mark', 'exclamation-mark', 'exclamation-mark']);
  this.executeCharTest('\"', ['quotation-mark', 'quotation-mark', 'quotation-mark']);
  this.executeCharTest('#', ['number-sign', 'num-sign', 'num-sign']);
  this.executeCharTest('$', ['dollar-sign', 'dollar-sign', 'dollar-sign']);
  this.executeCharTest('%', ['percent-sign', 'percent-sign', 'percent-sign']);
  this.executeCharTest('&', ['ampersand', 'ampersand', 'ampersand']);
  this.executeCharTest('\'', ['prime', 'prime', 'prime']);
  this.executeCharTest('*', ['asterisk', 'asterisk', 'asterisk']);
  this.executeCharTest('+', ['plus', 'plus', 'plus']);
  this.executeCharTest(',', ['comma', 'comma', 'comma']);
  this.executeCharTest('-', ['hyphen', 'hyphen', 'hyphen']);
  this.executeCharTest('.', ['period', 'period', 'period']);
  this.executeCharTest('/', ['slash', 'slash', 'slash']);
  this.executeCharTest(':', ['colon', 'colon', 'colon']);
  this.executeCharTest(';', ['semicolon', 'semicolon', 'semicolon']);
  this.executeCharTest('<', ['less-than', 'less-than', 'less-than']);
  this.executeCharTest('=', ['equals', 'equals', 'equals']);
  this.executeCharTest('>', ['greater-than', 'greater-than', 'greater-than']);
  this.executeCharTest('?', ['question-mark', 'question-mark', 'question-mark']);
  this.executeCharTest('@', ['commercial-at', 'commercial-at', 'commercial-at']);
  this.executeCharTest('\\', ['reverse-solidus', 'reverse-solidus', 'reverse-solidus']);
  this.executeCharTest('^', ['caret', 'caret', 'caret']);
  this.executeCharTest('_', ['bar', 'bar', 'bar']);
  this.executeCharTest('`', ['grave', 'grave', 'grave']);
  this.executeCharTest('|', ['vertical-bar', 'vertical-bar', 'vertical-bar']);
  this.executeCharTest('~', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('¡', ['inverted-exclamation-mark', 'inverted-exclamation-mark', 'inverted-exclamation-mark']);
  this.executeCharTest('¢', ['cent-sign', 'cent-sign', 'cent-sign']);
  this.executeCharTest('£', ['pound-sign', 'pound-sign', 'pound-sign']);
  this.executeCharTest('¤', ['currency-sign', 'currency-sign', 'currency-sign']);
  this.executeCharTest('¥', ['yen-sign', 'yen-sign', 'yen-sign']);
  this.executeCharTest('¦', ['broken-vertical-bar', 'broken-vertical-bar', 'broken-vertical-bar']);
  this.executeCharTest('§', ['section-sign', 'section-sign', 'section-sign']);
  this.executeCharTest('¨', ['two-dots', 'two-dots', 'two-dots']);
  this.executeCharTest('©', ['copyright-sign', 'copyright-sign', 'copyright-sign']);
  this.executeCharTest('ª', ['feminine-ordinal-indicator', 'feminine-ordinal-indicator', 'feminine-ordinal-indicator']);
  this.executeCharTest('«', ['left-pointing-guillemet', 'left-pointing-guillemet', 'left-pointing-guillemet']);
  this.executeCharTest('¬', ['not-sign', 'not-sign', 'not-sign']);
  this.executeCharTest('®', ['registered-trade-mark-sign', 'registered-trade-mark-sign', 'registered-trade-mark-sign']);
  this.executeCharTest('¯', ['bar', 'bar', 'bar']);
  this.executeCharTest('°', ['degree', 'degree', 'degree']);
  this.executeCharTest('±', ['plus-or-minus', 'plus-or-minus', 'plus-or-minus']);
  this.executeCharTest('´', ['acute', 'acute', 'acute']);
  this.executeCharTest('µ', ['micro-sign', 'micro-sign', 'micro-sign']);
  this.executeCharTest('¶', ['paragraph-sign', 'paragraph-sign', 'paragraph-sign']);
  this.executeCharTest('·', ['dot', 'dot', 'dot']);
  this.executeCharTest('¸', ['cedilla', 'cedilla', 'cedilla']);
  this.executeCharTest('º', ['masculine-ordinal-indicator', 'masculine-ordinal-indicator', 'masculine-ordinal-indicator']);
  this.executeCharTest('»', ['right-pointing-guillemet', 'right-pointing-guillemet', 'right-pointing-guillemet']);
  this.executeCharTest('¿', ['inverted-question-mark', 'inverted-question-mark', 'inverted-question-mark']);
  this.executeCharTest('×', ['times', 'times', 'times']);
  this.executeCharTest('÷', ['division-sign', 'division-sign', 'division-sign']);
  this.executeCharTest('˘', ['breve', 'breve', 'breve']);
  this.executeCharTest('˙', ['dot', 'dot', 'dot']);
  this.executeCharTest('˚', ['ring-above', 'ring-above', 'ring-above']);
  this.executeCharTest('˛', ['ogonek', 'ogonek', 'ogonek']);
  this.executeCharTest('˜', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('˝', ['double-acute', 'double-acute', 'double-acute']);
  this.executeCharTest('‐', ['hyphen', 'hyphen', 'hyphen']);
  this.executeCharTest('‑', ['non-breaking-hyphen', 'non-breaking-hyphen', 'non-breaking-hyphen']);
  this.executeCharTest('‒', ['figure-dash', 'figure-dash', 'figure-dash']);
  this.executeCharTest('–', ['en-dash', 'en-dash', 'en-dash']);
  this.executeCharTest('—', ['em-dash', 'em-dash', 'em-dash']);
  this.executeCharTest('―', ['quotation-dash', 'quotation-dash', 'quotation-dash']);
  this.executeCharTest('‖', ['double-vertical-bar', 'double-vertical-bar', 'double-vertical-bar']);
  this.executeCharTest('‗', ['double-underscore', 'double-underscore', 'double-underscore']);
  this.executeCharTest('‘', ['single-turned-comma-quotation-mark', 'single-turned-comma-quotation-mark', 'single-turned-comma-quotation-mark']);
  this.executeCharTest('’', ['single-comma-quotation-mark', 'single-comma-quotation-mark', 'single-comma-quotation-mark']);
  this.executeCharTest('‚', ['low-single-comma-quotation-mark', 'low-single-comma-quotation-mark', 'low-single-comma-quotation-mark']);
  this.executeCharTest('‛', ['single-reversed-comma-quotation-mark', 'single-reversed-comma-quotation-mark', 'single-reversed-comma-quotation-mark']);
  this.executeCharTest('“', ['double-turned-comma-quotation-mark', 'double-turned-comma-quotation-mark', 'double-turned-comma-quotation-mark']);
  this.executeCharTest('”', ['double-comma-quotation-mark', 'double-comma-quotation-mark', 'double-comma-quotation-mark']);
  this.executeCharTest('„', ['low-double-comma-quotation-mark', 'low-double-comma-quotation-mark', 'low-double-comma-quotation-mark']);
  this.executeCharTest('‟', ['double-reversed-comma-quotation-mark', 'double-reversed-comma-quotation-mark', 'double-reversed-comma-quotation-mark']);
  this.executeCharTest('†', ['dagger', 'dagger', 'dagger']);
  this.executeCharTest('‡', ['double-dagger', 'double-dagger', 'double-dagger']);
  this.executeCharTest('•', ['bullet', 'bullet', 'bullet']);
  this.executeCharTest('‣', ['triangular-bullet', 'triangular-bullet', 'triangular-bullet']);
  this.executeCharTest('․', ['one-dot-leader', 'one-dot-leader', 'one-dot-leader']);
  this.executeCharTest('‥', ['two-dot-leader', 'two-dot-leader', 'two-dot-leader']);
  this.executeCharTest('…', ['ellipsis', 'ellipsis', 'ellipsis']);
  this.executeCharTest('‧', ['hyphenation-point', 'hyphenation-point', 'hyphenation-point']);
  this.executeCharTest('‰', ['per-mille', 'per-mille', 'per-mille']);
  this.executeCharTest('‱', ['per-ten-thousand', 'per-ten-thousand', 'per-ten-thousand']);
  this.executeCharTest('′', ['prime', 'prime', 'prime']);
  this.executeCharTest('″', ['double-prime', 'double-prime', 'double-prime']);
  this.executeCharTest('‴', ['triple-prime', 'triple-prime', 'triple-prime']);
  this.executeCharTest('‵', ['reversed-prime', 'reversed-prime', 'reversed-prime']);
  this.executeCharTest('‶', ['reversed-double-prime', 'reversed-double-prime', 'reversed-double-prime']);
  this.executeCharTest('‷', ['reversed-triple-prime', 'reversed-triple-prime', 'reversed-triple-prime']);
  this.executeCharTest('‸', ['caret', 'caret', 'caret']);
  this.executeCharTest('‹', ['left-pointing-single-guillemet', 'left-pointing-single-guillemet', 'left-pointing-single-guillemet']);
  this.executeCharTest('›', ['right-pointing-single-guillemet', 'right-pointing-single-guillemet', 'right-pointing-single-guillemet']);
  this.executeCharTest('※', ['reference-mark', 'reference-mark', 'reference-mark']);
  this.executeCharTest('‼', ['double-exclamation-mark', 'double-exclamation-mark', 'double-exclamation-mark']);
  this.executeCharTest('‽', ['interrobang', 'interrobang', 'interrobang']);
  this.executeCharTest('‾', ['bar', 'bar', 'bar']);
  this.executeCharTest('‿', ['undertie', 'undertie', 'undertie']);
  this.executeCharTest('⁀', ['character-tie', 'character-tie', 'character-tie']);
  this.executeCharTest('⁁', ['caret-insertion-point', 'caret-insertion-point', 'caret-insertion-point']);
  this.executeCharTest('⁂', ['asterism', 'asterism', 'asterism']);
  this.executeCharTest('⁃', ['hyphen-bullet', 'hyphen-bullet', 'hyphen-bullet']);
  this.executeCharTest('⁄', ['fraction-slash', 'fraction-slash', 'fraction-slash']);
  this.executeCharTest('⁇', ['double-question-mark', 'double-question-mark', 'double-question-mark']);
  this.executeCharTest('⁈', ['question-exclamation-mark', 'question-exclamation-mark', 'question-exclamation-mark']);
  this.executeCharTest('⁉', ['exclamation-question-mark', 'exclamation-question-mark', 'exclamation-question-mark']);
  this.executeCharTest('⁋', ['reversed-pilcrow', 'reversed-pilcrow', 'reversed-pilcrow']);
  this.executeCharTest('⁌', ['black-leftwards-bullet', 'black-leftwards-bullet', 'black-leftwards-bullet']);
  this.executeCharTest('⁍', ['black-rightwards-bullet', 'black-rightwards-bullet', 'black-rightwards-bullet']);
  this.executeCharTest('⁎', ['low-asterisk', 'low-asterisk', 'low-asterisk']);
  this.executeCharTest('⁏', ['reversed-semicolon', 'reversed-semicolon', 'reversed-semicolon']);
  this.executeCharTest('⁐', ['close-up', 'close-up', 'close-up']);
  this.executeCharTest('⁑', ['two-asterisks-aligned-vertically', 'two-asterisks-aligned-vertically', 'two-asterisks-aligned-vertically']);
  this.executeCharTest('⁒', ['commercial-minus', 'commercial-minus', 'commercial-minus']);
  this.executeCharTest('⁓', ['swung-dash', 'swung-dash', 'swung-dash']);
  this.executeCharTest('⁔', ['inverted-undertie', 'inverted-undertie', 'inverted-undertie']);
  this.executeCharTest('⁕', ['flower-punctuation-mark', 'flower-punctuation-mark', 'flower-punctuation-mark']);
  this.executeCharTest('⁖', ['three-dot-punctuation', 'three-dot-punctuation', 'three-dot-punctuation']);
  this.executeCharTest('⁗', ['quadruple-prime', 'quadruple-prime', 'quadruple-prime']);
  this.executeCharTest('⁘', ['four-dot-punctuation', 'four-dot-punctuation', 'four-dot-punctuation']);
  this.executeCharTest('⁙', ['five-dot-punctuation', 'five-dot-punctuation', 'five-dot-punctuation']);
  this.executeCharTest('⁚', ['two-dot-punctuation', 'two-dot-punctuation', 'two-dot-punctuation']);
  this.executeCharTest('⁛', ['four-dot-mark', 'four-dot-mark', 'four-dot-mark']);
  this.executeCharTest('⁜', ['dotted-cross', 'dotted-cross', 'dotted-cross']);
  this.executeCharTest('⁝', ['tricolon', 'tricolon', 'tricolon']);
  this.executeCharTest('⁞', ['vertical-four-dots', 'vertical-four-dots', 'vertical-four-dots']);
  this.executeCharTest('⁺', ['superscript-plus', 'superscript-plus', 'superscript-plus']);
  this.executeCharTest('⁻', ['superscript-hyphen-minus', 'superscript-hyphen-minus', 'superscript-hyphen-minus']);
  this.executeCharTest('⁼', ['superscript-equals', 'superscript-equals', 'superscript-equals']);
  this.executeCharTest('⁽', ['superscript-opening-parenthesis', 'superscript-opening-parenthesis', 'superscript-opening-parenthesis']);
  this.executeCharTest('⁾', ['superscript-closing-parenthesis', 'superscript-closing-parenthesis', 'superscript-closing-parenthesis']);
  this.executeCharTest('₊', ['subscript-plus', 'subscript-plus', 'subscript-plus']);
  this.executeCharTest('₋', ['subscript-hyphen-minus', 'subscript-hyphen-minus', 'subscript-hyphen-minus']);
  this.executeCharTest('₌', ['subscript-equals', 'subscript-equals', 'subscript-equals']);
  this.executeCharTest('₍', ['subscript-opening-parenthesis', 'subscript-opening-parenthesis', 'subscript-opening-parenthesis']);
  this.executeCharTest('₎', ['subscript-closing-parenthesis', 'subscript-closing-parenthesis', 'subscript-closing-parenthesis']);
  this.executeCharTest('⅊', ['property-line', 'property-line', 'property-line']);
  this.executeCharTest('⅋', ['turned-ampersand', 'turned-ampersand', 'turned-ampersand']);
  this.executeCharTest('⅌', ['per-sign', 'per-sign', 'per-sign']);
  this.executeCharTest('⅍', ['aktieselskab', 'aktieselskab', 'aktieselskab']);
  this.executeCharTest('ⅎ', ['turned-small-f', 'turned-small-f', 'turned-small-f']);
  this.executeCharTest('∀', ['for-all', 'for-all', 'for-all']);
  this.executeCharTest('∁', ['complement', 'complement', 'complement']);
  this.executeCharTest('∂', ['partial differential', 'partial differential', 'partial differential']);
  this.executeCharTest('∃', ['there-exists', 'there-exists', 'there-exists']);
  this.executeCharTest('∄', ['there-does-not-exist', 'there-does-not-exist', 'there-does-not-exist']);
  this.executeCharTest('∅', ['empty-set', 'empty-set', 'empty-set']);
  this.executeCharTest('∆', ['increment', 'increment', 'increment']);
  this.executeCharTest('∇', ['nabla', 'nabla', 'nabla']);
  this.executeCharTest('∈', ['element-of', 'element-of', 'element-of']);
  this.executeCharTest('∉', ['not-an-element-of', 'not-an-element-of', 'not-an-element-of']);
  this.executeCharTest('∊', ['small-element-of', 'small-element-of', 'small-element-of']);
  this.executeCharTest('∋', ['contains-as-member', 'contains-as-member', 'contains-as-member']);
  this.executeCharTest('∌', ['does-not-contain-as-member', 'does-not-contain-as-member', 'does-not-contain-as-member']);
  this.executeCharTest('∍', ['small-contains-as-member', 'small-contains-as-member', 'small-contains-as-member']);
  this.executeCharTest('∎', ['end-of-proof', 'end-of-proof', 'end-of-proof']);
  this.executeCharTest('∏', ['product', 'product', 'product']);
  this.executeCharTest('∐', ['coproduct', 'coproduct', 'coproduct']);
  this.executeCharTest('∑', ['sigma-summation', 'sigma-summation', 'sigma-summation']);
  this.executeCharTest('−', ['minus', 'minus', 'minus']);
  this.executeCharTest('∓', ['minus-or-plus', 'minus-or-plus', 'minus-or-plus']);
  this.executeCharTest('∔', ['dot-plus', 'dot-plus', 'dot-plus']);
  this.executeCharTest('∕', ['division-slash', 'division-slash', 'division-slash']);
  this.executeCharTest('∖', ['set-minus', 'set-minus', 'set-minus']);
  this.executeCharTest('∗', ['asterisk', 'asterisk', 'asterisk']);
  this.executeCharTest('∘', ['ring', 'ring', 'ring']);
  this.executeCharTest('∙', ['bullet', 'bullet', 'bullet']);
  this.executeCharTest('√', ['square-root', 'square-root', 'square-root']);
  this.executeCharTest('∛', ['cube-root', 'cube-root', 'cube-root']);
  this.executeCharTest('∜', ['fourth-root', 'fourth-root', 'fourth-root']);
  this.executeCharTest('∝', ['proportional-to', 'proportional-to', 'proportional-to']);
  this.executeCharTest('∞', ['infinity', 'infinity', 'infinity']);
  this.executeCharTest('∟', ['right-angle', 'right-angle', 'right-angle']);
  this.executeCharTest('∠', ['angle', 'angle', 'angle']);
  this.executeCharTest('∡', ['measured-angle', 'measured-angle', 'measured-angle']);
  this.executeCharTest('∢', ['spherical-angle', 'spherical-angle', 'spherical-angle']);
  this.executeCharTest('∣', ['bar', 'bar', 'bar']);
  this.executeCharTest('∤', ['does-not-divide', 'does-not-divide', 'does-not-divide']);
  this.executeCharTest('∥', ['parallel-to', 'parallel-to', 'parallel-to']);
  this.executeCharTest('∦', ['not-parallel-to', 'not-parallel-to', 'not-parallel-to']);
  this.executeCharTest('∧', ['logical-and', 'logical-and', 'logical-and']);
  this.executeCharTest('∨', ['logical-or', 'logical-or', 'logical-or']);
  this.executeCharTest('∩', ['intersection', 'intersection', 'intersection']);
  this.executeCharTest('∪', ['union', 'union', 'union']);
  this.executeCharTest('∫', ['integral', 'integral', 'integral']);
  this.executeCharTest('∬', ['double-integral', 'double-integral', 'double-integral']);
  this.executeCharTest('∭', ['triple-integral', 'triple-integral', 'triple-integral']);
  this.executeCharTest('∮', ['contour-integral', 'contour-integral', 'contour-integral']);
  this.executeCharTest('∯', ['surface-integral', 'surface-integral', 'surface-integral']);
  this.executeCharTest('∰', ['volume-integral', 'volume-integral', 'volume-integral']);
  this.executeCharTest('∱', ['clockwise-integral', 'clockwise-integral', 'clockwise-integral']);
  this.executeCharTest('∲', ['clockwise-contour-integral', 'clockwise-contour-integral', 'clockwise-contour-integral']);
  this.executeCharTest('∳', ['anticlockwise-contour-integral', 'anticlockwise-contour-integral', 'anticlockwise-contour-integral']);
  this.executeCharTest('∴', ['therefore', 'therefore', 'therefore']);
  this.executeCharTest('∵', ['because', 'because', 'because']);
  this.executeCharTest('∶', ['ratio', 'ratio', 'ratio']);
  this.executeCharTest('∷', ['proportion', 'proportion', 'proportion']);
  this.executeCharTest('∸', ['dot-minus', 'dot-minus', 'dot-minus']);
  this.executeCharTest('∹', ['excess', 'excess', 'excess']);
  this.executeCharTest('∺', ['geometric-proportion', 'geometric-proportion', 'geometric-proportion']);
  this.executeCharTest('∻', ['homothetic', 'homothetic', 'homothetic']);
  this.executeCharTest('∼', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('∽', ['reversed-tilde', 'reversed-tilde', 'reversed-tilde']);
  this.executeCharTest('∾', ['inverted-lazy-s', 'inverted-lazy-s', 'inverted-lazy-s']);
  this.executeCharTest('∿', ['sine-wave', 'sine-wave', 'sine-wave']);
  this.executeCharTest('≀', ['wreath-product', 'wreath-product', 'wreath-product']);
  this.executeCharTest('≁', ['not-tilde', 'not-tilde', 'not-tilde']);
  this.executeCharTest('≂', ['minus-tilde', 'minus-tilde', 'minus-tilde']);
  this.executeCharTest('≃', ['asymptotically-equals', 'asymptotically-equals', 'asymptotically-equals']);
  this.executeCharTest('≄', ['not-asymptotically-equals', 'not-asymptotically-equals', 'not-asymptotically-equals']);
  this.executeCharTest('≅', ['approximately-equals', 'approximately-equals', 'approximately-equals']);
  this.executeCharTest('≆', ['approximately-but-not-actually-equals', 'approximately-but-not-actually-equals', 'approximately-but-not-actually-equals']);
  this.executeCharTest('≇', ['neither-approximately-nor-actually-equals', 'neither-approximately-nor-actually-equals', 'neither-approximately-nor-actually-equals']);
  this.executeCharTest('≈', ['almost-equals', 'almost-equals', 'almost-equals']);
  this.executeCharTest('≉', ['not-almost-equals', 'not-almost-equals', 'not-almost-equals']);
  this.executeCharTest('≊', ['almost-equal-or-equal-to', 'almost-equal-or-equal-to', 'almost-equal-or-equal-to']);
  this.executeCharTest('≋', ['triple-tilde', 'triple-tilde', 'triple-tilde']);
  this.executeCharTest('≌', ['all-equals', 'all-equals', 'all-equals']);
  this.executeCharTest('≍', ['equivalent-to', 'equivalent-to', 'equivalent-to']);
  this.executeCharTest('≎', ['geometrically-equivalent-to', 'geometrically-equivalent-to', 'geometrically-equivalent-to']);
  this.executeCharTest('≏', ['difference-between', 'difference-between', 'difference-between']);
  this.executeCharTest('≐', ['approaches-the-limit', 'approaches-the-limit', 'approaches-the-limit']);
  this.executeCharTest('≑', ['geometrically-equals', 'geometrically-equals', 'geometrically-equals']);
  this.executeCharTest('≒', ['approximately-equals-or-the-image-of', 'approximately-equals-or-the-image-of', 'approximately-equals-or-the-image-of']);
  this.executeCharTest('≓', ['image-of-or-approximately-equals', 'image-of-or-approximately-equals', 'image-of-or-approximately-equals']);
  this.executeCharTest('≔', ['colon-equal', 'colon-equal', 'colon-equal']);
  this.executeCharTest('≕', ['equal-colon', 'equal-colon', 'equal-colon']);
  this.executeCharTest('≖', ['ring-in-equals', 'ring-in-equals', 'ring-in-equals']);
  this.executeCharTest('≗', ['ring-equals', 'ring-equals', 'ring-equals']);
  this.executeCharTest('≘', ['corresponds-to', 'corresponds-to', 'corresponds-to']);
  this.executeCharTest('≙', ['estimates', 'estimates', 'estimates']);
  this.executeCharTest('≚', ['equiangular-to', 'equiangular-to', 'equiangular-to']);
  this.executeCharTest('≛', ['star-equals', 'star-equals', 'star-equals']);
  this.executeCharTest('≜', ['delta-equals', 'delta-equals', 'delta-equals']);
  this.executeCharTest('≝', ['equals-by-definition', 'equals-by-definition', 'equals-by-definition']);
  this.executeCharTest('≞', ['measured-by', 'measured-by', 'measured-by']);
  this.executeCharTest('≟', ['questioned-equals', 'questioned-equals', 'questioned-equals']);
  this.executeCharTest('≠', ['not-equals', 'not-equals', 'not-equals']);
  this.executeCharTest('≡', ['identical-to', 'identical-to', 'identical-to']);
  this.executeCharTest('≢', ['not-identical-to', 'not-identical-to', 'not-identical-to']);
  this.executeCharTest('≣', ['strictly-equivalent-to', 'strictly-equivalent-to', 'strictly-equivalent-to']);
  this.executeCharTest('≤', ['less-than-or-equal-to', 'less-than-or-equal-to', 'less-than-or-equal-to']);
  this.executeCharTest('≥', ['greater-than-or-equal-to', 'greater-than-or-equal-to', 'greater-than-or-equal-to']);
  this.executeCharTest('≦', ['less-than-over-equals', 'less-than-over-equals', 'less-than-over-equals']);
  this.executeCharTest('≧', ['greater-than-over-equals', 'greater-than-over-equals', 'greater-than-over-equals']);
  this.executeCharTest('≨', ['less-than-but-not-equals', 'less-than-but-not-equals', 'less-than-but-not-equals']);
  this.executeCharTest('≩', ['greater-than-but-not-equals', 'greater-than-but-not-equals', 'greater-than-but-not-equals']);
  this.executeCharTest('≪', ['much-less-than', 'much-less-than', 'much-less-than']);
  this.executeCharTest('≫', ['much-greater-than', 'much-greater-than', 'much-greater-than']);
  this.executeCharTest('≬', ['between', 'between', 'between']);
  this.executeCharTest('≭', ['not-equivalent-to', 'not-equivalent-to', 'not-equivalent-to']);
  this.executeCharTest('≮', ['not-less-than', 'not-less-than', 'not-less-than']);
  this.executeCharTest('≯', ['not-greater-than', 'not-greater-than', 'not-greater-than']);
  this.executeCharTest('≰', ['neither-less-than-nor-equal-to', 'neither-less-than-nor-equal-to', 'neither-less-than-nor-equal-to']);
  this.executeCharTest('≱', ['neither-greater-than-nor-equal-to', 'neither-greater-than-nor-equal-to', 'neither-greater-than-nor-equal-to']);
  this.executeCharTest('≲', ['less-than-or-equivalent-to', 'less-than-or-equivalent-to', 'less-than-or-equivalent-to']);
  this.executeCharTest('≳', ['greater-than-or-equivalent-to', 'greater-than-or-equivalent-to', 'greater-than-or-equivalent-to']);
  this.executeCharTest('≴', ['neither-less-than-nor-equivalent-to', 'neither-less-than-nor-equivalent-to', 'neither-less-than-nor-equivalent-to']);
  this.executeCharTest('≵', ['neither-greater-than-nor-equivalent-to', 'neither-greater-than-nor-equivalent-to', 'neither-greater-than-nor-equivalent-to']);
  this.executeCharTest('≶', ['less-than-or-greater-than', 'less-than-or-greater-than', 'less-than-or-greater-than']);
  this.executeCharTest('≷', ['greater-than-or-less-than', 'greater-than-or-less-than', 'greater-than-or-less-than']);
  this.executeCharTest('≸', ['neither-less-than-nor-greater-than', 'neither-less-than-nor-greater-than', 'neither-less-than-nor-greater-than']);
  this.executeCharTest('≹', ['neither-greater-than-nor-less-than', 'neither-greater-than-nor-less-than', 'neither-greater-than-nor-less-than']);
  this.executeCharTest('≺', ['precedes', 'precedes', 'precedes']);
  this.executeCharTest('≻', ['succeeds', 'succeeds', 'succeeds']);
  this.executeCharTest('≼', ['precedes-or-equal-to', 'precedes-or-equal-to', 'precedes-or-equal-to']);
  this.executeCharTest('≽', ['succeeds-or-equal-to', 'succeeds-or-equal-to', 'succeeds-or-equal-to']);
  this.executeCharTest('≾', ['precedes-or-equivalent-to', 'precedes-or-equivalent-to', 'precedes-or-equivalent-to']);
  this.executeCharTest('≿', ['succeeds-or-equivalent-to', 'succeeds-or-equivalent-to', 'succeeds-or-equivalent-to']);
  this.executeCharTest('⊀', ['does-not-precede', 'does-not-precede', 'does-not-precede']);
  this.executeCharTest('⊁', ['does-not-succeed', 'does-not-succeed', 'does-not-succeed']);
  this.executeCharTest('⊂', ['subset-of', 'subset-of', 'subset-of']);
  this.executeCharTest('⊃', ['superset-of', 'superset-of', 'superset-of']);
  this.executeCharTest('⊄', ['not-a-subset-of', 'not-a-subset-of', 'not-a-subset-of']);
  this.executeCharTest('⊅', ['not-a-superset-of', 'not-a-superset-of', 'not-a-superset-of']);
  this.executeCharTest('⊆', ['subset-of-or-equal-to', 'subset-of-or-equal-to', 'subset-of-or-equal-to']);
  this.executeCharTest('⊇', ['superset-of-or-equal-to', 'superset-of-or-equal-to', 'superset-of-or-equal-to']);
  this.executeCharTest('⊈', ['neither-a-subset-of-nor-equal-to', 'neither-a-subset-of-nor-equal-to', 'neither-a-subset-of-nor-equal-to']);
  this.executeCharTest('⊉', ['neither-a-superset-of-nor-equal-to', 'neither-a-superset-of-nor-equal-to', 'neither-a-superset-of-nor-equal-to']);
  this.executeCharTest('⊊', ['subset-of-or-not-equals', 'subset-of-or-not-equals', 'subset-of-or-not-equals']);
  this.executeCharTest('⊋', ['superset-of-or-not-equals', 'superset-of-or-not-equals', 'superset-of-or-not-equals']);
  this.executeCharTest('⊌', ['multiset', 'multiset', 'multiset']);
  this.executeCharTest('⊍', ['multiset-multiplication', 'multiset-multiplication', 'multiset-multiplication']);
  this.executeCharTest('⊎', ['multiset-union', 'multiset-union', 'multiset-union']);
  this.executeCharTest('⊏', ['square-image-of', 'square-image-of', 'square-image-of']);
  this.executeCharTest('⊐', ['square-original-of', 'square-original-of', 'square-original-of']);
  this.executeCharTest('⊑', ['square-image-of-or-equal-to', 'square-image-of-or-equal-to', 'square-image-of-or-equal-to']);
  this.executeCharTest('⊒', ['square-original-of-or-equal-to', 'square-original-of-or-equal-to', 'square-original-of-or-equal-to']);
  this.executeCharTest('⊓', ['square-cap', 'square-cap', 'square-cap']);
  this.executeCharTest('⊔', ['square-cup', 'square-cup', 'square-cup']);
  this.executeCharTest('⊕', ['circled-plus', 'circled-plus', 'circled-plus']);
  this.executeCharTest('⊖', ['circled-minus', 'circled-minus', 'circled-minus']);
  this.executeCharTest('⊗', ['circled-times', 'circled-times', 'circled-times']);
  this.executeCharTest('⊘', ['circled-division-slash', 'circled-division-slash', 'circled-division-slash']);
  this.executeCharTest('⊙', ['circled-dot', 'circled-dot', 'circled-dot']);
  this.executeCharTest('⊚', ['circled-ring', 'circled-ring', 'circled-ring']);
  this.executeCharTest('⊛', ['circled-asterisk', 'circled-asterisk', 'circled-asterisk']);
  this.executeCharTest('⊜', ['circled-equals', 'circled-equals', 'circled-equals']);
  this.executeCharTest('⊝', ['circled-dash', 'circled-dash', 'circled-dash']);
  this.executeCharTest('⊞', ['squared-plus', 'squared-plus', 'squared-plus']);
  this.executeCharTest('⊟', ['squared-minus', 'squared-minus', 'squared-minus']);
  this.executeCharTest('⊠', ['squared-times', 'squared-times', 'squared-times']);
  this.executeCharTest('⊡', ['squared-dot', 'squared-dot', 'squared-dot']);
  this.executeCharTest('⊢', ['right-tack', 'right-tack', 'right-tack']);
  this.executeCharTest('⊣', ['left-tack', 'left-tack', 'left-tack']);
  this.executeCharTest('⊤', ['down-tack', 'down-tack', 'down-tack']);
  this.executeCharTest('⊥', ['up-tack', 'up-tack', 'up-tack']);
  this.executeCharTest('⊦', ['assertion', 'assertion', 'assertion']);
  this.executeCharTest('⊧', ['models', 'models', 'models']);
  this.executeCharTest('⊨', ['true', 'true', 'true']);
  this.executeCharTest('⊩', ['forces', 'forces', 'forces']);
  this.executeCharTest('⊪', ['triple-vertical-bar-right-turnstile', 'triple-vertical-bar-right-turnstile', 'triple-vertical-bar-right-turnstile']);
  this.executeCharTest('⊫', ['double-vertical-bar-double-right-turnstile', 'double-vertical-bar-double-right-turnstile', 'double-vertical-bar-double-right-turnstile']);
  this.executeCharTest('⊬', ['does-not-prove', 'does-not-prove', 'does-not-prove']);
  this.executeCharTest('⊭', ['not-true', 'not-true', 'not-true']);
  this.executeCharTest('⊮', ['does-not-force', 'does-not-force', 'does-not-force']);
  this.executeCharTest('⊯', ['negated-double-vertical-bar-double-right-turnstile', 'negated-double-vertical-bar-double-right-turnstile', 'negated-double-vertical-bar-double-right-turnstile']);
  this.executeCharTest('⊰', ['precedes-under-relation', 'precedes-under-relation', 'precedes-under-relation']);
  this.executeCharTest('⊱', ['succeeds-under-relation', 'succeeds-under-relation', 'succeeds-under-relation']);
  this.executeCharTest('⊲', ['normal-subgroup-of', 'normal-subgroup-of', 'normal-subgroup-of']);
  this.executeCharTest('⊳', ['contains-as-normal-subgroup', 'contains-as-normal-subgroup', 'contains-as-normal-subgroup']);
  this.executeCharTest('⊴', ['normal-subgroup-of-or-equal-to', 'normal-subgroup-of-or-equal-to', 'normal-subgroup-of-or-equal-to']);
  this.executeCharTest('⊵', ['contains-as-normal-subgroup-or-equal-to', 'contains-as-normal-subgroup-or-equal-to', 'contains-as-normal-subgroup-or-equal-to']);
  this.executeCharTest('⊶', ['original-of', 'original-of', 'original-of']);
  this.executeCharTest('⊷', ['image-of', 'image-of', 'image-of']);
  this.executeCharTest('⊸', ['multimap', 'multimap', 'multimap']);
  this.executeCharTest('⊹', ['hermitian-conjugate-matrix', 'hermitian-conjugate-matrix', 'hermitian-conjugate-matrix']);
  this.executeCharTest('⊺', ['intercalate', 'intercalate', 'intercalate']);
  this.executeCharTest('⊻', ['xor', 'xor', 'xor']);
  this.executeCharTest('⊼', ['nand', 'nand', 'nand']);
  this.executeCharTest('⊽', ['nor', 'nor', 'nor']);
  this.executeCharTest('⊿', ['right-triangle', 'right-triangle', 'right-triangle']);
  this.executeCharTest('⋀', ['logical-and', 'logical-and', 'logical-and']);
  this.executeCharTest('⋁', ['logical-or', 'logical-or', 'logical-or']);
  this.executeCharTest('⋂', ['intersection', 'intersection', 'intersection']);
  this.executeCharTest('⋃', ['union', 'union', 'union']);
  this.executeCharTest('⋄', ['diamond', 'diamond', 'diamond']);
  this.executeCharTest('⋅', ['dot', 'dot', 'dot']);
  this.executeCharTest('⋆', ['star', 'star', 'star']);
  this.executeCharTest('⋇', ['division-times', 'division-times', 'division-times']);
  this.executeCharTest('⋈', ['bowtie', 'bowtie', 'bowtie']);
  this.executeCharTest('⋉', ['left-normal-factor-semidirect-product', 'left-normal-factor-semidirect-product', 'left-normal-factor-semidirect-product']);
  this.executeCharTest('⋊', ['right-normal-factor-semidirect-product', 'right-normal-factor-semidirect-product', 'right-normal-factor-semidirect-product']);
  this.executeCharTest('⋋', ['left-semidirect-product', 'left-semidirect-product', 'left-semidirect-product']);
  this.executeCharTest('⋌', ['right-semidirect-product', 'right-semidirect-product', 'right-semidirect-product']);
  this.executeCharTest('⋍', ['reversed-tilde-equals', 'reversed-tilde-equals', 'reversed-tilde-equals']);
  this.executeCharTest('⋎', ['curly-logical-or', 'curly-logical-or', 'curly-logical-or']);
  this.executeCharTest('⋏', ['curly-logical-and', 'curly-logical-and', 'curly-logical-and']);
  this.executeCharTest('⋐', ['double-subset', 'double-subset', 'double-subset']);
  this.executeCharTest('⋑', ['double-superset', 'double-superset', 'double-superset']);
  this.executeCharTest('⋒', ['double-intersection', 'double-intersection', 'double-intersection']);
  this.executeCharTest('⋓', ['double-union', 'double-union', 'double-union']);
  this.executeCharTest('⋔', ['pitchfork', 'pitchfork', 'pitchfork']);
  this.executeCharTest('⋕', ['equal-and-parallel-to', 'equal-and-parallel-to', 'equal-and-parallel-to']);
  this.executeCharTest('⋖', ['less-than-dot', 'less-than-dot', 'less-than-dot']);
  this.executeCharTest('⋗', ['greater-than-dot', 'greater-than-dot', 'greater-than-dot']);
  this.executeCharTest('⋘', ['very-much-less-than', 'very-much-less-than', 'very-much-less-than']);
  this.executeCharTest('⋙', ['very-much-greater-than', 'very-much-greater-than', 'very-much-greater-than']);
  this.executeCharTest('⋚', ['less-than-equals-or-greater-than', 'less-than-equals-or-greater-than', 'less-than-equals-or-greater-than']);
  this.executeCharTest('⋛', ['greater-than-equals-or-less-than', 'greater-than-equals-or-less-than', 'greater-than-equals-or-less-than']);
  this.executeCharTest('⋜', ['equals-or-less-than', 'equals-or-less-than', 'equals-or-less-than']);
  this.executeCharTest('⋝', ['equals-or-greater-than', 'equals-or-greater-than', 'equals-or-greater-than']);
  this.executeCharTest('⋞', ['equals-or-precedes', 'equals-or-precedes', 'equals-or-precedes']);
  this.executeCharTest('⋟', ['equals-or-succeeds', 'equals-or-succeeds', 'equals-or-succeeds']);
  this.executeCharTest('⋠', ['does-not-precede-or-equal', 'does-not-precede-or-equal', 'does-not-precede-or-equal']);
  this.executeCharTest('⋡', ['does-not-succeed-or-equal', 'does-not-succeed-or-equal', 'does-not-succeed-or-equal']);
  this.executeCharTest('⋢', ['not-square-image-of-or-equal-to', 'not-square-image-of-or-equal-to', 'not-square-image-of-or-equal-to']);
  this.executeCharTest('⋣', ['not-square-original-of-or-equal-to', 'not-square-original-of-or-equal-to', 'not-square-original-of-or-equal-to']);
  this.executeCharTest('⋤', ['square-image-of-or-not-equals', 'square-image-of-or-not-equals', 'square-image-of-or-not-equals']);
  this.executeCharTest('⋥', ['square-original-of-or-not-equals', 'square-original-of-or-not-equals', 'square-original-of-or-not-equals']);
  this.executeCharTest('⋦', ['less-than-but-not-equivalent-to', 'less-than-but-not-equivalent-to', 'less-than-but-not-equivalent-to']);
  this.executeCharTest('⋧', ['greater-than-but-not-equivalent-to', 'greater-than-but-not-equivalent-to', 'greater-than-but-not-equivalent-to']);
  this.executeCharTest('⋨', ['precedes-but-not-equivalent-to', 'precedes-but-not-equivalent-to', 'precedes-but-not-equivalent-to']);
  this.executeCharTest('⋩', ['succeeds-but-not-equivalent-to', 'succeeds-but-not-equivalent-to', 'succeeds-but-not-equivalent-to']);
  this.executeCharTest('⋪', ['not-normal-subgroup-of', 'not-normal-subgroup-of', 'not-normal-subgroup-of']);
  this.executeCharTest('⋫', ['does-not-contain-as-normal-subgroup', 'does-not-contain-as-normal-subgroup', 'does-not-contain-as-normal-subgroup']);
  this.executeCharTest('⋬', ['not-normal-subgroup-of-or-equal-to', 'not-normal-subgroup-of-or-equal-to', 'not-normal-subgroup-of-or-equal-to']);
  this.executeCharTest('⋭', ['does-not-contain-as-normal-subgroup-or-equal', 'does-not-contain-as-normal-subgroup-or-equal', 'does-not-contain-as-normal-subgroup-or-equal']);
  this.executeCharTest('⋮', ['vertical-ellipsis', 'vertical-ellipsis', 'vertical-ellipsis']);
  this.executeCharTest('⋯', ['midline-horizontal-ellipsis', 'midline-horizontal-ellipsis', 'midline-horizontal-ellipsis']);
  this.executeCharTest('⋰', ['up-right-diagonal-ellipsis', 'up-right-diagonal-ellipsis', 'up-right-diagonal-ellipsis']);
  this.executeCharTest('⋱', ['down-right-diagonal-ellipsis', 'down-right-diagonal-ellipsis', 'down-right-diagonal-ellipsis']);
  this.executeCharTest('⋲', ['element-of-with-long-horizontal-stroke', 'element-of-with-long-horizontal-stroke', 'element-of-with-long-horizontal-stroke']);
  this.executeCharTest('⋳', ['element-of-with-vertical-bar-at-end-of-horizontal-stroke', 'element-of-with-vertical-bar-at-end-of-horizontal-stroke', 'element-of-with-vertical-bar-at-end-of-horizontal-stroke']);
  this.executeCharTest('⋴', ['small-element-of-with-vertical-bar-at-end-of-horizontal-stroke', 'small-element-of-with-vertical-bar-at-end-of-horizontal-stroke', 'small-element-of-with-vertical-bar-at-end-of-horizontal-stroke']);
  this.executeCharTest('⋵', ['element-of-with-dot-above', 'element-of-with-dot-above', 'element-of-with-dot-above']);
  this.executeCharTest('⋶', ['element-of-with-overbar', 'element-of-with-overbar', 'element-of-with-overbar']);
  this.executeCharTest('⋷', ['small-element-of-with-overbar', 'small-element-of-with-overbar', 'small-element-of-with-overbar']);
  this.executeCharTest('⋸', ['element-of-with-underbar', 'element-of-with-underbar', 'element-of-with-underbar']);
  this.executeCharTest('⋹', ['element-of-with-two-horizontal-strokes', 'element-of-with-two-horizontal-strokes', 'element-of-with-two-horizontal-strokes']);
  this.executeCharTest('⋺', ['contains-with-long-horizontal-stroke', 'contains-with-long-horizontal-stroke', 'contains-with-long-horizontal-stroke']);
  this.executeCharTest('⋻', ['contains-with-vertical-bar-at-end-of-horizontal-stroke', 'contains-with-vertical-bar-at-end-of-horizontal-stroke', 'contains-with-vertical-bar-at-end-of-horizontal-stroke']);
  this.executeCharTest('⋼', ['small-contains-with-vertical-bar-at-end-of-horizontal-stroke', 'small-contains-with-vertical-bar-at-end-of-horizontal-stroke', 'small-contains-with-vertical-bar-at-end-of-horizontal-stroke']);
  this.executeCharTest('⋽', ['contains-with-overbar', 'contains-with-overbar', 'contains-with-overbar']);
  this.executeCharTest('⋾', ['small-contains-with-overbar', 'small-contains-with-overbar', 'small-contains-with-overbar']);
  this.executeCharTest('⋿', ['z-notation-bag-membership', 'z-notation-bag-membership', 'z-notation-bag-membership']);
  this.executeCharTest('⌀', ['diameter-sign', 'diameter-sign', 'diameter-sign']);
  this.executeCharTest('⌂', ['house', 'house', 'house']);
  this.executeCharTest('⌅', ['projective', 'projective', 'projective']);
  this.executeCharTest('⌆', ['perspective', 'perspective', 'perspective']);
  this.executeCharTest('⌇', ['wavy-line', 'wavy-line', 'wavy-line']);
  this.executeCharTest('⌐', ['reversed-not', 'reversed-not', 'reversed-not']);
  this.executeCharTest('⌑', ['square-lozenge', 'square-lozenge', 'square-lozenge']);
  this.executeCharTest('⌒', ['arc', 'arc', 'arc']);
  this.executeCharTest('⌓', ['segment', 'segment', 'segment']);
  this.executeCharTest('⌔', ['sector', 'sector', 'sector']);
  this.executeCharTest('➕', ['bold-plus', 'bold-plus', 'bold-plus']);
  this.executeCharTest('➖', ['bold-minus', 'bold-minus', 'bold-minus']);
  this.executeCharTest('➗', ['bold-division', 'bold-division', 'bold-division']);
  this.executeCharTest('➰', ['curly-loop', 'curly-loop', 'curly-loop']);
  this.executeCharTest('➿', ['double-curly-loop', 'double-curly-loop', 'double-curly-loop']);
  this.executeCharTest('⟁', ['white-triangle-containing-small-white-triangle', 'white-triangle-containing-small-white-triangle', 'white-triangle-containing-small-white-triangle']);
  this.executeCharTest('⟂', ['perpendicular', 'perpendicular', 'perpendicular']);
  this.executeCharTest('⟃', ['open-subset', 'open-subset', 'open-subset']);
  this.executeCharTest('⟄', ['open-superset', 'open-superset', 'open-superset']);
  this.executeCharTest('⟇', ['or-with-dot-inside', 'or-with-dot-inside', 'or-with-dot-inside']);
  this.executeCharTest('⟈', ['reverse-solidus-preceding-subset', 'reverse-solidus-preceding-subset', 'reverse-solidus-preceding-subset']);
  this.executeCharTest('⟉', ['superset-preceding-solidus', 'superset-preceding-solidus', 'superset-preceding-solidus']);
  this.executeCharTest('⟊', ['vertical-bar-with-horizontal-stroke', 'vertical-bar-with-horizontal-stroke', 'vertical-bar-with-horizontal-stroke']);
  this.executeCharTest('⟋', ['mathematical-rising-diagonal', 'mathematical-rising-diagonal', 'mathematical-rising-diagonal']);
  this.executeCharTest('⟌', ['long-division', 'long-division', 'long-division']);
  this.executeCharTest('⟍', ['mathematical-falling-diagonal', 'mathematical-falling-diagonal', 'mathematical-falling-diagonal']);
  this.executeCharTest('⟎', ['squared-logical-and', 'squared-logical-and', 'squared-logical-and']);
  this.executeCharTest('⟏', ['squared-logical-or', 'squared-logical-or', 'squared-logical-or']);
  this.executeCharTest('⟐', ['white-diamond-with-centered-dot', 'white-diamond-with-centered-dot', 'white-diamond-with-centered-dot']);
  this.executeCharTest('⟑', ['and-with-dot', 'and-with-dot', 'and-with-dot']);
  this.executeCharTest('⟒', ['element-of-opening-upwards', 'element-of-opening-upwards', 'element-of-opening-upwards']);
  this.executeCharTest('⟓', ['lower-right-corner-with-dot', 'lower-right-corner-with-dot', 'lower-right-corner-with-dot']);
  this.executeCharTest('⟔', ['upper-left-corner-with-dot', 'upper-left-corner-with-dot', 'upper-left-corner-with-dot']);
  this.executeCharTest('⟕', ['left-outer-join', 'left-outer-join', 'left-outer-join']);
  this.executeCharTest('⟖', ['right-outer-join', 'right-outer-join', 'right-outer-join']);
  this.executeCharTest('⟗', ['full-outer-join', 'full-outer-join', 'full-outer-join']);
  this.executeCharTest('⟘', ['large-up-tack', 'large-up-tack', 'large-up-tack']);
  this.executeCharTest('⟙', ['large-down-tack', 'large-down-tack', 'large-down-tack']);
  this.executeCharTest('⟚', ['left-and-right-double-turnstile', 'left-and-right-double-turnstile', 'left-and-right-double-turnstile']);
  this.executeCharTest('⟛', ['left-and-right-tack', 'left-and-right-tack', 'left-and-right-tack']);
  this.executeCharTest('⟜', ['left-multimap', 'left-multimap', 'left-multimap']);
  this.executeCharTest('⟝', ['long-right-tack', 'long-right-tack', 'long-right-tack']);
  this.executeCharTest('⟞', ['long-left-tack', 'long-left-tack', 'long-left-tack']);
  this.executeCharTest('⟟', ['up-tack-with-circle-above', 'up-tack-with-circle-above', 'up-tack-with-circle-above']);
  this.executeCharTest('⟠', ['lozenge-divided-by-horizontal-rule', 'lozenge-divided-by-horizontal-rule', 'lozenge-divided-by-horizontal-rule']);
  this.executeCharTest('⟡', ['white-concave-sided-diamond', 'white-concave-sided-diamond', 'white-concave-sided-diamond']);
  this.executeCharTest('⟢', ['white-concave-sided-diamond-with-leftwards-tick', 'white-concave-sided-diamond-with-leftwards-tick', 'white-concave-sided-diamond-with-leftwards-tick']);
  this.executeCharTest('⟣', ['white-concave-sided-diamond-with-rightwards-tick', 'white-concave-sided-diamond-with-rightwards-tick', 'white-concave-sided-diamond-with-rightwards-tick']);
  this.executeCharTest('⟤', ['white-square-with-leftwards-tick', 'white-square-with-leftwards-tick', 'white-square-with-leftwards-tick']);
  this.executeCharTest('⟥', ['white-square-with-rightwards-tick', 'white-square-with-rightwards-tick', 'white-square-with-rightwards-tick']);
  this.executeCharTest('⤫', ['rising-diagonal-crossing-falling-diagonal', 'rising-diagonal-crossing-falling-diagonal', 'rising-diagonal-crossing-falling-diagonal']);
  this.executeCharTest('⤬', ['falling-diagonal-crossing-rising-diagonal', 'falling-diagonal-crossing-rising-diagonal', 'falling-diagonal-crossing-rising-diagonal']);
  this.executeCharTest('⦀', ['triple-vertical-bar-delimiter', 'triple-vertical-bar-delimiter', 'triple-vertical-bar-delimiter']);
  this.executeCharTest('⦁', ['z-notation-spot', 'z-notation-spot', 'z-notation-spot']);
  this.executeCharTest('⦂', ['z-notation-type-colon', 'z-notation-type-colon', 'z-notation-type-colon']);
  this.executeCharTest('⦙', ['dotted-fence', 'dotted-fence', 'dotted-fence']);
  this.executeCharTest('⦚', ['vertical-zigzag-line', 'vertical-zigzag-line', 'vertical-zigzag-line']);
  this.executeCharTest('⦰', ['reversed-empty-set', 'reversed-empty-set', 'reversed-empty-set']);
  this.executeCharTest('⦱', ['empty-set-with-overbar', 'empty-set-with-overbar', 'empty-set-with-overbar']);
  this.executeCharTest('⦲', ['empty-set-with-small-circle-above', 'empty-set-with-small-circle-above', 'empty-set-with-small-circle-above']);
  this.executeCharTest('⦵', ['circle-with-horizontal-bar', 'circle-with-horizontal-bar', 'circle-with-horizontal-bar']);
  this.executeCharTest('⦶', ['circled-vertical-bar', 'circled-vertical-bar', 'circled-vertical-bar']);
  this.executeCharTest('⦷', ['circled-parallel', 'circled-parallel', 'circled-parallel']);
  this.executeCharTest('⦸', ['circled-reverse-solidus', 'circled-reverse-solidus', 'circled-reverse-solidus']);
  this.executeCharTest('⦹', ['circled-perpendicular', 'circled-perpendicular', 'circled-perpendicular']);
  this.executeCharTest('⦺', ['circle-divided-by-horizontal-bar-and-top-half-divided-by-vertical-bar', 'circle-divided-by-horizontal-bar-and-top-half-divided-by-vertical-bar', 'circle-divided-by-horizontal-bar-and-top-half-divided-by-vertical-bar']);
  this.executeCharTest('⦻', ['circle-with-superimposed-x', 'circle-with-superimposed-x', 'circle-with-superimposed-x']);
  this.executeCharTest('⦼', ['circled-anticlockwise-rotated-division', 'circled-anticlockwise-rotated-division', 'circled-anticlockwise-rotated-division']);
  this.executeCharTest('⦾', ['circled-white-bullet', 'circled-white-bullet', 'circled-white-bullet']);
  this.executeCharTest('⦿', ['circled-bullet', 'circled-bullet', 'circled-bullet']);
  this.executeCharTest('⧀', ['circled-less-than', 'circled-less-than', 'circled-less-than']);
  this.executeCharTest('⧁', ['circled-greater-than', 'circled-greater-than', 'circled-greater-than']);
  this.executeCharTest('⧂', ['circle-with-small-circle-to-the-right', 'circle-with-small-circle-to-the-right', 'circle-with-small-circle-to-the-right']);
  this.executeCharTest('⧃', ['circle-with-two-horizontal-strokes-to-the-right', 'circle-with-two-horizontal-strokes-to-the-right', 'circle-with-two-horizontal-strokes-to-the-right']);
  this.executeCharTest('⧄', ['squared-rising-diagonal-slash', 'squared-rising-diagonal-slash', 'squared-rising-diagonal-slash']);
  this.executeCharTest('⧅', ['squared-falling-diagonal-slash', 'squared-falling-diagonal-slash', 'squared-falling-diagonal-slash']);
  this.executeCharTest('⧆', ['squared-asterisk', 'squared-asterisk', 'squared-asterisk']);
  this.executeCharTest('⧇', ['squared-small-circle', 'squared-small-circle', 'squared-small-circle']);
  this.executeCharTest('⧈', ['squared-square', 'squared-square', 'squared-square']);
  this.executeCharTest('⧉', ['two-joined-squares', 'two-joined-squares', 'two-joined-squares']);
  this.executeCharTest('⧊', ['triangle-with-dot-above', 'triangle-with-dot-above', 'triangle-with-dot-above']);
  this.executeCharTest('⧋', ['triangle-with-underbar', 'triangle-with-underbar', 'triangle-with-underbar']);
  this.executeCharTest('⧌', ['s-in-triangle', 's-in-triangle', 's-in-triangle']);
  this.executeCharTest('⧍', ['triangle-with-serifs-at-bottom', 'triangle-with-serifs-at-bottom', 'triangle-with-serifs-at-bottom']);
  this.executeCharTest('⧎', ['right-triangle-above-left-triangle', 'right-triangle-above-left-triangle', 'right-triangle-above-left-triangle']);
  this.executeCharTest('⧏', ['left-triangle-beside-vertical-bar', 'left-triangle-beside-vertical-bar', 'left-triangle-beside-vertical-bar']);
  this.executeCharTest('⧐', ['vertical-bar-beside-right-triangle', 'vertical-bar-beside-right-triangle', 'vertical-bar-beside-right-triangle']);
  this.executeCharTest('⧑', ['bowtie-with-left-half-black', 'bowtie-with-left-half-black', 'bowtie-with-left-half-black']);
  this.executeCharTest('⧒', ['bowtie-with-right-half-black', 'bowtie-with-right-half-black', 'bowtie-with-right-half-black']);
  this.executeCharTest('⧓', ['black-bowtie', 'black-bowtie', 'black-bowtie']);
  this.executeCharTest('⧔', ['times-with-left-half-black', 'times-with-left-half-black', 'times-with-left-half-black']);
  this.executeCharTest('⧕', ['times-with-right-half-black', 'times-with-right-half-black', 'times-with-right-half-black']);
  this.executeCharTest('⧖', ['white-hourglass', 'white-hourglass', 'white-hourglass']);
  this.executeCharTest('⧗', ['black-hourglass', 'black-hourglass', 'black-hourglass']);
  this.executeCharTest('⧜', ['incomplete-infinity', 'incomplete-infinity', 'incomplete-infinity']);
  this.executeCharTest('⧝', ['tie-over-infinity', 'tie-over-infinity', 'tie-over-infinity']);
  this.executeCharTest('⧞', ['infinity-negated-with-vertical-bar', 'infinity-negated-with-vertical-bar', 'infinity-negated-with-vertical-bar']);
  this.executeCharTest('⧟', ['double-ended-multimap', 'double-ended-multimap', 'double-ended-multimap']);
  this.executeCharTest('⧠', ['square-with-contoured-outline', 'square-with-contoured-outline', 'square-with-contoured-outline']);
  this.executeCharTest('⧡', ['increases-as', 'increases-as', 'increases-as']);
  this.executeCharTest('⧢', ['shuffle-product', 'shuffle-product', 'shuffle-product']);
  this.executeCharTest('⧣', ['equals-and-slanted-parallel', 'equals-and-slanted-parallel', 'equals-and-slanted-parallel']);
  this.executeCharTest('⧤', ['equals-and-slanted-parallel-with-tilde-above', 'equals-and-slanted-parallel-with-tilde-above', 'equals-and-slanted-parallel-with-tilde-above']);
  this.executeCharTest('⧥', ['identical-to-and-slanted-parallel', 'identical-to-and-slanted-parallel', 'identical-to-and-slanted-parallel']);
  this.executeCharTest('⧦', ['gleich-stark', 'gleich-stark', 'gleich-stark']);
  this.executeCharTest('⧧', ['thermodynamic', 'thermodynamic', 'thermodynamic']);
  this.executeCharTest('⧨', ['down-pointing-triangle-with-left-half-black', 'down-pointing-triangle-with-left-half-black', 'down-pointing-triangle-with-left-half-black']);
  this.executeCharTest('⧩', ['down-pointing-triangle-with-right-half-black', 'down-pointing-triangle-with-right-half-black', 'down-pointing-triangle-with-right-half-black']);
  this.executeCharTest('⧫', ['black-lozenge', 'black-lozenge', 'black-lozenge']);
  this.executeCharTest('⧮', ['error-barred-white-square', 'error-barred-white-square', 'error-barred-white-square']);
  this.executeCharTest('⧯', ['error-barred-black-square', 'error-barred-black-square', 'error-barred-black-square']);
  this.executeCharTest('⧰', ['error-barred-white-diamond', 'error-barred-white-diamond', 'error-barred-white-diamond']);
  this.executeCharTest('⧱', ['error-barred-black-diamond', 'error-barred-black-diamond', 'error-barred-black-diamond']);
  this.executeCharTest('⧲', ['error-barred-white-circle', 'error-barred-white-circle', 'error-barred-white-circle']);
  this.executeCharTest('⧳', ['error-barred-black-circle', 'error-barred-black-circle', 'error-barred-black-circle']);
  this.executeCharTest('⧴', ['rule-delayed', 'rule-delayed', 'rule-delayed']);
  this.executeCharTest('⧵', ['reverse-solidus', 'reverse-solidus', 'reverse-solidus']);
  this.executeCharTest('⧶', ['solidus-with-overbar', 'solidus-with-overbar', 'solidus-with-overbar']);
  this.executeCharTest('⧷', ['reverse-solidus-with-horizontal-stroke', 'reverse-solidus-with-horizontal-stroke', 'reverse-solidus-with-horizontal-stroke']);
  this.executeCharTest('⧸', ['solidus', 'solidus', 'solidus']);
  this.executeCharTest('⧹', ['reverse-solidus', 'reverse-solidus', 'reverse-solidus']);
  this.executeCharTest('⧺', ['double-plus', 'double-plus', 'double-plus']);
  this.executeCharTest('⧻', ['triple-plus', 'triple-plus', 'triple-plus']);
  this.executeCharTest('⧾', ['tiny', 'tiny', 'tiny']);
  this.executeCharTest('⧿', ['miny', 'miny', 'miny']);
  this.executeCharTest('⨀', ['circled-dot', 'circled-dot', 'circled-dot']);
  this.executeCharTest('⨁', ['circled-plus', 'circled-plus', 'circled-plus']);
  this.executeCharTest('⨂', ['circled-times', 'circled-times', 'circled-times']);
  this.executeCharTest('⨃', ['union-with-dot', 'union-with-dot', 'union-with-dot']);
  this.executeCharTest('⨄', ['union-with-plus', 'union-with-plus', 'union-with-plus']);
  this.executeCharTest('⨅', ['square-intersection', 'square-intersection', 'square-intersection']);
  this.executeCharTest('⨆', ['square-union', 'square-union', 'square-union']);
  this.executeCharTest('⨇', ['two-logical-and', 'two-logical-and', 'two-logical-and']);
  this.executeCharTest('⨈', ['two-logical-or', 'two-logical-or', 'two-logical-or']);
  this.executeCharTest('⨉', ['times', 'times', 'times']);
  this.executeCharTest('⨊', ['modulo-two-sum', 'modulo-two-sum', 'modulo-two-sum']);
  this.executeCharTest('⨋', ['summation-with-integral', 'summation-with-integral', 'summation-with-integral']);
  this.executeCharTest('⨌', ['quadruple-integral', 'quadruple-integral', 'quadruple-integral']);
  this.executeCharTest('⨍', ['finite-part-integral', 'finite-part-integral', 'finite-part-integral']);
  this.executeCharTest('⨎', ['integral-with-double-stroke', 'integral-with-double-stroke', 'integral-with-double-stroke']);
  this.executeCharTest('⨏', ['integral-average-with-slash', 'integral-average-with-slash', 'integral-average-with-slash']);
  this.executeCharTest('⨐', ['circulation-function', 'circulation-function', 'circulation-function']);
  this.executeCharTest('⨑', ['anticlockwise-integration', 'anticlockwise-integration', 'anticlockwise-integration']);
  this.executeCharTest('⨒', ['line-integration-with-rectangular-path-around-pole', 'line-integration-with-rectangular-path-around-pole', 'line-integration-with-rectangular-path-around-pole']);
  this.executeCharTest('⨓', ['line-integration-with-semicircular-path-around-pole', 'line-integration-with-semicircular-path-around-pole', 'line-integration-with-semicircular-path-around-pole']);
  this.executeCharTest('⨔', ['line-integration-not-including-the-pole', 'line-integration-not-including-the-pole', 'line-integration-not-including-the-pole']);
  this.executeCharTest('⨕', ['integral-around-a-point', 'integral-around-a-point', 'integral-around-a-point']);
  this.executeCharTest('⨖', ['quaternion-integral', 'quaternion-integral', 'quaternion-integral']);
  this.executeCharTest('⨘', ['integral-with-times', 'integral-with-times', 'integral-with-times']);
  this.executeCharTest('⨙', ['integral-with-intersection', 'integral-with-intersection', 'integral-with-intersection']);
  this.executeCharTest('⨚', ['integral-with-union', 'integral-with-union', 'integral-with-union']);
  this.executeCharTest('⨛', ['integral-with-overbar', 'integral-with-overbar', 'integral-with-overbar']);
  this.executeCharTest('⨜', ['integral-with-underbar', 'integral-with-underbar', 'integral-with-underbar']);
  this.executeCharTest('⨝', ['join', 'join', 'join']);
  this.executeCharTest('⨞', ['large-left-triangle', 'large-left-triangle', 'large-left-triangle']);
  this.executeCharTest('⨟', ['z-notation-schema-composition', 'z-notation-schema-composition', 'z-notation-schema-composition']);
  this.executeCharTest('⨠', ['z-notation-schema-piping', 'z-notation-schema-piping', 'z-notation-schema-piping']);
  this.executeCharTest('⨡', ['z-notation-schema-projection', 'z-notation-schema-projection', 'z-notation-schema-projection']);
  this.executeCharTest('⨢', ['plus-with-circle-above', 'plus-with-circle-above', 'plus-with-circle-above']);
  this.executeCharTest('⨣', ['plus-hat', 'plus-hat', 'plus-hat']);
  this.executeCharTest('⨤', ['plus-tilde', 'plus-tilde', 'plus-tilde']);
  this.executeCharTest('⨥', ['plus-underdot', 'plus-underdot', 'plus-underdot']);
  this.executeCharTest('⨦', ['plus-sign-with-tilde-below', 'plus-sign-with-tilde-below', 'plus-sign-with-tilde-below']);
  this.executeCharTest('⨧', ['plus-sign-with-subscript-two', 'plus-sign-with-subscript-two', 'plus-sign-with-subscript-two']);
  this.executeCharTest('⨨', ['plus-sign-with-black-triangle', 'plus-sign-with-black-triangle', 'plus-sign-with-black-triangle']);
  this.executeCharTest('⨩', ['minus-sign-with-comma-above', 'minus-sign-with-comma-above', 'minus-sign-with-comma-above']);
  this.executeCharTest('⨪', ['minus-sign-with-dot-below', 'minus-sign-with-dot-below', 'minus-sign-with-dot-below']);
  this.executeCharTest('⨫', ['minus-sign-with-falling-dots', 'minus-sign-with-falling-dots', 'minus-sign-with-falling-dots']);
  this.executeCharTest('⨬', ['minus-sign-with-rising-dots', 'minus-sign-with-rising-dots', 'minus-sign-with-rising-dots']);
  this.executeCharTest('⨭', ['plus-sign-in-left-half-circle', 'plus-sign-in-left-half-circle', 'plus-sign-in-left-half-circle']);
  this.executeCharTest('⨮', ['plus-sign-in-right-half-circle', 'plus-sign-in-right-half-circle', 'plus-sign-in-right-half-circle']);
  this.executeCharTest('⨯', ['vector-or-cross-product', 'vector-or-cross-product', 'vector-or-cross-product']);
  this.executeCharTest('⨰', ['multiplication-sign-with-dot-above', 'multiplication-sign-with-dot-above', 'multiplication-sign-with-dot-above']);
  this.executeCharTest('⨱', ['multiplication-sign-with-underbar', 'multiplication-sign-with-underbar', 'multiplication-sign-with-underbar']);
  this.executeCharTest('⨲', ['semidirect-product-with-bottom-closed', 'semidirect-product-with-bottom-closed', 'semidirect-product-with-bottom-closed']);
  this.executeCharTest('⨳', ['smash-product', 'smash-product', 'smash-product']);
  this.executeCharTest('⨴', ['multiplication-sign-in-left-half-circle', 'multiplication-sign-in-left-half-circle', 'multiplication-sign-in-left-half-circle']);
  this.executeCharTest('⨵', ['multiplication-sign-in-right-half-circle', 'multiplication-sign-in-right-half-circle', 'multiplication-sign-in-right-half-circle']);
  this.executeCharTest('⨶', ['circled-multiplication-sign-with-circumflex-accent', 'circled-multiplication-sign-with-circumflex-accent', 'circled-multiplication-sign-with-circumflex-accent']);
  this.executeCharTest('⨷', ['multiplication-sign-in-double-circle', 'multiplication-sign-in-double-circle', 'multiplication-sign-in-double-circle']);
  this.executeCharTest('⨸', ['circled-division', 'circled-division', 'circled-division']);
  this.executeCharTest('⨹', ['plus-sign-in-triangle', 'plus-sign-in-triangle', 'plus-sign-in-triangle']);
  this.executeCharTest('⨺', ['minus-sign-in-triangle', 'minus-sign-in-triangle', 'minus-sign-in-triangle']);
  this.executeCharTest('⨻', ['multiplication-sign-in-triangle', 'multiplication-sign-in-triangle', 'multiplication-sign-in-triangle']);
  this.executeCharTest('⨼', ['interior-product', 'interior-product', 'interior-product']);
  this.executeCharTest('⨽', ['righthand-interior-product', 'righthand-interior-product', 'righthand-interior-product']);
  this.executeCharTest('⨾', ['z-notation-relational-composition', 'z-notation-relational-composition', 'z-notation-relational-composition']);
  this.executeCharTest('⨿', ['amalgamation-or-coproduct', 'amalgamation-or-coproduct', 'amalgamation-or-coproduct']);
  this.executeCharTest('⩀', ['intersection-with-dot', 'intersection-with-dot', 'intersection-with-dot']);
  this.executeCharTest('⩁', ['union-with-minus', 'union-with-minus', 'union-with-minus']);
  this.executeCharTest('⩂', ['union-with-overbar', 'union-with-overbar', 'union-with-overbar']);
  this.executeCharTest('⩃', ['intersection-with-overbar', 'intersection-with-overbar', 'intersection-with-overbar']);
  this.executeCharTest('⩄', ['intersection-with-logical-and', 'intersection-with-logical-and', 'intersection-with-logical-and']);
  this.executeCharTest('⩅', ['union-with-logical-or', 'union-with-logical-or', 'union-with-logical-or']);
  this.executeCharTest('⩆', ['union-above-intersection', 'union-above-intersection', 'union-above-intersection']);
  this.executeCharTest('⩇', ['intersection-above-union', 'intersection-above-union', 'intersection-above-union']);
  this.executeCharTest('⩈', ['union-above-bar-above-intersection', 'union-above-bar-above-intersection', 'union-above-bar-above-intersection']);
  this.executeCharTest('⩉', ['intersection-above-bar-above-union', 'intersection-above-bar-above-union', 'intersection-above-bar-above-union']);
  this.executeCharTest('⩊', ['union-beside-and-joined-with-union', 'union-beside-and-joined-with-union', 'union-beside-and-joined-with-union']);
  this.executeCharTest('⩋', ['intersection-beside-and-joined-with-intersection', 'intersection-beside-and-joined-with-intersection', 'intersection-beside-and-joined-with-intersection']);
  this.executeCharTest('⩌', ['closed-union-with-serifs', 'closed-union-with-serifs', 'closed-union-with-serifs']);
  this.executeCharTest('⩍', ['closed-intersection-with-serifs', 'closed-intersection-with-serifs', 'closed-intersection-with-serifs']);
  this.executeCharTest('⩎', ['double-square-intersection', 'double-square-intersection', 'double-square-intersection']);
  this.executeCharTest('⩏', ['double-square-union', 'double-square-union', 'double-square-union']);
  this.executeCharTest('⩐', ['closed-union-with-serifs-and-smash-product', 'closed-union-with-serifs-and-smash-product', 'closed-union-with-serifs-and-smash-product']);
  this.executeCharTest('⩑', ['logical-and-with-dot-above', 'logical-and-with-dot-above', 'logical-and-with-dot-above']);
  this.executeCharTest('⩒', ['logical-or-with-dot-above', 'logical-or-with-dot-above', 'logical-or-with-dot-above']);
  this.executeCharTest('⩓', ['double-logical-and', 'double-logical-and', 'double-logical-and']);
  this.executeCharTest('⩔', ['double-logical-or', 'double-logical-or', 'double-logical-or']);
  this.executeCharTest('⩕', ['two-intersecting-logical-and', 'two-intersecting-logical-and', 'two-intersecting-logical-and']);
  this.executeCharTest('⩖', ['two-intersecting-logical-or', 'two-intersecting-logical-or', 'two-intersecting-logical-or']);
  this.executeCharTest('⩗', ['sloping-large-or', 'sloping-large-or', 'sloping-large-or']);
  this.executeCharTest('⩘', ['sloping-large-and', 'sloping-large-and', 'sloping-large-and']);
  this.executeCharTest('⩙', ['logical-or-overlapping-logical-and', 'logical-or-overlapping-logical-and', 'logical-or-overlapping-logical-and']);
  this.executeCharTest('⩚', ['logical-and-with-middle-stem', 'logical-and-with-middle-stem', 'logical-and-with-middle-stem']);
  this.executeCharTest('⩛', ['logical-or-with-middle-stem', 'logical-or-with-middle-stem', 'logical-or-with-middle-stem']);
  this.executeCharTest('⩜', ['logical-and-with-horizontal-dash', 'logical-and-with-horizontal-dash', 'logical-and-with-horizontal-dash']);
  this.executeCharTest('⩝', ['logical-or-with-horizontal-dash', 'logical-or-with-horizontal-dash', 'logical-or-with-horizontal-dash']);
  this.executeCharTest('⩞', ['logical-and-with-double-overbar', 'logical-and-with-double-overbar', 'logical-and-with-double-overbar']);
  this.executeCharTest('⩟', ['logical-and-with-underbar', 'logical-and-with-underbar', 'logical-and-with-underbar']);
  this.executeCharTest('⩠', ['logical-and-with-double-underbar', 'logical-and-with-double-underbar', 'logical-and-with-double-underbar']);
  this.executeCharTest('⩡', ['small-vee-with-underbar', 'small-vee-with-underbar', 'small-vee-with-underbar']);
  this.executeCharTest('⩢', ['logical-or-with-double-overbar', 'logical-or-with-double-overbar', 'logical-or-with-double-overbar']);
  this.executeCharTest('⩣', ['logical-or-with-double-underbar', 'logical-or-with-double-underbar', 'logical-or-with-double-underbar']);
  this.executeCharTest('⩤', ['z-notation-domain-antirestriction', 'z-notation-domain-antirestriction', 'z-notation-domain-antirestriction']);
  this.executeCharTest('⩥', ['z-notation-range-antirestriction', 'z-notation-range-antirestriction', 'z-notation-range-antirestriction']);
  this.executeCharTest('⩦', ['equals-with-dot-below', 'equals-with-dot-below', 'equals-with-dot-below']);
  this.executeCharTest('⩧', ['identical-with-dot-above', 'identical-with-dot-above', 'identical-with-dot-above']);
  this.executeCharTest('⩨', ['triple-horizontal-bar-with-double-vertical-stroke', 'triple-horizontal-bar-with-double-vertical-stroke', 'triple-horizontal-bar-with-double-vertical-stroke']);
  this.executeCharTest('⩩', ['triple-horizontal-bar-with-triple-vertical-stroke', 'triple-horizontal-bar-with-triple-vertical-stroke', 'triple-horizontal-bar-with-triple-vertical-stroke']);
  this.executeCharTest('⩪', ['tilde-with-dot-above', 'tilde-with-dot-above', 'tilde-with-dot-above']);
  this.executeCharTest('⩫', ['tilde-with-rising-dots', 'tilde-with-rising-dots', 'tilde-with-rising-dots']);
  this.executeCharTest('⩬', ['similar-minus-similar', 'similar-minus-similar', 'similar-minus-similar']);
  this.executeCharTest('⩭', ['congruent-with-dot-above', 'congruent-with-dot-above', 'congruent-with-dot-above']);
  this.executeCharTest('⩮', ['equals-with-asterisk', 'equals-with-asterisk', 'equals-with-asterisk']);
  this.executeCharTest('⩯', ['almost-equal-hat', 'almost-equal-hat', 'almost-equal-hat']);
  this.executeCharTest('⩰', ['approximately-equal-or-equal-to', 'approximately-equal-or-equal-to', 'approximately-equal-or-equal-to']);
  this.executeCharTest('⩱', ['equals-above-plus', 'equals-above-plus', 'equals-above-plus']);
  this.executeCharTest('⩲', ['plus-above-equals', 'plus-above-equals', 'plus-above-equals']);
  this.executeCharTest('⩳', ['equals-above-tilde', 'equals-above-tilde', 'equals-above-tilde']);
  this.executeCharTest('⩴', ['double-colon-equal', 'double-colon-equal', 'double-colon-equal']);
  this.executeCharTest('⩵', ['two-consecutive-equals', 'two-consecutive-equals', 'two-consecutive-equals']);
  this.executeCharTest('⩶', ['three-consecutive-equals', 'three-consecutive-equals', 'three-consecutive-equals']);
  this.executeCharTest('⩷', ['equals-with-two-dots-above-and-two-dots-below', 'equals-with-two-dots-above-and-two-dots-below', 'equals-with-two-dots-above-and-two-dots-below']);
  this.executeCharTest('⩸', ['equivalent-with-four-dots-above', 'equivalent-with-four-dots-above', 'equivalent-with-four-dots-above']);
  this.executeCharTest('⩹', ['less-than-with-circle-inside', 'less-than-with-circle-inside', 'less-than-with-circle-inside']);
  this.executeCharTest('⩺', ['greater-than-with-circle-inside', 'greater-than-with-circle-inside', 'greater-than-with-circle-inside']);
  this.executeCharTest('⩻', ['less-than-with-question-mark-above', 'less-than-with-question-mark-above', 'less-than-with-question-mark-above']);
  this.executeCharTest('⩼', ['greater-than-with-question-mark-above', 'greater-than-with-question-mark-above', 'greater-than-with-question-mark-above']);
  this.executeCharTest('⩽', ['less-than-or-slanted-equals', 'less-than-or-slanted-equals', 'less-than-or-slanted-equals']);
  this.executeCharTest('⩾', ['greater-than-or-slanted-equals', 'greater-than-or-slanted-equals', 'greater-than-or-slanted-equals']);
  this.executeCharTest('⩿', ['less-than-or-slanted-equals-with-dot-inside', 'less-than-or-slanted-equals-with-dot-inside', 'less-than-or-slanted-equals-with-dot-inside']);
  this.executeCharTest('⪀', ['greater-than-or-slanted-equals-with-dot-inside', 'greater-than-or-slanted-equals-with-dot-inside', 'greater-than-or-slanted-equals-with-dot-inside']);
  this.executeCharTest('⪁', ['less-than-or-slanted-equals-with-dot-above', 'less-than-or-slanted-equals-with-dot-above', 'less-than-or-slanted-equals-with-dot-above']);
  this.executeCharTest('⪂', ['greater-than-or-slanted-equals-with-dot-above', 'greater-than-or-slanted-equals-with-dot-above', 'greater-than-or-slanted-equals-with-dot-above']);
  this.executeCharTest('⪃', ['less-than-or-slanted-equals-with-dot-above-right', 'less-than-or-slanted-equals-with-dot-above-right', 'less-than-or-slanted-equals-with-dot-above-right']);
  this.executeCharTest('⪄', ['greater-than-or-slanted-equals-with-dot-above-left', 'greater-than-or-slanted-equals-with-dot-above-left', 'greater-than-or-slanted-equals-with-dot-above-left']);
  this.executeCharTest('⪅', ['less-than-or-approximate', 'less-than-or-approximate', 'less-than-or-approximate']);
  this.executeCharTest('⪆', ['greater-than-or-approximate', 'greater-than-or-approximate', 'greater-than-or-approximate']);
  this.executeCharTest('⪇', ['less-than-and-single-line-not-equals', 'less-than-and-single-line-not-equals', 'less-than-and-single-line-not-equals']);
  this.executeCharTest('⪈', ['greater-than-and-single-line-not-equals', 'greater-than-and-single-line-not-equals', 'greater-than-and-single-line-not-equals']);
  this.executeCharTest('⪉', ['less-than-and-not-approximate', 'less-than-and-not-approximate', 'less-than-and-not-approximate']);
  this.executeCharTest('⪊', ['greater-than-and-not-approximate', 'greater-than-and-not-approximate', 'greater-than-and-not-approximate']);
  this.executeCharTest('⪋', ['less-than-above-double-line-equal-above-greater-than', 'less-than-above-double-line-equal-above-greater-than', 'less-than-above-double-line-equal-above-greater-than']);
  this.executeCharTest('⪌', ['greater-than-above-double-line-equal-above-less-than', 'greater-than-above-double-line-equal-above-less-than', 'greater-than-above-double-line-equal-above-less-than']);
  this.executeCharTest('⪍', ['less-than-above-similar-or-equal', 'less-than-above-similar-or-equal', 'less-than-above-similar-or-equal']);
  this.executeCharTest('⪎', ['greater-than-above-similar-or-equal', 'greater-than-above-similar-or-equal', 'greater-than-above-similar-or-equal']);
  this.executeCharTest('⪏', ['less-than-above-similar-above-greater-than', 'less-than-above-similar-above-greater-than', 'less-than-above-similar-above-greater-than']);
  this.executeCharTest('⪐', ['greater-than-above-similar-above-less-than', 'greater-than-above-similar-above-less-than', 'greater-than-above-similar-above-less-than']);
  this.executeCharTest('⪑', ['less-than-above-greater-than-above-double-line-equal', 'less-than-above-greater-than-above-double-line-equal', 'less-than-above-greater-than-above-double-line-equal']);
  this.executeCharTest('⪒', ['greater-than-above-less-than-above-double-line-equal', 'greater-than-above-less-than-above-double-line-equal', 'greater-than-above-less-than-above-double-line-equal']);
  this.executeCharTest('⪓', ['less-than-above-slanted-equal-above-greater-than-above-slanted-equal', 'less-than-above-slanted-equal-above-greater-than-above-slanted-equal', 'less-than-above-slanted-equal-above-greater-than-above-slanted-equal']);
  this.executeCharTest('⪔', ['greater-than-above-slanted-equal-above-less-than-above-slanted-equal', 'greater-than-above-slanted-equal-above-less-than-above-slanted-equal', 'greater-than-above-slanted-equal-above-less-than-above-slanted-equal']);
  this.executeCharTest('⪕', ['slanted-equals-or-less-than', 'slanted-equals-or-less-than', 'slanted-equals-or-less-than']);
  this.executeCharTest('⪖', ['slanted-equals-or-greater-than', 'slanted-equals-or-greater-than', 'slanted-equals-or-greater-than']);
  this.executeCharTest('⪗', ['slanted-equals-or-less-than-with-dot-inside', 'slanted-equals-or-less-than-with-dot-inside', 'slanted-equals-or-less-than-with-dot-inside']);
  this.executeCharTest('⪘', ['slanted-equals-or-greater-than-with-dot-inside', 'slanted-equals-or-greater-than-with-dot-inside', 'slanted-equals-or-greater-than-with-dot-inside']);
  this.executeCharTest('⪙', ['double-line-equals-or-less-than', 'double-line-equals-or-less-than', 'double-line-equals-or-less-than']);
  this.executeCharTest('⪚', ['double-line-equals-or-greater-than', 'double-line-equals-or-greater-than', 'double-line-equals-or-greater-than']);
  this.executeCharTest('⪛', ['double-line-slanted-equals-or-less-than', 'double-line-slanted-equals-or-less-than', 'double-line-slanted-equals-or-less-than']);
  this.executeCharTest('⪜', ['double-line-slanted-equals-or-greater-than', 'double-line-slanted-equals-or-greater-than', 'double-line-slanted-equals-or-greater-than']);
  this.executeCharTest('⪝', ['similar-or-less-than', 'similar-or-less-than', 'similar-or-less-than']);
  this.executeCharTest('⪞', ['similar-or-greater-than', 'similar-or-greater-than', 'similar-or-greater-than']);
  this.executeCharTest('⪟', ['similar-above-less-than-above-equals', 'similar-above-less-than-above-equals', 'similar-above-less-than-above-equals']);
  this.executeCharTest('⪠', ['similar-above-greater-than-above-equals', 'similar-above-greater-than-above-equals', 'similar-above-greater-than-above-equals']);
  this.executeCharTest('⪡', ['double-nested-less-than', 'double-nested-less-than', 'double-nested-less-than']);
  this.executeCharTest('⪢', ['double-nested-greater-than', 'double-nested-greater-than', 'double-nested-greater-than']);
  this.executeCharTest('⪣', ['double-nested-less-than-with-underbar', 'double-nested-less-than-with-underbar', 'double-nested-less-than-with-underbar']);
  this.executeCharTest('⪤', ['greater-than-overlapping-less-than', 'greater-than-overlapping-less-than', 'greater-than-overlapping-less-than']);
  this.executeCharTest('⪥', ['greater-than-beside-less-than', 'greater-than-beside-less-than', 'greater-than-beside-less-than']);
  this.executeCharTest('⪦', ['less-than-closed-by-curve', 'less-than-closed-by-curve', 'less-than-closed-by-curve']);
  this.executeCharTest('⪧', ['greater-than-closed-by-curve', 'greater-than-closed-by-curve', 'greater-than-closed-by-curve']);
  this.executeCharTest('⪨', ['less-than-closed-by-curve-above-slanted-equal', 'less-than-closed-by-curve-above-slanted-equal', 'less-than-closed-by-curve-above-slanted-equal']);
  this.executeCharTest('⪩', ['greater-than-closed-by-curve-above-slanted-equal', 'greater-than-closed-by-curve-above-slanted-equal', 'greater-than-closed-by-curve-above-slanted-equal']);
  this.executeCharTest('⪪', ['smaller-than', 'smaller-than', 'smaller-than']);
  this.executeCharTest('⪫', ['larger-than', 'larger-than', 'larger-than']);
  this.executeCharTest('⪬', ['smaller-than-or-equal-to', 'smaller-than-or-equal-to', 'smaller-than-or-equal-to']);
  this.executeCharTest('⪭', ['larger-than-or-equal-to', 'larger-than-or-equal-to', 'larger-than-or-equal-to']);
  this.executeCharTest('⪮', ['equals-with-bumpy-above', 'equals-with-bumpy-above', 'equals-with-bumpy-above']);
  this.executeCharTest('⪯', ['precedes-above-single-line-equals', 'precedes-above-single-line-equals', 'precedes-above-single-line-equals']);
  this.executeCharTest('⪰', ['succeeds-above-single-line-equals', 'succeeds-above-single-line-equals', 'succeeds-above-single-line-equals']);
  this.executeCharTest('⪱', ['precedes-above-single-line-not-equals', 'precedes-above-single-line-not-equals', 'precedes-above-single-line-not-equals']);
  this.executeCharTest('⪲', ['succeeds-above-single-line-not-equals', 'succeeds-above-single-line-not-equals', 'succeeds-above-single-line-not-equals']);
  this.executeCharTest('⪳', ['precedes-above-equals', 'precedes-above-equals', 'precedes-above-equals']);
  this.executeCharTest('⪴', ['succeeds-above-equals', 'succeeds-above-equals', 'succeeds-above-equals']);
  this.executeCharTest('⪵', ['precedes-above-not-equals', 'precedes-above-not-equals', 'precedes-above-not-equals']);
  this.executeCharTest('⪶', ['succeeds-above-not-equals', 'succeeds-above-not-equals', 'succeeds-above-not-equals']);
  this.executeCharTest('⪷', ['precedes-above-almost-equals', 'precedes-above-almost-equals', 'precedes-above-almost-equals']);
  this.executeCharTest('⪸', ['succeeds-above-almost-equals', 'succeeds-above-almost-equals', 'succeeds-above-almost-equals']);
  this.executeCharTest('⪹', ['precedes-above-not-almost-equals', 'precedes-above-not-almost-equals', 'precedes-above-not-almost-equals']);
  this.executeCharTest('⪺', ['succeeds-above-not-almost-equals', 'succeeds-above-not-almost-equals', 'succeeds-above-not-almost-equals']);
  this.executeCharTest('⪻', ['double-precedes', 'double-precedes', 'double-precedes']);
  this.executeCharTest('⪼', ['double-succeeds', 'double-succeeds', 'double-succeeds']);
  this.executeCharTest('⪽', ['subset-with-dot', 'subset-with-dot', 'subset-with-dot']);
  this.executeCharTest('⪾', ['superset-with-dot', 'superset-with-dot', 'superset-with-dot']);
  this.executeCharTest('⪿', ['subset-with-plus-sign-below', 'subset-with-plus-sign-below', 'subset-with-plus-sign-below']);
  this.executeCharTest('⫀', ['superset-with-plus-sign-below', 'superset-with-plus-sign-below', 'superset-with-plus-sign-below']);
  this.executeCharTest('⫁', ['subset-with-multiplication-sign-below', 'subset-with-multiplication-sign-below', 'subset-with-multiplication-sign-below']);
  this.executeCharTest('⫂', ['superset-with-multiplication-sign-below', 'superset-with-multiplication-sign-below', 'superset-with-multiplication-sign-below']);
  this.executeCharTest('⫃', ['subset-of-or-equal-to-with-dot-above', 'subset-of-or-equal-to-with-dot-above', 'subset-of-or-equal-to-with-dot-above']);
  this.executeCharTest('⫄', ['superset-of-or-equal-to-with-dot-above', 'superset-of-or-equal-to-with-dot-above', 'superset-of-or-equal-to-with-dot-above']);
  this.executeCharTest('⫅', ['subset-of-above-equals', 'subset-of-above-equals', 'subset-of-above-equals']);
  this.executeCharTest('⫆', ['superset-of-above-equals', 'superset-of-above-equals', 'superset-of-above-equals']);
  this.executeCharTest('⫇', ['subset-of-above-tilde', 'subset-of-above-tilde', 'subset-of-above-tilde']);
  this.executeCharTest('⫈', ['superset-of-above-tilde', 'superset-of-above-tilde', 'superset-of-above-tilde']);
  this.executeCharTest('⫉', ['subset-of-above-almost-equals', 'subset-of-above-almost-equals', 'subset-of-above-almost-equals']);
  this.executeCharTest('⫊', ['superset-of-above-almost-equals', 'superset-of-above-almost-equals', 'superset-of-above-almost-equals']);
  this.executeCharTest('⫋', ['subset-of-above-not-equals', 'subset-of-above-not-equals', 'subset-of-above-not-equals']);
  this.executeCharTest('⫌', ['superset-of-above-not-equals', 'superset-of-above-not-equals', 'superset-of-above-not-equals']);
  this.executeCharTest('⫍', ['square-left-open-box', 'square-left-open-box', 'square-left-open-box']);
  this.executeCharTest('⫎', ['square-right-open-box', 'square-right-open-box', 'square-right-open-box']);
  this.executeCharTest('⫏', ['closed-subset', 'closed-subset', 'closed-subset']);
  this.executeCharTest('⫐', ['closed-superset', 'closed-superset', 'closed-superset']);
  this.executeCharTest('⫑', ['closed-subset-or-equal-to', 'closed-subset-or-equal-to', 'closed-subset-or-equal-to']);
  this.executeCharTest('⫒', ['closed-superset-or-equal-to', 'closed-superset-or-equal-to', 'closed-superset-or-equal-to']);
  this.executeCharTest('⫓', ['subset-above-superset', 'subset-above-superset', 'subset-above-superset']);
  this.executeCharTest('⫔', ['superset-above-subset', 'superset-above-subset', 'superset-above-subset']);
  this.executeCharTest('⫕', ['subset-above-subset', 'subset-above-subset', 'subset-above-subset']);
  this.executeCharTest('⫖', ['superset-above-superset', 'superset-above-superset', 'superset-above-superset']);
  this.executeCharTest('⫗', ['superset-beside-subset', 'superset-beside-subset', 'superset-beside-subset']);
  this.executeCharTest('⫘', ['superset-beside-and-joined-by-dash-with-subset', 'superset-beside-and-joined-by-dash-with-subset', 'superset-beside-and-joined-by-dash-with-subset']);
  this.executeCharTest('⫙', ['element-of-opening-downwards', 'element-of-opening-downwards', 'element-of-opening-downwards']);
  this.executeCharTest('⫚', ['pitchfork-with-tee-top', 'pitchfork-with-tee-top', 'pitchfork-with-tee-top']);
  this.executeCharTest('⫛', ['transversal-intersection', 'transversal-intersection', 'transversal-intersection']);
  this.executeCharTest('⫝̸', ['forking', 'forking', 'forking']);
  this.executeCharTest('⫝', ['nonforking', 'nonforking', 'nonforking']);
  this.executeCharTest('⫞', ['short-left-tack', 'short-left-tack', 'short-left-tack']);
  this.executeCharTest('⫟', ['short-down-tack', 'short-down-tack', 'short-down-tack']);
  this.executeCharTest('⫠', ['short-up-tack', 'short-up-tack', 'short-up-tack']);
  this.executeCharTest('⫡', ['perpendicular-with-s', 'perpendicular-with-s', 'perpendicular-with-s']);
  this.executeCharTest('⫢', ['vertical-bar-triple-right-turnstile', 'vertical-bar-triple-right-turnstile', 'vertical-bar-triple-right-turnstile']);
  this.executeCharTest('⫣', ['double-vertical-bar-left-turnstile', 'double-vertical-bar-left-turnstile', 'double-vertical-bar-left-turnstile']);
  this.executeCharTest('⫤', ['vertical-bar-double-left-turnstile', 'vertical-bar-double-left-turnstile', 'vertical-bar-double-left-turnstile']);
  this.executeCharTest('⫥', ['double-vertical-bar-double-left-turnstile', 'double-vertical-bar-double-left-turnstile', 'double-vertical-bar-double-left-turnstile']);
  this.executeCharTest('⫦', ['long-dash-from-left-member-of-double-vertical', 'long-dash-from-left-member-of-double-vertical', 'long-dash-from-left-member-of-double-vertical']);
  this.executeCharTest('⫧', ['short-down-tack-with-overbar', 'short-down-tack-with-overbar', 'short-down-tack-with-overbar']);
  this.executeCharTest('⫨', ['short-up-tack-with-underbar', 'short-up-tack-with-underbar', 'short-up-tack-with-underbar']);
  this.executeCharTest('⫩', ['short-up-tack-above-short-down-tack', 'short-up-tack-above-short-down-tack', 'short-up-tack-above-short-down-tack']);
  this.executeCharTest('⫪', ['double-down-tack', 'double-down-tack', 'double-down-tack']);
  this.executeCharTest('⫫', ['double-up-tack', 'double-up-tack', 'double-up-tack']);
  this.executeCharTest('⫬', ['double-stroke-not-sign', 'double-stroke-not-sign', 'double-stroke-not-sign']);
  this.executeCharTest('⫭', ['reversed-double-stroke-not-sign', 'reversed-double-stroke-not-sign', 'reversed-double-stroke-not-sign']);
  this.executeCharTest('⫮', ['does-not-divide-with-reversed-negation-slash', 'does-not-divide-with-reversed-negation-slash', 'does-not-divide-with-reversed-negation-slash']);
  this.executeCharTest('⫯', ['vertical-line-with-circle-above', 'vertical-line-with-circle-above', 'vertical-line-with-circle-above']);
  this.executeCharTest('⫰', ['vertical-line-with-circle-below', 'vertical-line-with-circle-below', 'vertical-line-with-circle-below']);
  this.executeCharTest('⫱', ['down-tack-with-circle-below', 'down-tack-with-circle-below', 'down-tack-with-circle-below']);
  this.executeCharTest('⫲', ['parallel-with-horizontal-stroke', 'parallel-with-horizontal-stroke', 'parallel-with-horizontal-stroke']);
  this.executeCharTest('⫳', ['parallel-with-tilde', 'parallel-with-tilde', 'parallel-with-tilde']);
  this.executeCharTest('⫴', ['triple-vertical-bar-binary-relation', 'triple-vertical-bar-binary-relation', 'triple-vertical-bar-binary-relation']);
  this.executeCharTest('⫵', ['triple-vertical-bar-with-horizontal-stroke', 'triple-vertical-bar-with-horizontal-stroke', 'triple-vertical-bar-with-horizontal-stroke']);
  this.executeCharTest('⫶', ['triple-colon', 'triple-colon', 'triple-colon']);
  this.executeCharTest('⫷', ['triple-nested-less-than', 'triple-nested-less-than', 'triple-nested-less-than']);
  this.executeCharTest('⫸', ['triple-nested-greater-than', 'triple-nested-greater-than', 'triple-nested-greater-than']);
  this.executeCharTest('⫹', ['double-line-slanted-less-than-or-equal-to', 'double-line-slanted-less-than-or-equal-to', 'double-line-slanted-less-than-or-equal-to']);
  this.executeCharTest('⫺', ['double-line-slanted-greater-than-or-equal-to', 'double-line-slanted-greater-than-or-equal-to', 'double-line-slanted-greater-than-or-equal-to']);
  this.executeCharTest('⫻', ['triple-solidus-binary-relation', 'triple-solidus-binary-relation', 'triple-solidus-binary-relation']);
  this.executeCharTest('⫼', ['large-triple-vertical-bar', 'large-triple-vertical-bar', 'large-triple-vertical-bar']);
  this.executeCharTest('⫽', ['double-solidus', 'double-solidus', 'double-solidus']);
  this.executeCharTest('⫾', ['white-vertical-bar', 'white-vertical-bar', 'white-vertical-bar']);
  this.executeCharTest('⫿', ['white-vertical-bar', 'white-vertical-bar', 'white-vertical-bar']);
  this.executeCharTest('〜', ['wave-dash', 'wave-dash', 'wave-dash']);
  this.executeCharTest('︐', ['presentation-form-for-vertical-comma', 'presentation-form-for-vertical-comma', 'presentation-form-for-vertical-comma']);
  this.executeCharTest('︓', ['presentation-form-for-vertical-colon', 'presentation-form-for-vertical-colon', 'presentation-form-for-vertical-colon']);
  this.executeCharTest('︔', ['presentation-form-for-vertical-semicolon', 'presentation-form-for-vertical-semicolon', 'presentation-form-for-vertical-semicolon']);
  this.executeCharTest('︕', ['presentation-form-for-vertical-exclamation-mark', 'presentation-form-for-vertical-exclamation-mark', 'presentation-form-for-vertical-exclamation-mark']);
  this.executeCharTest('︖', ['presentation-form-for-vertical-question-mark', 'presentation-form-for-vertical-question-mark', 'presentation-form-for-vertical-question-mark']);
  this.executeCharTest('︙', ['presentation-form-for-vertical-horizontal-ellipsis', 'presentation-form-for-vertical-horizontal-ellipsis', 'presentation-form-for-vertical-horizontal-ellipsis']);
  this.executeCharTest('︰', ['glyph-for-vertical-two-dot-leader', 'glyph-for-vertical-two-dot-leader', 'glyph-for-vertical-two-dot-leader']);
  this.executeCharTest('︱', ['glyph-for-vertical-em-dash', 'glyph-for-vertical-em-dash', 'glyph-for-vertical-em-dash']);
  this.executeCharTest('︲', ['glyph-for-vertical-en-dash', 'glyph-for-vertical-en-dash', 'glyph-for-vertical-en-dash']);
  this.executeCharTest('︳', ['glyph-for-vertical-underscore', 'glyph-for-vertical-underscore', 'glyph-for-vertical-underscore']);
  this.executeCharTest('︴', ['glyph-for-vertical-wavy-underscore', 'glyph-for-vertical-wavy-underscore', 'glyph-for-vertical-wavy-underscore']);
  this.executeCharTest('﹅', ['sesame-dot', 'sesame-dot', 'sesame-dot']);
  this.executeCharTest('﹆', ['white-sesame-dot', 'white-sesame-dot', 'white-sesame-dot']);
  this.executeCharTest('﹉', ['dashed-overscore', 'dashed-overscore', 'dashed-overscore']);
  this.executeCharTest('﹊', ['centerline-overscore', 'centerline-overscore', 'centerline-overscore']);
  this.executeCharTest('﹋', ['wavy-overscore', 'wavy-overscore', 'wavy-overscore']);
  this.executeCharTest('﹌', ['double-wavy-overscore', 'double-wavy-overscore', 'double-wavy-overscore']);
  this.executeCharTest('﹍', ['dashed-underscore', 'dashed-underscore', 'dashed-underscore']);
  this.executeCharTest('﹎', ['centerline-underscore', 'centerline-underscore', 'centerline-underscore']);
  this.executeCharTest('﹏', ['wavy-underscore', 'wavy-underscore', 'wavy-underscore']);
  this.executeCharTest('﹐', ['small-comma', 'small-comma', 'small-comma']);
  this.executeCharTest('﹒', ['small-period', 'small-period', 'small-period']);
  this.executeCharTest('﹔', ['small-semicolon', 'small-semicolon', 'small-semicolon']);
  this.executeCharTest('﹕', ['small-colon', 'small-colon', 'small-colon']);
  this.executeCharTest('﹖', ['small-question-mark', 'small-question-mark', 'small-question-mark']);
  this.executeCharTest('﹗', ['small-exclamation-mark', 'small-exclamation-mark', 'small-exclamation-mark']);
  this.executeCharTest('﹘', ['small-em-dash', 'small-em-dash', 'small-em-dash']);
  this.executeCharTest('﹟', ['small-number-sign', 'small-number-sign', 'small-number-sign']);
  this.executeCharTest('﹠', ['small-ampersand', 'small-ampersand', 'small-ampersand']);
  this.executeCharTest('﹡', ['small-asterisk', 'small-asterisk', 'small-asterisk']);
  this.executeCharTest('﹢', ['small-plus-sign', 'small-plus-sign', 'small-plus-sign']);
  this.executeCharTest('﹣', ['small-hyphen-minus', 'small-hyphen-minus', 'small-hyphen-minus']);
  this.executeCharTest('﹤', ['small-less-than-sign', 'small-less-than-sign', 'small-less-than-sign']);
  this.executeCharTest('﹥', ['small-greater-than-sign', 'small-greater-than-sign', 'small-greater-than-sign']);
  this.executeCharTest('﹦', ['small-equals', 'small-equals', 'small-equals']);
  this.executeCharTest('﹨', ['small-backslash', 'small-backslash', 'small-backslash']);
  this.executeCharTest('﹩', ['small-dollar-sign', 'small-dollar-sign', 'small-dollar-sign']);
  this.executeCharTest('﹪', ['small-percent-sign', 'small-percent-sign', 'small-percent-sign']);
  this.executeCharTest('﹫', ['small-commercial-at', 'small-commercial-at', 'small-commercial-at']);
  this.executeCharTest('！', ['exclamation-mark', 'exclamation-mark', 'exclamation-mark']);
  this.executeCharTest('＂', ['quotation-mark', 'quotation-mark', 'quotation-mark']);
  this.executeCharTest('＃', ['number-sign', 'number-sign', 'number-sign']);
  this.executeCharTest('＄', ['dollar-sign', 'dollar-sign', 'dollar-sign']);
  this.executeCharTest('％', ['percent-sign', 'percent-sign', 'percent-sign']);
  this.executeCharTest('＆', ['ampersand', 'ampersand', 'ampersand']);
  this.executeCharTest('＇', ['apostrophe', 'apostrophe', 'apostrophe']);
  this.executeCharTest('＊', ['asterisk', 'asterisk', 'asterisk']);
  this.executeCharTest('＋', ['plus-sign', 'plus-sign', 'plus-sign']);
  this.executeCharTest('，', ['comma', 'comma', 'comma']);
  this.executeCharTest('－', ['hyphen-minus', 'hyphen-minus', 'hyphen-minus']);
  this.executeCharTest('．', ['period', 'period', 'period']);
  this.executeCharTest('／', ['slash', 'slash', 'slash']);
  this.executeCharTest('：', ['colon', 'colon', 'colon']);
  this.executeCharTest('；', ['semicolon', 'semicolon', 'semicolon']);
  this.executeCharTest('＜', ['less-than', 'less-than', 'less-than']);
  this.executeCharTest('＝', ['equals', 'equals', 'equals']);
  this.executeCharTest('＞', ['greater-than', 'greater-than', 'greater-than']);
  this.executeCharTest('？', ['question-mark', 'question-mark', 'question-mark']);
  this.executeCharTest('＠', ['commercial-at', 'commercial-at', 'commercial-at']);
  this.executeCharTest('＼', ['backslash', 'backslash', 'backslash']);
  this.executeCharTest('＾', ['caret', 'caret', 'caret']);
  this.executeCharTest('＿', ['bar', 'bar', 'bar']);
  this.executeCharTest('｀', ['grave', 'grave', 'grave']);
  this.executeCharTest('｜', ['vertical-bar', 'vertical-bar', 'vertical-bar']);
  this.executeCharTest('～', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('￠', ['cent-sign', 'cent-sign', 'cent-sign']);
  this.executeCharTest('￡', ['pound-sign', 'pound-sign', 'pound-sign']);
  this.executeCharTest('￢', ['not-sign', 'not-sign', 'not-sign']);
  this.executeCharTest('￣', ['bar', 'bar', 'bar']);
  this.executeCharTest('￤', ['broken-vertical-bar', 'broken-vertical-bar', 'broken-vertical-bar']);
  this.executeCharTest('￥', ['yen-sign', 'yen-sign', 'yen-sign']);
  this.executeCharTest('￦', ['won-sign', 'won-sign', 'won-sign']);
  this.executeCharTest('￨', ['halfwidth-forms-light-vertical', 'halfwidth-forms-light-vertical', 'halfwidth-forms-light-vertical']);
  this.executeCharTest('￭', ['halfwidth-black-square', 'halfwidth-black-square', 'halfwidth-black-square']);
  this.executeCharTest('￮', ['halfwidth-white-circle', 'halfwidth-white-circle', 'halfwidth-white-circle']);
  this.executeCharTest(' ', ['space', 'space', 'space']);
  this.executeCharTest(' ', ['no break space', 'no break space', 'no break space']);
  this.executeCharTest('­', ['soft hyphen', 'soft hyphen', 'soft hyphen']);
  this.executeCharTest(' ', ['en quad', 'en quad', 'en quad']);
  this.executeCharTest(' ', ['em quad', 'em quad', 'em quad']);
  this.executeCharTest(' ', ['en space', 'en space', 'en space']);
  this.executeCharTest(' ', ['em space', 'em space', 'em space']);
  this.executeCharTest(' ', ['three per em space', 'three per em space', 'three per em space']);
  this.executeCharTest(' ', ['four per em space', 'four per em space', 'four per em space']);
  this.executeCharTest(' ', ['six per em space', 'six per em space', 'six per em space']);
  this.executeCharTest(' ', ['figure space', 'figure space', 'figure space']);
  this.executeCharTest(' ', ['punctuation space', 'punctuation space', 'punctuation space']);
  this.executeCharTest(' ', ['thin space', 'thin space', 'thin space']);
  this.executeCharTest(' ', ['hair space', 'hair space', 'hair space']);
  this.executeCharTest('​', ['zero width space', 'zero width space', 'zero width space']);
  this.executeCharTest('‌', ['zero width non joiner', 'zero width non joiner', 'zero width non joiner']);
  this.executeCharTest('‍', ['zero width joiner', 'zero width joiner', 'zero width joiner']);
  this.executeCharTest('‎', ['left to right mark', 'left to right mark', 'left to right mark']);
  this.executeCharTest('‏', ['right to left mark', 'right to left mark', 'right to left mark']);
  this.executeCharTest(' ', ['line separator', 'line separator', 'line separator']);
  this.executeCharTest(' ', ['paragraph separator', 'paragraph separator', 'paragraph separator']);
  this.executeCharTest('‪', ['left to right embedding', 'left to right embedding', 'left to right embedding']);
  this.executeCharTest('‫', ['right to left embedding', 'right to left embedding', 'right to left embedding']);
  this.executeCharTest('‬', ['pop directional formatting', 'pop directional formatting', 'pop directional formatting']);
  this.executeCharTest('‭', ['left to right override', 'left to right override', 'left to right override']);
  this.executeCharTest('‮', ['right to left override', 'right to left override', 'right to left override']);
  this.executeCharTest(' ', ['narrow no break space', 'narrow no break space', 'narrow no break space']);
  this.executeCharTest(' ', ['medium mathematical space', 'medium mathematical space', 'medium mathematical space']);
  this.executeCharTest('⁠', ['word joiner', 'word joiner', 'word joiner']);
  this.executeCharTest('⁡', ['of', 'of', 'of']);
  this.executeCharTest('⁢', ['times', 'times', 'times']);
  this.executeCharTest('⁣', ['separator', 'separator', 'separator']);
  this.executeCharTest('⁤', ['plus', 'plus', 'plus']);
  this.executeCharTest('⁪', ['inhibit symmetric swapping', 'inhibit symmetric swapping', 'inhibit symmetric swapping']);
  this.executeCharTest('⁫', ['activate symmetric swapping', 'activate symmetric swapping', 'activate symmetric swapping']);
  this.executeCharTest('⁮', ['national digit shapes', 'national digit shapes', 'national digit shapes']);
  this.executeCharTest('⁯', ['nominal digit shapes', 'nominal digit shapes', 'nominal digit shapes']);
  this.executeCharTest('﻿', ['zero width no break space', 'zero width no break space', 'zero width no break space']);
  this.executeCharTest('￹', ['interlinear annotation anchor', 'interlinear annotation anchor', 'interlinear annotation anchor']);
  this.executeCharTest('￺', ['interlinear annotation separator', 'interlinear annotation separator', 'interlinear annotation separator']);
  this.executeCharTest('￻', ['interlinear annotation terminator', 'interlinear annotation terminator', 'interlinear annotation terminator']);
  this.executeCharTest('⏨', ['decimal exponent symbol', 'decimal exponent symbol', 'decimal exponent symbol']);
  this.executeCharTest('★', ['black star', 'black star', 'black star']);
  this.executeCharTest('☆', ['white star', 'white star', 'white star']);
  this.executeCharTest('⚪', ['white circle', 'white circle', 'white circle']);
  this.executeCharTest('⚫', ['black circle', 'black circle', 'black circle']);
  this.executeCharTest('✅', ['white check', 'white check', 'white check']);
  this.executeCharTest('✓', ['check', 'check', 'check']);
  this.executeCharTest('✔', ['heavy check', 'heavy check', 'heavy check']);
  this.executeCharTest('✕', ['multiplication x', 'multiplication x', 'multiplication x']);
  this.executeCharTest('✖', ['heavy multiplication x', 'heavy multiplication x', 'heavy multiplication x']);
  this.executeCharTest('✗', ['ballot x', 'ballot x', 'ballot x']);
  this.executeCharTest('✘', ['heavy ballot x', 'heavy ballot x', 'heavy ballot x']);
  this.executeCharTest('✛', ['open center cross', 'open center cross', 'open center cross']);
  this.executeCharTest('✜', ['heavy open center cross', 'heavy open center cross', 'heavy open center cross']);
  this.executeCharTest('✠', ['maltese cross', 'maltese cross', 'maltese cross']);
  this.executeCharTest('✡', ['star of david', 'star of david', 'star of david']);
  this.executeCharTest('✢', ['four teardrop spoked asterisk', 'four teardrop spoked asterisk', 'four teardrop spoked asterisk']);
  this.executeCharTest('✣', ['four balloon spoked asterisk', 'four balloon spoked asterisk', 'four balloon spoked asterisk']);
  this.executeCharTest('✤', ['heavy four balloon spoked asterisk', 'heavy four balloon spoked asterisk', 'heavy four balloon spoked asterisk']);
  this.executeCharTest('✥', ['four club spoked asterisk', 'four club spoked asterisk', 'four club spoked asterisk']);
  this.executeCharTest('✦', ['black four pointed star', 'black four pointed star', 'black four pointed star']);
  this.executeCharTest('✧', ['white four pointed star', 'white four pointed star', 'white four pointed star']);
  this.executeCharTest('✨', ['sparkles', 'sparkles', 'sparkles']);
  this.executeCharTest('✩', ['stress outlined white star', 'stress outlined white star', 'stress outlined white star']);
  this.executeCharTest('✪', ['circled white star', 'circled white star', 'circled white star']);
  this.executeCharTest('✫', ['open center black star', 'open center black star', 'open center black star']);
  this.executeCharTest('✬', ['black center white star', 'black center white star', 'black center white star']);
  this.executeCharTest('✭', ['outlined black star', 'outlined black star', 'outlined black star']);
  this.executeCharTest('✮', ['heavy outlined black star', 'heavy outlined black star', 'heavy outlined black star']);
  this.executeCharTest('✯', ['pinwheel star', 'pinwheel star', 'pinwheel star']);
  this.executeCharTest('✰', ['shadowed white star', 'shadowed white star', 'shadowed white star']);
  this.executeCharTest('✱', ['heavy asterisk', 'heavy asterisk', 'heavy asterisk']);
  this.executeCharTest('✲', ['open center asterisk', 'open center asterisk', 'open center asterisk']);
  this.executeCharTest('✳', ['eight spoked asterisk', 'eight spoked asterisk', 'eight spoked asterisk']);
  this.executeCharTest('✴', ['eight pointed black star', 'eight pointed black star', 'eight pointed black star']);
  this.executeCharTest('✵', ['eight pointed pinwheel star', 'eight pointed pinwheel star', 'eight pointed pinwheel star']);
  this.executeCharTest('✶', ['six pointed black star', 'six pointed black star', 'six pointed black star']);
  this.executeCharTest('✹', ['twelve pointed black star', 'twelve pointed black star', 'twelve pointed black star']);
  this.executeCharTest('✺', ['sixteen pointed asterisk', 'sixteen pointed asterisk', 'sixteen pointed asterisk']);
  this.executeCharTest('✻', ['teardrop spoked asterisk', 'teardrop spoked asterisk', 'teardrop spoked asterisk']);
  this.executeCharTest('✼', ['open center teardrop spoked asterisk', 'open center teardrop spoked asterisk', 'open center teardrop spoked asterisk']);
  this.executeCharTest('✽', ['heavy teardrop spoked asterisk', 'heavy teardrop spoked asterisk', 'heavy teardrop spoked asterisk']);
  this.executeCharTest('✾', ['six petalled black and white florette', 'six petalled black and white florette', 'six petalled black and white florette']);
  this.executeCharTest('✿', ['black florette', 'black florette', 'black florette']);
  this.executeCharTest('❀', ['white florette', 'white florette', 'white florette']);
  this.executeCharTest('❁', ['eight petalled outlined black florette', 'eight petalled outlined black florette', 'eight petalled outlined black florette']);
  this.executeCharTest('❂', ['circled open center eight pointed star', 'circled open center eight pointed star', 'circled open center eight pointed star']);
  this.executeCharTest('❃', ['heavy teardrop spoked pinwheel asterisk', 'heavy teardrop spoked pinwheel asterisk', 'heavy teardrop spoked pinwheel asterisk']);
  this.executeCharTest('❄', ['snowflake', 'snowflake', 'snowflake']);
  this.executeCharTest('❅', ['tight trifoliate snowflake', 'tight trifoliate snowflake', 'tight trifoliate snowflake']);
  this.executeCharTest('❆', ['heavy chevron snowflake', 'heavy chevron snowflake', 'heavy chevron snowflake']);
  this.executeCharTest('❇', ['sparkle', 'sparkle', 'sparkle']);
  this.executeCharTest('❈', ['heavy sparkle', 'heavy sparkle', 'heavy sparkle']);
  this.executeCharTest('❉', ['balloon spoked asterisk', 'balloon spoked asterisk', 'balloon spoked asterisk']);
  this.executeCharTest('❊', ['eight teardrop spoked propeller asterisk', 'eight teardrop spoked propeller asterisk', 'eight teardrop spoked propeller asterisk']);
  this.executeCharTest('❋', ['heavy eight teardrop spoked propeller asterisk', 'heavy eight teardrop spoked propeller asterisk', 'heavy eight teardrop spoked propeller asterisk']);
  this.executeCharTest('❌', ['cross mark', 'cross mark', 'cross mark']);
  this.executeCharTest('❍', ['shadowed white circle', 'shadowed white circle', 'shadowed white circle']);
};


sre.MathspeakCharEnglishTest.prototype.testMathspeakFunctions = function() {
  this.executeCharTest('deg', ['degree', 'degree', 'degree']);
  this.executeCharTest('det', ['det', 'det', 'det']);
  this.executeCharTest('dim', ['dimension', 'dimension', 'dimension']);
  this.executeCharTest('hom', ['hom', 'hom', 'hom']);
  this.executeCharTest('Hom', ['hom', 'hom', 'hom']);
  this.executeCharTest('ker', ['kernel', 'kernel', 'kernel']);
  this.executeCharTest('Tr', ['trace', 'trace', 'trace']);
  this.executeCharTest('tr', ['trace', 'trace', 'trace']);
  this.executeCharTest('log', ['log', 'log', 'log']);
  this.executeCharTest('ln', ['ln', 'ln', 'ln']);
  this.executeCharTest('lg', ['log base 10', 'log base 10', 'log base 10']);
  this.executeCharTest('exp', ['exp', 'exp', 'exp']);
  this.executeCharTest('expt', ['exp', 'exp', 'exp']);
  this.executeCharTest('gcd', ['gcd', 'gcd', 'gcd']);
  this.executeCharTest('lcm', ['lcm', 'lcm', 'lcm']);
  this.executeCharTest('arg', ['arg', 'arg', 'arg']);
  this.executeCharTest('im', ['im', 'im', 'im']);
  this.executeCharTest('re', ['re', 're', 're']);
  this.executeCharTest('inf', ['inf', 'inf', 'inf']);
  this.executeCharTest('lim', ['limit', 'limit', 'limit']);
  this.executeCharTest('lim inf', ['liminf', 'liminf', 'liminf']);
  this.executeCharTest('liminf', ['liminf', 'liminf', 'liminf']);
  this.executeCharTest('lim sup', ['limsup', 'limsup', 'limsup']);
  this.executeCharTest('limsup', ['limsup', 'limsup', 'limsup']);
  this.executeCharTest('max', ['max', 'max', 'max']);
  this.executeCharTest('min', ['min', 'min', 'min']);
  this.executeCharTest('sup', ['sup', 'sup', 'sup']);
  this.executeCharTest('injlim', ['colimit', 'colimit', 'colimit']);
  this.executeCharTest('inj lim', ['colimit', 'colimit', 'colimit']);
  this.executeCharTest('projlim', ['limit', 'limit', 'limit']);
  this.executeCharTest('proj lim', ['limit', 'limit', 'limit']);
  this.executeCharTest('mod', ['mod', 'mod', 'mod']);
  this.executeCharTest('Pr', ['probability', 'probability', 'probability']);
  this.executeCharTest('cosh', ['hyperbolic cosine', 'hyperbolic cosine', 'hyperbolic cosine']);
  this.executeCharTest('coth', ['hyperbolic cotangent', 'hyperbolic cotangent', 'hyperbolic cotangent']);
  this.executeCharTest('csch', ['hyperbolic cosecant', 'hyperbolic cosecant', 'hyperbolic cosecant']);
  this.executeCharTest('sech', ['hyperbolic secant', 'hyperbolic secant', 'hyperbolic secant']);
  this.executeCharTest('sinh', ['hyperbolic sine', 'hyperbolic sine', 'hyperbolic sine']);
  this.executeCharTest('tanh', ['hyperbolic tangent', 'hyperbolic tangent', 'hyperbolic tangent']);
  this.executeCharTest('arcosh', ['area hyperbolic cosine', 'area hyperbolic cosine', 'area hyperbolic cosine']);
  this.executeCharTest('arccosh', ['area hyperbolic cosine', 'area hyperbolic cosine', 'area hyperbolic cosine']);
  this.executeCharTest('arcoth', ['area hyperbolic cotangent', 'area hyperbolic cotangent', 'area hyperbolic cotangent']);
  this.executeCharTest('arccoth', ['area hyperbolic cotangent', 'area hyperbolic cotangent', 'area hyperbolic cotangent']);
  this.executeCharTest('arcsch', ['area hyperbolic cosecant', 'area hyperbolic cosecant', 'area hyperbolic cosecant']);
  this.executeCharTest('arccsch', ['area hyperbolic cosecant', 'area hyperbolic cosecant', 'area hyperbolic cosecant']);
  this.executeCharTest('arsech', ['area hyperbolic secant', 'area hyperbolic secant', 'area hyperbolic secant']);
  this.executeCharTest('arcsech', ['area hyperbolic secant', 'area hyperbolic secant', 'area hyperbolic secant']);
  this.executeCharTest('arsinh', ['area hyperbolic sine', 'area hyperbolic sine', 'area hyperbolic sine']);
  this.executeCharTest('arcsinh', ['area hyperbolic sine', 'area hyperbolic sine', 'area hyperbolic sine']);
  this.executeCharTest('artanh', ['area hyperbolic tangent', 'area hyperbolic tangent', 'area hyperbolic tangent']);
  this.executeCharTest('arctanh', ['area hyperbolic tangent', 'area hyperbolic tangent', 'area hyperbolic tangent']);
  this.executeCharTest('cos', ['cosine', 'cosine', 'cosine']);
  this.executeCharTest('cosine', ['cosine', 'cosine', 'cosine']);
  this.executeCharTest('cot', ['cotangent', 'cotangent', 'cotangent']);
  this.executeCharTest('csc', ['cosecant', 'cosecant', 'cosecant']);
  this.executeCharTest('sec', ['secant', 'secant', 'secant']);
  this.executeCharTest('sin', ['sine', 'sine', 'sine']);
  this.executeCharTest('sine', ['sine', 'sine', 'sine']);
  this.executeCharTest('tan', ['tangent', 'tangent', 'tangent']);
  this.executeCharTest('arccos', ['arc cosine', 'arc cosine', 'arc cosine']);
  this.executeCharTest('arccot', ['arc cotangent', 'arc cotangent', 'arc cotangent']);
  this.executeCharTest('arccsc', ['arc cosecant', 'arc cosecant', 'arc cosecant']);
  this.executeCharTest('arcsec', ['arc secant', 'arc secant', 'arc secant']);
  this.executeCharTest('arcsin', ['arc sine', 'arc sine', 'arc sine']);
  this.executeCharTest('arctan', ['arc tangent', 'arc tangent', 'arc tangent']);
};


sre.MathspeakCharEnglishTest.prototype.testMathspeakUnits = function() {
  this.executeUnitTest('W', ['watt', 'watt', 'watt']);
  this.executeUnitTest('w', ['watt', 'watt', 'watt']);
  this.executeUnitTest('kw', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('kW', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('mw', ['milliwatt', 'milliwatt', 'milliwatt']);
  this.executeUnitTest('mW', ['milliwatt', 'milliwatt', 'milliwatt']);
  this.executeUnitTest('kwh', ['kilowatt hour', 'kilowatt hour', 'kilowatt hour']);
  this.executeUnitTest('kWh', ['kilowatt hour', 'kilowatt hour', 'kilowatt hour']);
  this.executeUnitTest('J', ['joule', 'joule', 'joule']);
  this.executeUnitTest('N', ['Newton', 'Newton', 'Newton']);
  this.executeUnitTest('A', ['ampere', 'ampere', 'ampere']);
  this.executeUnitTest('V', ['volt', 'volt', 'volt']);
  this.executeUnitTest('µΩ', ['microohm', 'microohm', 'microohm']);
  this.executeUnitTest('mΩ', ['milliohm', 'milliohm', 'milliohm']);
  this.executeUnitTest('Ω', ['ohm', 'ohm', 'ohm']);
  this.executeUnitTest('Ohm', ['ohm', 'ohm', 'ohm']);
  this.executeUnitTest('kΩ', ['kilohm', 'kilohm', 'kilohm']);
  this.executeUnitTest('KΩ', ['kilohm', 'kilohm', 'kilohm']);
  this.executeUnitTest('MΩ', ['megaohm', 'megaohm', 'megaohm']);
  this.executeUnitTest('GΩ', ['gigaohm', 'gigaohm', 'gigaohm']);
  this.executeUnitTest('mm', ['millimeter', 'millimeter', 'millimeter']);
  this.executeUnitTest('cm', ['centimeter', 'centimeter', 'centimeter']);
  this.executeUnitTest('m', ['meter', 'meter', 'meter']);
  this.executeUnitTest('km', ['kilometer', 'kilometer', 'kilometer']);
  this.executeUnitTest('ft', ['foot', 'foot', 'foot']);
  this.executeUnitTest('ft.', ['foot', 'foot', 'foot']);
  this.executeUnitTest('in', ['inch', 'inch', 'inch']);
  this.executeUnitTest('in.', ['inch', 'inch', 'inch']);
  this.executeUnitTest('mi', ['mile', 'mile', 'mile']);
  this.executeUnitTest('mi.', ['mile', 'mile', 'mile']);
  this.executeUnitTest('yd', ['yard', 'yard', 'yard']);
  this.executeUnitTest('yd.', ['yard', 'yard', 'yard']);
  this.executeUnitTest('n.m.', ['nautical mile', 'nautical mile', 'nautical mile']);
  this.executeUnitTest('b', ['bit', 'bit', 'bit']);
  this.executeUnitTest('B', ['byte', 'byte', 'byte']);
  this.executeUnitTest('KB', ['kilobyte', 'kilobyte', 'kilobyte']);
  this.executeUnitTest('MB', ['megabyte', 'megabyte', 'megabyte']);
  this.executeUnitTest('GB', ['gigabyte', 'gigabyte', 'gigabyte']);
  this.executeUnitTest('TB', ['terabyte', 'terabyte', 'terabyte']);
  this.executeUnitTest('doz', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('doz.', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('dz', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('dz.', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('sq', ['square', 'square', 'square']);
  this.executeUnitTest('sq.', ['square', 'square', 'square']);
  this.executeUnitTest('ha', ['hectare', 'hectare', 'hectare']);
  this.executeUnitTest('kt', ['knot', 'knot', 'knot']);
  this.executeUnitTest('kt.', ['knot', 'knot', 'knot']);
  this.executeUnitTest('mph', ['miles per hour', 'miles per hour', 'miles per hour']);
  this.executeUnitTest('rpm', ['revolutions per minute', 'revolutions per minute', 'revolutions per minute']);
  this.executeUnitTest('kmh', ['kilometers per hour', 'kilometers per hour', 'kilometers per hour']);
  this.executeUnitTest('F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('F.', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('°F', ['Fahrenheit', 'Fahrenheit', 'Fahrenheit']);
  this.executeUnitTest('C', ['Celsius', 'Celsius', 'Celsius']);
  this.executeUnitTest('°C', ['Celsius', 'Celsius', 'Celsius']);
  this.executeUnitTest('K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('°K', ['Kelvin', 'Kelvin', 'Kelvin']);
  this.executeUnitTest('ns', ['nanosecond', 'nanosecond', 'nanosecond']);
  this.executeUnitTest('µs', ['microsecond', 'microsecond', 'microsecond']);
  this.executeUnitTest('ms', ['millisecond', 'millisecond', 'millisecond']);
  this.executeUnitTest('s', ['second', 'second', 'second']);
  this.executeUnitTest('min', ['minute', 'minute', 'minute']);
  this.executeUnitTest('h', ['hour', 'hour', 'hour']);
  this.executeUnitTest('hr', ['hour', 'hour', 'hour']);
  this.executeUnitTest('bbl.', ['barrel', 'barrel', 'barrel']);
  this.executeUnitTest('bbl', ['barrel', 'barrel', 'barrel']);
  this.executeUnitTest('cu', ['cubic', 'cubic', 'cubic']);
  this.executeUnitTest('cu.', ['cubic', 'cubic', 'cubic']);
  this.executeUnitTest('fl. oz.', ['fluid ounce', 'fluid ounce', 'fluid ounce']);
  this.executeUnitTest('gal', ['gallon', 'gallon', 'gallon']);
  this.executeUnitTest('gal.', ['gallon', 'gallon', 'gallon']);
  this.executeUnitTest('pt', ['pint', 'pint', 'pint']);
  this.executeUnitTest('pt.', ['pint', 'pint', 'pint']);
  this.executeUnitTest('qt', ['quart', 'quart', 'quart']);
  this.executeUnitTest('qt.', ['quart', 'quart', 'quart']);
  this.executeUnitTest('tbsp', ['tablespoon', 'tablespoon', 'tablespoon']);
  this.executeUnitTest('tbsp.', ['tablespoon', 'tablespoon', 'tablespoon']);
  this.executeUnitTest('tsp', ['teaspoon', 'teaspoon', 'teaspoon']);
  this.executeUnitTest('tsp.', ['teaspoon', 'teaspoon', 'teaspoon']);
  this.executeUnitTest('cc', ['cubic centimeter', 'cubic centimeter', 'cubic centimeter']);
  this.executeUnitTest('kl', ['kiloliter', 'kiloliter', 'kiloliter']);
  this.executeUnitTest('l', ['liter', 'liter', 'liter']);
  this.executeUnitTest('ml', ['milliliter', 'milliliter', 'milliliter']);
  this.executeUnitTest('lb', ['pound', 'pound', 'pound']);
  this.executeUnitTest('lb.', ['pound', 'pound', 'pound']);
  this.executeUnitTest('LT', ['long ton', 'long ton', 'long ton']);
  this.executeUnitTest('L.T.', ['long ton', 'long ton', 'long ton']);
  this.executeUnitTest('oz', ['ounce', 'ounce', 'ounce']);
  this.executeUnitTest('oz.', ['ounce', 'ounce', 'ounce']);
  this.executeUnitTest('g', ['gram', 'gram', 'gram']);
  this.executeUnitTest('gr', ['gram', 'gram', 'gram']);
  this.executeUnitTest('kg', ['kilogram', 'kilogram', 'kilogram']);
  this.executeUnitTest('mcg', ['microgram', 'microgram', 'microgram']);
  this.executeUnitTest('µg', ['microgram', 'microgram', 'microgram']);
  this.executeUnitTest('mg', ['milligram', 'milligram', 'milligram']);
  this.executeUnitTest('t', ['ton', 'ton', 'ton']);
  this.executeUnitTest('T', ['ton', 'ton', 'ton']);
};
