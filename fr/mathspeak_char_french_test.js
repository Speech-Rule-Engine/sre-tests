// Copyright 2019 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract class for test cases of single characters.
 * @author Volker.Sorge@gmail.com (Volker Sorge)
 */

goog.provide('sre.MathspeakCharFrenchTest');

goog.require('sre.AbstractCharacterTest');



/**
 * @constructor
 * @extends {sre.AbstractCharacterTest}
 */
sre.MathspeakCharFrenchTest = function() {
  sre.MathspeakCharFrenchTest.base(this, 'constructor');

  this.locale = 'fr';
  this.domain = 'mathspeak';

  /**
   * @type {Array.<string>}
   */
  this.styles = ['default', 'brief', 'sbrief'];

  this.setActive('MathspeakCharactersFrench');
};
goog.inherits(sre.MathspeakCharFrenchTest, sre.AbstractCharacterTest);


/**
 * Runs all character translation tests for mathspeak.
 */
sre.MathspeakCharFrenchTest.prototype.testMathspeakChars = function() {
  this.executeCharTest('0', ['0', '0', '0']);
  this.executeCharTest('1', ['1', '1', '1']);
  this.executeCharTest('2', ['2', '2', '2']);
  this.executeCharTest('3', ['3', '3', '3']);
  this.executeCharTest('4', ['4', '4', '4']);
  this.executeCharTest('5', ['5', '5', '5']);
  this.executeCharTest('6', ['6', '6', '6']);
  this.executeCharTest('7', ['7', '7', '7']);
  this.executeCharTest('8', ['8', '8', '8']);
  this.executeCharTest('9', ['9', '9', '9']);
  this.executeCharTest('𝐀', ['A majuscule en gras', 'A majuscule en gras', 'A majuscule en gras']);
  this.executeCharTest('𝐁', ['B majuscule en gras', 'B majuscule en gras', 'B majuscule en gras']);
  this.executeCharTest('𝐂', ['C majuscule en gras', 'C majuscule en gras', 'C majuscule en gras']);
  this.executeCharTest('𝐃', ['D majuscule en gras', 'D majuscule en gras', 'D majuscule en gras']);
  this.executeCharTest('𝐄', ['E majuscule en gras', 'E majuscule en gras', 'E majuscule en gras']);
  this.executeCharTest('𝐅', ['F majuscule en gras', 'F majuscule en gras', 'F majuscule en gras']);
  this.executeCharTest('𝐆', ['G majuscule en gras', 'G majuscule en gras', 'G majuscule en gras']);
  this.executeCharTest('𝐇', ['H majuscule en gras', 'H majuscule en gras', 'H majuscule en gras']);
  this.executeCharTest('𝐈', ['I majuscule en gras', 'I majuscule en gras', 'I majuscule en gras']);
  this.executeCharTest('𝐉', ['J majuscule en gras', 'J majuscule en gras', 'J majuscule en gras']);
  this.executeCharTest('𝐊', ['K majuscule en gras', 'K majuscule en gras', 'K majuscule en gras']);
  this.executeCharTest('𝐋', ['L majuscule en gras', 'L majuscule en gras', 'L majuscule en gras']);
  this.executeCharTest('𝐌', ['M majuscule en gras', 'M majuscule en gras', 'M majuscule en gras']);
  this.executeCharTest('𝐍', ['N majuscule en gras', 'N majuscule en gras', 'N majuscule en gras']);
  this.executeCharTest('𝐎', ['O majuscule en gras', 'O majuscule en gras', 'O majuscule en gras']);
  this.executeCharTest('𝐏', ['P majuscule en gras', 'P majuscule en gras', 'P majuscule en gras']);
  this.executeCharTest('𝐐', ['Q majuscule en gras', 'Q majuscule en gras', 'Q majuscule en gras']);
  this.executeCharTest('𝐑', ['R majuscule en gras', 'R majuscule en gras', 'R majuscule en gras']);
  this.executeCharTest('𝐒', ['S majuscule en gras', 'S majuscule en gras', 'S majuscule en gras']);
  this.executeCharTest('𝐓', ['T majuscule en gras', 'T majuscule en gras', 'T majuscule en gras']);
  this.executeCharTest('𝐔', ['U majuscule en gras', 'U majuscule en gras', 'U majuscule en gras']);
  this.executeCharTest('𝐕', ['V majuscule en gras', 'V majuscule en gras', 'V majuscule en gras']);
  this.executeCharTest('𝐖', ['W majuscule en gras', 'W majuscule en gras', 'W majuscule en gras']);
  this.executeCharTest('𝐗', ['X majuscule en gras', 'X majuscule en gras', 'X majuscule en gras']);
  this.executeCharTest('𝐘', ['Y majuscule en gras', 'Y majuscule en gras', 'Y majuscule en gras']);
  this.executeCharTest('𝐙', ['Z majuscule en gras', 'Z majuscule en gras', 'Z majuscule en gras']);
  this.executeCharTest('𝐚', ['a en gras', 'a en gras', 'a en gras']);
  this.executeCharTest('𝐛', ['b en gras', 'b en gras', 'b en gras']);
  this.executeCharTest('𝐜', ['c en gras', 'c en gras', 'c en gras']);
  this.executeCharTest('𝐝', ['d en gras', 'd en gras', 'd en gras']);
  this.executeCharTest('𝐞', ['e en gras', 'e en gras', 'e en gras']);
  this.executeCharTest('𝐟', ['f en gras', 'f en gras', 'f en gras']);
  this.executeCharTest('𝐠', ['g en gras', 'g en gras', 'g en gras']);
  this.executeCharTest('𝐡', ['h en gras', 'h en gras', 'h en gras']);
  this.executeCharTest('𝐢', ['i en gras', 'i en gras', 'i en gras']);
  this.executeCharTest('𝐣', ['j en gras', 'j en gras', 'j en gras']);
  this.executeCharTest('𝐤', ['k en gras', 'k en gras', 'k en gras']);
  this.executeCharTest('𝐥', ['l en gras', 'l en gras', 'l en gras']);
  this.executeCharTest('𝐦', ['m en gras', 'm en gras', 'm en gras']);
  this.executeCharTest('𝐧', ['n en gras', 'n en gras', 'n en gras']);
  this.executeCharTest('𝐨', ['o en gras', 'o en gras', 'o en gras']);
  this.executeCharTest('𝐩', ['p en gras', 'p en gras', 'p en gras']);
  this.executeCharTest('𝐪', ['q en gras', 'q en gras', 'q en gras']);
  this.executeCharTest('𝐫', ['r en gras', 'r en gras', 'r en gras']);
  this.executeCharTest('𝐬', ['s en gras', 's en gras', 's en gras']);
  this.executeCharTest('𝐭', ['t en gras', 't en gras', 't en gras']);
  this.executeCharTest('𝐮', ['u en gras', 'u en gras', 'u en gras']);
  this.executeCharTest('𝐯', ['v en gras', 'v en gras', 'v en gras']);
  this.executeCharTest('𝐰', ['w en gras', 'w en gras', 'w en gras']);
  this.executeCharTest('𝐱', ['x en gras', 'x en gras', 'x en gras']);
  this.executeCharTest('𝐲', ['y en gras', 'y en gras', 'y en gras']);
  this.executeCharTest('𝐳', ['z en gras', 'z en gras', 'z en gras']);
  this.executeCharTest('𝕬', ['A majuscule en gothique gras', 'A majuscule en gothique gras', 'A majuscule en gothique gras']);
  this.executeCharTest('𝕭', ['B majuscule en gothique gras', 'B majuscule en gothique gras', 'B majuscule en gothique gras']);
  this.executeCharTest('𝕮', ['C majuscule en gothique gras', 'C majuscule en gothique gras', 'C majuscule en gothique gras']);
  this.executeCharTest('𝕯', ['D majuscule en gothique gras', 'D majuscule en gothique gras', 'D majuscule en gothique gras']);
  this.executeCharTest('𝕰', ['E majuscule en gothique gras', 'E majuscule en gothique gras', 'E majuscule en gothique gras']);
  this.executeCharTest('𝕱', ['F majuscule en gothique gras', 'F majuscule en gothique gras', 'F majuscule en gothique gras']);
  this.executeCharTest('𝕲', ['G majuscule en gothique gras', 'G majuscule en gothique gras', 'G majuscule en gothique gras']);
  this.executeCharTest('𝕳', ['H majuscule en gothique gras', 'H majuscule en gothique gras', 'H majuscule en gothique gras']);
  this.executeCharTest('𝕴', ['I majuscule en gothique gras', 'I majuscule en gothique gras', 'I majuscule en gothique gras']);
  this.executeCharTest('𝕵', ['J majuscule en gothique gras', 'J majuscule en gothique gras', 'J majuscule en gothique gras']);
  this.executeCharTest('𝕶', ['K majuscule en gothique gras', 'K majuscule en gothique gras', 'K majuscule en gothique gras']);
  this.executeCharTest('𝕷', ['L majuscule en gothique gras', 'L majuscule en gothique gras', 'L majuscule en gothique gras']);
  this.executeCharTest('𝕸', ['M majuscule en gothique gras', 'M majuscule en gothique gras', 'M majuscule en gothique gras']);
  this.executeCharTest('𝕹', ['N majuscule en gothique gras', 'N majuscule en gothique gras', 'N majuscule en gothique gras']);
  this.executeCharTest('𝕺', ['O majuscule en gothique gras', 'O majuscule en gothique gras', 'O majuscule en gothique gras']);
  this.executeCharTest('𝕻', ['P majuscule en gothique gras', 'P majuscule en gothique gras', 'P majuscule en gothique gras']);
  this.executeCharTest('𝕼', ['Q majuscule en gothique gras', 'Q majuscule en gothique gras', 'Q majuscule en gothique gras']);
  this.executeCharTest('𝕽', ['R majuscule en gothique gras', 'R majuscule en gothique gras', 'R majuscule en gothique gras']);
  this.executeCharTest('𝕾', ['S majuscule en gothique gras', 'S majuscule en gothique gras', 'S majuscule en gothique gras']);
  this.executeCharTest('𝕿', ['T majuscule en gothique gras', 'T majuscule en gothique gras', 'T majuscule en gothique gras']);
  this.executeCharTest('𝖀', ['U majuscule en gothique gras', 'U majuscule en gothique gras', 'U majuscule en gothique gras']);
  this.executeCharTest('𝖁', ['V majuscule en gothique gras', 'V majuscule en gothique gras', 'V majuscule en gothique gras']);
  this.executeCharTest('𝖂', ['W majuscule en gothique gras', 'W majuscule en gothique gras', 'W majuscule en gothique gras']);
  this.executeCharTest('𝖃', ['X majuscule en gothique gras', 'X majuscule en gothique gras', 'X majuscule en gothique gras']);
  this.executeCharTest('𝖄', ['Y majuscule en gothique gras', 'Y majuscule en gothique gras', 'Y majuscule en gothique gras']);
  this.executeCharTest('𝖅', ['Z majuscule en gothique gras', 'Z majuscule en gothique gras', 'Z majuscule en gothique gras']);
  this.executeCharTest('𝖆', ['a en gothique gras', 'a en gothique gras', 'a en gothique gras']);
  this.executeCharTest('𝖇', ['b en gothique gras', 'b en gothique gras', 'b en gothique gras']);
  this.executeCharTest('𝖈', ['c en gothique gras', 'c en gothique gras', 'c en gothique gras']);
  this.executeCharTest('𝖉', ['d en gothique gras', 'd en gothique gras', 'd en gothique gras']);
  this.executeCharTest('𝖊', ['e en gothique gras', 'e en gothique gras', 'e en gothique gras']);
  this.executeCharTest('𝖋', ['f en gothique gras', 'f en gothique gras', 'f en gothique gras']);
  this.executeCharTest('𝖌', ['g en gothique gras', 'g en gothique gras', 'g en gothique gras']);
  this.executeCharTest('𝖍', ['h en gothique gras', 'h en gothique gras', 'h en gothique gras']);
  this.executeCharTest('𝖎', ['i en gothique gras', 'i en gothique gras', 'i en gothique gras']);
  this.executeCharTest('𝖏', ['j en gothique gras', 'j en gothique gras', 'j en gothique gras']);
  this.executeCharTest('𝖐', ['k en gothique gras', 'k en gothique gras', 'k en gothique gras']);
  this.executeCharTest('𝖑', ['l en gothique gras', 'l en gothique gras', 'l en gothique gras']);
  this.executeCharTest('𝖒', ['m en gothique gras', 'm en gothique gras', 'm en gothique gras']);
  this.executeCharTest('𝖓', ['n en gothique gras', 'n en gothique gras', 'n en gothique gras']);
  this.executeCharTest('𝖔', ['o en gothique gras', 'o en gothique gras', 'o en gothique gras']);
  this.executeCharTest('𝖕', ['p en gothique gras', 'p en gothique gras', 'p en gothique gras']);
  this.executeCharTest('𝖖', ['q en gothique gras', 'q en gothique gras', 'q en gothique gras']);
  this.executeCharTest('𝖗', ['r en gothique gras', 'r en gothique gras', 'r en gothique gras']);
  this.executeCharTest('𝖘', ['s en gothique gras', 's en gothique gras', 's en gothique gras']);
  this.executeCharTest('𝖙', ['t en gothique gras', 't en gothique gras', 't en gothique gras']);
  this.executeCharTest('𝖚', ['u en gothique gras', 'u en gothique gras', 'u en gothique gras']);
  this.executeCharTest('𝖛', ['v en gothique gras', 'v en gothique gras', 'v en gothique gras']);
  this.executeCharTest('𝖜', ['w en gothique gras', 'w en gothique gras', 'w en gothique gras']);
  this.executeCharTest('𝖝', ['x en gothique gras', 'x en gothique gras', 'x en gothique gras']);
  this.executeCharTest('𝖞', ['y en gothique gras', 'y en gothique gras', 'y en gothique gras']);
  this.executeCharTest('𝖟', ['z en gothique gras', 'z en gothique gras', 'z en gothique gras']);
  this.executeCharTest('𝑨', ['A majuscule en italique gras', 'A majuscule en italique gras', 'A majuscule en italique gras']);
  this.executeCharTest('𝑩', ['B majuscule en italique gras', 'B majuscule en italique gras', 'B majuscule en italique gras']);
  this.executeCharTest('𝑪', ['C majuscule en italique gras', 'C majuscule en italique gras', 'C majuscule en italique gras']);
  this.executeCharTest('𝑫', ['D majuscule en italique gras', 'D majuscule en italique gras', 'D majuscule en italique gras']);
  this.executeCharTest('𝑬', ['E majuscule en italique gras', 'E majuscule en italique gras', 'E majuscule en italique gras']);
  this.executeCharTest('𝑭', ['F majuscule en italique gras', 'F majuscule en italique gras', 'F majuscule en italique gras']);
  this.executeCharTest('𝑮', ['G majuscule en italique gras', 'G majuscule en italique gras', 'G majuscule en italique gras']);
  this.executeCharTest('𝑯', ['H majuscule en italique gras', 'H majuscule en italique gras', 'H majuscule en italique gras']);
  this.executeCharTest('𝑰', ['I majuscule en italique gras', 'I majuscule en italique gras', 'I majuscule en italique gras']);
  this.executeCharTest('𝑱', ['J majuscule en italique gras', 'J majuscule en italique gras', 'J majuscule en italique gras']);
  this.executeCharTest('𝑲', ['K majuscule en italique gras', 'K majuscule en italique gras', 'K majuscule en italique gras']);
  this.executeCharTest('𝑳', ['L majuscule en italique gras', 'L majuscule en italique gras', 'L majuscule en italique gras']);
  this.executeCharTest('𝑴', ['M majuscule en italique gras', 'M majuscule en italique gras', 'M majuscule en italique gras']);
  this.executeCharTest('𝑵', ['N majuscule en italique gras', 'N majuscule en italique gras', 'N majuscule en italique gras']);
  this.executeCharTest('𝑶', ['O majuscule en italique gras', 'O majuscule en italique gras', 'O majuscule en italique gras']);
  this.executeCharTest('𝑷', ['P majuscule en italique gras', 'P majuscule en italique gras', 'P majuscule en italique gras']);
  this.executeCharTest('𝑸', ['Q majuscule en italique gras', 'Q majuscule en italique gras', 'Q majuscule en italique gras']);
  this.executeCharTest('𝑹', ['R majuscule en italique gras', 'R majuscule en italique gras', 'R majuscule en italique gras']);
  this.executeCharTest('𝑺', ['S majuscule en italique gras', 'S majuscule en italique gras', 'S majuscule en italique gras']);
  this.executeCharTest('𝑻', ['T majuscule en italique gras', 'T majuscule en italique gras', 'T majuscule en italique gras']);
  this.executeCharTest('𝑼', ['U majuscule en italique gras', 'U majuscule en italique gras', 'U majuscule en italique gras']);
  this.executeCharTest('𝑽', ['V majuscule en italique gras', 'V majuscule en italique gras', 'V majuscule en italique gras']);
  this.executeCharTest('𝑾', ['W majuscule en italique gras', 'W majuscule en italique gras', 'W majuscule en italique gras']);
  this.executeCharTest('𝑿', ['X majuscule en italique gras', 'X majuscule en italique gras', 'X majuscule en italique gras']);
  this.executeCharTest('𝒀', ['Y majuscule en italique gras', 'Y majuscule en italique gras', 'Y majuscule en italique gras']);
  this.executeCharTest('𝒁', ['Z majuscule en italique gras', 'Z majuscule en italique gras', 'Z majuscule en italique gras']);
  this.executeCharTest('𝒂', ['a en italique gras', 'a en italique gras', 'a en italique gras']);
  this.executeCharTest('𝒃', ['b en italique gras', 'b en italique gras', 'b en italique gras']);
  this.executeCharTest('𝒄', ['c en italique gras', 'c en italique gras', 'c en italique gras']);
  this.executeCharTest('𝒅', ['d en italique gras', 'd en italique gras', 'd en italique gras']);
  this.executeCharTest('𝒆', ['e en italique gras', 'e en italique gras', 'e en italique gras']);
  this.executeCharTest('𝒇', ['f en italique gras', 'f en italique gras', 'f en italique gras']);
  this.executeCharTest('𝒈', ['g en italique gras', 'g en italique gras', 'g en italique gras']);
  this.executeCharTest('𝒉', ['h en italique gras', 'h en italique gras', 'h en italique gras']);
  this.executeCharTest('𝒊', ['i en italique gras', 'i en italique gras', 'i en italique gras']);
  this.executeCharTest('𝒋', ['j en italique gras', 'j en italique gras', 'j en italique gras']);
  this.executeCharTest('𝒌', ['k en italique gras', 'k en italique gras', 'k en italique gras']);
  this.executeCharTest('𝒍', ['l en italique gras', 'l en italique gras', 'l en italique gras']);
  this.executeCharTest('𝒎', ['m en italique gras', 'm en italique gras', 'm en italique gras']);
  this.executeCharTest('𝒏', ['n en italique gras', 'n en italique gras', 'n en italique gras']);
  this.executeCharTest('𝒐', ['o en italique gras', 'o en italique gras', 'o en italique gras']);
  this.executeCharTest('𝒑', ['p en italique gras', 'p en italique gras', 'p en italique gras']);
  this.executeCharTest('𝒒', ['q en italique gras', 'q en italique gras', 'q en italique gras']);
  this.executeCharTest('𝒓', ['r en italique gras', 'r en italique gras', 'r en italique gras']);
  this.executeCharTest('𝒔', ['s en italique gras', 's en italique gras', 's en italique gras']);
  this.executeCharTest('𝒕', ['t en italique gras', 't en italique gras', 't en italique gras']);
  this.executeCharTest('𝒖', ['u en italique gras', 'u en italique gras', 'u en italique gras']);
  this.executeCharTest('𝒗', ['v en italique gras', 'v en italique gras', 'v en italique gras']);
  this.executeCharTest('𝒘', ['w en italique gras', 'w en italique gras', 'w en italique gras']);
  this.executeCharTest('𝒙', ['x en italique gras', 'x en italique gras', 'x en italique gras']);
  this.executeCharTest('𝒚', ['y en italique gras', 'y en italique gras', 'y en italique gras']);
  this.executeCharTest('𝒛', ['z en italique gras', 'z en italique gras', 'z en italique gras']);
  this.executeCharTest('𝓐', ['A majuscule de ronde en gras', 'A majuscule de ronde en gras', 'A majuscule de ronde en gras']);
  this.executeCharTest('𝓑', ['B majuscule de ronde en gras', 'B majuscule de ronde en gras', 'B majuscule de ronde en gras']);
  this.executeCharTest('𝓒', ['C majuscule de ronde en gras', 'C majuscule de ronde en gras', 'C majuscule de ronde en gras']);
  this.executeCharTest('𝓓', ['D majuscule de ronde en gras', 'D majuscule de ronde en gras', 'D majuscule de ronde en gras']);
  this.executeCharTest('𝓔', ['E majuscule de ronde en gras', 'E majuscule de ronde en gras', 'E majuscule de ronde en gras']);
  this.executeCharTest('𝓕', ['F majuscule de ronde en gras', 'F majuscule de ronde en gras', 'F majuscule de ronde en gras']);
  this.executeCharTest('𝓖', ['G majuscule de ronde en gras', 'G majuscule de ronde en gras', 'G majuscule de ronde en gras']);
  this.executeCharTest('𝓗', ['H majuscule de ronde en gras', 'H majuscule de ronde en gras', 'H majuscule de ronde en gras']);
  this.executeCharTest('𝓘', ['I majuscule de ronde en gras', 'I majuscule de ronde en gras', 'I majuscule de ronde en gras']);
  this.executeCharTest('𝓙', ['J majuscule de ronde en gras', 'J majuscule de ronde en gras', 'J majuscule de ronde en gras']);
  this.executeCharTest('𝓚', ['K majuscule de ronde en gras', 'K majuscule de ronde en gras', 'K majuscule de ronde en gras']);
  this.executeCharTest('𝓛', ['L majuscule de ronde en gras', 'L majuscule de ronde en gras', 'L majuscule de ronde en gras']);
  this.executeCharTest('𝓜', ['M majuscule de ronde en gras', 'M majuscule de ronde en gras', 'M majuscule de ronde en gras']);
  this.executeCharTest('𝓝', ['N majuscule de ronde en gras', 'N majuscule de ronde en gras', 'N majuscule de ronde en gras']);
  this.executeCharTest('𝓞', ['O majuscule de ronde en gras', 'O majuscule de ronde en gras', 'O majuscule de ronde en gras']);
  this.executeCharTest('𝓟', ['P majuscule de ronde en gras', 'P majuscule de ronde en gras', 'P majuscule de ronde en gras']);
  this.executeCharTest('𝓠', ['Q majuscule de ronde en gras', 'Q majuscule de ronde en gras', 'Q majuscule de ronde en gras']);
  this.executeCharTest('𝓡', ['R majuscule de ronde en gras', 'R majuscule de ronde en gras', 'R majuscule de ronde en gras']);
  this.executeCharTest('𝓢', ['S majuscule de ronde en gras', 'S majuscule de ronde en gras', 'S majuscule de ronde en gras']);
  this.executeCharTest('𝓣', ['T majuscule de ronde en gras', 'T majuscule de ronde en gras', 'T majuscule de ronde en gras']);
  this.executeCharTest('𝓤', ['U majuscule de ronde en gras', 'U majuscule de ronde en gras', 'U majuscule de ronde en gras']);
  this.executeCharTest('𝓥', ['V majuscule de ronde en gras', 'V majuscule de ronde en gras', 'V majuscule de ronde en gras']);
  this.executeCharTest('𝓦', ['W majuscule de ronde en gras', 'W majuscule de ronde en gras', 'W majuscule de ronde en gras']);
  this.executeCharTest('𝓧', ['X majuscule de ronde en gras', 'X majuscule de ronde en gras', 'X majuscule de ronde en gras']);
  this.executeCharTest('𝓨', ['Y majuscule de ronde en gras', 'Y majuscule de ronde en gras', 'Y majuscule de ronde en gras']);
  this.executeCharTest('𝓩', ['Z majuscule de ronde en gras', 'Z majuscule de ronde en gras', 'Z majuscule de ronde en gras']);
  this.executeCharTest('𝓪', ['a de ronde en gras', 'a de ronde en gras', 'a de ronde en gras']);
  this.executeCharTest('𝓫', ['b de ronde en gras', 'b de ronde en gras', 'b de ronde en gras']);
  this.executeCharTest('𝓬', ['c de ronde en gras', 'c de ronde en gras', 'c de ronde en gras']);
  this.executeCharTest('𝓭', ['d de ronde en gras', 'd de ronde en gras', 'd de ronde en gras']);
  this.executeCharTest('𝓮', ['e de ronde en gras', 'e de ronde en gras', 'e de ronde en gras']);
  this.executeCharTest('𝓯', ['f de ronde en gras', 'f de ronde en gras', 'f de ronde en gras']);
  this.executeCharTest('𝓰', ['g de ronde en gras', 'g de ronde en gras', 'g de ronde en gras']);
  this.executeCharTest('𝓱', ['h de ronde en gras', 'h de ronde en gras', 'h de ronde en gras']);
  this.executeCharTest('𝓲', ['i de ronde en gras', 'i de ronde en gras', 'i de ronde en gras']);
  this.executeCharTest('𝓳', ['j de ronde en gras', 'j de ronde en gras', 'j de ronde en gras']);
  this.executeCharTest('𝓴', ['k de ronde en gras', 'k de ronde en gras', 'k de ronde en gras']);
  this.executeCharTest('𝓵', ['l de ronde en gras', 'l de ronde en gras', 'l de ronde en gras']);
  this.executeCharTest('𝓶', ['m de ronde en gras', 'm de ronde en gras', 'm de ronde en gras']);
  this.executeCharTest('𝓷', ['n de ronde en gras', 'n de ronde en gras', 'n de ronde en gras']);
  this.executeCharTest('𝓸', ['o de ronde en gras', 'o de ronde en gras', 'o de ronde en gras']);
  this.executeCharTest('𝓹', ['p de ronde en gras', 'p de ronde en gras', 'p de ronde en gras']);
  this.executeCharTest('𝓺', ['q de ronde en gras', 'q de ronde en gras', 'q de ronde en gras']);
  this.executeCharTest('𝓻', ['r de ronde en gras', 'r de ronde en gras', 'r de ronde en gras']);
  this.executeCharTest('𝓼', ['s de ronde en gras', 's de ronde en gras', 's de ronde en gras']);
  this.executeCharTest('𝓽', ['t de ronde en gras', 't de ronde en gras', 't de ronde en gras']);
  this.executeCharTest('𝓾', ['u de ronde en gras', 'u de ronde en gras', 'u de ronde en gras']);
  this.executeCharTest('𝓿', ['v de ronde en gras', 'v de ronde en gras', 'v de ronde en gras']);
  this.executeCharTest('𝔀', ['w de ronde en gras', 'w de ronde en gras', 'w de ronde en gras']);
  this.executeCharTest('𝔁', ['x de ronde en gras', 'x de ronde en gras', 'x de ronde en gras']);
  this.executeCharTest('𝔂', ['y de ronde en gras', 'y de ronde en gras', 'y de ronde en gras']);
  this.executeCharTest('𝔃', ['z de ronde en gras', 'z de ronde en gras', 'z de ronde en gras']);
  this.executeCharTest('𝔸', ['A majuscule ajouré', 'A majuscule ajouré', 'A majuscule ajouré']);
  this.executeCharTest('𝔹', ['B majuscule ajouré', 'B majuscule ajouré', 'B majuscule ajouré']);
  this.executeCharTest('ℂ', ['C majuscule ajouré', 'C majuscule ajouré', 'C majuscule ajouré']);
  this.executeCharTest('𝔻', ['D majuscule ajouré', 'D majuscule ajouré', 'D majuscule ajouré']);
  this.executeCharTest('𝔼', ['E majuscule ajouré', 'E majuscule ajouré', 'E majuscule ajouré']);
  this.executeCharTest('𝔽', ['F majuscule ajouré', 'F majuscule ajouré', 'F majuscule ajouré']);
  this.executeCharTest('𝔾', ['G majuscule ajouré', 'G majuscule ajouré', 'G majuscule ajouré']);
  this.executeCharTest('ℍ', ['H majuscule ajouré', 'H majuscule ajouré', 'H majuscule ajouré']);
  this.executeCharTest('𝕀', ['I majuscule ajouré', 'I majuscule ajouré', 'I majuscule ajouré']);
  this.executeCharTest('𝕁', ['J majuscule ajouré', 'J majuscule ajouré', 'J majuscule ajouré']);
  this.executeCharTest('𝕂', ['K majuscule ajouré', 'K majuscule ajouré', 'K majuscule ajouré']);
  this.executeCharTest('𝕃', ['L majuscule ajouré', 'L majuscule ajouré', 'L majuscule ajouré']);
  this.executeCharTest('𝕄', ['M majuscule ajouré', 'M majuscule ajouré', 'M majuscule ajouré']);
  this.executeCharTest('ℕ', ['N majuscule ajouré', 'N majuscule ajouré', 'N majuscule ajouré']);
  this.executeCharTest('𝕆', ['O majuscule ajouré', 'O majuscule ajouré', 'O majuscule ajouré']);
  this.executeCharTest('ℙ', ['P majuscule ajouré', 'P majuscule ajouré', 'P majuscule ajouré']);
  this.executeCharTest('ℚ', ['Q majuscule ajouré', 'Q majuscule ajouré', 'Q majuscule ajouré']);
  this.executeCharTest('ℝ', ['R majuscule ajouré', 'R majuscule ajouré', 'R majuscule ajouré']);
  this.executeCharTest('𝕊', ['S majuscule ajouré', 'S majuscule ajouré', 'S majuscule ajouré']);
  this.executeCharTest('𝕋', ['T majuscule ajouré', 'T majuscule ajouré', 'T majuscule ajouré']);
  this.executeCharTest('𝕌', ['U majuscule ajouré', 'U majuscule ajouré', 'U majuscule ajouré']);
  this.executeCharTest('𝕍', ['V majuscule ajouré', 'V majuscule ajouré', 'V majuscule ajouré']);
  this.executeCharTest('𝕎', ['W majuscule ajouré', 'W majuscule ajouré', 'W majuscule ajouré']);
  this.executeCharTest('𝕏', ['X majuscule ajouré', 'X majuscule ajouré', 'X majuscule ajouré']);
  this.executeCharTest('𝕐', ['Y majuscule ajouré', 'Y majuscule ajouré', 'Y majuscule ajouré']);
  this.executeCharTest('ℤ', ['Z majuscule ajouré', 'Z majuscule ajouré', 'Z majuscule ajouré']);
  this.executeCharTest('𝕒', ['a ajouré', 'a ajouré', 'a ajouré']);
  this.executeCharTest('𝕓', ['b ajouré', 'b ajouré', 'b ajouré']);
  this.executeCharTest('𝕔', ['c ajouré', 'c ajouré', 'c ajouré']);
  this.executeCharTest('𝕕', ['d ajouré', 'd ajouré', 'd ajouré']);
  this.executeCharTest('𝕖', ['e ajouré', 'e ajouré', 'e ajouré']);
  this.executeCharTest('𝕗', ['f ajouré', 'f ajouré', 'f ajouré']);
  this.executeCharTest('𝕘', ['g ajouré', 'g ajouré', 'g ajouré']);
  this.executeCharTest('𝕙', ['h ajouré', 'h ajouré', 'h ajouré']);
  this.executeCharTest('𝕚', ['i ajouré', 'i ajouré', 'i ajouré']);
  this.executeCharTest('𝕛', ['j ajouré', 'j ajouré', 'j ajouré']);
  this.executeCharTest('𝕜', ['k ajouré', 'k ajouré', 'k ajouré']);
  this.executeCharTest('𝕝', ['l ajouré', 'l ajouré', 'l ajouré']);
  this.executeCharTest('𝕞', ['m ajouré', 'm ajouré', 'm ajouré']);
  this.executeCharTest('𝕟', ['n ajouré', 'n ajouré', 'n ajouré']);
  this.executeCharTest('𝕠', ['o ajouré', 'o ajouré', 'o ajouré']);
  this.executeCharTest('𝕡', ['p ajouré', 'p ajouré', 'p ajouré']);
  this.executeCharTest('𝕢', ['q ajouré', 'q ajouré', 'q ajouré']);
  this.executeCharTest('𝕣', ['r ajouré', 'r ajouré', 'r ajouré']);
  this.executeCharTest('𝕤', ['s ajouré', 's ajouré', 's ajouré']);
  this.executeCharTest('𝕥', ['t ajouré', 't ajouré', 't ajouré']);
  this.executeCharTest('𝕦', ['u ajouré', 'u ajouré', 'u ajouré']);
  this.executeCharTest('𝕧', ['v ajouré', 'v ajouré', 'v ajouré']);
  this.executeCharTest('𝕨', ['w ajouré', 'w ajouré', 'w ajouré']);
  this.executeCharTest('𝕩', ['x ajouré', 'x ajouré', 'x ajouré']);
  this.executeCharTest('𝕪', ['y ajouré', 'y ajouré', 'y ajouré']);
  this.executeCharTest('𝕫', ['z ajouré', 'z ajouré', 'z ajouré']);
  this.executeCharTest('𝔄', ['A majuscule en gothique', 'A majuscule en gothique', 'A majuscule en gothique']);
  this.executeCharTest('𝔅', ['B majuscule en gothique', 'B majuscule en gothique', 'B majuscule en gothique']);
  this.executeCharTest('ℭ', ['C majuscule en gothique', 'C majuscule en gothique', 'C majuscule en gothique']);
  this.executeCharTest('𝔇', ['D majuscule en gothique', 'D majuscule en gothique', 'D majuscule en gothique']);
  this.executeCharTest('𝔈', ['E majuscule en gothique', 'E majuscule en gothique', 'E majuscule en gothique']);
  this.executeCharTest('𝔉', ['F majuscule en gothique', 'F majuscule en gothique', 'F majuscule en gothique']);
  this.executeCharTest('𝔊', ['G majuscule en gothique', 'G majuscule en gothique', 'G majuscule en gothique']);
  this.executeCharTest('ℌ', ['H majuscule en gothique', 'H majuscule en gothique', 'H majuscule en gothique']);
  this.executeCharTest('ℑ', ['I majuscule en gothique', 'I majuscule en gothique', 'I majuscule en gothique']);
  this.executeCharTest('𝔍', ['J majuscule en gothique', 'J majuscule en gothique', 'J majuscule en gothique']);
  this.executeCharTest('𝔎', ['K majuscule en gothique', 'K majuscule en gothique', 'K majuscule en gothique']);
  this.executeCharTest('𝔏', ['L majuscule en gothique', 'L majuscule en gothique', 'L majuscule en gothique']);
  this.executeCharTest('𝔐', ['M majuscule en gothique', 'M majuscule en gothique', 'M majuscule en gothique']);
  this.executeCharTest('𝔑', ['N majuscule en gothique', 'N majuscule en gothique', 'N majuscule en gothique']);
  this.executeCharTest('𝔒', ['O majuscule en gothique', 'O majuscule en gothique', 'O majuscule en gothique']);
  this.executeCharTest('𝔓', ['P majuscule en gothique', 'P majuscule en gothique', 'P majuscule en gothique']);
  this.executeCharTest('𝔔', ['Q majuscule en gothique', 'Q majuscule en gothique', 'Q majuscule en gothique']);
  this.executeCharTest('ℜ', ['R majuscule en gothique', 'R majuscule en gothique', 'R majuscule en gothique']);
  this.executeCharTest('𝔖', ['S majuscule en gothique', 'S majuscule en gothique', 'S majuscule en gothique']);
  this.executeCharTest('𝔗', ['T majuscule en gothique', 'T majuscule en gothique', 'T majuscule en gothique']);
  this.executeCharTest('𝔘', ['U majuscule en gothique', 'U majuscule en gothique', 'U majuscule en gothique']);
  this.executeCharTest('𝔙', ['V majuscule en gothique', 'V majuscule en gothique', 'V majuscule en gothique']);
  this.executeCharTest('𝔚', ['W majuscule en gothique', 'W majuscule en gothique', 'W majuscule en gothique']);
  this.executeCharTest('𝔛', ['X majuscule en gothique', 'X majuscule en gothique', 'X majuscule en gothique']);
  this.executeCharTest('𝔜', ['Y majuscule en gothique', 'Y majuscule en gothique', 'Y majuscule en gothique']);
  this.executeCharTest('ℨ', ['Z majuscule en gothique', 'Z majuscule en gothique', 'Z majuscule en gothique']);
  this.executeCharTest('𝔞', ['a en gothique', 'a en gothique', 'a en gothique']);
  this.executeCharTest('𝔟', ['b en gothique', 'b en gothique', 'b en gothique']);
  this.executeCharTest('𝔠', ['c en gothique', 'c en gothique', 'c en gothique']);
  this.executeCharTest('𝔡', ['d en gothique', 'd en gothique', 'd en gothique']);
  this.executeCharTest('𝔢', ['e en gothique', 'e en gothique', 'e en gothique']);
  this.executeCharTest('𝔣', ['f en gothique', 'f en gothique', 'f en gothique']);
  this.executeCharTest('𝔤', ['g en gothique', 'g en gothique', 'g en gothique']);
  this.executeCharTest('𝔥', ['h en gothique', 'h en gothique', 'h en gothique']);
  this.executeCharTest('𝔦', ['i en gothique', 'i en gothique', 'i en gothique']);
  this.executeCharTest('𝔧', ['j en gothique', 'j en gothique', 'j en gothique']);
  this.executeCharTest('𝔨', ['k en gothique', 'k en gothique', 'k en gothique']);
  this.executeCharTest('𝔩', ['l en gothique', 'l en gothique', 'l en gothique']);
  this.executeCharTest('𝔪', ['m en gothique', 'm en gothique', 'm en gothique']);
  this.executeCharTest('𝔫', ['n en gothique', 'n en gothique', 'n en gothique']);
  this.executeCharTest('𝔬', ['o en gothique', 'o en gothique', 'o en gothique']);
  this.executeCharTest('𝔭', ['p en gothique', 'p en gothique', 'p en gothique']);
  this.executeCharTest('𝔮', ['q en gothique', 'q en gothique', 'q en gothique']);
  this.executeCharTest('𝔯', ['r en gothique', 'r en gothique', 'r en gothique']);
  this.executeCharTest('𝔰', ['s en gothique', 's en gothique', 's en gothique']);
  this.executeCharTest('𝔱', ['t en gothique', 't en gothique', 't en gothique']);
  this.executeCharTest('𝔲', ['u en gothique', 'u en gothique', 'u en gothique']);
  this.executeCharTest('𝔳', ['v en gothique', 'v en gothique', 'v en gothique']);
  this.executeCharTest('𝔴', ['w en gothique', 'w en gothique', 'w en gothique']);
  this.executeCharTest('𝔵', ['x en gothique', 'x en gothique', 'x en gothique']);
  this.executeCharTest('𝔶', ['y en gothique', 'y en gothique', 'y en gothique']);
  this.executeCharTest('𝔷', ['z en gothique', 'z en gothique', 'z en gothique']);
  this.executeCharTest('Ａ', ['A majuscule', 'A majuscule', 'A majuscule']);
  this.executeCharTest('Ｂ', ['B majuscule', 'B majuscule', 'B majuscule']);
  this.executeCharTest('Ｃ', ['C majuscule', 'C majuscule', 'C majuscule']);
  this.executeCharTest('Ｄ', ['D majuscule', 'D majuscule', 'D majuscule']);
  this.executeCharTest('Ｅ', ['E majuscule', 'E majuscule', 'E majuscule']);
  this.executeCharTest('Ｆ', ['F majuscule', 'F majuscule', 'F majuscule']);
  this.executeCharTest('Ｇ', ['G majuscule', 'G majuscule', 'G majuscule']);
  this.executeCharTest('Ｈ', ['H majuscule', 'H majuscule', 'H majuscule']);
  this.executeCharTest('Ｉ', ['I majuscule', 'I majuscule', 'I majuscule']);
  this.executeCharTest('Ｊ', ['J majuscule', 'J majuscule', 'J majuscule']);
  this.executeCharTest('Ｋ', ['K majuscule', 'K majuscule', 'K majuscule']);
  this.executeCharTest('Ｌ', ['L majuscule', 'L majuscule', 'L majuscule']);
  this.executeCharTest('Ｍ', ['M majuscule', 'M majuscule', 'M majuscule']);
  this.executeCharTest('Ｎ', ['N majuscule', 'N majuscule', 'N majuscule']);
  this.executeCharTest('Ｏ', ['O majuscule', 'O majuscule', 'O majuscule']);
  this.executeCharTest('Ｐ', ['P majuscule', 'P majuscule', 'P majuscule']);
  this.executeCharTest('Ｑ', ['Q majuscule', 'Q majuscule', 'Q majuscule']);
  this.executeCharTest('Ｒ', ['R majuscule', 'R majuscule', 'R majuscule']);
  this.executeCharTest('Ｓ', ['S majuscule', 'S majuscule', 'S majuscule']);
  this.executeCharTest('Ｔ', ['T majuscule', 'T majuscule', 'T majuscule']);
  this.executeCharTest('Ｕ', ['U majuscule', 'U majuscule', 'U majuscule']);
  this.executeCharTest('Ｖ', ['V majuscule', 'V majuscule', 'V majuscule']);
  this.executeCharTest('Ｗ', ['W majuscule', 'W majuscule', 'W majuscule']);
  this.executeCharTest('Ｘ', ['X majuscule', 'X majuscule', 'X majuscule']);
  this.executeCharTest('Ｙ', ['Y majuscule', 'Y majuscule', 'Y majuscule']);
  this.executeCharTest('Ｚ', ['Z majuscule', 'Z majuscule', 'Z majuscule']);
  this.executeCharTest('ａ', ['a', 'a', 'a']);
  this.executeCharTest('ｂ', ['b', 'b', 'b']);
  this.executeCharTest('ｃ', ['c', 'c', 'c']);
  this.executeCharTest('ｄ', ['d', 'd', 'd']);
  this.executeCharTest('ｅ', ['e', 'e', 'e']);
  this.executeCharTest('ｆ', ['f', 'f', 'f']);
  this.executeCharTest('ｇ', ['g', 'g', 'g']);
  this.executeCharTest('ｈ', ['h', 'h', 'h']);
  this.executeCharTest('ｉ', ['i', 'i', 'i']);
  this.executeCharTest('ｊ', ['j', 'j', 'j']);
  this.executeCharTest('ｋ', ['k', 'k', 'k']);
  this.executeCharTest('ｌ', ['l', 'l', 'l']);
  this.executeCharTest('ｍ', ['m', 'm', 'm']);
  this.executeCharTest('ｎ', ['n', 'n', 'n']);
  this.executeCharTest('ｏ', ['o', 'o', 'o']);
  this.executeCharTest('ｐ', ['p', 'p', 'p']);
  this.executeCharTest('ｑ', ['q', 'q', 'q']);
  this.executeCharTest('ｒ', ['r', 'r', 'r']);
  this.executeCharTest('ｓ', ['s', 's', 's']);
  this.executeCharTest('ｔ', ['t', 't', 't']);
  this.executeCharTest('ｕ', ['u', 'u', 'u']);
  this.executeCharTest('ｖ', ['v', 'v', 'v']);
  this.executeCharTest('ｗ', ['w', 'w', 'w']);
  this.executeCharTest('ｘ', ['x', 'x', 'x']);
  this.executeCharTest('ｙ', ['y', 'y', 'y']);
  this.executeCharTest('ｚ', ['z', 'z', 'z']);
  this.executeCharTest('𝐴', ['A majuscule en italique', 'A majuscule en italique', 'A majuscule en italique']);
  this.executeCharTest('𝐵', ['B majuscule en italique', 'B majuscule en italique', 'B majuscule en italique']);
  this.executeCharTest('𝐶', ['C majuscule en italique', 'C majuscule en italique', 'C majuscule en italique']);
  this.executeCharTest('𝐷', ['D majuscule en italique', 'D majuscule en italique', 'D majuscule en italique']);
  this.executeCharTest('𝐸', ['E majuscule en italique', 'E majuscule en italique', 'E majuscule en italique']);
  this.executeCharTest('𝐹', ['F majuscule en italique', 'F majuscule en italique', 'F majuscule en italique']);
  this.executeCharTest('𝐺', ['G majuscule en italique', 'G majuscule en italique', 'G majuscule en italique']);
  this.executeCharTest('𝐻', ['H majuscule en italique', 'H majuscule en italique', 'H majuscule en italique']);
  this.executeCharTest('𝐼', ['I majuscule en italique', 'I majuscule en italique', 'I majuscule en italique']);
  this.executeCharTest('𝐽', ['J majuscule en italique', 'J majuscule en italique', 'J majuscule en italique']);
  this.executeCharTest('𝐾', ['K majuscule en italique', 'K majuscule en italique', 'K majuscule en italique']);
  this.executeCharTest('𝐿', ['L majuscule en italique', 'L majuscule en italique', 'L majuscule en italique']);
  this.executeCharTest('𝑀', ['M majuscule en italique', 'M majuscule en italique', 'M majuscule en italique']);
  this.executeCharTest('𝑁', ['N majuscule en italique', 'N majuscule en italique', 'N majuscule en italique']);
  this.executeCharTest('𝑂', ['O majuscule en italique', 'O majuscule en italique', 'O majuscule en italique']);
  this.executeCharTest('𝑃', ['P majuscule en italique', 'P majuscule en italique', 'P majuscule en italique']);
  this.executeCharTest('𝑄', ['Q majuscule en italique', 'Q majuscule en italique', 'Q majuscule en italique']);
  this.executeCharTest('𝑅', ['R majuscule en italique', 'R majuscule en italique', 'R majuscule en italique']);
  this.executeCharTest('𝑆', ['S majuscule en italique', 'S majuscule en italique', 'S majuscule en italique']);
  this.executeCharTest('𝑇', ['T majuscule en italique', 'T majuscule en italique', 'T majuscule en italique']);
  this.executeCharTest('𝑈', ['U majuscule en italique', 'U majuscule en italique', 'U majuscule en italique']);
  this.executeCharTest('𝑉', ['V majuscule en italique', 'V majuscule en italique', 'V majuscule en italique']);
  this.executeCharTest('𝑊', ['W majuscule en italique', 'W majuscule en italique', 'W majuscule en italique']);
  this.executeCharTest('𝑋', ['X majuscule en italique', 'X majuscule en italique', 'X majuscule en italique']);
  this.executeCharTest('𝑌', ['Y majuscule en italique', 'Y majuscule en italique', 'Y majuscule en italique']);
  this.executeCharTest('𝑍', ['Z majuscule en italique', 'Z majuscule en italique', 'Z majuscule en italique']);
  this.executeCharTest('𝑎', ['a en italique', 'a en italique', 'a en italique']);
  this.executeCharTest('𝑏', ['b en italique', 'b en italique', 'b en italique']);
  this.executeCharTest('𝑐', ['c en italique', 'c en italique', 'c en italique']);
  this.executeCharTest('𝑑', ['d en italique', 'd en italique', 'd en italique']);
  this.executeCharTest('𝑒', ['e en italique', 'e en italique', 'e en italique']);
  this.executeCharTest('𝑓', ['f en italique', 'f en italique', 'f en italique']);
  this.executeCharTest('𝑔', ['g en italique', 'g en italique', 'g en italique']);
  this.executeCharTest('ℎ', ['constante de planck', 'constante de planck', 'constante de planck']);
  this.executeCharTest('𝑖', ['i en italique', 'i en italique', 'i en italique']);
  this.executeCharTest('𝑗', ['j en italique', 'j en italique', 'j en italique']);
  this.executeCharTest('𝑘', ['k en italique', 'k en italique', 'k en italique']);
  this.executeCharTest('𝑙', ['l en italique', 'l en italique', 'l en italique']);
  this.executeCharTest('𝑚', ['m en italique', 'm en italique', 'm en italique']);
  this.executeCharTest('𝑛', ['n en italique', 'n en italique', 'n en italique']);
  this.executeCharTest('𝑜', ['o en italique', 'o en italique', 'o en italique']);
  this.executeCharTest('𝑝', ['p en italique', 'p en italique', 'p en italique']);
  this.executeCharTest('𝑞', ['q en italique', 'q en italique', 'q en italique']);
  this.executeCharTest('𝑟', ['r en italique', 'r en italique', 'r en italique']);
  this.executeCharTest('𝑠', ['s en italique', 's en italique', 's en italique']);
  this.executeCharTest('𝑡', ['t en italique', 't en italique', 't en italique']);
  this.executeCharTest('𝑢', ['u en italique', 'u en italique', 'u en italique']);
  this.executeCharTest('𝑣', ['v en italique', 'v en italique', 'v en italique']);
  this.executeCharTest('𝑤', ['w en italique', 'w en italique', 'w en italique']);
  this.executeCharTest('𝑥', ['x en italique', 'x en italique', 'x en italique']);
  this.executeCharTest('𝑦', ['y en italique', 'y en italique', 'y en italique']);
  this.executeCharTest('𝑧', ['z en italique', 'z en italique', 'z en italique']);
  this.executeCharTest('𝙰', ['A majuscule en chasse fixe', 'A majuscule en chasse fixe', 'A majuscule en chasse fixe']);
  this.executeCharTest('𝙱', ['B majuscule en chasse fixe', 'B majuscule en chasse fixe', 'B majuscule en chasse fixe']);
  this.executeCharTest('𝙲', ['C majuscule en chasse fixe', 'C majuscule en chasse fixe', 'C majuscule en chasse fixe']);
  this.executeCharTest('𝙳', ['D majuscule en chasse fixe', 'D majuscule en chasse fixe', 'D majuscule en chasse fixe']);
  this.executeCharTest('𝙴', ['E majuscule en chasse fixe', 'E majuscule en chasse fixe', 'E majuscule en chasse fixe']);
  this.executeCharTest('𝙵', ['F majuscule en chasse fixe', 'F majuscule en chasse fixe', 'F majuscule en chasse fixe']);
  this.executeCharTest('𝙶', ['G majuscule en chasse fixe', 'G majuscule en chasse fixe', 'G majuscule en chasse fixe']);
  this.executeCharTest('𝙷', ['H majuscule en chasse fixe', 'H majuscule en chasse fixe', 'H majuscule en chasse fixe']);
  this.executeCharTest('𝙸', ['I majuscule en chasse fixe', 'I majuscule en chasse fixe', 'I majuscule en chasse fixe']);
  this.executeCharTest('𝙹', ['J majuscule en chasse fixe', 'J majuscule en chasse fixe', 'J majuscule en chasse fixe']);
  this.executeCharTest('𝙺', ['K majuscule en chasse fixe', 'K majuscule en chasse fixe', 'K majuscule en chasse fixe']);
  this.executeCharTest('𝙻', ['L majuscule en chasse fixe', 'L majuscule en chasse fixe', 'L majuscule en chasse fixe']);
  this.executeCharTest('𝙼', ['M majuscule en chasse fixe', 'M majuscule en chasse fixe', 'M majuscule en chasse fixe']);
  this.executeCharTest('𝙽', ['N majuscule en chasse fixe', 'N majuscule en chasse fixe', 'N majuscule en chasse fixe']);
  this.executeCharTest('𝙾', ['O majuscule en chasse fixe', 'O majuscule en chasse fixe', 'O majuscule en chasse fixe']);
  this.executeCharTest('𝙿', ['P majuscule en chasse fixe', 'P majuscule en chasse fixe', 'P majuscule en chasse fixe']);
  this.executeCharTest('𝚀', ['Q majuscule en chasse fixe', 'Q majuscule en chasse fixe', 'Q majuscule en chasse fixe']);
  this.executeCharTest('𝚁', ['R majuscule en chasse fixe', 'R majuscule en chasse fixe', 'R majuscule en chasse fixe']);
  this.executeCharTest('𝚂', ['S majuscule en chasse fixe', 'S majuscule en chasse fixe', 'S majuscule en chasse fixe']);
  this.executeCharTest('𝚃', ['T majuscule en chasse fixe', 'T majuscule en chasse fixe', 'T majuscule en chasse fixe']);
  this.executeCharTest('𝚄', ['U majuscule en chasse fixe', 'U majuscule en chasse fixe', 'U majuscule en chasse fixe']);
  this.executeCharTest('𝚅', ['V majuscule en chasse fixe', 'V majuscule en chasse fixe', 'V majuscule en chasse fixe']);
  this.executeCharTest('𝚆', ['W majuscule en chasse fixe', 'W majuscule en chasse fixe', 'W majuscule en chasse fixe']);
  this.executeCharTest('𝚇', ['X majuscule en chasse fixe', 'X majuscule en chasse fixe', 'X majuscule en chasse fixe']);
  this.executeCharTest('𝚈', ['Y majuscule en chasse fixe', 'Y majuscule en chasse fixe', 'Y majuscule en chasse fixe']);
  this.executeCharTest('𝚉', ['Z majuscule en chasse fixe', 'Z majuscule en chasse fixe', 'Z majuscule en chasse fixe']);
  this.executeCharTest('𝚊', ['a en chasse fixe', 'a en chasse fixe', 'a en chasse fixe']);
  this.executeCharTest('𝚋', ['b en chasse fixe', 'b en chasse fixe', 'b en chasse fixe']);
  this.executeCharTest('𝚌', ['c en chasse fixe', 'c en chasse fixe', 'c en chasse fixe']);
  this.executeCharTest('𝚍', ['d en chasse fixe', 'd en chasse fixe', 'd en chasse fixe']);
  this.executeCharTest('𝚎', ['e en chasse fixe', 'e en chasse fixe', 'e en chasse fixe']);
  this.executeCharTest('𝚏', ['f en chasse fixe', 'f en chasse fixe', 'f en chasse fixe']);
  this.executeCharTest('𝚐', ['g en chasse fixe', 'g en chasse fixe', 'g en chasse fixe']);
  this.executeCharTest('𝚑', ['h en chasse fixe', 'h en chasse fixe', 'h en chasse fixe']);
  this.executeCharTest('𝚒', ['i en chasse fixe', 'i en chasse fixe', 'i en chasse fixe']);
  this.executeCharTest('𝚓', ['j en chasse fixe', 'j en chasse fixe', 'j en chasse fixe']);
  this.executeCharTest('𝚔', ['k en chasse fixe', 'k en chasse fixe', 'k en chasse fixe']);
  this.executeCharTest('𝚕', ['l en chasse fixe', 'l en chasse fixe', 'l en chasse fixe']);
  this.executeCharTest('𝚖', ['m en chasse fixe', 'm en chasse fixe', 'm en chasse fixe']);
  this.executeCharTest('𝚗', ['n en chasse fixe', 'n en chasse fixe', 'n en chasse fixe']);
  this.executeCharTest('𝚘', ['o en chasse fixe', 'o en chasse fixe', 'o en chasse fixe']);
  this.executeCharTest('𝚙', ['p en chasse fixe', 'p en chasse fixe', 'p en chasse fixe']);
  this.executeCharTest('𝚚', ['q en chasse fixe', 'q en chasse fixe', 'q en chasse fixe']);
  this.executeCharTest('𝚛', ['r en chasse fixe', 'r en chasse fixe', 'r en chasse fixe']);
  this.executeCharTest('𝚜', ['s en chasse fixe', 's en chasse fixe', 's en chasse fixe']);
  this.executeCharTest('𝚝', ['t en chasse fixe', 't en chasse fixe', 't en chasse fixe']);
  this.executeCharTest('𝚞', ['u en chasse fixe', 'u en chasse fixe', 'u en chasse fixe']);
  this.executeCharTest('𝚟', ['v en chasse fixe', 'v en chasse fixe', 'v en chasse fixe']);
  this.executeCharTest('𝚠', ['w en chasse fixe', 'w en chasse fixe', 'w en chasse fixe']);
  this.executeCharTest('𝚡', ['x en chasse fixe', 'x en chasse fixe', 'x en chasse fixe']);
  this.executeCharTest('𝚢', ['y en chasse fixe', 'y en chasse fixe', 'y en chasse fixe']);
  this.executeCharTest('𝚣', ['z en chasse fixe', 'z en chasse fixe', 'z en chasse fixe']);
  this.executeCharTest('A', ['A majuscule', 'A majuscule', 'A majuscule']);
  this.executeCharTest('B', ['B majuscule', 'B majuscule', 'B majuscule']);
  this.executeCharTest('C', ['C majuscule', 'C majuscule', 'C majuscule']);
  this.executeCharTest('D', ['D majuscule', 'D majuscule', 'D majuscule']);
  this.executeCharTest('E', ['E majuscule', 'E majuscule', 'E majuscule']);
  this.executeCharTest('F', ['F majuscule', 'F majuscule', 'F majuscule']);
  this.executeCharTest('G', ['G majuscule', 'G majuscule', 'G majuscule']);
  this.executeCharTest('H', ['H majuscule', 'H majuscule', 'H majuscule']);
  this.executeCharTest('I', ['I majuscule', 'I majuscule', 'I majuscule']);
  this.executeCharTest('J', ['J majuscule', 'J majuscule', 'J majuscule']);
  this.executeCharTest('K', ['K majuscule', 'K majuscule', 'K majuscule']);
  this.executeCharTest('L', ['L majuscule', 'L majuscule', 'L majuscule']);
  this.executeCharTest('M', ['M majuscule', 'M majuscule', 'M majuscule']);
  this.executeCharTest('N', ['N majuscule', 'N majuscule', 'N majuscule']);
  this.executeCharTest('O', ['O majuscule', 'O majuscule', 'O majuscule']);
  this.executeCharTest('P', ['P majuscule', 'P majuscule', 'P majuscule']);
  this.executeCharTest('Q', ['Q majuscule', 'Q majuscule', 'Q majuscule']);
  this.executeCharTest('R', ['R majuscule', 'R majuscule', 'R majuscule']);
  this.executeCharTest('S', ['S majuscule', 'S majuscule', 'S majuscule']);
  this.executeCharTest('T', ['T majuscule', 'T majuscule', 'T majuscule']);
  this.executeCharTest('U', ['U majuscule', 'U majuscule', 'U majuscule']);
  this.executeCharTest('V', ['V majuscule', 'V majuscule', 'V majuscule']);
  this.executeCharTest('W', ['W majuscule', 'W majuscule', 'W majuscule']);
  this.executeCharTest('X', ['X majuscule', 'X majuscule', 'X majuscule']);
  this.executeCharTest('Y', ['Y majuscule', 'Y majuscule', 'Y majuscule']);
  this.executeCharTest('Z', ['Z majuscule', 'Z majuscule', 'Z majuscule']);
  this.executeCharTest('a', ['a', 'a', 'a']);
  this.executeCharTest('b', ['b', 'b', 'b']);
  this.executeCharTest('c', ['c', 'c', 'c']);
  this.executeCharTest('d', ['d', 'd', 'd']);
  this.executeCharTest('e', ['e', 'e', 'e']);
  this.executeCharTest('f', ['f', 'f', 'f']);
  this.executeCharTest('g', ['g', 'g', 'g']);
  this.executeCharTest('h', ['h', 'h', 'h']);
  this.executeCharTest('i', ['i', 'i', 'i']);
  this.executeCharTest('j', ['j', 'j', 'j']);
  this.executeCharTest('k', ['k', 'k', 'k']);
  this.executeCharTest('l', ['l', 'l', 'l']);
  this.executeCharTest('m', ['m', 'm', 'm']);
  this.executeCharTest('n', ['n', 'n', 'n']);
  this.executeCharTest('o', ['o', 'o', 'o']);
  this.executeCharTest('p', ['p', 'p', 'p']);
  this.executeCharTest('q', ['q', 'q', 'q']);
  this.executeCharTest('r', ['r', 'r', 'r']);
  this.executeCharTest('s', ['s', 's', 's']);
  this.executeCharTest('t', ['t', 't', 't']);
  this.executeCharTest('u', ['u', 'u', 'u']);
  this.executeCharTest('v', ['v', 'v', 'v']);
  this.executeCharTest('w', ['w', 'w', 'w']);
  this.executeCharTest('x', ['x', 'x', 'x']);
  this.executeCharTest('y', ['y', 'y', 'y']);
  this.executeCharTest('z', ['z', 'z', 'z']);
  this.executeCharTest('𝒜', ['A majuscule de ronde', 'A majuscule de ronde', 'A majuscule de ronde']);
  this.executeCharTest('ℬ', ['B majuscule de ronde', 'B majuscule de ronde', 'B majuscule de ronde']);
  this.executeCharTest('𝒞', ['C majuscule de ronde', 'C majuscule de ronde', 'C majuscule de ronde']);
  this.executeCharTest('𝒟', ['D majuscule de ronde', 'D majuscule de ronde', 'D majuscule de ronde']);
  this.executeCharTest('ℰ', ['E majuscule de ronde', 'E majuscule de ronde', 'E majuscule de ronde']);
  this.executeCharTest('ℱ', ['F majuscule de ronde', 'F majuscule de ronde', 'F majuscule de ronde']);
  this.executeCharTest('𝒢', ['G majuscule de ronde', 'G majuscule de ronde', 'G majuscule de ronde']);
  this.executeCharTest('ℋ', ['H majuscule de ronde', 'H majuscule de ronde', 'H majuscule de ronde']);
  this.executeCharTest('ℐ', ['I majuscule de ronde', 'I majuscule de ronde', 'I majuscule de ronde']);
  this.executeCharTest('𝒥', ['J majuscule de ronde', 'J majuscule de ronde', 'J majuscule de ronde']);
  this.executeCharTest('𝒦', ['K majuscule de ronde', 'K majuscule de ronde', 'K majuscule de ronde']);
  this.executeCharTest('ℒ', ['L majuscule de ronde', 'L majuscule de ronde', 'L majuscule de ronde']);
  this.executeCharTest('ℳ', ['M majuscule de ronde', 'M majuscule de ronde', 'M majuscule de ronde']);
  this.executeCharTest('𝒩', ['N majuscule de ronde', 'N majuscule de ronde', 'N majuscule de ronde']);
  this.executeCharTest('𝒪', ['O majuscule de ronde', 'O majuscule de ronde', 'O majuscule de ronde']);
  this.executeCharTest('𝒫', ['P majuscule de ronde', 'P majuscule de ronde', 'P majuscule de ronde']);
  this.executeCharTest('𝒬', ['Q majuscule de ronde', 'Q majuscule de ronde', 'Q majuscule de ronde']);
  this.executeCharTest('ℛ', ['R majuscule de ronde', 'R majuscule de ronde', 'R majuscule de ronde']);
  this.executeCharTest('𝒮', ['S majuscule de ronde', 'S majuscule de ronde', 'S majuscule de ronde']);
  this.executeCharTest('𝒯', ['T majuscule de ronde', 'T majuscule de ronde', 'T majuscule de ronde']);
  this.executeCharTest('𝒰', ['U majuscule de ronde', 'U majuscule de ronde', 'U majuscule de ronde']);
  this.executeCharTest('𝒱', ['V majuscule de ronde', 'V majuscule de ronde', 'V majuscule de ronde']);
  this.executeCharTest('𝒲', ['W majuscule de ronde', 'W majuscule de ronde', 'W majuscule de ronde']);
  this.executeCharTest('𝒳', ['X majuscule de ronde', 'X majuscule de ronde', 'X majuscule de ronde']);
  this.executeCharTest('𝒴', ['Y majuscule de ronde', 'Y majuscule de ronde', 'Y majuscule de ronde']);
  this.executeCharTest('𝒵', ['Z majuscule de ronde', 'Z majuscule de ronde', 'Z majuscule de ronde']);
  this.executeCharTest('𝒶', ['a de ronde', 'a de ronde', 'a de ronde']);
  this.executeCharTest('𝒷', ['b de ronde', 'b de ronde', 'b de ronde']);
  this.executeCharTest('𝒸', ['c de ronde', 'c de ronde', 'c de ronde']);
  this.executeCharTest('𝒹', ['d de ronde', 'd de ronde', 'd de ronde']);
  this.executeCharTest('ℯ', ['e de ronde', 'e de ronde', 'e de ronde']);
  this.executeCharTest('𝒻', ['f de ronde', 'f de ronde', 'f de ronde']);
  this.executeCharTest('ℊ', ['g de ronde', 'g de ronde', 'g de ronde']);
  this.executeCharTest('𝒽', ['h de ronde', 'h de ronde', 'h de ronde']);
  this.executeCharTest('𝒾', ['i de ronde', 'i de ronde', 'i de ronde']);
  this.executeCharTest('𝒿', ['j de ronde', 'j de ronde', 'j de ronde']);
  this.executeCharTest('𝓀', ['k de ronde', 'k de ronde', 'k de ronde']);
  this.executeCharTest('𝓁', ['l de ronde', 'l de ronde', 'l de ronde']);
  this.executeCharTest('𝓂', ['m de ronde', 'm de ronde', 'm de ronde']);
  this.executeCharTest('𝓃', ['n de ronde', 'n de ronde', 'n de ronde']);
  this.executeCharTest('ℴ', ['o de ronde', 'o de ronde', 'o de ronde']);
  this.executeCharTest('𝓅', ['p de ronde', 'p de ronde', 'p de ronde']);
  this.executeCharTest('𝓆', ['q de ronde', 'q de ronde', 'q de ronde']);
  this.executeCharTest('𝓇', ['r de ronde', 'r de ronde', 'r de ronde']);
  this.executeCharTest('𝓈', ['s de ronde', 's de ronde', 's de ronde']);
  this.executeCharTest('𝓉', ['t de ronde', 't de ronde', 't de ronde']);
  this.executeCharTest('𝓊', ['u de ronde', 'u de ronde', 'u de ronde']);
  this.executeCharTest('𝓋', ['v de ronde', 'v de ronde', 'v de ronde']);
  this.executeCharTest('𝓌', ['w de ronde', 'w de ronde', 'w de ronde']);
  this.executeCharTest('𝓍', ['x de ronde', 'x de ronde', 'x de ronde']);
  this.executeCharTest('𝓎', ['y de ronde', 'y de ronde', 'y de ronde']);
  this.executeCharTest('𝓏', ['z de ronde', 'z de ronde', 'z de ronde']);
  this.executeCharTest('𝖠', ['A majuscule sans empattement', 'A majuscule sans empattement', 'A majuscule sans empattement']);
  this.executeCharTest('𝖡', ['B majuscule sans empattement', 'B majuscule sans empattement', 'B majuscule sans empattement']);
  this.executeCharTest('𝖢', ['C majuscule sans empattement', 'C majuscule sans empattement', 'C majuscule sans empattement']);
  this.executeCharTest('𝖣', ['D majuscule sans empattement', 'D majuscule sans empattement', 'D majuscule sans empattement']);
  this.executeCharTest('𝖤', ['E majuscule sans empattement', 'E majuscule sans empattement', 'E majuscule sans empattement']);
  this.executeCharTest('𝖥', ['F majuscule sans empattement', 'F majuscule sans empattement', 'F majuscule sans empattement']);
  this.executeCharTest('𝖦', ['G majuscule sans empattement', 'G majuscule sans empattement', 'G majuscule sans empattement']);
  this.executeCharTest('𝖧', ['H majuscule sans empattement', 'H majuscule sans empattement', 'H majuscule sans empattement']);
  this.executeCharTest('𝖨', ['I majuscule sans empattement', 'I majuscule sans empattement', 'I majuscule sans empattement']);
  this.executeCharTest('𝖩', ['J majuscule sans empattement', 'J majuscule sans empattement', 'J majuscule sans empattement']);
  this.executeCharTest('𝖪', ['K majuscule sans empattement', 'K majuscule sans empattement', 'K majuscule sans empattement']);
  this.executeCharTest('𝖫', ['L majuscule sans empattement', 'L majuscule sans empattement', 'L majuscule sans empattement']);
  this.executeCharTest('𝖬', ['M majuscule sans empattement', 'M majuscule sans empattement', 'M majuscule sans empattement']);
  this.executeCharTest('𝖭', ['N majuscule sans empattement', 'N majuscule sans empattement', 'N majuscule sans empattement']);
  this.executeCharTest('𝖮', ['O majuscule sans empattement', 'O majuscule sans empattement', 'O majuscule sans empattement']);
  this.executeCharTest('𝖯', ['P majuscule sans empattement', 'P majuscule sans empattement', 'P majuscule sans empattement']);
  this.executeCharTest('𝖰', ['Q majuscule sans empattement', 'Q majuscule sans empattement', 'Q majuscule sans empattement']);
  this.executeCharTest('𝖱', ['R majuscule sans empattement', 'R majuscule sans empattement', 'R majuscule sans empattement']);
  this.executeCharTest('𝖲', ['S majuscule sans empattement', 'S majuscule sans empattement', 'S majuscule sans empattement']);
  this.executeCharTest('𝖳', ['T majuscule sans empattement', 'T majuscule sans empattement', 'T majuscule sans empattement']);
  this.executeCharTest('𝖴', ['U majuscule sans empattement', 'U majuscule sans empattement', 'U majuscule sans empattement']);
  this.executeCharTest('𝖵', ['V majuscule sans empattement', 'V majuscule sans empattement', 'V majuscule sans empattement']);
  this.executeCharTest('𝖶', ['W majuscule sans empattement', 'W majuscule sans empattement', 'W majuscule sans empattement']);
  this.executeCharTest('𝖷', ['X majuscule sans empattement', 'X majuscule sans empattement', 'X majuscule sans empattement']);
  this.executeCharTest('𝖸', ['Y majuscule sans empattement', 'Y majuscule sans empattement', 'Y majuscule sans empattement']);
  this.executeCharTest('𝖹', ['Z majuscule sans empattement', 'Z majuscule sans empattement', 'Z majuscule sans empattement']);
  this.executeCharTest('𝖺', ['a sans empattement', 'a sans empattement', 'a sans empattement']);
  this.executeCharTest('𝖻', ['b sans empattement', 'b sans empattement', 'b sans empattement']);
  this.executeCharTest('𝖼', ['c sans empattement', 'c sans empattement', 'c sans empattement']);
  this.executeCharTest('𝖽', ['d sans empattement', 'd sans empattement', 'd sans empattement']);
  this.executeCharTest('𝖾', ['e sans empattement', 'e sans empattement', 'e sans empattement']);
  this.executeCharTest('𝖿', ['f sans empattement', 'f sans empattement', 'f sans empattement']);
  this.executeCharTest('𝗀', ['g sans empattement', 'g sans empattement', 'g sans empattement']);
  this.executeCharTest('𝗁', ['h sans empattement', 'h sans empattement', 'h sans empattement']);
  this.executeCharTest('𝗂', ['i sans empattement', 'i sans empattement', 'i sans empattement']);
  this.executeCharTest('𝗃', ['j sans empattement', 'j sans empattement', 'j sans empattement']);
  this.executeCharTest('𝗄', ['k sans empattement', 'k sans empattement', 'k sans empattement']);
  this.executeCharTest('𝗅', ['l sans empattement', 'l sans empattement', 'l sans empattement']);
  this.executeCharTest('𝗆', ['m sans empattement', 'm sans empattement', 'm sans empattement']);
  this.executeCharTest('𝗇', ['n sans empattement', 'n sans empattement', 'n sans empattement']);
  this.executeCharTest('𝗈', ['o sans empattement', 'o sans empattement', 'o sans empattement']);
  this.executeCharTest('𝗉', ['p sans empattement', 'p sans empattement', 'p sans empattement']);
  this.executeCharTest('𝗊', ['q sans empattement', 'q sans empattement', 'q sans empattement']);
  this.executeCharTest('𝗋', ['r sans empattement', 'r sans empattement', 'r sans empattement']);
  this.executeCharTest('𝗌', ['s sans empattement', 's sans empattement', 's sans empattement']);
  this.executeCharTest('𝗍', ['t sans empattement', 't sans empattement', 't sans empattement']);
  this.executeCharTest('𝗎', ['u sans empattement', 'u sans empattement', 'u sans empattement']);
  this.executeCharTest('𝗏', ['v sans empattement', 'v sans empattement', 'v sans empattement']);
  this.executeCharTest('𝗐', ['w sans empattement', 'w sans empattement', 'w sans empattement']);
  this.executeCharTest('𝗑', ['x sans empattement', 'x sans empattement', 'x sans empattement']);
  this.executeCharTest('𝗒', ['y sans empattement', 'y sans empattement', 'y sans empattement']);
  this.executeCharTest('𝗓', ['z sans empattement', 'z sans empattement', 'z sans empattement']);
  this.executeCharTest('𝘈', ['A majuscule en italique sans empattement', 'A majuscule en italique sans empattement', 'A majuscule en italique sans empattement']);
  this.executeCharTest('𝘉', ['B majuscule en italique sans empattement', 'B majuscule en italique sans empattement', 'B majuscule en italique sans empattement']);
  this.executeCharTest('𝘊', ['C majuscule en italique sans empattement', 'C majuscule en italique sans empattement', 'C majuscule en italique sans empattement']);
  this.executeCharTest('𝘋', ['D majuscule en italique sans empattement', 'D majuscule en italique sans empattement', 'D majuscule en italique sans empattement']);
  this.executeCharTest('𝘌', ['E majuscule en italique sans empattement', 'E majuscule en italique sans empattement', 'E majuscule en italique sans empattement']);
  this.executeCharTest('𝘍', ['F majuscule en italique sans empattement', 'F majuscule en italique sans empattement', 'F majuscule en italique sans empattement']);
  this.executeCharTest('𝘎', ['G majuscule en italique sans empattement', 'G majuscule en italique sans empattement', 'G majuscule en italique sans empattement']);
  this.executeCharTest('𝘏', ['H majuscule en italique sans empattement', 'H majuscule en italique sans empattement', 'H majuscule en italique sans empattement']);
  this.executeCharTest('𝘐', ['I majuscule en italique sans empattement', 'I majuscule en italique sans empattement', 'I majuscule en italique sans empattement']);
  this.executeCharTest('𝘑', ['J majuscule en italique sans empattement', 'J majuscule en italique sans empattement', 'J majuscule en italique sans empattement']);
  this.executeCharTest('𝘒', ['K majuscule en italique sans empattement', 'K majuscule en italique sans empattement', 'K majuscule en italique sans empattement']);
  this.executeCharTest('𝘓', ['L majuscule en italique sans empattement', 'L majuscule en italique sans empattement', 'L majuscule en italique sans empattement']);
  this.executeCharTest('𝘔', ['M majuscule en italique sans empattement', 'M majuscule en italique sans empattement', 'M majuscule en italique sans empattement']);
  this.executeCharTest('𝘕', ['N majuscule en italique sans empattement', 'N majuscule en italique sans empattement', 'N majuscule en italique sans empattement']);
  this.executeCharTest('𝘖', ['O majuscule en italique sans empattement', 'O majuscule en italique sans empattement', 'O majuscule en italique sans empattement']);
  this.executeCharTest('𝘗', ['P majuscule en italique sans empattement', 'P majuscule en italique sans empattement', 'P majuscule en italique sans empattement']);
  this.executeCharTest('𝘘', ['Q majuscule en italique sans empattement', 'Q majuscule en italique sans empattement', 'Q majuscule en italique sans empattement']);
  this.executeCharTest('𝘙', ['R majuscule en italique sans empattement', 'R majuscule en italique sans empattement', 'R majuscule en italique sans empattement']);
  this.executeCharTest('𝘚', ['S majuscule en italique sans empattement', 'S majuscule en italique sans empattement', 'S majuscule en italique sans empattement']);
  this.executeCharTest('𝘛', ['T majuscule en italique sans empattement', 'T majuscule en italique sans empattement', 'T majuscule en italique sans empattement']);
  this.executeCharTest('𝘜', ['U majuscule en italique sans empattement', 'U majuscule en italique sans empattement', 'U majuscule en italique sans empattement']);
  this.executeCharTest('𝘝', ['V majuscule en italique sans empattement', 'V majuscule en italique sans empattement', 'V majuscule en italique sans empattement']);
  this.executeCharTest('𝘞', ['W majuscule en italique sans empattement', 'W majuscule en italique sans empattement', 'W majuscule en italique sans empattement']);
  this.executeCharTest('𝘟', ['X majuscule en italique sans empattement', 'X majuscule en italique sans empattement', 'X majuscule en italique sans empattement']);
  this.executeCharTest('𝘠', ['Y majuscule en italique sans empattement', 'Y majuscule en italique sans empattement', 'Y majuscule en italique sans empattement']);
  this.executeCharTest('𝘡', ['Z majuscule en italique sans empattement', 'Z majuscule en italique sans empattement', 'Z majuscule en italique sans empattement']);
  this.executeCharTest('𝘢', ['a en italique sans empattement', 'a en italique sans empattement', 'a en italique sans empattement']);
  this.executeCharTest('𝘣', ['b en italique sans empattement', 'b en italique sans empattement', 'b en italique sans empattement']);
  this.executeCharTest('𝘤', ['c en italique sans empattement', 'c en italique sans empattement', 'c en italique sans empattement']);
  this.executeCharTest('𝘥', ['d en italique sans empattement', 'd en italique sans empattement', 'd en italique sans empattement']);
  this.executeCharTest('𝘦', ['e en italique sans empattement', 'e en italique sans empattement', 'e en italique sans empattement']);
  this.executeCharTest('𝘧', ['f en italique sans empattement', 'f en italique sans empattement', 'f en italique sans empattement']);
  this.executeCharTest('𝘨', ['g en italique sans empattement', 'g en italique sans empattement', 'g en italique sans empattement']);
  this.executeCharTest('𝘩', ['h en italique sans empattement', 'h en italique sans empattement', 'h en italique sans empattement']);
  this.executeCharTest('𝘪', ['i en italique sans empattement', 'i en italique sans empattement', 'i en italique sans empattement']);
  this.executeCharTest('𝘫', ['j en italique sans empattement', 'j en italique sans empattement', 'j en italique sans empattement']);
  this.executeCharTest('𝘬', ['k en italique sans empattement', 'k en italique sans empattement', 'k en italique sans empattement']);
  this.executeCharTest('𝘭', ['l en italique sans empattement', 'l en italique sans empattement', 'l en italique sans empattement']);
  this.executeCharTest('𝘮', ['m en italique sans empattement', 'm en italique sans empattement', 'm en italique sans empattement']);
  this.executeCharTest('𝘯', ['n en italique sans empattement', 'n en italique sans empattement', 'n en italique sans empattement']);
  this.executeCharTest('𝘰', ['o en italique sans empattement', 'o en italique sans empattement', 'o en italique sans empattement']);
  this.executeCharTest('𝘱', ['p en italique sans empattement', 'p en italique sans empattement', 'p en italique sans empattement']);
  this.executeCharTest('𝘲', ['q en italique sans empattement', 'q en italique sans empattement', 'q en italique sans empattement']);
  this.executeCharTest('𝘳', ['r en italique sans empattement', 'r en italique sans empattement', 'r en italique sans empattement']);
  this.executeCharTest('𝘴', ['s en italique sans empattement', 's en italique sans empattement', 's en italique sans empattement']);
  this.executeCharTest('𝘵', ['t en italique sans empattement', 't en italique sans empattement', 't en italique sans empattement']);
  this.executeCharTest('𝘶', ['u en italique sans empattement', 'u en italique sans empattement', 'u en italique sans empattement']);
  this.executeCharTest('𝘷', ['v en italique sans empattement', 'v en italique sans empattement', 'v en italique sans empattement']);
  this.executeCharTest('𝘸', ['w en italique sans empattement', 'w en italique sans empattement', 'w en italique sans empattement']);
  this.executeCharTest('𝘹', ['x en italique sans empattement', 'x en italique sans empattement', 'x en italique sans empattement']);
  this.executeCharTest('𝘺', ['y en italique sans empattement', 'y en italique sans empattement', 'y en italique sans empattement']);
  this.executeCharTest('𝘻', ['z en italique sans empattement', 'z en italique sans empattement', 'z en italique sans empattement']);
  this.executeCharTest('𝗔', ['A majuscule en gras sans empattement', 'A majuscule en gras sans empattement', 'A majuscule en gras sans empattement']);
  this.executeCharTest('𝗕', ['B majuscule en gras sans empattement', 'B majuscule en gras sans empattement', 'B majuscule en gras sans empattement']);
  this.executeCharTest('𝗖', ['C majuscule en gras sans empattement', 'C majuscule en gras sans empattement', 'C majuscule en gras sans empattement']);
  this.executeCharTest('𝗗', ['D majuscule en gras sans empattement', 'D majuscule en gras sans empattement', 'D majuscule en gras sans empattement']);
  this.executeCharTest('𝗘', ['E majuscule en gras sans empattement', 'E majuscule en gras sans empattement', 'E majuscule en gras sans empattement']);
  this.executeCharTest('𝗙', ['F majuscule en gras sans empattement', 'F majuscule en gras sans empattement', 'F majuscule en gras sans empattement']);
  this.executeCharTest('𝗚', ['G majuscule en gras sans empattement', 'G majuscule en gras sans empattement', 'G majuscule en gras sans empattement']);
  this.executeCharTest('𝗛', ['H majuscule en gras sans empattement', 'H majuscule en gras sans empattement', 'H majuscule en gras sans empattement']);
  this.executeCharTest('𝗜', ['I majuscule en gras sans empattement', 'I majuscule en gras sans empattement', 'I majuscule en gras sans empattement']);
  this.executeCharTest('𝗝', ['J majuscule en gras sans empattement', 'J majuscule en gras sans empattement', 'J majuscule en gras sans empattement']);
  this.executeCharTest('𝗞', ['K majuscule en gras sans empattement', 'K majuscule en gras sans empattement', 'K majuscule en gras sans empattement']);
  this.executeCharTest('𝗟', ['L majuscule en gras sans empattement', 'L majuscule en gras sans empattement', 'L majuscule en gras sans empattement']);
  this.executeCharTest('𝗠', ['M majuscule en gras sans empattement', 'M majuscule en gras sans empattement', 'M majuscule en gras sans empattement']);
  this.executeCharTest('𝗡', ['N majuscule en gras sans empattement', 'N majuscule en gras sans empattement', 'N majuscule en gras sans empattement']);
  this.executeCharTest('𝗢', ['O majuscule en gras sans empattement', 'O majuscule en gras sans empattement', 'O majuscule en gras sans empattement']);
  this.executeCharTest('𝗣', ['P majuscule en gras sans empattement', 'P majuscule en gras sans empattement', 'P majuscule en gras sans empattement']);
  this.executeCharTest('𝗤', ['Q majuscule en gras sans empattement', 'Q majuscule en gras sans empattement', 'Q majuscule en gras sans empattement']);
  this.executeCharTest('𝗥', ['R majuscule en gras sans empattement', 'R majuscule en gras sans empattement', 'R majuscule en gras sans empattement']);
  this.executeCharTest('𝗦', ['S majuscule en gras sans empattement', 'S majuscule en gras sans empattement', 'S majuscule en gras sans empattement']);
  this.executeCharTest('𝗧', ['T majuscule en gras sans empattement', 'T majuscule en gras sans empattement', 'T majuscule en gras sans empattement']);
  this.executeCharTest('𝗨', ['U majuscule en gras sans empattement', 'U majuscule en gras sans empattement', 'U majuscule en gras sans empattement']);
  this.executeCharTest('𝗩', ['V majuscule en gras sans empattement', 'V majuscule en gras sans empattement', 'V majuscule en gras sans empattement']);
  this.executeCharTest('𝗪', ['W majuscule en gras sans empattement', 'W majuscule en gras sans empattement', 'W majuscule en gras sans empattement']);
  this.executeCharTest('𝗫', ['X majuscule en gras sans empattement', 'X majuscule en gras sans empattement', 'X majuscule en gras sans empattement']);
  this.executeCharTest('𝗬', ['Y majuscule en gras sans empattement', 'Y majuscule en gras sans empattement', 'Y majuscule en gras sans empattement']);
  this.executeCharTest('𝗭', ['Z majuscule en gras sans empattement', 'Z majuscule en gras sans empattement', 'Z majuscule en gras sans empattement']);
  this.executeCharTest('𝗮', ['a en gras sans empattement', 'a en gras sans empattement', 'a en gras sans empattement']);
  this.executeCharTest('𝗯', ['b en gras sans empattement', 'b en gras sans empattement', 'b en gras sans empattement']);
  this.executeCharTest('𝗰', ['c en gras sans empattement', 'c en gras sans empattement', 'c en gras sans empattement']);
  this.executeCharTest('𝗱', ['d en gras sans empattement', 'd en gras sans empattement', 'd en gras sans empattement']);
  this.executeCharTest('𝗲', ['e en gras sans empattement', 'e en gras sans empattement', 'e en gras sans empattement']);
  this.executeCharTest('𝗳', ['f en gras sans empattement', 'f en gras sans empattement', 'f en gras sans empattement']);
  this.executeCharTest('𝗴', ['g en gras sans empattement', 'g en gras sans empattement', 'g en gras sans empattement']);
  this.executeCharTest('𝗵', ['h en gras sans empattement', 'h en gras sans empattement', 'h en gras sans empattement']);
  this.executeCharTest('𝗶', ['i en gras sans empattement', 'i en gras sans empattement', 'i en gras sans empattement']);
  this.executeCharTest('𝗷', ['j en gras sans empattement', 'j en gras sans empattement', 'j en gras sans empattement']);
  this.executeCharTest('𝗸', ['k en gras sans empattement', 'k en gras sans empattement', 'k en gras sans empattement']);
  this.executeCharTest('𝗹', ['l en gras sans empattement', 'l en gras sans empattement', 'l en gras sans empattement']);
  this.executeCharTest('𝗺', ['m en gras sans empattement', 'm en gras sans empattement', 'm en gras sans empattement']);
  this.executeCharTest('𝗻', ['n en gras sans empattement', 'n en gras sans empattement', 'n en gras sans empattement']);
  this.executeCharTest('𝗼', ['o en gras sans empattement', 'o en gras sans empattement', 'o en gras sans empattement']);
  this.executeCharTest('𝗽', ['p en gras sans empattement', 'p en gras sans empattement', 'p en gras sans empattement']);
  this.executeCharTest('𝗾', ['q en gras sans empattement', 'q en gras sans empattement', 'q en gras sans empattement']);
  this.executeCharTest('𝗿', ['r en gras sans empattement', 'r en gras sans empattement', 'r en gras sans empattement']);
  this.executeCharTest('𝘀', ['s en gras sans empattement', 's en gras sans empattement', 's en gras sans empattement']);
  this.executeCharTest('𝘁', ['t en gras sans empattement', 't en gras sans empattement', 't en gras sans empattement']);
  this.executeCharTest('𝘂', ['u en gras sans empattement', 'u en gras sans empattement', 'u en gras sans empattement']);
  this.executeCharTest('𝘃', ['v en gras sans empattement', 'v en gras sans empattement', 'v en gras sans empattement']);
  this.executeCharTest('𝘄', ['w en gras sans empattement', 'w en gras sans empattement', 'w en gras sans empattement']);
  this.executeCharTest('𝘅', ['x en gras sans empattement', 'x en gras sans empattement', 'x en gras sans empattement']);
  this.executeCharTest('𝘆', ['y en gras sans empattement', 'y en gras sans empattement', 'y en gras sans empattement']);
  this.executeCharTest('𝘇', ['z en gras sans empattement', 'z en gras sans empattement', 'z en gras sans empattement']);
  this.executeCharTest('𝘼', ['A majuscule en italique gras sans empattement', 'A majuscule en italique gras sans empattement', 'A majuscule en italique gras sans empattement']);
  this.executeCharTest('𝘽', ['B majuscule en italique gras sans empattement', 'B majuscule en italique gras sans empattement', 'B majuscule en italique gras sans empattement']);
  this.executeCharTest('𝘾', ['C majuscule en italique gras sans empattement', 'C majuscule en italique gras sans empattement', 'C majuscule en italique gras sans empattement']);
  this.executeCharTest('𝘿', ['D majuscule en italique gras sans empattement', 'D majuscule en italique gras sans empattement', 'D majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙀', ['E majuscule en italique gras sans empattement', 'E majuscule en italique gras sans empattement', 'E majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙁', ['F majuscule en italique gras sans empattement', 'F majuscule en italique gras sans empattement', 'F majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙂', ['G majuscule en italique gras sans empattement', 'G majuscule en italique gras sans empattement', 'G majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙃', ['H majuscule en italique gras sans empattement', 'H majuscule en italique gras sans empattement', 'H majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙄', ['I majuscule en italique gras sans empattement', 'I majuscule en italique gras sans empattement', 'I majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙅', ['J majuscule en italique gras sans empattement', 'J majuscule en italique gras sans empattement', 'J majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙆', ['K majuscule en italique gras sans empattement', 'K majuscule en italique gras sans empattement', 'K majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙇', ['L majuscule en italique gras sans empattement', 'L majuscule en italique gras sans empattement', 'L majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙈', ['M majuscule en italique gras sans empattement', 'M majuscule en italique gras sans empattement', 'M majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙉', ['N majuscule en italique gras sans empattement', 'N majuscule en italique gras sans empattement', 'N majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙊', ['O majuscule en italique gras sans empattement', 'O majuscule en italique gras sans empattement', 'O majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙋', ['P majuscule en italique gras sans empattement', 'P majuscule en italique gras sans empattement', 'P majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙌', ['Q majuscule en italique gras sans empattement', 'Q majuscule en italique gras sans empattement', 'Q majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙍', ['R majuscule en italique gras sans empattement', 'R majuscule en italique gras sans empattement', 'R majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙎', ['S majuscule en italique gras sans empattement', 'S majuscule en italique gras sans empattement', 'S majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙏', ['T majuscule en italique gras sans empattement', 'T majuscule en italique gras sans empattement', 'T majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙐', ['U majuscule en italique gras sans empattement', 'U majuscule en italique gras sans empattement', 'U majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙑', ['V majuscule en italique gras sans empattement', 'V majuscule en italique gras sans empattement', 'V majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙒', ['W majuscule en italique gras sans empattement', 'W majuscule en italique gras sans empattement', 'W majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙓', ['X majuscule en italique gras sans empattement', 'X majuscule en italique gras sans empattement', 'X majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙔', ['Y majuscule en italique gras sans empattement', 'Y majuscule en italique gras sans empattement', 'Y majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙕', ['Z majuscule en italique gras sans empattement', 'Z majuscule en italique gras sans empattement', 'Z majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙖', ['a en italique gras sans empattement', 'a en italique gras sans empattement', 'a en italique gras sans empattement']);
  this.executeCharTest('𝙗', ['b en italique gras sans empattement', 'b en italique gras sans empattement', 'b en italique gras sans empattement']);
  this.executeCharTest('𝙘', ['c en italique gras sans empattement', 'c en italique gras sans empattement', 'c en italique gras sans empattement']);
  this.executeCharTest('𝙙', ['d en italique gras sans empattement', 'd en italique gras sans empattement', 'd en italique gras sans empattement']);
  this.executeCharTest('𝙚', ['e en italique gras sans empattement', 'e en italique gras sans empattement', 'e en italique gras sans empattement']);
  this.executeCharTest('𝙛', ['f en italique gras sans empattement', 'f en italique gras sans empattement', 'f en italique gras sans empattement']);
  this.executeCharTest('𝙜', ['g en italique gras sans empattement', 'g en italique gras sans empattement', 'g en italique gras sans empattement']);
  this.executeCharTest('𝙝', ['h en italique gras sans empattement', 'h en italique gras sans empattement', 'h en italique gras sans empattement']);
  this.executeCharTest('𝙞', ['i en italique gras sans empattement', 'i en italique gras sans empattement', 'i en italique gras sans empattement']);
  this.executeCharTest('𝙟', ['j en italique gras sans empattement', 'j en italique gras sans empattement', 'j en italique gras sans empattement']);
  this.executeCharTest('𝙠', ['k en italique gras sans empattement', 'k en italique gras sans empattement', 'k en italique gras sans empattement']);
  this.executeCharTest('𝙡', ['l en italique gras sans empattement', 'l en italique gras sans empattement', 'l en italique gras sans empattement']);
  this.executeCharTest('𝙢', ['m en italique gras sans empattement', 'm en italique gras sans empattement', 'm en italique gras sans empattement']);
  this.executeCharTest('𝙣', ['n en italique gras sans empattement', 'n en italique gras sans empattement', 'n en italique gras sans empattement']);
  this.executeCharTest('𝙤', ['o en italique gras sans empattement', 'o en italique gras sans empattement', 'o en italique gras sans empattement']);
  this.executeCharTest('𝙥', ['p en italique gras sans empattement', 'p en italique gras sans empattement', 'p en italique gras sans empattement']);
  this.executeCharTest('𝙦', ['q en italique gras sans empattement', 'q en italique gras sans empattement', 'q en italique gras sans empattement']);
  this.executeCharTest('𝙧', ['r en italique gras sans empattement', 'r en italique gras sans empattement', 'r en italique gras sans empattement']);
  this.executeCharTest('𝙨', ['s en italique gras sans empattement', 's en italique gras sans empattement', 's en italique gras sans empattement']);
  this.executeCharTest('𝙩', ['t en italique gras sans empattement', 't en italique gras sans empattement', 't en italique gras sans empattement']);
  this.executeCharTest('𝙪', ['u en italique gras sans empattement', 'u en italique gras sans empattement', 'u en italique gras sans empattement']);
  this.executeCharTest('𝙫', ['v en italique gras sans empattement', 'v en italique gras sans empattement', 'v en italique gras sans empattement']);
  this.executeCharTest('𝙬', ['w en italique gras sans empattement', 'w en italique gras sans empattement', 'w en italique gras sans empattement']);
  this.executeCharTest('𝙭', ['x en italique gras sans empattement', 'x en italique gras sans empattement', 'x en italique gras sans empattement']);
  this.executeCharTest('𝙮', ['y en italique gras sans empattement', 'y en italique gras sans empattement', 'y en italique gras sans empattement']);
  this.executeCharTest('𝙯', ['z en italique gras sans empattement', 'z en italique gras sans empattement', 'z en italique gras sans empattement']);
  this.executeCharTest('Α', ['Alpha majuscule', 'Alpha majuscule', 'Alpha majuscule']);
  this.executeCharTest('Β', ['Bêta majuscule', 'Bêta majuscule', 'Bêta majuscule']);
  this.executeCharTest('Γ', ['Gamma majuscule', 'Gamma majuscule', 'Gamma majuscule']);
  this.executeCharTest('Δ', ['Delta majuscule', 'Delta majuscule', 'Delta majuscule']);
  this.executeCharTest('Ε', ['Epsilon majuscule', 'Epsilon majuscule', 'Epsilon majuscule']);
  this.executeCharTest('Ζ', ['Zêta majuscule', 'Zêta majuscule', 'Zêta majuscule']);
  this.executeCharTest('Η', ['Êta majuscule', 'Êta majuscule', 'Êta majuscule']);
  this.executeCharTest('Θ', ['Thêta majuscule', 'Thêta majuscule', 'Thêta majuscule']);
  this.executeCharTest('Ι', ['Iota majuscule', 'Iota majuscule', 'Iota majuscule']);
  this.executeCharTest('Κ', ['Kappa majuscule', 'Kappa majuscule', 'Kappa majuscule']);
  this.executeCharTest('Λ', ['Lambda majuscule', 'Lambda majuscule', 'Lambda majuscule']);
  this.executeCharTest('Μ', ['Mû majuscule', 'Mû majuscule', 'Mû majuscule']);
  this.executeCharTest('Ν', ['Nû majuscule', 'Nû majuscule', 'Nû majuscule']);
  this.executeCharTest('Ξ', ['Xi majuscule', 'Xi majuscule', 'Xi majuscule']);
  this.executeCharTest('Ο', ['Omicron majuscule', 'Omicron majuscule', 'Omicron majuscule']);
  this.executeCharTest('Π', ['Pi majuscule', 'Pi majuscule', 'Pi majuscule']);
  this.executeCharTest('Ρ', ['Rhô majuscule', 'Rhô majuscule', 'Rhô majuscule']);
  this.executeCharTest('ϴ', ['Thêta majuscule', 'Thêta majuscule', 'Thêta majuscule']);
  this.executeCharTest('Σ', ['Sigma majuscule', 'Sigma majuscule', 'Sigma majuscule']);
  this.executeCharTest('Τ', ['Tau majuscule', 'Tau majuscule', 'Tau majuscule']);
  this.executeCharTest('Υ', ['Upsilon majuscule', 'Upsilon majuscule', 'Upsilon majuscule']);
  this.executeCharTest('Φ', ['Phi majuscule', 'Phi majuscule', 'Phi majuscule']);
  this.executeCharTest('Χ', ['Chi majuscule', 'Chi majuscule', 'Chi majuscule']);
  this.executeCharTest('Ψ', ['Psi majuscule', 'Psi majuscule', 'Psi majuscule']);
  this.executeCharTest('Ω', ['Oméga majuscule', 'Oméga majuscule', 'Oméga majuscule']);
  this.executeCharTest('∇', ['nabla', 'nabla', 'nabla']);
  this.executeCharTest('α', ['alpha', 'alpha', 'alpha']);
  this.executeCharTest('β', ['bêta', 'bêta', 'bêta']);
  this.executeCharTest('γ', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('δ', ['delta', 'delta', 'delta']);
  this.executeCharTest('ε', ['epsilon', 'epsilon', 'epsilon']);
  this.executeCharTest('ζ', ['zêta', 'zêta', 'zêta']);
  this.executeCharTest('η', ['êta', 'êta', 'êta']);
  this.executeCharTest('θ', ['thêta', 'thêta', 'thêta']);
  this.executeCharTest('ι', ['iota', 'iota', 'iota']);
  this.executeCharTest('κ', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('λ', ['lambda', 'lambda', 'lambda']);
  this.executeCharTest('μ', ['mû', 'mû', 'mû']);
  this.executeCharTest('ν', ['nû', 'nû', 'nû']);
  this.executeCharTest('ξ', ['xi', 'xi', 'xi']);
  this.executeCharTest('ο', ['omicron', 'omicron', 'omicron']);
  this.executeCharTest('π', ['pi', 'pi', 'pi']);
  this.executeCharTest('ρ', ['rhô', 'rhô', 'rhô']);
  this.executeCharTest('ς', ['sigma final', 'sigma final', 'sigma final']);
  this.executeCharTest('σ', ['sigma', 'sigma', 'sigma']);
  this.executeCharTest('τ', ['tau', 'tau', 'tau']);
  this.executeCharTest('υ', ['upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest('φ', ['phi', 'phi', 'phi']);
  this.executeCharTest('χ', ['chi', 'chi', 'chi']);
  this.executeCharTest('ψ', ['psi', 'psi', 'psi']);
  this.executeCharTest('ω', ['oméga', 'oméga', 'oméga']);
  this.executeCharTest('∂', ['dérivée partielle', 'dérivée partielle', 'dérivée partielle']);
  this.executeCharTest('ϵ', ['epsilon', 'epsilon', 'epsilon']);
  this.executeCharTest('ϑ', ['thêta', 'thêta', 'thêta']);
  this.executeCharTest('ϰ', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('ϕ', ['phi', 'phi', 'phi']);
  this.executeCharTest('ϱ', ['rhô', 'rhô', 'rhô']);
  this.executeCharTest('ϖ', ['pi', 'pi', 'pi']);
  this.executeCharTest('𝚨', ['Alpha majuscule en gras', 'Alpha majuscule en gras', 'Alpha majuscule en gras']);
  this.executeCharTest('𝚩', ['Bêta majuscule en gras', 'Bêta majuscule en gras', 'Bêta majuscule en gras']);
  this.executeCharTest('𝚪', ['Gamma majuscule en gras', 'Gamma majuscule en gras', 'Gamma majuscule en gras']);
  this.executeCharTest('𝚫', ['Delta majuscule en gras', 'Delta majuscule en gras', 'Delta majuscule en gras']);
  this.executeCharTest('𝚬', ['Epsilon majuscule en gras', 'Epsilon majuscule en gras', 'Epsilon majuscule en gras']);
  this.executeCharTest('𝚭', ['Zêta majuscule en gras', 'Zêta majuscule en gras', 'Zêta majuscule en gras']);
  this.executeCharTest('𝚮', ['Êta majuscule en gras', 'Êta majuscule en gras', 'Êta majuscule en gras']);
  this.executeCharTest('𝚯', ['Thêta majuscule en gras', 'Thêta majuscule en gras', 'Thêta majuscule en gras']);
  this.executeCharTest('𝚰', ['Iota majuscule en gras', 'Iota majuscule en gras', 'Iota majuscule en gras']);
  this.executeCharTest('𝚱', ['Kappa majuscule en gras', 'Kappa majuscule en gras', 'Kappa majuscule en gras']);
  this.executeCharTest('𝚲', ['Lambda majuscule en gras', 'Lambda majuscule en gras', 'Lambda majuscule en gras']);
  this.executeCharTest('𝚳', ['Mû majuscule en gras', 'Mû majuscule en gras', 'Mû majuscule en gras']);
  this.executeCharTest('𝚴', ['Nû majuscule en gras', 'Nû majuscule en gras', 'Nû majuscule en gras']);
  this.executeCharTest('𝚵', ['Xi majuscule en gras', 'Xi majuscule en gras', 'Xi majuscule en gras']);
  this.executeCharTest('𝚶', ['Omicron majuscule en gras', 'Omicron majuscule en gras', 'Omicron majuscule en gras']);
  this.executeCharTest('𝚷', ['Pi majuscule en gras', 'Pi majuscule en gras', 'Pi majuscule en gras']);
  this.executeCharTest('𝚸', ['Rhô majuscule en gras', 'Rhô majuscule en gras', 'Rhô majuscule en gras']);
  this.executeCharTest('𝚹', ['Thêta majuscule en gras', 'Thêta majuscule en gras', 'Thêta majuscule en gras']);
  this.executeCharTest('𝚺', ['Sigma majuscule en gras', 'Sigma majuscule en gras', 'Sigma majuscule en gras']);
  this.executeCharTest('𝚻', ['Tau majuscule en gras', 'Tau majuscule en gras', 'Tau majuscule en gras']);
  this.executeCharTest('𝚼', ['Upsilon majuscule en gras', 'Upsilon majuscule en gras', 'Upsilon majuscule en gras']);
  this.executeCharTest('𝚽', ['Phi majuscule en gras', 'Phi majuscule en gras', 'Phi majuscule en gras']);
  this.executeCharTest('𝚾', ['Chi majuscule en gras', 'Chi majuscule en gras', 'Chi majuscule en gras']);
  this.executeCharTest('𝚿', ['Psi majuscule en gras', 'Psi majuscule en gras', 'Psi majuscule en gras']);
  this.executeCharTest('𝛀', ['Oméga majuscule en gras', 'Oméga majuscule en gras', 'Oméga majuscule en gras']);
  this.executeCharTest('𝛁', ['nabla en gras', 'nabla en gras', 'nabla en gras']);
  this.executeCharTest('𝛂', ['alpha en gras', 'alpha en gras', 'alpha en gras']);
  this.executeCharTest('𝛃', ['bêta en gras', 'bêta en gras', 'bêta en gras']);
  this.executeCharTest('𝛄', ['gamma en gras', 'gamma en gras', 'gamma en gras']);
  this.executeCharTest('𝛅', ['delta en gras', 'delta en gras', 'delta en gras']);
  this.executeCharTest('𝛆', ['epsilon en gras', 'epsilon en gras', 'epsilon en gras']);
  this.executeCharTest('𝛇', ['zêta en gras', 'zêta en gras', 'zêta en gras']);
  this.executeCharTest('𝛈', ['êta en gras', 'êta en gras', 'êta en gras']);
  this.executeCharTest('𝛉', ['thêta en gras', 'thêta en gras', 'thêta en gras']);
  this.executeCharTest('𝛊', ['iota en gras', 'iota en gras', 'iota en gras']);
  this.executeCharTest('𝛋', ['kappa en gras', 'kappa en gras', 'kappa en gras']);
  this.executeCharTest('𝛌', ['lambda en gras', 'lambda en gras', 'lambda en gras']);
  this.executeCharTest('𝛍', ['mû en gras', 'mû en gras', 'mû en gras']);
  this.executeCharTest('𝛎', ['nû en gras', 'nû en gras', 'nû en gras']);
  this.executeCharTest('𝛏', ['xi en gras', 'xi en gras', 'xi en gras']);
  this.executeCharTest('𝛐', ['omicron en gras', 'omicron en gras', 'omicron en gras']);
  this.executeCharTest('𝛑', ['pi en gras', 'pi en gras', 'pi en gras']);
  this.executeCharTest('𝛒', ['rhô en gras', 'rhô en gras', 'rhô en gras']);
  this.executeCharTest('𝛓', ['sigma final en gras', 'sigma final en gras', 'sigma final en gras']);
  this.executeCharTest('𝛔', ['sigma en gras', 'sigma en gras', 'sigma en gras']);
  this.executeCharTest('𝛕', ['tau en gras', 'tau en gras', 'tau en gras']);
  this.executeCharTest('𝛖', ['upsilon en gras', 'upsilon en gras', 'upsilon en gras']);
  this.executeCharTest('𝛗', ['phi en gras', 'phi en gras', 'phi en gras']);
  this.executeCharTest('𝛘', ['chi en gras', 'chi en gras', 'chi en gras']);
  this.executeCharTest('𝛙', ['psi en gras', 'psi en gras', 'psi en gras']);
  this.executeCharTest('𝛚', ['oméga en gras', 'oméga en gras', 'oméga en gras']);
  this.executeCharTest('𝛛', ['dérivée partielle en gras', 'dérivée partielle en gras', 'dérivée partielle en gras']);
  this.executeCharTest('𝛜', ['epsilon en gras', 'epsilon en gras', 'epsilon en gras']);
  this.executeCharTest('𝛝', ['thêta en gras', 'thêta en gras', 'thêta en gras']);
  this.executeCharTest('𝛞', ['kappa en gras', 'kappa en gras', 'kappa en gras']);
  this.executeCharTest('𝛟', ['phi en gras', 'phi en gras', 'phi en gras']);
  this.executeCharTest('𝛠', ['rhô en gras', 'rhô en gras', 'rhô en gras']);
  this.executeCharTest('𝛡', ['pi en gras', 'pi en gras', 'pi en gras']);
  this.executeCharTest('𝛢', ['Alpha majuscule en italique', 'Alpha majuscule en italique', 'Alpha majuscule en italique']);
  this.executeCharTest('𝛣', ['Bêta majuscule en italique', 'Bêta majuscule en italique', 'Bêta majuscule en italique']);
  this.executeCharTest('𝛤', ['Gamma majuscule en italique', 'Gamma majuscule en italique', 'Gamma majuscule en italique']);
  this.executeCharTest('𝛥', ['Delta majuscule en italique', 'Delta majuscule en italique', 'Delta majuscule en italique']);
  this.executeCharTest('𝛦', ['Epsilon majuscule en italique', 'Epsilon majuscule en italique', 'Epsilon majuscule en italique']);
  this.executeCharTest('𝛧', ['Zêta majuscule en italique', 'Zêta majuscule en italique', 'Zêta majuscule en italique']);
  this.executeCharTest('𝛨', ['Êta majuscule en italique', 'Êta majuscule en italique', 'Êta majuscule en italique']);
  this.executeCharTest('𝛩', ['Thêta majuscule en italique', 'Thêta majuscule en italique', 'Thêta majuscule en italique']);
  this.executeCharTest('𝛪', ['Iota majuscule en italique', 'Iota majuscule en italique', 'Iota majuscule en italique']);
  this.executeCharTest('𝛫', ['Kappa majuscule en italique', 'Kappa majuscule en italique', 'Kappa majuscule en italique']);
  this.executeCharTest('𝛬', ['Lambda majuscule en italique', 'Lambda majuscule en italique', 'Lambda majuscule en italique']);
  this.executeCharTest('𝛭', ['Mû majuscule en italique', 'Mû majuscule en italique', 'Mû majuscule en italique']);
  this.executeCharTest('𝛮', ['Nû majuscule en italique', 'Nû majuscule en italique', 'Nû majuscule en italique']);
  this.executeCharTest('𝛯', ['Xi majuscule en italique', 'Xi majuscule en italique', 'Xi majuscule en italique']);
  this.executeCharTest('𝛰', ['Omicron majuscule en italique', 'Omicron majuscule en italique', 'Omicron majuscule en italique']);
  this.executeCharTest('𝛱', ['Pi majuscule en italique', 'Pi majuscule en italique', 'Pi majuscule en italique']);
  this.executeCharTest('𝛲', ['Rhô majuscule en italique', 'Rhô majuscule en italique', 'Rhô majuscule en italique']);
  this.executeCharTest('𝛳', ['Thêta majuscule en italique', 'Thêta majuscule en italique', 'Thêta majuscule en italique']);
  this.executeCharTest('𝛴', ['Sigma majuscule en italique', 'Sigma majuscule en italique', 'Sigma majuscule en italique']);
  this.executeCharTest('𝛵', ['Tau majuscule en italique', 'Tau majuscule en italique', 'Tau majuscule en italique']);
  this.executeCharTest('𝛶', ['Upsilon majuscule en italique', 'Upsilon majuscule en italique', 'Upsilon majuscule en italique']);
  this.executeCharTest('𝛷', ['Phi majuscule en italique', 'Phi majuscule en italique', 'Phi majuscule en italique']);
  this.executeCharTest('𝛸', ['Chi majuscule en italique', 'Chi majuscule en italique', 'Chi majuscule en italique']);
  this.executeCharTest('𝛹', ['Psi majuscule en italique', 'Psi majuscule en italique', 'Psi majuscule en italique']);
  this.executeCharTest('𝛺', ['Oméga majuscule en italique', 'Oméga majuscule en italique', 'Oméga majuscule en italique']);
  this.executeCharTest('𝛻', ['nabla en italique', 'nabla en italique', 'nabla en italique']);
  this.executeCharTest('𝛼', ['alpha en italique', 'alpha en italique', 'alpha en italique']);
  this.executeCharTest('𝛽', ['bêta en italique', 'bêta en italique', 'bêta en italique']);
  this.executeCharTest('𝛾', ['gamma en italique', 'gamma en italique', 'gamma en italique']);
  this.executeCharTest('𝛿', ['delta en italique', 'delta en italique', 'delta en italique']);
  this.executeCharTest('𝜀', ['epsilon en italique', 'epsilon en italique', 'epsilon en italique']);
  this.executeCharTest('𝜁', ['zêta en italique', 'zêta en italique', 'zêta en italique']);
  this.executeCharTest('𝜂', ['êta en italique', 'êta en italique', 'êta en italique']);
  this.executeCharTest('𝜃', ['thêta en italique', 'thêta en italique', 'thêta en italique']);
  this.executeCharTest('𝜄', ['iota en italique', 'iota en italique', 'iota en italique']);
  this.executeCharTest('𝜅', ['kappa en italique', 'kappa en italique', 'kappa en italique']);
  this.executeCharTest('𝜆', ['lambda en italique', 'lambda en italique', 'lambda en italique']);
  this.executeCharTest('𝜇', ['mû en italique', 'mû en italique', 'mû en italique']);
  this.executeCharTest('𝜈', ['nû en italique', 'nû en italique', 'nû en italique']);
  this.executeCharTest('𝜉', ['xi en italique', 'xi en italique', 'xi en italique']);
  this.executeCharTest('𝜊', ['omicron en italique', 'omicron en italique', 'omicron en italique']);
  this.executeCharTest('𝜋', ['pi en italique', 'pi en italique', 'pi en italique']);
  this.executeCharTest('𝜌', ['rhô en italique', 'rhô en italique', 'rhô en italique']);
  this.executeCharTest('𝜍', ['sigma final en italique', 'sigma final en italique', 'sigma final en italique']);
  this.executeCharTest('𝜎', ['sigma en italique', 'sigma en italique', 'sigma en italique']);
  this.executeCharTest('𝜏', ['tau en italique', 'tau en italique', 'tau en italique']);
  this.executeCharTest('𝜐', ['upsilon en italique', 'upsilon en italique', 'upsilon en italique']);
  this.executeCharTest('𝜑', ['phi en italique', 'phi en italique', 'phi en italique']);
  this.executeCharTest('𝜒', ['chi en italique', 'chi en italique', 'chi en italique']);
  this.executeCharTest('𝜓', ['psi en italique', 'psi en italique', 'psi en italique']);
  this.executeCharTest('𝜔', ['oméga en italique', 'oméga en italique', 'oméga en italique']);
  this.executeCharTest('𝜕', ['dérivée partielle en italique', 'dérivée partielle en italique', 'dérivée partielle en italique']);
  this.executeCharTest('𝜖', ['epsilon en italique', 'epsilon en italique', 'epsilon en italique']);
  this.executeCharTest('𝜗', ['thêta en italique', 'thêta en italique', 'thêta en italique']);
  this.executeCharTest('𝜘', ['kappa en italique', 'kappa en italique', 'kappa en italique']);
  this.executeCharTest('𝜙', ['phi en italique', 'phi en italique', 'phi en italique']);
  this.executeCharTest('𝜚', ['rhô en italique', 'rhô en italique', 'rhô en italique']);
  this.executeCharTest('𝜛', ['pi en italique', 'pi en italique', 'pi en italique']);
  this.executeCharTest('𝜜', ['Alpha majuscule en italique gras', 'Alpha majuscule en italique gras', 'Alpha majuscule en italique gras']);
  this.executeCharTest('𝜝', ['Bêta majuscule en italique gras', 'Bêta majuscule en italique gras', 'Bêta majuscule en italique gras']);
  this.executeCharTest('𝜞', ['Gamma majuscule en italique gras', 'Gamma majuscule en italique gras', 'Gamma majuscule en italique gras']);
  this.executeCharTest('𝜟', ['Delta majuscule en italique gras', 'Delta majuscule en italique gras', 'Delta majuscule en italique gras']);
  this.executeCharTest('𝜠', ['Epsilon majuscule en italique gras', 'Epsilon majuscule en italique gras', 'Epsilon majuscule en italique gras']);
  this.executeCharTest('𝜡', ['Zêta majuscule en italique gras', 'Zêta majuscule en italique gras', 'Zêta majuscule en italique gras']);
  this.executeCharTest('𝜢', ['Êta majuscule en italique gras', 'Êta majuscule en italique gras', 'Êta majuscule en italique gras']);
  this.executeCharTest('𝜣', ['Thêta majuscule en italique gras', 'Thêta majuscule en italique gras', 'Thêta majuscule en italique gras']);
  this.executeCharTest('𝜤', ['Iota majuscule en italique gras', 'Iota majuscule en italique gras', 'Iota majuscule en italique gras']);
  this.executeCharTest('𝜥', ['Kappa majuscule en italique gras', 'Kappa majuscule en italique gras', 'Kappa majuscule en italique gras']);
  this.executeCharTest('𝜦', ['Lambda majuscule en italique gras', 'Lambda majuscule en italique gras', 'Lambda majuscule en italique gras']);
  this.executeCharTest('𝜧', ['Mû majuscule en italique gras', 'Mû majuscule en italique gras', 'Mû majuscule en italique gras']);
  this.executeCharTest('𝜨', ['Nû majuscule en italique gras', 'Nû majuscule en italique gras', 'Nû majuscule en italique gras']);
  this.executeCharTest('𝜩', ['Xi majuscule en italique gras', 'Xi majuscule en italique gras', 'Xi majuscule en italique gras']);
  this.executeCharTest('𝜪', ['Omicron majuscule en italique gras', 'Omicron majuscule en italique gras', 'Omicron majuscule en italique gras']);
  this.executeCharTest('𝜫', ['Pi majuscule en italique gras', 'Pi majuscule en italique gras', 'Pi majuscule en italique gras']);
  this.executeCharTest('𝜬', ['Rhô majuscule en italique gras', 'Rhô majuscule en italique gras', 'Rhô majuscule en italique gras']);
  this.executeCharTest('𝜭', ['Thêta majuscule en italique gras', 'Thêta majuscule en italique gras', 'Thêta majuscule en italique gras']);
  this.executeCharTest('𝜮', ['Sigma majuscule en italique gras', 'Sigma majuscule en italique gras', 'Sigma majuscule en italique gras']);
  this.executeCharTest('𝜯', ['Tau majuscule en italique gras', 'Tau majuscule en italique gras', 'Tau majuscule en italique gras']);
  this.executeCharTest('𝜰', ['Upsilon majuscule en italique gras', 'Upsilon majuscule en italique gras', 'Upsilon majuscule en italique gras']);
  this.executeCharTest('𝜱', ['Phi majuscule en italique gras', 'Phi majuscule en italique gras', 'Phi majuscule en italique gras']);
  this.executeCharTest('𝜲', ['Chi majuscule en italique gras', 'Chi majuscule en italique gras', 'Chi majuscule en italique gras']);
  this.executeCharTest('𝜳', ['Psi majuscule en italique gras', 'Psi majuscule en italique gras', 'Psi majuscule en italique gras']);
  this.executeCharTest('𝜴', ['Oméga majuscule en italique gras', 'Oméga majuscule en italique gras', 'Oméga majuscule en italique gras']);
  this.executeCharTest('𝜵', ['nabla en italique gras', 'nabla en italique gras', 'nabla en italique gras']);
  this.executeCharTest('𝜶', ['alpha en italique gras', 'alpha en italique gras', 'alpha en italique gras']);
  this.executeCharTest('𝜷', ['bêta en italique gras', 'bêta en italique gras', 'bêta en italique gras']);
  this.executeCharTest('𝜸', ['gamma en italique gras', 'gamma en italique gras', 'gamma en italique gras']);
  this.executeCharTest('𝜹', ['delta en italique gras', 'delta en italique gras', 'delta en italique gras']);
  this.executeCharTest('𝜺', ['epsilon en italique gras', 'epsilon en italique gras', 'epsilon en italique gras']);
  this.executeCharTest('𝜻', ['zêta en italique gras', 'zêta en italique gras', 'zêta en italique gras']);
  this.executeCharTest('𝜼', ['êta en italique gras', 'êta en italique gras', 'êta en italique gras']);
  this.executeCharTest('𝜽', ['thêta en italique gras', 'thêta en italique gras', 'thêta en italique gras']);
  this.executeCharTest('𝜾', ['iota en italique gras', 'iota en italique gras', 'iota en italique gras']);
  this.executeCharTest('𝜿', ['kappa en italique gras', 'kappa en italique gras', 'kappa en italique gras']);
  this.executeCharTest('𝝀', ['lambda en italique gras', 'lambda en italique gras', 'lambda en italique gras']);
  this.executeCharTest('𝝁', ['mû en italique gras', 'mû en italique gras', 'mû en italique gras']);
  this.executeCharTest('𝝂', ['nû en italique gras', 'nû en italique gras', 'nû en italique gras']);
  this.executeCharTest('𝝃', ['xi en italique gras', 'xi en italique gras', 'xi en italique gras']);
  this.executeCharTest('𝝄', ['omicron en italique gras', 'omicron en italique gras', 'omicron en italique gras']);
  this.executeCharTest('𝝅', ['pi en italique gras', 'pi en italique gras', 'pi en italique gras']);
  this.executeCharTest('𝝆', ['rhô en italique gras', 'rhô en italique gras', 'rhô en italique gras']);
  this.executeCharTest('𝝇', ['sigma final en italique gras', 'sigma final en italique gras', 'sigma final en italique gras']);
  this.executeCharTest('𝝈', ['sigma en italique gras', 'sigma en italique gras', 'sigma en italique gras']);
  this.executeCharTest('𝝉', ['tau en italique gras', 'tau en italique gras', 'tau en italique gras']);
  this.executeCharTest('𝝊', ['upsilon en italique gras', 'upsilon en italique gras', 'upsilon en italique gras']);
  this.executeCharTest('𝝋', ['phi en italique gras', 'phi en italique gras', 'phi en italique gras']);
  this.executeCharTest('𝝌', ['chi en italique gras', 'chi en italique gras', 'chi en italique gras']);
  this.executeCharTest('𝝍', ['psi en italique gras', 'psi en italique gras', 'psi en italique gras']);
  this.executeCharTest('𝝎', ['oméga en italique gras', 'oméga en italique gras', 'oméga en italique gras']);
  this.executeCharTest('𝝏', ['dérivée partielle en italique gras', 'dérivée partielle en italique gras', 'dérivée partielle en italique gras']);
  this.executeCharTest('𝝐', ['epsilon en italique gras', 'epsilon en italique gras', 'epsilon en italique gras']);
  this.executeCharTest('𝝑', ['thêta en italique gras', 'thêta en italique gras', 'thêta en italique gras']);
  this.executeCharTest('𝝒', ['kappa en italique gras', 'kappa en italique gras', 'kappa en italique gras']);
  this.executeCharTest('𝝓', ['phi en italique gras', 'phi en italique gras', 'phi en italique gras']);
  this.executeCharTest('𝝔', ['rhô en italique gras', 'rhô en italique gras', 'rhô en italique gras']);
  this.executeCharTest('𝝕', ['pi en italique gras', 'pi en italique gras', 'pi en italique gras']);
  this.executeCharTest('𝝖', ['Alpha majuscule en gras sans empattement', 'Alpha majuscule en gras sans empattement', 'Alpha majuscule en gras sans empattement']);
  this.executeCharTest('𝝗', ['Bêta majuscule en gras sans empattement', 'Bêta majuscule en gras sans empattement', 'Bêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝘', ['Gamma majuscule en gras sans empattement', 'Gamma majuscule en gras sans empattement', 'Gamma majuscule en gras sans empattement']);
  this.executeCharTest('𝝙', ['Delta majuscule en gras sans empattement', 'Delta majuscule en gras sans empattement', 'Delta majuscule en gras sans empattement']);
  this.executeCharTest('𝝚', ['Epsilon majuscule en gras sans empattement', 'Epsilon majuscule en gras sans empattement', 'Epsilon majuscule en gras sans empattement']);
  this.executeCharTest('𝝛', ['Zêta majuscule en gras sans empattement', 'Zêta majuscule en gras sans empattement', 'Zêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝜', ['Êta majuscule en gras sans empattement', 'Êta majuscule en gras sans empattement', 'Êta majuscule en gras sans empattement']);
  this.executeCharTest('𝝝', ['Thêta majuscule en gras sans empattement', 'Thêta majuscule en gras sans empattement', 'Thêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝞', ['Iota majuscule en gras sans empattement', 'Iota majuscule en gras sans empattement', 'Iota majuscule en gras sans empattement']);
  this.executeCharTest('𝝟', ['Kappa majuscule en gras sans empattement', 'Kappa majuscule en gras sans empattement', 'Kappa majuscule en gras sans empattement']);
  this.executeCharTest('𝝠', ['Lambda majuscule en gras sans empattement', 'Lambda majuscule en gras sans empattement', 'Lambda majuscule en gras sans empattement']);
  this.executeCharTest('𝝡', ['Mû majuscule en gras sans empattement', 'Mû majuscule en gras sans empattement', 'Mû majuscule en gras sans empattement']);
  this.executeCharTest('𝝢', ['Nû majuscule en gras sans empattement', 'Nû majuscule en gras sans empattement', 'Nû majuscule en gras sans empattement']);
  this.executeCharTest('𝝣', ['Xi majuscule en gras sans empattement', 'Xi majuscule en gras sans empattement', 'Xi majuscule en gras sans empattement']);
  this.executeCharTest('𝝤', ['Omicron majuscule en gras sans empattement', 'Omicron majuscule en gras sans empattement', 'Omicron majuscule en gras sans empattement']);
  this.executeCharTest('𝝥', ['Pi majuscule en gras sans empattement', 'Pi majuscule en gras sans empattement', 'Pi majuscule en gras sans empattement']);
  this.executeCharTest('𝝦', ['Rhô majuscule en gras sans empattement', 'Rhô majuscule en gras sans empattement', 'Rhô majuscule en gras sans empattement']);
  this.executeCharTest('𝝧', ['Thêta majuscule en gras sans empattement', 'Thêta majuscule en gras sans empattement', 'Thêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝨', ['Sigma majuscule en gras sans empattement', 'Sigma majuscule en gras sans empattement', 'Sigma majuscule en gras sans empattement']);
  this.executeCharTest('𝝩', ['Tau majuscule en gras sans empattement', 'Tau majuscule en gras sans empattement', 'Tau majuscule en gras sans empattement']);
  this.executeCharTest('𝝪', ['Upsilon majuscule en gras sans empattement', 'Upsilon majuscule en gras sans empattement', 'Upsilon majuscule en gras sans empattement']);
  this.executeCharTest('𝝫', ['Phi majuscule en gras sans empattement', 'Phi majuscule en gras sans empattement', 'Phi majuscule en gras sans empattement']);
  this.executeCharTest('𝝬', ['Chi majuscule en gras sans empattement', 'Chi majuscule en gras sans empattement', 'Chi majuscule en gras sans empattement']);
  this.executeCharTest('𝝭', ['Psi majuscule en gras sans empattement', 'Psi majuscule en gras sans empattement', 'Psi majuscule en gras sans empattement']);
  this.executeCharTest('𝝮', ['Oméga majuscule en gras sans empattement', 'Oméga majuscule en gras sans empattement', 'Oméga majuscule en gras sans empattement']);
  this.executeCharTest('𝝯', ['nabla en gras sans empattement', 'nabla en gras sans empattement', 'nabla en gras sans empattement']);
  this.executeCharTest('𝝰', ['alpha en gras sans empattement', 'alpha en gras sans empattement', 'alpha en gras sans empattement']);
  this.executeCharTest('𝝱', ['bêta en gras sans empattement', 'bêta en gras sans empattement', 'bêta en gras sans empattement']);
  this.executeCharTest('𝝲', ['gamma en gras sans empattement', 'gamma en gras sans empattement', 'gamma en gras sans empattement']);
  this.executeCharTest('𝝳', ['delta en gras sans empattement', 'delta en gras sans empattement', 'delta en gras sans empattement']);
  this.executeCharTest('𝝴', ['epsilon en gras sans empattement', 'epsilon en gras sans empattement', 'epsilon en gras sans empattement']);
  this.executeCharTest('𝝵', ['zêta en gras sans empattement', 'zêta en gras sans empattement', 'zêta en gras sans empattement']);
  this.executeCharTest('𝝶', ['êta en gras sans empattement', 'êta en gras sans empattement', 'êta en gras sans empattement']);
  this.executeCharTest('𝝷', ['thêta en gras sans empattement', 'thêta en gras sans empattement', 'thêta en gras sans empattement']);
  this.executeCharTest('𝝸', ['iota en gras sans empattement', 'iota en gras sans empattement', 'iota en gras sans empattement']);
  this.executeCharTest('𝝹', ['kappa en gras sans empattement', 'kappa en gras sans empattement', 'kappa en gras sans empattement']);
  this.executeCharTest('𝝺', ['lambda en gras sans empattement', 'lambda en gras sans empattement', 'lambda en gras sans empattement']);
  this.executeCharTest('𝝻', ['mû en gras sans empattement', 'mû en gras sans empattement', 'mû en gras sans empattement']);
  this.executeCharTest('𝝼', ['nû en gras sans empattement', 'nû en gras sans empattement', 'nû en gras sans empattement']);
  this.executeCharTest('𝝽', ['xi en gras sans empattement', 'xi en gras sans empattement', 'xi en gras sans empattement']);
  this.executeCharTest('𝝾', ['omicron en gras sans empattement', 'omicron en gras sans empattement', 'omicron en gras sans empattement']);
  this.executeCharTest('𝝿', ['pi en gras sans empattement', 'pi en gras sans empattement', 'pi en gras sans empattement']);
  this.executeCharTest('𝞀', ['rhô en gras sans empattement', 'rhô en gras sans empattement', 'rhô en gras sans empattement']);
  this.executeCharTest('𝞁', ['sigma final en gras sans empattement', 'sigma final en gras sans empattement', 'sigma final en gras sans empattement']);
  this.executeCharTest('𝞂', ['sigma en gras sans empattement', 'sigma en gras sans empattement', 'sigma en gras sans empattement']);
  this.executeCharTest('𝞃', ['tau en gras sans empattement', 'tau en gras sans empattement', 'tau en gras sans empattement']);
  this.executeCharTest('𝞄', ['upsilon en gras sans empattement', 'upsilon en gras sans empattement', 'upsilon en gras sans empattement']);
  this.executeCharTest('𝞅', ['phi en gras sans empattement', 'phi en gras sans empattement', 'phi en gras sans empattement']);
  this.executeCharTest('𝞆', ['chi en gras sans empattement', 'chi en gras sans empattement', 'chi en gras sans empattement']);
  this.executeCharTest('𝞇', ['psi en gras sans empattement', 'psi en gras sans empattement', 'psi en gras sans empattement']);
  this.executeCharTest('𝞈', ['oméga en gras sans empattement', 'oméga en gras sans empattement', 'oméga en gras sans empattement']);
  this.executeCharTest('𝞉', ['dérivée partielle en gras sans empattement', 'dérivée partielle en gras sans empattement', 'dérivée partielle en gras sans empattement']);
  this.executeCharTest('𝞊', ['epsilon en gras sans empattement', 'epsilon en gras sans empattement', 'epsilon en gras sans empattement']);
  this.executeCharTest('𝞋', ['thêta en gras sans empattement', 'thêta en gras sans empattement', 'thêta en gras sans empattement']);
  this.executeCharTest('𝞌', ['kappa en gras sans empattement', 'kappa en gras sans empattement', 'kappa en gras sans empattement']);
  this.executeCharTest('𝞍', ['phi en gras sans empattement', 'phi en gras sans empattement', 'phi en gras sans empattement']);
  this.executeCharTest('𝞎', ['rhô en gras sans empattement', 'rhô en gras sans empattement', 'rhô en gras sans empattement']);
  this.executeCharTest('𝞏', ['pi en gras sans empattement', 'pi en gras sans empattement', 'pi en gras sans empattement']);
  this.executeCharTest('𝞐', ['Alpha majuscule en italique gras sans empattement', 'Alpha majuscule en italique gras sans empattement', 'Alpha majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞑', ['Bêta majuscule en italique gras sans empattement', 'Bêta majuscule en italique gras sans empattement', 'Bêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞒', ['Gamma majuscule en italique gras sans empattement', 'Gamma majuscule en italique gras sans empattement', 'Gamma majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞓', ['Delta majuscule en italique gras sans empattement', 'Delta majuscule en italique gras sans empattement', 'Delta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞔', ['Epsilon majuscule en italique gras sans empattement', 'Epsilon majuscule en italique gras sans empattement', 'Epsilon majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞕', ['Zêta majuscule en italique gras sans empattement', 'Zêta majuscule en italique gras sans empattement', 'Zêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞖', ['Êta majuscule en italique gras sans empattement', 'Êta majuscule en italique gras sans empattement', 'Êta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞗', ['Thêta majuscule en italique gras sans empattement', 'Thêta majuscule en italique gras sans empattement', 'Thêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞘', ['Iota majuscule en italique gras sans empattement', 'Iota majuscule en italique gras sans empattement', 'Iota majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞙', ['Kappa majuscule en italique gras sans empattement', 'Kappa majuscule en italique gras sans empattement', 'Kappa majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞚', ['Lambda majuscule en italique gras sans empattement', 'Lambda majuscule en italique gras sans empattement', 'Lambda majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞛', ['Mû majuscule en italique gras sans empattement', 'Mû majuscule en italique gras sans empattement', 'Mû majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞜', ['Nû majuscule en italique gras sans empattement', 'Nû majuscule en italique gras sans empattement', 'Nû majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞝', ['Xi majuscule en italique gras sans empattement', 'Xi majuscule en italique gras sans empattement', 'Xi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞞', ['Omicron majuscule en italique gras sans empattement', 'Omicron majuscule en italique gras sans empattement', 'Omicron majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞟', ['Pi majuscule en italique gras sans empattement', 'Pi majuscule en italique gras sans empattement', 'Pi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞠', ['Rhô majuscule en italique gras sans empattement', 'Rhô majuscule en italique gras sans empattement', 'Rhô majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞡', ['Thêta majuscule en italique gras sans empattement', 'Thêta majuscule en italique gras sans empattement', 'Thêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞢', ['Sigma majuscule en italique gras sans empattement', 'Sigma majuscule en italique gras sans empattement', 'Sigma majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞣', ['Tau majuscule en italique gras sans empattement', 'Tau majuscule en italique gras sans empattement', 'Tau majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞤', ['Upsilon majuscule en italique gras sans empattement', 'Upsilon majuscule en italique gras sans empattement', 'Upsilon majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞥', ['Phi majuscule en italique gras sans empattement', 'Phi majuscule en italique gras sans empattement', 'Phi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞦', ['Chi majuscule en italique gras sans empattement', 'Chi majuscule en italique gras sans empattement', 'Chi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞧', ['Psi majuscule en italique gras sans empattement', 'Psi majuscule en italique gras sans empattement', 'Psi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞨', ['Oméga majuscule en italique gras sans empattement', 'Oméga majuscule en italique gras sans empattement', 'Oméga majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞩', ['nabla en italique gras sans empattement', 'nabla en italique gras sans empattement', 'nabla en italique gras sans empattement']);
  this.executeCharTest('𝞪', ['alpha en italique gras sans empattement', 'alpha en italique gras sans empattement', 'alpha en italique gras sans empattement']);
  this.executeCharTest('𝞫', ['bêta en italique gras sans empattement', 'bêta en italique gras sans empattement', 'bêta en italique gras sans empattement']);
  this.executeCharTest('𝞬', ['gamma en italique gras sans empattement', 'gamma en italique gras sans empattement', 'gamma en italique gras sans empattement']);
  this.executeCharTest('𝞭', ['delta en italique gras sans empattement', 'delta en italique gras sans empattement', 'delta en italique gras sans empattement']);
  this.executeCharTest('𝞮', ['epsilon en italique gras sans empattement', 'epsilon en italique gras sans empattement', 'epsilon en italique gras sans empattement']);
  this.executeCharTest('𝞯', ['zêta en italique gras sans empattement', 'zêta en italique gras sans empattement', 'zêta en italique gras sans empattement']);
  this.executeCharTest('𝞰', ['êta en italique gras sans empattement', 'êta en italique gras sans empattement', 'êta en italique gras sans empattement']);
  this.executeCharTest('𝞱', ['thêta en italique gras sans empattement', 'thêta en italique gras sans empattement', 'thêta en italique gras sans empattement']);
  this.executeCharTest('𝞲', ['iota en italique gras sans empattement', 'iota en italique gras sans empattement', 'iota en italique gras sans empattement']);
  this.executeCharTest('𝞳', ['kappa en italique gras sans empattement', 'kappa en italique gras sans empattement', 'kappa en italique gras sans empattement']);
  this.executeCharTest('𝞴', ['lambda en italique gras sans empattement', 'lambda en italique gras sans empattement', 'lambda en italique gras sans empattement']);
  this.executeCharTest('𝞵', ['mû en italique gras sans empattement', 'mû en italique gras sans empattement', 'mû en italique gras sans empattement']);
  this.executeCharTest('𝞶', ['nû en italique gras sans empattement', 'nû en italique gras sans empattement', 'nû en italique gras sans empattement']);
  this.executeCharTest('𝞷', ['xi en italique gras sans empattement', 'xi en italique gras sans empattement', 'xi en italique gras sans empattement']);
  this.executeCharTest('𝞸', ['omicron en italique gras sans empattement', 'omicron en italique gras sans empattement', 'omicron en italique gras sans empattement']);
  this.executeCharTest('𝞹', ['pi en italique gras sans empattement', 'pi en italique gras sans empattement', 'pi en italique gras sans empattement']);
  this.executeCharTest('𝞺', ['rhô en italique gras sans empattement', 'rhô en italique gras sans empattement', 'rhô en italique gras sans empattement']);
  this.executeCharTest('𝞻', ['sigma final en italique gras sans empattement', 'sigma final en italique gras sans empattement', 'sigma final en italique gras sans empattement']);
  this.executeCharTest('𝞼', ['sigma en italique gras sans empattement', 'sigma en italique gras sans empattement', 'sigma en italique gras sans empattement']);
  this.executeCharTest('𝞽', ['tau en italique gras sans empattement', 'tau en italique gras sans empattement', 'tau en italique gras sans empattement']);
  this.executeCharTest('𝞾', ['upsilon en italique gras sans empattement', 'upsilon en italique gras sans empattement', 'upsilon en italique gras sans empattement']);
  this.executeCharTest('𝞿', ['phi en italique gras sans empattement', 'phi en italique gras sans empattement', 'phi en italique gras sans empattement']);
  this.executeCharTest('𝟀', ['chi en italique gras sans empattement', 'chi en italique gras sans empattement', 'chi en italique gras sans empattement']);
  this.executeCharTest('𝟁', ['psi en italique gras sans empattement', 'psi en italique gras sans empattement', 'psi en italique gras sans empattement']);
  this.executeCharTest('𝟂', ['oméga en italique gras sans empattement', 'oméga en italique gras sans empattement', 'oméga en italique gras sans empattement']);
  this.executeCharTest('𝟃', ['dérivée partielle en italique gras sans empattement', 'dérivée partielle en italique gras sans empattement', 'dérivée partielle en italique gras sans empattement']);
  this.executeCharTest('𝟄', ['epsilon en italique gras sans empattement', 'epsilon en italique gras sans empattement', 'epsilon en italique gras sans empattement']);
  this.executeCharTest('𝟅', ['thêta en italique gras sans empattement', 'thêta en italique gras sans empattement', 'thêta en italique gras sans empattement']);
  this.executeCharTest('𝟆', ['kappa en italique gras sans empattement', 'kappa en italique gras sans empattement', 'kappa en italique gras sans empattement']);
  this.executeCharTest('𝟇', ['phi en italique gras sans empattement', 'phi en italique gras sans empattement', 'phi en italique gras sans empattement']);
  this.executeCharTest('𝟈', ['rhô en italique gras sans empattement', 'rhô en italique gras sans empattement', 'rhô en italique gras sans empattement']);
  this.executeCharTest('𝟉', ['pi en italique gras sans empattement', 'pi en italique gras sans empattement', 'pi en italique gras sans empattement']);
  this.executeCharTest('⁰', ['exposant 0', 'exposant 0', 'exposant 0']);
  this.executeCharTest('¹', ['exposant 1', 'exposant 1', 'exposant 1']);
  this.executeCharTest('²', ['au carré', 'au carré', 'au carré']);
  this.executeCharTest('³', ['cubique', 'cubique', 'cubique']);
  this.executeCharTest('⁴', ['exposant 4', 'exposant 4', 'exposant 4']);
  this.executeCharTest('⁵', ['exposant 5', 'exposant 5', 'exposant 5']);
  this.executeCharTest('⁶', ['exposant 6', 'exposant 6', 'exposant 6']);
  this.executeCharTest('⁷', ['exposant 7', 'exposant 7', 'exposant 7']);
  this.executeCharTest('⁸', ['exposant 8', 'exposant 8', 'exposant 8']);
  this.executeCharTest('⁹', ['exposant 9', 'exposant 9', 'exposant 9']);
  this.executeCharTest('₀', ['indice 0', 'indice 0', 'indice 0']);
  this.executeCharTest('₁', ['indice 1', 'indice 1', 'indice 1']);
  this.executeCharTest('₂', ['indice 2', 'indice 2', 'indice 2']);
  this.executeCharTest('₃', ['indice 3', 'indice 3', 'indice 3']);
  this.executeCharTest('₄', ['indice 4', 'indice 4', 'indice 4']);
  this.executeCharTest('₅', ['indice 5', 'indice 5', 'indice 5']);
  this.executeCharTest('₆', ['indice 6', 'indice 6', 'indice 6']);
  this.executeCharTest('₇', ['indice 7', 'indice 7', 'indice 7']);
  this.executeCharTest('₈', ['indice 8', 'indice 8', 'indice 8']);
  this.executeCharTest('₉', ['indice 9', 'indice 9', 'indice 9']);
  this.executeCharTest('⓪', ['0 encerclé', '0 encerclé', '0 encerclé']);
  this.executeCharTest('①', ['1 encerclé', '1 encerclé', '1 encerclé']);
  this.executeCharTest('②', ['2 encerclé', '2 encerclé', '2 encerclé']);
  this.executeCharTest('③', ['3 encerclé', '3 encerclé', '3 encerclé']);
  this.executeCharTest('④', ['4 encerclé', '4 encerclé', '4 encerclé']);
  this.executeCharTest('⑤', ['5 encerclé', '5 encerclé', '5 encerclé']);
  this.executeCharTest('⑥', ['6 encerclé', '6 encerclé', '6 encerclé']);
  this.executeCharTest('⑦', ['7 encerclé', '7 encerclé', '7 encerclé']);
  this.executeCharTest('⑧', ['8 encerclé', '8 encerclé', '8 encerclé']);
  this.executeCharTest('⑨', ['9 encerclé', '9 encerclé', '9 encerclé']);
  this.executeCharTest('⑩', ['10 encerclé', '10 encerclé', '10 encerclé']);
  this.executeCharTest('⑪', ['11 encerclé', '11 encerclé', '11 encerclé']);
  this.executeCharTest('⑫', ['12 encerclé', '12 encerclé', '12 encerclé']);
  this.executeCharTest('⑬', ['13 encerclé', '13 encerclé', '13 encerclé']);
  this.executeCharTest('⑭', ['14 encerclé', '14 encerclé', '14 encerclé']);
  this.executeCharTest('⑮', ['15 encerclé', '15 encerclé', '15 encerclé']);
  this.executeCharTest('⑯', ['16 encerclé', '16 encerclé', '16 encerclé']);
  this.executeCharTest('⑰', ['17 encerclé', '17 encerclé', '17 encerclé']);
  this.executeCharTest('⑱', ['18 encerclé', '18 encerclé', '18 encerclé']);
  this.executeCharTest('⑲', ['19 encerclé', '19 encerclé', '19 encerclé']);
  this.executeCharTest('⑳', ['20 encerclé', '20 encerclé', '20 encerclé']);
  this.executeCharTest('㉑', ['21 encerclé', '21 encerclé', '21 encerclé']);
  this.executeCharTest('㉒', ['22 encerclé', '22 encerclé', '22 encerclé']);
  this.executeCharTest('㉓', ['23 encerclé', '23 encerclé', '23 encerclé']);
  this.executeCharTest('㉔', ['24 encerclé', '24 encerclé', '24 encerclé']);
  this.executeCharTest('㉕', ['25 encerclé', '25 encerclé', '25 encerclé']);
  this.executeCharTest('㉖', ['26 encerclé', '26 encerclé', '26 encerclé']);
  this.executeCharTest('㉗', ['27 encerclé', '27 encerclé', '27 encerclé']);
  this.executeCharTest('㉘', ['28 encerclé', '28 encerclé', '28 encerclé']);
  this.executeCharTest('㉙', ['29 encerclé', '29 encerclé', '29 encerclé']);
  this.executeCharTest('㉚', ['30 encerclé', '30 encerclé', '30 encerclé']);
  this.executeCharTest('㉛', ['31 encerclé', '31 encerclé', '31 encerclé']);
  this.executeCharTest('㉜', ['32 encerclé', '32 encerclé', '32 encerclé']);
  this.executeCharTest('㉝', ['33 encerclé', '33 encerclé', '33 encerclé']);
  this.executeCharTest('㉞', ['34 encerclé', '34 encerclé', '34 encerclé']);
  this.executeCharTest('㉟', ['35 encerclé', '35 encerclé', '35 encerclé']);
  this.executeCharTest('㊱', ['36 encerclé', '36 encerclé', '36 encerclé']);
  this.executeCharTest('㊲', ['37 encerclé', '37 encerclé', '37 encerclé']);
  this.executeCharTest('㊳', ['38 encerclé', '38 encerclé', '38 encerclé']);
  this.executeCharTest('㊴', ['39 encerclé', '39 encerclé', '39 encerclé']);
  this.executeCharTest('㊵', ['40 encerclé', '40 encerclé', '40 encerclé']);
  this.executeCharTest('㊶', ['41 encerclé', '41 encerclé', '41 encerclé']);
  this.executeCharTest('㊷', ['42 encerclé', '42 encerclé', '42 encerclé']);
  this.executeCharTest('㊸', ['43 encerclé', '43 encerclé', '43 encerclé']);
  this.executeCharTest('㊹', ['44 encerclé', '44 encerclé', '44 encerclé']);
  this.executeCharTest('㊺', ['45 encerclé', '45 encerclé', '45 encerclé']);
  this.executeCharTest('㊻', ['46 encerclé', '46 encerclé', '46 encerclé']);
  this.executeCharTest('㊼', ['47 encerclé', '47 encerclé', '47 encerclé']);
  this.executeCharTest('㊽', ['48 encerclé', '48 encerclé', '48 encerclé']);
  this.executeCharTest('㊾', ['49 encerclé', '49 encerclé', '49 encerclé']);
  this.executeCharTest('㊿', ['50 encerclé', '50 encerclé', '50 encerclé']);
  this.executeCharTest('⑴', ['1 entre parenthèses', '1 entre parenthèses', '1 entre parenthèses']);
  this.executeCharTest('⑵', ['2 entre parenthèses', '2 entre parenthèses', '2 entre parenthèses']);
  this.executeCharTest('⑶', ['3 entre parenthèses', '3 entre parenthèses', '3 entre parenthèses']);
  this.executeCharTest('⑷', ['4 entre parenthèses', '4 entre parenthèses', '4 entre parenthèses']);
  this.executeCharTest('⑸', ['5 entre parenthèses', '5 entre parenthèses', '5 entre parenthèses']);
  this.executeCharTest('⑹', ['6 entre parenthèses', '6 entre parenthèses', '6 entre parenthèses']);
  this.executeCharTest('⑺', ['7 entre parenthèses', '7 entre parenthèses', '7 entre parenthèses']);
  this.executeCharTest('⑻', ['8 entre parenthèses', '8 entre parenthèses', '8 entre parenthèses']);
  this.executeCharTest('⑼', ['9 entre parenthèses', '9 entre parenthèses', '9 entre parenthèses']);
  this.executeCharTest('⑽', ['10 entre parenthèses', '10 entre parenthèses', '10 entre parenthèses']);
  this.executeCharTest('⑾', ['11 entre parenthèses', '11 entre parenthèses', '11 entre parenthèses']);
  this.executeCharTest('⑿', ['12 entre parenthèses', '12 entre parenthèses', '12 entre parenthèses']);
  this.executeCharTest('⒀', ['13 entre parenthèses', '13 entre parenthèses', '13 entre parenthèses']);
  this.executeCharTest('⒁', ['14 entre parenthèses', '14 entre parenthèses', '14 entre parenthèses']);
  this.executeCharTest('⒂', ['15 entre parenthèses', '15 entre parenthèses', '15 entre parenthèses']);
  this.executeCharTest('⒃', ['16 entre parenthèses', '16 entre parenthèses', '16 entre parenthèses']);
  this.executeCharTest('⒄', ['17 entre parenthèses', '17 entre parenthèses', '17 entre parenthèses']);
  this.executeCharTest('⒅', ['18 entre parenthèses', '18 entre parenthèses', '18 entre parenthèses']);
  this.executeCharTest('⒆', ['19 entre parenthèses', '19 entre parenthèses', '19 entre parenthèses']);
  this.executeCharTest('⒇', ['20 entre parenthèses', '20 entre parenthèses', '20 entre parenthèses']);
  this.executeCharTest('🄀', ['0 un point', '0 un point', '0 un point']);
  this.executeCharTest('⒈', ['1 un point', '1 un point', '1 un point']);
  this.executeCharTest('⒉', ['2 un point', '2 un point', '2 un point']);
  this.executeCharTest('⒊', ['3 un point', '3 un point', '3 un point']);
  this.executeCharTest('⒋', ['4 un point', '4 un point', '4 un point']);
  this.executeCharTest('⒌', ['5 un point', '5 un point', '5 un point']);
  this.executeCharTest('⒍', ['6 un point', '6 un point', '6 un point']);
  this.executeCharTest('⒎', ['7 un point', '7 un point', '7 un point']);
  this.executeCharTest('⒏', ['8 un point', '8 un point', '8 un point']);
  this.executeCharTest('⒐', ['9 un point', '9 un point', '9 un point']);
  this.executeCharTest('⒑', ['10 un point', '10 un point', '10 un point']);
  this.executeCharTest('⒒', ['11 un point', '11 un point', '11 un point']);
  this.executeCharTest('⒓', ['12 un point', '12 un point', '12 un point']);
  this.executeCharTest('⒔', ['13 un point', '13 un point', '13 un point']);
  this.executeCharTest('⒕', ['14 un point', '14 un point', '14 un point']);
  this.executeCharTest('⒖', ['15 un point', '15 un point', '15 un point']);
  this.executeCharTest('⒗', ['16 un point', '16 un point', '16 un point']);
  this.executeCharTest('⒘', ['17 un point', '17 un point', '17 un point']);
  this.executeCharTest('⒙', ['18 un point', '18 un point', '18 un point']);
  this.executeCharTest('⒚', ['19 un point', '19 un point', '19 un point']);
  this.executeCharTest('⒛', ['20 un point', '20 un point', '20 un point']);
  this.executeCharTest('⓿', ['0 encerclé noir', '0 encerclé noir', '0 encerclé noir']);
  this.executeCharTest('❶', ['1 encerclé noir', '1 encerclé noir', '1 encerclé noir']);
  this.executeCharTest('❷', ['2 encerclé noir', '2 encerclé noir', '2 encerclé noir']);
  this.executeCharTest('❸', ['3 encerclé noir', '3 encerclé noir', '3 encerclé noir']);
  this.executeCharTest('❹', ['4 encerclé noir', '4 encerclé noir', '4 encerclé noir']);
  this.executeCharTest('❺', ['5 encerclé noir', '5 encerclé noir', '5 encerclé noir']);
  this.executeCharTest('❻', ['6 encerclé noir', '6 encerclé noir', '6 encerclé noir']);
  this.executeCharTest('❼', ['7 encerclé noir', '7 encerclé noir', '7 encerclé noir']);
  this.executeCharTest('❽', ['8 encerclé noir', '8 encerclé noir', '8 encerclé noir']);
  this.executeCharTest('❾', ['9 encerclé noir', '9 encerclé noir', '9 encerclé noir']);
  this.executeCharTest('❿', ['10 encerclé noir', '10 encerclé noir', '10 encerclé noir']);
  this.executeCharTest('⓫', ['11 encerclé noir', '11 encerclé noir', '11 encerclé noir']);
  this.executeCharTest('⓬', ['12 encerclé noir', '12 encerclé noir', '12 encerclé noir']);
  this.executeCharTest('⓭', ['13 encerclé noir', '13 encerclé noir', '13 encerclé noir']);
  this.executeCharTest('⓮', ['14 encerclé noir', '14 encerclé noir', '14 encerclé noir']);
  this.executeCharTest('⓯', ['15 encerclé noir', '15 encerclé noir', '15 encerclé noir']);
  this.executeCharTest('⓰', ['16 encerclé noir', '16 encerclé noir', '16 encerclé noir']);
  this.executeCharTest('⓱', ['17 encerclé noir', '17 encerclé noir', '17 encerclé noir']);
  this.executeCharTest('⓲', ['18 encerclé noir', '18 encerclé noir', '18 encerclé noir']);
  this.executeCharTest('⓳', ['19 encerclé noir', '19 encerclé noir', '19 encerclé noir']);
  this.executeCharTest('⓴', ['20 encerclé noir', '20 encerclé noir', '20 encerclé noir']);
  this.executeCharTest('⓵', ['1 encerclé double', '1 encerclé double', '1 encerclé double']);
  this.executeCharTest('⓶', ['2 encerclé double', '2 encerclé double', '2 encerclé double']);
  this.executeCharTest('⓷', ['3 encerclé double', '3 encerclé double', '3 encerclé double']);
  this.executeCharTest('⓸', ['4 encerclé double', '4 encerclé double', '4 encerclé double']);
  this.executeCharTest('⓹', ['5 encerclé double', '5 encerclé double', '5 encerclé double']);
  this.executeCharTest('⓺', ['6 encerclé double', '6 encerclé double', '6 encerclé double']);
  this.executeCharTest('⓻', ['7 encerclé double', '7 encerclé double', '7 encerclé double']);
  this.executeCharTest('⓼', ['8 encerclé double', '8 encerclé double', '8 encerclé double']);
  this.executeCharTest('⓽', ['9 encerclé double', '9 encerclé double', '9 encerclé double']);
  this.executeCharTest('⓾', ['10 encerclé double', '10 encerclé double', '10 encerclé double']);
  this.executeCharTest('🄋', ['0 sans empattement encerclé', '0 sans empattement encerclé', '0 sans empattement encerclé']);
  this.executeCharTest('➀', ['1 sans empattement encerclé', '1 sans empattement encerclé', '1 sans empattement encerclé']);
  this.executeCharTest('➁', ['2 sans empattement encerclé', '2 sans empattement encerclé', '2 sans empattement encerclé']);
  this.executeCharTest('➂', ['3 sans empattement encerclé', '3 sans empattement encerclé', '3 sans empattement encerclé']);
  this.executeCharTest('➃', ['4 sans empattement encerclé', '4 sans empattement encerclé', '4 sans empattement encerclé']);
  this.executeCharTest('➄', ['5 sans empattement encerclé', '5 sans empattement encerclé', '5 sans empattement encerclé']);
  this.executeCharTest('➅', ['6 sans empattement encerclé', '6 sans empattement encerclé', '6 sans empattement encerclé']);
  this.executeCharTest('➆', ['7 sans empattement encerclé', '7 sans empattement encerclé', '7 sans empattement encerclé']);
  this.executeCharTest('➇', ['8 sans empattement encerclé', '8 sans empattement encerclé', '8 sans empattement encerclé']);
  this.executeCharTest('➈', ['9 sans empattement encerclé', '9 sans empattement encerclé', '9 sans empattement encerclé']);
  this.executeCharTest('➉', ['10 sans empattement encerclé', '10 sans empattement encerclé', '10 sans empattement encerclé']);
  this.executeCharTest('🄌', ['0 sans empattement encerclé noir', '0 sans empattement encerclé noir', '0 sans empattement encerclé noir']);
  this.executeCharTest('➊', ['1 sans empattement encerclé noir', '1 sans empattement encerclé noir', '1 sans empattement encerclé noir']);
  this.executeCharTest('➋', ['2 sans empattement encerclé noir', '2 sans empattement encerclé noir', '2 sans empattement encerclé noir']);
  this.executeCharTest('➌', ['3 sans empattement encerclé noir', '3 sans empattement encerclé noir', '3 sans empattement encerclé noir']);
  this.executeCharTest('➍', ['4 sans empattement encerclé noir', '4 sans empattement encerclé noir', '4 sans empattement encerclé noir']);
  this.executeCharTest('➎', ['5 sans empattement encerclé noir', '5 sans empattement encerclé noir', '5 sans empattement encerclé noir']);
  this.executeCharTest('➏', ['6 sans empattement encerclé noir', '6 sans empattement encerclé noir', '6 sans empattement encerclé noir']);
  this.executeCharTest('➐', ['7 sans empattement encerclé noir', '7 sans empattement encerclé noir', '7 sans empattement encerclé noir']);
  this.executeCharTest('➑', ['8 sans empattement encerclé noir', '8 sans empattement encerclé noir', '8 sans empattement encerclé noir']);
  this.executeCharTest('➒', ['9 sans empattement encerclé noir', '9 sans empattement encerclé noir', '9 sans empattement encerclé noir']);
  this.executeCharTest('➓', ['10 sans empattement encerclé noir', '10 sans empattement encerclé noir', '10 sans empattement encerclé noir']);
  this.executeCharTest('０', ['0', '0', '0']);
  this.executeCharTest('１', ['1', '1', '1']);
  this.executeCharTest('２', ['2', '2', '2']);
  this.executeCharTest('３', ['3', '3', '3']);
  this.executeCharTest('４', ['4', '4', '4']);
  this.executeCharTest('５', ['5', '5', '5']);
  this.executeCharTest('６', ['6', '6', '6']);
  this.executeCharTest('７', ['7', '7', '7']);
  this.executeCharTest('８', ['8', '8', '8']);
  this.executeCharTest('９', ['9', '9', '9']);
  this.executeCharTest('𝟎', ['0 en gras', '0 en gras', '0 en gras']);
  this.executeCharTest('𝟏', ['1 en gras', '1 en gras', '1 en gras']);
  this.executeCharTest('𝟐', ['2 en gras', '2 en gras', '2 en gras']);
  this.executeCharTest('𝟑', ['3 en gras', '3 en gras', '3 en gras']);
  this.executeCharTest('𝟒', ['4 en gras', '4 en gras', '4 en gras']);
  this.executeCharTest('𝟓', ['5 en gras', '5 en gras', '5 en gras']);
  this.executeCharTest('𝟔', ['6 en gras', '6 en gras', '6 en gras']);
  this.executeCharTest('𝟕', ['7 en gras', '7 en gras', '7 en gras']);
  this.executeCharTest('𝟖', ['8 en gras', '8 en gras', '8 en gras']);
  this.executeCharTest('𝟗', ['9 en gras', '9 en gras', '9 en gras']);
  this.executeCharTest('𝟘', ['0 ajouré', '0 ajouré', '0 ajouré']);
  this.executeCharTest('𝟙', ['1 ajouré', '1 ajouré', '1 ajouré']);
  this.executeCharTest('𝟚', ['2 ajouré', '2 ajouré', '2 ajouré']);
  this.executeCharTest('𝟛', ['3 ajouré', '3 ajouré', '3 ajouré']);
  this.executeCharTest('𝟜', ['4 ajouré', '4 ajouré', '4 ajouré']);
  this.executeCharTest('𝟝', ['5 ajouré', '5 ajouré', '5 ajouré']);
  this.executeCharTest('𝟞', ['6 ajouré', '6 ajouré', '6 ajouré']);
  this.executeCharTest('𝟟', ['7 ajouré', '7 ajouré', '7 ajouré']);
  this.executeCharTest('𝟠', ['8 ajouré', '8 ajouré', '8 ajouré']);
  this.executeCharTest('𝟡', ['9 ajouré', '9 ajouré', '9 ajouré']);
  this.executeCharTest('𝟢', ['0 sans empattement', '0 sans empattement', '0 sans empattement']);
  this.executeCharTest('𝟣', ['1 sans empattement', '1 sans empattement', '1 sans empattement']);
  this.executeCharTest('𝟤', ['2 sans empattement', '2 sans empattement', '2 sans empattement']);
  this.executeCharTest('𝟥', ['3 sans empattement', '3 sans empattement', '3 sans empattement']);
  this.executeCharTest('𝟦', ['4 sans empattement', '4 sans empattement', '4 sans empattement']);
  this.executeCharTest('𝟧', ['5 sans empattement', '5 sans empattement', '5 sans empattement']);
  this.executeCharTest('𝟨', ['6 sans empattement', '6 sans empattement', '6 sans empattement']);
  this.executeCharTest('𝟩', ['7 sans empattement', '7 sans empattement', '7 sans empattement']);
  this.executeCharTest('𝟪', ['8 sans empattement', '8 sans empattement', '8 sans empattement']);
  this.executeCharTest('𝟫', ['9 sans empattement', '9 sans empattement', '9 sans empattement']);
  this.executeCharTest('𝟬', ['0 en gras sans empattement', '0 en gras sans empattement', '0 en gras sans empattement']);
  this.executeCharTest('𝟭', ['1 en gras sans empattement', '1 en gras sans empattement', '1 en gras sans empattement']);
  this.executeCharTest('𝟮', ['2 en gras sans empattement', '2 en gras sans empattement', '2 en gras sans empattement']);
  this.executeCharTest('𝟯', ['3 en gras sans empattement', '3 en gras sans empattement', '3 en gras sans empattement']);
  this.executeCharTest('𝟰', ['4 en gras sans empattement', '4 en gras sans empattement', '4 en gras sans empattement']);
  this.executeCharTest('𝟱', ['5 en gras sans empattement', '5 en gras sans empattement', '5 en gras sans empattement']);
  this.executeCharTest('𝟲', ['6 en gras sans empattement', '6 en gras sans empattement', '6 en gras sans empattement']);
  this.executeCharTest('𝟳', ['7 en gras sans empattement', '7 en gras sans empattement', '7 en gras sans empattement']);
  this.executeCharTest('𝟴', ['8 en gras sans empattement', '8 en gras sans empattement', '8 en gras sans empattement']);
  this.executeCharTest('𝟵', ['9 en gras sans empattement', '9 en gras sans empattement', '9 en gras sans empattement']);
  this.executeCharTest('𝟶', ['0 en chasse fixe', '0 en chasse fixe', '0 en chasse fixe']);
  this.executeCharTest('𝟷', ['1 en chasse fixe', '1 en chasse fixe', '1 en chasse fixe']);
  this.executeCharTest('𝟸', ['2 en chasse fixe', '2 en chasse fixe', '2 en chasse fixe']);
  this.executeCharTest('𝟹', ['3 en chasse fixe', '3 en chasse fixe', '3 en chasse fixe']);
  this.executeCharTest('𝟺', ['4 en chasse fixe', '4 en chasse fixe', '4 en chasse fixe']);
  this.executeCharTest('𝟻', ['5 en chasse fixe', '5 en chasse fixe', '5 en chasse fixe']);
  this.executeCharTest('𝟼', ['6 en chasse fixe', '6 en chasse fixe', '6 en chasse fixe']);
  this.executeCharTest('𝟽', ['7 en chasse fixe', '7 en chasse fixe', '7 en chasse fixe']);
  this.executeCharTest('𝟾', ['8 en chasse fixe', '8 en chasse fixe', '8 en chasse fixe']);
  this.executeCharTest('𝟿', ['9 en chasse fixe', '9 en chasse fixe', '9 en chasse fixe']);
  this.executeCharTest('🄁', ['0 virgule', '0 virgule', '0 virgule']);
  this.executeCharTest('🄂', ['1 virgule', '1 virgule', '1 virgule']);
  this.executeCharTest('🄃', ['2 virgule', '2 virgule', '2 virgule']);
  this.executeCharTest('🄄', ['3 virgule', '3 virgule', '3 virgule']);
  this.executeCharTest('🄅', ['4 virgule', '4 virgule', '4 virgule']);
  this.executeCharTest('🄆', ['5 virgule', '5 virgule', '5 virgule']);
  this.executeCharTest('🄇', ['6 virgule', '6 virgule', '6 virgule']);
  this.executeCharTest('🄈', ['7 virgule', '7 virgule', '7 virgule']);
  this.executeCharTest('🄉', ['8 virgule', '8 virgule', '8 virgule']);
  this.executeCharTest('🄊', ['9 virgule', '9 virgule', '9 virgule']);
  this.executeCharTest('Ⓐ', ['A majuscule encerclé', 'A majuscule encerclé', 'A majuscule encerclé']);
  this.executeCharTest('Ⓑ', ['B majuscule encerclé', 'B majuscule encerclé', 'B majuscule encerclé']);
  this.executeCharTest('Ⓒ', ['C majuscule encerclé', 'C majuscule encerclé', 'C majuscule encerclé']);
  this.executeCharTest('Ⓓ', ['D majuscule encerclé', 'D majuscule encerclé', 'D majuscule encerclé']);
  this.executeCharTest('Ⓔ', ['E majuscule encerclé', 'E majuscule encerclé', 'E majuscule encerclé']);
  this.executeCharTest('Ⓕ', ['F majuscule encerclé', 'F majuscule encerclé', 'F majuscule encerclé']);
  this.executeCharTest('Ⓖ', ['G majuscule encerclé', 'G majuscule encerclé', 'G majuscule encerclé']);
  this.executeCharTest('Ⓗ', ['H majuscule encerclé', 'H majuscule encerclé', 'H majuscule encerclé']);
  this.executeCharTest('Ⓘ', ['I majuscule encerclé', 'I majuscule encerclé', 'I majuscule encerclé']);
  this.executeCharTest('Ⓙ', ['J majuscule encerclé', 'J majuscule encerclé', 'J majuscule encerclé']);
  this.executeCharTest('Ⓚ', ['K majuscule encerclé', 'K majuscule encerclé', 'K majuscule encerclé']);
  this.executeCharTest('Ⓛ', ['L majuscule encerclé', 'L majuscule encerclé', 'L majuscule encerclé']);
  this.executeCharTest('Ⓜ', ['M majuscule encerclé', 'M majuscule encerclé', 'M majuscule encerclé']);
  this.executeCharTest('Ⓝ', ['N majuscule encerclé', 'N majuscule encerclé', 'N majuscule encerclé']);
  this.executeCharTest('Ⓞ', ['O majuscule encerclé', 'O majuscule encerclé', 'O majuscule encerclé']);
  this.executeCharTest('Ⓟ', ['P majuscule encerclé', 'P majuscule encerclé', 'P majuscule encerclé']);
  this.executeCharTest('Ⓠ', ['Q majuscule encerclé', 'Q majuscule encerclé', 'Q majuscule encerclé']);
  this.executeCharTest('Ⓡ', ['R majuscule encerclé', 'R majuscule encerclé', 'R majuscule encerclé']);
  this.executeCharTest('Ⓢ', ['S majuscule encerclé', 'S majuscule encerclé', 'S majuscule encerclé']);
  this.executeCharTest('Ⓣ', ['T majuscule encerclé', 'T majuscule encerclé', 'T majuscule encerclé']);
  this.executeCharTest('Ⓤ', ['U majuscule encerclé', 'U majuscule encerclé', 'U majuscule encerclé']);
  this.executeCharTest('Ⓥ', ['V majuscule encerclé', 'V majuscule encerclé', 'V majuscule encerclé']);
  this.executeCharTest('Ⓦ', ['W majuscule encerclé', 'W majuscule encerclé', 'W majuscule encerclé']);
  this.executeCharTest('Ⓧ', ['X majuscule encerclé', 'X majuscule encerclé', 'X majuscule encerclé']);
  this.executeCharTest('Ⓨ', ['Y majuscule encerclé', 'Y majuscule encerclé', 'Y majuscule encerclé']);
  this.executeCharTest('Ⓩ', ['Z majuscule encerclé', 'Z majuscule encerclé', 'Z majuscule encerclé']);
  this.executeCharTest('ⓐ', ['a encerclé', 'a encerclé', 'a encerclé']);
  this.executeCharTest('ⓑ', ['b encerclé', 'b encerclé', 'b encerclé']);
  this.executeCharTest('ⓒ', ['c encerclé', 'c encerclé', 'c encerclé']);
  this.executeCharTest('ⓓ', ['d encerclé', 'd encerclé', 'd encerclé']);
  this.executeCharTest('ⓔ', ['e encerclé', 'e encerclé', 'e encerclé']);
  this.executeCharTest('ⓕ', ['f encerclé', 'f encerclé', 'f encerclé']);
  this.executeCharTest('ⓖ', ['g encerclé', 'g encerclé', 'g encerclé']);
  this.executeCharTest('ⓗ', ['h encerclé', 'h encerclé', 'h encerclé']);
  this.executeCharTest('ⓘ', ['i encerclé', 'i encerclé', 'i encerclé']);
  this.executeCharTest('ⓙ', ['j encerclé', 'j encerclé', 'j encerclé']);
  this.executeCharTest('ⓚ', ['k encerclé', 'k encerclé', 'k encerclé']);
  this.executeCharTest('ⓛ', ['l encerclé', 'l encerclé', 'l encerclé']);
  this.executeCharTest('ⓜ', ['m encerclé', 'm encerclé', 'm encerclé']);
  this.executeCharTest('ⓝ', ['n encerclé', 'n encerclé', 'n encerclé']);
  this.executeCharTest('ⓞ', ['o encerclé', 'o encerclé', 'o encerclé']);
  this.executeCharTest('ⓟ', ['p encerclé', 'p encerclé', 'p encerclé']);
  this.executeCharTest('ⓠ', ['q encerclé', 'q encerclé', 'q encerclé']);
  this.executeCharTest('ⓡ', ['r encerclé', 'r encerclé', 'r encerclé']);
  this.executeCharTest('ⓢ', ['s encerclé', 's encerclé', 's encerclé']);
  this.executeCharTest('ⓣ', ['t encerclé', 't encerclé', 't encerclé']);
  this.executeCharTest('ⓤ', ['u encerclé', 'u encerclé', 'u encerclé']);
  this.executeCharTest('ⓥ', ['v encerclé', 'v encerclé', 'v encerclé']);
  this.executeCharTest('ⓦ', ['w encerclé', 'w encerclé', 'w encerclé']);
  this.executeCharTest('ⓧ', ['x encerclé', 'x encerclé', 'x encerclé']);
  this.executeCharTest('ⓨ', ['y encerclé', 'y encerclé', 'y encerclé']);
  this.executeCharTest('ⓩ', ['z encerclé', 'z encerclé', 'z encerclé']);
  this.executeCharTest('🄐', ['A majuscule entre parenthèses', 'A majuscule entre parenthèses', 'A majuscule entre parenthèses']);
  this.executeCharTest('🄑', ['B majuscule entre parenthèses', 'B majuscule entre parenthèses', 'B majuscule entre parenthèses']);
  this.executeCharTest('🄒', ['C majuscule entre parenthèses', 'C majuscule entre parenthèses', 'C majuscule entre parenthèses']);
  this.executeCharTest('🄓', ['D majuscule entre parenthèses', 'D majuscule entre parenthèses', 'D majuscule entre parenthèses']);
  this.executeCharTest('🄔', ['E majuscule entre parenthèses', 'E majuscule entre parenthèses', 'E majuscule entre parenthèses']);
  this.executeCharTest('🄕', ['F majuscule entre parenthèses', 'F majuscule entre parenthèses', 'F majuscule entre parenthèses']);
  this.executeCharTest('🄖', ['G majuscule entre parenthèses', 'G majuscule entre parenthèses', 'G majuscule entre parenthèses']);
  this.executeCharTest('🄗', ['H majuscule entre parenthèses', 'H majuscule entre parenthèses', 'H majuscule entre parenthèses']);
  this.executeCharTest('🄘', ['I majuscule entre parenthèses', 'I majuscule entre parenthèses', 'I majuscule entre parenthèses']);
  this.executeCharTest('🄙', ['J majuscule entre parenthèses', 'J majuscule entre parenthèses', 'J majuscule entre parenthèses']);
  this.executeCharTest('🄚', ['K majuscule entre parenthèses', 'K majuscule entre parenthèses', 'K majuscule entre parenthèses']);
  this.executeCharTest('🄛', ['L majuscule entre parenthèses', 'L majuscule entre parenthèses', 'L majuscule entre parenthèses']);
  this.executeCharTest('🄜', ['M majuscule entre parenthèses', 'M majuscule entre parenthèses', 'M majuscule entre parenthèses']);
  this.executeCharTest('🄝', ['N majuscule entre parenthèses', 'N majuscule entre parenthèses', 'N majuscule entre parenthèses']);
  this.executeCharTest('🄞', ['O majuscule entre parenthèses', 'O majuscule entre parenthèses', 'O majuscule entre parenthèses']);
  this.executeCharTest('🄟', ['P majuscule entre parenthèses', 'P majuscule entre parenthèses', 'P majuscule entre parenthèses']);
  this.executeCharTest('🄠', ['Q majuscule entre parenthèses', 'Q majuscule entre parenthèses', 'Q majuscule entre parenthèses']);
  this.executeCharTest('🄡', ['R majuscule entre parenthèses', 'R majuscule entre parenthèses', 'R majuscule entre parenthèses']);
  this.executeCharTest('🄢', ['S majuscule entre parenthèses', 'S majuscule entre parenthèses', 'S majuscule entre parenthèses']);
  this.executeCharTest('🄣', ['T majuscule entre parenthèses', 'T majuscule entre parenthèses', 'T majuscule entre parenthèses']);
  this.executeCharTest('🄤', ['U majuscule entre parenthèses', 'U majuscule entre parenthèses', 'U majuscule entre parenthèses']);
  this.executeCharTest('🄥', ['V majuscule entre parenthèses', 'V majuscule entre parenthèses', 'V majuscule entre parenthèses']);
  this.executeCharTest('🄦', ['W majuscule entre parenthèses', 'W majuscule entre parenthèses', 'W majuscule entre parenthèses']);
  this.executeCharTest('🄧', ['X majuscule entre parenthèses', 'X majuscule entre parenthèses', 'X majuscule entre parenthèses']);
  this.executeCharTest('🄨', ['Y majuscule entre parenthèses', 'Y majuscule entre parenthèses', 'Y majuscule entre parenthèses']);
  this.executeCharTest('🄩', ['Z majuscule entre parenthèses', 'Z majuscule entre parenthèses', 'Z majuscule entre parenthèses']);
  this.executeCharTest('⒜', ['a entre parenthèses', 'a entre parenthèses', 'a entre parenthèses']);
  this.executeCharTest('⒝', ['b entre parenthèses', 'b entre parenthèses', 'b entre parenthèses']);
  this.executeCharTest('⒞', ['c entre parenthèses', 'c entre parenthèses', 'c entre parenthèses']);
  this.executeCharTest('⒟', ['d entre parenthèses', 'd entre parenthèses', 'd entre parenthèses']);
  this.executeCharTest('⒠', ['e entre parenthèses', 'e entre parenthèses', 'e entre parenthèses']);
  this.executeCharTest('⒡', ['f entre parenthèses', 'f entre parenthèses', 'f entre parenthèses']);
  this.executeCharTest('⒢', ['g entre parenthèses', 'g entre parenthèses', 'g entre parenthèses']);
  this.executeCharTest('⒣', ['h entre parenthèses', 'h entre parenthèses', 'h entre parenthèses']);
  this.executeCharTest('⒤', ['i entre parenthèses', 'i entre parenthèses', 'i entre parenthèses']);
  this.executeCharTest('⒥', ['j entre parenthèses', 'j entre parenthèses', 'j entre parenthèses']);
  this.executeCharTest('⒦', ['k entre parenthèses', 'k entre parenthèses', 'k entre parenthèses']);
  this.executeCharTest('⒧', ['l entre parenthèses', 'l entre parenthèses', 'l entre parenthèses']);
  this.executeCharTest('⒨', ['m entre parenthèses', 'm entre parenthèses', 'm entre parenthèses']);
  this.executeCharTest('⒩', ['n entre parenthèses', 'n entre parenthèses', 'n entre parenthèses']);
  this.executeCharTest('⒪', ['o entre parenthèses', 'o entre parenthèses', 'o entre parenthèses']);
  this.executeCharTest('⒫', ['p entre parenthèses', 'p entre parenthèses', 'p entre parenthèses']);
  this.executeCharTest('⒬', ['q entre parenthèses', 'q entre parenthèses', 'q entre parenthèses']);
  this.executeCharTest('⒭', ['r entre parenthèses', 'r entre parenthèses', 'r entre parenthèses']);
  this.executeCharTest('⒮', ['s entre parenthèses', 's entre parenthèses', 's entre parenthèses']);
  this.executeCharTest('⒯', ['t entre parenthèses', 't entre parenthèses', 't entre parenthèses']);
  this.executeCharTest('⒰', ['u entre parenthèses', 'u entre parenthèses', 'u entre parenthèses']);
  this.executeCharTest('⒱', ['v entre parenthèses', 'v entre parenthèses', 'v entre parenthèses']);
  this.executeCharTest('⒲', ['w entre parenthèses', 'w entre parenthèses', 'w entre parenthèses']);
  this.executeCharTest('⒳', ['x entre parenthèses', 'x entre parenthèses', 'x entre parenthèses']);
  this.executeCharTest('⒴', ['y entre parenthèses', 'y entre parenthèses', 'y entre parenthèses']);
  this.executeCharTest('⒵', ['z entre parenthèses', 'z entre parenthèses', 'z entre parenthèses']);
  this.executeCharTest('🄰', ['A majuscule encadré', 'A majuscule encadré', 'A majuscule encadré']);
  this.executeCharTest('🄱', ['B majuscule encadré', 'B majuscule encadré', 'B majuscule encadré']);
  this.executeCharTest('🄲', ['C majuscule encadré', 'C majuscule encadré', 'C majuscule encadré']);
  this.executeCharTest('🄳', ['D majuscule encadré', 'D majuscule encadré', 'D majuscule encadré']);
  this.executeCharTest('🄴', ['E majuscule encadré', 'E majuscule encadré', 'E majuscule encadré']);
  this.executeCharTest('🄵', ['F majuscule encadré', 'F majuscule encadré', 'F majuscule encadré']);
  this.executeCharTest('🄶', ['G majuscule encadré', 'G majuscule encadré', 'G majuscule encadré']);
  this.executeCharTest('🄷', ['H majuscule encadré', 'H majuscule encadré', 'H majuscule encadré']);
  this.executeCharTest('🄸', ['I majuscule encadré', 'I majuscule encadré', 'I majuscule encadré']);
  this.executeCharTest('🄹', ['J majuscule encadré', 'J majuscule encadré', 'J majuscule encadré']);
  this.executeCharTest('🄺', ['K majuscule encadré', 'K majuscule encadré', 'K majuscule encadré']);
  this.executeCharTest('🄻', ['L majuscule encadré', 'L majuscule encadré', 'L majuscule encadré']);
  this.executeCharTest('🄼', ['M majuscule encadré', 'M majuscule encadré', 'M majuscule encadré']);
  this.executeCharTest('🄽', ['N majuscule encadré', 'N majuscule encadré', 'N majuscule encadré']);
  this.executeCharTest('🄾', ['O majuscule encadré', 'O majuscule encadré', 'O majuscule encadré']);
  this.executeCharTest('🄿', ['P majuscule encadré', 'P majuscule encadré', 'P majuscule encadré']);
  this.executeCharTest('🅀', ['Q majuscule encadré', 'Q majuscule encadré', 'Q majuscule encadré']);
  this.executeCharTest('🅁', ['R majuscule encadré', 'R majuscule encadré', 'R majuscule encadré']);
  this.executeCharTest('🅂', ['S majuscule encadré', 'S majuscule encadré', 'S majuscule encadré']);
  this.executeCharTest('🅃', ['T majuscule encadré', 'T majuscule encadré', 'T majuscule encadré']);
  this.executeCharTest('🅄', ['U majuscule encadré', 'U majuscule encadré', 'U majuscule encadré']);
  this.executeCharTest('🅅', ['V majuscule encadré', 'V majuscule encadré', 'V majuscule encadré']);
  this.executeCharTest('🅆', ['W majuscule encadré', 'W majuscule encadré', 'W majuscule encadré']);
  this.executeCharTest('🅇', ['X majuscule encadré', 'X majuscule encadré', 'X majuscule encadré']);
  this.executeCharTest('🅈', ['Y majuscule encadré', 'Y majuscule encadré', 'Y majuscule encadré']);
  this.executeCharTest('🅉', ['Z majuscule encadré', 'Z majuscule encadré', 'Z majuscule encadré']);
  this.executeCharTest('🅰', ['A majuscule encadré inverse', 'A majuscule encadré inverse', 'A majuscule encadré inverse']);
  this.executeCharTest('🅱', ['B majuscule encadré inverse', 'B majuscule encadré inverse', 'B majuscule encadré inverse']);
  this.executeCharTest('🅲', ['C majuscule encadré inverse', 'C majuscule encadré inverse', 'C majuscule encadré inverse']);
  this.executeCharTest('🅳', ['D majuscule encadré inverse', 'D majuscule encadré inverse', 'D majuscule encadré inverse']);
  this.executeCharTest('🅴', ['E majuscule encadré inverse', 'E majuscule encadré inverse', 'E majuscule encadré inverse']);
  this.executeCharTest('🅵', ['F majuscule encadré inverse', 'F majuscule encadré inverse', 'F majuscule encadré inverse']);
  this.executeCharTest('🅶', ['G majuscule encadré inverse', 'G majuscule encadré inverse', 'G majuscule encadré inverse']);
  this.executeCharTest('🅷', ['H majuscule encadré inverse', 'H majuscule encadré inverse', 'H majuscule encadré inverse']);
  this.executeCharTest('🅸', ['I majuscule encadré inverse', 'I majuscule encadré inverse', 'I majuscule encadré inverse']);
  this.executeCharTest('🅹', ['J majuscule encadré inverse', 'J majuscule encadré inverse', 'J majuscule encadré inverse']);
  this.executeCharTest('🅺', ['K majuscule encadré inverse', 'K majuscule encadré inverse', 'K majuscule encadré inverse']);
  this.executeCharTest('🅻', ['L majuscule encadré inverse', 'L majuscule encadré inverse', 'L majuscule encadré inverse']);
  this.executeCharTest('🅼', ['M majuscule encadré inverse', 'M majuscule encadré inverse', 'M majuscule encadré inverse']);
  this.executeCharTest('🅽', ['N majuscule encadré inverse', 'N majuscule encadré inverse', 'N majuscule encadré inverse']);
  this.executeCharTest('🅾', ['O majuscule encadré inverse', 'O majuscule encadré inverse', 'O majuscule encadré inverse']);
  this.executeCharTest('🅿', ['P majuscule encadré inverse', 'P majuscule encadré inverse', 'P majuscule encadré inverse']);
  this.executeCharTest('🆀', ['Q majuscule encadré inverse', 'Q majuscule encadré inverse', 'Q majuscule encadré inverse']);
  this.executeCharTest('🆁', ['R majuscule encadré inverse', 'R majuscule encadré inverse', 'R majuscule encadré inverse']);
  this.executeCharTest('🆂', ['S majuscule encadré inverse', 'S majuscule encadré inverse', 'S majuscule encadré inverse']);
  this.executeCharTest('🆃', ['T majuscule encadré inverse', 'T majuscule encadré inverse', 'T majuscule encadré inverse']);
  this.executeCharTest('🆄', ['U majuscule encadré inverse', 'U majuscule encadré inverse', 'U majuscule encadré inverse']);
  this.executeCharTest('🆅', ['V majuscule encadré inverse', 'V majuscule encadré inverse', 'V majuscule encadré inverse']);
  this.executeCharTest('🆆', ['W majuscule encadré inverse', 'W majuscule encadré inverse', 'W majuscule encadré inverse']);
  this.executeCharTest('🆇', ['X majuscule encadré inverse', 'X majuscule encadré inverse', 'X majuscule encadré inverse']);
  this.executeCharTest('🆈', ['Y majuscule encadré inverse', 'Y majuscule encadré inverse', 'Y majuscule encadré inverse']);
  this.executeCharTest('🆉', ['Z majuscule encadré inverse', 'Z majuscule encadré inverse', 'Z majuscule encadré inverse']);
  this.executeCharTest('🅐', ['A majuscule encerclé noir', 'A majuscule encerclé noir', 'A majuscule encerclé noir']);
  this.executeCharTest('🅑', ['B majuscule encerclé noir', 'B majuscule encerclé noir', 'B majuscule encerclé noir']);
  this.executeCharTest('🅒', ['C majuscule encerclé noir', 'C majuscule encerclé noir', 'C majuscule encerclé noir']);
  this.executeCharTest('🅓', ['D majuscule encerclé noir', 'D majuscule encerclé noir', 'D majuscule encerclé noir']);
  this.executeCharTest('🅔', ['E majuscule encerclé noir', 'E majuscule encerclé noir', 'E majuscule encerclé noir']);
  this.executeCharTest('🅕', ['F majuscule encerclé noir', 'F majuscule encerclé noir', 'F majuscule encerclé noir']);
  this.executeCharTest('🅖', ['G majuscule encerclé noir', 'G majuscule encerclé noir', 'G majuscule encerclé noir']);
  this.executeCharTest('🅗', ['H majuscule encerclé noir', 'H majuscule encerclé noir', 'H majuscule encerclé noir']);
  this.executeCharTest('🅘', ['I majuscule encerclé noir', 'I majuscule encerclé noir', 'I majuscule encerclé noir']);
  this.executeCharTest('🅙', ['J majuscule encerclé noir', 'J majuscule encerclé noir', 'J majuscule encerclé noir']);
  this.executeCharTest('🅚', ['K majuscule encerclé noir', 'K majuscule encerclé noir', 'K majuscule encerclé noir']);
  this.executeCharTest('🅛', ['L majuscule encerclé noir', 'L majuscule encerclé noir', 'L majuscule encerclé noir']);
  this.executeCharTest('🅜', ['M majuscule encerclé noir', 'M majuscule encerclé noir', 'M majuscule encerclé noir']);
  this.executeCharTest('🅝', ['N majuscule encerclé noir', 'N majuscule encerclé noir', 'N majuscule encerclé noir']);
  this.executeCharTest('🅞', ['O majuscule encerclé noir', 'O majuscule encerclé noir', 'O majuscule encerclé noir']);
  this.executeCharTest('🅟', ['P majuscule encerclé noir', 'P majuscule encerclé noir', 'P majuscule encerclé noir']);
  this.executeCharTest('🅠', ['Q majuscule encerclé noir', 'Q majuscule encerclé noir', 'Q majuscule encerclé noir']);
  this.executeCharTest('🅡', ['R majuscule encerclé noir', 'R majuscule encerclé noir', 'R majuscule encerclé noir']);
  this.executeCharTest('🅢', ['S majuscule encerclé noir', 'S majuscule encerclé noir', 'S majuscule encerclé noir']);
  this.executeCharTest('🅣', ['T majuscule encerclé noir', 'T majuscule encerclé noir', 'T majuscule encerclé noir']);
  this.executeCharTest('🅤', ['U majuscule encerclé noir', 'U majuscule encerclé noir', 'U majuscule encerclé noir']);
  this.executeCharTest('🅥', ['V majuscule encerclé noir', 'V majuscule encerclé noir', 'V majuscule encerclé noir']);
  this.executeCharTest('🅦', ['W majuscule encerclé noir', 'W majuscule encerclé noir', 'W majuscule encerclé noir']);
  this.executeCharTest('🅧', ['X majuscule encerclé noir', 'X majuscule encerclé noir', 'X majuscule encerclé noir']);
  this.executeCharTest('🅨', ['Y majuscule encerclé noir', 'Y majuscule encerclé noir', 'Y majuscule encerclé noir']);
  this.executeCharTest('🅩', ['Z majuscule encerclé noir', 'Z majuscule encerclé noir', 'Z majuscule encerclé noir']);
  this.executeCharTest('ᴦ', ['petite gamma majuscule', 'petite gamma majuscule', 'petite gamma majuscule']);
  this.executeCharTest('ᴧ', ['petite lambda majuscule', 'petite lambda majuscule', 'petite lambda majuscule']);
  this.executeCharTest('ᴨ', ['petite pi majuscule', 'petite pi majuscule', 'petite pi majuscule']);
  this.executeCharTest('ᴩ', ['petite rhô majuscule', 'petite rhô majuscule', 'petite rhô majuscule']);
  this.executeCharTest('ᴪ', ['petite psi majuscule', 'petite psi majuscule', 'petite psi majuscule']);
  this.executeCharTest('ᵞ', ['gamma suscript', 'gamma suscript', 'gamma suscript']);
  this.executeCharTest('ᵠ', ['phi suscript', 'phi suscript', 'phi suscript']);
  this.executeCharTest('ᵦ', ['bêta souscrit', 'bêta souscrit', 'bêta souscrit']);
  this.executeCharTest('ᵧ', ['gamma souscrit', 'gamma souscrit', 'gamma souscrit']);
  this.executeCharTest('ᵨ', ['rhô souscrit', 'rhô souscrit', 'rhô souscrit']);
  this.executeCharTest('ᵩ', ['phi souscrit', 'phi souscrit', 'phi souscrit']);
  this.executeCharTest('ᵪ', ['khi souscrit', 'khi souscrit', 'khi souscrit']);
  this.executeCharTest('ϐ', ['bêta grec', 'bêta grec', 'bêta grec']);
  this.executeCharTest('ϗ', ['ligature kai', 'ligature kai', 'ligature kai']);
  this.executeCharTest('϶', ['epsilon lunaire réfléchi', 'epsilon lunaire réfléchi', 'epsilon lunaire réfléchi']);
  this.executeCharTest('𝟊', ['Digamma en gras', 'Digamma en gras', 'Digamma en gras']);
  this.executeCharTest('𝟋', ['digamma en gras', 'digamma en gras', 'digamma en gras']);
  this.executeCharTest('ℵ', ['alef', 'alef', 'alef']);
  this.executeCharTest('ℶ', ['bèt', 'bèt', 'bèt']);
  this.executeCharTest('ℷ', ['guimel', 'guimel', 'guimel']);
  this.executeCharTest('ℸ', ['dalèt', 'dalèt', 'dalèt']);
  this.executeCharTest('ǖ', ['u trémaa et macron', 'u trémaa et macron', 'u trémaa et macron']);
  this.executeCharTest('ǘ', ['u trémaa et accent aigu', 'u trémaa et accent aigu', 'u trémaa et accent aigu']);
  this.executeCharTest('ǚ', ['u trémaa et caron', 'u trémaa et caron', 'u trémaa et caron']);
  this.executeCharTest('ǜ', ['u trémaa et accent grave', 'u trémaa et accent grave', 'u trémaa et accent grave']);
  this.executeCharTest('ǟ', ['a trémaa et macron', 'a trémaa et macron', 'a trémaa et macron']);
  this.executeCharTest('ǡ', ['a point en chef et macron', 'a point en chef et macron', 'a point en chef et macron']);
  this.executeCharTest('ǭ', ['o ogonek et macron', 'o ogonek et macron', 'o ogonek et macron']);
  this.executeCharTest('ǻ', ['a rond en chef et accent aigu', 'a rond en chef et accent aigu', 'a rond en chef et accent aigu']);
  this.executeCharTest('ȫ', ['o tréma et macron', 'o tréma et macron', 'o tréma et macron']);
  this.executeCharTest('ȭ', ['o tilde et macron', 'o tilde et macron', 'o tilde et macron']);
  this.executeCharTest('ȱ', ['o point en chef et macron', 'o point en chef et macron', 'o point en chef et macron']);
  this.executeCharTest('ḉ', ['c cédille et accent aigu', 'c cédille et accent aigu', 'c cédille et accent aigu']);
  this.executeCharTest('ḕ', ['e macron et accent grave', 'e macron et accent grave', 'e macron et accent grave']);
  this.executeCharTest('ḗ', ['e macron et accent aigu', 'e macron et accent aigu', 'e macron et accent aigu']);
  this.executeCharTest('ḝ', ['e cédille et brève', 'e cédille et brève', 'e cédille et brève']);
  this.executeCharTest('ḯ', ['i tréma et accent aigu', 'i tréma et accent aigu', 'i tréma et accent aigu']);
  this.executeCharTest('ḹ', ['l point souscrit et macron', 'l point souscrit et macron', 'l point souscrit et macron']);
  this.executeCharTest('ṍ', ['o tilde et accent aigu', 'o tilde et accent aigu', 'o tilde et accent aigu']);
  this.executeCharTest('ṏ', ['o tilde et tréma', 'o tilde et tréma', 'o tilde et tréma']);
  this.executeCharTest('ṑ', ['o macron et accent grave', 'o macron et accent grave', 'o macron et accent grave']);
  this.executeCharTest('ṓ', ['o macron et accent aigu', 'o macron et accent aigu', 'o macron et accent aigu']);
  this.executeCharTest('ṝ', ['r point souscrit et macron', 'r point souscrit et macron', 'r point souscrit et macron']);
  this.executeCharTest('ṥ', ['s accent aigu et point en chef', 's accent aigu et point en chef', 's accent aigu et point en chef']);
  this.executeCharTest('ṧ', ['s caron et point en chef', 's caron et point en chef', 's caron et point en chef']);
  this.executeCharTest('ṩ', ['s point souscrit et point en chef', 's point souscrit et point en chef', 's point souscrit et point en chef']);
  this.executeCharTest('ṹ', ['u tilde et accent aigu', 'u tilde et accent aigu', 'u tilde et accent aigu']);
  this.executeCharTest('ṻ', ['u macron et tréma', 'u macron et tréma', 'u macron et tréma']);
  this.executeCharTest('ấ', ['a accent circonflexe et accent aigu', 'a accent circonflexe et accent aigu', 'a accent circonflexe et accent aigu']);
  this.executeCharTest('ầ', ['a accent circonflexe et accent grave', 'a accent circonflexe et accent grave', 'a accent circonflexe et accent grave']);
  this.executeCharTest('ẩ', ['a accent circonflexe et crochet en chef', 'a accent circonflexe et crochet en chef', 'a accent circonflexe et crochet en chef']);
  this.executeCharTest('ẫ', ['a accent circonflexe et tilde', 'a accent circonflexe et tilde', 'a accent circonflexe et tilde']);
  this.executeCharTest('ậ', ['a accent circonflexe et point souscrit', 'a accent circonflexe et point souscrit', 'a accent circonflexe et point souscrit']);
  this.executeCharTest('ắ', ['a brève et accent aigu', 'a brève et accent aigu', 'a brève et accent aigu']);
  this.executeCharTest('ằ', ['a brève et accent grave', 'a brève et accent grave', 'a brève et accent grave']);
  this.executeCharTest('ẳ', ['a brève et crochet en chef', 'a brève et crochet en chef', 'a brève et crochet en chef']);
  this.executeCharTest('ẵ', ['a brève et tilde', 'a brève et tilde', 'a brève et tilde']);
  this.executeCharTest('ặ', ['a brève et point souscrit', 'a brève et point souscrit', 'a brève et point souscrit']);
  this.executeCharTest('ế', ['e accent circonflexe et accent aigu', 'e accent circonflexe et accent aigu', 'e accent circonflexe et accent aigu']);
  this.executeCharTest('ề', ['e accent circonflexe et accent grave', 'e accent circonflexe et accent grave', 'e accent circonflexe et accent grave']);
  this.executeCharTest('ể', ['e accent circonflexe et crochet en chef', 'e accent circonflexe et crochet en chef', 'e accent circonflexe et crochet en chef']);
  this.executeCharTest('ễ', ['e accent circonflexe et tilde', 'e accent circonflexe et tilde', 'e accent circonflexe et tilde']);
  this.executeCharTest('ệ', ['e accent circonflexe et point souscrit', 'e accent circonflexe et point souscrit', 'e accent circonflexe et point souscrit']);
  this.executeCharTest('ố', ['o accent circonflexe et accent aigu', 'o accent circonflexe et accent aigu', 'o accent circonflexe et accent aigu']);
  this.executeCharTest('ồ', ['o accent circonflexe et accent grave', 'o accent circonflexe et accent grave', 'o accent circonflexe et accent grave']);
  this.executeCharTest('ổ', ['o accent circonflexe et crochet en chef', 'o accent circonflexe et crochet en chef', 'o accent circonflexe et crochet en chef']);
  this.executeCharTest('ỗ', ['o accent circonflexe et tilde', 'o accent circonflexe et tilde', 'o accent circonflexe et tilde']);
  this.executeCharTest('ộ', ['o accent circonflexe et point souscrit', 'o accent circonflexe et point souscrit', 'o accent circonflexe et point souscrit']);
  this.executeCharTest('ớ', ['o cornu accent aigu', 'o cornu accent aigu', 'o cornu accent aigu']);
  this.executeCharTest('ờ', ['o cornu accent grave', 'o cornu accent grave', 'o cornu accent grave']);
  this.executeCharTest('ở', ['o cornu crochet en chef', 'o cornu crochet en chef', 'o cornu crochet en chef']);
  this.executeCharTest('ỡ', ['o cornu tilde', 'o cornu tilde', 'o cornu tilde']);
  this.executeCharTest('ợ', ['o cornu point souscrit', 'o cornu point souscrit', 'o cornu point souscrit']);
  this.executeCharTest('ứ', ['u cornu accent aigu', 'u cornu accent aigu', 'u cornu accent aigu']);
  this.executeCharTest('ừ', ['u cornu accent grave', 'u cornu accent grave', 'u cornu accent grave']);
  this.executeCharTest('ử', ['u cornu crochet en chef', 'u cornu crochet en chef', 'u cornu crochet en chef']);
  this.executeCharTest('ữ', ['u cornu tilde', 'u cornu tilde', 'u cornu tilde']);
  this.executeCharTest('ự', ['u cornu point souscrit', 'u cornu point souscrit', 'u cornu point souscrit']);
  this.executeCharTest('ø', ['o barré', 'o barré', 'o barré']);
  this.executeCharTest('đ', ['d barré', 'd barré', 'd barré']);
  this.executeCharTest('ħ', ['h barré', 'h barré', 'h barré']);
  this.executeCharTest('ł', ['l barré', 'l barré', 'l barré']);
  this.executeCharTest('ŧ', ['t barré', 't barré', 't barré']);
  this.executeCharTest('ƀ', ['b barré', 'b barré', 'b barré']);
  this.executeCharTest('ƛ', ['lambda barré', 'lambda barré', 'lambda barré']);
  this.executeCharTest('ƶ', ['z barré', 'z barré', 'z barré']);
  this.executeCharTest('ƾ', ['coup de glotte barré culbuté', 'coup de glotte barré culbuté', 'coup de glotte barré culbuté']);
  this.executeCharTest('ǥ', ['g barré', 'g barré', 'g barré']);
  this.executeCharTest('ǿ', ['o barré accent aigu', 'o barré accent aigu', 'o barré accent aigu']);
  this.executeCharTest('ȼ', ['c barré', 'c barré', 'c barré']);
  this.executeCharTest('ɇ', ['e barré', 'e barré', 'e barré']);
  this.executeCharTest('ɉ', ['j barré', 'j barré', 'j barré']);
  this.executeCharTest('ɍ', ['r barré', 'r barré', 'r barré']);
  this.executeCharTest('ɏ', ['y barré', 'y barré', 'y barré']);
  this.executeCharTest('ɟ', ['j sans point barré', 'j sans point barré', 'j sans point barré']);
  this.executeCharTest('ɨ', ['i barré', 'i barré', 'i barré']);
  this.executeCharTest('ʄ', ['j sans point barré crosse', 'j sans point barré crosse', 'j sans point barré crosse']);
  this.executeCharTest('ʡ', ['coup de glotte barré', 'coup de glotte barré', 'coup de glotte barré']);
  this.executeCharTest('ʢ', ['coup de glotte barré réfléchi', 'coup de glotte barré réfléchi', 'coup de glotte barré réfléchi']);
  this.executeCharTest('ᴓ', ['o couché barré obliquement', 'o couché barré obliquement', 'o couché barré obliquement']);
  this.executeCharTest('ᵼ', ['iota barré', 'iota barré', 'iota barré']);
  this.executeCharTest('ᵽ', ['p barré', 'p barré', 'p barré']);
  this.executeCharTest('ᵿ', ['upsilon barré', 'upsilon barré', 'upsilon barré']);
  this.executeCharTest('ẜ', ['s long à barre diagonale', 's long à barre diagonale', 's long à barre diagonale']);
  this.executeCharTest('ẝ', ['s long à barre haute', 's long à barre haute', 's long à barre haute']);
  this.executeCharTest('ƍ', ['delta culbutée', 'delta culbutée', 'delta culbutée']);
  this.executeCharTest('ẛ', ['s long point en chef', 's long point en chef', 's long point en chef']);
  this.executeCharTest('ẟ', ['delta', 'delta', 'delta']);
  this.executeCharTest('ĸ', ['kra', 'kra', 'kra']);
  this.executeCharTest('ſ', ['s long', 's long', 's long']);
  this.executeCharTest('ƃ', ['b potence', 'b potence', 'b potence']);
  this.executeCharTest('ƅ', ['sixiéme ton', 'sixiéme ton', 'sixiéme ton']);
  this.executeCharTest('ƈ', ['c crosse', 'c crosse', 'c crosse']);
  this.executeCharTest('ƌ', ['d potence', 'd potence', 'd potence']);
  this.executeCharTest('ƒ', ['f cursif', 'f cursif', 'f cursif']);
  this.executeCharTest('ƕ', ['hv (Hwair)', 'hv (Hwair)', 'hv (Hwair)']);
  this.executeCharTest('ƙ', ['k crosse', 'k crosse', 'k crosse']);
  this.executeCharTest('ƚ', ['l rayé', 'l rayé', 'l rayé']);
  this.executeCharTest('ƞ', ['n à long jambage de droite', 'n à long jambage de droite', 'n à long jambage de droite']);
  this.executeCharTest('ơ', ['o cornu', 'o cornu', 'o cornu']);
  this.executeCharTest('ƣ', ['gha', 'gha', 'gha']);
  this.executeCharTest('ƥ', ['p crosse', 'p crosse', 'p crosse']);
  this.executeCharTest('ƨ', ['deuxiéme ton', 'deuxiéme ton', 'deuxiéme ton']);
  this.executeCharTest('ƪ', ['ech réfléchi bouclé', 'ech réfléchi bouclé', 'ech réfléchi bouclé']);
  this.executeCharTest('ƫ', ['t hameçon palatal', 't hameçon palatal', 't hameçon palatal']);
  this.executeCharTest('ƭ', ['t crosse', 't crosse', 't crosse']);
  this.executeCharTest('ư', ['u cornu', 'u cornu', 'u cornu']);
  this.executeCharTest('ƴ', ['y crosse', 'y crosse', 'y crosse']);
  this.executeCharTest('ƹ', ['ej réfléchi', 'ej réfléchi', 'ej réfléchi']);
  this.executeCharTest('ƺ', ['ej hameçon', 'ej hameçon', 'ej hameçon']);
  this.executeCharTest('ƽ', ['cinquiéme tun', 'cinquiéme tun', 'cinquiéme tun']);
  this.executeCharTest('ƿ', ['wynn', 'wynn', 'wynn']);
  this.executeCharTest('ǆ', ['dz caron', 'dz caron', 'dz caron']);
  this.executeCharTest('ǉ', ['lj', 'lj', 'lj']);
  this.executeCharTest('ǌ', ['nj', 'nj', 'nj']);
  this.executeCharTest('ǣ', ['ae macron', 'ae macron', 'ae macron']);
  this.executeCharTest('ǯ', ['ej caron', 'ej caron', 'ej caron']);
  this.executeCharTest('ǳ', ['dz', 'dz', 'dz']);
  this.executeCharTest('ȝ', ['yogh', 'yogh', 'yogh']);
  this.executeCharTest('ɮ', ['lej', 'lej', 'lej']);
  this.executeCharTest('ʒ', ['ej', 'ej', 'ej']);
  this.executeCharTest('ʓ', ['ej bouclé', 'ej bouclé', 'ej bouclé']);
  this.executeCharTest('ʤ', ['digramme Dej', 'digramme Dej', 'digramme Dej']);
  this.executeCharTest('ǝ', ['e culbuté', 'e culbuté', 'e culbuté']);
  this.executeCharTest('ǽ', ['ae accent aigu (ash)', 'ae accent aigu (ash)', 'ae accent aigu (ash)']);
  this.executeCharTest('ȡ', ['d bouclé', 'd bouclé', 'd bouclé']);
  this.executeCharTest('ȣ', ['ou', 'ou', 'ou']);
  this.executeCharTest('ȥ', ['z crochet', 'z crochet', 'z crochet']);
  this.executeCharTest('ȴ', ['l bouclé', 'l bouclé', 'l bouclé']);
  this.executeCharTest('ȵ', ['n bouclé', 'n bouclé', 'n bouclé']);
  this.executeCharTest('ȶ', ['t bouclé', 't bouclé', 't bouclé']);
  this.executeCharTest('ȸ', ['Ligature minuscule latine Db', 'Ligature minuscule latine Db', 'Ligature minuscule latine Db']);
  this.executeCharTest('ȹ', ['Ligature minuscule latine Qp', 'Ligature minuscule latine Qp', 'Ligature minuscule latine Qp']);
  this.executeCharTest('ȿ', ['s à paraphe', 's à paraphe', 's à paraphe']);
  this.executeCharTest('ɀ', ['z à paraphe', 'z à paraphe', 'z à paraphe']);
  this.executeCharTest('ɂ', ['coup de glotte', 'coup de glotte', 'coup de glotte']);
  this.executeCharTest('ɋ', ['q avec hameçon', 'q avec hameçon', 'q avec hameçon']);
  this.executeCharTest('ɐ', ['a culbuté', 'a culbuté', 'a culbuté']);
  this.executeCharTest('ɑ', ['alpha', 'alpha', 'alpha']);
  this.executeCharTest('ɒ', ['alpha culbuté', 'alpha culbuté', 'alpha culbuté']);
  this.executeCharTest('ɓ', ['b crosse', 'b crosse', 'b crosse']);
  this.executeCharTest('ɔ', ['o ouvert', 'o ouvert', 'o ouvert']);
  this.executeCharTest('ɕ', ['c bouclé', 'c bouclé', 'c bouclé']);
  this.executeCharTest('ɖ', ['d hameçon rétroflexe', 'd hameçon rétroflexe', 'd hameçon rétroflexe']);
  this.executeCharTest('ɗ', ['d crosse', 'd crosse', 'd crosse']);
  this.executeCharTest('ɘ', ['e réfléchi', 'e réfléchi', 'e réfléchi']);
  this.executeCharTest('ə', ['schwa', 'schwa', 'schwa']);
  this.executeCharTest('ɚ', ['schwa crochet', 'schwa crochet', 'schwa crochet']);
  this.executeCharTest('ɛ', ['e ouvert', 'e ouvert', 'e ouvert']);
  this.executeCharTest('ɜ', ['epsilon réfléchi', 'epsilon réfléchi', 'epsilon réfléchi']);
  this.executeCharTest('ɝ', ['epsilon réfléchi crochet', 'epsilon réfléchi crochet', 'epsilon réfléchi crochet']);
  this.executeCharTest('ɞ', ['epsilon réfléchi fermé', 'epsilon réfléchi fermé', 'epsilon réfléchi fermé']);
  this.executeCharTest('ɠ', ['g crosse', 'g crosse', 'g crosse']);
  this.executeCharTest('ɡ', ['g cursif', 'g cursif', 'g cursif']);
  this.executeCharTest('ɣ', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('ɤ', ['petit gamma', 'petit gamma', 'petit gamma']);
  this.executeCharTest('ɥ', ['h culbuté', 'h culbuté', 'h culbuté']);
  this.executeCharTest('ɦ', ['h crosse', 'h crosse', 'h crosse']);
  this.executeCharTest('ɧ', ['eng crosse', 'eng crosse', 'eng crosse']);
  this.executeCharTest('ɩ', ['iota', 'iota', 'iota']);
  this.executeCharTest('ɫ', ['l tilde médian', 'l tilde médian', 'l tilde médian']);
  this.executeCharTest('ɬ', ['l sanglé', 'l sanglé', 'l sanglé']);
  this.executeCharTest('ɭ', ['l hameçon rétroflexe', 'l hameçon rétroflexe', 'l hameçon rétroflexe']);
  this.executeCharTest('ɯ', ['m culbuté', 'm culbuté', 'm culbuté']);
  this.executeCharTest('ɰ', ['m hampé culbuté', 'm hampé culbuté', 'm hampé culbuté']);
  this.executeCharTest('ɱ', ['m hameçon', 'm hameçon', 'm hameçon']);
  this.executeCharTest('ɲ', ['n hameçon à gauche', 'n hameçon à gauche', 'n hameçon à gauche']);
  this.executeCharTest('ɳ', ['n hameçon rétroflexe', 'n hameçon rétroflexe', 'n hameçon rétroflexe']);
  this.executeCharTest('ɵ', ['o barré', 'o barré', 'o barré']);
  this.executeCharTest('ɷ', ['oméga fermé', 'oméga fermé', 'oméga fermé']);
  this.executeCharTest('ɸ', ['phi', 'phi', 'phi']);
  this.executeCharTest('ɹ', ['r culbuté', 'r culbuté', 'r culbuté']);
  this.executeCharTest('ɺ', ['r prolongé culbuté', 'r prolongé culbuté', 'r prolongé culbuté']);
  this.executeCharTest('ɻ', ['r crosse culbuté', 'r crosse culbuté', 'r crosse culbuté']);
  this.executeCharTest('ɼ', ['r prolongé', 'r prolongé', 'r prolongé']);
  this.executeCharTest('ɽ', ['r hameçon rétroflexe', 'r hameçon rétroflexe', 'r hameçon rétroflexe']);
  this.executeCharTest('ɾ', ['r sans obit', 'r sans obit', 'r sans obit']);
  this.executeCharTest('ɿ', ['r sans obit réfléchi', 'r sans obit réfléchi', 'r sans obit réfléchi']);
  this.executeCharTest('ʂ', ['s hameçon rétroflexe', 's hameçon rétroflexe', 's hameçon rétroflexe']);
  this.executeCharTest('ʃ', ['ech', 'ech', 'ech']);
  this.executeCharTest('ʅ', ['r sans obit réfléchi hameçon rétroflexe', 'r sans obit réfléchi hameçon rétroflexe', 'r sans obit réfléchi hameçon rétroflexe']);
  this.executeCharTest('ʆ', ['ech bouclé', 'ech bouclé', 'ech bouclé']);
  this.executeCharTest('ʇ', ['t culbuté', 't culbuté', 't culbuté']);
  this.executeCharTest('ʈ', ['t hameçon rétroflexe', 't hameçon rétroflexe', 't hameçon rétroflexe']);
  this.executeCharTest('ʉ', ['u barré', 'u barré', 'u barré']);
  this.executeCharTest('ʊ', ['upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest('ʋ', ['v de ronde', 'v de ronde', 'v de ronde']);
  this.executeCharTest('ʌ', ['v culbuté', 'v culbuté', 'v culbuté']);
  this.executeCharTest('ʍ', ['w culbuté', 'w culbuté', 'w culbuté']);
  this.executeCharTest('ʎ', ['y culbuté', 'y culbuté', 'y culbuté']);
  this.executeCharTest('ʐ', ['z hameçon rétroflexe', 'z hameçon rétroflexe', 'z hameçon rétroflexe']);
  this.executeCharTest('ʑ', ['z bouclé', 'z bouclé', 'z bouclé']);
  this.executeCharTest('ʕ', ['coup de glotte réfléchi', 'coup de glotte réfléchi', 'coup de glotte réfléchi']);
  this.executeCharTest('ʖ', ['coup de glotte culbuté', 'coup de glotte culbuté', 'coup de glotte culbuté']);
  this.executeCharTest('ʗ', ['C étiré', 'C étiré', 'C étiré']);
  this.executeCharTest('ʘ', ['clic bilabial', 'clic bilabial', 'clic bilabial']);
  this.executeCharTest('ʚ', ['epsilon fermé', 'epsilon fermé', 'epsilon fermé']);
  this.executeCharTest('ʞ', ['k culbuté', 'k culbuté', 'k culbuté']);
  this.executeCharTest('ʠ', ['q crosse', 'q crosse', 'q crosse']);
  this.executeCharTest('ʣ', ['digramme Dz', 'digramme Dz', 'digramme Dz']);
  this.executeCharTest('ʥ', ['digramme Dz bouclé', 'digramme Dz bouclé', 'digramme Dz bouclé']);
  this.executeCharTest('ʦ', ['digramme Ts', 'digramme Ts', 'digramme Ts']);
  this.executeCharTest('ʧ', ['digramme Tech', 'digramme Tech', 'digramme Tech']);
  this.executeCharTest('ʨ', ['digramme Tc bouclé', 'digramme Tc bouclé', 'digramme Tc bouclé']);
  this.executeCharTest('ʩ', ['digramme Feng', 'digramme Feng', 'digramme Feng']);
  this.executeCharTest('ʪ', ['digramme Ls', 'digramme Ls', 'digramme Ls']);
  this.executeCharTest('ʫ', ['digramme Lz', 'digramme Lz', 'digramme Lz']);
  this.executeCharTest('ʬ', ['percussion bilabiale', 'percussion bilabiale', 'percussion bilabiale']);
  this.executeCharTest('ʭ', ['percussion bidentale', 'percussion bidentale', 'percussion bidentale']);
  this.executeCharTest('ʮ', ['h culbuté crosse réfléchie', 'h culbuté crosse réfléchie', 'h culbuté crosse réfléchie']);
  this.executeCharTest('ʯ', ['h culbuté crosse réfléchie et hameçon rétroflexe', 'h culbuté crosse réfléchie et hameçon rétroflexe', 'h culbuté crosse réfléchie et hameçon rétroflexe']);
  this.executeCharTest('ᴂ', ['ae culbuté', 'ae culbuté', 'ae culbuté']);
  this.executeCharTest('ᴈ', ['epsilon culbuté', 'epsilon culbuté', 'epsilon culbuté']);
  this.executeCharTest('ᴉ', ['i culbuté', 'i culbuté', 'i culbuté']);
  this.executeCharTest('ᴑ', ['o couché', 'o couché', 'o couché']);
  this.executeCharTest('ᴒ', ['o ouvert couché', 'o ouvert couché', 'o ouvert couché']);
  this.executeCharTest('ᴔ', ['oe culbuté', 'oe culbuté', 'oe culbuté']);
  this.executeCharTest('ᴖ', ['moitié supérieure de o', 'moitié supérieure de o', 'moitié supérieure de o']);
  this.executeCharTest('ᴗ', ['moitié inférieure de o', 'moitié inférieure de o', 'moitié inférieure de o']);
  this.executeCharTest('ᴝ', ['u couché', 'u couché', 'u couché']);
  this.executeCharTest('ᴞ', ['u tréma couché', 'u tréma couché', 'u tréma couché']);
  this.executeCharTest('ᴟ', ['m couché', 'm couché', 'm couché']);
  this.executeCharTest('ᴤ', ['fricative pharyngale voisée', 'fricative pharyngale voisée', 'fricative pharyngale voisée']);
  this.executeCharTest('ᴥ', ['aïn', 'aïn', 'aïn']);
  this.executeCharTest('ᵫ', ['ue', 'ue', 'ue']);
  this.executeCharTest('ᵬ', ['b tilde médian', 'b tilde médian', 'b tilde médian']);
  this.executeCharTest('ᵭ', ['d tilde médian', 'd tilde médian', 'd tilde médian']);
  this.executeCharTest('ᵮ', ['f tilde médian', 'f tilde médian', 'f tilde médian']);
  this.executeCharTest('ᵯ', ['m tilde médian', 'm tilde médian', 'm tilde médian']);
  this.executeCharTest('ᵰ', ['n tilde médian', 'n tilde médian', 'n tilde médian']);
  this.executeCharTest('ᵱ', ['p tilde médian', 'p tilde médian', 'p tilde médian']);
  this.executeCharTest('ᵲ', ['r tilde médian', 'r tilde médian', 'r tilde médian']);
  this.executeCharTest('ᵳ', ['r sans obit tilde médian', 'r sans obit tilde médian', 'r sans obit tilde médian']);
  this.executeCharTest('ᵴ', ['s tilde médian', 's tilde médian', 's tilde médian']);
  this.executeCharTest('ᵵ', ['t tilde médian', 't tilde médian', 't tilde médian']);
  this.executeCharTest('ᵶ', ['z tilde médian', 'z tilde médian', 'z tilde médian']);
  this.executeCharTest('ᵷ', ['g culbuté', 'g culbuté', 'g culbuté']);
  this.executeCharTest('ᵹ', ['g insulaire', 'g insulaire', 'g insulaire']);
  this.executeCharTest('ᵺ', ['th barré diagonalement', 'th barré diagonalement', 'th barré diagonalement']);
  this.executeCharTest('ᶀ', ['b hameçon palatal', 'b hameçon palatal', 'b hameçon palatal']);
  this.executeCharTest('ᶁ', ['d hameçon palatal', 'd hameçon palatal', 'd hameçon palatal']);
  this.executeCharTest('ᶂ', ['f hameçon palatal', 'f hameçon palatal', 'f hameçon palatal']);
  this.executeCharTest('ᶃ', ['g hameçon palatal', 'g hameçon palatal', 'g hameçon palatal']);
  this.executeCharTest('ᶄ', ['k hameçon palatal', 'k hameçon palatal', 'k hameçon palatal']);
  this.executeCharTest('ᶅ', ['l hameçon palatal', 'l hameçon palatal', 'l hameçon palatal']);
  this.executeCharTest('ᶆ', ['m hameçon palatal', 'm hameçon palatal', 'm hameçon palatal']);
  this.executeCharTest('ᶇ', ['n hameçon palatal', 'n hameçon palatal', 'n hameçon palatal']);
  this.executeCharTest('ᶈ', ['p hameçon palatal', 'p hameçon palatal', 'p hameçon palatal']);
  this.executeCharTest('ᶉ', ['r hameçon palatal', 'r hameçon palatal', 'r hameçon palatal']);
  this.executeCharTest('ᶊ', ['s hameçon palatal', 's hameçon palatal', 's hameçon palatal']);
  this.executeCharTest('ᶋ', ['ech hameçon palatal', 'ech hameçon palatal', 'ech hameçon palatal']);
  this.executeCharTest('ᶌ', ['v hameçon palatal', 'v hameçon palatal', 'v hameçon palatal']);
  this.executeCharTest('ᶍ', ['x hameçon palatal', 'x hameçon palatal', 'x hameçon palatal']);
  this.executeCharTest('ᶎ', ['z hameçon palatal', 'z hameçon palatal', 'z hameçon palatal']);
  this.executeCharTest('ᶏ', ['a hameçon rétroflexe', 'a hameçon rétroflexe', 'a hameçon rétroflexe']);
  this.executeCharTest('ᶐ', ['alpha hameçon rétroflexe', 'alpha hameçon rétroflexe', 'alpha hameçon rétroflexe']);
  this.executeCharTest('ᶑ', ['d crosse et hameçon rétroflexe', 'd crosse et hameçon rétroflexe', 'd crosse et hameçon rétroflexe']);
  this.executeCharTest('ᶒ', ['e hameçon rétroflexe', 'e hameçon rétroflexe', 'e hameçon rétroflexe']);
  this.executeCharTest('ᶓ', ['epsilon hameçon rétroflexe', 'epsilon hameçon rétroflexe', 'epsilon hameçon rétroflexe']);
  this.executeCharTest('ᶔ', ['epsilon réfléchi hameçon rétroflexe', 'epsilon réfléchi hameçon rétroflexe', 'epsilon réfléchi hameçon rétroflexe']);
  this.executeCharTest('ᶕ', ['schwa hameçon rétroflexe', 'schwa hameçon rétroflexe', 'schwa hameçon rétroflexe']);
  this.executeCharTest('ᶖ', ['i hameçon rétroflexe', 'i hameçon rétroflexe', 'i hameçon rétroflexe']);
  this.executeCharTest('ᶗ', ['o ouvert hameçon rétroflexe', 'o ouvert hameçon rétroflexe', 'o ouvert hameçon rétroflexe']);
  this.executeCharTest('ᶘ', ['ech hameçon rétroflexe', 'ech hameçon rétroflexe', 'ech hameçon rétroflexe']);
  this.executeCharTest('ᶙ', ['u hameçon rétroflexe', 'u hameçon rétroflexe', 'u hameçon rétroflexe']);
  this.executeCharTest('ᶚ', ['ej hameçon rétroflexe', 'ej hameçon rétroflexe', 'ej hameçon rétroflexe']);
  this.executeCharTest('ŉ', ['n précédée d\'une apostrophe', 'n précédée d\'une apostrophe', 'n précédée d\'une apostrophe']);
  this.executeCharTest('ŋ', ['eng', 'eng', 'eng']);
  this.executeCharTest('à', ['a accent grave', 'a accent grave', 'a accent grave']);
  this.executeCharTest('á', ['a accent aigu', 'a accent aigu', 'a accent aigu']);
  this.executeCharTest('â', ['a accent circonflexe', 'a accent circonflexe', 'a accent circonflexe']);
  this.executeCharTest('ã', ['a tilde', 'a tilde', 'a tilde']);
  this.executeCharTest('ä', ['a tréma', 'a tréma', 'a tréma']);
  this.executeCharTest('å', ['a rond en chef', 'a rond en chef', 'a rond en chef']);
  this.executeCharTest('ç', ['c cédille', 'c cédille', 'c cédille']);
  this.executeCharTest('è', ['e accent grave', 'e accent grave', 'e accent grave']);
  this.executeCharTest('é', ['e accent aigu', 'e accent aigu', 'e accent aigu']);
  this.executeCharTest('ê', ['e accent circonflexe', 'e accent circonflexe', 'e accent circonflexe']);
  this.executeCharTest('ë', ['e tréma', 'e tréma', 'e tréma']);
  this.executeCharTest('ì', ['i accent grave', 'i accent grave', 'i accent grave']);
  this.executeCharTest('í', ['i accent aigu', 'i accent aigu', 'i accent aigu']);
  this.executeCharTest('î', ['i accent circonflexe', 'i accent circonflexe', 'i accent circonflexe']);
  this.executeCharTest('ï', ['i tréma', 'i tréma', 'i tréma']);
  this.executeCharTest('ñ', ['n tilde', 'n tilde', 'n tilde']);
  this.executeCharTest('ò', ['o accent grave', 'o accent grave', 'o accent grave']);
  this.executeCharTest('ó', ['o accent aigu', 'o accent aigu', 'o accent aigu']);
  this.executeCharTest('ô', ['o accent circonflexe', 'o accent circonflexe', 'o accent circonflexe']);
  this.executeCharTest('õ', ['o tilde', 'o tilde', 'o tilde']);
  this.executeCharTest('ö', ['o tréma', 'o tréma', 'o tréma']);
  this.executeCharTest('ù', ['u accent grave', 'u accent grave', 'u accent grave']);
  this.executeCharTest('ú', ['u accent aigu', 'u accent aigu', 'u accent aigu']);
  this.executeCharTest('û', ['u accent circonflexe', 'u accent circonflexe', 'u accent circonflexe']);
  this.executeCharTest('ü', ['u tréma', 'u tréma', 'u tréma']);
  this.executeCharTest('ý', ['y accent aigu', 'y accent aigu', 'y accent aigu']);
  this.executeCharTest('ÿ', ['y tréma', 'y tréma', 'y tréma']);
  this.executeCharTest('ā', ['a macron', 'a macron', 'a macron']);
  this.executeCharTest('ă', ['a brève', 'a brève', 'a brève']);
  this.executeCharTest('ą', ['a ogonek', 'a ogonek', 'a ogonek']);
  this.executeCharTest('ć', ['c accent aigu', 'c accent aigu', 'c accent aigu']);
  this.executeCharTest('ĉ', ['c accent circonflexe', 'c accent circonflexe', 'c accent circonflexe']);
  this.executeCharTest('ċ', ['c point en chef', 'c point en chef', 'c point en chef']);
  this.executeCharTest('č', ['c caron', 'c caron', 'c caron']);
  this.executeCharTest('ď', ['d caron', 'd caron', 'd caron']);
  this.executeCharTest('ē', ['e macron', 'e macron', 'e macron']);
  this.executeCharTest('ĕ', ['e brève', 'e brève', 'e brève']);
  this.executeCharTest('ė', ['e point en chef', 'e point en chef', 'e point en chef']);
  this.executeCharTest('ę', ['e ogonek', 'e ogonek', 'e ogonek']);
  this.executeCharTest('ě', ['e caron', 'e caron', 'e caron']);
  this.executeCharTest('ĝ', ['g accent circonflexe', 'g accent circonflexe', 'g accent circonflexe']);
  this.executeCharTest('ğ', ['g brève', 'g brève', 'g brève']);
  this.executeCharTest('ġ', ['g point en chef', 'g point en chef', 'g point en chef']);
  this.executeCharTest('ģ', ['g cédille', 'g cédille', 'g cédille']);
  this.executeCharTest('ĥ', ['h accent circonflexe', 'h accent circonflexe', 'h accent circonflexe']);
  this.executeCharTest('ĩ', ['i tilde', 'i tilde', 'i tilde']);
  this.executeCharTest('ī', ['i macron', 'i macron', 'i macron']);
  this.executeCharTest('ĭ', ['i brève', 'i brève', 'i brève']);
  this.executeCharTest('į', ['i ogonek', 'i ogonek', 'i ogonek']);
  this.executeCharTest('ı', ['i sans point', 'i sans point', 'i sans point']);
  this.executeCharTest('ĵ', ['j accent circonflexe', 'j accent circonflexe', 'j accent circonflexe']);
  this.executeCharTest('ķ', ['k cédille', 'k cédille', 'k cédille']);
  this.executeCharTest('ĺ', ['l accent aigu', 'l accent aigu', 'l accent aigu']);
  this.executeCharTest('ļ', ['l cédille', 'l cédille', 'l cédille']);
  this.executeCharTest('ľ', ['l caron', 'l caron', 'l caron']);
  this.executeCharTest('ŀ', ['l point médian', 'l point médian', 'l point médian']);
  this.executeCharTest('ń', ['n accent aigu', 'n accent aigu', 'n accent aigu']);
  this.executeCharTest('ņ', ['n cédille', 'n cédille', 'n cédille']);
  this.executeCharTest('ň', ['n caron', 'n caron', 'n caron']);
  this.executeCharTest('ō', ['o macron', 'o macron', 'o macron']);
  this.executeCharTest('ŏ', ['o brève', 'o brève', 'o brève']);
  this.executeCharTest('ő', ['o avec double accent aigu', 'o avec double accent aigu', 'o avec double accent aigu']);
  this.executeCharTest('ŕ', ['r accent aigu', 'r accent aigu', 'r accent aigu']);
  this.executeCharTest('ŗ', ['r cédille', 'r cédille', 'r cédille']);
  this.executeCharTest('ř', ['r caron', 'r caron', 'r caron']);
  this.executeCharTest('ś', ['s accent aigu', 's accent aigu', 's accent aigu']);
  this.executeCharTest('ŝ', ['s accent circonflexe', 's accent circonflexe', 's accent circonflexe']);
  this.executeCharTest('ş', ['s cédille', 's cédille', 's cédille']);
  this.executeCharTest('š', ['s caron', 's caron', 's caron']);
  this.executeCharTest('ţ', ['t cédille', 't cédille', 't cédille']);
  this.executeCharTest('ť', ['t caron', 't caron', 't caron']);
  this.executeCharTest('ũ', ['u tilde', 'u tilde', 'u tilde']);
  this.executeCharTest('ū', ['u macron', 'u macron', 'u macron']);
  this.executeCharTest('ŭ', ['u brève', 'u brève', 'u brève']);
  this.executeCharTest('ů', ['u rond en chef', 'u rond en chef', 'u rond en chef']);
  this.executeCharTest('ű', ['u avec double accent aigu', 'u avec double accent aigu', 'u avec double accent aigu']);
  this.executeCharTest('ų', ['u ogonek', 'u ogonek', 'u ogonek']);
  this.executeCharTest('ŵ', ['w accent circonflexe', 'w accent circonflexe', 'w accent circonflexe']);
  this.executeCharTest('ŷ', ['y accent circonflexe', 'y accent circonflexe', 'y accent circonflexe']);
  this.executeCharTest('ź', ['z accent aigu', 'z accent aigu', 'z accent aigu']);
  this.executeCharTest('ż', ['z point en chef', 'z point en chef', 'z point en chef']);
  this.executeCharTest('ž', ['z caron', 'z caron', 'z caron']);
  this.executeCharTest('ǎ', ['a caron', 'a caron', 'a caron']);
  this.executeCharTest('ǐ', ['i caron', 'i caron', 'i caron']);
  this.executeCharTest('ǒ', ['o caron', 'o caron', 'o caron']);
  this.executeCharTest('ǔ', ['u caron', 'u caron', 'u caron']);
  this.executeCharTest('ǧ', ['g caron', 'g caron', 'g caron']);
  this.executeCharTest('ǩ', ['k caron', 'k caron', 'k caron']);
  this.executeCharTest('ǫ', ['o ogonek', 'o ogonek', 'o ogonek']);
  this.executeCharTest('ǰ', ['j caron', 'j caron', 'j caron']);
  this.executeCharTest('ǵ', ['g accent aigu', 'g accent aigu', 'g accent aigu']);
  this.executeCharTest('ǹ', ['n grave', 'n grave', 'n grave']);
  this.executeCharTest('ȁ', ['a double accent grave', 'a double accent grave', 'a double accent grave']);
  this.executeCharTest('ȃ', ['a brève renversée', 'a brève renversée', 'a brève renversée']);
  this.executeCharTest('ȅ', ['e double accent grave', 'e double accent grave', 'e double accent grave']);
  this.executeCharTest('ȇ', ['e brève renversée', 'e brève renversée', 'e brève renversée']);
  this.executeCharTest('ȉ', ['i double accent grave', 'i double accent grave', 'i double accent grave']);
  this.executeCharTest('ȋ', ['i brève renversée', 'i brève renversée', 'i brève renversée']);
  this.executeCharTest('ȍ', ['o double accent grave', 'o double accent grave', 'o double accent grave']);
  this.executeCharTest('ȏ', ['o brève renversée', 'o brève renversée', 'o brève renversée']);
  this.executeCharTest('ȑ', ['r double accent grave', 'r double accent grave', 'r double accent grave']);
  this.executeCharTest('ȓ', ['r brève renversée', 'r brève renversée', 'r brève renversée']);
  this.executeCharTest('ȕ', ['u double accent grave', 'u double accent grave', 'u double accent grave']);
  this.executeCharTest('ȗ', ['u brève renversée', 'u brève renversée', 'u brève renversée']);
  this.executeCharTest('ș', ['s virgule souscrite *', 's virgule souscrite *', 's virgule souscrite *']);
  this.executeCharTest('ț', ['t virgule souscrite *', 't virgule souscrite *', 't virgule souscrite *']);
  this.executeCharTest('ȟ', ['h caron', 'h caron', 'h caron']);
  this.executeCharTest('ȧ', ['a point en chef', 'a point en chef', 'a point en chef']);
  this.executeCharTest('ȩ', ['e cédille', 'e cédille', 'e cédille']);
  this.executeCharTest('ȯ', ['o point en chef', 'o point en chef', 'o point en chef']);
  this.executeCharTest('ȳ', ['y macron', 'y macron', 'y macron']);
  this.executeCharTest('ȷ', ['j sans point', 'j sans point', 'j sans point']);
  this.executeCharTest('ḁ', ['a à rond souscrit', 'a à rond souscrit', 'a à rond souscrit']);
  this.executeCharTest('ḃ', ['b point en chef', 'b point en chef', 'b point en chef']);
  this.executeCharTest('ḅ', ['b point souscrit', 'b point souscrit', 'b point souscrit']);
  this.executeCharTest('ḇ', ['b ligne souscrite', 'b ligne souscrite', 'b ligne souscrite']);
  this.executeCharTest('ḋ', ['d point en chef', 'd point en chef', 'd point en chef']);
  this.executeCharTest('ḍ', ['d point souscrit', 'd point souscrit', 'd point souscrit']);
  this.executeCharTest('ḏ', ['d ligne souscrite', 'd ligne souscrite', 'd ligne souscrite']);
  this.executeCharTest('ḑ', ['d cédille', 'd cédille', 'd cédille']);
  this.executeCharTest('ḓ', ['d accent circonflexe souscrit', 'd accent circonflexe souscrit', 'd accent circonflexe souscrit']);
  this.executeCharTest('ḙ', ['e accent circonflexe souscrit', 'e accent circonflexe souscrit', 'e accent circonflexe souscrit']);
  this.executeCharTest('ḛ', ['e tilde souscrit', 'e tilde souscrit', 'e tilde souscrit']);
  this.executeCharTest('ḟ', ['f point en chef', 'f point en chef', 'f point en chef']);
  this.executeCharTest('ḡ', ['g macron', 'g macron', 'g macron']);
  this.executeCharTest('ḣ', ['h point en chef', 'h point en chef', 'h point en chef']);
  this.executeCharTest('ḥ', ['h point souscrit', 'h point souscrit', 'h point souscrit']);
  this.executeCharTest('ḧ', ['h tréma', 'h tréma', 'h tréma']);
  this.executeCharTest('ḩ', ['h cédille', 'h cédille', 'h cédille']);
  this.executeCharTest('ḫ', ['h brève souscrit', 'h brève souscrit', 'h brève souscrit']);
  this.executeCharTest('ḭ', ['i tilde souscrit', 'i tilde souscrit', 'i tilde souscrit']);
  this.executeCharTest('ḱ', ['k accent aigu', 'k accent aigu', 'k accent aigu']);
  this.executeCharTest('ḳ', ['k point souscrit', 'k point souscrit', 'k point souscrit']);
  this.executeCharTest('ḵ', ['k ligne souscrite', 'k ligne souscrite', 'k ligne souscrite']);
  this.executeCharTest('ḷ', ['l point souscrit', 'l point souscrit', 'l point souscrit']);
  this.executeCharTest('ḻ', ['l ligne souscrite', 'l ligne souscrite', 'l ligne souscrite']);
  this.executeCharTest('ḽ', ['l accent circonflexe souscrit', 'l accent circonflexe souscrit', 'l accent circonflexe souscrit']);
  this.executeCharTest('ḿ', ['m accent aigu', 'm accent aigu', 'm accent aigu']);
  this.executeCharTest('ṁ', ['m point en chef', 'm point en chef', 'm point en chef']);
  this.executeCharTest('ṃ', ['m point souscrit', 'm point souscrit', 'm point souscrit']);
  this.executeCharTest('ṅ', ['n point en chef', 'n point en chef', 'n point en chef']);
  this.executeCharTest('ṇ', ['n point souscrit', 'n point souscrit', 'n point souscrit']);
  this.executeCharTest('ṉ', ['n ligne souscrite', 'n ligne souscrite', 'n ligne souscrite']);
  this.executeCharTest('ṋ', ['n accent circonflexe souscrit', 'n accent circonflexe souscrit', 'n accent circonflexe souscrit']);
  this.executeCharTest('ṕ', ['p accent aigu', 'p accent aigu', 'p accent aigu']);
  this.executeCharTest('ṗ', ['p point en chef', 'p point en chef', 'p point en chef']);
  this.executeCharTest('ṙ', ['r point en chef', 'r point en chef', 'r point en chef']);
  this.executeCharTest('ṛ', ['r point souscrit', 'r point souscrit', 'r point souscrit']);
  this.executeCharTest('ṟ', ['r ligne souscrite', 'r ligne souscrite', 'r ligne souscrite']);
  this.executeCharTest('ṡ', ['s point en chef', 's point en chef', 's point en chef']);
  this.executeCharTest('ṣ', ['s point souscrit', 's point souscrit', 's point souscrit']);
  this.executeCharTest('ṫ', ['t point en chef', 't point en chef', 't point en chef']);
  this.executeCharTest('ṭ', ['t point souscrit', 't point souscrit', 't point souscrit']);
  this.executeCharTest('ṯ', ['t ligne souscrite', 't ligne souscrite', 't ligne souscrite']);
  this.executeCharTest('ṱ', ['t accent circonflexe souscrit', 't accent circonflexe souscrit', 't accent circonflexe souscrit']);
  this.executeCharTest('ṳ', ['u tréma souscrit', 'u tréma souscrit', 'u tréma souscrit']);
  this.executeCharTest('ṵ', ['u tilde souscrit', 'u tilde souscrit', 'u tilde souscrit']);
  this.executeCharTest('ṷ', ['u accent circonflexe souscrit', 'u accent circonflexe souscrit', 'u accent circonflexe souscrit']);
  this.executeCharTest('ṽ', ['v tilde', 'v tilde', 'v tilde']);
  this.executeCharTest('ṿ', ['v point souscrit', 'v point souscrit', 'v point souscrit']);
  this.executeCharTest('ẁ', ['w accent grave', 'w accent grave', 'w accent grave']);
  this.executeCharTest('ẃ', ['w accent aigu', 'w accent aigu', 'w accent aigu']);
  this.executeCharTest('ẅ', ['w tréma', 'w tréma', 'w tréma']);
  this.executeCharTest('ẇ', ['w point en chef', 'w point en chef', 'w point en chef']);
  this.executeCharTest('ẉ', ['w point souscrit', 'w point souscrit', 'w point souscrit']);
  this.executeCharTest('ẋ', ['x point en chef', 'x point en chef', 'x point en chef']);
  this.executeCharTest('ẍ', ['x tréma', 'x tréma', 'x tréma']);
  this.executeCharTest('ẏ', ['y point en chef', 'y point en chef', 'y point en chef']);
  this.executeCharTest('ẑ', ['z accent circonflexe', 'z accent circonflexe', 'z accent circonflexe']);
  this.executeCharTest('ẓ', ['z point souscrit', 'z point souscrit', 'z point souscrit']);
  this.executeCharTest('ẕ', ['z ligne souscrite', 'z ligne souscrite', 'z ligne souscrite']);
  this.executeCharTest('ẖ', ['h ligne souscrite', 'h ligne souscrite', 'h ligne souscrite']);
  this.executeCharTest('ẗ', ['t tréma', 't tréma', 't tréma']);
  this.executeCharTest('ẘ', ['w rond en chef', 'w rond en chef', 'w rond en chef']);
  this.executeCharTest('ẙ', ['y rond en chef', 'y rond en chef', 'y rond en chef']);
  this.executeCharTest('ẚ', ['a demi rond à droite', 'a demi rond à droite', 'a demi rond à droite']);
  this.executeCharTest('ạ', ['a point souscrit', 'a point souscrit', 'a point souscrit']);
  this.executeCharTest('ả', ['a crochet en chef', 'a crochet en chef', 'a crochet en chef']);
  this.executeCharTest('ẹ', ['e point souscrit', 'e point souscrit', 'e point souscrit']);
  this.executeCharTest('ẻ', ['e crochet en chef', 'e crochet en chef', 'e crochet en chef']);
  this.executeCharTest('ẽ', ['e tilde', 'e tilde', 'e tilde']);
  this.executeCharTest('ỉ', ['i crochet en chef', 'i crochet en chef', 'i crochet en chef']);
  this.executeCharTest('ị', ['i point souscrit', 'i point souscrit', 'i point souscrit']);
  this.executeCharTest('ọ', ['o point souscrit', 'o point souscrit', 'o point souscrit']);
  this.executeCharTest('ỏ', ['o crochet en chef', 'o crochet en chef', 'o crochet en chef']);
  this.executeCharTest('ụ', ['u point souscrit', 'u point souscrit', 'u point souscrit']);
  this.executeCharTest('ủ', ['u crochet en chef', 'u crochet en chef', 'u crochet en chef']);
  this.executeCharTest('ỳ', ['y accent grave', 'y accent grave', 'y accent grave']);
  this.executeCharTest('ỵ', ['y point souscrit', 'y point souscrit', 'y point souscrit']);
  this.executeCharTest('ỷ', ['y crochet en chef', 'y crochet en chef', 'y crochet en chef']);
  this.executeCharTest('ỹ', ['y tilde', 'y tilde', 'y tilde']);
  this.executeCharTest('ͣ', ['diacritique a', 'diacritique a', 'diacritique a']);
  this.executeCharTest('ͤ', ['diacritique e', 'diacritique e', 'diacritique e']);
  this.executeCharTest('ͥ', ['diacritique i', 'diacritique i', 'diacritique i']);
  this.executeCharTest('ͦ', ['diacritique o', 'diacritique o', 'diacritique o']);
  this.executeCharTest('ͧ', ['diacritique u', 'diacritique u', 'diacritique u']);
  this.executeCharTest('ͨ', ['diacritique c', 'diacritique c', 'diacritique c']);
  this.executeCharTest('ͩ', ['diacritique d', 'diacritique d', 'diacritique d']);
  this.executeCharTest('ͪ', ['diacritique h', 'diacritique h', 'diacritique h']);
  this.executeCharTest('ͫ', ['diacritique m', 'diacritique m', 'diacritique m']);
  this.executeCharTest('ͬ', ['diacritique r', 'diacritique r', 'diacritique r']);
  this.executeCharTest('ͭ', ['diacritique t', 'diacritique t', 'diacritique t']);
  this.executeCharTest('ͮ', ['diacritique v', 'diacritique v', 'diacritique v']);
  this.executeCharTest('ͯ', ['diacritique x', 'diacritique x', 'diacritique x']);
  this.executeCharTest('ᵢ', ['i souscrit', 'i souscrit', 'i souscrit']);
  this.executeCharTest('ᵣ', ['r souscrit', 'r souscrit', 'r souscrit']);
  this.executeCharTest('ᵤ', ['u souscrit', 'u souscrit', 'u souscrit']);
  this.executeCharTest('ᵥ', ['v souscrit', 'v souscrit', 'v souscrit']);
  this.executeCharTest('᷊', ['diacritique r souscrite', 'diacritique r souscrite', 'diacritique r souscrite']);
  this.executeCharTest('ᷓ', ['diacritique a ouvert aplati suscrit', 'diacritique a ouvert aplati suscrit', 'diacritique a ouvert aplati suscrit']);
  this.executeCharTest('ᷔ', ['diacritique ae', 'diacritique ae', 'diacritique ae']);
  this.executeCharTest('ᷕ', ['diacritique ao', 'diacritique ao', 'diacritique ao']);
  this.executeCharTest('ᷖ', ['diacritique av', 'diacritique av', 'diacritique av']);
  this.executeCharTest('ᷗ', ['diacritique c cédille', 'diacritique c cédille', 'diacritique c cédille']);
  this.executeCharTest('ᷘ', ['diacritique d insulaire', 'diacritique d insulaire', 'diacritique d insulaire']);
  this.executeCharTest('ᷙ', ['diacritique eth', 'diacritique eth', 'diacritique eth']);
  this.executeCharTest('ᷚ', ['diacritique g', 'diacritique g', 'diacritique g']);
  this.executeCharTest('ᷛ', ['diacritique petite g majuscule', 'diacritique petite g majuscule', 'diacritique petite g majuscule']);
  this.executeCharTest('ᷜ', ['diacritique k', 'diacritique k', 'diacritique k']);
  this.executeCharTest('ᷝ', ['diacritique l', 'diacritique l', 'diacritique l']);
  this.executeCharTest('ᷞ', ['diacritique petite l majuscule', 'diacritique petite l majuscule', 'diacritique petite l majuscule']);
  this.executeCharTest('ᷟ', ['diacritique petite m majuscule', 'diacritique petite m majuscule', 'diacritique petite m majuscule']);
  this.executeCharTest('ᷠ', ['diacritique n', 'diacritique n', 'diacritique n']);
  this.executeCharTest('ᷡ', ['diacritique petite n majuscule', 'diacritique petite n majuscule', 'diacritique petite n majuscule']);
  this.executeCharTest('ᷢ', ['diacritique petite r majuscule', 'diacritique petite r majuscule', 'diacritique petite r majuscule']);
  this.executeCharTest('ᷣ', ['diacritique r rotunda', 'diacritique r rotunda', 'diacritique r rotunda']);
  this.executeCharTest('ᷤ', ['diacritique s', 'diacritique s', 'diacritique s']);
  this.executeCharTest('ᷥ', ['diacritique s long', 'diacritique s long', 'diacritique s long']);
  this.executeCharTest('ᷦ', ['diacritique z', 'diacritique z', 'diacritique z']);
  this.executeCharTest('ⁱ', ['exposant i', 'exposant i', 'exposant i']);
  this.executeCharTest('ⁿ', ['exposant n', 'exposant n', 'exposant n']);
  this.executeCharTest('ₐ', ['indice a', 'indice a', 'indice a']);
  this.executeCharTest('ₑ', ['indice e', 'indice e', 'indice e']);
  this.executeCharTest('ₒ', ['indice o', 'indice o', 'indice o']);
  this.executeCharTest('ₓ', ['indice x', 'indice x', 'indice x']);
  this.executeCharTest('ₔ', ['indice schwa', 'indice schwa', 'indice schwa']);
  this.executeCharTest('ₕ', ['souscrite h', 'souscrite h', 'souscrite h']);
  this.executeCharTest('ₖ', ['souscrite k', 'souscrite k', 'souscrite k']);
  this.executeCharTest('ₗ', ['souscrite l', 'souscrite l', 'souscrite l']);
  this.executeCharTest('ₘ', ['souscrite m', 'souscrite m', 'souscrite m']);
  this.executeCharTest('ₙ', ['souscrite n', 'souscrite n', 'souscrite n']);
  this.executeCharTest('ₚ', ['souscrite p', 'souscrite p', 'souscrite p']);
  this.executeCharTest('ₛ', ['souscrite s', 'souscrite s', 'souscrite s']);
  this.executeCharTest('ₜ', ['souscrite t', 'souscrite t', 'souscrite t']);
  this.executeCharTest('ⱼ', ['j souscrite', 'j souscrite', 'j souscrite']);
  this.executeCharTest('🄪', ['s majuscule en écaille crochetée', 's majuscule en écaille crochetée', 's majuscule en écaille crochetée']);
  this.executeCharTest('🄫', ['c majuscule en italique cerclée', 'c majuscule en italique cerclée', 'c majuscule en italique cerclée']);
  this.executeCharTest('🄬', ['r majuscule en italique cerclée', 'r majuscule en italique cerclée', 'r majuscule en italique cerclée']);
  this.executeCharTest('🆊', ['P majuscule encadrée et en inversion avec croix', 'P majuscule encadrée et en inversion avec croix', 'P majuscule encadrée et en inversion avec croix']);
  this.executeCharTest('Ǖ', ['U majuscule trémaa et macron', 'U majuscule trémaa et macron', 'U majuscule trémaa et macron']);
  this.executeCharTest('Ǘ', ['U majuscule trémaa et accent aigu', 'U majuscule trémaa et accent aigu', 'U majuscule trémaa et accent aigu']);
  this.executeCharTest('Ǚ', ['U majuscule trémaa et caron', 'U majuscule trémaa et caron', 'U majuscule trémaa et caron']);
  this.executeCharTest('Ǜ', ['U majuscule trémaa et accent grave', 'U majuscule trémaa et accent grave', 'U majuscule trémaa et accent grave']);
  this.executeCharTest('Ǟ', ['A majuscule trémaa et macron', 'A majuscule trémaa et macron', 'A majuscule trémaa et macron']);
  this.executeCharTest('Ǡ', ['A majuscule point en chef et macron', 'A majuscule point en chef et macron', 'A majuscule point en chef et macron']);
  this.executeCharTest('Ǭ', ['O majuscule ogonek et macron', 'O majuscule ogonek et macron', 'O majuscule ogonek et macron']);
  this.executeCharTest('Ǻ', ['A majuscule rond en chef et accent aigu', 'A majuscule rond en chef et accent aigu', 'A majuscule rond en chef et accent aigu']);
  this.executeCharTest('Ȫ', ['O majuscule tréma et macron', 'O majuscule tréma et macron', 'O majuscule tréma et macron']);
  this.executeCharTest('Ȭ', ['O majuscule tilde et macron', 'O majuscule tilde et macron', 'O majuscule tilde et macron']);
  this.executeCharTest('Ȱ', ['O majuscule point en chef et macron', 'O majuscule point en chef et macron', 'O majuscule point en chef et macron']);
  this.executeCharTest('Ḉ', ['C cédille et accent aigu majuscule', 'C cédille et accent aigu majuscule', 'C cédille et accent aigu majuscule']);
  this.executeCharTest('Ḕ', ['E macron et accent grave majuscule', 'E macron et accent grave majuscule', 'E macron et accent grave majuscule']);
  this.executeCharTest('Ḗ', ['E macron et accent aigu majuscule', 'E macron et accent aigu majuscule', 'E macron et accent aigu majuscule']);
  this.executeCharTest('Ḝ', ['E cédille et brève majuscule', 'E cédille et brève majuscule', 'E cédille et brève majuscule']);
  this.executeCharTest('Ḯ', ['I tréma et accent aigu majuscule', 'I tréma et accent aigu majuscule', 'I tréma et accent aigu majuscule']);
  this.executeCharTest('Ḹ', ['L point souscrit et macron majuscule', 'L point souscrit et macron majuscule', 'L point souscrit et macron majuscule']);
  this.executeCharTest('Ṍ', ['O tilde et accent aigu majuscule', 'O tilde et accent aigu majuscule', 'O tilde et accent aigu majuscule']);
  this.executeCharTest('Ṏ', ['O tilde et tréma majuscule', 'O tilde et tréma majuscule', 'O tilde et tréma majuscule']);
  this.executeCharTest('Ṑ', ['O macron et accent grave majuscule', 'O macron et accent grave majuscule', 'O macron et accent grave majuscule']);
  this.executeCharTest('Ṓ', ['O macron et accent aigu majuscule', 'O macron et accent aigu majuscule', 'O macron et accent aigu majuscule']);
  this.executeCharTest('Ṝ', ['R point souscrit et macron majuscule', 'R point souscrit et macron majuscule', 'R point souscrit et macron majuscule']);
  this.executeCharTest('Ṥ', ['S accent aigu et point en chef majuscule', 'S accent aigu et point en chef majuscule', 'S accent aigu et point en chef majuscule']);
  this.executeCharTest('Ṧ', ['S caron et point en chef majuscule', 'S caron et point en chef majuscule', 'S caron et point en chef majuscule']);
  this.executeCharTest('Ṩ', ['S point souscrit et point en chef majuscule', 'S point souscrit et point en chef majuscule', 'S point souscrit et point en chef majuscule']);
  this.executeCharTest('Ṹ', ['U tilde et accent aigu majuscule', 'U tilde et accent aigu majuscule', 'U tilde et accent aigu majuscule']);
  this.executeCharTest('Ṻ', ['U macron et tréma majuscule', 'U macron et tréma majuscule', 'U macron et tréma majuscule']);
  this.executeCharTest('Ấ', ['A accent circonflexe et accent aigu majuscule', 'A accent circonflexe et accent aigu majuscule', 'A accent circonflexe et accent aigu majuscule']);
  this.executeCharTest('Ầ', ['A accent circonflexe et accent grave majuscule', 'A accent circonflexe et accent grave majuscule', 'A accent circonflexe et accent grave majuscule']);
  this.executeCharTest('Ẩ', ['A accent circonflexe et crochet en chef majuscule', 'A accent circonflexe et crochet en chef majuscule', 'A accent circonflexe et crochet en chef majuscule']);
  this.executeCharTest('Ẫ', ['A accent circonflexe et tilde majuscule', 'A accent circonflexe et tilde majuscule', 'A accent circonflexe et tilde majuscule']);
  this.executeCharTest('Ậ', ['A accent circonflexe et point souscrit majuscule', 'A accent circonflexe et point souscrit majuscule', 'A accent circonflexe et point souscrit majuscule']);
  this.executeCharTest('Ắ', ['A brève et accent aigu majuscule', 'A brève et accent aigu majuscule', 'A brève et accent aigu majuscule']);
  this.executeCharTest('Ằ', ['A brève et accent grave majuscule', 'A brève et accent grave majuscule', 'A brève et accent grave majuscule']);
  this.executeCharTest('Ẳ', ['A brève et crochet en chef majuscule', 'A brève et crochet en chef majuscule', 'A brève et crochet en chef majuscule']);
  this.executeCharTest('Ẵ', ['A brève et tilde majuscule', 'A brève et tilde majuscule', 'A brève et tilde majuscule']);
  this.executeCharTest('Ặ', ['A brève et point souscrit majuscule', 'A brève et point souscrit majuscule', 'A brève et point souscrit majuscule']);
  this.executeCharTest('Ế', ['E accent circonflexe et accent aigu majuscule', 'E accent circonflexe et accent aigu majuscule', 'E accent circonflexe et accent aigu majuscule']);
  this.executeCharTest('Ề', ['E accent circonflexe et accent grave majuscule', 'E accent circonflexe et accent grave majuscule', 'E accent circonflexe et accent grave majuscule']);
  this.executeCharTest('Ể', ['E accent circonflexe et crochet en chef majuscule', 'E accent circonflexe et crochet en chef majuscule', 'E accent circonflexe et crochet en chef majuscule']);
  this.executeCharTest('Ễ', ['E accent circonflexe et tilde majuscule', 'E accent circonflexe et tilde majuscule', 'E accent circonflexe et tilde majuscule']);
  this.executeCharTest('Ệ', ['E accent circonflexe et point souscrit majuscule', 'E accent circonflexe et point souscrit majuscule', 'E accent circonflexe et point souscrit majuscule']);
  this.executeCharTest('Ố', ['O accent circonflexe et accent aigu majuscule', 'O accent circonflexe et accent aigu majuscule', 'O accent circonflexe et accent aigu majuscule']);
  this.executeCharTest('Ồ', ['O accent circonflexe et accent grave majuscule', 'O accent circonflexe et accent grave majuscule', 'O accent circonflexe et accent grave majuscule']);
  this.executeCharTest('Ổ', ['O accent circonflexe et crochet en chef majuscule', 'O accent circonflexe et crochet en chef majuscule', 'O accent circonflexe et crochet en chef majuscule']);
  this.executeCharTest('Ỗ', ['O accent circonflexe et tilde majuscule', 'O accent circonflexe et tilde majuscule', 'O accent circonflexe et tilde majuscule']);
  this.executeCharTest('Ộ', ['O accent circonflexe et point souscrit majuscule', 'O accent circonflexe et point souscrit majuscule', 'O accent circonflexe et point souscrit majuscule']);
  this.executeCharTest('Ớ', ['O cornu accent aigu majuscule', 'O cornu accent aigu majuscule', 'O cornu accent aigu majuscule']);
  this.executeCharTest('Ờ', ['O cornu accent grave majuscule', 'O cornu accent grave majuscule', 'O cornu accent grave majuscule']);
  this.executeCharTest('Ở', ['O cornu crochet en chef majuscule', 'O cornu crochet en chef majuscule', 'O cornu crochet en chef majuscule']);
  this.executeCharTest('Ỡ', ['O cornu tilde majuscule', 'O cornu tilde majuscule', 'O cornu tilde majuscule']);
  this.executeCharTest('Ợ', ['O cornu point souscrit majuscule', 'O cornu point souscrit majuscule', 'O cornu point souscrit majuscule']);
  this.executeCharTest('Ứ', ['U cornu accent aigu majuscule', 'U cornu accent aigu majuscule', 'U cornu accent aigu majuscule']);
  this.executeCharTest('Ừ', ['U cornu accent grave majuscule', 'U cornu accent grave majuscule', 'U cornu accent grave majuscule']);
  this.executeCharTest('Ử', ['U cornu crochet en chef majuscule', 'U cornu crochet en chef majuscule', 'U cornu crochet en chef majuscule']);
  this.executeCharTest('Ữ', ['U cornu tilde majuscule', 'U cornu tilde majuscule', 'U cornu tilde majuscule']);
  this.executeCharTest('Ự', ['U cornu point souscrit majuscule', 'U cornu point souscrit majuscule', 'U cornu point souscrit majuscule']);
  this.executeCharTest('À', ['A accent grave majuscule', 'A accent grave majuscule', 'A accent grave majuscule']);
  this.executeCharTest('Á', ['A accent aigu majuscule', 'A accent aigu majuscule', 'A accent aigu majuscule']);
  this.executeCharTest('Â', ['A accent circonflexe majuscule', 'A accent circonflexe majuscule', 'A accent circonflexe majuscule']);
  this.executeCharTest('Ã', ['A tilde majuscule', 'A tilde majuscule', 'A tilde majuscule']);
  this.executeCharTest('Ä', ['A tréma majuscule', 'A tréma majuscule', 'A tréma majuscule']);
  this.executeCharTest('Å', ['angstrom', 'angstrom', 'angstrom']);
  this.executeCharTest('Ç', ['C cédille majuscule', 'C cédille majuscule', 'C cédille majuscule']);
  this.executeCharTest('È', ['E accent grave majuscule', 'E accent grave majuscule', 'E accent grave majuscule']);
  this.executeCharTest('É', ['E accent aigu majuscule', 'E accent aigu majuscule', 'E accent aigu majuscule']);
  this.executeCharTest('Ê', ['E accent circonflexe majuscule', 'E accent circonflexe majuscule', 'E accent circonflexe majuscule']);
  this.executeCharTest('Ë', ['E tréma majuscule', 'E tréma majuscule', 'E tréma majuscule']);
  this.executeCharTest('Ì', ['I accent grave majuscule', 'I accent grave majuscule', 'I accent grave majuscule']);
  this.executeCharTest('Í', ['I accent aigu majuscule', 'I accent aigu majuscule', 'I accent aigu majuscule']);
  this.executeCharTest('Î', ['I accent circonflexe majuscule', 'I accent circonflexe majuscule', 'I accent circonflexe majuscule']);
  this.executeCharTest('Ï', ['I tréma majuscule', 'I tréma majuscule', 'I tréma majuscule']);
  this.executeCharTest('Ñ', ['N tilde majuscule', 'N tilde majuscule', 'N tilde majuscule']);
  this.executeCharTest('Ò', ['O accent grave majuscule', 'O accent grave majuscule', 'O accent grave majuscule']);
  this.executeCharTest('Ó', ['O accent aigu majuscule', 'O accent aigu majuscule', 'O accent aigu majuscule']);
  this.executeCharTest('Ô', ['O accent circonflexe majuscule', 'O accent circonflexe majuscule', 'O accent circonflexe majuscule']);
  this.executeCharTest('Õ', ['O tilde majuscule', 'O tilde majuscule', 'O tilde majuscule']);
  this.executeCharTest('Ö', ['O tréma majuscule', 'O tréma majuscule', 'O tréma majuscule']);
  this.executeCharTest('Ù', ['U accent grave majuscule', 'U accent grave majuscule', 'U accent grave majuscule']);
  this.executeCharTest('Ú', ['U accent aigu majuscule', 'U accent aigu majuscule', 'U accent aigu majuscule']);
  this.executeCharTest('Û', ['U accent circonflexe majuscule', 'U accent circonflexe majuscule', 'U accent circonflexe majuscule']);
  this.executeCharTest('Ü', ['U tréma majuscule', 'U tréma majuscule', 'U tréma majuscule']);
  this.executeCharTest('Ý', ['Y accent aigu majuscule', 'Y accent aigu majuscule', 'Y accent aigu majuscule']);
  this.executeCharTest('Ā', ['A macron majuscule', 'A macron majuscule', 'A macron majuscule']);
  this.executeCharTest('Ă', ['A brève majuscule', 'A brève majuscule', 'A brève majuscule']);
  this.executeCharTest('Ą', ['A ogonek majuscule', 'A ogonek majuscule', 'A ogonek majuscule']);
  this.executeCharTest('Ć', ['C accent aigu majuscule', 'C accent aigu majuscule', 'C accent aigu majuscule']);
  this.executeCharTest('Ĉ', ['C accent circonflexe majuscule', 'C accent circonflexe majuscule', 'C accent circonflexe majuscule']);
  this.executeCharTest('Ċ', ['C point en chef majuscule', 'C point en chef majuscule', 'C point en chef majuscule']);
  this.executeCharTest('Č', ['C caron majuscule', 'C caron majuscule', 'C caron majuscule']);
  this.executeCharTest('Ď', ['D caron majuscule', 'D caron majuscule', 'D caron majuscule']);
  this.executeCharTest('Ē', ['E macron majuscule', 'E macron majuscule', 'E macron majuscule']);
  this.executeCharTest('Ĕ', ['E brève majuscule', 'E brève majuscule', 'E brève majuscule']);
  this.executeCharTest('Ė', ['E point en chef majuscule', 'E point en chef majuscule', 'E point en chef majuscule']);
  this.executeCharTest('Ę', ['E ogonek majuscule', 'E ogonek majuscule', 'E ogonek majuscule']);
  this.executeCharTest('Ě', ['E caron majuscule', 'E caron majuscule', 'E caron majuscule']);
  this.executeCharTest('Ĝ', ['G accent circonflexe majuscule', 'G accent circonflexe majuscule', 'G accent circonflexe majuscule']);
  this.executeCharTest('Ğ', ['G brève majuscule', 'G brève majuscule', 'G brève majuscule']);
  this.executeCharTest('Ġ', ['G point en chef majuscule', 'G point en chef majuscule', 'G point en chef majuscule']);
  this.executeCharTest('Ģ', ['G cédille majuscule', 'G cédille majuscule', 'G cédille majuscule']);
  this.executeCharTest('Ĥ', ['H accent circonflexe majuscule', 'H accent circonflexe majuscule', 'H accent circonflexe majuscule']);
  this.executeCharTest('Ĩ', ['I tilde majuscule', 'I tilde majuscule', 'I tilde majuscule']);
  this.executeCharTest('Ī', ['I macron majuscule', 'I macron majuscule', 'I macron majuscule']);
  this.executeCharTest('Ĭ', ['I brève majuscule', 'I brève majuscule', 'I brève majuscule']);
  this.executeCharTest('Į', ['I ogonek majuscule', 'I ogonek majuscule', 'I ogonek majuscule']);
  this.executeCharTest('İ', ['I point en chef majuscule', 'I point en chef majuscule', 'I point en chef majuscule']);
  this.executeCharTest('Ĵ', ['J accent circonflexe majuscule', 'J accent circonflexe majuscule', 'J accent circonflexe majuscule']);
  this.executeCharTest('Ķ', ['K cédille majuscule', 'K cédille majuscule', 'K cédille majuscule']);
  this.executeCharTest('Ĺ', ['L accent aigu majuscule', 'L accent aigu majuscule', 'L accent aigu majuscule']);
  this.executeCharTest('Ļ', ['L cédille majuscule', 'L cédille majuscule', 'L cédille majuscule']);
  this.executeCharTest('Ľ', ['L caron majuscule', 'L caron majuscule', 'L caron majuscule']);
  this.executeCharTest('Ŀ', ['L point médian majuscule', 'L point médian majuscule', 'L point médian majuscule']);
  this.executeCharTest('Ń', ['N accent aigu majuscule', 'N accent aigu majuscule', 'N accent aigu majuscule']);
  this.executeCharTest('Ņ', ['N cédille majuscule', 'N cédille majuscule', 'N cédille majuscule']);
  this.executeCharTest('Ň', ['N caron majuscule', 'N caron majuscule', 'N caron majuscule']);
  this.executeCharTest('Ō', ['O macron majuscule', 'O macron majuscule', 'O macron majuscule']);
  this.executeCharTest('Ŏ', ['O brève majuscule', 'O brève majuscule', 'O brève majuscule']);
  this.executeCharTest('Ő', ['O avec double accent aigu majuscule', 'O avec double accent aigu majuscule', 'O avec double accent aigu majuscule']);
  this.executeCharTest('Ŕ', ['R accent aigu majuscule', 'R accent aigu majuscule', 'R accent aigu majuscule']);
  this.executeCharTest('Ŗ', ['R cédille majuscule', 'R cédille majuscule', 'R cédille majuscule']);
  this.executeCharTest('Ř', ['R caron majuscule', 'R caron majuscule', 'R caron majuscule']);
  this.executeCharTest('Ś', ['S accent aigu majuscule', 'S accent aigu majuscule', 'S accent aigu majuscule']);
  this.executeCharTest('Ŝ', ['S accent circonflexe majuscule', 'S accent circonflexe majuscule', 'S accent circonflexe majuscule']);
  this.executeCharTest('Ş', ['S cédille majuscule', 'S cédille majuscule', 'S cédille majuscule']);
  this.executeCharTest('Š', ['S caron majuscule', 'S caron majuscule', 'S caron majuscule']);
  this.executeCharTest('Ţ', ['T cédille majuscule', 'T cédille majuscule', 'T cédille majuscule']);
  this.executeCharTest('Ť', ['T caron majuscule', 'T caron majuscule', 'T caron majuscule']);
  this.executeCharTest('Ũ', ['U tilde majuscule', 'U tilde majuscule', 'U tilde majuscule']);
  this.executeCharTest('Ū', ['U macron majuscule', 'U macron majuscule', 'U macron majuscule']);
  this.executeCharTest('Ŭ', ['U brève majuscule', 'U brève majuscule', 'U brève majuscule']);
  this.executeCharTest('Ů', ['U rond en chef majuscule', 'U rond en chef majuscule', 'U rond en chef majuscule']);
  this.executeCharTest('Ű', ['U avec double accent aigu majuscule', 'U avec double accent aigu majuscule', 'U avec double accent aigu majuscule']);
  this.executeCharTest('Ų', ['U ogonek majuscule', 'U ogonek majuscule', 'U ogonek majuscule']);
  this.executeCharTest('Ŵ', ['W accent circonflexe majuscule', 'W accent circonflexe majuscule', 'W accent circonflexe majuscule']);
  this.executeCharTest('Ŷ', ['Y accent circonflexe majuscule', 'Y accent circonflexe majuscule', 'Y accent circonflexe majuscule']);
  this.executeCharTest('Ÿ', ['Y tréma majuscule', 'Y tréma majuscule', 'Y tréma majuscule']);
  this.executeCharTest('Ź', ['Z accent aigu majuscule', 'Z accent aigu majuscule', 'Z accent aigu majuscule']);
  this.executeCharTest('Ż', ['Z point en chef majuscule', 'Z point en chef majuscule', 'Z point en chef majuscule']);
  this.executeCharTest('Ž', ['Z caron majuscule', 'Z caron majuscule', 'Z caron majuscule']);
  this.executeCharTest('Ǎ', ['A caron majuscule', 'A caron majuscule', 'A caron majuscule']);
  this.executeCharTest('Ǐ', ['I caron majuscule', 'I caron majuscule', 'I caron majuscule']);
  this.executeCharTest('Ǒ', ['O caron majuscule', 'O caron majuscule', 'O caron majuscule']);
  this.executeCharTest('Ǔ', ['U caron majuscule', 'U caron majuscule', 'U caron majuscule']);
  this.executeCharTest('Ǧ', ['G caron majuscule', 'G caron majuscule', 'G caron majuscule']);
  this.executeCharTest('Ǩ', ['K caron majuscule', 'K caron majuscule', 'K caron majuscule']);
  this.executeCharTest('Ǫ', ['O ogonek majuscule', 'O ogonek majuscule', 'O ogonek majuscule']);
  this.executeCharTest('Ǵ', ['G accent aigu majuscule', 'G accent aigu majuscule', 'G accent aigu majuscule']);
  this.executeCharTest('Ǹ', ['N grave majuscule', 'N grave majuscule', 'N grave majuscule']);
  this.executeCharTest('Ȁ', ['A double accent grave majuscule', 'A double accent grave majuscule', 'A double accent grave majuscule']);
  this.executeCharTest('Ȃ', ['A brève renversée majuscule', 'A brève renversée majuscule', 'A brève renversée majuscule']);
  this.executeCharTest('Ȅ', ['E double accent grave majuscule', 'E double accent grave majuscule', 'E double accent grave majuscule']);
  this.executeCharTest('Ȇ', ['E brève renversée majuscule', 'E brève renversée majuscule', 'E brève renversée majuscule']);
  this.executeCharTest('Ȉ', ['I double accent grave majuscule', 'I double accent grave majuscule', 'I double accent grave majuscule']);
  this.executeCharTest('Ȋ', ['I brève renversée majuscule', 'I brève renversée majuscule', 'I brève renversée majuscule']);
  this.executeCharTest('Ȍ', ['O double accent grave majuscule', 'O double accent grave majuscule', 'O double accent grave majuscule']);
  this.executeCharTest('Ȏ', ['O brève renversée majuscule', 'O brève renversée majuscule', 'O brève renversée majuscule']);
  this.executeCharTest('Ȑ', ['R double accent grave majuscule', 'R double accent grave majuscule', 'R double accent grave majuscule']);
  this.executeCharTest('Ȓ', ['R brève renversée majuscule', 'R brève renversée majuscule', 'R brève renversée majuscule']);
  this.executeCharTest('Ȕ', ['U double accent grave majuscule', 'U double accent grave majuscule', 'U double accent grave majuscule']);
  this.executeCharTest('Ȗ', ['U brève renversée majuscule', 'U brève renversée majuscule', 'U brève renversée majuscule']);
  this.executeCharTest('Ș', ['S virgule souscrite * majuscule', 'S virgule souscrite * majuscule', 'S virgule souscrite * majuscule']);
  this.executeCharTest('Ț', ['T virgule souscrite * majuscule', 'T virgule souscrite * majuscule', 'T virgule souscrite * majuscule']);
  this.executeCharTest('Ȟ', ['H caron majuscule', 'H caron majuscule', 'H caron majuscule']);
  this.executeCharTest('Ȧ', ['A point en chef majuscule', 'A point en chef majuscule', 'A point en chef majuscule']);
  this.executeCharTest('Ȩ', ['E cédille majuscule', 'E cédille majuscule', 'E cédille majuscule']);
  this.executeCharTest('Ȯ', ['O point en chef majuscule', 'O point en chef majuscule', 'O point en chef majuscule']);
  this.executeCharTest('Ȳ', ['Y macron majuscule', 'Y macron majuscule', 'Y macron majuscule']);
  this.executeCharTest('Ḁ', ['A à rond souscrit majuscule', 'A à rond souscrit majuscule', 'A à rond souscrit majuscule']);
  this.executeCharTest('Ḃ', ['B point en chef majuscule', 'B point en chef majuscule', 'B point en chef majuscule']);
  this.executeCharTest('Ḅ', ['B point souscrit majuscule', 'B point souscrit majuscule', 'B point souscrit majuscule']);
  this.executeCharTest('Ḇ', ['B ligne souscrite majuscule', 'B ligne souscrite majuscule', 'B ligne souscrite majuscule']);
  this.executeCharTest('Ḋ', ['D point en chef majuscule', 'D point en chef majuscule', 'D point en chef majuscule']);
  this.executeCharTest('Ḍ', ['D point souscrit majuscule', 'D point souscrit majuscule', 'D point souscrit majuscule']);
  this.executeCharTest('Ḏ', ['D ligne souscrite majuscule', 'D ligne souscrite majuscule', 'D ligne souscrite majuscule']);
  this.executeCharTest('Ḑ', ['D cédille majuscule', 'D cédille majuscule', 'D cédille majuscule']);
  this.executeCharTest('Ḓ', ['D accent circonflexe souscrit majuscule', 'D accent circonflexe souscrit majuscule', 'D accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ḙ', ['E accent circonflexe souscrit majuscule', 'E accent circonflexe souscrit majuscule', 'E accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ḛ', ['E tilde souscrit majuscule', 'E tilde souscrit majuscule', 'E tilde souscrit majuscule']);
  this.executeCharTest('Ḟ', ['F point en chef majuscule', 'F point en chef majuscule', 'F point en chef majuscule']);
  this.executeCharTest('Ḡ', ['G macron majuscule', 'G macron majuscule', 'G macron majuscule']);
  this.executeCharTest('Ḣ', ['H point en chef majuscule', 'H point en chef majuscule', 'H point en chef majuscule']);
  this.executeCharTest('Ḥ', ['H point souscrit majuscule', 'H point souscrit majuscule', 'H point souscrit majuscule']);
  this.executeCharTest('Ḧ', ['H tréma majuscule', 'H tréma majuscule', 'H tréma majuscule']);
  this.executeCharTest('Ḩ', ['H cédille majuscule', 'H cédille majuscule', 'H cédille majuscule']);
  this.executeCharTest('Ḫ', ['H brève souscrit majuscule', 'H brève souscrit majuscule', 'H brève souscrit majuscule']);
  this.executeCharTest('Ḭ', ['I tilde souscrit majuscule', 'I tilde souscrit majuscule', 'I tilde souscrit majuscule']);
  this.executeCharTest('Ḱ', ['K accent aigu majuscule', 'K accent aigu majuscule', 'K accent aigu majuscule']);
  this.executeCharTest('Ḳ', ['K point souscrit majuscule', 'K point souscrit majuscule', 'K point souscrit majuscule']);
  this.executeCharTest('Ḵ', ['K ligne souscrite majuscule', 'K ligne souscrite majuscule', 'K ligne souscrite majuscule']);
  this.executeCharTest('Ḷ', ['L point souscrit majuscule', 'L point souscrit majuscule', 'L point souscrit majuscule']);
  this.executeCharTest('Ḻ', ['L ligne souscrite majuscule', 'L ligne souscrite majuscule', 'L ligne souscrite majuscule']);
  this.executeCharTest('Ḽ', ['L accent circonflexe souscrit majuscule', 'L accent circonflexe souscrit majuscule', 'L accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ḿ', ['M accent aigu majuscule', 'M accent aigu majuscule', 'M accent aigu majuscule']);
  this.executeCharTest('Ṁ', ['M point en chef majuscule', 'M point en chef majuscule', 'M point en chef majuscule']);
  this.executeCharTest('Ṃ', ['M point souscrit majuscule', 'M point souscrit majuscule', 'M point souscrit majuscule']);
  this.executeCharTest('Ṅ', ['N point en chef majuscule', 'N point en chef majuscule', 'N point en chef majuscule']);
  this.executeCharTest('Ṇ', ['N point souscrit majuscule', 'N point souscrit majuscule', 'N point souscrit majuscule']);
  this.executeCharTest('Ṉ', ['N ligne souscrite majuscule', 'N ligne souscrite majuscule', 'N ligne souscrite majuscule']);
  this.executeCharTest('Ṋ', ['N accent circonflexe souscrit majuscule', 'N accent circonflexe souscrit majuscule', 'N accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ṕ', ['P accent aigu majuscule', 'P accent aigu majuscule', 'P accent aigu majuscule']);
  this.executeCharTest('Ṗ', ['P point en chef majuscule', 'P point en chef majuscule', 'P point en chef majuscule']);
  this.executeCharTest('Ṙ', ['R point en chef majuscule', 'R point en chef majuscule', 'R point en chef majuscule']);
  this.executeCharTest('Ṛ', ['R point souscrit majuscule', 'R point souscrit majuscule', 'R point souscrit majuscule']);
  this.executeCharTest('Ṟ', ['R ligne souscrite majuscule', 'R ligne souscrite majuscule', 'R ligne souscrite majuscule']);
  this.executeCharTest('Ṡ', ['S point en chef majuscule', 'S point en chef majuscule', 'S point en chef majuscule']);
  this.executeCharTest('Ṣ', ['S point souscrit majuscule', 'S point souscrit majuscule', 'S point souscrit majuscule']);
  this.executeCharTest('Ṫ', ['T point en chef majuscule', 'T point en chef majuscule', 'T point en chef majuscule']);
  this.executeCharTest('Ṭ', ['T point souscrit majuscule', 'T point souscrit majuscule', 'T point souscrit majuscule']);
  this.executeCharTest('Ṯ', ['T ligne souscrite majuscule', 'T ligne souscrite majuscule', 'T ligne souscrite majuscule']);
  this.executeCharTest('Ṱ', ['T accent circonflexe souscrit majuscule', 'T accent circonflexe souscrit majuscule', 'T accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ṳ', ['U tréma souscrit majuscule', 'U tréma souscrit majuscule', 'U tréma souscrit majuscule']);
  this.executeCharTest('Ṵ', ['U tilde souscrit majuscule', 'U tilde souscrit majuscule', 'U tilde souscrit majuscule']);
  this.executeCharTest('Ṷ', ['U accent circonflexe souscrit majuscule', 'U accent circonflexe souscrit majuscule', 'U accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ṽ', ['V tilde majuscule', 'V tilde majuscule', 'V tilde majuscule']);
  this.executeCharTest('Ṿ', ['V point souscrit majuscule', 'V point souscrit majuscule', 'V point souscrit majuscule']);
  this.executeCharTest('Ẁ', ['W accent grave majuscule', 'W accent grave majuscule', 'W accent grave majuscule']);
  this.executeCharTest('Ẃ', ['W accent aigu majuscule', 'W accent aigu majuscule', 'W accent aigu majuscule']);
  this.executeCharTest('Ẅ', ['W tréma majuscule', 'W tréma majuscule', 'W tréma majuscule']);
  this.executeCharTest('Ẇ', ['W point en chef majuscule', 'W point en chef majuscule', 'W point en chef majuscule']);
  this.executeCharTest('Ẉ', ['W point souscrit majuscule', 'W point souscrit majuscule', 'W point souscrit majuscule']);
  this.executeCharTest('Ẋ', ['X point en chef majuscule', 'X point en chef majuscule', 'X point en chef majuscule']);
  this.executeCharTest('Ẍ', ['X tréma majuscule', 'X tréma majuscule', 'X tréma majuscule']);
  this.executeCharTest('Ẏ', ['Y point en chef majuscule', 'Y point en chef majuscule', 'Y point en chef majuscule']);
  this.executeCharTest('Ẑ', ['Z accent circonflexe majuscule', 'Z accent circonflexe majuscule', 'Z accent circonflexe majuscule']);
  this.executeCharTest('Ẓ', ['Z point souscrit majuscule', 'Z point souscrit majuscule', 'Z point souscrit majuscule']);
  this.executeCharTest('Ẕ', ['Z ligne souscrite majuscule', 'Z ligne souscrite majuscule', 'Z ligne souscrite majuscule']);
  this.executeCharTest('Ạ', ['A point souscrit majuscule', 'A point souscrit majuscule', 'A point souscrit majuscule']);
  this.executeCharTest('Ả', ['A crochet en chef majuscule', 'A crochet en chef majuscule', 'A crochet en chef majuscule']);
  this.executeCharTest('Ẹ', ['E point souscrit majuscule', 'E point souscrit majuscule', 'E point souscrit majuscule']);
  this.executeCharTest('Ẻ', ['E crochet en chef majuscule', 'E crochet en chef majuscule', 'E crochet en chef majuscule']);
  this.executeCharTest('Ẽ', ['E tilde majuscule', 'E tilde majuscule', 'E tilde majuscule']);
  this.executeCharTest('Ỉ', ['I crochet en chef majuscule', 'I crochet en chef majuscule', 'I crochet en chef majuscule']);
  this.executeCharTest('Ị', ['I point souscrit majuscule', 'I point souscrit majuscule', 'I point souscrit majuscule']);
  this.executeCharTest('Ọ', ['O point souscrit majuscule', 'O point souscrit majuscule', 'O point souscrit majuscule']);
  this.executeCharTest('Ỏ', ['O crochet en chef majuscule', 'O crochet en chef majuscule', 'O crochet en chef majuscule']);
  this.executeCharTest('Ụ', ['U point souscrit majuscule', 'U point souscrit majuscule', 'U point souscrit majuscule']);
  this.executeCharTest('Ủ', ['U crochet en chef majuscule', 'U crochet en chef majuscule', 'U crochet en chef majuscule']);
  this.executeCharTest('Ỳ', ['Y accent grave majuscule', 'Y accent grave majuscule', 'Y accent grave majuscule']);
  this.executeCharTest('Ỵ', ['Y point souscrit majuscule', 'Y point souscrit majuscule', 'Y point souscrit majuscule']);
  this.executeCharTest('Ỷ', ['Y crochet en chef majuscule', 'Y crochet en chef majuscule', 'Y crochet en chef majuscule']);
  this.executeCharTest('Ỹ', ['Y tilde majuscule', 'Y tilde majuscule', 'Y tilde majuscule']);
  this.executeCharTest('⊾', ['angle droit avec arc', 'angle droit avec arc', 'angle droit avec arc']);
  this.executeCharTest('⍼', ['angle droit avec flèche en zigzag vers le bas', 'angle droit avec flèche en zigzag vers le bas', 'angle droit avec flèche en zigzag vers le bas']);
  this.executeCharTest('⟀', ['angle tridimensionnel', 'angle tridimensionnel', 'angle tridimensionnel']);
  this.executeCharTest('⦛', ['angle mesuré s\'ouvrant vers la gauche', 'angle mesuré s\'ouvrant vers la gauche', 'angle mesuré s\'ouvrant vers la gauche']);
  this.executeCharTest('⦜', ['variante d\'angle avec carré', 'variante d\'angle avec carré', 'variante d\'angle avec carré']);
  this.executeCharTest('⦝', ['angle droit mesuré pointé', 'angle droit mesuré pointé', 'angle droit mesuré pointé']);
  this.executeCharTest('⦞', ['angle avec s inscrit', 'angle avec s inscrit', 'angle avec s inscrit']);
  this.executeCharTest('⦟', ['angle aigu', 'angle aigu', 'angle aigu']);
  this.executeCharTest('⦠', ['angle sphérique s\'ouvrant vers la gauche', 'angle sphérique s\'ouvrant vers la gauche', 'angle sphérique s\'ouvrant vers la gauche']);
  this.executeCharTest('⦡', ['angle sphérique s\'ouvrant vers le haut', 'angle sphérique s\'ouvrant vers le haut', 'angle sphérique s\'ouvrant vers le haut']);
  this.executeCharTest('⦢', ['angle culbuté', 'angle culbuté', 'angle culbuté']);
  this.executeCharTest('⦣', ['angle réfléchi', 'angle réfléchi', 'angle réfléchi']);
  this.executeCharTest('⦤', ['angle à barre souscrite', 'angle à barre souscrite', 'angle à barre souscrite']);
  this.executeCharTest('⦥', ['angle à barre souscrite réfléchie', 'angle à barre souscrite réfléchie', 'angle à barre souscrite réfléchie']);
  this.executeCharTest('⦦', ['angle oblique s\'ouvrant vers le haut', 'angle oblique s\'ouvrant vers le haut', 'angle oblique s\'ouvrant vers le haut']);
  this.executeCharTest('⦧', ['angle oblique s\'ouvrant vers le bas', 'angle oblique s\'ouvrant vers le bas', 'angle oblique s\'ouvrant vers le bas']);
  this.executeCharTest('⦨', ['angle calculé à bras vers l\'est et bras fléché vers le nord est', 'angle calculé à bras vers l\'est et bras fléché vers le nord est', 'angle calculé à bras vers l\'est et bras fléché vers le nord est']);
  this.executeCharTest('⦩', ['angle calculé à bras vers l\'ouest et bras fléché vers le nord ouest', 'angle calculé à bras vers l\'ouest et bras fléché vers le nord ouest', 'angle calculé à bras vers l\'ouest et bras fléché vers le nord ouest']);
  this.executeCharTest('⦪', ['angle calculé à bras vers l\'est et bras fléché vers le sud est', 'angle calculé à bras vers l\'est et bras fléché vers le sud est', 'angle calculé à bras vers l\'est et bras fléché vers le sud est']);
  this.executeCharTest('⦫', ['angle calculé à bras vers l\'ouest et bras fléché vers le sud ouest', 'angle calculé à bras vers l\'ouest et bras fléché vers le sud ouest', 'angle calculé à bras vers l\'ouest et bras fléché vers le sud ouest']);
  this.executeCharTest('⦬', ['angle calculé à bras vers le nord et bras fléché vers le nord est', 'angle calculé à bras vers le nord et bras fléché vers le nord est', 'angle calculé à bras vers le nord et bras fléché vers le nord est']);
  this.executeCharTest('⦭', ['angle calculé à bras vers le nord et bras fléché vers le nord ouest', 'angle calculé à bras vers le nord et bras fléché vers le nord ouest', 'angle calculé à bras vers le nord et bras fléché vers le nord ouest']);
  this.executeCharTest('⦮', ['angle calculé à bras vers le sud et bras fléché vers le sud est', 'angle calculé à bras vers le sud et bras fléché vers le sud est', 'angle calculé à bras vers le sud et bras fléché vers le sud est']);
  this.executeCharTest('⦯', ['angle calculé à bras vers le sud et bras fléché vers le sud ouest', 'angle calculé à bras vers le sud et bras fléché vers le sud ouest', 'angle calculé à bras vers le sud et bras fléché vers le sud ouest']);
  this.executeCharTest('←', ['flèche gauche', 'flèche gauche', 'flèche gauche']);
  this.executeCharTest('↑', ['flèche vers le haut', 'flèche vers le haut', 'flèche vers le haut']);
  this.executeCharTest('→', ['flèche droite', 'flèche droite', 'flèche droite']);
  this.executeCharTest('↓', ['flèche vers le bas', 'flèche vers le bas', 'flèche vers le bas']);
  this.executeCharTest('↔', ['flèche bilatérale', 'flèche bilatérale', 'flèche bilatérale']);
  this.executeCharTest('↕', ['flèche haut et bas', 'flèche haut et bas', 'flèche haut et bas']);
  this.executeCharTest('↖', ['flèche nord ouest', 'flèche nord ouest', 'flèche nord ouest']);
  this.executeCharTest('↗', ['flèche nord est', 'flèche nord est', 'flèche nord est']);
  this.executeCharTest('↘', ['flèche sud est', 'flèche sud est', 'flèche sud est']);
  this.executeCharTest('↙', ['flèche sud ouest', 'flèche sud ouest', 'flèche sud ouest']);
  this.executeCharTest('↚', ['flèche barrée gauche', 'flèche barrée gauche', 'flèche barrée gauche']);
  this.executeCharTest('↛', ['flèche barrée droite', 'flèche barrée droite', 'flèche barrée droite']);
  this.executeCharTest('↜', ['flèche ondulée gauche', 'flèche ondulée gauche', 'flèche ondulée gauche']);
  this.executeCharTest('↝', ['flèche ondulée droite', 'flèche ondulée droite', 'flèche ondulée droite']);
  this.executeCharTest('↞', ['flèche à deux pointes gauche', 'flèche à deux pointes gauche', 'flèche à deux pointes gauche']);
  this.executeCharTest('↟', ['flèche à deux pointes vers le haut', 'flèche à deux pointes vers le haut', 'flèche à deux pointes vers le haut']);
  this.executeCharTest('↠', ['flèche à deux pointes droite', 'flèche à deux pointes droite', 'flèche à deux pointes droite']);
  this.executeCharTest('↡', ['flèche à deux pointes vers le bas', 'flèche à deux pointes vers le bas', 'flèche à deux pointes vers le bas']);
  this.executeCharTest('↢', ['flèche empennée gauche', 'flèche empennée gauche', 'flèche empennée gauche']);
  this.executeCharTest('↣', ['flèche empennée droite', 'flèche empennée droite', 'flèche empennée droite']);
  this.executeCharTest('↤', ['flèche d\'un taquet gauche', 'flèche d\'un taquet gauche', 'flèche d\'un taquet gauche']);
  this.executeCharTest('↥', ['flèche d\'un taquet vers le haut', 'flèche d\'un taquet vers le haut', 'flèche d\'un taquet vers le haut']);
  this.executeCharTest('↦', ['flèche d\'un taquet droite', 'flèche d\'un taquet droite', 'flèche d\'un taquet droite']);
  this.executeCharTest('↧', ['flèche d\'un taquet vers le bas', 'flèche d\'un taquet vers le bas', 'flèche d\'un taquet vers le bas']);
  this.executeCharTest('↨', ['flèche haut bas sur base', 'flèche haut bas sur base', 'flèche haut bas sur base']);
  this.executeCharTest('↩', ['flèche avec crochet gauche', 'flèche avec crochet gauche', 'flèche avec crochet gauche']);
  this.executeCharTest('↪', ['flèche avec crochet droite', 'flèche avec crochet droite', 'flèche avec crochet droite']);
  this.executeCharTest('↫', ['flèche avec boucle gauche', 'flèche avec boucle gauche', 'flèche avec boucle gauche']);
  this.executeCharTest('↬', ['flèche avec boucle droite', 'flèche avec boucle droite', 'flèche avec boucle droite']);
  this.executeCharTest('↭', ['flèche ondulée bilatérale', 'flèche ondulée bilatérale', 'flèche ondulée bilatérale']);
  this.executeCharTest('↮', ['flèche barrée bilatérale', 'flèche barrée bilatérale', 'flèche barrée bilatérale']);
  this.executeCharTest('↯', ['flèche vers le bas en zigzag', 'flèche vers le bas en zigzag', 'flèche vers le bas en zigzag']);
  this.executeCharTest('↰', ['flèche vers le haut avec pointe gauche', 'flèche vers le haut avec pointe gauche', 'flèche vers le haut avec pointe gauche']);
  this.executeCharTest('↱', ['flèche vers le haut avec pointe droite', 'flèche vers le haut avec pointe droite', 'flèche vers le haut avec pointe droite']);
  this.executeCharTest('↲', ['flèche vers le bas avec pointe gauche', 'flèche vers le bas avec pointe gauche', 'flèche vers le bas avec pointe gauche']);
  this.executeCharTest('↳', ['flèche vers le bas avec pointe droite', 'flèche vers le bas avec pointe droite', 'flèche vers le bas avec pointe droite']);
  this.executeCharTest('↴', ['flèche vers le bas avec coin droit', 'flèche vers le bas avec coin droit', 'flèche vers le bas avec coin droit']);
  this.executeCharTest('↵', ['flèche vers le bas avec coin gauche', 'flèche vers le bas avec coin gauche', 'flèche vers le bas avec coin gauche']);
  this.executeCharTest('↶', ['flèche semi circulaire en sens positif', 'flèche semi circulaire en sens positif', 'flèche semi circulaire en sens positif']);
  this.executeCharTest('↷', ['flèche semi circulaire en sens négatif', 'flèche semi circulaire en sens négatif', 'flèche semi circulaire en sens négatif']);
  this.executeCharTest('↸', ['flèche nord ouest vers une barre horizontale longue', 'flèche nord ouest vers une barre horizontale longue', 'flèche nord ouest vers une barre horizontale longue']);
  this.executeCharTest('↹', ['flèche gauche vers un taquet sur flèche droite vers un taquet', 'flèche gauche vers un taquet sur flèche droite vers un taquet', 'flèche gauche vers un taquet sur flèche droite vers un taquet']);
  this.executeCharTest('↺', ['flèche en sens positif à cercle ouvert', 'flèche en sens positif à cercle ouvert', 'flèche en sens positif à cercle ouvert']);
  this.executeCharTest('↻', ['flèche en sens négatif à cercle ouvert', 'flèche en sens négatif à cercle ouvert', 'flèche en sens négatif à cercle ouvert']);
  this.executeCharTest('⇄', ['flèche vers le haut par dessus flèche gauche', 'flèche vers le haut par dessus flèche gauche', 'flèche vers le haut par dessus flèche gauche']);
  this.executeCharTest('⇅', ['flèche vers le haut à gauche d\'une flèche vers le bas', 'flèche vers le haut à gauche d\'une flèche vers le bas', 'flèche vers le haut à gauche d\'une flèche vers le bas']);
  this.executeCharTest('⇆', ['flèche gauche par dessus flèche droite', 'flèche gauche par dessus flèche droite', 'flèche gauche par dessus flèche droite']);
  this.executeCharTest('⇇', ['paire de flèches gauche', 'paire de flèches gauche', 'paire de flèches gauche']);
  this.executeCharTest('⇈', ['paire de flèches vers le haut', 'paire de flèches vers le haut', 'paire de flèches vers le haut']);
  this.executeCharTest('⇉', ['paire de flèches droite', 'paire de flèches droite', 'paire de flèches droite']);
  this.executeCharTest('⇊', ['paire de flèches vers le bas', 'paire de flèches vers le bas', 'paire de flèches vers le bas']);
  this.executeCharTest('⇍', ['double flèche barrée gauche', 'double flèche barrée gauche', 'double flèche barrée gauche']);
  this.executeCharTest('⇎', ['double flèche barrée bilatérale', 'double flèche barrée bilatérale', 'double flèche barrée bilatérale']);
  this.executeCharTest('⇏', ['double flèche barrée droite', 'double flèche barrée droite', 'double flèche barrée droite']);
  this.executeCharTest('⇐', ['double flèche gauche', 'double flèche gauche', 'double flèche gauche']);
  this.executeCharTest('⇑', ['double flèche vers le haut', 'double flèche vers le haut', 'double flèche vers le haut']);
  this.executeCharTest('⇒', ['double flèche droite', 'double flèche droite', 'double flèche droite']);
  this.executeCharTest('⇓', ['double flèche vers le bas', 'double flèche vers le bas', 'double flèche vers le bas']);
  this.executeCharTest('⇔', ['double flèche bilatérale', 'double flèche bilatérale', 'double flèche bilatérale']);
  this.executeCharTest('⇕', ['double flèche haut bas', 'double flèche haut bas', 'double flèche haut bas']);
  this.executeCharTest('⇖', ['double flèche nord ouest', 'double flèche nord ouest', 'double flèche nord ouest']);
  this.executeCharTest('⇗', ['double flèche nord est', 'double flèche nord est', 'double flèche nord est']);
  this.executeCharTest('⇘', ['double flèche sud est', 'double flèche sud est', 'double flèche sud est']);
  this.executeCharTest('⇙', ['double flèche sud ouest', 'double flèche sud ouest', 'double flèche sud ouest']);
  this.executeCharTest('⇚', ['triple flèche gauche', 'triple flèche gauche', 'triple flèche gauche']);
  this.executeCharTest('⇛', ['triple flèche droite', 'triple flèche droite', 'triple flèche droite']);
  this.executeCharTest('⇜', ['flèche en tire bouchon gauche', 'flèche en tire bouchon gauche', 'flèche en tire bouchon gauche']);
  this.executeCharTest('⇝', ['flèche en tire bouchon droite', 'flèche en tire bouchon droite', 'flèche en tire bouchon droite']);
  this.executeCharTest('⇞', ['flèche vers le haut avec double barre', 'flèche vers le haut avec double barre', 'flèche vers le haut avec double barre']);
  this.executeCharTest('⇟', ['flèche vers le bas avec double barre', 'flèche vers le bas avec double barre', 'flèche vers le bas avec double barre']);
  this.executeCharTest('⇠', ['flèche pointillée gauche', 'flèche pointillée gauche', 'flèche pointillée gauche']);
  this.executeCharTest('⇡', ['flèche pointillée vers le haut', 'flèche pointillée vers le haut', 'flèche pointillée vers le haut']);
  this.executeCharTest('⇢', ['flèche pointillée droite', 'flèche pointillée droite', 'flèche pointillée droite']);
  this.executeCharTest('⇣', ['flèche pointillée vers le bas', 'flèche pointillée vers le bas', 'flèche pointillée vers le bas']);
  this.executeCharTest('⇤', ['flèche gauche vers un taquet', 'flèche gauche vers un taquet', 'flèche gauche vers un taquet']);
  this.executeCharTest('⇥', ['flèche droite vers un taquet', 'flèche droite vers un taquet', 'flèche droite vers un taquet']);
  this.executeCharTest('⇦', ['flèche blanche gauche', 'flèche blanche gauche', 'flèche blanche gauche']);
  this.executeCharTest('⇧', ['flèche blanche vers le haut', 'flèche blanche vers le haut', 'flèche blanche vers le haut']);
  this.executeCharTest('⇨', ['flèche blanche droite', 'flèche blanche droite', 'flèche blanche droite']);
  this.executeCharTest('⇩', ['flèche blanche vers le bas', 'flèche blanche vers le bas', 'flèche blanche vers le bas']);
  this.executeCharTest('⇪', ['flèche blanche vers le haut à partir d\'un taquet', 'flèche blanche vers le haut à partir d\'un taquet', 'flèche blanche vers le haut à partir d\'un taquet']);
  this.executeCharTest('⇫', ['flèche blanche vers le haut sur socle', 'flèche blanche vers le haut sur socle', 'flèche blanche vers le haut sur socle']);
  this.executeCharTest('⇬', ['flèche blanche vers le haut sur socle et trait horizontal', 'flèche blanche vers le haut sur socle et trait horizontal', 'flèche blanche vers le haut sur socle et trait horizontal']);
  this.executeCharTest('⇭', ['flèche blanche vers le haut sur socle et barre verticale', 'flèche blanche vers le haut sur socle et barre verticale', 'flèche blanche vers le haut sur socle et barre verticale']);
  this.executeCharTest('⇮', ['double flèche blanche vers le haut', 'double flèche blanche vers le haut', 'double flèche blanche vers le haut']);
  this.executeCharTest('⇯', ['double flèche blanche vers le haut sur socle', 'double flèche blanche vers le haut sur socle', 'double flèche blanche vers le haut sur socle']);
  this.executeCharTest('⇰', ['flèche blanche vers la droite appuyée sur mur', 'flèche blanche vers la droite appuyée sur mur', 'flèche blanche vers la droite appuyée sur mur']);
  this.executeCharTest('⇱', ['flèche nord ouest en encoignure', 'flèche nord ouest en encoignure', 'flèche nord ouest en encoignure']);
  this.executeCharTest('⇲', ['flèche sud est en encoignure', 'flèche sud est en encoignure', 'flèche sud est en encoignure']);
  this.executeCharTest('⇳', ['flèche blanche vers le haut et le bas', 'flèche blanche vers le haut et le bas', 'flèche blanche vers le haut et le bas']);
  this.executeCharTest('⇴', ['flèche vers la droite à petit cercle', 'flèche vers la droite à petit cercle', 'flèche vers la droite à petit cercle']);
  this.executeCharTest('⇵', ['flèche descendante à gauche d\'une flèche montante', 'flèche descendante à gauche d\'une flèche montante', 'flèche descendante à gauche d\'une flèche montante']);
  this.executeCharTest('⇶', ['trois flèches vers la droite', 'trois flèches vers la droite', 'trois flèches vers la droite']);
  this.executeCharTest('⇷', ['flèche vers la gauche barrée verticalement', 'flèche vers la gauche barrée verticalement', 'flèche vers la gauche barrée verticalement']);
  this.executeCharTest('⇸', ['flèche vers la droite barrée verticalement', 'flèche vers la droite barrée verticalement', 'flèche vers la droite barrée verticalement']);
  this.executeCharTest('⇹', ['flèche vers la droite et la gauche barrée verticalement', 'flèche vers la droite et la gauche barrée verticalement', 'flèche vers la droite et la gauche barrée verticalement']);
  this.executeCharTest('⇺', ['flèche vers la gauche barrée deux fois verticalement', 'flèche vers la gauche barrée deux fois verticalement', 'flèche vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⇻', ['flèche vers la droite barrée deux fois verticalement', 'flèche vers la droite barrée deux fois verticalement', 'flèche vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⇼', ['flèche bilatérale barrée deux fois verticalement', 'flèche bilatérale barrée deux fois verticalement', 'flèche bilatérale barrée deux fois verticalement']);
  this.executeCharTest('⇽', ['flèche à tête creuse gauche', 'flèche à tête creuse gauche', 'flèche à tête creuse gauche']);
  this.executeCharTest('⇾', ['flèche à tête creuse droite', 'flèche à tête creuse droite', 'flèche à tête creuse droite']);
  this.executeCharTest('⇿', ['flèche à tête creuse bilatérale', 'flèche à tête creuse bilatérale', 'flèche à tête creuse bilatérale']);
  this.executeCharTest('⌁', ['flèche électrique', 'flèche électrique', 'flèche électrique']);
  this.executeCharTest('⌃', ['pointe de flèche vers le haut', 'pointe de flèche vers le haut', 'pointe de flèche vers le haut']);
  this.executeCharTest('⌄', ['pointe de flèche vers le bas', 'pointe de flèche vers le bas', 'pointe de flèche vers le bas']);
  this.executeCharTest('⌤', ['pointe de flèche vers le haut entre deux traits horizontaux', 'pointe de flèche vers le haut entre deux traits horizontaux', 'pointe de flèche vers le haut entre deux traits horizontaux']);
  this.executeCharTest('⎋', ['cercle brisé à flèche nord ouest (échappement)', 'cercle brisé à flèche nord ouest (échappement)', 'cercle brisé à flèche nord ouest (échappement)']);
  this.executeCharTest('➔', ['flèche grasse vers la droite à pointe large', 'flèche grasse vers la droite à pointe large', 'flèche grasse vers la droite à pointe large']);
  this.executeCharTest('➘', ['flèche grasse sud est', 'flèche grasse sud est', 'flèche grasse sud est']);
  this.executeCharTest('➙', ['flèche grasse vers la droite grasse', 'flèche grasse vers la droite grasse', 'flèche grasse vers la droite grasse']);
  this.executeCharTest('➚', ['flèche grasse nord est', 'flèche grasse nord est', 'flèche grasse nord est']);
  this.executeCharTest('➛', ['flèche de traçage vers la droite', 'flèche de traçage vers la droite', 'flèche de traçage vers la droite']);
  this.executeCharTest('➜', ['flèche grasse à pointe arrondie vers la droite', 'flèche grasse à pointe arrondie vers la droite', 'flèche grasse à pointe arrondie vers la droite']);
  this.executeCharTest('➝', ['flèche à pointe en triangle vers la droite', 'flèche à pointe en triangle vers la droite', 'flèche à pointe en triangle vers la droite']);
  this.executeCharTest('➞', ['flèche grasse à pointe en triangle vers la droite', 'flèche grasse à pointe en triangle vers la droite', 'flèche grasse à pointe en triangle vers la droite']);
  this.executeCharTest('➟', ['flèche avec pointillés à pointe en triangle vers la droite', 'flèche avec pointillés à pointe en triangle vers la droite', 'flèche avec pointillés à pointe en triangle vers la droite']);
  this.executeCharTest('➠', ['flèche grasse avec pointillés à pointe en triangle vers la droite', 'flèche grasse avec pointillés à pointe en triangle vers la droite', 'flèche grasse avec pointillés à pointe en triangle vers la droite']);
  this.executeCharTest('➡', ['flèche noire vers la droite', 'flèche noire vers la droite', 'flèche noire vers la droite']);
  this.executeCharTest('➢', ['pointe de flèche vers la droite en trompe l\'œil éclairée par le haut', 'pointe de flèche vers la droite en trompe l\'œil éclairée par le haut', 'pointe de flèche vers la droite en trompe l\'œil éclairée par le haut']);
  this.executeCharTest('➣', ['pointe de flèche vers la droite en trompe l\'œil éclairée par le bas', 'pointe de flèche vers la droite en trompe l\'œil éclairée par le bas', 'pointe de flèche vers la droite en trompe l\'œil éclairée par le bas']);
  this.executeCharTest('➤', ['pointe de flèche noire vers la droite', 'pointe de flèche noire vers la droite', 'pointe de flèche noire vers la droite']);
  this.executeCharTest('➥', ['flèche noire grasse courbée vers le bas et vers la droite', 'flèche noire grasse courbée vers le bas et vers la droite', 'flèche noire grasse courbée vers le bas et vers la droite']);
  this.executeCharTest('➦', ['flèche noire courbée vers le haut et vers la droite', 'flèche noire courbée vers le haut et vers la droite', 'flèche noire courbée vers le haut et vers la droite']);
  this.executeCharTest('➧', ['flèche noire trapue vers la droite', 'flèche noire trapue vers la droite', 'flèche noire trapue vers la droite']);
  this.executeCharTest('➨', ['flèche noire grasse à pointe concave vers la droite', 'flèche noire grasse à pointe concave vers la droite', 'flèche noire grasse à pointe concave vers la droite']);
  this.executeCharTest('➩', ['flèche blanche vers la droite ombrée à l\'avant', 'flèche blanche vers la droite ombrée à l\'avant', 'flèche blanche vers la droite ombrée à l\'avant']);
  this.executeCharTest('➪', ['flèche blanche vers la droite ombrée à l\'arrière', 'flèche blanche vers la droite ombrée à l\'arrière', 'flèche blanche vers la droite ombrée à l\'arrière']);
  this.executeCharTest('➫', ['flèche blanche vers la droite penchée vers l\'arrière et ombrée', 'flèche blanche vers la droite penchée vers l\'arrière et ombrée', 'flèche blanche vers la droite penchée vers l\'arrière et ombrée']);
  this.executeCharTest('➬', ['flèche blanche vers la droite penchée vers l\'avant et ombrée', 'flèche blanche vers la droite penchée vers l\'avant et ombrée', 'flèche blanche vers la droite penchée vers l\'avant et ombrée']);
  this.executeCharTest('➭', ['flèche blanche grasse vers la droite à ombre inférieure droite', 'flèche blanche grasse vers la droite à ombre inférieure droite', 'flèche blanche grasse vers la droite à ombre inférieure droite']);
  this.executeCharTest('➮', ['flèche blanche grasse vers la droite à ombre supérieure droite', 'flèche blanche grasse vers la droite à ombre supérieure droite', 'flèche blanche grasse vers la droite à ombre supérieure droite']);
  this.executeCharTest('➯', ['flèche encochée blanche vers la droite ombrée à l\'avant et par dessous', 'flèche encochée blanche vers la droite ombrée à l\'avant et par dessous', 'flèche encochée blanche vers la droite ombrée à l\'avant et par dessous']);
  this.executeCharTest('➱', ['flèche encochée blanche vers la droite ombrée à l\'avant et par dessus', 'flèche encochée blanche vers la droite ombrée à l\'avant et par dessus', 'flèche encochée blanche vers la droite ombrée à l\'avant et par dessus']);
  this.executeCharTest('➲', ['flèche blanche grasse vers la droite à contour circulaire', 'flèche blanche grasse vers la droite à contour circulaire', 'flèche blanche grasse vers la droite à contour circulaire']);
  this.executeCharTest('➳', ['flèche empennée blanche vers la droite', 'flèche empennée blanche vers la droite', 'flèche empennée blanche vers la droite']);
  this.executeCharTest('➴', ['flèche empennée noir sud est', 'flèche empennée noir sud est', 'flèche empennée noir sud est']);
  this.executeCharTest('➵', ['flèche empennée noir vers la droite', 'flèche empennée noir vers la droite', 'flèche empennée noir vers la droite']);
  this.executeCharTest('➶', ['flèche empennée noir nord est', 'flèche empennée noir nord est', 'flèche empennée noir nord est']);
  this.executeCharTest('➷', ['flèche empennée gras noire sud est', 'flèche empennée gras noire sud est', 'flèche empennée gras noire sud est']);
  this.executeCharTest('➸', ['flèche empennée gras noire vers la droite', 'flèche empennée gras noire vers la droite', 'flèche empennée gras noire vers la droite']);
  this.executeCharTest('➹', ['flèche empennée gras noire nord est', 'flèche empennée gras noire nord est', 'flèche empennée gras noire nord est']);
  this.executeCharTest('➺', ['flèche vers la droite à pointe larmée', 'flèche vers la droite à pointe larmée', 'flèche vers la droite à pointe larmée']);
  this.executeCharTest('➻', ['flèche vers la droite à hampe larmée', 'flèche vers la droite à hampe larmée', 'flèche vers la droite à hampe larmée']);
  this.executeCharTest('➼', ['flèche vers la droite à queue en forme de coin', 'flèche vers la droite à queue en forme de coin', 'flèche vers la droite à queue en forme de coin']);
  this.executeCharTest('➽', ['flèche grasse vers la droite à queue en forme de coin', 'flèche grasse vers la droite à queue en forme de coin', 'flèche grasse vers la droite à queue en forme de coin']);
  this.executeCharTest('➾', ['flèche vers la droite à contour ouvert', 'flèche vers la droite à contour ouvert', 'flèche vers la droite à contour ouvert']);
  this.executeCharTest('⟰', ['quadruple flèche vers le haut', 'quadruple flèche vers le haut', 'quadruple flèche vers le haut']);
  this.executeCharTest('⟱', ['quadruple flèche vers le bas', 'quadruple flèche vers le bas', 'quadruple flèche vers le bas']);
  this.executeCharTest('⟲', ['flèche sens antihoraire entrouverte', 'flèche sens antihoraire entrouverte', 'flèche sens antihoraire entrouverte']);
  this.executeCharTest('⟳', ['flèche sens horaire entrouverte', 'flèche sens horaire entrouverte', 'flèche sens horaire entrouverte']);
  this.executeCharTest('⟴', ['flèche vers la droite à signe plus cerclé', 'flèche vers la droite à signe plus cerclé', 'flèche vers la droite à signe plus cerclé']);
  this.executeCharTest('⟵', ['longue flèche gauche', 'longue flèche gauche', 'longue flèche gauche']);
  this.executeCharTest('⟶', ['longue flèche droite', 'longue flèche droite', 'longue flèche droite']);
  this.executeCharTest('⟷', ['longue flèche bilatérale', 'longue flèche bilatérale', 'longue flèche bilatérale']);
  this.executeCharTest('⟸', ['longue double flèche gauche', 'longue double flèche gauche', 'longue double flèche gauche']);
  this.executeCharTest('⟹', ['longue double flèche droite', 'longue double flèche droite', 'longue double flèche droite']);
  this.executeCharTest('⟺', ['longue double flèche bilatérale', 'longue double flèche bilatérale', 'longue double flèche bilatérale']);
  this.executeCharTest('⟻', ['longue flèche d\'un taquet vers la gauche', 'longue flèche d\'un taquet vers la gauche', 'longue flèche d\'un taquet vers la gauche']);
  this.executeCharTest('⟼', ['longue flèche d\'un taquet droite', 'longue flèche d\'un taquet droite', 'longue flèche d\'un taquet droite']);
  this.executeCharTest('⟽', ['longue double flèche d\'un taquet vers la gauche', 'longue double flèche d\'un taquet vers la gauche', 'longue double flèche d\'un taquet vers la gauche']);
  this.executeCharTest('⟾', ['longue double flèche d\'un taquet vers la droite', 'longue double flèche d\'un taquet vers la droite', 'longue double flèche d\'un taquet vers la droite']);
  this.executeCharTest('⟿', ['longue flèche en tire bouchon droite', 'longue flèche en tire bouchon droite', 'longue flèche en tire bouchon droite']);
  this.executeCharTest('⤀', ['flèche à deux pointes vers la droite barrée verticalement', 'flèche à deux pointes vers la droite barrée verticalement', 'flèche à deux pointes vers la droite barrée verticalement']);
  this.executeCharTest('⤁', ['flèche à deux pointes vers la droite barrée deux fois verticalement', 'flèche à deux pointes vers la droite barrée deux fois verticalement', 'flèche à deux pointes vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⤂', ['double flèche vers la gauche barrée verticalement', 'double flèche vers la gauche barrée verticalement', 'double flèche vers la gauche barrée verticalement']);
  this.executeCharTest('⤃', ['double flèche vers la droite barrée verticalement', 'double flèche vers la droite barrée verticalement', 'double flèche vers la droite barrée verticalement']);
  this.executeCharTest('⤄', ['flèche bilatérale double barrée verticalement', 'flèche bilatérale double barrée verticalement', 'flèche bilatérale double barrée verticalement']);
  this.executeCharTest('⤅', ['flèche à deux têtes d\'un taquet droite', 'flèche à deux têtes d\'un taquet droite', 'flèche à deux têtes d\'un taquet droite']);
  this.executeCharTest('⤆', ['double flèche d\'un taquet vers la gauche', 'double flèche d\'un taquet vers la gauche', 'double flèche d\'un taquet vers la gauche']);
  this.executeCharTest('⤇', ['double flèche d\'un taquet vers la droite', 'double flèche d\'un taquet vers la droite', 'double flèche d\'un taquet vers la droite']);
  this.executeCharTest('⤈', ['flèche vers le bas barrée horizontalement', 'flèche vers le bas barrée horizontalement', 'flèche vers le bas barrée horizontalement']);
  this.executeCharTest('⤉', ['flèche vers le haut barrée horizontalement', 'flèche vers le haut barrée horizontalement', 'flèche vers le haut barrée horizontalement']);
  this.executeCharTest('⤊', ['triple flèche vers le haut', 'triple flèche vers le haut', 'triple flèche vers le haut']);
  this.executeCharTest('⤋', ['triple flèche vers le bas', 'triple flèche vers le bas', 'triple flèche vers le bas']);
  this.executeCharTest('⤌', ['flèche à deux traits gauche', 'flèche à deux traits gauche', 'flèche à deux traits gauche']);
  this.executeCharTest('⤍', ['flèche à deux traits droite', 'flèche à deux traits droite', 'flèche à deux traits droite']);
  this.executeCharTest('⤎', ['flèche à trois traits gauche', 'flèche à trois traits gauche', 'flèche à trois traits gauche']);
  this.executeCharTest('⤏', ['flèche à trois traits droite', 'flèche à trois traits droite', 'flèche à trois traits droite']);
  this.executeCharTest('⤐', ['flèche à trois traits et à deux têtes droite', 'flèche à trois traits et à deux têtes droite', 'flèche à trois traits et à deux têtes droite']);
  this.executeCharTest('⤑', ['flèche à fût pointillé droite', 'flèche à fût pointillé droite', 'flèche à fût pointillé droite']);
  this.executeCharTest('⤒', ['flèche jusqu\'à taquet vers le haut', 'flèche jusqu\'à taquet vers le haut', 'flèche jusqu\'à taquet vers le haut']);
  this.executeCharTest('⤓', ['flèche jusqu\'à taquet vers le bas', 'flèche jusqu\'à taquet vers le bas', 'flèche jusqu\'à taquet vers le bas']);
  this.executeCharTest('⤔', ['flèche empennée vers la droite barrée verticalement', 'flèche empennée vers la droite barrée verticalement', 'flèche empennée vers la droite barrée verticalement']);
  this.executeCharTest('⤕', ['flèche empennée vers la droite barrée deux fois verticalement', 'flèche empennée vers la droite barrée deux fois verticalement', 'flèche empennée vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⤖', ['flèche empennée à deux têtes droite', 'flèche empennée à deux têtes droite', 'flèche empennée à deux têtes droite']);
  this.executeCharTest('⤗', ['flèche empennée à deux têtes vers la droite barrée verticalement', 'flèche empennée à deux têtes vers la droite barrée verticalement', 'flèche empennée à deux têtes vers la droite barrée verticalement']);
  this.executeCharTest('⤘', ['flèche empennée à deux têtes vers la droite barrée deux fois verticalement', 'flèche empennée à deux têtes vers la droite barrée deux fois verticalement', 'flèche empennée à deux têtes vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⤙', ['empenne gauche', 'empenne gauche', 'empenne gauche']);
  this.executeCharTest('⤚', ['empenne vers la droite', 'empenne vers la droite', 'empenne vers la droite']);
  this.executeCharTest('⤛', ['double empenne gauche', 'double empenne gauche', 'double empenne gauche']);
  this.executeCharTest('⤜', ['double empenne droite', 'double empenne droite', 'double empenne droite']);
  this.executeCharTest('⤝', ['flèche vers un losange noir à gauche', 'flèche vers un losange noir à gauche', 'flèche vers un losange noir à gauche']);
  this.executeCharTest('⤞', ['flèche vers un losange noir à droite', 'flèche vers un losange noir à droite', 'flèche vers un losange noir à droite']);
  this.executeCharTest('⤟', ['flèche d\'un taquet vers un losange noir à gauche', 'flèche d\'un taquet vers un losange noir à gauche', 'flèche d\'un taquet vers un losange noir à gauche']);
  this.executeCharTest('⤠', ['flèche d\'un taquet vers un losange noir à droite', 'flèche d\'un taquet vers un losange noir à droite', 'flèche d\'un taquet vers un losange noir à droite']);
  this.executeCharTest('⤡', ['flèche nord ouest et sud est', 'flèche nord ouest et sud est', 'flèche nord ouest et sud est']);
  this.executeCharTest('⤢', ['flèche nord est et sud ouest', 'flèche nord est et sud ouest', 'flèche nord est et sud ouest']);
  this.executeCharTest('⤣', ['flèche nord ouest à crochet', 'flèche nord ouest à crochet', 'flèche nord ouest à crochet']);
  this.executeCharTest('⤤', ['flèche nord est à crochet', 'flèche nord est à crochet', 'flèche nord est à crochet']);
  this.executeCharTest('⤥', ['flèche sud est à crochet', 'flèche sud est à crochet', 'flèche sud est à crochet']);
  this.executeCharTest('⤦', ['flèche sud ouest à crochet', 'flèche sud ouest à crochet', 'flèche sud ouest à crochet']);
  this.executeCharTest('⤧', ['flèches nord ouest et nord est', 'flèches nord ouest et nord est', 'flèches nord ouest et nord est']);
  this.executeCharTest('⤨', ['flèches nord est et sud est', 'flèches nord est et sud est', 'flèches nord est et sud est']);
  this.executeCharTest('⤩', ['flèches sud est et sud ouest', 'flèches sud est et sud ouest', 'flèches sud est et sud ouest']);
  this.executeCharTest('⤪', ['flèches sud ouest et nord ouest', 'flèches sud ouest et nord ouest', 'flèches sud ouest et nord ouest']);
  this.executeCharTest('⤭', ['flèche sud est sur flèche nord est', 'flèche sud est sur flèche nord est', 'flèche sud est sur flèche nord est']);
  this.executeCharTest('⤮', ['flèche nord est sur flèche sud est', 'flèche nord est sur flèche sud est', 'flèche nord est sur flèche sud est']);
  this.executeCharTest('⤯', ['diagonale descendante sur flèche nord est', 'diagonale descendante sur flèche nord est', 'diagonale descendante sur flèche nord est']);
  this.executeCharTest('⤰', ['diagonale montante sur flèche sud est', 'diagonale montante sur flèche sud est', 'diagonale montante sur flèche sud est']);
  this.executeCharTest('⤱', ['flèche nord est sur flèche nord ouest', 'flèche nord est sur flèche nord ouest', 'flèche nord est sur flèche nord ouest']);
  this.executeCharTest('⤲', ['flèche nord ouest sur flèche nord est', 'flèche nord ouest sur flèche nord est', 'flèche nord ouest sur flèche nord est']);
  this.executeCharTest('⤳', ['flèche bossue droite', 'flèche bossue droite', 'flèche bossue droite']);
  this.executeCharTest('⤴', ['flèche courbe vers la droite puis le haut', 'flèche courbe vers la droite puis le haut', 'flèche courbe vers la droite puis le haut']);
  this.executeCharTest('⤵', ['flèche courbe vers la droite puis le bas', 'flèche courbe vers la droite puis le bas', 'flèche courbe vers la droite puis le bas']);
  this.executeCharTest('⤶', ['flèche courbe vers le bas puis la gauche', 'flèche courbe vers le bas puis la gauche', 'flèche courbe vers le bas puis la gauche']);
  this.executeCharTest('⤷', ['flèche courbe vers le bas puis la droite', 'flèche courbe vers le bas puis la droite', 'flèche courbe vers le bas puis la droite']);
  this.executeCharTest('⤸', ['côté droit d\'arc fléché sens horaire', 'côté droit d\'arc fléché sens horaire', 'côté droit d\'arc fléché sens horaire']);
  this.executeCharTest('⤹', ['côté gauche d\'arc fléché sens antihoraire', 'côté gauche d\'arc fléché sens antihoraire', 'côté gauche d\'arc fléché sens antihoraire']);
  this.executeCharTest('⤺', ['arc supérieur fléché sens antihoraire', 'arc supérieur fléché sens antihoraire', 'arc supérieur fléché sens antihoraire']);
  this.executeCharTest('⤻', ['arc inférieur fléché sens antihoraire', 'arc inférieur fléché sens antihoraire', 'arc inférieur fléché sens antihoraire']);
  this.executeCharTest('⤼', ['arc fléché sens horaire et signe moins souscrit', 'arc fléché sens horaire et signe moins souscrit', 'arc fléché sens horaire et signe moins souscrit']);
  this.executeCharTest('⤽', ['arc fléché sens antihoraire et signe plus souscrit', 'arc fléché sens antihoraire et signe plus souscrit', 'arc fléché sens antihoraire et signe plus souscrit']);
  this.executeCharTest('⤾', ['demi cercle fléché inférieur droit sens horaire', 'demi cercle fléché inférieur droit sens horaire', 'demi cercle fléché inférieur droit sens horaire']);
  this.executeCharTest('⤿', ['demi cercle fléché inférieur gauche sens antihoraire', 'demi cercle fléché inférieur gauche sens antihoraire', 'demi cercle fléché inférieur gauche sens antihoraire']);
  this.executeCharTest('⥀', ['cercle fléché sens antihoraire', 'cercle fléché sens antihoraire', 'cercle fléché sens antihoraire']);
  this.executeCharTest('⥁', ['cercle fléché sens horaire', 'cercle fléché sens horaire', 'cercle fléché sens horaire']);
  this.executeCharTest('⥂', ['flèche vers la droite surmontant fléchette vers la gauche', 'flèche vers la droite surmontant fléchette vers la gauche', 'flèche vers la droite surmontant fléchette vers la gauche']);
  this.executeCharTest('⥃', ['flèche vers la gauche surmontant fléchette vers la droite', 'flèche vers la gauche surmontant fléchette vers la droite', 'flèche vers la gauche surmontant fléchette vers la droite']);
  this.executeCharTest('⥄', ['fléchette vers la droite surmontant flèche vers la gauche', 'fléchette vers la droite surmontant flèche vers la gauche', 'fléchette vers la droite surmontant flèche vers la gauche']);
  this.executeCharTest('⥅', ['flèche droite surmontant signe moins', 'flèche droite surmontant signe moins', 'flèche droite surmontant signe moins']);
  this.executeCharTest('⥆', ['flèche vers la gauche surmontant signe plus', 'flèche vers la gauche surmontant signe plus', 'flèche vers la gauche surmontant signe plus']);
  this.executeCharTest('⥇', ['flèche vers la droite au travers un x', 'flèche vers la droite au travers un x', 'flèche vers la droite au travers un x']);
  this.executeCharTest('⥈', ['petit cercle traversé d\'une flèche bilatérale', 'petit cercle traversé d\'une flèche bilatérale', 'petit cercle traversé d\'une flèche bilatérale']);
  this.executeCharTest('⥉', ['petit cercle surmonté d\'une flèche montante à deux têtes', 'petit cercle surmonté d\'une flèche montante à deux têtes', 'petit cercle surmonté d\'une flèche montante à deux têtes']);
  this.executeCharTest('⥰', ['flèche en épingle à cheveu droite', 'flèche en épingle à cheveu droite', 'flèche en épingle à cheveu droite']);
  this.executeCharTest('⥱', ['flèche droite surmontée d\'un égal', 'flèche droite surmontée d\'un égal', 'flèche droite surmontée d\'un égal']);
  this.executeCharTest('⥲', ['flèche droite surmontée d\'un tilde', 'flèche droite surmontée d\'un tilde', 'flèche droite surmontée d\'un tilde']);
  this.executeCharTest('⥳', ['tilde surmonté d\'une flèche gauche', 'tilde surmonté d\'une flèche gauche', 'tilde surmonté d\'une flèche gauche']);
  this.executeCharTest('⥴', ['tilde surmonté d\'une flèche droite', 'tilde surmonté d\'une flèche droite', 'tilde surmonté d\'une flèche droite']);
  this.executeCharTest('⥵', ['presque égal à surmonté d\'une flèche droite', 'presque égal à surmonté d\'une flèche droite', 'presque égal à surmonté d\'une flèche droite']);
  this.executeCharTest('⥶', ['inférieur à surmonté d\'une flèche gauche', 'inférieur à surmonté d\'une flèche gauche', 'inférieur à surmonté d\'une flèche gauche']);
  this.executeCharTest('⥷', ['flèche vers la gauche à travers un inférieur à', 'flèche vers la gauche à travers un inférieur à', 'flèche vers la gauche à travers un inférieur à']);
  this.executeCharTest('⥸', ['flèche droite surmontée d\'un supérieur à', 'flèche droite surmontée d\'un supérieur à', 'flèche droite surmontée d\'un supérieur à']);
  this.executeCharTest('⥹', ['flèche droite surmontée d\'un sous ensemble de', 'flèche droite surmontée d\'un sous ensemble de', 'flèche droite surmontée d\'un sous ensemble de']);
  this.executeCharTest('⥺', ['flèche vers la gauche au travers d\'un sous ensemble de', 'flèche vers la gauche au travers d\'un sous ensemble de', 'flèche vers la gauche au travers d\'un sous ensemble de']);
  this.executeCharTest('⥻', ['flèche gauche surmontée d\'un sur ensemble de', 'flèche gauche surmontée d\'un sur ensemble de', 'flèche gauche surmontée d\'un sur ensemble de']);
  this.executeCharTest('⦳', ['ensemble vide flèche droite en chef', 'ensemble vide flèche droite en chef', 'ensemble vide flèche droite en chef']);
  this.executeCharTest('⦴', ['ensemble vide flèche gauche en chef', 'ensemble vide flèche gauche en chef', 'ensemble vide flèche gauche en chef']);
  this.executeCharTest('⦽', ['cercle traversé d\'une flèche montante', 'cercle traversé d\'une flèche montante', 'cercle traversé d\'une flèche montante']);
  this.executeCharTest('⧪', ['losange noir à flèche vers le bas', 'losange noir à flèche vers le bas', 'losange noir à flèche vers le bas']);
  this.executeCharTest('⧬', ['cercle blanc à flèche vers le bas', 'cercle blanc à flèche vers le bas', 'cercle blanc à flèche vers le bas']);
  this.executeCharTest('⧭', ['cercle noir à flèche vers le bas', 'cercle noir à flèche vers le bas', 'cercle noir à flèche vers le bas']);
  this.executeCharTest('⨗', ['intégrale à crosse fléchée gauche', 'intégrale à crosse fléchée gauche', 'intégrale à crosse fléchée gauche']);
  this.executeCharTest('⬀', ['flèche blanche nord est', 'flèche blanche nord est', 'flèche blanche nord est']);
  this.executeCharTest('⬁', ['flèche blanche nord ouest', 'flèche blanche nord ouest', 'flèche blanche nord ouest']);
  this.executeCharTest('⬂', ['flèche blanche sud est', 'flèche blanche sud est', 'flèche blanche sud est']);
  this.executeCharTest('⬃', ['flèche blanche sud ouest', 'flèche blanche sud ouest', 'flèche blanche sud ouest']);
  this.executeCharTest('⬄', ['flèche blanche bilatérale', 'flèche blanche bilatérale', 'flèche blanche bilatérale']);
  this.executeCharTest('⬅', ['flèche noire vers la gauche', 'flèche noire vers la gauche', 'flèche noire vers la gauche']);
  this.executeCharTest('⬆', ['flèche noire vers le haut', 'flèche noire vers le haut', 'flèche noire vers le haut']);
  this.executeCharTest('⬇', ['flèche noire vers le bas', 'flèche noire vers le bas', 'flèche noire vers le bas']);
  this.executeCharTest('⬈', ['flèche noire nord est', 'flèche noire nord est', 'flèche noire nord est']);
  this.executeCharTest('⬉', ['flèche noire nord ouest', 'flèche noire nord ouest', 'flèche noire nord ouest']);
  this.executeCharTest('⬊', ['flèche noire sud est', 'flèche noire sud est', 'flèche noire sud est']);
  this.executeCharTest('⬋', ['flèche noire sud ouest', 'flèche noire sud ouest', 'flèche noire sud ouest']);
  this.executeCharTest('⬌', ['flèche noire bilatérale', 'flèche noire bilatérale', 'flèche noire bilatérale']);
  this.executeCharTest('⬍', ['flèche noire haut et bas', 'flèche noire haut et bas', 'flèche noire haut et bas']);
  this.executeCharTest('⬎', ['flèche vers la droite à pointe pliée vers le bas', 'flèche vers la droite à pointe pliée vers le bas', 'flèche vers la droite à pointe pliée vers le bas']);
  this.executeCharTest('⬏', ['flèche vers la droite à pointe pliée vers le haut', 'flèche vers la droite à pointe pliée vers le haut', 'flèche vers la droite à pointe pliée vers le haut']);
  this.executeCharTest('⬐', ['flèche vers la gauche à pointe pliée vers le bas', 'flèche vers la gauche à pointe pliée vers le bas', 'flèche vers la gauche à pointe pliée vers le bas']);
  this.executeCharTest('⬑', ['flèche vers la gauche à pointe pliée vers le haut', 'flèche vers la gauche à pointe pliée vers le haut', 'flèche vers la gauche à pointe pliée vers le haut']);
  this.executeCharTest('⬰', ['flèche vers la gauche à petit cercle', 'flèche vers la gauche à petit cercle', 'flèche vers la gauche à petit cercle']);
  this.executeCharTest('⬱', ['trois flèches vers la gauche', 'trois flèches vers la gauche', 'trois flèches vers la gauche']);
  this.executeCharTest('⬲', ['flèche vers la gauche à signe plus cerclé', 'flèche vers la gauche à signe plus cerclé', 'flèche vers la gauche à signe plus cerclé']);
  this.executeCharTest('⬳', ['longue flèche vers la gauche en tire bouchon', 'longue flèche vers la gauche en tire bouchon', 'longue flèche vers la gauche en tire bouchon']);
  this.executeCharTest('⬴', ['flèche à deux pointes vers la gauche barrée verticalement', 'flèche à deux pointes vers la gauche barrée verticalement', 'flèche à deux pointes vers la gauche barrée verticalement']);
  this.executeCharTest('⬵', ['flèche à deux pointes vers la gauche barrée deux fois verticalement', 'flèche à deux pointes vers la gauche barrée deux fois verticalement', 'flèche à deux pointes vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⬶', ['flèche à deux têtes d\'un taquet vers la gauche', 'flèche à deux têtes d\'un taquet vers la gauche', 'flèche à deux têtes d\'un taquet vers la gauche']);
  this.executeCharTest('⬷', ['flèche à trois traits et à deux têtes vers la gauche', 'flèche à trois traits et à deux têtes vers la gauche', 'flèche à trois traits et à deux têtes vers la gauche']);
  this.executeCharTest('⬸', ['flèche vers la gauche à fût pointillé', 'flèche vers la gauche à fût pointillé', 'flèche vers la gauche à fût pointillé']);
  this.executeCharTest('⬹', ['flèche empennée vers la gauche barrée verticalement', 'flèche empennée vers la gauche barrée verticalement', 'flèche empennée vers la gauche barrée verticalement']);
  this.executeCharTest('⬺', ['flèche empennée vers la gauche barrée deux fois verticalement', 'flèche empennée vers la gauche barrée deux fois verticalement', 'flèche empennée vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⬻', ['flèche empennée à deux têtes vers la gauche', 'flèche empennée à deux têtes vers la gauche', 'flèche empennée à deux têtes vers la gauche']);
  this.executeCharTest('⬼', ['flèche empennée à deux têtes vers la gauche barrée verticalement', 'flèche empennée à deux têtes vers la gauche barrée verticalement', 'flèche empennée à deux têtes vers la gauche barrée verticalement']);
  this.executeCharTest('⬽', ['flèche empennée à deux têtes vers la gauche barrée deux fois verticalement', 'flèche empennée à deux têtes vers la gauche barrée deux fois verticalement', 'flèche empennée à deux têtes vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⬾', ['flèche vers la gauche au travers un x', 'flèche vers la gauche au travers un x', 'flèche vers la gauche au travers un x']);
  this.executeCharTest('⬿', ['flèche vers la gauche bossue', 'flèche vers la gauche bossue', 'flèche vers la gauche bossue']);
  this.executeCharTest('⭀', ['flèche vers la gauche surmontée d\'un égal', 'flèche vers la gauche surmontée d\'un égal', 'flèche vers la gauche surmontée d\'un égal']);
  this.executeCharTest('⭁', ['flèche vers la gauche surmontée d\'un tilde', 'flèche vers la gauche surmontée d\'un tilde', 'flèche vers la gauche surmontée d\'un tilde']);
  this.executeCharTest('⭂', ['presque égal à réfléchi surmonté d\'une flèche vers la gauche', 'presque égal à réfléchi surmonté d\'une flèche vers la gauche', 'presque égal à réfléchi surmonté d\'une flèche vers la gauche']);
  this.executeCharTest('⭃', ['flèche vers la droite à travers un inférieur à', 'flèche vers la droite à travers un inférieur à', 'flèche vers la droite à travers un inférieur à']);
  this.executeCharTest('⭄', ['flèche vers la droite au travers d\'un sous ensemble de', 'flèche vers la droite au travers d\'un sous ensemble de', 'flèche vers la droite au travers d\'un sous ensemble de']);
  this.executeCharTest('⭅', ['quadruple flèche vers la gauche', 'quadruple flèche vers la gauche', 'quadruple flèche vers la gauche']);
  this.executeCharTest('⭆', ['quadruple flèche vers la droite', 'quadruple flèche vers la droite', 'quadruple flèche vers la droite']);
  this.executeCharTest('⭇', ['flèche vers la droite surmontée d\'un opérateur tilde réfléchi', 'flèche vers la droite surmontée d\'un opérateur tilde réfléchi', 'flèche vers la droite surmontée d\'un opérateur tilde réfléchi']);
  this.executeCharTest('⭈', ['presque égal à réfléchi surmonté d\'une flèche vers la droite', 'presque égal à réfléchi surmonté d\'une flèche vers la droite', 'presque égal à réfléchi surmonté d\'une flèche vers la droite']);
  this.executeCharTest('⭉', ['flèche vers la gauche surmontée de l\'opérateur tilde', 'flèche vers la gauche surmontée de l\'opérateur tilde', 'flèche vers la gauche surmontée de l\'opérateur tilde']);
  this.executeCharTest('⭊', ['flèche vers la gauche par dessus presque égal à', 'flèche vers la gauche par dessus presque égal à', 'flèche vers la gauche par dessus presque égal à']);
  this.executeCharTest('⭋', ['tilde réfléchi surmonté d\'une flèche vers la gauche', 'tilde réfléchi surmonté d\'une flèche vers la gauche', 'tilde réfléchi surmonté d\'une flèche vers la gauche']);
  this.executeCharTest('⭌', ['ilde surmonté d\'une flèche vers la droite', 'ilde surmonté d\'une flèche vers la droite', 'ilde surmonté d\'une flèche vers la droite']);
  this.executeCharTest('￩', ['flèche vers la gauche demi chasse', 'flèche vers la gauche demi chasse', 'flèche vers la gauche demi chasse']);
  this.executeCharTest('￪', ['flèche vers le haut demi chasse', 'flèche vers le haut demi chasse', 'flèche vers le haut demi chasse']);
  this.executeCharTest('￫', ['flèche vers la droite demi chasse', 'flèche vers la droite demi chasse', 'flèche vers la droite demi chasse']);
  this.executeCharTest('￬', ['flèche vers le bas demi chasse', 'flèche vers le bas demi chasse', 'flèche vers le bas demi chasse']);
  this.executeCharTest('ℓ', ['l minuscule en script', 'l minuscule en script', 'l minuscule en script']);
  this.executeCharTest('℘', ['fonction elliptique de weierstrass', 'fonction elliptique de weierstrass', 'fonction elliptique de weierstrass']);
  this.executeCharTest('ℼ', ['pi ajouré', 'pi ajouré', 'pi ajouré']);
  this.executeCharTest('ℽ', ['gamma ajouré', 'gamma ajouré', 'gamma ajouré']);
  this.executeCharTest('ℾ', ['Gamma majuscule ajouré', 'Gamma majuscule ajouré', 'Gamma majuscule ajouré']);
  this.executeCharTest('ℿ', ['Pi majuscule ajouré', 'Pi majuscule ajouré', 'Pi majuscule ajouré']);
  this.executeCharTest('⅀', ['sommation de la famille ajouré', 'sommation de la famille ajouré', 'sommation de la famille ajouré']);
  this.executeCharTest('ⅅ', ['D majuscule', 'D majuscule', 'D majuscule']);
  this.executeCharTest('ⅆ', ['d ajouré en italique', 'd ajouré en italique', 'd ajouré en italique']);
  this.executeCharTest('ⅇ', ['e ajouré en italique', 'e ajouré en italique', 'e ajouré en italique']);
  this.executeCharTest('ⅈ', ['i ajouré en italique', 'i ajouré en italique', 'i ajouré en italique']);
  this.executeCharTest('ⅉ', ['j ajouré en italique', 'j ajouré en italique', 'j ajouré en italique']);
  this.executeCharTest('𝚤', ['dotless i', 'dotless i', 'dotless i']);
  this.executeCharTest('𝚥', ['dotless j', 'dotless j', 'dotless j']);
  this.executeCharTest('(', ['parenthèse gauche', 'parenthèse gauche', 'parenthèse gauche']);
  this.executeCharTest(')', ['parenthèse droite', 'parenthèse droite', 'parenthèse droite']);
  this.executeCharTest('[', ['crochet gauche', 'crochet gauche', 'crochet gauche']);
  this.executeCharTest(']', ['crochet droit', 'crochet droit', 'crochet droit']);
  this.executeCharTest('{', ['accolade gauche', 'accolade gauche', 'accolade gauche']);
  this.executeCharTest('}', ['accolade droite', 'accolade droite', 'accolade droite']);
  this.executeCharTest('⁅', ['crochet gauche avec pique', 'crochet gauche avec pique', 'crochet gauche avec pique']);
  this.executeCharTest('⁆', ['crochet droit avec pique', 'crochet droit avec pique', 'crochet droit avec pique']);
  this.executeCharTest('⌈', ['plafond à gauche', 'plafond à gauche', 'plafond à gauche']);
  this.executeCharTest('⌉', ['plafond à droite', 'plafond à droite', 'plafond à droite']);
  this.executeCharTest('⌊', ['plancher à gauche', 'plancher à gauche', 'plancher à gauche']);
  this.executeCharTest('⌋', ['plancher à droite', 'plancher à droite', 'plancher à droite']);
  this.executeCharTest('⌌', ['repère sud est', 'repère sud est', 'repère sud est']);
  this.executeCharTest('⌍', ['repère sud ouest', 'repère sud ouest', 'repère sud ouest']);
  this.executeCharTest('⌎', ['repère nord est', 'repère nord est', 'repère nord est']);
  this.executeCharTest('⌏', ['repère nord ouest', 'repère nord ouest', 'repère nord ouest']);
  this.executeCharTest('⌜', ['coin nord ouest', 'coin nord ouest', 'coin nord ouest']);
  this.executeCharTest('⌝', ['coin nord est', 'coin nord est', 'coin nord est']);
  this.executeCharTest('⌞', ['coin sud ouest', 'coin sud ouest', 'coin sud ouest']);
  this.executeCharTest('⌟', ['coin sud est', 'coin sud est', 'coin sud est']);
  this.executeCharTest('⌠', ['moitié supérieure d\'intégrale', 'moitié supérieure d\'intégrale', 'moitié supérieure d\'intégrale']);
  this.executeCharTest('⌡', ['moitié inférieure d\'intégrale', 'moitié inférieure d\'intégrale', 'moitié inférieure d\'intégrale']);
  this.executeCharTest('〈', ['chevron gauche', 'chevron gauche', 'chevron gauche']);
  this.executeCharTest('〉', ['chevron droite', 'chevron droite', 'chevron droite']);
  this.executeCharTest('⎛', ['arc supérieur de parenthèse gauche', 'arc supérieur de parenthèse gauche', 'arc supérieur de parenthèse gauche']);
  this.executeCharTest('⎜', ['rallonge de parenthèse gauche', 'rallonge de parenthèse gauche', 'rallonge de parenthèse gauche']);
  this.executeCharTest('⎝', ['arc inférieur de parenthèse gauche', 'arc inférieur de parenthèse gauche', 'arc inférieur de parenthèse gauche']);
  this.executeCharTest('⎞', ['arc supérieur de parenthèse droite', 'arc supérieur de parenthèse droite', 'arc supérieur de parenthèse droite']);
  this.executeCharTest('⎟', ['rallonge de parenthèse droite', 'rallonge de parenthèse droite', 'rallonge de parenthèse droite']);
  this.executeCharTest('⎠', ['arc inférieur de parenthèse droite', 'arc inférieur de parenthèse droite', 'arc inférieur de parenthèse droite']);
  this.executeCharTest('⎡', ['coin supérieur de crochet gauche', 'coin supérieur de crochet gauche', 'coin supérieur de crochet gauche']);
  this.executeCharTest('⎢', ['rallonge de crochet gauche', 'rallonge de crochet gauche', 'rallonge de crochet gauche']);
  this.executeCharTest('⎣', ['coin inférieur de crochet gauche', 'coin inférieur de crochet gauche', 'coin inférieur de crochet gauche']);
  this.executeCharTest('⎤', ['coin supérieur de crochet droit', 'coin supérieur de crochet droit', 'coin supérieur de crochet droit']);
  this.executeCharTest('⎥', ['rallonge de crochet droit', 'rallonge de crochet droit', 'rallonge de crochet droit']);
  this.executeCharTest('⎦', ['coin inférieur de crochet droit', 'coin inférieur de crochet droit', 'coin inférieur de crochet droit']);
  this.executeCharTest('⎧', ['arc supérieur d\'accolade gauche', 'arc supérieur d\'accolade gauche', 'arc supérieur d\'accolade gauche']);
  this.executeCharTest('⎨', ['milieu d\'accolade gauche', 'milieu d\'accolade gauche', 'milieu d\'accolade gauche']);
  this.executeCharTest('⎩', ['arc inférieur d\'accolade gauche', 'arc inférieur d\'accolade gauche', 'arc inférieur d\'accolade gauche']);
  this.executeCharTest('⎪', ['rallonge d\'accolade', 'rallonge d\'accolade', 'rallonge d\'accolade']);
  this.executeCharTest('⎫', ['arc supérieur d\'accolade droite', 'arc supérieur d\'accolade droite', 'arc supérieur d\'accolade droite']);
  this.executeCharTest('⎬', ['milieu d\'accolade droite', 'milieu d\'accolade droite', 'milieu d\'accolade droite']);
  this.executeCharTest('⎭', ['arc inférieur d\'accolade droite', 'arc inférieur d\'accolade droite', 'arc inférieur d\'accolade droite']);
  this.executeCharTest('⎮', ['rallonge d\'intégrale', 'rallonge d\'intégrale', 'rallonge d\'intégrale']);
  this.executeCharTest('⎯', ['rallonge de ligne horizontale', 'rallonge de ligne horizontale', 'rallonge de ligne horizontale']);
  this.executeCharTest('⎰', ['moitié supérieure gauche ou inférieure droite d\'accolade', 'moitié supérieure gauche ou inférieure droite d\'accolade', 'moitié supérieure gauche ou inférieure droite d\'accolade']);
  this.executeCharTest('⎱', ['moitié supérieure droite ou inférieure gauche d\'accolade', 'moitié supérieure droite ou inférieure gauche d\'accolade', 'moitié supérieure droite ou inférieure gauche d\'accolade']);
  this.executeCharTest('⎲', ['haut du signe de somme', 'haut du signe de somme', 'haut du signe de somme']);
  this.executeCharTest('⎳', ['bas du signe de somme', 'bas du signe de somme', 'bas du signe de somme']);
  this.executeCharTest('⎴', ['crochet vertical supérieur', 'crochet vertical supérieur', 'crochet vertical supérieur']);
  this.executeCharTest('⎵', ['crochet vertical inférieur', 'crochet vertical inférieur', 'crochet vertical inférieur']);
  this.executeCharTest('⎶', ['crochet verticaux en défilé', 'crochet verticaux en défilé', 'crochet verticaux en défilé']);
  this.executeCharTest('⎷', ['bas du radical', 'bas du radical', 'bas du radical']);
  this.executeCharTest('⎸', ['filet vertical gauche', 'filet vertical gauche', 'filet vertical gauche']);
  this.executeCharTest('⎹', ['filet vertical droit', 'filet vertical droit', 'filet vertical droit']);
  this.executeCharTest('⏜', ['parenthèse supérieure', 'parenthèse supérieure', 'parenthèse supérieure']);
  this.executeCharTest('⏝', ['parenthèse inférieure', 'parenthèse inférieure', 'parenthèse inférieure']);
  this.executeCharTest('⏞', ['accolade supérieure', 'accolade supérieure', 'accolade supérieure']);
  this.executeCharTest('⏟', ['accolade inférieure', 'accolade inférieure', 'accolade inférieure']);
  this.executeCharTest('⏠', ['crochet en écaille supérieur', 'crochet en écaille supérieur', 'crochet en écaille supérieur']);
  this.executeCharTest('⏡', ['crochet en écaille inférieur', 'crochet en écaille inférieur', 'crochet en écaille inférieur']);
  this.executeCharTest('❨', ['parenthèse de fantaisie gauche demi grasse', 'parenthèse de fantaisie gauche demi grasse', 'parenthèse de fantaisie gauche demi grasse']);
  this.executeCharTest('❩', ['parenthèse de fantaisie droite demi grasse', 'parenthèse de fantaisie droite demi grasse', 'parenthèse de fantaisie droite demi grasse']);
  this.executeCharTest('❪', ['parenthèse de fantaisie gauche demi grasse aplatie', 'parenthèse de fantaisie gauche demi grasse aplatie', 'parenthèse de fantaisie gauche demi grasse aplatie']);
  this.executeCharTest('❫', ['parenthèse de fantaisie droite demi grasse aplatie', 'parenthèse de fantaisie droite demi grasse aplatie', 'parenthèse de fantaisie droite demi grasse aplatie']);
  this.executeCharTest('❬', ['chevron de fantaisie vers la gauche demi gras', 'chevron de fantaisie vers la gauche demi gras', 'chevron de fantaisie vers la gauche demi gras']);
  this.executeCharTest('❭', ['chevron de fantaisie vers la droite demi gras', 'chevron de fantaisie vers la droite demi gras', 'chevron de fantaisie vers la droite demi gras']);
  this.executeCharTest('❮', ['guillemet de fantaisie vers la gauche gras', 'guillemet de fantaisie vers la gauche gras', 'guillemet de fantaisie vers la gauche gras']);
  this.executeCharTest('❯', ['guillemet de fantaisie vers la droite gras', 'guillemet de fantaisie vers la droite gras', 'guillemet de fantaisie vers la droite gras']);
  this.executeCharTest('❰', ['crochet de fantaisie vers la gauche gras', 'crochet de fantaisie vers la gauche gras', 'crochet de fantaisie vers la gauche gras']);
  this.executeCharTest('❱', ['crochet de fantaisie vers la droite gras', 'crochet de fantaisie vers la droite gras', 'crochet de fantaisie vers la droite gras']);
  this.executeCharTest('❲', ['crochet de fantaisie gauche maigre en écaille', 'crochet de fantaisie gauche maigre en écaille', 'crochet de fantaisie gauche maigre en écaille']);
  this.executeCharTest('❳', ['crochet de fantaisie droit maigre en écaille', 'crochet de fantaisie droit maigre en écaille', 'crochet de fantaisie droit maigre en écaille']);
  this.executeCharTest('❴', ['accolade de fantaisie gauche moyenne', 'accolade de fantaisie gauche moyenne', 'accolade de fantaisie gauche moyenne']);
  this.executeCharTest('❵', ['accolade de fantaisie droite moyenne', 'accolade de fantaisie droite moyenne', 'accolade de fantaisie droite moyenne']);
  this.executeCharTest('⟅', ['délimiteur de sac en s gauche', 'délimiteur de sac en s gauche', 'délimiteur de sac en s gauche']);
  this.executeCharTest('⟆', ['délimiteur de sac en s droite', 'délimiteur de sac en s droite', 'délimiteur de sac en s droite']);
  this.executeCharTest('⟦', ['crochet blanc gauche', 'crochet blanc gauche', 'crochet blanc gauche']);
  this.executeCharTest('⟧', ['crochet blanc droit', 'crochet blanc droit', 'crochet blanc droit']);
  this.executeCharTest('⟨', ['chevron mathématique gauche', 'chevron mathématique gauche', 'chevron mathématique gauche']);
  this.executeCharTest('⟩', ['chevron droit', 'chevron droit', 'chevron droit']);
  this.executeCharTest('⟪', ['double chevron gauche', 'double chevron gauche', 'double chevron gauche']);
  this.executeCharTest('⟫', ['double chevron droit', 'double chevron droit', 'double chevron droit']);
  this.executeCharTest('⟬', ['crochet gauche en écaille blanche', 'crochet gauche en écaille blanche', 'crochet gauche en écaille blanche']);
  this.executeCharTest('⟭', ['crochet droit en écaille blanche', 'crochet droit en écaille blanche', 'crochet droit en écaille blanche']);
  this.executeCharTest('⟮', ['parenthèse gauche aplatie', 'parenthèse gauche aplatie', 'parenthèse gauche aplatie']);
  this.executeCharTest('⟯', ['parenthèse droite aplatie', 'parenthèse droite aplatie', 'parenthèse droite aplatie']);
  this.executeCharTest('⦃', ['accolade gauche ajourée', 'accolade gauche ajourée', 'accolade gauche ajourée']);
  this.executeCharTest('⦄', ['accolade droite ajourée', 'accolade droite ajourée', 'accolade droite ajourée']);
  this.executeCharTest('⦅', ['parenthèse gauche ajourée', 'parenthèse gauche ajourée', 'parenthèse gauche ajourée']);
  this.executeCharTest('⦆', ['parenthèse droite ajourée', 'parenthèse droite ajourée', 'parenthèse droite ajourée']);
  this.executeCharTest('⦇', ['parenthèse image de gauche en notation z', 'parenthèse image de gauche en notation z', 'parenthèse image de gauche en notation z']);
  this.executeCharTest('⦈', ['parenthèse image de droite en notation z', 'parenthèse image de droite en notation z', 'parenthèse image de droite en notation z']);
  this.executeCharTest('⦉', ['z notation left binding bracket', 'z notation left binding bracket', 'z notation left binding bracket']);
  this.executeCharTest('⦊', ['z notation right binding bracket', 'z notation right binding bracket', 'z notation right binding bracket']);
  this.executeCharTest('⦋', ['crochet gauche avec barre souscrite', 'crochet gauche avec barre souscrite', 'crochet gauche avec barre souscrite']);
  this.executeCharTest('⦌', ['crochet droit avec barre souscrite', 'crochet droit avec barre souscrite', 'crochet droit avec barre souscrite']);
  this.executeCharTest('⦍', ['crochet gauche avec trait dans le coin supérieur', 'crochet gauche avec trait dans le coin supérieur', 'crochet gauche avec trait dans le coin supérieur']);
  this.executeCharTest('⦎', ['crochet droit avec trait dans le coin inférieur', 'crochet droit avec trait dans le coin inférieur', 'crochet droit avec trait dans le coin inférieur']);
  this.executeCharTest('⦏', ['crochet gauche avec trait dans le coin inférieur', 'crochet gauche avec trait dans le coin inférieur', 'crochet gauche avec trait dans le coin inférieur']);
  this.executeCharTest('⦐', ['crochet droit avec trait dans le coin supérieur', 'crochet droit avec trait dans le coin supérieur', 'crochet droit avec trait dans le coin supérieur']);
  this.executeCharTest('⦑', ['chevron gauche pointé', 'chevron gauche pointé', 'chevron gauche pointé']);
  this.executeCharTest('⦒', ['chevron droit pointé', 'chevron droit pointé', 'chevron droit pointé']);
  this.executeCharTest('⦓', ['parenthèse arc gauche et inférieur à', 'parenthèse arc gauche et inférieur à', 'parenthèse arc gauche et inférieur à']);
  this.executeCharTest('⦔', ['parenthèse arc droite et supérieur à', 'parenthèse arc droite et supérieur à', 'parenthèse arc droite et supérieur à']);
  this.executeCharTest('⦕', ['parenthèse double arc droite et supérieur à', 'parenthèse double arc droite et supérieur à', 'parenthèse double arc droite et supérieur à']);
  this.executeCharTest('⦖', ['parenthèse double arc gauche et inférieur à', 'parenthèse double arc gauche et inférieur à', 'parenthèse double arc gauche et inférieur à']);
  this.executeCharTest('⦗', ['crochet noir gauche en écaille', 'crochet noir gauche en écaille', 'crochet noir gauche en écaille']);
  this.executeCharTest('⦘', ['crochet noir droite en écaille', 'crochet noir droite en écaille', 'crochet noir droite en écaille']);
  this.executeCharTest('⧘', ['clôture dentelée gauche', 'clôture dentelée gauche', 'clôture dentelée gauche']);
  this.executeCharTest('⧙', ['clôture dentelée droite', 'clôture dentelée droite', 'clôture dentelée droite']);
  this.executeCharTest('⧚', ['double clôture dentelée gauche', 'double clôture dentelée gauche', 'double clôture dentelée gauche']);
  this.executeCharTest('⧛', ['right double wiggly fence', 'right double wiggly fence', 'right double wiggly fence']);
  this.executeCharTest('⧼', ['chevron vers la gauche courbé', 'chevron vers la gauche courbé', 'chevron vers la gauche courbé']);
  this.executeCharTest('⧽', ['chevron vers la droite courbé', 'chevron vers la droite courbé', 'chevron vers la droite courbé']);
  this.executeCharTest('⸢', ['anglet supérieur gauche', 'anglet supérieur gauche', 'anglet supérieur gauche']);
  this.executeCharTest('⸣', ['anglet supérieur droit', 'anglet supérieur droit', 'anglet supérieur droit']);
  this.executeCharTest('⸤', ['anglet inférieur gauche', 'anglet inférieur gauche', 'anglet inférieur gauche']);
  this.executeCharTest('⸥', ['anglet inférieur droit', 'anglet inférieur droit', 'anglet inférieur droit']);
  this.executeCharTest('⸦', ['crampillon couché gauche', 'crampillon couché gauche', 'crampillon couché gauche']);
  this.executeCharTest('⸧', ['crampillon couché droit', 'crampillon couché droit', 'crampillon couché droit']);
  this.executeCharTest('⸨', ['double parenthèse gauche', 'double parenthèse gauche', 'double parenthèse gauche']);
  this.executeCharTest('⸩', ['double parenthèse droite', 'double parenthèse droite', 'double parenthèse droite']);
  this.executeCharTest('〈', ['chevron gauche', 'chevron gauche', 'chevron gauche']);
  this.executeCharTest('〉', ['chevron droit', 'chevron droit', 'chevron droit']);
  this.executeCharTest('《', ['double chevron gauche', 'double chevron gauche', 'double chevron gauche']);
  this.executeCharTest('》', ['double chevron droit', 'double chevron droit', 'double chevron droit']);
  this.executeCharTest('「', ['anglet gauche', 'anglet gauche', 'anglet gauche']);
  this.executeCharTest('」', ['anglet droit', 'anglet droit', 'anglet droit']);
  this.executeCharTest('『', ['anglet ajouré gauche', 'anglet ajouré gauche', 'anglet ajouré gauche']);
  this.executeCharTest('』', ['anglet ajouré droit', 'anglet ajouré droit', 'anglet ajouré droit']);
  this.executeCharTest('【', ['crochet noir lenticulaire gauche', 'crochet noir lenticulaire gauche', 'crochet noir lenticulaire gauche']);
  this.executeCharTest('】', ['crochet noir lenticulaire droit', 'crochet noir lenticulaire droit', 'crochet noir lenticulaire droit']);
  this.executeCharTest('〔', ['crochet gauche en écaille', 'crochet gauche en écaille', 'crochet gauche en écaille']);
  this.executeCharTest('〕', ['crochet droit en écaille', 'crochet droit en écaille', 'crochet droit en écaille']);
  this.executeCharTest('〖', ['crochet blanc lenticulaire gauche', 'crochet blanc lenticulaire gauche', 'crochet blanc lenticulaire gauche']);
  this.executeCharTest('〗', ['crochet blanc lenticulaire droit', 'crochet blanc lenticulaire droit', 'crochet blanc lenticulaire droit']);
  this.executeCharTest('〘', ['crochet blanc gauche en écaille', 'crochet blanc gauche en écaille', 'crochet blanc gauche en écaille']);
  this.executeCharTest('〙', ['crochet blanc droit en écaille', 'crochet blanc droit en écaille', 'crochet blanc droit en écaille']);
  this.executeCharTest('〚', ['crochet blanc gauche', 'crochet blanc gauche', 'crochet blanc gauche']);
  this.executeCharTest('〛', ['crochet blanc droit', 'crochet blanc droit', 'crochet blanc droit']);
  this.executeCharTest('〝', ['guillemet double prime réfléchi', 'guillemet double prime réfléchi', 'guillemet double prime réfléchi']);
  this.executeCharTest('〞', ['guillemet double prime', 'guillemet double prime', 'guillemet double prime']);
  this.executeCharTest('〟', ['guillemet double prime inférieur', 'guillemet double prime inférieur', 'guillemet double prime inférieur']);
  this.executeCharTest('﴾', ['parenthèse gauche ornée', 'parenthèse gauche ornée', 'parenthèse gauche ornée']);
  this.executeCharTest('﴿', ['parenthèse droite ornée', 'parenthèse droite ornée', 'parenthèse droite ornée']);
  this.executeCharTest('︗', ['forme de présentation de crochet blanc lenticulaire gauche vertical', 'forme de présentation de crochet blanc lenticulaire gauche vertical', 'forme de présentation de crochet blanc lenticulaire gauche vertical']);
  this.executeCharTest('︘', ['forme de présentation de crochet blanc lenticulaire droit vertical', 'forme de présentation de crochet blanc lenticulaire droit vertical', 'forme de présentation de crochet blanc lenticulaire droit vertical']);
  this.executeCharTest('︵', ['forme de présentation de parenthèse gauche verticale', 'forme de présentation de parenthèse gauche verticale', 'forme de présentation de parenthèse gauche verticale']);
  this.executeCharTest('︶', ['forme de présentation de parenthèse droite verticale', 'forme de présentation de parenthèse droite verticale', 'forme de présentation de parenthèse droite verticale']);
  this.executeCharTest('︷', ['forme de présentation d\'accolade gauche verticale', 'forme de présentation d\'accolade gauche verticale', 'forme de présentation d\'accolade gauche verticale']);
  this.executeCharTest('︸', ['forme de présentation d\'accolade droite verticale', 'forme de présentation d\'accolade droite verticale', 'forme de présentation d\'accolade droite verticale']);
  this.executeCharTest('︹', ['forme de présentation de crochet gauche vertical en écaille', 'forme de présentation de crochet gauche vertical en écaille', 'forme de présentation de crochet gauche vertical en écaille']);
  this.executeCharTest('︺', ['forme de présentation de crochet droit vertical en écaille', 'forme de présentation de crochet droit vertical en écaille', 'forme de présentation de crochet droit vertical en écaille']);
  this.executeCharTest('︻', ['forme de présentation de crochet gauche lenticulaire noir vertical', 'forme de présentation de crochet gauche lenticulaire noir vertical', 'forme de présentation de crochet gauche lenticulaire noir vertical']);
  this.executeCharTest('︼', ['forme de présentation de crochet droit lenticulaire noir vertical', 'forme de présentation de crochet droit lenticulaire noir vertical', 'forme de présentation de crochet droit lenticulaire noir vertical']);
  this.executeCharTest('︽', ['forme de présentation de crochet double gauche vertical', 'forme de présentation de crochet double gauche vertical', 'forme de présentation de crochet double gauche vertical']);
  this.executeCharTest('︾', ['forme de présentation de crochet double droit vertical', 'forme de présentation de crochet double droit vertical', 'forme de présentation de crochet double droit vertical']);
  this.executeCharTest('︿', ['over angle bracket', 'over angle bracket', 'over angle bracket']);
  this.executeCharTest('﹀', ['under angle bracket', 'under angle bracket', 'under angle bracket']);
  this.executeCharTest('﹁', ['forme de présentation de crochet vertical gauche en coin', 'forme de présentation de crochet vertical gauche en coin', 'forme de présentation de crochet vertical gauche en coin']);
  this.executeCharTest('﹂', ['forme de présentation de crochet vertical droit en coin', 'forme de présentation de crochet vertical droit en coin', 'forme de présentation de crochet vertical droit en coin']);
  this.executeCharTest('﹃', ['forme de présentation de crochet blanc vertical gauche en coin', 'forme de présentation de crochet blanc vertical gauche en coin', 'forme de présentation de crochet blanc vertical gauche en coin']);
  this.executeCharTest('﹄', ['forme de présentation de crochet blanc vertical droit en coin', 'forme de présentation de crochet blanc vertical droit en coin', 'forme de présentation de crochet blanc vertical droit en coin']);
  this.executeCharTest('﹇', ['forme de présentation de crochet gauche vertical', 'forme de présentation de crochet gauche vertical', 'forme de présentation de crochet gauche vertical']);
  this.executeCharTest('﹈', ['forme de présentation de crochet droit vertical', 'forme de présentation de crochet droit vertical', 'forme de présentation de crochet droit vertical']);
  this.executeCharTest('﹙', ['parenthèse gauche minuscule', 'parenthèse gauche minuscule', 'parenthèse gauche minuscule']);
  this.executeCharTest('﹚', ['parenthèse droite minuscule', 'parenthèse droite minuscule', 'parenthèse droite minuscule']);
  this.executeCharTest('﹛', ['accolade gauche minuscule', 'accolade gauche minuscule', 'accolade gauche minuscule']);
  this.executeCharTest('﹜', ['accolade droite minuscule', 'accolade droite minuscule', 'accolade droite minuscule']);
  this.executeCharTest('﹝', ['crochet gauche en écaille minuscule', 'crochet gauche en écaille minuscule', 'crochet gauche en écaille minuscule']);
  this.executeCharTest('﹞', ['crochet droit en écaille minuscule', 'crochet droit en écaille minuscule', 'crochet droit en écaille minuscule']);
  this.executeCharTest('（', ['parenthèse gauche pleine chasse', 'parenthèse gauche pleine chasse', 'parenthèse gauche pleine chasse']);
  this.executeCharTest('）', ['parenthèse droite pleine chasse', 'parenthèse droite pleine chasse', 'parenthèse droite pleine chasse']);
  this.executeCharTest('［', ['crochet gauche pleine chasse', 'crochet gauche pleine chasse', 'crochet gauche pleine chasse']);
  this.executeCharTest('］', ['crochet droit pleine chasse', 'crochet droit pleine chasse', 'crochet droit pleine chasse']);
  this.executeCharTest('｛', ['accolade gauche pleine chasse', 'accolade gauche pleine chasse', 'accolade gauche pleine chasse']);
  this.executeCharTest('｝', ['accolade droite pleine chasse', 'accolade droite pleine chasse', 'accolade droite pleine chasse']);
  this.executeCharTest('｟', ['parenthèse gauche ajourée pleine chasse *', 'parenthèse gauche ajourée pleine chasse *', 'parenthèse gauche ajourée pleine chasse *']);
  this.executeCharTest('｠', ['parenthèse droite ajourée pleine chasse *', 'parenthèse droite ajourée pleine chasse *', 'parenthèse droite ajourée pleine chasse *']);
  this.executeCharTest('｢', ['crochet gauche en coin demi chasse', 'crochet gauche en coin demi chasse', 'crochet gauche en coin demi chasse']);
  this.executeCharTest('｣', ['crochet droit en coin demi chasse', 'crochet droit en coin demi chasse', 'crochet droit en coin demi chasse']);
  this.executeCharTest('─', ['filet horizontal fin', 'filet horizontal fin', 'filet horizontal fin']);
  this.executeCharTest('━', ['filet horizontal gras', 'filet horizontal gras', 'filet horizontal gras']);
  this.executeCharTest('│', ['filet vertical fin', 'filet vertical fin', 'filet vertical fin']);
  this.executeCharTest('┃', ['filet vertical gras', 'filet vertical gras', 'filet vertical gras']);
  this.executeCharTest('┄', ['filet brisé triple horizontal fin', 'filet brisé triple horizontal fin', 'filet brisé triple horizontal fin']);
  this.executeCharTest('┅', ['filet brisé triple horizontal gras', 'filet brisé triple horizontal gras', 'filet brisé triple horizontal gras']);
  this.executeCharTest('┆', ['filet brisé triple vertical fin', 'filet brisé triple vertical fin', 'filet brisé triple vertical fin']);
  this.executeCharTest('┇', ['filet brisé triple vertical gras', 'filet brisé triple vertical gras', 'filet brisé triple vertical gras']);
  this.executeCharTest('┈', ['filet brisé quadruple horizontal fin', 'filet brisé quadruple horizontal fin', 'filet brisé quadruple horizontal fin']);
  this.executeCharTest('┉', ['filet brisé quadruple horizontal gras', 'filet brisé quadruple horizontal gras', 'filet brisé quadruple horizontal gras']);
  this.executeCharTest('┊', ['filet brisé quadruple vertical fin', 'filet brisé quadruple vertical fin', 'filet brisé quadruple vertical fin']);
  this.executeCharTest('┋', ['filet brisé quadruple vertical gras', 'filet brisé quadruple vertical gras', 'filet brisé quadruple vertical gras']);
  this.executeCharTest('┌', ['filet fin vers le bas et vers la droite', 'filet fin vers le bas et vers la droite', 'filet fin vers le bas et vers la droite']);
  this.executeCharTest('┍', ['filet fin vers le bas et gras vers la droite', 'filet fin vers le bas et gras vers la droite', 'filet fin vers le bas et gras vers la droite']);
  this.executeCharTest('┎', ['filet gras vers le bas et fin vers la droite', 'filet gras vers le bas et fin vers la droite', 'filet gras vers le bas et fin vers la droite']);
  this.executeCharTest('┏', ['filet gras vers le bas et vers la droite', 'filet gras vers le bas et vers la droite', 'filet gras vers le bas et vers la droite']);
  this.executeCharTest('┐', ['filet fin vers le bas et vers la gauche', 'filet fin vers le bas et vers la gauche', 'filet fin vers le bas et vers la gauche']);
  this.executeCharTest('┑', ['filet fin vers le bas et gras vers la gauche', 'filet fin vers le bas et gras vers la gauche', 'filet fin vers le bas et gras vers la gauche']);
  this.executeCharTest('┒', ['filet gras vers le bas et fin vers la gauche', 'filet gras vers le bas et fin vers la gauche', 'filet gras vers le bas et fin vers la gauche']);
  this.executeCharTest('┓', ['filet gras vers le bas et vers la gauche', 'filet gras vers le bas et vers la gauche', 'filet gras vers le bas et vers la gauche']);
  this.executeCharTest('└', ['filet fin vers le haut et vers la droite', 'filet fin vers le haut et vers la droite', 'filet fin vers le haut et vers la droite']);
  this.executeCharTest('┕', ['filet fin vers le haut et gras vers la droite', 'filet fin vers le haut et gras vers la droite', 'filet fin vers le haut et gras vers la droite']);
  this.executeCharTest('┖', ['filet gras vers le haut et fin vers la droite', 'filet gras vers le haut et fin vers la droite', 'filet gras vers le haut et fin vers la droite']);
  this.executeCharTest('┗', ['filet gras vers le haut et vers la droite', 'filet gras vers le haut et vers la droite', 'filet gras vers le haut et vers la droite']);
  this.executeCharTest('┘', ['filet fin vers le haut et vers la gauche', 'filet fin vers le haut et vers la gauche', 'filet fin vers le haut et vers la gauche']);
  this.executeCharTest('┙', ['filet fin vers le haut et gras vers la gauche', 'filet fin vers le haut et gras vers la gauche', 'filet fin vers le haut et gras vers la gauche']);
  this.executeCharTest('┚', ['filet gras vers le haut et fin vers la gauche', 'filet gras vers le haut et fin vers la gauche', 'filet gras vers le haut et fin vers la gauche']);
  this.executeCharTest('┛', ['filet gras vers le haut et vers la gauche', 'filet gras vers le haut et vers la gauche', 'filet gras vers le haut et vers la gauche']);
  this.executeCharTest('├', ['filet fin vertical et vers la droite', 'filet fin vertical et vers la droite', 'filet fin vertical et vers la droite']);
  this.executeCharTest('┝', ['filet fin vertical et gras vers la droite', 'filet fin vertical et gras vers la droite', 'filet fin vertical et gras vers la droite']);
  this.executeCharTest('┞', ['filet gras vers le haut et fin vers la droite et vers le bas', 'filet gras vers le haut et fin vers la droite et vers le bas', 'filet gras vers le haut et fin vers la droite et vers le bas']);
  this.executeCharTest('┟', ['filet gras vers le bas et fin vers la droite et vers le haut', 'filet gras vers le bas et fin vers la droite et vers le haut', 'filet gras vers le bas et fin vers la droite et vers le haut']);
  this.executeCharTest('┠', ['filet gras vertical et fin vers la droite', 'filet gras vertical et fin vers la droite', 'filet gras vertical et fin vers la droite']);
  this.executeCharTest('┡', ['filet fin vers le bas et gras vers la droite et vers le haut', 'filet fin vers le bas et gras vers la droite et vers le haut', 'filet fin vers le bas et gras vers la droite et vers le haut']);
  this.executeCharTest('┢', ['filet fin vers le haut et gras vers la droite et vers le bas', 'filet fin vers le haut et gras vers la droite et vers le bas', 'filet fin vers le haut et gras vers la droite et vers le bas']);
  this.executeCharTest('┣', ['filet gras vertical et vers la droite', 'filet gras vertical et vers la droite', 'filet gras vertical et vers la droite']);
  this.executeCharTest('┤', ['filet fin vertical et vers la gauche', 'filet fin vertical et vers la gauche', 'filet fin vertical et vers la gauche']);
  this.executeCharTest('┥', ['filet fin vertical et gras vers la gauche', 'filet fin vertical et gras vers la gauche', 'filet fin vertical et gras vers la gauche']);
  this.executeCharTest('┦', ['filet gras vers le haut et fin vers la gauche et vers le bas', 'filet gras vers le haut et fin vers la gauche et vers le bas', 'filet gras vers le haut et fin vers la gauche et vers le bas']);
  this.executeCharTest('┧', ['filet gras vers le bas et fin vers la gauche et vers le haut', 'filet gras vers le bas et fin vers la gauche et vers le haut', 'filet gras vers le bas et fin vers la gauche et vers le haut']);
  this.executeCharTest('┨', ['filet gras vertical et fin vers la gauche', 'filet gras vertical et fin vers la gauche', 'filet gras vertical et fin vers la gauche']);
  this.executeCharTest('┩', ['filet fin vers le bas et gras vers la gauche et vers le haut', 'filet fin vers le bas et gras vers la gauche et vers le haut', 'filet fin vers le bas et gras vers la gauche et vers le haut']);
  this.executeCharTest('┪', ['filet fin vers le haut et gras vers la gauche et vers le bas', 'filet fin vers le haut et gras vers la gauche et vers le bas', 'filet fin vers le haut et gras vers la gauche et vers le bas']);
  this.executeCharTest('┫', ['filet gras vertical et vers la gauche', 'filet gras vertical et vers la gauche', 'filet gras vertical et vers la gauche']);
  this.executeCharTest('┬', ['filet fin vers le bas et horizontal', 'filet fin vers le bas et horizontal', 'filet fin vers le bas et horizontal']);
  this.executeCharTest('┭', ['filet gras vers la gauche et fin vers la droite et vers le bas', 'filet gras vers la gauche et fin vers la droite et vers le bas', 'filet gras vers la gauche et fin vers la droite et vers le bas']);
  this.executeCharTest('┮', ['filet gras vers la droite et fin vers la gauche et vers le bas', 'filet gras vers la droite et fin vers la gauche et vers le bas', 'filet gras vers la droite et fin vers la gauche et vers le bas']);
  this.executeCharTest('┯', ['filet fin vers le bas et gras horizontal', 'filet fin vers le bas et gras horizontal', 'filet fin vers le bas et gras horizontal']);
  this.executeCharTest('┰', ['filet gras vers le bas et fin horizontal', 'filet gras vers le bas et fin horizontal', 'filet gras vers le bas et fin horizontal']);
  this.executeCharTest('┱', ['filet fin vers la droite et gras vers la gauche et vers le bas', 'filet fin vers la droite et gras vers la gauche et vers le bas', 'filet fin vers la droite et gras vers la gauche et vers le bas']);
  this.executeCharTest('┲', ['filet fin vers la gauche et gras vers la droite et vers le bas', 'filet fin vers la gauche et gras vers la droite et vers le bas', 'filet fin vers la gauche et gras vers la droite et vers le bas']);
  this.executeCharTest('┳', ['filet gras vers le bas et horizontal', 'filet gras vers le bas et horizontal', 'filet gras vers le bas et horizontal']);
  this.executeCharTest('┴', ['filet fin vers le haut et horizontal', 'filet fin vers le haut et horizontal', 'filet fin vers le haut et horizontal']);
  this.executeCharTest('┵', ['filet gras vers la gauche et fin vers la droite et vers le haut', 'filet gras vers la gauche et fin vers la droite et vers le haut', 'filet gras vers la gauche et fin vers la droite et vers le haut']);
  this.executeCharTest('┶', ['filet gras vers la droite et fin vers la gauche et vers le haut', 'filet gras vers la droite et fin vers la gauche et vers le haut', 'filet gras vers la droite et fin vers la gauche et vers le haut']);
  this.executeCharTest('┷', ['filet fin vers le haut et gras horizontal', 'filet fin vers le haut et gras horizontal', 'filet fin vers le haut et gras horizontal']);
  this.executeCharTest('┸', ['filet gras vers le haut et fin horizontal', 'filet gras vers le haut et fin horizontal', 'filet gras vers le haut et fin horizontal']);
  this.executeCharTest('┹', ['filet fin vers la droite et gras vers la gauche et vers le haut', 'filet fin vers la droite et gras vers la gauche et vers le haut', 'filet fin vers la droite et gras vers la gauche et vers le haut']);
  this.executeCharTest('┺', ['filet fin vers la gauche et gras vers la droite et vers le haut', 'filet fin vers la gauche et gras vers la droite et vers le haut', 'filet fin vers la gauche et gras vers la droite et vers le haut']);
  this.executeCharTest('┻', ['filet gras vers le haut et horizontal', 'filet gras vers le haut et horizontal', 'filet gras vers le haut et horizontal']);
  this.executeCharTest('┼', ['filet fin vertical et horizontal', 'filet fin vertical et horizontal', 'filet fin vertical et horizontal']);
  this.executeCharTest('┽', ['filet gras vers la gauche et fin vers la droite et vertical', 'filet gras vers la gauche et fin vers la droite et vertical', 'filet gras vers la gauche et fin vers la droite et vertical']);
  this.executeCharTest('┾', ['filet gras vers la droite et fin vers la gauche et vertical', 'filet gras vers la droite et fin vers la gauche et vertical', 'filet gras vers la droite et fin vers la gauche et vertical']);
  this.executeCharTest('┿', ['filet vertical fin et horizontal gras', 'filet vertical fin et horizontal gras', 'filet vertical fin et horizontal gras']);
  this.executeCharTest('╀', ['filet gras vers le haut et fin vers le bas et horizontal', 'filet gras vers le haut et fin vers le bas et horizontal', 'filet gras vers le haut et fin vers le bas et horizontal']);
  this.executeCharTest('╁', ['filet gras vers le bas et fin vers le haut et horizontal', 'filet gras vers le bas et fin vers le haut et horizontal', 'filet gras vers le bas et fin vers le haut et horizontal']);
  this.executeCharTest('╂', ['filet vertical gras et horizontal fin', 'filet vertical gras et horizontal fin', 'filet vertical gras et horizontal fin']);
  this.executeCharTest('╃', ['filet gras vers la gauche et vers le haut et fin vers la droite et vers le bas', 'filet gras vers la gauche et vers le haut et fin vers la droite et vers le bas', 'filet gras vers la gauche et vers le haut et fin vers la droite et vers le bas']);
  this.executeCharTest('╄', ['filet gras vers la droite et vers le haut et fin vers la gauche et vers le bas', 'filet gras vers la droite et vers le haut et fin vers la gauche et vers le bas', 'filet gras vers la droite et vers le haut et fin vers la gauche et vers le bas']);
  this.executeCharTest('╅', ['filet gras vers la gauche et vers le bas et fin vers la droite et vers le haut', 'filet gras vers la gauche et vers le bas et fin vers la droite et vers le haut', 'filet gras vers la gauche et vers le bas et fin vers la droite et vers le haut']);
  this.executeCharTest('╆', ['filet gras vers la droite et vers le bas et fin vers la gauche et vers le haut', 'filet gras vers la droite et vers le bas et fin vers la gauche et vers le haut', 'filet gras vers la droite et vers le bas et fin vers la gauche et vers le haut']);
  this.executeCharTest('╇', ['filet fin vers le bas et gras vers le haut et horizontal', 'filet fin vers le bas et gras vers le haut et horizontal', 'filet fin vers le bas et gras vers le haut et horizontal']);
  this.executeCharTest('╈', ['filet fin vers le haut et gras vers le bas et horizontal', 'filet fin vers le haut et gras vers le bas et horizontal', 'filet fin vers le haut et gras vers le bas et horizontal']);
  this.executeCharTest('╉', ['filet fin vers la droite et gras vers la gauche et vertical', 'filet fin vers la droite et gras vers la gauche et vertical', 'filet fin vers la droite et gras vers la gauche et vertical']);
  this.executeCharTest('╊', ['filet fin vers la gauche et gras vers la droite et vertical', 'filet fin vers la gauche et gras vers la droite et vertical', 'filet fin vers la gauche et gras vers la droite et vertical']);
  this.executeCharTest('╋', ['filet vertical et horizontal gras', 'filet vertical et horizontal gras', 'filet vertical et horizontal gras']);
  this.executeCharTest('╌', ['filet brisé double horizontal fin', 'filet brisé double horizontal fin', 'filet brisé double horizontal fin']);
  this.executeCharTest('╍', ['filet brisé double horizontal gras', 'filet brisé double horizontal gras', 'filet brisé double horizontal gras']);
  this.executeCharTest('╎', ['filet brisé double vertical fin', 'filet brisé double vertical fin', 'filet brisé double vertical fin']);
  this.executeCharTest('╏', ['filet brisé double vertical gras', 'filet brisé double vertical gras', 'filet brisé double vertical gras']);
  this.executeCharTest('═', ['filet double horizontal', 'filet double horizontal', 'filet double horizontal']);
  this.executeCharTest('║', ['filet double vertical', 'filet double vertical', 'filet double vertical']);
  this.executeCharTest('╒', ['filet simple le bas et double vers la droite', 'filet simple le bas et double vers la droite', 'filet simple le bas et double vers la droite']);
  this.executeCharTest('╓', ['filet double vers le bas et simple vers la droite', 'filet double vers le bas et simple vers la droite', 'filet double vers le bas et simple vers la droite']);
  this.executeCharTest('╔', ['filet double vers le bas et vers la droite', 'filet double vers le bas et vers la droite', 'filet double vers le bas et vers la droite']);
  this.executeCharTest('╕', ['filet simple vers le bas et double vers la gauche', 'filet simple vers le bas et double vers la gauche', 'filet simple vers le bas et double vers la gauche']);
  this.executeCharTest('╖', ['filet double vers le bas et simple vers la gauche', 'filet double vers le bas et simple vers la gauche', 'filet double vers le bas et simple vers la gauche']);
  this.executeCharTest('╗', ['filet double vers le bas et vers la gauche', 'filet double vers le bas et vers la gauche', 'filet double vers le bas et vers la gauche']);
  this.executeCharTest('╘', ['filet simple vers le haut et double vers la droite', 'filet simple vers le haut et double vers la droite', 'filet simple vers le haut et double vers la droite']);
  this.executeCharTest('╙', ['filet double vers le haut et simple vers la droite', 'filet double vers le haut et simple vers la droite', 'filet double vers le haut et simple vers la droite']);
  this.executeCharTest('╚', ['filet double vers le haut et vers la droite', 'filet double vers le haut et vers la droite', 'filet double vers le haut et vers la droite']);
  this.executeCharTest('╛', ['filet simple vers le haut et double vers la gauche', 'filet simple vers le haut et double vers la gauche', 'filet simple vers le haut et double vers la gauche']);
  this.executeCharTest('╜', ['filet double vers le haut et simple vers la gauche', 'filet double vers le haut et simple vers la gauche', 'filet double vers le haut et simple vers la gauche']);
  this.executeCharTest('╝', ['filet double vers le haut et vers la gauche', 'filet double vers le haut et vers la gauche', 'filet double vers le haut et vers la gauche']);
  this.executeCharTest('╞', ['filet vertical simple et droit double', 'filet vertical simple et droit double', 'filet vertical simple et droit double']);
  this.executeCharTest('╟', ['filet vertical double et droit simple', 'filet vertical double et droit simple', 'filet vertical double et droit simple']);
  this.executeCharTest('╠', ['filet double vertical et vers la droite', 'filet double vertical et vers la droite', 'filet double vertical et vers la droite']);
  this.executeCharTest('╡', ['filet vertical simple et gauche double', 'filet vertical simple et gauche double', 'filet vertical simple et gauche double']);
  this.executeCharTest('╢', ['filet vertical double et gauche simple', 'filet vertical double et gauche simple', 'filet vertical double et gauche simple']);
  this.executeCharTest('╣', ['filet double vertical et vers la gauche', 'filet double vertical et vers la gauche', 'filet double vertical et vers la gauche']);
  this.executeCharTest('╤', ['filet vers le bas simple et horizontal double', 'filet vers le bas simple et horizontal double', 'filet vers le bas simple et horizontal double']);
  this.executeCharTest('╥', ['filet vers le bas double et horizontal simple', 'filet vers le bas double et horizontal simple', 'filet vers le bas double et horizontal simple']);
  this.executeCharTest('╦', ['filet double vers le bas et horizontal', 'filet double vers le bas et horizontal', 'filet double vers le bas et horizontal']);
  this.executeCharTest('╧', ['filet vers le haut simple et horizontal double', 'filet vers le haut simple et horizontal double', 'filet vers le haut simple et horizontal double']);
  this.executeCharTest('╨', ['filet vers le haut double et horizontal simple', 'filet vers le haut double et horizontal simple', 'filet vers le haut double et horizontal simple']);
  this.executeCharTest('╩', ['filet double vers le haut et horizontal', 'filet double vers le haut et horizontal', 'filet double vers le haut et horizontal']);
  this.executeCharTest('╪', ['filet vertical simple et horizontal double', 'filet vertical simple et horizontal double', 'filet vertical simple et horizontal double']);
  this.executeCharTest('╫', ['filet vertical double et horizontal simple', 'filet vertical double et horizontal simple', 'filet vertical double et horizontal simple']);
  this.executeCharTest('╬', ['filet double vertical et horizontall', 'filet double vertical et horizontall', 'filet double vertical et horizontall']);
  this.executeCharTest('╭', ['filet fin arc vers le bas et vers la droite', 'filet fin arc vers le bas et vers la droite', 'filet fin arc vers le bas et vers la droite']);
  this.executeCharTest('╮', ['filet fin arc vers le bas et vers la gauche', 'filet fin arc vers le bas et vers la gauche', 'filet fin arc vers le bas et vers la gauche']);
  this.executeCharTest('╯', ['filet fin arc vers le haut et vers la gauche', 'filet fin arc vers le haut et vers la gauche', 'filet fin arc vers le haut et vers la gauche']);
  this.executeCharTest('╰', ['filet fin arc vers le haut et vers la droite', 'filet fin arc vers le haut et vers la droite', 'filet fin arc vers le haut et vers la droite']);
  this.executeCharTest('╱', ['filet diagonal fin du coin supérieur droit au coin inférieur gauche', 'filet diagonal fin du coin supérieur droit au coin inférieur gauche', 'filet diagonal fin du coin supérieur droit au coin inférieur gauche']);
  this.executeCharTest('╲', ['filet diagonal fin du coin supérieur gauche vers le coin inférieur droit', 'filet diagonal fin du coin supérieur gauche vers le coin inférieur droit', 'filet diagonal fin du coin supérieur gauche vers le coin inférieur droit']);
  this.executeCharTest('╳', ['filet diagonal fin en croix', 'filet diagonal fin en croix', 'filet diagonal fin en croix']);
  this.executeCharTest('╴', ['filet fin vers la gauche', 'filet fin vers la gauche', 'filet fin vers la gauche']);
  this.executeCharTest('╵', ['filet fin vers le haut', 'filet fin vers le haut', 'filet fin vers le haut']);
  this.executeCharTest('╶', ['filet fin vers la droite', 'filet fin vers la droite', 'filet fin vers la droite']);
  this.executeCharTest('╷', ['filet fin vers le bas', 'filet fin vers le bas', 'filet fin vers le bas']);
  this.executeCharTest('╸', ['filet gras vers la gauche', 'filet gras vers la gauche', 'filet gras vers la gauche']);
  this.executeCharTest('╹', ['filet gras vers le haut', 'filet gras vers le haut', 'filet gras vers le haut']);
  this.executeCharTest('╺', ['filet gras vers la droite', 'filet gras vers la droite', 'filet gras vers la droite']);
  this.executeCharTest('╻', ['filet gras vers le bas', 'filet gras vers le bas', 'filet gras vers le bas']);
  this.executeCharTest('╼', ['filet fin vers la gauche et gras vers la droite', 'filet fin vers la gauche et gras vers la droite', 'filet fin vers la gauche et gras vers la droite']);
  this.executeCharTest('╽', ['filet fin vers le haut et gras vers le bas', 'filet fin vers le haut et gras vers le bas', 'filet fin vers le haut et gras vers le bas']);
  this.executeCharTest('╾', ['filet gras vers la gauche et fin vers la droite', 'filet gras vers la gauche et fin vers la droite', 'filet gras vers la gauche et fin vers la droite']);
  this.executeCharTest('╿', ['filet gras vers le haut et fin vers le bas', 'filet gras vers le haut et fin vers le bas', 'filet gras vers le haut et fin vers le bas']);
  this.executeCharTest('▀', ['moitié supérieure de pavé', 'moitié supérieure de pavé', 'moitié supérieure de pavé']);
  this.executeCharTest('▁', ['huitième inférieur de pavé', 'huitième inférieur de pavé', 'huitième inférieur de pavé']);
  this.executeCharTest('▂', ['quart inférieur de pavé', 'quart inférieur de pavé', 'quart inférieur de pavé']);
  this.executeCharTest('▃', ['trois huitièmes inférieurs de pavé', 'trois huitièmes inférieurs de pavé', 'trois huitièmes inférieurs de pavé']);
  this.executeCharTest('▄', ['moitié inférieure de pavé', 'moitié inférieure de pavé', 'moitié inférieure de pavé']);
  this.executeCharTest('▅', ['cinq huitièmes inférieurs de pavé', 'cinq huitièmes inférieurs de pavé', 'cinq huitièmes inférieurs de pavé']);
  this.executeCharTest('▆', ['trois quarts inférieurs de pavé', 'trois quarts inférieurs de pavé', 'trois quarts inférieurs de pavé']);
  this.executeCharTest('▇', ['sept huitièmes inférieurs de pavé', 'sept huitièmes inférieurs de pavé', 'sept huitièmes inférieurs de pavé']);
  this.executeCharTest('█', ['pavé plein', 'pavé plein', 'pavé plein']);
  this.executeCharTest('▉', ['sept huitièmes gauches de pavé', 'sept huitièmes gauches de pavé', 'sept huitièmes gauches de pavé']);
  this.executeCharTest('▊', ['trois quarts gauches de pavé', 'trois quarts gauches de pavé', 'trois quarts gauches de pavé']);
  this.executeCharTest('▋', ['cinq huitièmes gauches de pavé', 'cinq huitièmes gauches de pavé', 'cinq huitièmes gauches de pavé']);
  this.executeCharTest('▌', ['moitié gauche de pavé', 'moitié gauche de pavé', 'moitié gauche de pavé']);
  this.executeCharTest('▍', ['trois huitièmes gauches de pavé', 'trois huitièmes gauches de pavé', 'trois huitièmes gauches de pavé']);
  this.executeCharTest('▎', ['un quart gauche de pavé', 'un quart gauche de pavé', 'un quart gauche de pavé']);
  this.executeCharTest('▏', ['un huitième gauche de pavé', 'un huitième gauche de pavé', 'un huitième gauche de pavé']);
  this.executeCharTest('▐', ['moitié droite de pavé', 'moitié droite de pavé', 'moitié droite de pavé']);
  this.executeCharTest('░', ['ombre légère', 'ombre légère', 'ombre légère']);
  this.executeCharTest('▒', ['ombre moyenne', 'ombre moyenne', 'ombre moyenne']);
  this.executeCharTest('▓', ['ombre foncée', 'ombre foncée', 'ombre foncée']);
  this.executeCharTest('▔', ['huitième supérieur de pavé', 'huitième supérieur de pavé', 'huitième supérieur de pavé']);
  this.executeCharTest('▕', ['huitième droit de pavé', 'huitième droit de pavé', 'huitième droit de pavé']);
  this.executeCharTest('▖', ['quadrant inférieur gauche', 'quadrant inférieur gauche', 'quadrant inférieur gauche']);
  this.executeCharTest('▗', ['quadrant inférieur droit', 'quadrant inférieur droit', 'quadrant inférieur droit']);
  this.executeCharTest('▘', ['quadrant supérieur gauche', 'quadrant supérieur gauche', 'quadrant supérieur gauche']);
  this.executeCharTest('▙', ['quadrant supérieur gauche inférieur gauche et inférieur droit', 'quadrant supérieur gauche inférieur gauche et inférieur droit', 'quadrant supérieur gauche inférieur gauche et inférieur droit']);
  this.executeCharTest('▚', ['quadrant supérieur gauche et inférieur droit', 'quadrant supérieur gauche et inférieur droit', 'quadrant supérieur gauche et inférieur droit']);
  this.executeCharTest('▛', ['quadrant supérieur gauche supérieur droit et inférieur gauche', 'quadrant supérieur gauche supérieur droit et inférieur gauche', 'quadrant supérieur gauche supérieur droit et inférieur gauche']);
  this.executeCharTest('▜', ['quadrant supérieur gauche supérieur droit et inférieur droit', 'quadrant supérieur gauche supérieur droit et inférieur droit', 'quadrant supérieur gauche supérieur droit et inférieur droit']);
  this.executeCharTest('▝', ['quadrant supérieur droit', 'quadrant supérieur droit', 'quadrant supérieur droit']);
  this.executeCharTest('▞', ['quadrant supérieur droit et inférieur gauche', 'quadrant supérieur droit et inférieur gauche', 'quadrant supérieur droit et inférieur gauche']);
  this.executeCharTest('▟', ['quadrant supérieur droit inférieur gauche et inférieur droit', 'quadrant supérieur droit inférieur gauche et inférieur droit', 'quadrant supérieur droit inférieur gauche et inférieur droit']);
  this.executeCharTest('■', ['petit carré noir', 'petit carré noir', 'petit carré noir']);
  this.executeCharTest('□', ['carré blanc', 'carré blanc', 'carré blanc']);
  this.executeCharTest('▢', ['carré blanc aux coins arrondis', 'carré blanc aux coins arrondis', 'carré blanc aux coins arrondis']);
  this.executeCharTest('▣', ['petit carré noir inscrit dans un carré blanc', 'petit carré noir inscrit dans un carré blanc', 'petit carré noir inscrit dans un carré blanc']);
  this.executeCharTest('▤', ['carré hachuré horizontalement', 'carré hachuré horizontalement', 'carré hachuré horizontalement']);
  this.executeCharTest('▥', ['carré hachuré verticalement', 'carré hachuré verticalement', 'carré hachuré verticalement']);
  this.executeCharTest('▦', ['carré quadrillé', 'carré quadrillé', 'carré quadrillé']);
  this.executeCharTest('▧', ['carré hachuré du haut à gauche vers le bas à droite', 'carré hachuré du haut à gauche vers le bas à droite', 'carré hachuré du haut à gauche vers le bas à droite']);
  this.executeCharTest('▨', ['carré hachuré du haut à droite vers le bas à gauche', 'carré hachuré du haut à droite vers le bas à gauche', 'carré hachuré du haut à droite vers le bas à gauche']);
  this.executeCharTest('▩', ['carré quadrillé en diagonale', 'carré quadrillé en diagonale', 'carré quadrillé en diagonale']);
  this.executeCharTest('▪', ['petit carré noir', 'petit carré noir', 'petit carré noir']);
  this.executeCharTest('▫', ['petit carré blanc', 'petit carré blanc', 'petit carré blanc']);
  this.executeCharTest('▬', ['rectangle noir', 'rectangle noir', 'rectangle noir']);
  this.executeCharTest('▭', ['rectangle blanc', 'rectangle blanc', 'rectangle blanc']);
  this.executeCharTest('▮', ['rectangle vertical noir', 'rectangle vertical noir', 'rectangle vertical noir']);
  this.executeCharTest('▯', ['white vertical rectangle', 'white vertical rectangle', 'white vertical rectangle']);
  this.executeCharTest('▰', ['parallélogramme noir', 'parallélogramme noir', 'parallélogramme noir']);
  this.executeCharTest('▱', ['parallélogramme blanc', 'parallélogramme blanc', 'parallélogramme blanc']);
  this.executeCharTest('▲', ['petit triangle noir pointant vers le haut', 'petit triangle noir pointant vers le haut', 'petit triangle noir pointant vers le haut']);
  this.executeCharTest('△', ['triangle blanc pointant vers le haut', 'triangle blanc pointant vers le haut', 'triangle blanc pointant vers le haut']);
  this.executeCharTest('▴', ['petit triangle noir pointant vers le haut', 'petit triangle noir pointant vers le haut', 'petit triangle noir pointant vers le haut']);
  this.executeCharTest('▵', ['petit triangle blanc pointant vers le haut', 'petit triangle blanc pointant vers le haut', 'petit triangle blanc pointant vers le haut']);
  this.executeCharTest('▶', ['petit triangle noir pointant vers la droite', 'petit triangle noir pointant vers la droite', 'petit triangle noir pointant vers la droite']);
  this.executeCharTest('▷', ['triangle blanc pointant vers la droite', 'triangle blanc pointant vers la droite', 'triangle blanc pointant vers la droite']);
  this.executeCharTest('▸', ['petit triangle noir pointant vers la droite', 'petit triangle noir pointant vers la droite', 'petit triangle noir pointant vers la droite']);
  this.executeCharTest('▹', ['petit triangle blanc pointant vers la droite', 'petit triangle blanc pointant vers la droite', 'petit triangle blanc pointant vers la droite']);
  this.executeCharTest('►', ['pointeur noir vers la droite', 'pointeur noir vers la droite', 'pointeur noir vers la droite']);
  this.executeCharTest('▻', ['pointeur blanc vers la droite', 'pointeur blanc vers la droite', 'pointeur blanc vers la droite']);
  this.executeCharTest('▼', ['petit triangle noir pointant vers le bas', 'petit triangle noir pointant vers le bas', 'petit triangle noir pointant vers le bas']);
  this.executeCharTest('▽', ['triangle blanc pointant vers le bas', 'triangle blanc pointant vers le bas', 'triangle blanc pointant vers le bas']);
  this.executeCharTest('▾', ['petit triangle noir pointant vers le bas', 'petit triangle noir pointant vers le bas', 'petit triangle noir pointant vers le bas']);
  this.executeCharTest('▿', ['petit triangle blanc pointant vers le bas', 'petit triangle blanc pointant vers le bas', 'petit triangle blanc pointant vers le bas']);
  this.executeCharTest('◀', ['petit triangle noir pointant vers la gauche', 'petit triangle noir pointant vers la gauche', 'petit triangle noir pointant vers la gauche']);
  this.executeCharTest('◁', ['petit triangle blanc pointant vers la gauche', 'petit triangle blanc pointant vers la gauche', 'petit triangle blanc pointant vers la gauche']);
  this.executeCharTest('◂', ['petit triangle noir pointant vers la gauche', 'petit triangle noir pointant vers la gauche', 'petit triangle noir pointant vers la gauche']);
  this.executeCharTest('◃', ['petit triangle blanc pointant vers la gauche', 'petit triangle blanc pointant vers la gauche', 'petit triangle blanc pointant vers la gauche']);
  this.executeCharTest('◄', ['pointeur noir vers la gauche', 'pointeur noir vers la gauche', 'pointeur noir vers la gauche']);
  this.executeCharTest('◅', ['pointeur blanc vers la gauche', 'pointeur blanc vers la gauche', 'pointeur blanc vers la gauche']);
  this.executeCharTest('◆', ['losange noir', 'losange noir', 'losange noir']);
  this.executeCharTest('◇', ['losange blanc', 'losange blanc', 'losange blanc']);
  this.executeCharTest('◈', ['losange blanc évidé', 'losange blanc évidé', 'losange blanc évidé']);
  this.executeCharTest('◉', ['cercle blanc évidé', 'cercle blanc évidé', 'cercle blanc évidé']);
  this.executeCharTest('◊', ['losange', 'losange', 'losange']);
  this.executeCharTest('○', ['cercle blanc', 'cercle blanc', 'cercle blanc']);
  this.executeCharTest('◌', ['cercle en pointillés', 'cercle en pointillés', 'cercle en pointillés']);
  this.executeCharTest('◍', ['cercle hachuré verticalement', 'cercle hachuré verticalement', 'cercle hachuré verticalement']);
  this.executeCharTest('◎', ['deux cercles concentriques', 'deux cercles concentriques', 'deux cercles concentriques']);
  this.executeCharTest('●', ['cercle noir', 'cercle noir', 'cercle noir']);
  this.executeCharTest('◐', ['cercle avec moitié gauche noire', 'cercle avec moitié gauche noire', 'cercle avec moitié gauche noire']);
  this.executeCharTest('◑', ['cercle avec moitié droite noire', 'cercle avec moitié droite noire', 'cercle avec moitié droite noire']);
  this.executeCharTest('◒', ['cercle avec moitié inférieure', 'cercle avec moitié inférieure', 'cercle avec moitié inférieure']);
  this.executeCharTest('◓', ['cercle avec moitié supérieure', 'cercle avec moitié supérieure', 'cercle avec moitié supérieure']);
  this.executeCharTest('◔', ['cercle avec quadrant supérieur droit noir', 'cercle avec quadrant supérieur droit noir', 'cercle avec quadrant supérieur droit noir']);
  this.executeCharTest('◕', ['disque avec quadrant supérieur gauche blanc', 'disque avec quadrant supérieur gauche blanc', 'disque avec quadrant supérieur gauche blanc']);
  this.executeCharTest('◖', ['demi disque gauche noir', 'demi disque gauche noir', 'demi disque gauche noir']);
  this.executeCharTest('◗', ['demi disque droite noir', 'demi disque droite noir', 'demi disque droite noir']);
  this.executeCharTest('◘', ['point noir au blanc', 'point noir au blanc', 'point noir au blanc']);
  this.executeCharTest('◙', ['cercle noir au blanc', 'cercle noir au blanc', 'cercle noir au blanc']);
  this.executeCharTest('◚', ['demi cercle supérieur noir au  blanc', 'demi cercle supérieur noir au  blanc', 'demi cercle supérieur noir au  blanc']);
  this.executeCharTest('◛', ['demi cercle inférieur noir au  blanc', 'demi cercle inférieur noir au  blanc', 'demi cercle inférieur noir au  blanc']);
  this.executeCharTest('◜', ['arc de cercle dans le quadrant supérieur gauchearc de cercle dans le quadrant supérieur gauche', 'arc de cercle dans le quadrant supérieur gauchearc de cercle dans le quadrant supérieur gauche', 'arc de cercle dans le quadrant supérieur gauchearc de cercle dans le quadrant supérieur gauche']);
  this.executeCharTest('◝', ['arc de cercle dans le quadrant supérieur droit', 'arc de cercle dans le quadrant supérieur droit', 'arc de cercle dans le quadrant supérieur droit']);
  this.executeCharTest('◞', ['arc de cercle dans le quadrant inférieur droit', 'arc de cercle dans le quadrant inférieur droit', 'arc de cercle dans le quadrant inférieur droit']);
  this.executeCharTest('◟', ['arc de cercle dans le quadrant inférieur gauche', 'arc de cercle dans le quadrant inférieur gauche', 'arc de cercle dans le quadrant inférieur gauche']);
  this.executeCharTest('◠', ['demi cercle supérieur', 'demi cercle supérieur', 'demi cercle supérieur']);
  this.executeCharTest('◡', ['demi cercle inférieur', 'demi cercle inférieur', 'demi cercle inférieur']);
  this.executeCharTest('◢', ['coin triangulaire noir inférieur droit', 'coin triangulaire noir inférieur droit', 'coin triangulaire noir inférieur droit']);
  this.executeCharTest('◣', ['coin triangulaire noir inférieur gauche', 'coin triangulaire noir inférieur gauche', 'coin triangulaire noir inférieur gauche']);
  this.executeCharTest('◤', ['coin triangulaire noir supérieur gauche', 'coin triangulaire noir supérieur gauche', 'coin triangulaire noir supérieur gauche']);
  this.executeCharTest('◥', ['coin triangulaire noir supérieur droit', 'coin triangulaire noir supérieur droit', 'coin triangulaire noir supérieur droit']);
  this.executeCharTest('◦', ['opérateur rond', 'opérateur rond', 'opérateur rond']);
  this.executeCharTest('◧', ['carré à moitié gauche noire', 'carré à moitié gauche noire', 'carré à moitié gauche noire']);
  this.executeCharTest('◨', ['carré à moitié droite noire', 'carré à moitié droite noire', 'carré à moitié droite noire']);
  this.executeCharTest('◩', ['carré à moitié supérieure gauche noire', 'carré à moitié supérieure gauche noire', 'carré à moitié supérieure gauche noire']);
  this.executeCharTest('◪', ['carré à moitié inférieure droite noire', 'carré à moitié inférieure droite noire', 'carré à moitié inférieure droite noire']);
  this.executeCharTest('◫', ['carré blanc à ligne bissectrice verticale', 'carré blanc à ligne bissectrice verticale', 'carré blanc à ligne bissectrice verticale']);
  this.executeCharTest('◬', ['triangle blanc pointant vers le haut pointé', 'triangle blanc pointant vers le haut pointé', 'triangle blanc pointant vers le haut pointé']);
  this.executeCharTest('◭', ['triangle pointe vers le haut À moitié gauche noire', 'triangle pointe vers le haut À moitié gauche noire', 'triangle pointe vers le haut À moitié gauche noire']);
  this.executeCharTest('◮', ['triangle pointe vers le haut À moitié droite noire', 'triangle pointe vers le haut À moitié droite noire', 'triangle pointe vers le haut À moitié droite noire']);
  this.executeCharTest('◯', ['grand cercle', 'grand cercle', 'grand cercle']);
  this.executeCharTest('◰', ['carré blanc à quartier supérieur gauche', 'carré blanc à quartier supérieur gauche', 'carré blanc à quartier supérieur gauche']);
  this.executeCharTest('◱', ['carré blanc à quartier inférieur gauche', 'carré blanc à quartier inférieur gauche', 'carré blanc à quartier inférieur gauche']);
  this.executeCharTest('◲', ['carré blanc à quartier inférieur droit', 'carré blanc à quartier inférieur droit', 'carré blanc à quartier inférieur droit']);
  this.executeCharTest('◳', ['carré blanc à quartier supérieur droit', 'carré blanc à quartier supérieur droit', 'carré blanc à quartier supérieur droit']);
  this.executeCharTest('◴', ['cercle blanc à quartier supérieur gauche', 'cercle blanc à quartier supérieur gauche', 'cercle blanc à quartier supérieur gauche']);
  this.executeCharTest('◵', ['cercle blanc à quartier inférieur gauche', 'cercle blanc à quartier inférieur gauche', 'cercle blanc à quartier inférieur gauche']);
  this.executeCharTest('◶', ['cercle blanc à quartier inférieur droit', 'cercle blanc à quartier inférieur droit', 'cercle blanc à quartier inférieur droit']);
  this.executeCharTest('◷', ['cercle blanc à quartier supérieur droit', 'cercle blanc à quartier supérieur droit', 'cercle blanc à quartier supérieur droit']);
  this.executeCharTest('◸', ['triangle rectangle supérieur gauche', 'triangle rectangle supérieur gauche', 'triangle rectangle supérieur gauche']);
  this.executeCharTest('◹', ['triangle rectangle supérieur droit', 'triangle rectangle supérieur droit', 'triangle rectangle supérieur droit']);
  this.executeCharTest('◺', ['triangle rectangle inférieur gauche', 'triangle rectangle inférieur gauche', 'triangle rectangle inférieur gauche']);
  this.executeCharTest('◻', ['carré moyen blanc', 'carré moyen blanc', 'carré moyen blanc']);
  this.executeCharTest('◼', ['carré moyen noir', 'carré moyen noir', 'carré moyen noir']);
  this.executeCharTest('◽', ['carré moyen blanc', 'carré moyen blanc', 'carré moyen blanc']);
  this.executeCharTest('◾', ['carré moyen noir', 'carré moyen noir', 'carré moyen noir']);
  this.executeCharTest('◿', ['triangle rectangle inférieur droit', 'triangle rectangle inférieur droit', 'triangle rectangle inférieur droit']);
  this.executeCharTest('⬒', ['carré à moitié supérieure noire', 'carré à moitié supérieure noire', 'carré à moitié supérieure noire']);
  this.executeCharTest('⬓', ['carré à moitié inférieure noire', 'carré à moitié inférieure noire', 'carré à moitié inférieure noire']);
  this.executeCharTest('⬔', ['carré à moitié diagonale supérieure droite noire', 'carré à moitié diagonale supérieure droite noire', 'carré à moitié diagonale supérieure droite noire']);
  this.executeCharTest('⬕', ['carré à moitié diagonale inférieure droite noire', 'carré à moitié diagonale inférieure droite noire', 'carré à moitié diagonale inférieure droite noire']);
  this.executeCharTest('⬖', ['losange à moitié gauche noire', 'losange à moitié gauche noire', 'losange à moitié gauche noire']);
  this.executeCharTest('⬗', ['losange à moitié droite noire', 'losange à moitié droite noire', 'losange à moitié droite noire']);
  this.executeCharTest('⬘', ['losange à moitié supérieure noire', 'losange à moitié supérieure noire', 'losange à moitié supérieure noire']);
  this.executeCharTest('⬙', ['losange à moitié inférieure noire', 'losange à moitié inférieure noire', 'losange à moitié inférieure noire']);
  this.executeCharTest('⬚', ['carré en pointillés', 'carré en pointillés', 'carré en pointillés']);
  this.executeCharTest('⬛', ['grand carré noir', 'grand carré noir', 'grand carré noir']);
  this.executeCharTest('⬜', ['grand carré blanc', 'grand carré blanc', 'grand carré blanc']);
  this.executeCharTest('⬝', ['très petit carré noir', 'très petit carré noir', 'très petit carré noir']);
  this.executeCharTest('⬞', ['très petit carré blanc', 'très petit carré blanc', 'très petit carré blanc']);
  this.executeCharTest('⬟', ['pentagone noir', 'pentagone noir', 'pentagone noir']);
  this.executeCharTest('⬠', ['pentagone blanc', 'pentagone blanc', 'pentagone blanc']);
  this.executeCharTest('⬡', ['hexagone blanc', 'hexagone blanc', 'hexagone blanc']);
  this.executeCharTest('⬢', ['hexagone noir', 'hexagone noir', 'hexagone noir']);
  this.executeCharTest('⬣', ['hexagone noir posé sur un côté', 'hexagone noir posé sur un côté', 'hexagone noir posé sur un côté']);
  this.executeCharTest('⬤', ['grand cercle noir', 'grand cercle noir', 'grand cercle noir']);
  this.executeCharTest('⬥', ['losange moyen noir', 'losange moyen noir', 'losange moyen noir']);
  this.executeCharTest('⬦', ['losange moyen blanc', 'losange moyen blanc', 'losange moyen blanc']);
  this.executeCharTest('⬧', ['rhombe moyen noir', 'rhombe moyen noir', 'rhombe moyen noir']);
  this.executeCharTest('⬨', ['rhombe moyen blanc', 'rhombe moyen blanc', 'rhombe moyen blanc']);
  this.executeCharTest('⬩', ['petit losange noir', 'petit losange noir', 'petit losange noir']);
  this.executeCharTest('⬪', ['petit rhombe noir', 'petit rhombe noir', 'petit rhombe noir']);
  this.executeCharTest('⬫', ['petit rhombe blanc', 'petit rhombe blanc', 'petit rhombe blanc']);
  this.executeCharTest('⬬', ['ellipse horizontale noire', 'ellipse horizontale noire', 'ellipse horizontale noire']);
  this.executeCharTest('⬭', ['ellipse horizontale blanche', 'ellipse horizontale blanche', 'ellipse horizontale blanche']);
  this.executeCharTest('⬮', ['ellipse verticale noire', 'ellipse verticale noire', 'ellipse verticale noire']);
  this.executeCharTest('⬯', ['ellipse verticale blanche', 'ellipse verticale blanche', 'ellipse verticale blanche']);
  this.executeCharTest('⭐', ['étoile blanche moyenne', 'étoile blanche moyenne', 'étoile blanche moyenne']);
  this.executeCharTest('⭑', ['petite étoile noire', 'petite étoile noire', 'petite étoile noire']);
  this.executeCharTest('⭒', ['petite étoile blanche', 'petite étoile blanche', 'petite étoile blanche']);
  this.executeCharTest('⭓', ['pentagone noir pointant vers la droite', 'pentagone noir pointant vers la droite', 'pentagone noir pointant vers la droite']);
  this.executeCharTest('⭔', ['pentagone blanc pointant vers la droite', 'pentagone blanc pointant vers la droite', 'pentagone blanc pointant vers la droite']);
  this.executeCharTest('⭕', ['grand cercle gras', 'grand cercle gras', 'grand cercle gras']);
  this.executeCharTest('⭖', ['ovale gras avec ovale inscrit', 'ovale gras avec ovale inscrit', 'ovale gras avec ovale inscrit']);
  this.executeCharTest('⭗', ['cercle gras avec cercle inscrit', 'cercle gras avec cercle inscrit', 'cercle gras avec cercle inscrit']);
  this.executeCharTest('⭘', ['cercle gras', 'cercle gras', 'cercle gras']);
  this.executeCharTest('⭙', ['sautoir cerclé gras', 'sautoir cerclé gras', 'sautoir cerclé gras']);
  this.executeCharTest('↼', ['harpon gauche avec dent dressée', 'harpon gauche avec dent dressée', 'harpon gauche avec dent dressée']);
  this.executeCharTest('↽', ['harpon gauche avec dent baissée', 'harpon gauche avec dent baissée', 'harpon gauche avec dent baissée']);
  this.executeCharTest('↾', ['harpon vers le haut avec dent droite', 'harpon vers le haut avec dent droite', 'harpon vers le haut avec dent droite']);
  this.executeCharTest('↿', ['harpon vers le haut avec dent gauche', 'harpon vers le haut avec dent gauche', 'harpon vers le haut avec dent gauche']);
  this.executeCharTest('⇀', ['harpon droit avec dent dressée', 'harpon droit avec dent dressée', 'harpon droit avec dent dressée']);
  this.executeCharTest('⇁', ['harpon droit avec dent baissée', 'harpon droit avec dent baissée', 'harpon droit avec dent baissée']);
  this.executeCharTest('⇂', ['harpon vers le bas avec dent droite', 'harpon vers le bas avec dent droite', 'harpon vers le bas avec dent droite']);
  this.executeCharTest('⇃', ['harpon vers le bas avec dent gauche', 'harpon vers le bas avec dent gauche', 'harpon vers le bas avec dent gauche']);
  this.executeCharTest('⇋', ['harpon gauche par dessus harpon droit', 'harpon gauche par dessus harpon droit', 'harpon gauche par dessus harpon droit']);
  this.executeCharTest('⇌', ['harpon droit par dessus harpon gauche', 'harpon droit par dessus harpon gauche', 'harpon droit par dessus harpon gauche']);
  this.executeCharTest('⥊', ['javelot à dents gauche dressée et droite baissée', 'javelot à dents gauche dressée et droite baissée', 'javelot à dents gauche dressée et droite baissée']);
  this.executeCharTest('⥋', ['javelot à dents gauche baissée et droite dressée', 'javelot à dents gauche baissée et droite dressée', 'javelot à dents gauche baissée et droite dressée']);
  this.executeCharTest('⥌', ['crampon à dents supérieure droite et inférieure gauche', 'crampon à dents supérieure droite et inférieure gauche', 'crampon à dents supérieure droite et inférieure gauche']);
  this.executeCharTest('⥍', ['crampon à dents supérieure gauche et inférieure droite', 'crampon à dents supérieure gauche et inférieure droite', 'crampon à dents supérieure gauche et inférieure droite']);
  this.executeCharTest('⥎', ['javelot à dents droite et gauche dressées', 'javelot à dents droite et gauche dressées', 'javelot à dents droite et gauche dressées']);
  this.executeCharTest('⥏', ['javelot à dents supérieure et inférieure droites', 'javelot à dents supérieure et inférieure droites', 'javelot à dents supérieure et inférieure droites']);
  this.executeCharTest('⥐', ['javelot à dents droite et gauche baissées', 'javelot à dents droite et gauche baissées', 'javelot à dents droite et gauche baissées']);
  this.executeCharTest('⥑', ['javelot à dents supérieure et inférieure gauches', 'javelot à dents supérieure et inférieure gauches', 'javelot à dents supérieure et inférieure gauches']);
  this.executeCharTest('⥒', ['harpon gauche à dent dressée contre taquet', 'harpon gauche à dent dressée contre taquet', 'harpon gauche à dent dressée contre taquet']);
  this.executeCharTest('⥓', ['harpon droit à dent dressée contre taquet', 'harpon droit à dent dressée contre taquet', 'harpon droit à dent dressée contre taquet']);
  this.executeCharTest('⥔', ['harpon vers le haut à dent droite contre taquet', 'harpon vers le haut à dent droite contre taquet', 'harpon vers le haut à dent droite contre taquet']);
  this.executeCharTest('⥕', ['harpon vers le bas à dent droite contre taquet', 'harpon vers le bas à dent droite contre taquet', 'harpon vers le bas à dent droite contre taquet']);
  this.executeCharTest('⥖', ['harpon gauche à dent baissée contre taquet', 'harpon gauche à dent baissée contre taquet', 'harpon gauche à dent baissée contre taquet']);
  this.executeCharTest('⥗', ['harpon droit à dent baissée contre taquet', 'harpon droit à dent baissée contre taquet', 'harpon droit à dent baissée contre taquet']);
  this.executeCharTest('⥘', ['harpon vers le haut à dent gauche contre taquet', 'harpon vers le haut à dent gauche contre taquet', 'harpon vers le haut à dent gauche contre taquet']);
  this.executeCharTest('⥙', ['harpon vers le bas à dent gauche contre taquet', 'harpon vers le bas à dent gauche contre taquet', 'harpon vers le bas à dent gauche contre taquet']);
  this.executeCharTest('⥚', ['harpon gauche à dent dressée depuis taquet', 'harpon gauche à dent dressée depuis taquet', 'harpon gauche à dent dressée depuis taquet']);
  this.executeCharTest('⥛', ['harpon droit à dent dressée depuis taquet', 'harpon droit à dent dressée depuis taquet', 'harpon droit à dent dressée depuis taquet']);
  this.executeCharTest('⥜', ['harpon vers le haut à dent droite depuis taquet', 'harpon vers le haut à dent droite depuis taquet', 'harpon vers le haut à dent droite depuis taquet']);
  this.executeCharTest('⥝', ['harpon vers le bas à dent droite depuis taquet', 'harpon vers le bas à dent droite depuis taquet', 'harpon vers le bas à dent droite depuis taquet']);
  this.executeCharTest('⥞', ['harpon gauche à dent baissée depuis taquet', 'harpon gauche à dent baissée depuis taquet', 'harpon gauche à dent baissée depuis taquet']);
  this.executeCharTest('⥟', ['harpon droit à dent baissée depuis taquet', 'harpon droit à dent baissée depuis taquet', 'harpon droit à dent baissée depuis taquet']);
  this.executeCharTest('⥠', ['harpon vers le haut à dent gauche depuis taquet', 'harpon vers le haut à dent gauche depuis taquet', 'harpon vers le haut à dent gauche depuis taquet']);
  this.executeCharTest('⥡', ['harpon vers le bas à dent gauche depuis taquet', 'harpon vers le bas à dent gauche depuis taquet', 'harpon vers le bas à dent gauche depuis taquet']);
  this.executeCharTest('⥢', ['harpon gauche à dent dressée sur harpon gauche à dent baissée', 'harpon gauche à dent dressée sur harpon gauche à dent baissée', 'harpon gauche à dent dressée sur harpon gauche à dent baissée']);
  this.executeCharTest('⥣', ['harpon vers le haut à dent gauche à côté de harpon vers le haut à dent droite', 'harpon vers le haut à dent gauche à côté de harpon vers le haut à dent droite', 'harpon vers le haut à dent gauche à côté de harpon vers le haut à dent droite']);
  this.executeCharTest('⥤', ['harpon droit à dent dressée par dessus harpon droit à dent baissée', 'harpon droit à dent dressée par dessus harpon droit à dent baissée', 'harpon droit à dent dressée par dessus harpon droit à dent baissée']);
  this.executeCharTest('⥥', ['harpon vers le bas à dent gauche à côté de harpon vers le bas à dent droite', 'harpon vers le bas à dent gauche à côté de harpon vers le bas à dent droite', 'harpon vers le bas à dent gauche à côté de harpon vers le bas à dent droite']);
  this.executeCharTest('⥦', ['harpon à dent gauche dressée par dessus harpon à dent droite dressée', 'harpon à dent gauche dressée par dessus harpon à dent droite dressée', 'harpon à dent gauche dressée par dessus harpon à dent droite dressée']);
  this.executeCharTest('⥧', ['harpon à dent gauche baissée par dessus harpon à dent droite baissée', 'harpon à dent gauche baissée par dessus harpon à dent droite baissée', 'harpon à dent gauche baissée par dessus harpon à dent droite baissée']);
  this.executeCharTest('⥨', ['harpon à dent droite dressée par dessus harpon à dent gauche dressée', 'harpon à dent droite dressée par dessus harpon à dent gauche dressée', 'harpon à dent droite dressée par dessus harpon à dent gauche dressée']);
  this.executeCharTest('⥩', ['harpon à dent droite baissée par dessus harpon à dent gauche baissée', 'harpon à dent droite baissée par dessus harpon à dent gauche baissée', 'harpon à dent droite baissée par dessus harpon à dent gauche baissée']);
  this.executeCharTest('⥪', ['harpon à dent gauche dressée par dessus long trait', 'harpon à dent gauche dressée par dessus long trait', 'harpon à dent gauche dressée par dessus long trait']);
  this.executeCharTest('⥫', ['long trait par dessus harpon à dent gauche baissée', 'long trait par dessus harpon à dent gauche baissée', 'long trait par dessus harpon à dent gauche baissée']);
  this.executeCharTest('⥬', ['harpon à dent droite dressée par dessus long trait', 'harpon à dent droite dressée par dessus long trait', 'harpon à dent droite dressée par dessus long trait']);
  this.executeCharTest('⥭', ['long trait par dessus harpon à dent droite baissée', 'long trait par dessus harpon à dent droite baissée', 'long trait par dessus harpon à dent droite baissée']);
  this.executeCharTest('⥮', ['harpon vers le haut à dent gauche à côté de harpon vers le bas à dent droite', 'harpon vers le haut à dent gauche à côté de harpon vers le bas à dent droite', 'harpon vers le haut à dent gauche à côté de harpon vers le bas à dent droite']);
  this.executeCharTest('⥯', ['harpon vers le bas à dent gauche à côté de harpon vers le haut à dent droite', 'harpon vers le bas à dent gauche à côté de harpon vers le haut à dent droite', 'harpon vers le bas à dent gauche à côté de harpon vers le haut à dent droite']);
  this.executeCharTest('⥼', ['ancre gauche', 'ancre gauche', 'ancre gauche']);
  this.executeCharTest('⥽', ['ancre droite', 'ancre droite', 'ancre droite']);
  this.executeCharTest('⥾', ['ancre vers le haut', 'ancre vers le haut', 'ancre vers le haut']);
  this.executeCharTest('⥿', ['ancre vers le bas', 'ancre vers le bas', 'ancre vers le bas']);
  this.executeCharTest('ℏ', ['constante de planck sur deux pi', 'constante de planck sur deux pi', 'constante de planck sur deux pi']);
  this.executeCharTest('℔', ['symbole l b barré', 'symbole l b barré', 'symbole l b barré']);
  this.executeCharTest('№', ['symbole numéro', 'symbole numéro', 'symbole numéro']);
  this.executeCharTest('℗', ['copyright de programme sonore', 'copyright de programme sonore', 'copyright de programme sonore']);
  this.executeCharTest('℞', ['ordonnances', 'ordonnances', 'ordonnances']);
  this.executeCharTest('℟', ['répons', 'répons', 'répons']);
  this.executeCharTest('℠', ['symbole anglais marque de service', 'symbole anglais marque de service', 'symbole anglais marque de service']);
  this.executeCharTest('℡', ['signe de téléphone', 'signe de téléphone', 'signe de téléphone']);
  this.executeCharTest('™', ['symbole anglais marque de commerce', 'symbole anglais marque de commerce', 'symbole anglais marque de commerce']);
  this.executeCharTest('℣', ['versicule', 'versicule', 'versicule']);
  this.executeCharTest('℥', ['symbole once', 'symbole once', 'symbole once']);
  this.executeCharTest('Ω', ['ohm', 'ohm', 'ohm']);
  this.executeCharTest('℧', ['ohm culbuté', 'ohm culbuté', 'ohm culbuté']);
  this.executeCharTest('K', ['degré kelvin', 'degré kelvin', 'degré kelvin']);
  this.executeCharTest('Å', ['angstroms', 'angstroms', 'angstroms']);
  this.executeCharTest('℮', ['symbole estimé', 'symbole estimé', 'symbole estimé']);
  this.executeCharTest('Ⅎ', ['f culbuté majuscule', 'f culbuté majuscule', 'f culbuté majuscule']);
  this.executeCharTest('ℹ', ['bureau d\'information', 'bureau d\'information', 'bureau d\'information']);
  this.executeCharTest('℺', ['Q majuscule couché', 'Q majuscule couché', 'Q majuscule couché']);
  this.executeCharTest('℻', ['symbole télécopie', 'symbole télécopie', 'symbole télécopie']);
  this.executeCharTest('⅁', ['G culbuté majuscule sans empattement', 'G culbuté majuscule sans empattement', 'G culbuté majuscule sans empattement']);
  this.executeCharTest('⅂', ['L culbuté majuscule sans empattement', 'L culbuté majuscule sans empattement', 'L culbuté majuscule sans empattement']);
  this.executeCharTest('⅃', ['L réfléchi majuscule sans empattement', 'L réfléchi majuscule sans empattement', 'L réfléchi majuscule sans empattement']);
  this.executeCharTest('⅄', ['Y culbuté majuscule sans empattement', 'Y culbuté majuscule sans empattement', 'Y culbuté majuscule sans empattement']);
  this.executeCharTest('!', ['factorielle', 'factorielle', 'factorielle']);
  this.executeCharTest('"', ['petit guillemet', 'petit guillemet', 'petit guillemet']);
  this.executeCharTest('#', ['dièse', 'dièse', 'dièse']);
  this.executeCharTest('$', ['dollars', 'dollars', 'dollars']);
  this.executeCharTest('%', ['pourcent', 'pourcent', 'pourcent']);
  this.executeCharTest('&', ['esperluette', 'esperluette', 'esperluette']);
  this.executeCharTest('\'', ['prime', 'prime', 'prime']);
  this.executeCharTest('*', ['astérisque', 'astérisque', 'astérisque']);
  this.executeCharTest('+', ['plus', 'plus', 'plus']);
  this.executeCharTest(',', ['virgule', 'virgule', 'virgule']);
  this.executeCharTest('-', ['moins', 'moins', 'moins']);
  this.executeCharTest('.', ['point', 'point', 'point']);
  this.executeCharTest('/', ['barre oblique', 'barre oblique', 'barre oblique']);
  this.executeCharTest(':', ['deux points', 'deux points', 'deux points']);
  this.executeCharTest(';', ['point virgule', 'point virgule', 'point virgule']);
  this.executeCharTest('<', ['inférieur à', 'inférieur à', 'inférieur à']);
  this.executeCharTest('=', ['égale', 'égale', 'égale']);
  this.executeCharTest('>', ['supérieur à', 'supérieur à', 'supérieur à']);
  this.executeCharTest('?', ['point d\'interrogation', 'point d\'interrogation', 'point d\'interrogation']);
  this.executeCharTest('@', ['arobase', 'arobase', 'arobase']);
  this.executeCharTest('\\', ['barre oblique inversée', 'barre oblique inversée', 'barre oblique inversée']);
  this.executeCharTest('^', ['circonflexe', 'circonflexe', 'circonflexe']);
  this.executeCharTest('_', ['tiret bas', 'tiret bas', 'tiret bas']);
  this.executeCharTest('`', ['accent grave', 'accent grave', 'accent grave']);
  this.executeCharTest('|', ['barre verticale', 'barre verticale', 'barre verticale']);
  this.executeCharTest('~', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('¡', ['point d\'exclamation renversé', 'point d\'exclamation renversé', 'point d\'exclamation renversé']);
  this.executeCharTest('¢', ['centimes', 'centimes', 'centimes']);
  this.executeCharTest('£', ['livres', 'livres', 'livres']);
  this.executeCharTest('¤', ['symbole monétaire', 'symbole monétaire', 'symbole monétaire']);
  this.executeCharTest('¥', ['yen', 'yen', 'yen']);
  this.executeCharTest('¦', ['barre déjointe', 'barre déjointe', 'barre déjointe']);
  this.executeCharTest('§', ['paragraphe', 'paragraphe', 'paragraphe']);
  this.executeCharTest('¨', ['tréma', 'tréma', 'tréma']);
  this.executeCharTest('©', ['copyright', 'copyright', 'copyright']);
  this.executeCharTest('ª', ['indicateur ordinal féminin', 'indicateur ordinal féminin', 'indicateur ordinal féminin']);
  this.executeCharTest('«', ['guillemet chevron pointant gauche', 'guillemet chevron pointant gauche', 'guillemet chevron pointant gauche']);
  this.executeCharTest('¬', ['négation', 'négation', 'négation']);
  this.executeCharTest('®', ['symbole marque déposée', 'symbole marque déposée', 'symbole marque déposée']);
  this.executeCharTest('¯', ['macron', 'macron', 'macron']);
  this.executeCharTest('°', ['degrés', 'degrés', 'degrés']);
  this.executeCharTest('±', ['plus ou moins', 'plus ou moins', 'plus ou moins']);
  this.executeCharTest('´', ['accent aigu', 'accent aigu', 'accent aigu']);
  this.executeCharTest('µ', ['symbole micro', 'symbole micro', 'symbole micro']);
  this.executeCharTest('¶', ['fin de paragraphe', 'fin de paragraphe', 'fin de paragraphe']);
  this.executeCharTest('·', ['point médian', 'point médian', 'point médian']);
  this.executeCharTest('¸', ['cédille', 'cédille', 'cédille']);
  this.executeCharTest('º', ['indicateur ordinal masculin', 'indicateur ordinal masculin', 'indicateur ordinal masculin']);
  this.executeCharTest('»', ['guillemet chevron pointant droite', 'guillemet chevron pointant droite', 'guillemet chevron pointant droite']);
  this.executeCharTest('¿', ['point d\'interrogation renversé', 'point d\'interrogation renversé', 'point d\'interrogation renversé']);
  this.executeCharTest('×', ['multiplié par', 'multiplié par', 'multiplié par']);
  this.executeCharTest('÷', ['divisé par', 'divisé par', 'divisé par']);
  this.executeCharTest('˘', ['brève', 'brève', 'brève']);
  this.executeCharTest('˙', ['point en chef', 'point en chef', 'point en chef']);
  this.executeCharTest('˚', ['rond en chef', 'rond en chef', 'rond en chef']);
  this.executeCharTest('˛', ['ogonek', 'ogonek', 'ogonek']);
  this.executeCharTest('˜', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('˝', ['double accent aigu', 'double accent aigu', 'double accent aigu']);
  this.executeCharTest('‐', ['trait d\'union', 'trait d\'union', 'trait d\'union']);
  this.executeCharTest('‑', ['trait d\'union insécable', 'trait d\'union insécable', 'trait d\'union insécable']);
  this.executeCharTest('‒', ['tiret numérique', 'tiret numérique', 'tiret numérique']);
  this.executeCharTest('–', ['trait d\'union insécable', 'trait d\'union insécable', 'trait d\'union insécable']);
  this.executeCharTest('—', ['tiret numérique', 'tiret numérique', 'tiret numérique']);
  this.executeCharTest('―', ['barre horizontalle', 'barre horizontalle', 'barre horizontalle']);
  this.executeCharTest('‖', ['double ligne verticale', 'double ligne verticale', 'double ligne verticale']);
  this.executeCharTest('‗', ['double trait souscrit', 'double trait souscrit', 'double trait souscrit']);
  this.executeCharTest('‘', ['guillemet apostrophe culbuté', 'guillemet apostrophe culbuté', 'guillemet apostrophe culbuté']);
  this.executeCharTest('’', ['guillemet apostrophe', 'guillemet apostrophe', 'guillemet apostrophe']);
  this.executeCharTest('‚', ['guillemet virgule inférieur', 'guillemet virgule inférieur', 'guillemet virgule inférieur']);
  this.executeCharTest('‛', ['guillemet virgule supérieur culbuté', 'guillemet virgule supérieur culbuté', 'guillemet virgule supérieur culbuté']);
  this.executeCharTest('“', ['guillemet apostrophe double culbuté', 'guillemet apostrophe double culbuté', 'guillemet apostrophe double culbuté']);
  this.executeCharTest('”', ['guillemet apostrophe double', 'guillemet apostrophe double', 'guillemet apostrophe double']);
  this.executeCharTest('„', ['guillemet double prime', 'guillemet double prime', 'guillemet double prime']);
  this.executeCharTest('‟', ['guillemet virgule double supérieur culbuté', 'guillemet virgule double supérieur culbuté', 'guillemet virgule double supérieur culbuté']);
  this.executeCharTest('†', ['obèle', 'obèle', 'obèle']);
  this.executeCharTest('‡', ['double obèle', 'double obèle', 'double obèle']);
  this.executeCharTest('•', ['puce', 'puce', 'puce']);
  this.executeCharTest('‣', ['puce triangulaire', 'puce triangulaire', 'puce triangulaire']);
  this.executeCharTest('․', ['point de conduite simple', 'point de conduite simple', 'point de conduite simple']);
  this.executeCharTest('‥', ['point de conduite double', 'point de conduite double', 'point de conduite double']);
  this.executeCharTest('…', ['points de suspension', 'points de suspension', 'points de suspension']);
  this.executeCharTest('‧', ['point de coupure de mot', 'point de coupure de mot', 'point de coupure de mot']);
  this.executeCharTest('‰', ['symbole pour mille', 'symbole pour mille', 'symbole pour mille']);
  this.executeCharTest('‱', ['symbole pour dix mille', 'symbole pour dix mille', 'symbole pour dix mille']);
  this.executeCharTest('′', ['prime', 'prime', 'prime']);
  this.executeCharTest('″', ['double prime', 'double prime', 'double prime']);
  this.executeCharTest('‴', ['triple prime', 'triple prime', 'triple prime']);
  this.executeCharTest('‵', ['prime réfléchi', 'prime réfléchi', 'prime réfléchi']);
  this.executeCharTest('‶', ['double prime réfléchi', 'double prime réfléchi', 'double prime réfléchi']);
  this.executeCharTest('‷', ['triple prime réfléchi', 'triple prime réfléchi', 'triple prime réfléchi']);
  this.executeCharTest('‸', ['chevron d\'insertion', 'chevron d\'insertion', 'chevron d\'insertion']);
  this.executeCharTest('‹', ['guillemet simple gauche', 'guillemet simple gauche', 'guillemet simple gauche']);
  this.executeCharTest('›', ['guillemet simple droite', 'guillemet simple droite', 'guillemet simple droite']);
  this.executeCharTest('※', ['marque de référence', 'marque de référence', 'marque de référence']);
  this.executeCharTest('‼', ['double point d\'exclamation', 'double point d\'exclamation', 'double point d\'exclamation']);
  this.executeCharTest('‽', ['point exclarrogatif', 'point exclarrogatif', 'point exclarrogatif']);
  this.executeCharTest('‾', ['tiret en chef', 'tiret en chef', 'tiret en chef']);
  this.executeCharTest('‿', ['tirant souscrit', 'tirant souscrit', 'tirant souscrit']);
  this.executeCharTest('⁀', ['tirant en chef', 'tirant en chef', 'tirant en chef']);
  this.executeCharTest('⁁', ['lambda d\'insertion', 'lambda d\'insertion', 'lambda d\'insertion']);
  this.executeCharTest('⁂', ['astérisme', 'astérisme', 'astérisme']);
  this.executeCharTest('⁃', ['puce trait d\'union', 'puce trait d\'union', 'puce trait d\'union']);
  this.executeCharTest('⁄', ['barre de fraction', 'barre de fraction', 'barre de fraction']);
  this.executeCharTest('⁇', ['double point d\'interrogation', 'double point d\'interrogation', 'double point d\'interrogation']);
  this.executeCharTest('⁈', ['point d\'interrogation exclamation', 'point d\'interrogation exclamation', 'point d\'interrogation exclamation']);
  this.executeCharTest('⁉', ['point d\'exclamation interrogation', 'point d\'exclamation interrogation', 'point d\'exclamation interrogation']);
  this.executeCharTest('⁋', ['pied de mouche réfléchi', 'pied de mouche réfléchi', 'pied de mouche réfléchi']);
  this.executeCharTest('⁌', ['puce noire tronquée à droite', 'puce noire tronquée à droite', 'puce noire tronquée à droite']);
  this.executeCharTest('⁍', ['puce noire tronquée à gauche', 'puce noire tronquée à gauche', 'puce noire tronquée à gauche']);
  this.executeCharTest('⁎', ['astérisque baissé', 'astérisque baissé', 'astérisque baissé']);
  this.executeCharTest('⁏', ['point virgule réfléchi', 'point virgule réfléchi', 'point virgule réfléchi']);
  this.executeCharTest('⁐', ['resserrer', 'resserrer', 'resserrer']);
  this.executeCharTest('⁑', ['deux astérisques alignés verticalement', 'deux astérisques alignés verticalement', 'deux astérisques alignés verticalement']);
  this.executeCharTest('⁒', ['moins commercial', 'moins commercial', 'moins commercial']);
  this.executeCharTest('⁓', ['tiret ondé', 'tiret ondé', 'tiret ondé']);
  this.executeCharTest('⁔', ['dos d\'âne souscrit', 'dos d\'âne souscrit', 'dos d\'âne souscrit']);
  this.executeCharTest('⁕', ['point fleur', 'point fleur', 'point fleur']);
  this.executeCharTest('⁖', ['trois points', 'trois points', 'trois points']);
  this.executeCharTest('⁗', ['quadruple prime', 'quadruple prime', 'quadruple prime']);
  this.executeCharTest('⁘', ['quatre points en losange', 'quatre points en losange', 'quatre points en losange']);
  this.executeCharTest('⁙', ['cinq points en quinconce', 'cinq points en quinconce', 'cinq points en quinconce']);
  this.executeCharTest('⁚', ['deux points en capitale', 'deux points en capitale', 'deux points en capitale']);
  this.executeCharTest('⁛', ['quatre points en croix', 'quatre points en croix', 'quatre points en croix']);
  this.executeCharTest('⁜', ['croix pointée', 'croix pointée', 'croix pointée']);
  this.executeCharTest('⁝', ['trois points vertical', 'trois points vertical', 'trois points vertical']);
  this.executeCharTest('⁞', ['quatre points vertical', 'quatre points vertical', 'quatre points vertical']);
  this.executeCharTest('⁺', ['exposant signe plus', 'exposant signe plus', 'exposant signe plus']);
  this.executeCharTest('⁻', ['exposant signe moins', 'exposant signe moins', 'exposant signe moins']);
  this.executeCharTest('⁼', ['exposant signe égal', 'exposant signe égal', 'exposant signe égal']);
  this.executeCharTest('⁽', ['exposant parenthèse gauche', 'exposant parenthèse gauche', 'exposant parenthèse gauche']);
  this.executeCharTest('⁾', ['exposant parenthèse droite', 'exposant parenthèse droite', 'exposant parenthèse droite']);
  this.executeCharTest('₊', ['indice signe plus', 'indice signe plus', 'indice signe plus']);
  this.executeCharTest('₋', ['indice signe moins', 'indice signe moins', 'indice signe moins']);
  this.executeCharTest('₌', ['indice signe égal', 'indice signe égal', 'indice signe égal']);
  this.executeCharTest('₍', ['indice parenthèse gauche', 'indice parenthèse gauche', 'indice parenthèse gauche']);
  this.executeCharTest('₎', ['indice parenthèse droite', 'indice parenthèse droite', 'indice parenthèse droite']);
  this.executeCharTest('⅊', ['limite de propriété', 'limite de propriété', 'limite de propriété']);
  this.executeCharTest('⅋', ['perluète culbutée', 'perluète culbutée', 'perluète culbutée']);
  this.executeCharTest('⅌', ['symbole per', 'symbole per', 'symbole per']);
  this.executeCharTest('⅍', ['aktieselskab', 'aktieselskab', 'aktieselskab']);
  this.executeCharTest('ⅎ', ['minuscule f culbuté', 'minuscule f culbuté', 'minuscule f culbuté']);
  this.executeCharTest('∀', ['pour tous', 'pour tous', 'pour tous']);
  this.executeCharTest('∁', ['complément', 'complément', 'complément']);
  this.executeCharTest('∃', ['il existe', 'il existe', 'il existe']);
  this.executeCharTest('∄', ['il n\'existe pas', 'il n\'existe pas', 'il n\'existe pas']);
  this.executeCharTest('∅', ['ensemble vide', 'ensemble vide', 'ensemble vide']);
  this.executeCharTest('∆', ['incrément', 'incrément', 'incrément']);
  this.executeCharTest('∈', ['appartient à', 'appartient à', 'appartient à']);
  this.executeCharTest('∉', ['n\'appartient pas à', 'n\'appartient pas à', 'n\'appartient pas à']);
  this.executeCharTest('∊', ['appartient à', 'appartient à', 'appartient à']);
  this.executeCharTest('∋', ['contient comme élément', 'contient comme élément', 'contient comme élément']);
  this.executeCharTest('∌', ['ne contient pas comme élément', 'ne contient pas comme élément', 'ne contient pas comme élément']);
  this.executeCharTest('∍', ['contient comme élément', 'contient comme élément', 'contient comme élément']);
  this.executeCharTest('∎', ['ce qu\'il fallait démontrer', 'ce qu\'il fallait démontrer', 'ce qu\'il fallait démontrer']);
  this.executeCharTest('∏', ['produit', 'produit', 'produit']);
  this.executeCharTest('∐', ['coproduit', 'coproduit', 'coproduit']);
  this.executeCharTest('∑', ['sommation', 'sommation', 'sommation']);
  this.executeCharTest('−', ['moins', 'moins', 'moins']);
  this.executeCharTest('∓', ['moins ou plus', 'moins ou plus', 'moins ou plus']);
  this.executeCharTest('∔', ['plus pointé', 'plus pointé', 'plus pointé']);
  this.executeCharTest('∕', ['division', 'division', 'division']);
  this.executeCharTest('∖', ['différence d\'ensembles', 'différence d\'ensembles', 'différence d\'ensembles']);
  this.executeCharTest('∗', ['opérateur astérisque', 'opérateur astérisque', 'opérateur astérisque']);
  this.executeCharTest('∘', ['opérateur rond', 'opérateur rond', 'opérateur rond']);
  this.executeCharTest('∙', ['point médian', 'point médian', 'point médian']);
  this.executeCharTest('√', ['racine carrée', 'racine carrée', 'racine carrée']);
  this.executeCharTest('∛', ['racine cubique', 'racine cubique', 'racine cubique']);
  this.executeCharTest('∜', ['racine quatrième', 'racine quatrième', 'racine quatrième']);
  this.executeCharTest('∝', ['proportionnel à', 'proportionnel à', 'proportionnel à']);
  this.executeCharTest('∞', ['infini', 'infini', 'infini']);
  this.executeCharTest('∟', ['angle droit', 'angle droit', 'angle droit']);
  this.executeCharTest('∠', ['angle', 'angle', 'angle']);
  this.executeCharTest('∡', ['angle mesuré', 'angle mesuré', 'angle mesuré']);
  this.executeCharTest('∢', ['angle sphérique', 'angle sphérique', 'angle sphérique']);
  this.executeCharTest('∣', ['est un diviseur de', 'est un diviseur de', 'est un diviseur de']);
  this.executeCharTest('∤', ['n\'est pas un diviseur de', 'n\'est pas un diviseur de', 'n\'est pas un diviseur de']);
  this.executeCharTest('∥', ['parallèle à', 'parallèle à', 'parallèle à']);
  this.executeCharTest('∦', ['non parallèle à', 'non parallèle à', 'non parallèle à']);
  this.executeCharTest('∧', ['et logique', 'et logique', 'et logique']);
  this.executeCharTest('∨', ['ou logique', 'ou logique', 'ou logique']);
  this.executeCharTest('∩', ['intersection', 'intersection', 'intersection']);
  this.executeCharTest('∪', ['union', 'union', 'union']);
  this.executeCharTest('∫', ['intégrale', 'intégrale', 'intégrale']);
  this.executeCharTest('∬', ['intégrale double', 'intégrale double', 'intégrale double']);
  this.executeCharTest('∭', ['intégrale triple', 'intégrale triple', 'intégrale triple']);
  this.executeCharTest('∮', ['intégrale de contour', 'intégrale de contour', 'intégrale de contour']);
  this.executeCharTest('∯', ['intégrale de surface', 'intégrale de surface', 'intégrale de surface']);
  this.executeCharTest('∰', ['intégrale de volume', 'intégrale de volume', 'intégrale de volume']);
  this.executeCharTest('∱', ['intégrale en sens négatif', 'intégrale en sens négatif', 'intégrale en sens négatif']);
  this.executeCharTest('∲', ['intégrale de contour en sens négatif', 'intégrale de contour en sens négatif', 'intégrale de contour en sens négatif']);
  this.executeCharTest('∳', ['intégrale de contour en sens positif', 'intégrale de contour en sens positif', 'intégrale de contour en sens positif']);
  this.executeCharTest('∴', ['par conséquent', 'par conséquent', 'par conséquent']);
  this.executeCharTest('∵', ['parce que', 'parce que', 'parce que']);
  this.executeCharTest('∶', ['rapport', 'rapport', 'rapport']);
  this.executeCharTest('∷', ['proportion', 'proportion', 'proportion']);
  this.executeCharTest('∸', ['moins pointé', 'moins pointé', 'moins pointé']);
  this.executeCharTest('∹', ['excès', 'excès', 'excès']);
  this.executeCharTest('∺', ['proportion géométrique', 'proportion géométrique', 'proportion géométrique']);
  this.executeCharTest('∻', ['homothétique', 'homothétique', 'homothétique']);
  this.executeCharTest('∼', ['opérateur tilde', 'opérateur tilde', 'opérateur tilde']);
  this.executeCharTest('∽', ['opérateur tilde renversé', 'opérateur tilde renversé', 'opérateur tilde renversé']);
  this.executeCharTest('∾', ['s couché renversé', 's couché renversé', 's couché renversé']);
  this.executeCharTest('∿', ['sinusoïde', 'sinusoïde', 'sinusoïde']);
  this.executeCharTest('≀', ['produit couronne', 'produit couronne', 'produit couronne']);
  this.executeCharTest('≁', ['non tilde', 'non tilde', 'non tilde']);
  this.executeCharTest('≂', ['moins tilde', 'moins tilde', 'moins tilde']);
  this.executeCharTest('≃', ['asymptotiquement égal à', 'asymptotiquement égal à', 'asymptotiquement égal à']);
  this.executeCharTest('≄', ['non asymptotiquement égal à', 'non asymptotiquement égal à', 'non asymptotiquement égal à']);
  this.executeCharTest('≅', ['approximativement égal à', 'approximativement égal à', 'approximativement égal à']);
  this.executeCharTest('≆', ['approximativement mais non strictement égal à', 'approximativement mais non strictement égal à', 'approximativement mais non strictement égal à']);
  this.executeCharTest('≇', ['ni approximativement ni strictement égal à', 'ni approximativement ni strictement égal à', 'ni approximativement ni strictement égal à']);
  this.executeCharTest('≈', ['presque égal à', 'presque égal à', 'presque égal à']);
  this.executeCharTest('≉', ['non presque égal à', 'non presque égal à', 'non presque égal à']);
  this.executeCharTest('≊', ['presque égal ou égal à', 'presque égal ou égal à', 'presque égal ou égal à']);
  this.executeCharTest('≋', ['triple tilde', 'triple tilde', 'triple tilde']);
  this.executeCharTest('≌', ['entièrement égal à', 'entièrement égal à', 'entièrement égal à']);
  this.executeCharTest('≍', ['équivalent à', 'équivalent à', 'équivalent à']);
  this.executeCharTest('≎', ['géométriquement équivalent à', 'géométriquement équivalent à', 'géométriquement équivalent à']);
  this.executeCharTest('≏', ['différence entre', 'différence entre', 'différence entre']);
  this.executeCharTest('≐', ['tend vers la limite', 'tend vers la limite', 'tend vers la limite']);
  this.executeCharTest('≑', ['géométriquement égal à', 'géométriquement égal à', 'géométriquement égal à']);
  this.executeCharTest('≒', ['approximativement égal à ou image de', 'approximativement égal à ou image de', 'approximativement égal à ou image de']);
  this.executeCharTest('≓', ['image de ou approximativement égal à', 'image de ou approximativement égal à', 'image de ou approximativement égal à']);
  this.executeCharTest('≔', ['deux points égal', 'deux points égal', 'deux points égal']);
  this.executeCharTest('≕', ['égal deux points', 'égal deux points', 'égal deux points']);
  this.executeCharTest('≖', ['rond dans égal', 'rond dans égal', 'rond dans égal']);
  this.executeCharTest('≗', ['égal avec rond en chef', 'égal avec rond en chef', 'égal avec rond en chef']);
  this.executeCharTest('≘', ['correspond à', 'correspond à', 'correspond à']);
  this.executeCharTest('≙', ['estime', 'estime', 'estime']);
  this.executeCharTest('≚', ['équiangulaire à', 'équiangulaire à', 'équiangulaire à']);
  this.executeCharTest('≛', ['égal avec étoile en chef', 'égal avec étoile en chef', 'égal avec étoile en chef']);
  this.executeCharTest('≜', ['égal delta', 'égal delta', 'égal delta']);
  this.executeCharTest('≝', ['égal par définition à', 'égal par définition à', 'égal par définition à']);
  this.executeCharTest('≞', ['mesuré par', 'mesuré par', 'mesuré par']);
  this.executeCharTest('≟', ['égalité en doute', 'égalité en doute', 'égalité en doute']);
  this.executeCharTest('≠', ['pas égal à', 'pas égal à', 'pas égal à']);
  this.executeCharTest('≡', ['identique à', 'identique à', 'identique à']);
  this.executeCharTest('≢', ['non identique à', 'non identique à', 'non identique à']);
  this.executeCharTest('≣', ['strictement équivalent à', 'strictement équivalent à', 'strictement équivalent à']);
  this.executeCharTest('≤', ['plus petit ou égal à', 'plus petit ou égal à', 'plus petit ou égal à']);
  this.executeCharTest('≥', ['plus grand ou égal à', 'plus grand ou égal à', 'plus grand ou égal à']);
  this.executeCharTest('≦', ['plus petit que par dessus égal à', 'plus petit que par dessus égal à', 'plus petit que par dessus égal à']);
  this.executeCharTest('≧', ['plus grand que par dessus égal à', 'plus grand que par dessus égal à', 'plus grand que par dessus égal à']);
  this.executeCharTest('≨', ['plus petit mais pas égal à', 'plus petit mais pas égal à', 'plus petit mais pas égal à']);
  this.executeCharTest('≩', ['plus grand mais pas égal à', 'plus grand mais pas égal à', 'plus grand mais pas égal à']);
  this.executeCharTest('≪', ['beaucoup plus petit que', 'beaucoup plus petit que', 'beaucoup plus petit que']);
  this.executeCharTest('≫', ['beaucoup plus grand que', 'beaucoup plus grand que', 'beaucoup plus grand que']);
  this.executeCharTest('≬', ['entre', 'entre', 'entre']);
  this.executeCharTest('≭', ['non équivalent à', 'non équivalent à', 'non équivalent à']);
  this.executeCharTest('≮', ['pas plus petit que', 'pas plus petit que', 'pas plus petit que']);
  this.executeCharTest('≯', ['pas plus grand que', 'pas plus grand que', 'pas plus grand que']);
  this.executeCharTest('≰', ['ni plus petit ni égal à', 'ni plus petit ni égal à', 'ni plus petit ni égal à']);
  this.executeCharTest('≱', ['ni plus grand ni égal à', 'ni plus grand ni égal à', 'ni plus grand ni égal à']);
  this.executeCharTest('≲', ['plus petit ou équivalent à', 'plus petit ou équivalent à', 'plus petit ou équivalent à']);
  this.executeCharTest('≳', ['plus grand ou équivalent à', 'plus grand ou équivalent à', 'plus grand ou équivalent à']);
  this.executeCharTest('≴', ['ni plus petit ni équivalent à', 'ni plus petit ni équivalent à', 'ni plus petit ni équivalent à']);
  this.executeCharTest('≵', ['ni plus grand ni équivalent à', 'ni plus grand ni équivalent à', 'ni plus grand ni équivalent à']);
  this.executeCharTest('≶', ['plus petit ou plus grand que', 'plus petit ou plus grand que', 'plus petit ou plus grand que']);
  this.executeCharTest('≷', ['plus grand ou plus petit que', 'plus grand ou plus petit que', 'plus grand ou plus petit que']);
  this.executeCharTest('≸', ['ni plus petit ni plus grand que', 'ni plus petit ni plus grand que', 'ni plus petit ni plus grand que']);
  this.executeCharTest('≹', ['ni plus grand ni plus petit que', 'ni plus grand ni plus petit que', 'ni plus grand ni plus petit que']);
  this.executeCharTest('≺', ['précède', 'précède', 'précède']);
  this.executeCharTest('≻', ['suit', 'suit', 'suit']);
  this.executeCharTest('≼', ['précède ou est égal à', 'précède ou est égal à', 'précède ou est égal à']);
  this.executeCharTest('≽', ['suit ou est égal à', 'suit ou est égal à', 'suit ou est égal à']);
  this.executeCharTest('≾', ['précède ou est équivalent à', 'précède ou est équivalent à', 'précède ou est équivalent à']);
  this.executeCharTest('≿', ['suit ou est équivalent à', 'suit ou est équivalent à', 'suit ou est équivalent à']);
  this.executeCharTest('⊀', ['ne précède pas', 'ne précède pas', 'ne précède pas']);
  this.executeCharTest('⊁', ['ne suit pas', 'ne suit pas', 'ne suit pas']);
  this.executeCharTest('⊂', ['sous ensemble de', 'sous ensemble de', 'sous ensemble de']);
  this.executeCharTest('⊃', ['sur ensemble de', 'sur ensemble de', 'sur ensemble de']);
  this.executeCharTest('⊄', ['pas un sous ensemble de', 'pas un sous ensemble de', 'pas un sous ensemble de']);
  this.executeCharTest('⊅', ['pas un sur ensemble de', 'pas un sur ensemble de', 'pas un sur ensemble de']);
  this.executeCharTest('⊆', ['sous ensemble ou égal à', 'sous ensemble ou égal à', 'sous ensemble ou égal à']);
  this.executeCharTest('⊇', ['sur ensemble ou égal à', 'sur ensemble ou égal à', 'sur ensemble ou égal à']);
  this.executeCharTest('⊈', ['ni un sous ensemble ni égal à', 'ni un sous ensemble ni égal à', 'ni un sous ensemble ni égal à']);
  this.executeCharTest('⊉', ['ni un sur ensemble ni égal à', 'ni un sur ensemble ni égal à', 'ni un sur ensemble ni égal à']);
  this.executeCharTest('⊊', ['sous ensemble mais pas égal à', 'sous ensemble mais pas égal à', 'sous ensemble mais pas égal à']);
  this.executeCharTest('⊋', ['sur ensemble mais pas égal à', 'sur ensemble mais pas égal à', 'sur ensemble mais pas égal à']);
  this.executeCharTest('⊌', ['multiensemble', 'multiensemble', 'multiensemble']);
  this.executeCharTest('⊍', ['multiplication de multiensemble', 'multiplication de multiensemble', 'multiplication de multiensemble']);
  this.executeCharTest('⊎', ['union de multiensemble', 'union de multiensemble', 'union de multiensemble']);
  this.executeCharTest('⊏', ['image carrée de', 'image carrée de', 'image carrée de']);
  this.executeCharTest('⊐', ['original carré de', 'original carré de', 'original carré de']);
  this.executeCharTest('⊑', ['image carrée ou égal à', 'image carrée ou égal à', 'image carrée ou égal à']);
  this.executeCharTest('⊒', ['original carré ou égal à', 'original carré ou égal à', 'original carré ou égal à']);
  this.executeCharTest('⊓', ['chapeau carré', 'chapeau carré', 'chapeau carré']);
  this.executeCharTest('⊔', ['coupe carrée', 'coupe carrée', 'coupe carrée']);
  this.executeCharTest('⊕', ['plus cerclé', 'plus cerclé', 'plus cerclé']);
  this.executeCharTest('⊖', ['moins cerclé', 'moins cerclé', 'moins cerclé']);
  this.executeCharTest('⊗', ['multiplié par cerclé', 'multiplié par cerclé', 'multiplié par cerclé']);
  this.executeCharTest('⊘', ['barre oblique de division cerclée', 'barre oblique de division cerclée', 'barre oblique de division cerclée']);
  this.executeCharTest('⊙', ['opérateur point cerclé', 'opérateur point cerclé', 'opérateur point cerclé']);
  this.executeCharTest('⊚', ['opérateur rond cerclé', 'opérateur rond cerclé', 'opérateur rond cerclé']);
  this.executeCharTest('⊛', ['opérateur astérisque cerclé', 'opérateur astérisque cerclé', 'opérateur astérisque cerclé']);
  this.executeCharTest('⊜', ['égal cerclé', 'égal cerclé', 'égal cerclé']);
  this.executeCharTest('⊝', ['tiret cerclé', 'tiret cerclé', 'tiret cerclé']);
  this.executeCharTest('⊞', ['plus encadré', 'plus encadré', 'plus encadré']);
  this.executeCharTest('⊟', ['moins encadré', 'moins encadré', 'moins encadré']);
  this.executeCharTest('⊠', ['multiplié par encadré', 'multiplié par encadré', 'multiplié par encadré']);
  this.executeCharTest('⊡', ['opérateur point encadré', 'opérateur point encadré', 'opérateur point encadré']);
  this.executeCharTest('⊢', ['taquet droit', 'taquet droit', 'taquet droit']);
  this.executeCharTest('⊣', ['taquet gauche', 'taquet gauche', 'taquet gauche']);
  this.executeCharTest('⊤', ['taquet vers le bas', 'taquet vers le bas', 'taquet vers le bas']);
  this.executeCharTest('⊥', ['taquet vers le haut', 'taquet vers le haut', 'taquet vers le haut']);
  this.executeCharTest('⊦', ['assertion', 'assertion', 'assertion']);
  this.executeCharTest('⊧', ['modélise', 'modélise', 'modélise']);
  this.executeCharTest('⊨', ['vrai', 'vrai', 'vrai']);
  this.executeCharTest('⊩', ['oblige', 'oblige', 'oblige']);
  this.executeCharTest('⊪', ['barre verticale triple avec tourniquet à droite', 'barre verticale triple avec tourniquet à droite', 'barre verticale triple avec tourniquet à droite']);
  this.executeCharTest('⊫', ['barre verticale double avec tourniquet à droite double', 'barre verticale double avec tourniquet à droite double', 'barre verticale double avec tourniquet à droite double']);
  this.executeCharTest('⊬', ['ne prouve pas', 'ne prouve pas', 'ne prouve pas']);
  this.executeCharTest('⊭', ['pas vrai', 'pas vrai', 'pas vrai']);
  this.executeCharTest('⊮', ['n\'oblige pas', 'n\'oblige pas', 'n\'oblige pas']);
  this.executeCharTest('⊯', ['non barre verticale double avec tourniquet à droite double', 'non barre verticale double avec tourniquet à droite double', 'non barre verticale double avec tourniquet à droite double']);
  this.executeCharTest('⊰', ['précède sous relation', 'précède sous relation', 'précède sous relation']);
  this.executeCharTest('⊱', ['suit sous relation', 'suit sous relation', 'suit sous relation']);
  this.executeCharTest('⊲', ['sous groupe normal de', 'sous groupe normal de', 'sous groupe normal de']);
  this.executeCharTest('⊳', ['contient comme sous groupe normal', 'contient comme sous groupe normal', 'contient comme sous groupe normal']);
  this.executeCharTest('⊴', ['sous groupe normal ou égal à', 'sous groupe normal ou égal à', 'sous groupe normal ou égal à']);
  this.executeCharTest('⊵', ['contient comme sous groupe normal ou égal à', 'contient comme sous groupe normal ou égal à', 'contient comme sous groupe normal ou égal à']);
  this.executeCharTest('⊶', ['original de', 'original de', 'original de']);
  this.executeCharTest('⊷', ['image de', 'image de', 'image de']);
  this.executeCharTest('⊸', ['multijection', 'multijection', 'multijection']);
  this.executeCharTest('⊹', ['matrice hermitienne conjuguée', 'matrice hermitienne conjuguée', 'matrice hermitienne conjuguée']);
  this.executeCharTest('⊺', ['intercale', 'intercale', 'intercale']);
  this.executeCharTest('⊻', ['ou exclusif', 'ou exclusif', 'ou exclusif']);
  this.executeCharTest('⊼', ['non et', 'non et', 'non et']);
  this.executeCharTest('⊽', ['non ou', 'non ou', 'non ou']);
  this.executeCharTest('⊿', ['triangle rectangle', 'triangle rectangle', 'triangle rectangle']);
  this.executeCharTest('⋀', ['et logique de la famille', 'et logique de la famille', 'et logique de la famille']);
  this.executeCharTest('⋁', ['ou logique de la famille', 'ou logique de la famille', 'ou logique de la famille']);
  this.executeCharTest('⋂', ['intersection de la famille', 'intersection de la famille', 'intersection de la famille']);
  this.executeCharTest('⋃', ['réunion de la famille', 'réunion de la famille', 'réunion de la famille']);
  this.executeCharTest('⋄', ['opérateur losange', 'opérateur losange', 'opérateur losange']);
  this.executeCharTest('⋅', ['opérateur point', 'opérateur point', 'opérateur point']);
  this.executeCharTest('⋆', ['opérateur étoile', 'opérateur étoile', 'opérateur étoile']);
  this.executeCharTest('⋇', ['divisé multiplié', 'divisé multiplié', 'divisé multiplié']);
  this.executeCharTest('⋈', ['nœud papillon', 'nœud papillon', 'nœud papillon']);
  this.executeCharTest('⋉', ['produit semi direct à gauche de facteur normal', 'produit semi direct à gauche de facteur normal', 'produit semi direct à gauche de facteur normal']);
  this.executeCharTest('⋊', ['produit semi direct à droite de facteur normal', 'produit semi direct à droite de facteur normal', 'produit semi direct à droite de facteur normal']);
  this.executeCharTest('⋋', ['produit semi direct à gauche', 'produit semi direct à gauche', 'produit semi direct à gauche']);
  this.executeCharTest('⋌', ['produit semi direct à droite', 'produit semi direct à droite', 'produit semi direct à droite']);
  this.executeCharTest('⋍', ['moins tilde renversé', 'moins tilde renversé', 'moins tilde renversé']);
  this.executeCharTest('⋎', ['ou logique recourbé', 'ou logique recourbé', 'ou logique recourbé']);
  this.executeCharTest('⋏', ['et logique recourbé', 'et logique recourbé', 'et logique recourbé']);
  this.executeCharTest('⋐', ['sous ensemble double', 'sous ensemble double', 'sous ensemble double']);
  this.executeCharTest('⋑', ['sur ensemble double', 'sur ensemble double', 'sur ensemble double']);
  this.executeCharTest('⋒', ['intersection double', 'intersection double', 'intersection double']);
  this.executeCharTest('⋓', ['union double', 'union double', 'union double']);
  this.executeCharTest('⋔', ['fourche', 'fourche', 'fourche']);
  this.executeCharTest('⋕', ['égal et parallèle à', 'égal et parallèle à', 'égal et parallèle à']);
  this.executeCharTest('⋖', ['plus petit que pointé', 'plus petit que pointé', 'plus petit que pointé']);
  this.executeCharTest('⋗', ['plus grand que pointé', 'plus grand que pointé', 'plus grand que pointé']);
  this.executeCharTest('⋘', ['considérablement plus petit que', 'considérablement plus petit que', 'considérablement plus petit que']);
  this.executeCharTest('⋙', ['considérablement plus grand que', 'considérablement plus grand que', 'considérablement plus grand que']);
  this.executeCharTest('⋚', ['plus petit ou égal ou plus grand que', 'plus petit ou égal ou plus grand que', 'plus petit ou égal ou plus grand que']);
  this.executeCharTest('⋛', ['plus grand ou égal ou plus petit que', 'plus grand ou égal ou plus petit que', 'plus grand ou égal ou plus petit que']);
  this.executeCharTest('⋜', ['égal ou plus petit que', 'égal ou plus petit que', 'égal ou plus petit que']);
  this.executeCharTest('⋝', ['égal à deux lignes ou supérieur à', 'égal à deux lignes ou supérieur à', 'égal à deux lignes ou supérieur à']);
  this.executeCharTest('⋞', ['égal ou précède', 'égal ou précède', 'égal ou précède']);
  this.executeCharTest('⋟', ['égal ou suit', 'égal ou suit', 'égal ou suit']);
  this.executeCharTest('⋠', ['ni précédant ni égal à', 'ni précédant ni égal à', 'ni précédant ni égal à']);
  this.executeCharTest('⋡', ['ni suivant ni égal à', 'ni suivant ni égal à', 'ni suivant ni égal à']);
  this.executeCharTest('⋢', ['ni image carrée ni égal à', 'ni image carrée ni égal à', 'ni image carrée ni égal à']);
  this.executeCharTest('⋣', ['ni original carré ni égal à', 'ni original carré ni égal à', 'ni original carré ni égal à']);
  this.executeCharTest('⋤', ['image carré ou différent de', 'image carré ou différent de', 'image carré ou différent de']);
  this.executeCharTest('⋥', ['original carré ou différent de', 'original carré ou différent de', 'original carré ou différent de']);
  this.executeCharTest('⋦', ['plus petit mais non équivalent à', 'plus petit mais non équivalent à', 'plus petit mais non équivalent à']);
  this.executeCharTest('⋧', ['plus grand mais non équivalent à', 'plus grand mais non équivalent à', 'plus grand mais non équivalent à']);
  this.executeCharTest('⋨', ['précédant mais non équivalent à', 'précédant mais non équivalent à', 'précédant mais non équivalent à']);
  this.executeCharTest('⋩', ['suivant mais non équivalent à', 'suivant mais non équivalent à', 'suivant mais non équivalent à']);
  this.executeCharTest('⋪', ['pas un sous groupe normal de', 'pas un sous groupe normal de', 'pas un sous groupe normal de']);
  this.executeCharTest('⋫', ['ne contient pas comme sous groupe normal', 'ne contient pas comme sous groupe normal', 'ne contient pas comme sous groupe normal']);
  this.executeCharTest('⋬', ['ni sous groupe normal ni égal à', 'ni sous groupe normal ni égal à', 'ni sous groupe normal ni égal à']);
  this.executeCharTest('⋭', ['ni égal ni contenant comme sous  groupe normal', 'ni égal ni contenant comme sous  groupe normal', 'ni égal ni contenant comme sous  groupe normal']);
  this.executeCharTest('⋮', ['trois points suspendus', 'trois points suspendus', 'trois points suspendus']);
  this.executeCharTest('⋯', ['trois points médians', 'trois points médians', 'trois points médians']);
  this.executeCharTest('⋰', ['trois points diagonaux vers le coin haut à droite', 'trois points diagonaux vers le coin haut à droite', 'trois points diagonaux vers le coin haut à droite']);
  this.executeCharTest('⋱', ['trois points diagonaux vers le coin bas à droite', 'trois points diagonaux vers le coin bas à droite', 'trois points diagonaux vers le coin bas à droite']);
  this.executeCharTest('⋲', ['appartient à avec long trait horizontal', 'appartient à avec long trait horizontal', 'appartient à avec long trait horizontal']);
  this.executeCharTest('⋳', ['appartient à avec barre verticale au bout du trait horizontal', 'appartient à avec barre verticale au bout du trait horizontal', 'appartient à avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋴', ['petit appartient à avec barre verticale au bout du trait horizontal', 'petit appartient à avec barre verticale au bout du trait horizontal', 'petit appartient à avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋵', ['appartient à avec point en chef', 'appartient à avec point en chef', 'appartient à avec point en chef']);
  this.executeCharTest('⋶', ['appartient à avec trait en chef', 'appartient à avec trait en chef', 'appartient à avec trait en chef']);
  this.executeCharTest('⋷', ['petit appartient à avec trait en chef', 'petit appartient à avec trait en chef', 'petit appartient à avec trait en chef']);
  this.executeCharTest('⋸', ['appartient à avec trait souscrit', 'appartient à avec trait souscrit', 'appartient à avec trait souscrit']);
  this.executeCharTest('⋹', ['appartient à avec deux traits horizontaux', 'appartient à avec deux traits horizontaux', 'appartient à avec deux traits horizontaux']);
  this.executeCharTest('⋺', ['contient avec long trait horizontal', 'contient avec long trait horizontal', 'contient avec long trait horizontal']);
  this.executeCharTest('⋻', ['contient avec barre verticale au bout du trait horizontal', 'contient avec barre verticale au bout du trait horizontal', 'contient avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋼', ['petit contient avec barre verticale au bout du trait horizontal', 'petit contient avec barre verticale au bout du trait horizontal', 'petit contient avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋽', ['contient avec trait en chef', 'contient avec trait en chef', 'contient avec trait en chef']);
  this.executeCharTest('⋾', ['petit contient avec trait en chef', 'petit contient avec trait en chef', 'petit contient avec trait en chef']);
  this.executeCharTest('⋿', ['appartient à un sac en notation z', 'appartient à un sac en notation z', 'appartient à un sac en notation z']);
  this.executeCharTest('⌀', ['diamètre', 'diamètre', 'diamètre']);
  this.executeCharTest('⌂', ['maison', 'maison', 'maison']);
  this.executeCharTest('⌅', ['projective', 'projective', 'projective']);
  this.executeCharTest('⌆', ['perspective', 'perspective', 'perspective']);
  this.executeCharTest('⌇', ['ligne ondulée', 'ligne ondulée', 'ligne ondulée']);
  this.executeCharTest('⌐', ['négation réfléchi', 'négation réfléchi', 'négation réfléchi']);
  this.executeCharTest('⌑', ['pastille carrée', 'pastille carrée', 'pastille carrée']);
  this.executeCharTest('⌒', ['arc', 'arc', 'arc']);
  this.executeCharTest('⌓', ['segment', 'segment', 'segment']);
  this.executeCharTest('⌔', ['secteur', 'secteur', 'secteur']);
  this.executeCharTest('➕', ['plus gras', 'plus gras', 'plus gras']);
  this.executeCharTest('➖', ['moins gras', 'moins gras', 'moins gras']);
  this.executeCharTest('➗', ['division gras', 'division gras', 'division gras']);
  this.executeCharTest('➰', ['boucle recourbée', 'boucle recourbée', 'boucle recourbée']);
  this.executeCharTest('➿', ['double boucle recourbée', 'double boucle recourbée', 'double boucle recourbée']);
  this.executeCharTest('⟁', ['petit triangle blanc inscrit dans triangle blanc', 'petit triangle blanc inscrit dans triangle blanc', 'petit triangle blanc inscrit dans triangle blanc']);
  this.executeCharTest('⟂', ['perpendiculaire à', 'perpendiculaire à', 'perpendiculaire à']);
  this.executeCharTest('⟃', ['sous ensemble ouvert', 'sous ensemble ouvert', 'sous ensemble ouvert']);
  this.executeCharTest('⟄', ['sur ensemble ouvert', 'sur ensemble ouvert', 'sur ensemble ouvert']);
  this.executeCharTest('⟇', ['ou avec point inscrit', 'ou avec point inscrit', 'ou avec point inscrit']);
  this.executeCharTest('⟈', ['sous ensemble précédé d\'une barre oblique inversée', 'sous ensemble précédé d\'une barre oblique inversée', 'sous ensemble précédé d\'une barre oblique inversée']);
  this.executeCharTest('⟉', ['sur ensemble suivi d\'une barre oblique', 'sur ensemble suivi d\'une barre oblique', 'sur ensemble suivi d\'une barre oblique']);
  this.executeCharTest('⟊', ['barre verticale À une traverse', 'barre verticale À une traverse', 'barre verticale À une traverse']);
  this.executeCharTest('⟋', ['diagonale mathématique ascendante', 'diagonale mathématique ascendante', 'diagonale mathématique ascendante']);
  this.executeCharTest('⟌', ['grande division', 'grande division', 'grande division']);
  this.executeCharTest('⟍', ['diagonale mathématique descendante', 'diagonale mathématique descendante', 'diagonale mathématique descendante']);
  this.executeCharTest('⟎', ['et logique encadré', 'et logique encadré', 'et logique encadré']);
  this.executeCharTest('⟏', ['ou logique encadré', 'ou logique encadré', 'ou logique encadré']);
  this.executeCharTest('⟐', ['losange blanc à point centré', 'losange blanc à point centré', 'losange blanc à point centré']);
  this.executeCharTest('⟑', ['et pointé', 'et pointé', 'et pointé']);
  this.executeCharTest('⟒', ['appartient À ouvert vers le haut', 'appartient À ouvert vers le haut', 'appartient À ouvert vers le haut']);
  this.executeCharTest('⟓', ['coin inférieur droit pointé', 'coin inférieur droit pointé', 'coin inférieur droit pointé']);
  this.executeCharTest('⟔', ['coin supérieur gauche pointé', 'coin supérieur gauche pointé', 'coin supérieur gauche pointé']);
  this.executeCharTest('⟕', ['jointure externe gauche', 'jointure externe gauche', 'jointure externe gauche']);
  this.executeCharTest('⟖', ['jointure externe droite', 'jointure externe droite', 'jointure externe droite']);
  this.executeCharTest('⟗', ['jointure externe complète', 'jointure externe complète', 'jointure externe complète']);
  this.executeCharTest('⟘', ['grand taquet vers le haut', 'grand taquet vers le haut', 'grand taquet vers le haut']);
  this.executeCharTest('⟙', ['grand taquet vers le bas', 'grand taquet vers le bas', 'grand taquet vers le bas']);
  this.executeCharTest('⟚', ['double tourniquet bilatéral', 'double tourniquet bilatéral', 'double tourniquet bilatéral']);
  this.executeCharTest('⟛', ['tourniquet bilatéral', 'tourniquet bilatéral', 'tourniquet bilatéral']);
  this.executeCharTest('⟜', ['multijection gauche', 'multijection gauche', 'multijection gauche']);
  this.executeCharTest('⟝', ['long taquet droit', 'long taquet droit', 'long taquet droit']);
  this.executeCharTest('⟞', ['long taquet gauche', 'long taquet gauche', 'long taquet gauche']);
  this.executeCharTest('⟟', ['taquet vers le haut surmonté d\'un cercle', 'taquet vers le haut surmonté d\'un cercle', 'taquet vers le haut surmonté d\'un cercle']);
  this.executeCharTest('⟠', ['losange coupé', 'losange coupé', 'losange coupé']);
  this.executeCharTest('⟡', ['losange concave blanc', 'losange concave blanc', 'losange concave blanc']);
  this.executeCharTest('⟢', ['losange concave blanc avec trait à gauche', 'losange concave blanc avec trait à gauche', 'losange concave blanc avec trait à gauche']);
  this.executeCharTest('⟣', ['losange concave blanc avec trait à droite', 'losange concave blanc avec trait à droite', 'losange concave blanc avec trait à droite']);
  this.executeCharTest('⟤', ['carré blanc avec trait à gauche', 'carré blanc avec trait à gauche', 'carré blanc avec trait à gauche']);
  this.executeCharTest('⟥', ['carré blanc avec trait à droite', 'carré blanc avec trait à droite', 'carré blanc avec trait à droite']);
  this.executeCharTest('⤫', ['diagonale montante sur diagonale descendante', 'diagonale montante sur diagonale descendante', 'diagonale montante sur diagonale descendante']);
  this.executeCharTest('⤬', ['diagonale descendante sur diagonale montante', 'diagonale descendante sur diagonale montante', 'diagonale descendante sur diagonale montante']);
  this.executeCharTest('⦀', ['délimiteur triple barre verticale', 'délimiteur triple barre verticale', 'délimiteur triple barre verticale']);
  this.executeCharTest('⦁', ['boulet', 'boulet', 'boulet']);
  this.executeCharTest('⦂', ['deux points de la notation z', 'deux points de la notation z', 'deux points de la notation z']);
  this.executeCharTest('⦙', ['clôture pointillée', 'clôture pointillée', 'clôture pointillée']);
  this.executeCharTest('⦚', ['ligne verticale en zigzag', 'ligne verticale en zigzag', 'ligne verticale en zigzag']);
  this.executeCharTest('⦰', ['ensemble vide réfléchi', 'ensemble vide réfléchi', 'ensemble vide réfléchi']);
  this.executeCharTest('⦱', ['ensemble vide barre en chef', 'ensemble vide barre en chef', 'ensemble vide barre en chef']);
  this.executeCharTest('⦲', ['ensemble vide petit cercle en chef', 'ensemble vide petit cercle en chef', 'ensemble vide petit cercle en chef']);
  this.executeCharTest('⦵', ['cercle à barre horizontale', 'cercle à barre horizontale', 'cercle à barre horizontale']);
  this.executeCharTest('⦶', ['barre verticale cerclée', 'barre verticale cerclée', 'barre verticale cerclée']);
  this.executeCharTest('⦷', ['parallèles cerclées', 'parallèles cerclées', 'parallèles cerclées']);
  this.executeCharTest('⦸', ['barre oblique inversée cerclée', 'barre oblique inversée cerclée', 'barre oblique inversée cerclée']);
  this.executeCharTest('⦹', ['perpendiculaire cerclé', 'perpendiculaire cerclé', 'perpendiculaire cerclé']);
  this.executeCharTest('⦺', ['cercle divisé par une barre horizontale et une barre verticale dans la moitié supérieure', 'cercle divisé par une barre horizontale et une barre verticale dans la moitié supérieure', 'cercle divisé par une barre horizontale et une barre verticale dans la moitié supérieure']);
  this.executeCharTest('⦻', ['cercle superposé d\'un x', 'cercle superposé d\'un x', 'cercle superposé d\'un x']);
  this.executeCharTest('⦼', ['division pivoté en sens antihoraire cerclé', 'division pivoté en sens antihoraire cerclé', 'division pivoté en sens antihoraire cerclé']);
  this.executeCharTest('⦾', ['puce blanche cerclée', 'puce blanche cerclée', 'puce blanche cerclée']);
  this.executeCharTest('⦿', ['puce cerclée', 'puce cerclée', 'puce cerclée']);
  this.executeCharTest('⧀', ['inférieur à cerclé', 'inférieur à cerclé', 'inférieur à cerclé']);
  this.executeCharTest('⧁', ['supérieur à cerclé', 'supérieur à cerclé', 'supérieur à cerclé']);
  this.executeCharTest('⧂', ['cercle avec petit cercle à droite', 'cercle avec petit cercle à droite', 'cercle avec petit cercle à droite']);
  this.executeCharTest('⧃', ['cercle avec deux petits traits horizontaux à droite', 'cercle avec deux petits traits horizontaux à droite', 'cercle avec deux petits traits horizontaux à droite']);
  this.executeCharTest('⧄', ['oblique encadrée', 'oblique encadrée', 'oblique encadrée']);
  this.executeCharTest('⧅', ['oblique inversée encadrée', 'oblique inversée encadrée', 'oblique inversée encadrée']);
  this.executeCharTest('⧆', ['astérisque encadré', 'astérisque encadré', 'astérisque encadré']);
  this.executeCharTest('⧇', ['petite cercle encadré', 'petite cercle encadré', 'petite cercle encadré']);
  this.executeCharTest('⧈', ['carré encadré', 'carré encadré', 'carré encadré']);
  this.executeCharTest('⧉', ['carrés se chevauchant', 'carrés se chevauchant', 'carrés se chevauchant']);
  this.executeCharTest('⧊', ['triangle pointé en chef', 'triangle pointé en chef', 'triangle pointé en chef']);
  this.executeCharTest('⧋', ['triangle à barre souscrite', 'triangle à barre souscrite', 'triangle à barre souscrite']);
  this.executeCharTest('⧌', ['s inscrit dans triangle', 's inscrit dans triangle', 's inscrit dans triangle']);
  this.executeCharTest('⧍', ['triangle à empattements inférieurs', 'triangle à empattements inférieurs', 'triangle à empattements inférieurs']);
  this.executeCharTest('⧎', ['triangle droit par dessus triangle gauche', 'triangle droit par dessus triangle gauche', 'triangle droit par dessus triangle gauche']);
  this.executeCharTest('⧏', ['triangle gauche à gauche d\'une barre verticale', 'triangle gauche à gauche d\'une barre verticale', 'triangle gauche à gauche d\'une barre verticale']);
  this.executeCharTest('⧐', ['triangle droit à droite d\'une barre verticale', 'triangle droit à droite d\'une barre verticale', 'triangle droit à droite d\'une barre verticale']);
  this.executeCharTest('⧑', ['nœud papillon à aile gauche noire', 'nœud papillon à aile gauche noire', 'nœud papillon à aile gauche noire']);
  this.executeCharTest('⧒', ['nœud papillon à aile droite noire', 'nœud papillon à aile droite noire', 'nœud papillon à aile droite noire']);
  this.executeCharTest('⧓', ['nœud papillon noir', 'nœud papillon noir', 'nœud papillon noir']);
  this.executeCharTest('⧔', ['multiplication à moitié gauche noircie', 'multiplication à moitié gauche noircie', 'multiplication à moitié gauche noircie']);
  this.executeCharTest('⧕', ['multiplication à moitié droite noircie', 'multiplication à moitié droite noircie', 'multiplication à moitié droite noircie']);
  this.executeCharTest('⧖', ['sablier blanc', 'sablier blanc', 'sablier blanc']);
  this.executeCharTest('⧗', ['sablier noir', 'sablier noir', 'sablier noir']);
  this.executeCharTest('⧜', ['infini incomplet', 'infini incomplet', 'infini incomplet']);
  this.executeCharTest('⧝', ['lorgnon', 'lorgnon', 'lorgnon']);
  this.executeCharTest('⧞', ['infini nié par une barre verticale', 'infini nié par une barre verticale', 'infini nié par une barre verticale']);
  this.executeCharTest('⧟', ['multijection à deux têtes', 'multijection à deux têtes', 'multijection à deux têtes']);
  this.executeCharTest('⧠', ['carré ombré', 'carré ombré', 'carré ombré']);
  this.executeCharTest('⧡', ['augmente avec', 'augmente avec', 'augmente avec']);
  this.executeCharTest('⧢', ['produit de permutation', 'produit de permutation', 'produit de permutation']);
  this.executeCharTest('⧣', ['égale à et parallèle à incliné', 'égale à et parallèle à incliné', 'égale à et parallèle à incliné']);
  this.executeCharTest('⧤', ['égale à et parallèle à incliné surmontés d\'un tilde', 'égale à et parallèle à incliné surmontés d\'un tilde', 'égale à et parallèle à incliné surmontés d\'un tilde']);
  this.executeCharTest('⧥', ['identique à et parallèle à incliné', 'identique à et parallèle à incliné', 'identique à et parallèle à incliné']);
  this.executeCharTest('⧦', ['gleich stark', 'gleich stark', 'gleich stark']);
  this.executeCharTest('⧧', ['thermodynamique', 'thermodynamique', 'thermodynamique']);
  this.executeCharTest('⧨', ['triangle pointe vers le bas à moitié gauche noire', 'triangle pointe vers le bas à moitié gauche noire', 'triangle pointe vers le bas à moitié gauche noire']);
  this.executeCharTest('⧩', ['triangle pointe vers le bas à moitié droite noire', 'triangle pointe vers le bas à moitié droite noire', 'triangle pointe vers le bas à moitié droite noire']);
  this.executeCharTest('⧫', ['losange fuselé noir', 'losange fuselé noir', 'losange fuselé noir']);
  this.executeCharTest('⧮', ['barre d\'erreur à carré blanc', 'barre d\'erreur à carré blanc', 'barre d\'erreur à carré blanc']);
  this.executeCharTest('⧯', ['barre d\'erreur à carré noir', 'barre d\'erreur à carré noir', 'barre d\'erreur à carré noir']);
  this.executeCharTest('⧰', ['barre d\'erreur à losange blanc', 'barre d\'erreur à losange blanc', 'barre d\'erreur à losange blanc']);
  this.executeCharTest('⧱', ['barre d\'erreur à losange noir', 'barre d\'erreur à losange noir', 'barre d\'erreur à losange noir']);
  this.executeCharTest('⧲', ['barre d\'erreur à cercle blanc', 'barre d\'erreur à cercle blanc', 'barre d\'erreur à cercle blanc']);
  this.executeCharTest('⧳', ['barre d\'erreur à cercle noir', 'barre d\'erreur à cercle noir', 'barre d\'erreur à cercle noir']);
  this.executeCharTest('⧴', ['règle différée', 'règle différée', 'règle différée']);
  this.executeCharTest('⧵', ['opérateur barre oblique inversée', 'opérateur barre oblique inversée', 'opérateur barre oblique inversée']);
  this.executeCharTest('⧶', ['barre oblique avec barre en chef', 'barre oblique avec barre en chef', 'barre oblique avec barre en chef']);
  this.executeCharTest('⧷', ['barre oblique inversée à traverse horizontale', 'barre oblique inversée à traverse horizontale', 'barre oblique inversée à traverse horizontale']);
  this.executeCharTest('⧸', ['grande barre oblique', 'grande barre oblique', 'grande barre oblique']);
  this.executeCharTest('⧹', ['grande barre oblique inversée', 'grande barre oblique inversée', 'grande barre oblique inversée']);
  this.executeCharTest('⧺', ['double plus', 'double plus', 'double plus']);
  this.executeCharTest('⧻', ['triple plus', 'triple plus', 'triple plus']);
  this.executeCharTest('⧾', ['tiny', 'tiny', 'tiny']);
  this.executeCharTest('⧿', ['miny', 'miny', 'miny']);
  this.executeCharTest('⨀', ['opérateur point cerclé n aire', 'opérateur point cerclé n aire', 'opérateur point cerclé n aire']);
  this.executeCharTest('⨁', ['opérateur plus cerclé n aire', 'opérateur plus cerclé n aire', 'opérateur plus cerclé n aire']);
  this.executeCharTest('⨂', ['opérateur multiplié par cerclé n aire', 'opérateur multiplié par cerclé n aire', 'opérateur multiplié par cerclé n aire']);
  this.executeCharTest('⨃', ['opérateur union n aire pointé', 'opérateur union n aire pointé', 'opérateur union n aire pointé']);
  this.executeCharTest('⨄', ['opérateur union n aire avec plus', 'opérateur union n aire avec plus', 'opérateur union n aire avec plus']);
  this.executeCharTest('⨅', ['opérateur intersection carré n aire', 'opérateur intersection carré n aire', 'opérateur intersection carré n aire']);
  this.executeCharTest('⨆', ['opérateur union carré n aire', 'opérateur union carré n aire', 'opérateur union carré n aire']);
  this.executeCharTest('⨇', ['opérateur deux et logiques', 'opérateur deux et logiques', 'opérateur deux et logiques']);
  this.executeCharTest('⨈', ['opérateur deux ou logiques', 'opérateur deux ou logiques', 'opérateur deux ou logiques']);
  this.executeCharTest('⨉', ['opérateur multiplié par n aire', 'opérateur multiplié par n aire', 'opérateur multiplié par n aire']);
  this.executeCharTest('⨊', ['sommation modulo deux', 'sommation modulo deux', 'sommation modulo deux']);
  this.executeCharTest('⨋', ['sommation avec intégrale', 'sommation avec intégrale', 'sommation avec intégrale']);
  this.executeCharTest('⨌', ['intégrale quadruple', 'intégrale quadruple', 'intégrale quadruple']);
  this.executeCharTest('⨍', ['intégrale à partie finie', 'intégrale à partie finie', 'intégrale à partie finie']);
  this.executeCharTest('⨎', ['intégrale à deux barres horizontales', 'intégrale à deux barres horizontales', 'intégrale à deux barres horizontales']);
  this.executeCharTest('⨏', ['moyenne d\'intégrale à barre oblique inversée', 'moyenne d\'intégrale à barre oblique inversée', 'moyenne d\'intégrale à barre oblique inversée']);
  this.executeCharTest('⨐', ['fonction de circulation', 'fonction de circulation', 'fonction de circulation']);
  this.executeCharTest('⨑', ['intégrale en sens positif', 'intégrale en sens positif', 'intégrale en sens positif']);
  this.executeCharTest('⨒', ['intégrale de ligne à chemin rectangulaire autour du pôle', 'intégrale de ligne à chemin rectangulaire autour du pôle', 'intégrale de ligne à chemin rectangulaire autour du pôle']);
  this.executeCharTest('⨓', ['intégrale de ligne à chemin semi circulaire autour du pôle', 'intégrale de ligne à chemin semi circulaire autour du pôle', 'intégrale de ligne à chemin semi circulaire autour du pôle']);
  this.executeCharTest('⨔', ['intégrale de ligne évitant le pôle', 'intégrale de ligne évitant le pôle', 'intégrale de ligne évitant le pôle']);
  this.executeCharTest('⨕', ['intégrale autour d\'un opérateur point', 'intégrale autour d\'un opérateur point', 'intégrale autour d\'un opérateur point']);
  this.executeCharTest('⨖', ['intégrale quaternion', 'intégrale quaternion', 'intégrale quaternion']);
  this.executeCharTest('⨘', ['intégrale au signe multiplié par', 'intégrale au signe multiplié par', 'intégrale au signe multiplié par']);
  this.executeCharTest('⨙', ['intégrale à signe intersection', 'intégrale à signe intersection', 'intégrale à signe intersection']);
  this.executeCharTest('⨚', ['intégrale à signe union', 'intégrale à signe union', 'intégrale à signe union']);
  this.executeCharTest('⨛', ['intégrale à barre en chef', 'intégrale à barre en chef', 'intégrale à barre en chef']);
  this.executeCharTest('⨜', ['intégrale à barre souscrite', 'intégrale à barre souscrite', 'intégrale à barre souscrite']);
  this.executeCharTest('⨝', ['jointure', 'jointure', 'jointure']);
  this.executeCharTest('⨞', ['gros opérateur triangle gauche', 'gros opérateur triangle gauche', 'gros opérateur triangle gauche']);
  this.executeCharTest('⨟', ['composition de schémas en notation z', 'composition de schémas en notation z', 'composition de schémas en notation z']);
  this.executeCharTest('⨠', ['tubage de schémas en notation z', 'tubage de schémas en notation z', 'tubage de schémas en notation z']);
  this.executeCharTest('⨡', ['projection de schémas en notation z', 'projection de schémas en notation z', 'projection de schémas en notation z']);
  this.executeCharTest('⨢', ['plus surmonté d\'un petit cercle', 'plus surmonté d\'un petit cercle', 'plus surmonté d\'un petit cercle']);
  this.executeCharTest('⨣', ['plus surmonté d\'un circonflexe', 'plus surmonté d\'un circonflexe', 'plus surmonté d\'un circonflexe']);
  this.executeCharTest('⨤', ['plus surmonté d\'un tilde', 'plus surmonté d\'un tilde', 'plus surmonté d\'un tilde']);
  this.executeCharTest('⨥', ['plus à point souscrit', 'plus à point souscrit', 'plus à point souscrit']);
  this.executeCharTest('⨦', ['plus à tilde souscrit', 'plus à tilde souscrit', 'plus à tilde souscrit']);
  this.executeCharTest('⨧', ['plus à chiffre deux souscrit', 'plus à chiffre deux souscrit', 'plus à chiffre deux souscrit']);
  this.executeCharTest('⨨', ['plus à triangle noir', 'plus à triangle noir', 'plus à triangle noir']);
  this.executeCharTest('⨩', ['moins surmonté d\'une virgule', 'moins surmonté d\'une virgule', 'moins surmonté d\'une virgule']);
  this.executeCharTest('⨪', ['moins à point souscrit', 'moins à point souscrit', 'moins à point souscrit']);
  this.executeCharTest('⨫', ['moins à points descendants', 'moins à points descendants', 'moins à points descendants']);
  this.executeCharTest('⨬', ['moins à points ascendants', 'moins à points ascendants', 'moins à points ascendants']);
  this.executeCharTest('⨭', ['plus dans demi cercle gauche', 'plus dans demi cercle gauche', 'plus dans demi cercle gauche']);
  this.executeCharTest('⨮', ['plus dans demi cercle droit', 'plus dans demi cercle droit', 'plus dans demi cercle droit']);
  this.executeCharTest('⨯', ['produit vectoriel', 'produit vectoriel', 'produit vectoriel']);
  this.executeCharTest('⨰', ['multiplication à point en chef', 'multiplication à point en chef', 'multiplication à point en chef']);
  this.executeCharTest('⨱', ['multiplication à barre souscrite', 'multiplication à barre souscrite', 'multiplication à barre souscrite']);
  this.executeCharTest('⨲', ['produit semi direct fermé en bas', 'produit semi direct fermé en bas', 'produit semi direct fermé en bas']);
  this.executeCharTest('⨳', ['produit fusionné', 'produit fusionné', 'produit fusionné']);
  this.executeCharTest('⨴', ['multiplication dans demi cercle gauche', 'multiplication dans demi cercle gauche', 'multiplication dans demi cercle gauche']);
  this.executeCharTest('⨵', ['multiplication dans demi cercle droit', 'multiplication dans demi cercle droit', 'multiplication dans demi cercle droit']);
  this.executeCharTest('⨶', ['multiplication cerclé circonflexe', 'multiplication cerclé circonflexe', 'multiplication cerclé circonflexe']);
  this.executeCharTest('⨷', ['multiplication doublement cerclé', 'multiplication doublement cerclé', 'multiplication doublement cerclé']);
  this.executeCharTest('⨸', ['division cerclé', 'division cerclé', 'division cerclé']);
  this.executeCharTest('⨹', ['plus dans triangle', 'plus dans triangle', 'plus dans triangle']);
  this.executeCharTest('⨺', ['moins dans triangle', 'moins dans triangle', 'moins dans triangle']);
  this.executeCharTest('⨻', ['multiplication dans triangle', 'multiplication dans triangle', 'multiplication dans triangle']);
  this.executeCharTest('⨼', ['produit interieur', 'produit interieur', 'produit interieur']);
  this.executeCharTest('⨽', ['produit intérieur à droite', 'produit intérieur à droite', 'produit intérieur à droite']);
  this.executeCharTest('⨾', ['composition relationnelle en notation z', 'composition relationnelle en notation z', 'composition relationnelle en notation z']);
  this.executeCharTest('⨿', ['amalgamation ou coproduit', 'amalgamation ou coproduit', 'amalgamation ou coproduit']);
  this.executeCharTest('⩀', ['intersection pointée', 'intersection pointée', 'intersection pointée']);
  this.executeCharTest('⩁', ['union à signe moins', 'union à signe moins', 'union à signe moins']);
  this.executeCharTest('⩂', ['union à barre en chef', 'union à barre en chef', 'union à barre en chef']);
  this.executeCharTest('⩃', ['intersection à barre en chef', 'intersection à barre en chef', 'intersection à barre en chef']);
  this.executeCharTest('⩄', ['intersection avec et logique', 'intersection avec et logique', 'intersection avec et logique']);
  this.executeCharTest('⩅', ['union avec ou logique', 'union avec ou logique', 'union avec ou logique']);
  this.executeCharTest('⩆', ['union par dessus intersection', 'union par dessus intersection', 'union par dessus intersection']);
  this.executeCharTest('⩇', ['intersection par dessus union', 'intersection par dessus union', 'intersection par dessus union']);
  this.executeCharTest('⩈', ['union par dessus bar par dessus intersection', 'union par dessus bar par dessus intersection', 'union par dessus bar par dessus intersection']);
  this.executeCharTest('⩉', ['intersection par dessus trait par dessus union', 'intersection par dessus trait par dessus union', 'intersection par dessus trait par dessus union']);
  this.executeCharTest('⩊', ['deux unions soudées côte à côte', 'deux unions soudées côte à côte', 'deux unions soudées côte à côte']);
  this.executeCharTest('⩋', ['deux intersections soudées côte à côte', 'deux intersections soudées côte à côte', 'deux intersections soudées côte à côte']);
  this.executeCharTest('⩌', ['union fermée à empattements', 'union fermée à empattements', 'union fermée à empattements']);
  this.executeCharTest('⩍', ['intersection fermée à empattements', 'intersection fermée à empattements', 'intersection fermée à empattements']);
  this.executeCharTest('⩎', ['deux intersections carrées emboîtées', 'deux intersections carrées emboîtées', 'deux intersections carrées emboîtées']);
  this.executeCharTest('⩏', ['deux unions carrées emboîtées', 'deux unions carrées emboîtées', 'deux unions carrées emboîtées']);
  this.executeCharTest('⩐', ['union fermée à empattements et produit fusionné', 'union fermée à empattements et produit fusionné', 'union fermée à empattements et produit fusionné']);
  this.executeCharTest('⩑', ['et logique à point en chef', 'et logique à point en chef', 'et logique à point en chef']);
  this.executeCharTest('⩒', ['ou logique à point en chef', 'ou logique à point en chef', 'ou logique à point en chef']);
  this.executeCharTest('⩓', ['double et logique', 'double et logique', 'double et logique']);
  this.executeCharTest('⩔', ['double ou logique', 'double ou logique', 'double ou logique']);
  this.executeCharTest('⩕', ['deux et logiques entrecroisés', 'deux et logiques entrecroisés', 'deux et logiques entrecroisés']);
  this.executeCharTest('⩖', ['deux ou logiques entrecroisés', 'deux ou logiques entrecroisés', 'deux ou logiques entrecroisés']);
  this.executeCharTest('⩗', ['grand ou pentu', 'grand ou pentu', 'grand ou pentu']);
  this.executeCharTest('⩘', ['grand et pentu', 'grand et pentu', 'grand et pentu']);
  this.executeCharTest('⩙', ['et et ou logiques entrecroisés', 'et et ou logiques entrecroisés', 'et et ou logiques entrecroisés']);
  this.executeCharTest('⩚', ['et logique à hampe médiane', 'et logique à hampe médiane', 'et logique à hampe médiane']);
  this.executeCharTest('⩛', ['ou logique à hampe médiane', 'ou logique à hampe médiane', 'ou logique à hampe médiane']);
  this.executeCharTest('⩜', ['et logique à tiret horizontal', 'et logique à tiret horizontal', 'et logique à tiret horizontal']);
  this.executeCharTest('⩝', ['ou logique à tiret horizontal', 'ou logique à tiret horizontal', 'ou logique à tiret horizontal']);
  this.executeCharTest('⩞', ['et logique à deux barres en chef', 'et logique à deux barres en chef', 'et logique à deux barres en chef']);
  this.executeCharTest('⩟', ['et logique à barre souscrite', 'et logique à barre souscrite', 'et logique à barre souscrite']);
  this.executeCharTest('⩠', ['et logique à deux barres souscrites', 'et logique à deux barres souscrites', 'et logique à deux barres souscrites']);
  this.executeCharTest('⩡', ['petit v à barre souscrite', 'petit v à barre souscrite', 'petit v à barre souscrite']);
  this.executeCharTest('⩢', ['ou logique à deux barres en chef', 'ou logique à deux barres en chef', 'ou logique à deux barres en chef']);
  this.executeCharTest('⩣', ['ou logique à deux barres souscrites', 'ou logique à deux barres souscrites', 'ou logique à deux barres souscrites']);
  this.executeCharTest('⩤', ['antirestriction de domaine en notation z', 'antirestriction de domaine en notation z', 'antirestriction de domaine en notation z']);
  this.executeCharTest('⩥', ['antirestriction de codomaine en notation z', 'antirestriction de codomaine en notation z', 'antirestriction de codomaine en notation z']);
  this.executeCharTest('⩦', ['égal point souscrit', 'égal point souscrit', 'égal point souscrit']);
  this.executeCharTest('⩧', ['identique à surmonté d\'un point', 'identique à surmonté d\'un point', 'identique à surmonté d\'un point']);
  this.executeCharTest('⩨', ['deux barres verticales à trois traverses', 'deux barres verticales à trois traverses', 'deux barres verticales à trois traverses']);
  this.executeCharTest('⩩', ['trois barres verticales à trois traverses', 'trois barres verticales à trois traverses', 'trois barres verticales à trois traverses']);
  this.executeCharTest('⩪', ['opérateur tilde point en chef', 'opérateur tilde point en chef', 'opérateur tilde point en chef']);
  this.executeCharTest('⩫', ['opérateur tilde à points ascendants', 'opérateur tilde à points ascendants', 'opérateur tilde à points ascendants']);
  this.executeCharTest('⩬', ['similaire à moins similaire à', 'similaire à moins similaire à', 'similaire à moins similaire à']);
  this.executeCharTest('⩭', ['congruent point en chef', 'congruent point en chef', 'congruent point en chef']);
  this.executeCharTest('⩮', ['Égal astérisque en chef', 'Égal astérisque en chef', 'Égal astérisque en chef']);
  this.executeCharTest('⩯', ['presque égal à circonflexe', 'presque égal à circonflexe', 'presque égal à circonflexe']);
  this.executeCharTest('⩰', ['approximativement égal à ou égal à', 'approximativement égal à ou égal à', 'approximativement égal à ou égal à']);
  this.executeCharTest('⩱', ['plus signe égal en chef', 'plus signe égal en chef', 'plus signe égal en chef']);
  this.executeCharTest('⩲', ['égal à signe plus en chef', 'égal à signe plus en chef', 'égal à signe plus en chef']);
  this.executeCharTest('⩳', ['tilde signe égal en chef', 'tilde signe égal en chef', 'tilde signe égal en chef']);
  this.executeCharTest('⩴', ['double deux points égal à', 'double deux points égal à', 'double deux points égal à']);
  this.executeCharTest('⩵', ['deux signes égal à consécutifs', 'deux signes égal à consécutifs', 'deux signes égal à consécutifs']);
  this.executeCharTest('⩶', ['trois signes égal à consécutifs', 'trois signes égal à consécutifs', 'trois signes égal à consécutifs']);
  this.executeCharTest('⩷', ['égal à deux points en chef deux points souscrits', 'égal à deux points en chef deux points souscrits', 'égal à deux points en chef deux points souscrits']);
  this.executeCharTest('⩸', ['équivalent quatre points en chef', 'équivalent quatre points en chef', 'équivalent quatre points en chef']);
  this.executeCharTest('⩹', ['inférieur à avec cercle inscrit', 'inférieur à avec cercle inscrit', 'inférieur à avec cercle inscrit']);
  this.executeCharTest('⩺', ['supérieur à avec cercle inscrit', 'supérieur à avec cercle inscrit', 'supérieur à avec cercle inscrit']);
  this.executeCharTest('⩻', ['inférieur à point d\'interrogation en chef', 'inférieur à point d\'interrogation en chef', 'inférieur à point d\'interrogation en chef']);
  this.executeCharTest('⩼', ['supérieur à point d\'interrogation en chef', 'supérieur à point d\'interrogation en chef', 'supérieur à point d\'interrogation en chef']);
  this.executeCharTest('⩽', ['plus petit ou égal à pentu', 'plus petit ou égal à pentu', 'plus petit ou égal à pentu']);
  this.executeCharTest('⩾', ['supérieur à ou égal à pentu', 'supérieur à ou égal à pentu', 'supérieur à ou égal à pentu']);
  this.executeCharTest('⩿', ['inférieur à ou égal à pentu point inscrit', 'inférieur à ou égal à pentu point inscrit', 'inférieur à ou égal à pentu point inscrit']);
  this.executeCharTest('⪀', ['supérieur à ou égal à pentu point inscrit', 'supérieur à ou égal à pentu point inscrit', 'supérieur à ou égal à pentu point inscrit']);
  this.executeCharTest('⪁', ['inférieur à ou égal à pentu point en chef', 'inférieur à ou égal à pentu point en chef', 'inférieur à ou égal à pentu point en chef']);
  this.executeCharTest('⪂', ['supérieur à ou égal à pentu point en chef', 'supérieur à ou égal à pentu point en chef', 'supérieur à ou égal à pentu point en chef']);
  this.executeCharTest('⪃', ['inférieur à ou égal à pentu point en chef droit', 'inférieur à ou égal à pentu point en chef droit', 'inférieur à ou égal à pentu point en chef droit']);
  this.executeCharTest('⪄', ['supérieur à ou égal à pentu point en chef gauche', 'supérieur à ou égal à pentu point en chef gauche', 'supérieur à ou égal à pentu point en chef gauche']);
  this.executeCharTest('⪅', ['inférieur à ou approximatif', 'inférieur à ou approximatif', 'inférieur à ou approximatif']);
  this.executeCharTest('⪆', ['supérieur à ou approximatif', 'supérieur à ou approximatif', 'supérieur à ou approximatif']);
  this.executeCharTest('⪇', ['inférieur à et pas égal à une ligne', 'inférieur à et pas égal à une ligne', 'inférieur à et pas égal à une ligne']);
  this.executeCharTest('⪈', ['supérieur à et pas égal à une ligne', 'supérieur à et pas égal à une ligne', 'supérieur à et pas égal à une ligne']);
  this.executeCharTest('⪉', ['inférieur à et non approximatif', 'inférieur à et non approximatif', 'inférieur à et non approximatif']);
  this.executeCharTest('⪊', ['supérieur à et non approximatif', 'supérieur à et non approximatif', 'supérieur à et non approximatif']);
  this.executeCharTest('⪋', ['inférieur à par dessus égal à deux lignes par dessus supérieur à', 'inférieur à par dessus égal à deux lignes par dessus supérieur à', 'inférieur à par dessus égal à deux lignes par dessus supérieur à']);
  this.executeCharTest('⪌', ['supérieur à par dessus égal à deux lignes par dessus inférieur à', 'supérieur à par dessus égal à deux lignes par dessus inférieur à', 'supérieur à par dessus égal à deux lignes par dessus inférieur à']);
  this.executeCharTest('⪍', ['inférieur à par dessus similaire à ou égal à', 'inférieur à par dessus similaire à ou égal à', 'inférieur à par dessus similaire à ou égal à']);
  this.executeCharTest('⪎', ['supérieur à par dessus similaire à ou égal à', 'supérieur à par dessus similaire à ou égal à', 'supérieur à par dessus similaire à ou égal à']);
  this.executeCharTest('⪏', ['inférieur à par dessus similaire à par dessus supérieur à', 'inférieur à par dessus similaire à par dessus supérieur à', 'inférieur à par dessus similaire à par dessus supérieur à']);
  this.executeCharTest('⪐', ['supérieur à par dessus similaire à par dessus inférieur à', 'supérieur à par dessus similaire à par dessus inférieur à', 'supérieur à par dessus similaire à par dessus inférieur à']);
  this.executeCharTest('⪑', ['inférieur à par dessus supérieur à par dessus égal à deux lignes', 'inférieur à par dessus supérieur à par dessus égal à deux lignes', 'inférieur à par dessus supérieur à par dessus égal à deux lignes']);
  this.executeCharTest('⪒', ['supérieur à par dessus inférieur à par dessus égal à deux lignes', 'supérieur à par dessus inférieur à par dessus égal à deux lignes', 'supérieur à par dessus inférieur à par dessus égal à deux lignes']);
  this.executeCharTest('⪓', ['inférieur à par dessus égal à pentu par dessus supérieur à par dessus égal à pentu', 'inférieur à par dessus égal à pentu par dessus supérieur à par dessus égal à pentu', 'inférieur à par dessus égal à pentu par dessus supérieur à par dessus égal à pentu']);
  this.executeCharTest('⪔', ['supérieur à par dessus égal à pentu par dessus inférieur à par dessus égal à pentu', 'supérieur à par dessus égal à pentu par dessus inférieur à par dessus égal à pentu', 'supérieur à par dessus égal à pentu par dessus inférieur à par dessus égal à pentu']);
  this.executeCharTest('⪕', ['Égal à incliné ou inférieur à', 'Égal à incliné ou inférieur à', 'Égal à incliné ou inférieur à']);
  this.executeCharTest('⪖', ['Égal à incliné ou supérieur à', 'Égal à incliné ou supérieur à', 'Égal à incliné ou supérieur à']);
  this.executeCharTest('⪗', ['égal à pentu ou inférieur à point inscrit', 'égal à pentu ou inférieur à point inscrit', 'égal à pentu ou inférieur à point inscrit']);
  this.executeCharTest('⪘', ['égal à pentu ou supérieur à point inscrit', 'égal à pentu ou supérieur à point inscrit', 'égal à pentu ou supérieur à point inscrit']);
  this.executeCharTest('⪙', ['égal à deux lignes ou inférieur à', 'égal à deux lignes ou inférieur à', 'égal à deux lignes ou inférieur à']);
  this.executeCharTest('⪚', ['égal à deux lignes ou supérieur à', 'égal à deux lignes ou supérieur à', 'égal à deux lignes ou supérieur à']);
  this.executeCharTest('⪛', ['inférieur à ou égal à à deux lignes inclinées', 'inférieur à ou égal à à deux lignes inclinées', 'inférieur à ou égal à à deux lignes inclinées']);
  this.executeCharTest('⪜', ['supérieur à ou égal à à deux lignes inclinées', 'supérieur à ou égal à à deux lignes inclinées', 'supérieur à ou égal à à deux lignes inclinées']);
  this.executeCharTest('⪝', ['similaire à ou inférieur à', 'similaire à ou inférieur à', 'similaire à ou inférieur à']);
  this.executeCharTest('⪞', ['similaire à ou supérieur à', 'similaire à ou supérieur à', 'similaire à ou supérieur à']);
  this.executeCharTest('⪟', ['similaire à par dessus inférieur à par dessus signe égal', 'similaire à par dessus inférieur à par dessus signe égal', 'similaire à par dessus inférieur à par dessus signe égal']);
  this.executeCharTest('⪠', ['similaire à par dessus supérieur à par dessus signe égal', 'similaire à par dessus supérieur à par dessus signe égal', 'similaire à par dessus supérieur à par dessus signe égal']);
  this.executeCharTest('⪡', ['deux inférieur à emboîtés', 'deux inférieur à emboîtés', 'deux inférieur à emboîtés']);
  this.executeCharTest('⪢', ['deux supérieur à emboîtés', 'deux supérieur à emboîtés', 'deux supérieur à emboîtés']);
  this.executeCharTest('⪣', ['deux inférieur à emboîtés avec barre souscrite', 'deux inférieur à emboîtés avec barre souscrite', 'deux inférieur à emboîtés avec barre souscrite']);
  this.executeCharTest('⪤', ['deux supérieur à entrecroisés', 'deux supérieur à entrecroisés', 'deux supérieur à entrecroisés']);
  this.executeCharTest('⪥', ['supérieur à à côté de inférieur à', 'supérieur à à côté de inférieur à', 'supérieur à à côté de inférieur à']);
  this.executeCharTest('⪦', ['inférieur à fermé d\'un arc', 'inférieur à fermé d\'un arc', 'inférieur à fermé d\'un arc']);
  this.executeCharTest('⪧', ['supérieur à fermé d\'un arc', 'supérieur à fermé d\'un arc', 'supérieur à fermé d\'un arc']);
  this.executeCharTest('⪨', ['inférieur à fermé d\'un arc par dessus égal à pentu', 'inférieur à fermé d\'un arc par dessus égal à pentu', 'inférieur à fermé d\'un arc par dessus égal à pentu']);
  this.executeCharTest('⪩', ['supérieur à fermé d\'un arc par dessus égal à pentu', 'supérieur à fermé d\'un arc par dessus égal à pentu', 'supérieur à fermé d\'un arc par dessus égal à pentu']);
  this.executeCharTest('⪪', ['plus petit que en fourche', 'plus petit que en fourche', 'plus petit que en fourche']);
  this.executeCharTest('⪫', ['plus grand que en fourche', 'plus grand que en fourche', 'plus grand que en fourche']);
  this.executeCharTest('⪬', ['plus petit ou égal que en fourche', 'plus petit ou égal que en fourche', 'plus petit ou égal que en fourche']);
  this.executeCharTest('⪭', ['plus grand ou égal que en fourche', 'plus grand ou égal que en fourche', 'plus grand ou égal que en fourche']);
  this.executeCharTest('⪮', ['égal et dos d\'âne', 'égal et dos d\'âne', 'égal et dos d\'âne']);
  this.executeCharTest('⪯', ['précède par dessus signe égal à une ligne', 'précède par dessus signe égal à une ligne', 'précède par dessus signe égal à une ligne']);
  this.executeCharTest('⪰', ['suit par dessus signe égal à une ligne', 'suit par dessus signe égal à une ligne', 'suit par dessus signe égal à une ligne']);
  this.executeCharTest('⪱', ['précède par dessus pas égal à une ligne', 'précède par dessus pas égal à une ligne', 'précède par dessus pas égal à une ligne']);
  this.executeCharTest('⪲', ['suit par dessus pas égal à une ligne', 'suit par dessus pas égal à une ligne', 'suit par dessus pas égal à une ligne']);
  this.executeCharTest('⪳', ['précède par dessus signe égal', 'précède par dessus signe égal', 'précède par dessus signe égal']);
  this.executeCharTest('⪴', ['suit par dessus signe égal', 'suit par dessus signe égal', 'suit par dessus signe égal']);
  this.executeCharTest('⪵', ['précède par dessus pas égal à', 'précède par dessus pas égal à', 'précède par dessus pas égal à']);
  this.executeCharTest('⪶', ['suit par dessus pas égal à', 'suit par dessus pas égal à', 'suit par dessus pas égal à']);
  this.executeCharTest('⪷', ['précède par dessus presque égal à', 'précède par dessus presque égal à', 'précède par dessus presque égal à']);
  this.executeCharTest('⪸', ['suit par dessus presque égal à', 'suit par dessus presque égal à', 'suit par dessus presque égal à']);
  this.executeCharTest('⪹', ['précède par dessus non presque égal à', 'précède par dessus non presque égal à', 'précède par dessus non presque égal à']);
  this.executeCharTest('⪺', ['suit par dessus non presque égal à', 'suit par dessus non presque égal à', 'suit par dessus non presque égal à']);
  this.executeCharTest('⪻', ['double précède', 'double précède', 'double précède']);
  this.executeCharTest('⪼', ['double suit', 'double suit', 'double suit']);
  this.executeCharTest('⪽', ['sous ensemble pointé', 'sous ensemble pointé', 'sous ensemble pointé']);
  this.executeCharTest('⪾', ['sur ensemble pointé', 'sur ensemble pointé', 'sur ensemble pointé']);
  this.executeCharTest('⪿', ['sous ensemble plus souscrit', 'sous ensemble plus souscrit', 'sous ensemble plus souscrit']);
  this.executeCharTest('⫀', ['sur ensemble plus souscrit', 'sur ensemble plus souscrit', 'sur ensemble plus souscrit']);
  this.executeCharTest('⫁', ['sous ensemble à signe de multiplication souscrit', 'sous ensemble à signe de multiplication souscrit', 'sous ensemble à signe de multiplication souscrit']);
  this.executeCharTest('⫂', ['sur ensemble à signe de multiplication souscrit', 'sur ensemble à signe de multiplication souscrit', 'sur ensemble à signe de multiplication souscrit']);
  this.executeCharTest('⫃', ['sous ensemble de ou égal à point en chef', 'sous ensemble de ou égal à point en chef', 'sous ensemble de ou égal à point en chef']);
  this.executeCharTest('⫄', ['sur ensemble de ou égal à point en chef', 'sur ensemble de ou égal à point en chef', 'sur ensemble de ou égal à point en chef']);
  this.executeCharTest('⫅', ['sous ensemble de par dessus signe égal', 'sous ensemble de par dessus signe égal', 'sous ensemble de par dessus signe égal']);
  this.executeCharTest('⫆', ['sur ensemble de par dessus signe égal', 'sur ensemble de par dessus signe égal', 'sur ensemble de par dessus signe égal']);
  this.executeCharTest('⫇', ['sous ensemble de par dessus opérateur tilde', 'sous ensemble de par dessus opérateur tilde', 'sous ensemble de par dessus opérateur tilde']);
  this.executeCharTest('⫈', ['sur ensemble de par dessus opérateur tilde', 'sur ensemble de par dessus opérateur tilde', 'sur ensemble de par dessus opérateur tilde']);
  this.executeCharTest('⫉', ['sous ensemble de par dessus presque égal à', 'sous ensemble de par dessus presque égal à', 'sous ensemble de par dessus presque égal à']);
  this.executeCharTest('⫊', ['sur ensemble de par dessus presque égal à', 'sur ensemble de par dessus presque égal à', 'sur ensemble de par dessus presque égal à']);
  this.executeCharTest('⫋', ['sous ensemble de par dessus pas égal à', 'sous ensemble de par dessus pas égal à', 'sous ensemble de par dessus pas égal à']);
  this.executeCharTest('⫌', ['sur ensemble de par dessus pas égal à', 'sur ensemble de par dessus pas égal à', 'sur ensemble de par dessus pas égal à']);
  this.executeCharTest('⫍', ['opérateur boîte carrée ouverte gauche', 'opérateur boîte carrée ouverte gauche', 'opérateur boîte carrée ouverte gauche']);
  this.executeCharTest('⫎', ['opérateur boîte carrée ouverte droite', 'opérateur boîte carrée ouverte droite', 'opérateur boîte carrée ouverte droite']);
  this.executeCharTest('⫏', ['sous ensemble clos', 'sous ensemble clos', 'sous ensemble clos']);
  this.executeCharTest('⫐', ['sur ensemble clos', 'sur ensemble clos', 'sur ensemble clos']);
  this.executeCharTest('⫑', ['sous ensemble clos ou égal à', 'sous ensemble clos ou égal à', 'sous ensemble clos ou égal à']);
  this.executeCharTest('⫒', ['sur ensemble clos ou égal à', 'sur ensemble clos ou égal à', 'sur ensemble clos ou égal à']);
  this.executeCharTest('⫓', ['sous ensemble par dessus sur ensemble', 'sous ensemble par dessus sur ensemble', 'sous ensemble par dessus sur ensemble']);
  this.executeCharTest('⫔', ['sur ensemble par dessus sous ensemble', 'sur ensemble par dessus sous ensemble', 'sur ensemble par dessus sous ensemble']);
  this.executeCharTest('⫕', ['sous ensemble par dessus sous ensemble', 'sous ensemble par dessus sous ensemble', 'sous ensemble par dessus sous ensemble']);
  this.executeCharTest('⫖', ['sur ensemble par dessus sur ensemble', 'sur ensemble par dessus sur ensemble', 'sur ensemble par dessus sur ensemble']);
  this.executeCharTest('⫗', ['sur ensemble à côté de sous ensemble', 'sur ensemble à côté de sous ensemble', 'sur ensemble à côté de sous ensemble']);
  this.executeCharTest('⫘', ['sur ensemble chaîné à sous ensemble', 'sur ensemble chaîné à sous ensemble', 'sur ensemble chaîné à sous ensemble']);
  this.executeCharTest('⫙', ['appartient à ouvert vers le bas', 'appartient à ouvert vers le bas', 'appartient à ouvert vers le bas']);
  this.executeCharTest('⫚', ['fourche surmontée d\'un t', 'fourche surmontée d\'un t', 'fourche surmontée d\'un t']);
  this.executeCharTest('⫛', ['intersection transversale', 'intersection transversale', 'intersection transversale']);
  this.executeCharTest('⫝̸', ['bifurcation (non indépendant)', 'bifurcation (non indépendant)', 'bifurcation (non indépendant)']);
  this.executeCharTest('⫝', ['non bifurcation (indépendant)', 'non bifurcation (indépendant)', 'non bifurcation (indépendant)']);
  this.executeCharTest('⫞', ['taquet gauche court', 'taquet gauche court', 'taquet gauche court']);
  this.executeCharTest('⫟', ['taquet court vers le bas', 'taquet court vers le bas', 'taquet court vers le bas']);
  this.executeCharTest('⫠', ['taquet court vers le haut', 'taquet court vers le haut', 'taquet court vers le haut']);
  this.executeCharTest('⫡', ['perpendiculaire à s', 'perpendiculaire à s', 'perpendiculaire à s']);
  this.executeCharTest('⫢', ['triple tourniquet droit à barre verticale', 'triple tourniquet droit à barre verticale', 'triple tourniquet droit à barre verticale']);
  this.executeCharTest('⫣', ['tourniquet gauche à double barre verticale', 'tourniquet gauche à double barre verticale', 'tourniquet gauche à double barre verticale']);
  this.executeCharTest('⫤', ['double tourniquet gauche à barre verticale', 'double tourniquet gauche à barre verticale', 'double tourniquet gauche à barre verticale']);
  this.executeCharTest('⫥', ['double tourniquet gauche à double barre verticale', 'double tourniquet gauche à double barre verticale', 'double tourniquet gauche à double barre verticale']);
  this.executeCharTest('⫦', ['double barre verticale gauche à traverse', 'double barre verticale gauche à traverse', 'double barre verticale gauche à traverse']);
  this.executeCharTest('⫧', ['taquet court vers le bas avec barre en chef', 'taquet court vers le bas avec barre en chef', 'taquet court vers le bas avec barre en chef']);
  this.executeCharTest('⫨', ['taquet court vers le haut avec barre souscrite', 'taquet court vers le haut avec barre souscrite', 'taquet court vers le haut avec barre souscrite']);
  this.executeCharTest('⫩', ['taquet court vers le haut par dessus taquet court vers le bas', 'taquet court vers le haut par dessus taquet court vers le bas', 'taquet court vers le haut par dessus taquet court vers le bas']);
  this.executeCharTest('⫪', ['double taquet vers le bas', 'double taquet vers le bas', 'double taquet vers le bas']);
  this.executeCharTest('⫫', ['double taquet vers le haut', 'double taquet vers le haut', 'double taquet vers le haut']);
  this.executeCharTest('⫬', ['négation à deux traits', 'négation à deux traits', 'négation à deux traits']);
  this.executeCharTest('⫭', ['négation à deux traits réfléchi', 'négation à deux traits réfléchi', 'négation à deux traits réfléchi']);
  this.executeCharTest('⫮', ['n\'est pas un diviseur de à barre de négation réfléchie', 'n\'est pas un diviseur de à barre de négation réfléchie', 'n\'est pas un diviseur de à barre de négation réfléchie']);
  this.executeCharTest('⫯', ['ligne verticale cercle en chef', 'ligne verticale cercle en chef', 'ligne verticale cercle en chef']);
  this.executeCharTest('⫰', ['ligne verticale cercle souscrit', 'ligne verticale cercle souscrit', 'ligne verticale cercle souscrit']);
  this.executeCharTest('⫱', ['taquet vers le bas surmontant un cercle', 'taquet vers le bas surmontant un cercle', 'taquet vers le bas surmontant un cercle']);
  this.executeCharTest('⫲', ['parallèlle à vertical à une traverse', 'parallèlle à vertical à une traverse', 'parallèlle à vertical à une traverse']);
  this.executeCharTest('⫳', ['parallèle à avec opérateur tilde', 'parallèle à avec opérateur tilde', 'parallèle à avec opérateur tilde']);
  this.executeCharTest('⫴', ['relation binaire triple barre verticale', 'relation binaire triple barre verticale', 'relation binaire triple barre verticale']);
  this.executeCharTest('⫵', ['triple barre verticale à une traverse', 'triple barre verticale à une traverse', 'triple barre verticale à une traverse']);
  this.executeCharTest('⫶', ['opérateur trois points', 'opérateur trois points', 'opérateur trois points']);
  this.executeCharTest('⫷', ['trois inférieur à emboîtés', 'trois inférieur à emboîtés', 'trois inférieur à emboîtés']);
  this.executeCharTest('⫸', ['trois supérieur à emboîtés', 'trois supérieur à emboîtés', 'trois supérieur à emboîtés']);
  this.executeCharTest('⫹', ['inférieur à ou égal à et deux lignes inclinées', 'inférieur à ou égal à et deux lignes inclinées', 'inférieur à ou égal à et deux lignes inclinées']);
  this.executeCharTest('⫺', ['supérieur à ou égal à et deux lignes inclinées', 'supérieur à ou égal à et deux lignes inclinées', 'supérieur à ou égal à et deux lignes inclinées']);
  this.executeCharTest('⫻', ['relation binaire triple oblique', 'relation binaire triple oblique', 'relation binaire triple oblique']);
  this.executeCharTest('⫼', ['grand opérateur à trois barres verticales', 'grand opérateur à trois barres verticales', 'grand opérateur à trois barres verticales']);
  this.executeCharTest('⫽', ['opérateur double oblique', 'opérateur double oblique', 'opérateur double oblique']);
  this.executeCharTest('⫾', ['barre verticale blanche', 'barre verticale blanche', 'barre verticale blanche']);
  this.executeCharTest('⫿', ['barre verticale blanche n aire', 'barre verticale blanche n aire', 'barre verticale blanche n aire']);
  this.executeCharTest('〜', ['trait d\'union en esse', 'trait d\'union en esse', 'trait d\'union en esse']);
  this.executeCharTest('︐', ['forme de présentation de virgule verticale', 'forme de présentation de virgule verticale', 'forme de présentation de virgule verticale']);
  this.executeCharTest('︓', ['forme de présentation de deux points vertical', 'forme de présentation de deux points vertical', 'forme de présentation de deux points vertical']);
  this.executeCharTest('︔', ['forme de présentation de point virgule vertical', 'forme de présentation de point virgule vertical', 'forme de présentation de point virgule vertical']);
  this.executeCharTest('︕', ['forme de présentation de point d\'exclamation vertical', 'forme de présentation de point d\'exclamation vertical', 'forme de présentation de point d\'exclamation vertical']);
  this.executeCharTest('︖', ['forme de présentation de point d\'interrogation vertical', 'forme de présentation de point d\'interrogation vertical', 'forme de présentation de point d\'interrogation vertical']);
  this.executeCharTest('︙', ['forme de présentation de points de suspension verticaux', 'forme de présentation de points de suspension verticaux', 'forme de présentation de points de suspension verticaux']);
  this.executeCharTest('︰', ['forme de présentation de point de conduite double vertical', 'forme de présentation de point de conduite double vertical', 'forme de présentation de point de conduite double vertical']);
  this.executeCharTest('︱', ['forme de présentation de tiret cadratin vertical', 'forme de présentation de tiret cadratin vertical', 'forme de présentation de tiret cadratin vertical']);
  this.executeCharTest('︲', ['forme de présentation de tiret demi cadratin vertical', 'forme de présentation de tiret demi cadratin vertical', 'forme de présentation de tiret demi cadratin vertical']);
  this.executeCharTest('︳', ['forme de présentation de tiret bas vertical', 'forme de présentation de tiret bas vertical', 'forme de présentation de tiret bas vertical']);
  this.executeCharTest('︴', ['forme de présentation de tiret bas ondulé vertical', 'forme de présentation de tiret bas ondulé vertical', 'forme de présentation de tiret bas ondulé vertical']);
  this.executeCharTest('﹅', ['point sésame', 'point sésame', 'point sésame']);
  this.executeCharTest('﹆', ['point sésame ajouré', 'point sésame ajouré', 'point sésame ajouré']);
  this.executeCharTest('﹉', ['tiret haut en pointillés', 'tiret haut en pointillés', 'tiret haut en pointillés']);
  this.executeCharTest('﹊', ['tiret haut à point central', 'tiret haut à point central', 'tiret haut à point central']);
  this.executeCharTest('﹋', ['tiret haut ondulé', 'tiret haut ondulé', 'tiret haut ondulé']);
  this.executeCharTest('﹌', ['tiret haut double ondulé', 'tiret haut double ondulé', 'tiret haut double ondulé']);
  this.executeCharTest('﹍', ['tiret bas avec pointillés', 'tiret bas avec pointillés', 'tiret bas avec pointillés']);
  this.executeCharTest('﹎', ['tiret bas à point central', 'tiret bas à point central', 'tiret bas à point central']);
  this.executeCharTest('﹏', ['tiret bas ondulé', 'tiret bas ondulé', 'tiret bas ondulé']);
  this.executeCharTest('﹐', ['virgule minuscule', 'virgule minuscule', 'virgule minuscule']);
  this.executeCharTest('﹒', ['point minuscule', 'point minuscule', 'point minuscule']);
  this.executeCharTest('﹔', ['point virgule minuscule', 'point virgule minuscule', 'point virgule minuscule']);
  this.executeCharTest('﹕', ['deux points minuscule', 'deux points minuscule', 'deux points minuscule']);
  this.executeCharTest('﹖', ['point d\'interrogation minuscule', 'point d\'interrogation minuscule', 'point d\'interrogation minuscule']);
  this.executeCharTest('﹗', ['point d\'exclamation minuscule', 'point d\'exclamation minuscule', 'point d\'exclamation minuscule']);
  this.executeCharTest('﹘', ['trait d\'union cadratin minuscule', 'trait d\'union cadratin minuscule', 'trait d\'union cadratin minuscule']);
  this.executeCharTest('﹟', ['croisillon minuscule', 'croisillon minuscule', 'croisillon minuscule']);
  this.executeCharTest('﹠', ['perluète minuscule', 'perluète minuscule', 'perluète minuscule']);
  this.executeCharTest('﹡', ['astérisque minuscule', 'astérisque minuscule', 'astérisque minuscule']);
  this.executeCharTest('﹢', ['plus minuscule', 'plus minuscule', 'plus minuscule']);
  this.executeCharTest('﹣', ['tiret minuscule', 'tiret minuscule', 'tiret minuscule']);
  this.executeCharTest('﹤', ['inférieur à minuscule', 'inférieur à minuscule', 'inférieur à minuscule']);
  this.executeCharTest('﹥', ['supérieur à minuscule', 'supérieur à minuscule', 'supérieur à minuscule']);
  this.executeCharTest('﹦', ['égal à minuscule', 'égal à minuscule', 'égal à minuscule']);
  this.executeCharTest('﹨', ['integer divide', 'integer divide', 'integer divide']);
  this.executeCharTest('﹩', ['symbole dollar minuscule', 'symbole dollar minuscule', 'symbole dollar minuscule']);
  this.executeCharTest('﹪', ['symbole pour cent minuscule', 'symbole pour cent minuscule', 'symbole pour cent minuscule']);
  this.executeCharTest('﹫', ['arrobe minuscule', 'arrobe minuscule', 'arrobe minuscule']);
  this.executeCharTest('！', ['point d\'exclamation', 'point d\'exclamation', 'point d\'exclamation']);
  this.executeCharTest('＂', ['guillemet', 'guillemet', 'guillemet']);
  this.executeCharTest('＃', ['croisillon', 'croisillon', 'croisillon']);
  this.executeCharTest('＄', ['symbole dollar', 'symbole dollar', 'symbole dollar']);
  this.executeCharTest('％', ['symbole pour cent', 'symbole pour cent', 'symbole pour cent']);
  this.executeCharTest('＆', ['perluète', 'perluète', 'perluète']);
  this.executeCharTest('＇', ['apostrophe', 'apostrophe', 'apostrophe']);
  this.executeCharTest('＊', ['astérisque', 'astérisque', 'astérisque']);
  this.executeCharTest('＋', ['plus', 'plus', 'plus']);
  this.executeCharTest('，', ['virgule', 'virgule', 'virgule']);
  this.executeCharTest('－', ['tiret', 'tiret', 'tiret']);
  this.executeCharTest('．', ['point', 'point', 'point']);
  this.executeCharTest('／', ['barre oblique', 'barre oblique', 'barre oblique']);
  this.executeCharTest('：', ['deux points colon', 'deux points colon', 'deux points colon']);
  this.executeCharTest('；', ['point virgule', 'point virgule', 'point virgule']);
  this.executeCharTest('＜', ['inférieur à', 'inférieur à', 'inférieur à']);
  this.executeCharTest('＝', ['égal à', 'égal à', 'égal à']);
  this.executeCharTest('＞', ['supérieur à', 'supérieur à', 'supérieur à']);
  this.executeCharTest('？', ['point d\'interrogation', 'point d\'interrogation', 'point d\'interrogation']);
  this.executeCharTest('＠', ['arrobe', 'arrobe', 'arrobe']);
  this.executeCharTest('＼', ['barre oblique inversée', 'barre oblique inversée', 'barre oblique inversée']);
  this.executeCharTest('＾', ['accent circonflexe', 'accent circonflexe', 'accent circonflexe']);
  this.executeCharTest('＿', ['tiret bas', 'tiret bas', 'tiret bas']);
  this.executeCharTest('｀', ['accent grave', 'accent grave', 'accent grave']);
  this.executeCharTest('｜', ['barre verticale', 'barre verticale', 'barre verticale']);
  this.executeCharTest('～', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('￠', ['symbole centime', 'symbole centime', 'symbole centime']);
  this.executeCharTest('￡', ['symbole livre', 'symbole livre', 'symbole livre']);
  this.executeCharTest('￢', ['négation', 'négation', 'négation']);
  this.executeCharTest('￣', ['macron *', 'macron *', 'macron *']);
  this.executeCharTest('￤', ['ligne brisée', 'ligne brisée', 'ligne brisée']);
  this.executeCharTest('￥', ['symbole yen', 'symbole yen', 'symbole yen']);
  this.executeCharTest('￦', ['symbole won', 'symbole won', 'symbole won']);
  this.executeCharTest('￨', ['ligne verticale mince', 'ligne verticale mince', 'ligne verticale mince']);
  this.executeCharTest('￭', ['carré noir', 'carré noir', 'carré noir']);
  this.executeCharTest('￮', ['cercle blanc', 'cercle blanc', 'cercle blanc']);
  this.executeCharTest(' ', ['espace', 'espace', 'espace']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest('­', ['trait d\'union conditionnel', 'trait d\'union conditionnel', 'trait d\'union conditionnel']);
  this.executeCharTest(' ', ['demi cadratin', 'demi cadratin', 'demi cadratin']);
  this.executeCharTest(' ', ['cadratin', 'cadratin', 'cadratin']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', ['sixième de cadratin', 'sixième de cadratin', 'sixième de cadratin']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest('​', ['​', '​', '​']);
  this.executeCharTest('‌', ['antiliant sans chasse', 'antiliant sans chasse', 'antiliant sans chasse']);
  this.executeCharTest('‍', ['liant sans chasse', 'liant sans chasse', 'liant sans chasse']);
  this.executeCharTest('‎', ['marque gauche à droite', 'marque gauche à droite', 'marque gauche à droite']);
  this.executeCharTest('‏', ['marque droite à gauche', 'marque droite à gauche', 'marque droite à gauche']);
  this.executeCharTest(' ', ['séparateur de lignes', 'séparateur de lignes', 'séparateur de lignes']);
  this.executeCharTest(' ', ['séparateur de paragraphes', 'séparateur de paragraphes', 'séparateur de paragraphes']);
  this.executeCharTest('‪', ['enchâssement gauche à droite', 'enchâssement gauche à droite', 'enchâssement gauche à droite']);
  this.executeCharTest('‫', ['enchâssement droite à gauche', 'enchâssement droite à gauche', 'enchâssement droite à gauche']);
  this.executeCharTest('‬', ['dépilement de formatage directionnel', 'dépilement de formatage directionnel', 'dépilement de formatage directionnel']);
  this.executeCharTest('‭', ['forçage gauche à droite', 'forçage gauche à droite', 'forçage gauche à droite']);
  this.executeCharTest('‮', ['forçage droite à gauche', 'forçage droite à gauche', 'forçage droite à gauche']);
  this.executeCharTest(' ', ['espace insécable étroite', 'espace insécable étroite', 'espace insécable étroite']);
  this.executeCharTest(' ', ['espace moyenne mathématique', 'espace moyenne mathématique', 'espace moyenne mathématique']);
  this.executeCharTest('⁠', ['⁠', '⁠', '⁠']);
  this.executeCharTest('⁡', ['de', 'de', 'de']);
  this.executeCharTest('⁢', [' ', ' ', ' ']);
  this.executeCharTest('⁣', ['⁣', '⁣', '⁣']);
  this.executeCharTest('⁤', ['plus invisible', 'plus invisible', 'plus invisible']);
  this.executeCharTest('⁪', ['inhibiteur d\'échange symétrique', 'inhibiteur d\'échange symétrique', 'inhibiteur d\'échange symétrique']);
  this.executeCharTest('⁫', ['activateur d\'échange symétrique', 'activateur d\'échange symétrique', 'activateur d\'échange symétrique']);
  this.executeCharTest('⁮', ['sélecteur de formes numérales nationales', 'sélecteur de formes numérales nationales', 'sélecteur de formes numérales nationales']);
  this.executeCharTest('⁯', ['sélecteur de formes numérales de référence', 'sélecteur de formes numérales de référence', 'sélecteur de formes numérales de référence']);
  this.executeCharTest('﻿', ['espace ultrafine', 'espace ultrafine', 'espace ultrafine']);
  this.executeCharTest('￹', ['ancre d\'annotation interlinéaire', 'ancre d\'annotation interlinéaire', 'ancre d\'annotation interlinéaire']);
  this.executeCharTest('￺', ['séparateur d\'annotation interlinéaire', 'séparateur d\'annotation interlinéaire', 'séparateur d\'annotation interlinéaire']);
  this.executeCharTest('￻', ['terminateur d\'annotation interlinéaire', 'terminateur d\'annotation interlinéaire', 'terminateur d\'annotation interlinéaire']);
  this.executeCharTest('⏨', ['symbole exposant décimal', 'symbole exposant décimal', 'symbole exposant décimal']);
  this.executeCharTest('★', ['étoile noire', 'étoile noire', 'étoile noire']);
  this.executeCharTest('☆', ['étoile blanche', 'étoile blanche', 'étoile blanche']);
  this.executeCharTest('⚪', ['cercle moyen blanc', 'cercle moyen blanc', 'cercle moyen blanc']);
  this.executeCharTest('⚫', ['cercle moyen noir', 'cercle moyen noir', 'cercle moyen noir']);
  this.executeCharTest('✅', ['signe de vérification blanc gras', 'signe de vérification blanc gras', 'signe de vérification blanc gras']);
  this.executeCharTest('✓', ['signe de vérification', 'signe de vérification', 'signe de vérification']);
  this.executeCharTest('✔', ['gros signe de vérification', 'gros signe de vérification', 'gros signe de vérification']);
  this.executeCharTest('✕', ['x de multiplication', 'x de multiplication', 'x de multiplication']);
  this.executeCharTest('✖', ['gros x de multiplication', 'gros x de multiplication', 'gros x de multiplication']);
  this.executeCharTest('✗', ['x de bulletin de vote', 'x de bulletin de vote', 'x de bulletin de vote']);
  this.executeCharTest('✘', ['gros x de bulletin de vote', 'gros x de bulletin de vote', 'gros x de bulletin de vote']);
  this.executeCharTest('✛', ['croix percée d\'un carré', 'croix percée d\'un carré', 'croix percée d\'un carré']);
  this.executeCharTest('✜', ['grosse croix percée d\'un carré', 'grosse croix percée d\'un carré', 'grosse croix percée d\'un carré']);
  this.executeCharTest('✠', ['croix de malte', 'croix de malte', 'croix de malte']);
  this.executeCharTest('✡', ['Étoile de david', 'Étoile de david', 'Étoile de david']);
  this.executeCharTest('✢', ['croix larmée', 'croix larmée', 'croix larmée']);
  this.executeCharTest('✣', ['croix pommetée', 'croix pommetée', 'croix pommetée']);
  this.executeCharTest('✤', ['grosse croix pommetée', 'grosse croix pommetée', 'grosse croix pommetée']);
  this.executeCharTest('✥', ['croix tréflée', 'croix tréflée', 'croix tréflée']);
  this.executeCharTest('✦', ['Étoile noire à quatre branches', 'Étoile noire à quatre branches', 'Étoile noire à quatre branches']);
  this.executeCharTest('✧', ['Étoile blanche à quatre branches', 'Étoile blanche à quatre branches', 'Étoile blanche à quatre branches']);
  this.executeCharTest('✨', ['scintillements', 'scintillements', 'scintillements']);
  this.executeCharTest('✩', ['Étoile blanche à contour accentué', 'Étoile blanche à contour accentué', 'Étoile blanche à contour accentué']);
  this.executeCharTest('✪', ['Étoile blanche cerclée', 'Étoile blanche cerclée', 'Étoile blanche cerclée']);
  this.executeCharTest('✫', ['molette noire', 'molette noire', 'molette noire']);
  this.executeCharTest('✬', ['molette blanche', 'molette blanche', 'molette blanche']);
  this.executeCharTest('✭', ['Étoile noire avec contour', 'Étoile noire avec contour', 'Étoile noire avec contour']);
  this.executeCharTest('✮', ['Étoile noire avec gros contour', 'Étoile noire avec gros contour', 'Étoile noire avec gros contour']);
  this.executeCharTest('✯', ['Étoile rayonnante', 'Étoile rayonnante', 'Étoile rayonnante']);
  this.executeCharTest('✰', ['Étoile blanche ombrée', 'Étoile blanche ombrée', 'Étoile blanche ombrée']);
  this.executeCharTest('✱', ['gros astérisque', 'gros astérisque', 'gros astérisque']);
  this.executeCharTest('✲', ['astérisque percé', 'astérisque percé', 'astérisque percé']);
  this.executeCharTest('✳', ['astérisque à huit branches', 'astérisque à huit branches', 'astérisque à huit branches']);
  this.executeCharTest('✴', ['Étoile noire à huit branches', 'Étoile noire à huit branches', 'Étoile noire à huit branches']);
  this.executeCharTest('✵', ['Étoile rayonnante à huit branches', 'Étoile rayonnante à huit branches', 'Étoile rayonnante à huit branches']);
  this.executeCharTest('✶', ['étoile noire à six branches', 'étoile noire à six branches', 'étoile noire à six branches']);
  this.executeCharTest('✹', ['Étoile noire à douze branches', 'Étoile noire à douze branches', 'Étoile noire à douze branches']);
  this.executeCharTest('✺', ['astérisque à seize branches', 'astérisque à seize branches', 'astérisque à seize branches']);
  this.executeCharTest('✻', ['astérisque larmé', 'astérisque larmé', 'astérisque larmé']);
  this.executeCharTest('✼', ['astérisque larmé percé', 'astérisque larmé percé', 'astérisque larmé percé']);
  this.executeCharTest('✽', ['gros astérisque larmé', 'gros astérisque larmé', 'gros astérisque larmé']);
  this.executeCharTest('✾', ['sixtefeuille blanche et noire', 'sixtefeuille blanche et noire', 'sixtefeuille blanche et noire']);
  this.executeCharTest('✿', ['quintefeuille noire', 'quintefeuille noire', 'quintefeuille noire']);
  this.executeCharTest('❀', ['quintefeuille blanche', 'quintefeuille blanche', 'quintefeuille blanche']);
  this.executeCharTest('❁', ['double quartefeuille noire avec contour', 'double quartefeuille noire avec contour', 'double quartefeuille noire avec contour']);
  this.executeCharTest('❂', ['Étoile cerclée percée à huit branches', 'Étoile cerclée percée à huit branches', 'Étoile cerclée percée à huit branches']);
  this.executeCharTest('❃', ['gros astérisque rayonnant larmé', 'gros astérisque rayonnant larmé', 'gros astérisque rayonnant larmé']);
  this.executeCharTest('❄', ['flocon de neige', 'flocon de neige', 'flocon de neige']);
  this.executeCharTest('❅', ['flocon de neige à trois folioles transpercé', 'flocon de neige à trois folioles transpercé', 'flocon de neige à trois folioles transpercé']);
  this.executeCharTest('❆', ['gros flocon de neige à chevrons', 'gros flocon de neige à chevrons', 'gros flocon de neige à chevrons']);
  this.executeCharTest('❇', ['Étincellement', 'Étincellement', 'Étincellement']);
  this.executeCharTest('❈', ['gros étincellement', 'gros étincellement', 'gros étincellement']);
  this.executeCharTest('❉', ['astérisque pommeté', 'astérisque pommeté', 'astérisque pommeté']);
  this.executeCharTest('❊', ['astérisque hélice à huit branches larmées', 'astérisque hélice à huit branches larmées', 'astérisque hélice à huit branches larmées']);
  this.executeCharTest('❋', ['gros astérisque hélice à huit branches larmées', 'gros astérisque hélice à huit branches larmées', 'gros astérisque hélice à huit branches larmées']);
  this.executeCharTest('❌', ['croix grasse', 'croix grasse', 'croix grasse']);
  this.executeCharTest('❍', ['cercle blanc ombré', 'cercle blanc ombré', 'cercle blanc ombré']);
  this.executeCharTest('¼', ['un quart', 'un quart', 'un quart']);
  this.executeCharTest('½', ['un demi', 'un demi', 'un demi']);
  this.executeCharTest('¾', ['trois quarts', 'trois quarts', 'trois quarts']);
  this.executeCharTest('⅐', ['un septième', 'un septième', 'un septième']);
  this.executeCharTest('⅑', ['un neuvième', 'un neuvième', 'un neuvième']);
  this.executeCharTest('⅒', ['un dixième', 'un dixième', 'un dixième']);
  this.executeCharTest('⅓', ['un tiers', 'un tiers', 'un tiers']);
  this.executeCharTest('⅔', ['deux tiers', 'deux tiers', 'deux tiers']);
  this.executeCharTest('⅕', ['un cinquième', 'un cinquième', 'un cinquième']);
  this.executeCharTest('⅖', ['deux cinquièmes', 'deux cinquièmes', 'deux cinquièmes']);
  this.executeCharTest('⅗', ['trois cinquièmes', 'trois cinquièmes', 'trois cinquièmes']);
  this.executeCharTest('⅘', ['quatre cinquièmes', 'quatre cinquièmes', 'quatre cinquièmes']);
  this.executeCharTest('⅙', ['un sixième', 'un sixième', 'un sixième']);
  this.executeCharTest('⅚', ['cinq sixièmes', 'cinq sixièmes', 'cinq sixièmes']);
  this.executeCharTest('⅛', ['un huitième', 'un huitième', 'un huitième']);
  this.executeCharTest('⅜', ['trois huitièmes', 'trois huitièmes', 'trois huitièmes']);
  this.executeCharTest('⅝', ['cinq huitièmes', 'cinq huitièmes', 'cinq huitièmes']);
  this.executeCharTest('⅞', ['sept huitièmes', 'sept huitièmes', 'sept huitièmes']);
  this.executeCharTest('⅟', ['numérateur un', 'numérateur un', 'numérateur un']);
  this.executeCharTest('↉', ['zero tiers', 'zero tiers', 'zero tiers']);
  this.executeCharTest('㉈', ['dix cerclé sur carré noir', 'dix cerclé sur carré noir', 'dix cerclé sur carré noir']);
  this.executeCharTest('㉉', ['vingt cerclé sur carré noir', 'vingt cerclé sur carré noir', 'vingt cerclé sur carré noir']);
  this.executeCharTest('㉊', ['trente cerclé sur carré noir', 'trente cerclé sur carré noir', 'trente cerclé sur carré noir']);
  this.executeCharTest('㉋', ['quarante cerclé sur carré noir', 'quarante cerclé sur carré noir', 'quarante cerclé sur carré noir']);
  this.executeCharTest('㉌', ['cinquante cerclé sur carré noir', 'cinquante cerclé sur carré noir', 'cinquante cerclé sur carré noir']);
  this.executeCharTest('㉍', ['soixante cerclé sur carré noir', 'soixante cerclé sur carré noir', 'soixante cerclé sur carré noir']);
  this.executeCharTest('㉎', ['soixante dix cerclé sur carré noir', 'soixante dix cerclé sur carré noir', 'soixante dix cerclé sur carré noir']);
  this.executeCharTest('㉏', ['quatre vingts cerclé sur carré noir', 'quatre vingts cerclé sur carré noir', 'quatre vingts cerclé sur carré noir']);
};


/**
 * Runs all function name translation tests for mathspeak.
 */
sre.MathspeakCharFrenchTest.prototype.testMathspeakFunctions = function() {
  this.executeCharTest('deg', ['degré', 'degré', 'degré']);
  this.executeCharTest('det', ['déterminant', 'déterminant', 'déterminant']);
  this.executeCharTest('dim', ['dimension', 'dimension', 'dimension']);
  this.executeCharTest('hom', ['homomorphisme', 'homomorphisme', 'homomorphisme']);
  this.executeCharTest('Hom', ['homomorphisme', 'homomorphisme', 'homomorphisme']);
  this.executeCharTest('ker', ['noyau', 'noyau', 'noyau']);
  this.executeCharTest('Tr', ['trace', 'trace', 'trace']);
  this.executeCharTest('tr', ['trace', 'trace', 'trace']);
  this.executeCharTest('log', ['log', 'log', 'log']);
  this.executeCharTest('ln', ['logarithme népérien', 'logarithme népérien', 'logarithme népérien']);
  this.executeCharTest('lg', ['logarithme décimal', 'logarithme décimal', 'logarithme décimal']);
  this.executeCharTest('exp', ['exponentielle', 'exponentielle', 'exponentielle']);
  this.executeCharTest('expt', ['exponentielle', 'exponentielle', 'exponentielle']);
  this.executeCharTest('gcd', ['pgcd', 'pgcd', 'pgcd']);
  this.executeCharTest('lcm', ['ppcm', 'ppcm', 'ppcm']);
  this.executeCharTest('arg', ['argument', 'argument', 'argument']);
  this.executeCharTest('im', ['partie imaginaire', 'partie imaginaire', 'partie imaginaire']);
  this.executeCharTest('re', ['partie réelle', 'partie réelle', 'partie réelle']);
  this.executeCharTest('inf', ['borne inférieure', 'borne inférieure', 'borne inférieure']);
  this.executeCharTest('lim', ['limite', 'limite', 'limite']);
  this.executeCharTest('lim inf', ['limite inferior', 'limite inferior', 'limite inferior']);
  this.executeCharTest('liminf', ['limite inferior', 'limite inferior', 'limite inferior']);
  this.executeCharTest('lim sup', ['limite superior', 'limite superior', 'limite superior']);
  this.executeCharTest('limsup', ['limite superior', 'limite superior', 'limite superior']);
  this.executeCharTest('max', ['maximum', 'maximum', 'maximum']);
  this.executeCharTest('min', ['minimum', 'minimum', 'minimum']);
  this.executeCharTest('sup', ['borne supérieure', 'borne supérieure', 'borne supérieure']);
  this.executeCharTest('injlim', ['limite inductive', 'limite inductive', 'limite inductive']);
  this.executeCharTest('inj lim', ['limite inductive', 'limite inductive', 'limite inductive']);
  this.executeCharTest('projlim', ['limite projective', 'limite projective', 'limite projective']);
  this.executeCharTest('proj lim', ['limite projective', 'limite projective', 'limite projective']);
  this.executeCharTest('mod', ['modulo', 'modulo', 'modulo']);
  this.executeCharTest('Pr', ['probabilité', 'probabilité', 'probabilité']);
  this.executeCharTest('cosh', ['cosinus hyperbolique', 'cosinus hyperbolique', 'cosinus hyperbolique']);
  this.executeCharTest('coth', ['cotangente hyperbolique', 'cotangente hyperbolique', 'cotangente hyperbolique']);
  this.executeCharTest('csch', ['cosécante hyperbolique', 'cosécante hyperbolique', 'cosécante hyperbolique']);
  this.executeCharTest('sech', ['sécante hyperbolique', 'sécante hyperbolique', 'sécante hyperbolique']);
  this.executeCharTest('sinh', ['sinus hyperbolique', 'sinus hyperbolique', 'sinus hyperbolique']);
  this.executeCharTest('tanh', ['tangente hyperbolique', 'tangente hyperbolique', 'tangente hyperbolique']);
  this.executeCharTest('arcosh', ['argument cosinus hyperbolique', 'argument cosinus hyperbolique', 'argument cosinus hyperbolique']);
  this.executeCharTest('arccosh', ['argument cosinus hyperbolique', 'argument cosinus hyperbolique', 'argument cosinus hyperbolique']);
  this.executeCharTest('arcoth', ['argument cotangente hyperbolique', 'argument cotangente hyperbolique', 'argument cotangente hyperbolique']);
  this.executeCharTest('arccoth', ['argument cotangente hyperbolique', 'argument cotangente hyperbolique', 'argument cotangente hyperbolique']);
  this.executeCharTest('arcsch', ['argument cosécante hyperbolique', 'argument cosécante hyperbolique', 'argument cosécante hyperbolique']);
  this.executeCharTest('arccsch', ['argument cosécante hyperbolique', 'argument cosécante hyperbolique', 'argument cosécante hyperbolique']);
  this.executeCharTest('arsech', ['argument sécante hyperbolique', 'argument sécante hyperbolique', 'argument sécante hyperbolique']);
  this.executeCharTest('arcsech', ['argument sécante hyperbolique', 'argument sécante hyperbolique', 'argument sécante hyperbolique']);
  this.executeCharTest('arsinh', ['argument sinus hyperbolique', 'argument sinus hyperbolique', 'argument sinus hyperbolique']);
  this.executeCharTest('arcsinh', ['argument sinus hyperbolique', 'argument sinus hyperbolique', 'argument sinus hyperbolique']);
  this.executeCharTest('artanh', ['argument tangente hyperbolique', 'argument tangente hyperbolique', 'argument tangente hyperbolique']);
  this.executeCharTest('arctanh', ['argument tangente hyperbolique', 'argument tangente hyperbolique', 'argument tangente hyperbolique']);
  this.executeCharTest('cos', ['cosinus', 'cosinus', 'cosinus']);
  this.executeCharTest('cosine', ['cosinus', 'cosinus', 'cosinus']);
  this.executeCharTest('cot', ['cotangente', 'cotangente', 'cotangente']);
  this.executeCharTest('csc', ['cosécante', 'cosécante', 'cosécante']);
  this.executeCharTest('sec', ['sécante', 'sécante', 'sécante']);
  this.executeCharTest('sin', ['sinus', 'sinus', 'sinus']);
  this.executeCharTest('sine', ['sinus', 'sinus', 'sinus']);
  this.executeCharTest('tan', ['tangente', 'tangente', 'tangente']);
  this.executeCharTest('arccos', ['arc cosinus', 'arc cosinus', 'arc cosinus']);
  this.executeCharTest('arccot', ['arc cotangente', 'arc cotangente', 'arc cotangente']);
  this.executeCharTest('arccsc', ['arc cosécante', 'arc cosécante', 'arc cosécante']);
  this.executeCharTest('arcsec', ['arc sécante', 'arc sécante', 'arc sécante']);
  this.executeCharTest('arcsin', ['arc sinus', 'arc sinus', 'arc sinus']);
  this.executeCharTest('arctan', ['arc tangente', 'arc tangente', 'arc tangente']);
};


/**
 * Runs all unit expression translation tests for mathspeak.
 */
sre.MathspeakCharFrenchTest.prototype.testMathspeakUnits = function() {
  this.executeUnitTest('W', ['watts', 'watts', 'watts']);
  this.executeUnitTest('w', ['watts', 'watts', 'watts']);
  this.executeUnitTest('kw', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('kW', ['kilowatt', 'kilowatt', 'kilowatt']);
  this.executeUnitTest('mw', ['milliwatt', 'milliwatt', 'milliwatt']);
  this.executeUnitTest('mW', ['milliwatt', 'milliwatt', 'milliwatt']);
  this.executeUnitTest('kwh', ['kilowatt hour', 'kilowatt hour', 'kilowatt hour']);
  this.executeUnitTest('kWh', ['kilowatt hour', 'kilowatt hour', 'kilowatt hour']);
  this.executeUnitTest('J', ['joules', 'joules', 'joules']);
  this.executeUnitTest('N', ['newtons', 'newtons', 'newtons']);
  this.executeUnitTest('A', ['ampères', 'ampères', 'ampères']);
  this.executeUnitTest('V', ['volts', 'volts', 'volts']);
  this.executeUnitTest('µΩ', ['microohm', 'microohm', 'microohm']);
  this.executeUnitTest('mΩ', ['milliohm', 'milliohm', 'milliohm']);
  this.executeUnitTest('Ω', ['ohms', 'ohms', 'ohms']);
  this.executeUnitTest('Ohm', ['ohms', 'ohms', 'ohms']);
  this.executeUnitTest('kΩ', ['kilohm', 'kilohm', 'kilohm']);
  this.executeUnitTest('KΩ', ['kilohm', 'kilohm', 'kilohm']);
  this.executeUnitTest('MΩ', ['megaohm', 'megaohm', 'megaohm']);
  this.executeUnitTest('GΩ', ['gigaohm', 'gigaohm', 'gigaohm']);
  this.executeUnitTest('mm', ['millimeter', 'millimeter', 'millimeter']);
  this.executeUnitTest('cm', ['centimeter', 'centimeter', 'centimeter']);
  this.executeUnitTest('m', ['mètres', 'mètres', 'mètres']);
  this.executeUnitTest('km', ['kilometer', 'kilometer', 'kilometer']);
  this.executeUnitTest('ft', ['pieds', 'pieds', 'pieds']);
  this.executeUnitTest('ft.', ['pieds', 'pieds', 'pieds']);
  this.executeUnitTest('in', ['pouces', 'pouces', 'pouces']);
  this.executeUnitTest('in.', ['pouces', 'pouces', 'pouces']);
  this.executeUnitTest('mi', ['miles', 'miles', 'miles']);
  this.executeUnitTest('mi.', ['miles', 'miles', 'miles']);
  this.executeUnitTest('yd', ['yards', 'yards', 'yards']);
  this.executeUnitTest('yd.', ['yards', 'yards', 'yards']);
  this.executeUnitTest('n.m.', ['nautical mile', 'nautical mile', 'nautical mile']);
  this.executeUnitTest('b', ['bit', 'bit', 'bit']);
  this.executeUnitTest('B', ['byte', 'byte', 'byte']);
  this.executeUnitTest('KB', ['kilobyte', 'kilobyte', 'kilobyte']);
  this.executeUnitTest('MB', ['megabyte', 'megabyte', 'megabyte']);
  this.executeUnitTest('GB', ['gigabyte', 'gigabyte', 'gigabyte']);
  this.executeUnitTest('TB', ['terabyte', 'terabyte', 'terabyte']);
  this.executeUnitTest('doz', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('doz.', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('dz', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('dz.', ['dozen', 'dozen', 'dozen']);
  this.executeUnitTest('sq', ['square', 'square', 'square']);
  this.executeUnitTest('sq.', ['square', 'square', 'square']);
  this.executeUnitTest('ha', ['hectare', 'hectare', 'hectare']);
  this.executeUnitTest('kt', ['knot', 'knot', 'knot']);
  this.executeUnitTest('kt.', ['knot', 'knot', 'knot']);
  this.executeUnitTest('mph', ['miles par heure', 'miles par heure', 'miles par heure']);
  this.executeUnitTest('rpm', ['revolutions per minute', 'revolutions per minute', 'revolutions per minute']);
  this.executeUnitTest('kmh', ['kilometers per hour', 'kilometers per hour', 'kilometers per hour']);
  this.executeUnitTest('F', ['farads', 'farads', 'farads']);
  this.executeUnitTest('F.', ['farads', 'farads', 'farads']);
  this.executeUnitTest('°F', ['farads', 'farads', 'farads']);
  this.executeUnitTest('C', ['coulombs', 'coulombs', 'coulombs']);
  this.executeUnitTest('°C', ['coulombs', 'coulombs', 'coulombs']);
  this.executeUnitTest('K', ['kelvins', 'kelvins', 'kelvins']);
  this.executeUnitTest('°K', ['kelvins', 'kelvins', 'kelvins']);
  this.executeUnitTest('ns', ['nanosecond', 'nanosecond', 'nanosecond']);
  this.executeUnitTest('µs', ['microsecond', 'microsecond', 'microsecond']);
  this.executeUnitTest('ms', ['millisecond', 'millisecond', 'millisecond']);
  this.executeUnitTest('s', ['secondes', 'secondes', 'secondes']);
  this.executeUnitTest('min', ['minute', 'minute', 'minute']);
  this.executeUnitTest('h', ['hour', 'hour', 'hour']);
  this.executeUnitTest('hr', ['hour', 'hour', 'hour']);
  this.executeUnitTest('bbl.', ['barils', 'barils', 'barils']);
  this.executeUnitTest('bbl', ['barils', 'barils', 'barils']);
  this.executeUnitTest('cu', ['cubic', 'cubic', 'cubic']);
  this.executeUnitTest('cu.', ['cubic', 'cubic', 'cubic']);
  this.executeUnitTest('fl. oz.', ['fluid ounce', 'fluid ounce', 'fluid ounce']);
  this.executeUnitTest('gal', ['gallons', 'gallons', 'gallons']);
  this.executeUnitTest('gal.', ['gallons', 'gallons', 'gallons']);
  this.executeUnitTest('pt', ['pintes', 'pintes', 'pintes']);
  this.executeUnitTest('pt.', ['pintes', 'pintes', 'pintes']);
  this.executeUnitTest('qt', ['quarts', 'quarts', 'quarts']);
  this.executeUnitTest('qt.', ['quarts', 'quarts', 'quarts']);
  this.executeUnitTest('tbsp', ['cuillères de table', 'cuillères de table', 'cuillères de table']);
  this.executeUnitTest('tbsp.', ['cuillères de table', 'cuillères de table', 'cuillères de table']);
  this.executeUnitTest('tsp', ['cuillèes à thé', 'cuillèes à thé', 'cuillèes à thé']);
  this.executeUnitTest('tsp.', ['cuillèes à thé', 'cuillèes à thé', 'cuillèes à thé']);
  this.executeUnitTest('cc', ['cubic centimeter', 'cubic centimeter', 'cubic centimeter']);
  this.executeUnitTest('kl', ['kiloliter', 'kiloliter', 'kiloliter']);
  this.executeUnitTest('l', ['litres', 'litres', 'litres']);
  this.executeUnitTest('ml', ['milliliter', 'milliliter', 'milliliter']);
  this.executeUnitTest('lb', ['livres', 'livres', 'livres']);
  this.executeUnitTest('lb.', ['livres', 'livres', 'livres']);
  this.executeUnitTest('LT', ['long ton', 'long ton', 'long ton']);
  this.executeUnitTest('L.T.', ['long ton', 'long ton', 'long ton']);
  this.executeUnitTest('oz', ['onces', 'onces', 'onces']);
  this.executeUnitTest('oz.', ['onces', 'onces', 'onces']);
  this.executeUnitTest('g', ['grains', 'grains', 'grains']);
  this.executeUnitTest('gr', ['grains', 'grains', 'grains']);
  this.executeUnitTest('kg', ['kilogram', 'kilogram', 'kilogram']);
  this.executeUnitTest('mcg', ['microgram', 'microgram', 'microgram']);
  this.executeUnitTest('µg', ['microgram', 'microgram', 'microgram']);
  this.executeUnitTest('mg', ['milligram', 'milligram', 'milligram']);
  this.executeUnitTest('t', ['tonnes', 'tonnes', 'tonnes']);
  this.executeUnitTest('T', ['tonnes', 'tonnes', 'tonnes']);
};
