// Copyright 2020 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// This work was sponsored by ETH Zurich
//

/**
 * @fileoverview Abstract class for test cases of single characters.
 * @author Volker.Sorge@gmail.com (Volker Sorge)
 */

goog.provide('sre.MathspeakCharGermanTest');

goog.require('sre.AbstractCharacterTest');



/**
 * @constructor
 * @extends {sre.AbstractCharacterTest}
 */
sre.MathspeakCharGermanTest = function() {
  sre.MathspeakCharGermanTest.base(this, 'constructor');

  this.locale = 'de';
  this.domain = 'mathspeak';

  /**
   * @type {Array.<string>}
   */
  this.styles = ['default', 'brief', 'sbrief'];

  this.setActive('MathspeakCharactersGerman');
};
goog.inherits(sre.MathspeakCharGermanTest, sre.AbstractCharacterTest);


sre.MathspeakCharGermanTest.prototype.testMathspeakChars = function() {
  this.executeCharTest('0', ['0', '0', '0']);
  this.executeCharTest('1', ['1', '1', '1']);
  this.executeCharTest('2', ['2', '2', '2']);
  this.executeCharTest('3', ['3', '3', '3']);
  this.executeCharTest('4', ['4', '4', '4']);
  this.executeCharTest('5', ['5', '5', '5']);
  this.executeCharTest('6', ['6', '6', '6']);
  this.executeCharTest('7', ['7', '7', '7']);
  this.executeCharTest('8', ['8', '8', '8']);
  this.executeCharTest('9', ['9', '9', '9']);
  this.executeCharTest('𝐀', ['fettes großes A', 'fettes großes A', 'fettes großes A']);
  this.executeCharTest('𝐁', ['fettes großes B', 'fettes großes B', 'fettes großes B']);
  this.executeCharTest('𝐂', ['fettes großes C', 'fettes großes C', 'fettes großes C']);
  this.executeCharTest('𝐃', ['fettes großes D', 'fettes großes D', 'fettes großes D']);
  this.executeCharTest('𝐄', ['fettes großes E', 'fettes großes E', 'fettes großes E']);
  this.executeCharTest('𝐅', ['fettes großes F', 'fettes großes F', 'fettes großes F']);
  this.executeCharTest('𝐆', ['fettes großes G', 'fettes großes G', 'fettes großes G']);
  this.executeCharTest('𝐇', ['fettes großes H', 'fettes großes H', 'fettes großes H']);
  this.executeCharTest('𝐈', ['fettes großes I', 'fettes großes I', 'fettes großes I']);
  this.executeCharTest('𝐉', ['fettes großes J', 'fettes großes J', 'fettes großes J']);
  this.executeCharTest('𝐊', ['fettes großes K', 'fettes großes K', 'fettes großes K']);
  this.executeCharTest('𝐋', ['fettes großes L', 'fettes großes L', 'fettes großes L']);
  this.executeCharTest('𝐌', ['fettes großes M', 'fettes großes M', 'fettes großes M']);
  this.executeCharTest('𝐍', ['fettes großes N', 'fettes großes N', 'fettes großes N']);
  this.executeCharTest('𝐎', ['fettes großes O', 'fettes großes O', 'fettes großes O']);
  this.executeCharTest('𝐏', ['fettes großes P', 'fettes großes P', 'fettes großes P']);
  this.executeCharTest('𝐐', ['fettes großes Q', 'fettes großes Q', 'fettes großes Q']);
  this.executeCharTest('𝐑', ['fettes großes R', 'fettes großes R', 'fettes großes R']);
  this.executeCharTest('𝐒', ['fettes großes S', 'fettes großes S', 'fettes großes S']);
  this.executeCharTest('𝐓', ['fettes großes T', 'fettes großes T', 'fettes großes T']);
  this.executeCharTest('𝐔', ['fettes großes U', 'fettes großes U', 'fettes großes U']);
  this.executeCharTest('𝐕', ['fettes großes V', 'fettes großes V', 'fettes großes V']);
  this.executeCharTest('𝐖', ['fettes großes W', 'fettes großes W', 'fettes großes W']);
  this.executeCharTest('𝐗', ['fettes großes X', 'fettes großes X', 'fettes großes X']);
  this.executeCharTest('𝐘', ['fettes großes Y', 'fettes großes Y', 'fettes großes Y']);
  this.executeCharTest('𝐙', ['fettes großes Z', 'fettes großes Z', 'fettes großes Z']);
  this.executeCharTest('𝐚', ['fettes a', 'fettes a', 'fettes a']);
  this.executeCharTest('𝐛', ['fettes b', 'fettes b', 'fettes b']);
  this.executeCharTest('𝐜', ['fettes c', 'fettes c', 'fettes c']);
  this.executeCharTest('𝐝', ['fettes d', 'fettes d', 'fettes d']);
  this.executeCharTest('𝐞', ['fettes e', 'fettes e', 'fettes e']);
  this.executeCharTest('𝐟', ['fettes f', 'fettes f', 'fettes f']);
  this.executeCharTest('𝐠', ['fettes g', 'fettes g', 'fettes g']);
  this.executeCharTest('𝐡', ['fettes h', 'fettes h', 'fettes h']);
  this.executeCharTest('𝐢', ['fettes i', 'fettes i', 'fettes i']);
  this.executeCharTest('𝐣', ['fettes j', 'fettes j', 'fettes j']);
  this.executeCharTest('𝐤', ['fettes k', 'fettes k', 'fettes k']);
  this.executeCharTest('𝐥', ['fettes l', 'fettes l', 'fettes l']);
  this.executeCharTest('𝐦', ['fettes m', 'fettes m', 'fettes m']);
  this.executeCharTest('𝐧', ['fettes n', 'fettes n', 'fettes n']);
  this.executeCharTest('𝐨', ['fettes o', 'fettes o', 'fettes o']);
  this.executeCharTest('𝐩', ['fettes p', 'fettes p', 'fettes p']);
  this.executeCharTest('𝐪', ['fettes q', 'fettes q', 'fettes q']);
  this.executeCharTest('𝐫', ['fettes r', 'fettes r', 'fettes r']);
  this.executeCharTest('𝐬', ['fettes s', 'fettes s', 'fettes s']);
  this.executeCharTest('𝐭', ['fettes t', 'fettes t', 'fettes t']);
  this.executeCharTest('𝐮', ['fettes u', 'fettes u', 'fettes u']);
  this.executeCharTest('𝐯', ['fettes v', 'fettes v', 'fettes v']);
  this.executeCharTest('𝐰', ['fettes w', 'fettes w', 'fettes w']);
  this.executeCharTest('𝐱', ['fettes x', 'fettes x', 'fettes x']);
  this.executeCharTest('𝐲', ['fettes y', 'fettes y', 'fettes y']);
  this.executeCharTest('𝐳', ['fettes z', 'fettes z', 'fettes z']);
  this.executeCharTest('𝕬', ['fettes Fraktur großes A', 'fettes Fraktur großes A', 'fettes Fraktur großes A']);
  this.executeCharTest('𝕭', ['fettes Fraktur großes B', 'fettes Fraktur großes B', 'fettes Fraktur großes B']);
  this.executeCharTest('𝕮', ['fettes Fraktur großes C', 'fettes Fraktur großes C', 'fettes Fraktur großes C']);
  this.executeCharTest('𝕯', ['fettes Fraktur großes D', 'fettes Fraktur großes D', 'fettes Fraktur großes D']);
  this.executeCharTest('𝕰', ['fettes Fraktur großes E', 'fettes Fraktur großes E', 'fettes Fraktur großes E']);
  this.executeCharTest('𝕱', ['fettes Fraktur großes F', 'fettes Fraktur großes F', 'fettes Fraktur großes F']);
  this.executeCharTest('𝕲', ['fettes Fraktur großes G', 'fettes Fraktur großes G', 'fettes Fraktur großes G']);
  this.executeCharTest('𝕳', ['fettes Fraktur großes H', 'fettes Fraktur großes H', 'fettes Fraktur großes H']);
  this.executeCharTest('𝕴', ['fettes Fraktur großes I', 'fettes Fraktur großes I', 'fettes Fraktur großes I']);
  this.executeCharTest('𝕵', ['fettes Fraktur großes J', 'fettes Fraktur großes J', 'fettes Fraktur großes J']);
  this.executeCharTest('𝕶', ['fettes Fraktur großes K', 'fettes Fraktur großes K', 'fettes Fraktur großes K']);
  this.executeCharTest('𝕷', ['fettes Fraktur großes L', 'fettes Fraktur großes L', 'fettes Fraktur großes L']);
  this.executeCharTest('𝕸', ['fettes Fraktur großes M', 'fettes Fraktur großes M', 'fettes Fraktur großes M']);
  this.executeCharTest('𝕹', ['fettes Fraktur großes N', 'fettes Fraktur großes N', 'fettes Fraktur großes N']);
  this.executeCharTest('𝕺', ['fettes Fraktur großes O', 'fettes Fraktur großes O', 'fettes Fraktur großes O']);
  this.executeCharTest('𝕻', ['fettes Fraktur großes P', 'fettes Fraktur großes P', 'fettes Fraktur großes P']);
  this.executeCharTest('𝕼', ['fettes Fraktur großes Q', 'fettes Fraktur großes Q', 'fettes Fraktur großes Q']);
  this.executeCharTest('𝕽', ['fettes Fraktur großes R', 'fettes Fraktur großes R', 'fettes Fraktur großes R']);
  this.executeCharTest('𝕾', ['fettes Fraktur großes S', 'fettes Fraktur großes S', 'fettes Fraktur großes S']);
  this.executeCharTest('𝕿', ['fettes Fraktur großes T', 'fettes Fraktur großes T', 'fettes Fraktur großes T']);
  this.executeCharTest('𝖀', ['fettes Fraktur großes U', 'fettes Fraktur großes U', 'fettes Fraktur großes U']);
  this.executeCharTest('𝖁', ['fettes Fraktur großes V', 'fettes Fraktur großes V', 'fettes Fraktur großes V']);
  this.executeCharTest('𝖂', ['fettes Fraktur großes W', 'fettes Fraktur großes W', 'fettes Fraktur großes W']);
  this.executeCharTest('𝖃', ['fettes Fraktur großes X', 'fettes Fraktur großes X', 'fettes Fraktur großes X']);
  this.executeCharTest('𝖄', ['fettes Fraktur großes Y', 'fettes Fraktur großes Y', 'fettes Fraktur großes Y']);
  this.executeCharTest('𝖅', ['fettes Fraktur großes Z', 'fettes Fraktur großes Z', 'fettes Fraktur großes Z']);
  this.executeCharTest('𝖆', ['fettes Fraktur a', 'fettes Fraktur a', 'fettes Fraktur a']);
  this.executeCharTest('𝖇', ['fettes Fraktur b', 'fettes Fraktur b', 'fettes Fraktur b']);
  this.executeCharTest('𝖈', ['fettes Fraktur c', 'fettes Fraktur c', 'fettes Fraktur c']);
  this.executeCharTest('𝖉', ['fettes Fraktur d', 'fettes Fraktur d', 'fettes Fraktur d']);
  this.executeCharTest('𝖊', ['fettes Fraktur e', 'fettes Fraktur e', 'fettes Fraktur e']);
  this.executeCharTest('𝖋', ['fettes Fraktur f', 'fettes Fraktur f', 'fettes Fraktur f']);
  this.executeCharTest('𝖌', ['fettes Fraktur g', 'fettes Fraktur g', 'fettes Fraktur g']);
  this.executeCharTest('𝖍', ['fettes Fraktur h', 'fettes Fraktur h', 'fettes Fraktur h']);
  this.executeCharTest('𝖎', ['fettes Fraktur i', 'fettes Fraktur i', 'fettes Fraktur i']);
  this.executeCharTest('𝖏', ['fettes Fraktur j', 'fettes Fraktur j', 'fettes Fraktur j']);
  this.executeCharTest('𝖐', ['fettes Fraktur k', 'fettes Fraktur k', 'fettes Fraktur k']);
  this.executeCharTest('𝖑', ['fettes Fraktur l', 'fettes Fraktur l', 'fettes Fraktur l']);
  this.executeCharTest('𝖒', ['fettes Fraktur m', 'fettes Fraktur m', 'fettes Fraktur m']);
  this.executeCharTest('𝖓', ['fettes Fraktur n', 'fettes Fraktur n', 'fettes Fraktur n']);
  this.executeCharTest('𝖔', ['fettes Fraktur o', 'fettes Fraktur o', 'fettes Fraktur o']);
  this.executeCharTest('𝖕', ['fettes Fraktur p', 'fettes Fraktur p', 'fettes Fraktur p']);
  this.executeCharTest('𝖖', ['fettes Fraktur q', 'fettes Fraktur q', 'fettes Fraktur q']);
  this.executeCharTest('𝖗', ['fettes Fraktur r', 'fettes Fraktur r', 'fettes Fraktur r']);
  this.executeCharTest('𝖘', ['fettes Fraktur s', 'fettes Fraktur s', 'fettes Fraktur s']);
  this.executeCharTest('𝖙', ['fettes Fraktur t', 'fettes Fraktur t', 'fettes Fraktur t']);
  this.executeCharTest('𝖚', ['fettes Fraktur u', 'fettes Fraktur u', 'fettes Fraktur u']);
  this.executeCharTest('𝖛', ['fettes Fraktur v', 'fettes Fraktur v', 'fettes Fraktur v']);
  this.executeCharTest('𝖜', ['fettes Fraktur w', 'fettes Fraktur w', 'fettes Fraktur w']);
  this.executeCharTest('𝖝', ['fettes Fraktur x', 'fettes Fraktur x', 'fettes Fraktur x']);
  this.executeCharTest('𝖞', ['fettes Fraktur y', 'fettes Fraktur y', 'fettes Fraktur y']);
  this.executeCharTest('𝖟', ['fettes Fraktur z', 'fettes Fraktur z', 'fettes Fraktur z']);
  this.executeCharTest('𝑨', ['fettkursives großes A', 'fettkursives großes A', 'fettkursives großes A']);
  this.executeCharTest('𝑩', ['fettkursives großes B', 'fettkursives großes B', 'fettkursives großes B']);
  this.executeCharTest('𝑪', ['fettkursives großes C', 'fettkursives großes C', 'fettkursives großes C']);
  this.executeCharTest('𝑫', ['fettkursives großes D', 'fettkursives großes D', 'fettkursives großes D']);
  this.executeCharTest('𝑬', ['fettkursives großes E', 'fettkursives großes E', 'fettkursives großes E']);
  this.executeCharTest('𝑭', ['fettkursives großes F', 'fettkursives großes F', 'fettkursives großes F']);
  this.executeCharTest('𝑮', ['fettkursives großes G', 'fettkursives großes G', 'fettkursives großes G']);
  this.executeCharTest('𝑯', ['fettkursives großes H', 'fettkursives großes H', 'fettkursives großes H']);
  this.executeCharTest('𝑰', ['fettkursives großes I', 'fettkursives großes I', 'fettkursives großes I']);
  this.executeCharTest('𝑱', ['fettkursives großes J', 'fettkursives großes J', 'fettkursives großes J']);
  this.executeCharTest('𝑲', ['fettkursives großes K', 'fettkursives großes K', 'fettkursives großes K']);
  this.executeCharTest('𝑳', ['fettkursives großes L', 'fettkursives großes L', 'fettkursives großes L']);
  this.executeCharTest('𝑴', ['fettkursives großes M', 'fettkursives großes M', 'fettkursives großes M']);
  this.executeCharTest('𝑵', ['fettkursives großes N', 'fettkursives großes N', 'fettkursives großes N']);
  this.executeCharTest('𝑶', ['fettkursives großes O', 'fettkursives großes O', 'fettkursives großes O']);
  this.executeCharTest('𝑷', ['fettkursives großes P', 'fettkursives großes P', 'fettkursives großes P']);
  this.executeCharTest('𝑸', ['fettkursives großes Q', 'fettkursives großes Q', 'fettkursives großes Q']);
  this.executeCharTest('𝑹', ['fettkursives großes R', 'fettkursives großes R', 'fettkursives großes R']);
  this.executeCharTest('𝑺', ['fettkursives großes S', 'fettkursives großes S', 'fettkursives großes S']);
  this.executeCharTest('𝑻', ['fettkursives großes T', 'fettkursives großes T', 'fettkursives großes T']);
  this.executeCharTest('𝑼', ['fettkursives großes U', 'fettkursives großes U', 'fettkursives großes U']);
  this.executeCharTest('𝑽', ['fettkursives großes V', 'fettkursives großes V', 'fettkursives großes V']);
  this.executeCharTest('𝑾', ['fettkursives großes W', 'fettkursives großes W', 'fettkursives großes W']);
  this.executeCharTest('𝑿', ['fettkursives großes X', 'fettkursives großes X', 'fettkursives großes X']);
  this.executeCharTest('𝒀', ['fettkursives großes Y', 'fettkursives großes Y', 'fettkursives großes Y']);
  this.executeCharTest('𝒁', ['fettkursives großes Z', 'fettkursives großes Z', 'fettkursives großes Z']);
  this.executeCharTest('𝒂', ['fettkursives a', 'fettkursives a', 'fettkursives a']);
  this.executeCharTest('𝒃', ['fettkursives b', 'fettkursives b', 'fettkursives b']);
  this.executeCharTest('𝒄', ['fettkursives c', 'fettkursives c', 'fettkursives c']);
  this.executeCharTest('𝒅', ['fettkursives d', 'fettkursives d', 'fettkursives d']);
  this.executeCharTest('𝒆', ['fettkursives e', 'fettkursives e', 'fettkursives e']);
  this.executeCharTest('𝒇', ['fettkursives f', 'fettkursives f', 'fettkursives f']);
  this.executeCharTest('𝒈', ['fettkursives g', 'fettkursives g', 'fettkursives g']);
  this.executeCharTest('𝒉', ['fettkursives h', 'fettkursives h', 'fettkursives h']);
  this.executeCharTest('𝒊', ['fettkursives i', 'fettkursives i', 'fettkursives i']);
  this.executeCharTest('𝒋', ['fettkursives j', 'fettkursives j', 'fettkursives j']);
  this.executeCharTest('𝒌', ['fettkursives k', 'fettkursives k', 'fettkursives k']);
  this.executeCharTest('𝒍', ['fettkursives l', 'fettkursives l', 'fettkursives l']);
  this.executeCharTest('𝒎', ['fettkursives m', 'fettkursives m', 'fettkursives m']);
  this.executeCharTest('𝒏', ['fettkursives n', 'fettkursives n', 'fettkursives n']);
  this.executeCharTest('𝒐', ['fettkursives o', 'fettkursives o', 'fettkursives o']);
  this.executeCharTest('𝒑', ['fettkursives p', 'fettkursives p', 'fettkursives p']);
  this.executeCharTest('𝒒', ['fettkursives q', 'fettkursives q', 'fettkursives q']);
  this.executeCharTest('𝒓', ['fettkursives r', 'fettkursives r', 'fettkursives r']);
  this.executeCharTest('𝒔', ['fettkursives s', 'fettkursives s', 'fettkursives s']);
  this.executeCharTest('𝒕', ['fettkursives t', 'fettkursives t', 'fettkursives t']);
  this.executeCharTest('𝒖', ['fettkursives u', 'fettkursives u', 'fettkursives u']);
  this.executeCharTest('𝒗', ['fettkursives v', 'fettkursives v', 'fettkursives v']);
  this.executeCharTest('𝒘', ['fettkursives w', 'fettkursives w', 'fettkursives w']);
  this.executeCharTest('𝒙', ['fettkursives x', 'fettkursives x', 'fettkursives x']);
  this.executeCharTest('𝒚', ['fettkursives y', 'fettkursives y', 'fettkursives y']);
  this.executeCharTest('𝒛', ['fettkursives z', 'fettkursives z', 'fettkursives z']);
  this.executeCharTest('𝓐', ['fettes Schreibschrift großes A', 'fettes Schreibschrift großes A', 'fettes Schreibschrift großes A']);
  this.executeCharTest('𝓑', ['fettes Schreibschrift großes B', 'fettes Schreibschrift großes B', 'fettes Schreibschrift großes B']);
  this.executeCharTest('𝓒', ['fettes Schreibschrift großes C', 'fettes Schreibschrift großes C', 'fettes Schreibschrift großes C']);
  this.executeCharTest('𝓓', ['fettes Schreibschrift großes D', 'fettes Schreibschrift großes D', 'fettes Schreibschrift großes D']);
  this.executeCharTest('𝓔', ['fettes Schreibschrift großes E', 'fettes Schreibschrift großes E', 'fettes Schreibschrift großes E']);
  this.executeCharTest('𝓕', ['fettes Schreibschrift großes F', 'fettes Schreibschrift großes F', 'fettes Schreibschrift großes F']);
  this.executeCharTest('𝓖', ['fettes Schreibschrift großes G', 'fettes Schreibschrift großes G', 'fettes Schreibschrift großes G']);
  this.executeCharTest('𝓗', ['fettes Schreibschrift großes H', 'fettes Schreibschrift großes H', 'fettes Schreibschrift großes H']);
  this.executeCharTest('𝓘', ['fettes Schreibschrift großes I', 'fettes Schreibschrift großes I', 'fettes Schreibschrift großes I']);
  this.executeCharTest('𝓙', ['fettes Schreibschrift großes J', 'fettes Schreibschrift großes J', 'fettes Schreibschrift großes J']);
  this.executeCharTest('𝓚', ['fettes Schreibschrift großes K', 'fettes Schreibschrift großes K', 'fettes Schreibschrift großes K']);
  this.executeCharTest('𝓛', ['fettes Schreibschrift großes L', 'fettes Schreibschrift großes L', 'fettes Schreibschrift großes L']);
  this.executeCharTest('𝓜', ['fettes Schreibschrift großes M', 'fettes Schreibschrift großes M', 'fettes Schreibschrift großes M']);
  this.executeCharTest('𝓝', ['fettes Schreibschrift großes N', 'fettes Schreibschrift großes N', 'fettes Schreibschrift großes N']);
  this.executeCharTest('𝓞', ['fettes Schreibschrift großes O', 'fettes Schreibschrift großes O', 'fettes Schreibschrift großes O']);
  this.executeCharTest('𝓟', ['fettes Schreibschrift großes P', 'fettes Schreibschrift großes P', 'fettes Schreibschrift großes P']);
  this.executeCharTest('𝓠', ['fettes Schreibschrift großes Q', 'fettes Schreibschrift großes Q', 'fettes Schreibschrift großes Q']);
  this.executeCharTest('𝓡', ['fettes Schreibschrift großes R', 'fettes Schreibschrift großes R', 'fettes Schreibschrift großes R']);
  this.executeCharTest('𝓢', ['fettes Schreibschrift großes S', 'fettes Schreibschrift großes S', 'fettes Schreibschrift großes S']);
  this.executeCharTest('𝓣', ['fettes Schreibschrift großes T', 'fettes Schreibschrift großes T', 'fettes Schreibschrift großes T']);
  this.executeCharTest('𝓤', ['fettes Schreibschrift großes U', 'fettes Schreibschrift großes U', 'fettes Schreibschrift großes U']);
  this.executeCharTest('𝓥', ['fettes Schreibschrift großes V', 'fettes Schreibschrift großes V', 'fettes Schreibschrift großes V']);
  this.executeCharTest('𝓦', ['fettes Schreibschrift großes W', 'fettes Schreibschrift großes W', 'fettes Schreibschrift großes W']);
  this.executeCharTest('𝓧', ['fettes Schreibschrift großes X', 'fettes Schreibschrift großes X', 'fettes Schreibschrift großes X']);
  this.executeCharTest('𝓨', ['fettes Schreibschrift großes Y', 'fettes Schreibschrift großes Y', 'fettes Schreibschrift großes Y']);
  this.executeCharTest('𝓩', ['fettes Schreibschrift großes Z', 'fettes Schreibschrift großes Z', 'fettes Schreibschrift großes Z']);
  this.executeCharTest('𝓪', ['fettes Schreibschrift a', 'fettes Schreibschrift a', 'fettes Schreibschrift a']);
  this.executeCharTest('𝓫', ['fettes Schreibschrift b', 'fettes Schreibschrift b', 'fettes Schreibschrift b']);
  this.executeCharTest('𝓬', ['fettes Schreibschrift c', 'fettes Schreibschrift c', 'fettes Schreibschrift c']);
  this.executeCharTest('𝓭', ['fettes Schreibschrift d', 'fettes Schreibschrift d', 'fettes Schreibschrift d']);
  this.executeCharTest('𝓮', ['fettes Schreibschrift e', 'fettes Schreibschrift e', 'fettes Schreibschrift e']);
  this.executeCharTest('𝓯', ['fettes Schreibschrift f', 'fettes Schreibschrift f', 'fettes Schreibschrift f']);
  this.executeCharTest('𝓰', ['fettes Schreibschrift g', 'fettes Schreibschrift g', 'fettes Schreibschrift g']);
  this.executeCharTest('𝓱', ['fettes Schreibschrift h', 'fettes Schreibschrift h', 'fettes Schreibschrift h']);
  this.executeCharTest('𝓲', ['fettes Schreibschrift i', 'fettes Schreibschrift i', 'fettes Schreibschrift i']);
  this.executeCharTest('𝓳', ['fettes Schreibschrift j', 'fettes Schreibschrift j', 'fettes Schreibschrift j']);
  this.executeCharTest('𝓴', ['fettes Schreibschrift k', 'fettes Schreibschrift k', 'fettes Schreibschrift k']);
  this.executeCharTest('𝓵', ['fettes Schreibschrift l', 'fettes Schreibschrift l', 'fettes Schreibschrift l']);
  this.executeCharTest('𝓶', ['fettes Schreibschrift m', 'fettes Schreibschrift m', 'fettes Schreibschrift m']);
  this.executeCharTest('𝓷', ['fettes Schreibschrift n', 'fettes Schreibschrift n', 'fettes Schreibschrift n']);
  this.executeCharTest('𝓸', ['fettes Schreibschrift o', 'fettes Schreibschrift o', 'fettes Schreibschrift o']);
  this.executeCharTest('𝓹', ['fettes Schreibschrift p', 'fettes Schreibschrift p', 'fettes Schreibschrift p']);
  this.executeCharTest('𝓺', ['fettes Schreibschrift q', 'fettes Schreibschrift q', 'fettes Schreibschrift q']);
  this.executeCharTest('𝓻', ['fettes Schreibschrift r', 'fettes Schreibschrift r', 'fettes Schreibschrift r']);
  this.executeCharTest('𝓼', ['fettes Schreibschrift s', 'fettes Schreibschrift s', 'fettes Schreibschrift s']);
  this.executeCharTest('𝓽', ['fettes Schreibschrift t', 'fettes Schreibschrift t', 'fettes Schreibschrift t']);
  this.executeCharTest('𝓾', ['fettes Schreibschrift u', 'fettes Schreibschrift u', 'fettes Schreibschrift u']);
  this.executeCharTest('𝓿', ['fettes Schreibschrift v', 'fettes Schreibschrift v', 'fettes Schreibschrift v']);
  this.executeCharTest('𝔀', ['fettes Schreibschrift w', 'fettes Schreibschrift w', 'fettes Schreibschrift w']);
  this.executeCharTest('𝔁', ['fettes Schreibschrift x', 'fettes Schreibschrift x', 'fettes Schreibschrift x']);
  this.executeCharTest('𝔂', ['fettes Schreibschrift y', 'fettes Schreibschrift y', 'fettes Schreibschrift y']);
  this.executeCharTest('𝔃', ['fettes Schreibschrift z', 'fettes Schreibschrift z', 'fettes Schreibschrift z']);
  this.executeCharTest('𝔸', ['großes A mit Doppelstrich', 'großes A mit Doppelstrich', 'großes A mit Doppelstrich']);
  this.executeCharTest('𝔹', ['großes B mit Doppelstrich', 'großes B mit Doppelstrich', 'großes B mit Doppelstrich']);
  this.executeCharTest('ℂ', ['großes C mit Doppelstrich', 'großes C mit Doppelstrich', 'großes C mit Doppelstrich']);
  this.executeCharTest('𝔻', ['großes D mit Doppelstrich', 'großes D mit Doppelstrich', 'großes D mit Doppelstrich']);
  this.executeCharTest('𝔼', ['großes E mit Doppelstrich', 'großes E mit Doppelstrich', 'großes E mit Doppelstrich']);
  this.executeCharTest('𝔽', ['großes F mit Doppelstrich', 'großes F mit Doppelstrich', 'großes F mit Doppelstrich']);
  this.executeCharTest('𝔾', ['großes G mit Doppelstrich', 'großes G mit Doppelstrich', 'großes G mit Doppelstrich']);
  this.executeCharTest('ℍ', ['großes H mit Doppelstrich', 'großes H mit Doppelstrich', 'großes H mit Doppelstrich']);
  this.executeCharTest('𝕀', ['großes I mit Doppelstrich', 'großes I mit Doppelstrich', 'großes I mit Doppelstrich']);
  this.executeCharTest('𝕁', ['großes J mit Doppelstrich', 'großes J mit Doppelstrich', 'großes J mit Doppelstrich']);
  this.executeCharTest('𝕂', ['großes K mit Doppelstrich', 'großes K mit Doppelstrich', 'großes K mit Doppelstrich']);
  this.executeCharTest('𝕃', ['großes L mit Doppelstrich', 'großes L mit Doppelstrich', 'großes L mit Doppelstrich']);
  this.executeCharTest('𝕄', ['großes M mit Doppelstrich', 'großes M mit Doppelstrich', 'großes M mit Doppelstrich']);
  this.executeCharTest('ℕ', ['großes N mit Doppelstrich', 'großes N mit Doppelstrich', 'großes N mit Doppelstrich']);
  this.executeCharTest('𝕆', ['großes O mit Doppelstrich', 'großes O mit Doppelstrich', 'großes O mit Doppelstrich']);
  this.executeCharTest('ℙ', ['großes P mit Doppelstrich', 'großes P mit Doppelstrich', 'großes P mit Doppelstrich']);
  this.executeCharTest('ℚ', ['großes Q mit Doppelstrich', 'großes Q mit Doppelstrich', 'großes Q mit Doppelstrich']);
  this.executeCharTest('ℝ', ['großes R mit Doppelstrich', 'großes R mit Doppelstrich', 'großes R mit Doppelstrich']);
  this.executeCharTest('𝕊', ['großes S mit Doppelstrich', 'großes S mit Doppelstrich', 'großes S mit Doppelstrich']);
  this.executeCharTest('𝕋', ['großes T mit Doppelstrich', 'großes T mit Doppelstrich', 'großes T mit Doppelstrich']);
  this.executeCharTest('𝕌', ['großes U mit Doppelstrich', 'großes U mit Doppelstrich', 'großes U mit Doppelstrich']);
  this.executeCharTest('𝕍', ['großes V mit Doppelstrich', 'großes V mit Doppelstrich', 'großes V mit Doppelstrich']);
  this.executeCharTest('𝕎', ['großes W mit Doppelstrich', 'großes W mit Doppelstrich', 'großes W mit Doppelstrich']);
  this.executeCharTest('𝕏', ['großes X mit Doppelstrich', 'großes X mit Doppelstrich', 'großes X mit Doppelstrich']);
  this.executeCharTest('𝕐', ['großes Y mit Doppelstrich', 'großes Y mit Doppelstrich', 'großes Y mit Doppelstrich']);
  this.executeCharTest('ℤ', ['großes Z mit Doppelstrich', 'großes Z mit Doppelstrich', 'großes Z mit Doppelstrich']);
  this.executeCharTest('𝕒', ['a mit Doppelstrich', 'a mit Doppelstrich', 'a mit Doppelstrich']);
  this.executeCharTest('𝕓', ['b mit Doppelstrich', 'b mit Doppelstrich', 'b mit Doppelstrich']);
  this.executeCharTest('𝕔', ['c mit Doppelstrich', 'c mit Doppelstrich', 'c mit Doppelstrich']);
  this.executeCharTest('𝕕', ['d mit Doppelstrich', 'd mit Doppelstrich', 'd mit Doppelstrich']);
  this.executeCharTest('𝕖', ['e mit Doppelstrich', 'e mit Doppelstrich', 'e mit Doppelstrich']);
  this.executeCharTest('𝕗', ['f mit Doppelstrich', 'f mit Doppelstrich', 'f mit Doppelstrich']);
  this.executeCharTest('𝕘', ['g mit Doppelstrich', 'g mit Doppelstrich', 'g mit Doppelstrich']);
  this.executeCharTest('𝕙', ['h mit Doppelstrich', 'h mit Doppelstrich', 'h mit Doppelstrich']);
  this.executeCharTest('𝕚', ['i mit Doppelstrich', 'i mit Doppelstrich', 'i mit Doppelstrich']);
  this.executeCharTest('𝕛', ['j mit Doppelstrich', 'j mit Doppelstrich', 'j mit Doppelstrich']);
  this.executeCharTest('𝕜', ['k mit Doppelstrich', 'k mit Doppelstrich', 'k mit Doppelstrich']);
  this.executeCharTest('𝕝', ['l mit Doppelstrich', 'l mit Doppelstrich', 'l mit Doppelstrich']);
  this.executeCharTest('𝕞', ['m mit Doppelstrich', 'm mit Doppelstrich', 'm mit Doppelstrich']);
  this.executeCharTest('𝕟', ['n mit Doppelstrich', 'n mit Doppelstrich', 'n mit Doppelstrich']);
  this.executeCharTest('𝕠', ['o mit Doppelstrich', 'o mit Doppelstrich', 'o mit Doppelstrich']);
  this.executeCharTest('𝕡', ['p mit Doppelstrich', 'p mit Doppelstrich', 'p mit Doppelstrich']);
  this.executeCharTest('𝕢', ['q mit Doppelstrich', 'q mit Doppelstrich', 'q mit Doppelstrich']);
  this.executeCharTest('𝕣', ['r mit Doppelstrich', 'r mit Doppelstrich', 'r mit Doppelstrich']);
  this.executeCharTest('𝕤', ['s mit Doppelstrich', 's mit Doppelstrich', 's mit Doppelstrich']);
  this.executeCharTest('𝕥', ['t mit Doppelstrich', 't mit Doppelstrich', 't mit Doppelstrich']);
  this.executeCharTest('𝕦', ['u mit Doppelstrich', 'u mit Doppelstrich', 'u mit Doppelstrich']);
  this.executeCharTest('𝕧', ['v mit Doppelstrich', 'v mit Doppelstrich', 'v mit Doppelstrich']);
  this.executeCharTest('𝕨', ['w mit Doppelstrich', 'w mit Doppelstrich', 'w mit Doppelstrich']);
  this.executeCharTest('𝕩', ['x mit Doppelstrich', 'x mit Doppelstrich', 'x mit Doppelstrich']);
  this.executeCharTest('𝕪', ['y mit Doppelstrich', 'y mit Doppelstrich', 'y mit Doppelstrich']);
  this.executeCharTest('𝕫', ['z mit Doppelstrich', 'z mit Doppelstrich', 'z mit Doppelstrich']);
  this.executeCharTest('𝔄', ['Fraktur großes A', 'Fraktur großes A', 'Fraktur großes A']);
  this.executeCharTest('𝔅', ['Fraktur großes B', 'Fraktur großes B', 'Fraktur großes B']);
  this.executeCharTest('ℭ', ['Fraktur großes C', 'Fraktur großes C', 'Fraktur großes C']);
  this.executeCharTest('𝔇', ['Fraktur großes D', 'Fraktur großes D', 'Fraktur großes D']);
  this.executeCharTest('𝔈', ['Fraktur großes E', 'Fraktur großes E', 'Fraktur großes E']);
  this.executeCharTest('𝔉', ['Fraktur großes F', 'Fraktur großes F', 'Fraktur großes F']);
  this.executeCharTest('𝔊', ['Fraktur großes G', 'Fraktur großes G', 'Fraktur großes G']);
  this.executeCharTest('ℌ', ['Fraktur großes H', 'Fraktur großes H', 'Fraktur großes H']);
  this.executeCharTest('ℑ', ['Fraktur großes I', 'Fraktur großes I', 'Fraktur großes I']);
  this.executeCharTest('𝔍', ['Fraktur großes J', 'Fraktur großes J', 'Fraktur großes J']);
  this.executeCharTest('𝔎', ['Fraktur großes K', 'Fraktur großes K', 'Fraktur großes K']);
  this.executeCharTest('𝔏', ['Fraktur großes L', 'Fraktur großes L', 'Fraktur großes L']);
  this.executeCharTest('𝔐', ['Fraktur großes M', 'Fraktur großes M', 'Fraktur großes M']);
  this.executeCharTest('𝔑', ['Fraktur großes N', 'Fraktur großes N', 'Fraktur großes N']);
  this.executeCharTest('𝔒', ['Fraktur großes O', 'Fraktur großes O', 'Fraktur großes O']);
  this.executeCharTest('𝔓', ['Fraktur großes P', 'Fraktur großes P', 'Fraktur großes P']);
  this.executeCharTest('𝔔', ['Fraktur großes Q', 'Fraktur großes Q', 'Fraktur großes Q']);
  this.executeCharTest('ℜ', ['Fraktur großes R', 'Fraktur großes R', 'Fraktur großes R']);
  this.executeCharTest('𝔖', ['Fraktur großes S', 'Fraktur großes S', 'Fraktur großes S']);
  this.executeCharTest('𝔗', ['Fraktur großes T', 'Fraktur großes T', 'Fraktur großes T']);
  this.executeCharTest('𝔘', ['Fraktur großes U', 'Fraktur großes U', 'Fraktur großes U']);
  this.executeCharTest('𝔙', ['Fraktur großes V', 'Fraktur großes V', 'Fraktur großes V']);
  this.executeCharTest('𝔚', ['Fraktur großes W', 'Fraktur großes W', 'Fraktur großes W']);
  this.executeCharTest('𝔛', ['Fraktur großes X', 'Fraktur großes X', 'Fraktur großes X']);
  this.executeCharTest('𝔜', ['Fraktur großes Y', 'Fraktur großes Y', 'Fraktur großes Y']);
  this.executeCharTest('ℨ', ['Fraktur großes Z', 'Fraktur großes Z', 'Fraktur großes Z']);
  this.executeCharTest('𝔞', ['Fraktur a', 'Fraktur a', 'Fraktur a']);
  this.executeCharTest('𝔟', ['Fraktur b', 'Fraktur b', 'Fraktur b']);
  this.executeCharTest('𝔠', ['Fraktur c', 'Fraktur c', 'Fraktur c']);
  this.executeCharTest('𝔡', ['Fraktur d', 'Fraktur d', 'Fraktur d']);
  this.executeCharTest('𝔢', ['Fraktur e', 'Fraktur e', 'Fraktur e']);
  this.executeCharTest('𝔣', ['Fraktur f', 'Fraktur f', 'Fraktur f']);
  this.executeCharTest('𝔤', ['Fraktur g', 'Fraktur g', 'Fraktur g']);
  this.executeCharTest('𝔥', ['Fraktur h', 'Fraktur h', 'Fraktur h']);
  this.executeCharTest('𝔦', ['Fraktur i', 'Fraktur i', 'Fraktur i']);
  this.executeCharTest('𝔧', ['Fraktur j', 'Fraktur j', 'Fraktur j']);
  this.executeCharTest('𝔨', ['Fraktur k', 'Fraktur k', 'Fraktur k']);
  this.executeCharTest('𝔩', ['Fraktur l', 'Fraktur l', 'Fraktur l']);
  this.executeCharTest('𝔪', ['Fraktur m', 'Fraktur m', 'Fraktur m']);
  this.executeCharTest('𝔫', ['Fraktur n', 'Fraktur n', 'Fraktur n']);
  this.executeCharTest('𝔬', ['Fraktur o', 'Fraktur o', 'Fraktur o']);
  this.executeCharTest('𝔭', ['Fraktur p', 'Fraktur p', 'Fraktur p']);
  this.executeCharTest('𝔮', ['Fraktur q', 'Fraktur q', 'Fraktur q']);
  this.executeCharTest('𝔯', ['Fraktur r', 'Fraktur r', 'Fraktur r']);
  this.executeCharTest('𝔰', ['Fraktur s', 'Fraktur s', 'Fraktur s']);
  this.executeCharTest('𝔱', ['Fraktur t', 'Fraktur t', 'Fraktur t']);
  this.executeCharTest('𝔲', ['Fraktur u', 'Fraktur u', 'Fraktur u']);
  this.executeCharTest('𝔳', ['Fraktur v', 'Fraktur v', 'Fraktur v']);
  this.executeCharTest('𝔴', ['Fraktur w', 'Fraktur w', 'Fraktur w']);
  this.executeCharTest('𝔵', ['Fraktur x', 'Fraktur x', 'Fraktur x']);
  this.executeCharTest('𝔶', ['Fraktur y', 'Fraktur y', 'Fraktur y']);
  this.executeCharTest('𝔷', ['Fraktur z', 'Fraktur z', 'Fraktur z']);
  this.executeCharTest('Ａ', ['großes A', 'großes A', 'großes A']);
  this.executeCharTest('Ｂ', ['großes B', 'großes B', 'großes B']);
  this.executeCharTest('Ｃ', ['großes C', 'großes C', 'großes C']);
  this.executeCharTest('Ｄ', ['großes D', 'großes D', 'großes D']);
  this.executeCharTest('Ｅ', ['großes E', 'großes E', 'großes E']);
  this.executeCharTest('Ｆ', ['großes F', 'großes F', 'großes F']);
  this.executeCharTest('Ｇ', ['großes G', 'großes G', 'großes G']);
  this.executeCharTest('Ｈ', ['großes H', 'großes H', 'großes H']);
  this.executeCharTest('Ｉ', ['großes I', 'großes I', 'großes I']);
  this.executeCharTest('Ｊ', ['großes J', 'großes J', 'großes J']);
  this.executeCharTest('Ｋ', ['großes K', 'großes K', 'großes K']);
  this.executeCharTest('Ｌ', ['großes L', 'großes L', 'großes L']);
  this.executeCharTest('Ｍ', ['großes M', 'großes M', 'großes M']);
  this.executeCharTest('Ｎ', ['großes N', 'großes N', 'großes N']);
  this.executeCharTest('Ｏ', ['großes O', 'großes O', 'großes O']);
  this.executeCharTest('Ｐ', ['großes P', 'großes P', 'großes P']);
  this.executeCharTest('Ｑ', ['großes Q', 'großes Q', 'großes Q']);
  this.executeCharTest('Ｒ', ['großes R', 'großes R', 'großes R']);
  this.executeCharTest('Ｓ', ['großes S', 'großes S', 'großes S']);
  this.executeCharTest('Ｔ', ['großes T', 'großes T', 'großes T']);
  this.executeCharTest('Ｕ', ['großes U', 'großes U', 'großes U']);
  this.executeCharTest('Ｖ', ['großes V', 'großes V', 'großes V']);
  this.executeCharTest('Ｗ', ['großes W', 'großes W', 'großes W']);
  this.executeCharTest('Ｘ', ['großes X', 'großes X', 'großes X']);
  this.executeCharTest('Ｙ', ['großes Y', 'großes Y', 'großes Y']);
  this.executeCharTest('Ｚ', ['großes Z', 'großes Z', 'großes Z']);
  this.executeCharTest('ａ', ['a', 'a', 'a']);
  this.executeCharTest('ｂ', ['b', 'b', 'b']);
  this.executeCharTest('ｃ', ['c', 'c', 'c']);
  this.executeCharTest('ｄ', ['d', 'd', 'd']);
  this.executeCharTest('ｅ', ['e', 'e', 'e']);
  this.executeCharTest('ｆ', ['f', 'f', 'f']);
  this.executeCharTest('ｇ', ['g', 'g', 'g']);
  this.executeCharTest('ｈ', ['h', 'h', 'h']);
  this.executeCharTest('ｉ', ['i', 'i', 'i']);
  this.executeCharTest('ｊ', ['j', 'j', 'j']);
  this.executeCharTest('ｋ', ['k', 'k', 'k']);
  this.executeCharTest('ｌ', ['l', 'l', 'l']);
  this.executeCharTest('ｍ', ['m', 'm', 'm']);
  this.executeCharTest('ｎ', ['n', 'n', 'n']);
  this.executeCharTest('ｏ', ['o', 'o', 'o']);
  this.executeCharTest('ｐ', ['p', 'p', 'p']);
  this.executeCharTest('ｑ', ['q', 'q', 'q']);
  this.executeCharTest('ｒ', ['r', 'r', 'r']);
  this.executeCharTest('ｓ', ['s', 's', 's']);
  this.executeCharTest('ｔ', ['t', 't', 't']);
  this.executeCharTest('ｕ', ['u', 'u', 'u']);
  this.executeCharTest('ｖ', ['v', 'v', 'v']);
  this.executeCharTest('ｗ', ['w', 'w', 'w']);
  this.executeCharTest('ｘ', ['x', 'x', 'x']);
  this.executeCharTest('ｙ', ['y', 'y', 'y']);
  this.executeCharTest('ｚ', ['z', 'z', 'z']);
  this.executeCharTest('𝐴', ['kursives großes A', 'kursives großes A', 'kursives großes A']);
  this.executeCharTest('𝐵', ['kursives großes B', 'kursives großes B', 'kursives großes B']);
  this.executeCharTest('𝐶', ['kursives großes C', 'kursives großes C', 'kursives großes C']);
  this.executeCharTest('𝐷', ['kursives großes D', 'kursives großes D', 'kursives großes D']);
  this.executeCharTest('𝐸', ['kursives großes E', 'kursives großes E', 'kursives großes E']);
  this.executeCharTest('𝐹', ['kursives großes F', 'kursives großes F', 'kursives großes F']);
  this.executeCharTest('𝐺', ['kursives großes G', 'kursives großes G', 'kursives großes G']);
  this.executeCharTest('𝐻', ['kursives großes H', 'kursives großes H', 'kursives großes H']);
  this.executeCharTest('𝐼', ['kursives großes I', 'kursives großes I', 'kursives großes I']);
  this.executeCharTest('𝐽', ['kursives großes J', 'kursives großes J', 'kursives großes J']);
  this.executeCharTest('𝐾', ['kursives großes K', 'kursives großes K', 'kursives großes K']);
  this.executeCharTest('𝐿', ['kursives großes L', 'kursives großes L', 'kursives großes L']);
  this.executeCharTest('𝑀', ['kursives großes M', 'kursives großes M', 'kursives großes M']);
  this.executeCharTest('𝑁', ['kursives großes N', 'kursives großes N', 'kursives großes N']);
  this.executeCharTest('𝑂', ['kursives großes O', 'kursives großes O', 'kursives großes O']);
  this.executeCharTest('𝑃', ['kursives großes P', 'kursives großes P', 'kursives großes P']);
  this.executeCharTest('𝑄', ['kursives großes Q', 'kursives großes Q', 'kursives großes Q']);
  this.executeCharTest('𝑅', ['kursives großes R', 'kursives großes R', 'kursives großes R']);
  this.executeCharTest('𝑆', ['kursives großes S', 'kursives großes S', 'kursives großes S']);
  this.executeCharTest('𝑇', ['kursives großes T', 'kursives großes T', 'kursives großes T']);
  this.executeCharTest('𝑈', ['kursives großes U', 'kursives großes U', 'kursives großes U']);
  this.executeCharTest('𝑉', ['kursives großes V', 'kursives großes V', 'kursives großes V']);
  this.executeCharTest('𝑊', ['kursives großes W', 'kursives großes W', 'kursives großes W']);
  this.executeCharTest('𝑋', ['kursives großes X', 'kursives großes X', 'kursives großes X']);
  this.executeCharTest('𝑌', ['kursives großes Y', 'kursives großes Y', 'kursives großes Y']);
  this.executeCharTest('𝑍', ['kursives großes Z', 'kursives großes Z', 'kursives großes Z']);
  this.executeCharTest('𝑎', ['kursives a', 'kursives a', 'kursives a']);
  this.executeCharTest('𝑏', ['kursives b', 'kursives b', 'kursives b']);
  this.executeCharTest('𝑐', ['kursives c', 'kursives c', 'kursives c']);
  this.executeCharTest('𝑑', ['kursives d', 'kursives d', 'kursives d']);
  this.executeCharTest('𝑒', ['kursives e', 'kursives e', 'kursives e']);
  this.executeCharTest('𝑓', ['kursives f', 'kursives f', 'kursives f']);
  this.executeCharTest('𝑔', ['kursives g', 'kursives g', 'kursives g']);
  this.executeCharTest('ℎ', ['Planck-Konstante', 'Planck-Konstante', 'Planck-Konstante']);
  this.executeCharTest('𝑖', ['kursives i', 'kursives i', 'kursives i']);
  this.executeCharTest('𝑗', ['kursives j', 'kursives j', 'kursives j']);
  this.executeCharTest('𝑘', ['kursives k', 'kursives k', 'kursives k']);
  this.executeCharTest('𝑙', ['kursives l', 'kursives l', 'kursives l']);
  this.executeCharTest('𝑚', ['kursives m', 'kursives m', 'kursives m']);
  this.executeCharTest('𝑛', ['kursives n', 'kursives n', 'kursives n']);
  this.executeCharTest('𝑜', ['kursives o', 'kursives o', 'kursives o']);
  this.executeCharTest('𝑝', ['kursives p', 'kursives p', 'kursives p']);
  this.executeCharTest('𝑞', ['kursives q', 'kursives q', 'kursives q']);
  this.executeCharTest('𝑟', ['kursives r', 'kursives r', 'kursives r']);
  this.executeCharTest('𝑠', ['kursives s', 'kursives s', 'kursives s']);
  this.executeCharTest('𝑡', ['kursives t', 'kursives t', 'kursives t']);
  this.executeCharTest('𝑢', ['kursives u', 'kursives u', 'kursives u']);
  this.executeCharTest('𝑣', ['kursives v', 'kursives v', 'kursives v']);
  this.executeCharTest('𝑤', ['kursives w', 'kursives w', 'kursives w']);
  this.executeCharTest('𝑥', ['kursives x', 'kursives x', 'kursives x']);
  this.executeCharTest('𝑦', ['kursives y', 'kursives y', 'kursives y']);
  this.executeCharTest('𝑧', ['kursives z', 'kursives z', 'kursives z']);
  this.executeCharTest('𝙰', ['nichtproportionales großes A', 'nichtproportionales großes A', 'nichtproportionales großes A']);
  this.executeCharTest('𝙱', ['nichtproportionales großes B', 'nichtproportionales großes B', 'nichtproportionales großes B']);
  this.executeCharTest('𝙲', ['nichtproportionales großes C', 'nichtproportionales großes C', 'nichtproportionales großes C']);
  this.executeCharTest('𝙳', ['nichtproportionales großes D', 'nichtproportionales großes D', 'nichtproportionales großes D']);
  this.executeCharTest('𝙴', ['nichtproportionales großes E', 'nichtproportionales großes E', 'nichtproportionales großes E']);
  this.executeCharTest('𝙵', ['nichtproportionales großes F', 'nichtproportionales großes F', 'nichtproportionales großes F']);
  this.executeCharTest('𝙶', ['nichtproportionales großes G', 'nichtproportionales großes G', 'nichtproportionales großes G']);
  this.executeCharTest('𝙷', ['nichtproportionales großes H', 'nichtproportionales großes H', 'nichtproportionales großes H']);
  this.executeCharTest('𝙸', ['nichtproportionales großes I', 'nichtproportionales großes I', 'nichtproportionales großes I']);
  this.executeCharTest('𝙹', ['nichtproportionales großes J', 'nichtproportionales großes J', 'nichtproportionales großes J']);
  this.executeCharTest('𝙺', ['nichtproportionales großes K', 'nichtproportionales großes K', 'nichtproportionales großes K']);
  this.executeCharTest('𝙻', ['nichtproportionales großes L', 'nichtproportionales großes L', 'nichtproportionales großes L']);
  this.executeCharTest('𝙼', ['nichtproportionales großes M', 'nichtproportionales großes M', 'nichtproportionales großes M']);
  this.executeCharTest('𝙽', ['nichtproportionales großes N', 'nichtproportionales großes N', 'nichtproportionales großes N']);
  this.executeCharTest('𝙾', ['nichtproportionales großes O', 'nichtproportionales großes O', 'nichtproportionales großes O']);
  this.executeCharTest('𝙿', ['nichtproportionales großes P', 'nichtproportionales großes P', 'nichtproportionales großes P']);
  this.executeCharTest('𝚀', ['nichtproportionales großes Q', 'nichtproportionales großes Q', 'nichtproportionales großes Q']);
  this.executeCharTest('𝚁', ['nichtproportionales großes R', 'nichtproportionales großes R', 'nichtproportionales großes R']);
  this.executeCharTest('𝚂', ['nichtproportionales großes S', 'nichtproportionales großes S', 'nichtproportionales großes S']);
  this.executeCharTest('𝚃', ['nichtproportionales großes T', 'nichtproportionales großes T', 'nichtproportionales großes T']);
  this.executeCharTest('𝚄', ['nichtproportionales großes U', 'nichtproportionales großes U', 'nichtproportionales großes U']);
  this.executeCharTest('𝚅', ['nichtproportionales großes V', 'nichtproportionales großes V', 'nichtproportionales großes V']);
  this.executeCharTest('𝚆', ['nichtproportionales großes W', 'nichtproportionales großes W', 'nichtproportionales großes W']);
  this.executeCharTest('𝚇', ['nichtproportionales großes X', 'nichtproportionales großes X', 'nichtproportionales großes X']);
  this.executeCharTest('𝚈', ['nichtproportionales großes Y', 'nichtproportionales großes Y', 'nichtproportionales großes Y']);
  this.executeCharTest('𝚉', ['nichtproportionales großes Z', 'nichtproportionales großes Z', 'nichtproportionales großes Z']);
  this.executeCharTest('𝚊', ['nichtproportionales a', 'nichtproportionales a', 'nichtproportionales a']);
  this.executeCharTest('𝚋', ['nichtproportionales b', 'nichtproportionales b', 'nichtproportionales b']);
  this.executeCharTest('𝚌', ['nichtproportionales c', 'nichtproportionales c', 'nichtproportionales c']);
  this.executeCharTest('𝚍', ['nichtproportionales d', 'nichtproportionales d', 'nichtproportionales d']);
  this.executeCharTest('𝚎', ['nichtproportionales e', 'nichtproportionales e', 'nichtproportionales e']);
  this.executeCharTest('𝚏', ['nichtproportionales f', 'nichtproportionales f', 'nichtproportionales f']);
  this.executeCharTest('𝚐', ['nichtproportionales g', 'nichtproportionales g', 'nichtproportionales g']);
  this.executeCharTest('𝚑', ['nichtproportionales h', 'nichtproportionales h', 'nichtproportionales h']);
  this.executeCharTest('𝚒', ['nichtproportionales i', 'nichtproportionales i', 'nichtproportionales i']);
  this.executeCharTest('𝚓', ['nichtproportionales j', 'nichtproportionales j', 'nichtproportionales j']);
  this.executeCharTest('𝚔', ['nichtproportionales k', 'nichtproportionales k', 'nichtproportionales k']);
  this.executeCharTest('𝚕', ['nichtproportionales l', 'nichtproportionales l', 'nichtproportionales l']);
  this.executeCharTest('𝚖', ['nichtproportionales m', 'nichtproportionales m', 'nichtproportionales m']);
  this.executeCharTest('𝚗', ['nichtproportionales n', 'nichtproportionales n', 'nichtproportionales n']);
  this.executeCharTest('𝚘', ['nichtproportionales o', 'nichtproportionales o', 'nichtproportionales o']);
  this.executeCharTest('𝚙', ['nichtproportionales p', 'nichtproportionales p', 'nichtproportionales p']);
  this.executeCharTest('𝚚', ['nichtproportionales q', 'nichtproportionales q', 'nichtproportionales q']);
  this.executeCharTest('𝚛', ['nichtproportionales r', 'nichtproportionales r', 'nichtproportionales r']);
  this.executeCharTest('𝚜', ['nichtproportionales s', 'nichtproportionales s', 'nichtproportionales s']);
  this.executeCharTest('𝚝', ['nichtproportionales t', 'nichtproportionales t', 'nichtproportionales t']);
  this.executeCharTest('𝚞', ['nichtproportionales u', 'nichtproportionales u', 'nichtproportionales u']);
  this.executeCharTest('𝚟', ['nichtproportionales v', 'nichtproportionales v', 'nichtproportionales v']);
  this.executeCharTest('𝚠', ['nichtproportionales w', 'nichtproportionales w', 'nichtproportionales w']);
  this.executeCharTest('𝚡', ['nichtproportionales x', 'nichtproportionales x', 'nichtproportionales x']);
  this.executeCharTest('𝚢', ['nichtproportionales y', 'nichtproportionales y', 'nichtproportionales y']);
  this.executeCharTest('𝚣', ['nichtproportionales z', 'nichtproportionales z', 'nichtproportionales z']);
  this.executeCharTest('A', ['großes A', 'großes A', 'großes A']);
  this.executeCharTest('B', ['großes B', 'großes B', 'großes B']);
  this.executeCharTest('C', ['großes C', 'großes C', 'großes C']);
  this.executeCharTest('D', ['großes D', 'großes D', 'großes D']);
  this.executeCharTest('E', ['großes E', 'großes E', 'großes E']);
  this.executeCharTest('F', ['großes F', 'großes F', 'großes F']);
  this.executeCharTest('G', ['großes G', 'großes G', 'großes G']);
  this.executeCharTest('H', ['großes H', 'großes H', 'großes H']);
  this.executeCharTest('I', ['großes I', 'großes I', 'großes I']);
  this.executeCharTest('J', ['großes J', 'großes J', 'großes J']);
  this.executeCharTest('K', ['großes K', 'großes K', 'großes K']);
  this.executeCharTest('L', ['großes L', 'großes L', 'großes L']);
  this.executeCharTest('M', ['großes M', 'großes M', 'großes M']);
  this.executeCharTest('N', ['großes N', 'großes N', 'großes N']);
  this.executeCharTest('O', ['großes O', 'großes O', 'großes O']);
  this.executeCharTest('P', ['großes P', 'großes P', 'großes P']);
  this.executeCharTest('Q', ['großes Q', 'großes Q', 'großes Q']);
  this.executeCharTest('R', ['großes R', 'großes R', 'großes R']);
  this.executeCharTest('S', ['großes S', 'großes S', 'großes S']);
  this.executeCharTest('T', ['großes T', 'großes T', 'großes T']);
  this.executeCharTest('U', ['großes U', 'großes U', 'großes U']);
  this.executeCharTest('V', ['großes V', 'großes V', 'großes V']);
  this.executeCharTest('W', ['großes W', 'großes W', 'großes W']);
  this.executeCharTest('X', ['großes X', 'großes X', 'großes X']);
  this.executeCharTest('Y', ['großes Y', 'großes Y', 'großes Y']);
  this.executeCharTest('Z', ['großes Z', 'großes Z', 'großes Z']);
  this.executeCharTest('a', ['a', 'a', 'a']);
  this.executeCharTest('b', ['b', 'b', 'b']);
  this.executeCharTest('c', ['c', 'c', 'c']);
  this.executeCharTest('d', ['d', 'd', 'd']);
  this.executeCharTest('e', ['e', 'e', 'e']);
  this.executeCharTest('f', ['f', 'f', 'f']);
  this.executeCharTest('g', ['g', 'g', 'g']);
  this.executeCharTest('h', ['h', 'h', 'h']);
  this.executeCharTest('i', ['i', 'i', 'i']);
  this.executeCharTest('j', ['j', 'j', 'j']);
  this.executeCharTest('k', ['k', 'k', 'k']);
  this.executeCharTest('l', ['l', 'l', 'l']);
  this.executeCharTest('m', ['m', 'm', 'm']);
  this.executeCharTest('n', ['n', 'n', 'n']);
  this.executeCharTest('o', ['o', 'o', 'o']);
  this.executeCharTest('p', ['p', 'p', 'p']);
  this.executeCharTest('q', ['q', 'q', 'q']);
  this.executeCharTest('r', ['r', 'r', 'r']);
  this.executeCharTest('s', ['s', 's', 's']);
  this.executeCharTest('t', ['t', 't', 't']);
  this.executeCharTest('u', ['u', 'u', 'u']);
  this.executeCharTest('v', ['v', 'v', 'v']);
  this.executeCharTest('w', ['w', 'w', 'w']);
  this.executeCharTest('x', ['x', 'x', 'x']);
  this.executeCharTest('y', ['y', 'y', 'y']);
  this.executeCharTest('z', ['z', 'z', 'z']);
  this.executeCharTest('𝒜', ['Schreibschrift großes A', 'Schreibschrift großes A', 'Schreibschrift großes A']);
  this.executeCharTest('ℬ', ['Schreibschrift großes B', 'Schreibschrift großes B', 'Schreibschrift großes B']);
  this.executeCharTest('𝒞', ['Schreibschrift großes C', 'Schreibschrift großes C', 'Schreibschrift großes C']);
  this.executeCharTest('𝒟', ['Schreibschrift großes D', 'Schreibschrift großes D', 'Schreibschrift großes D']);
  this.executeCharTest('ℰ', ['Schreibschrift großes E', 'Schreibschrift großes E', 'Schreibschrift großes E']);
  this.executeCharTest('ℱ', ['Schreibschrift großes F', 'Schreibschrift großes F', 'Schreibschrift großes F']);
  this.executeCharTest('𝒢', ['Schreibschrift großes G', 'Schreibschrift großes G', 'Schreibschrift großes G']);
  this.executeCharTest('ℋ', ['Schreibschrift großes H', 'Schreibschrift großes H', 'Schreibschrift großes H']);
  this.executeCharTest('ℐ', ['Schreibschrift großes I', 'Schreibschrift großes I', 'Schreibschrift großes I']);
  this.executeCharTest('𝒥', ['Schreibschrift großes J', 'Schreibschrift großes J', 'Schreibschrift großes J']);
  this.executeCharTest('𝒦', ['Schreibschrift großes K', 'Schreibschrift großes K', 'Schreibschrift großes K']);
  this.executeCharTest('ℒ', ['Schreibschrift großes L', 'Schreibschrift großes L', 'Schreibschrift großes L']);
  this.executeCharTest('ℳ', ['Schreibschrift großes M', 'Schreibschrift großes M', 'Schreibschrift großes M']);
  this.executeCharTest('𝒩', ['Schreibschrift großes N', 'Schreibschrift großes N', 'Schreibschrift großes N']);
  this.executeCharTest('𝒪', ['Schreibschrift großes O', 'Schreibschrift großes O', 'Schreibschrift großes O']);
  this.executeCharTest('𝒫', ['Schreibschrift großes P', 'Schreibschrift großes P', 'Schreibschrift großes P']);
  this.executeCharTest('𝒬', ['Schreibschrift großes Q', 'Schreibschrift großes Q', 'Schreibschrift großes Q']);
  this.executeCharTest('ℛ', ['Schreibschrift großes R', 'Schreibschrift großes R', 'Schreibschrift großes R']);
  this.executeCharTest('𝒮', ['Schreibschrift großes S', 'Schreibschrift großes S', 'Schreibschrift großes S']);
  this.executeCharTest('𝒯', ['Schreibschrift großes T', 'Schreibschrift großes T', 'Schreibschrift großes T']);
  this.executeCharTest('𝒰', ['Schreibschrift großes U', 'Schreibschrift großes U', 'Schreibschrift großes U']);
  this.executeCharTest('𝒱', ['Schreibschrift großes V', 'Schreibschrift großes V', 'Schreibschrift großes V']);
  this.executeCharTest('𝒲', ['Schreibschrift großes W', 'Schreibschrift großes W', 'Schreibschrift großes W']);
  this.executeCharTest('𝒳', ['Schreibschrift großes X', 'Schreibschrift großes X', 'Schreibschrift großes X']);
  this.executeCharTest('𝒴', ['Schreibschrift großes Y', 'Schreibschrift großes Y', 'Schreibschrift großes Y']);
  this.executeCharTest('𝒵', ['Schreibschrift großes Z', 'Schreibschrift großes Z', 'Schreibschrift großes Z']);
  this.executeCharTest('𝒶', ['Schreibschrift a', 'Schreibschrift a', 'Schreibschrift a']);
  this.executeCharTest('𝒷', ['Schreibschrift b', 'Schreibschrift b', 'Schreibschrift b']);
  this.executeCharTest('𝒸', ['Schreibschrift c', 'Schreibschrift c', 'Schreibschrift c']);
  this.executeCharTest('𝒹', ['Schreibschrift d', 'Schreibschrift d', 'Schreibschrift d']);
  this.executeCharTest('ℯ', ['Schreibschrift e', 'Schreibschrift e', 'Schreibschrift e']);
  this.executeCharTest('𝒻', ['Schreibschrift f', 'Schreibschrift f', 'Schreibschrift f']);
  this.executeCharTest('ℊ', ['Schreibschrift g', 'Schreibschrift g', 'Schreibschrift g']);
  this.executeCharTest('𝒽', ['Schreibschrift h', 'Schreibschrift h', 'Schreibschrift h']);
  this.executeCharTest('𝒾', ['Schreibschrift i', 'Schreibschrift i', 'Schreibschrift i']);
  this.executeCharTest('𝒿', ['Schreibschrift j', 'Schreibschrift j', 'Schreibschrift j']);
  this.executeCharTest('𝓀', ['Schreibschrift k', 'Schreibschrift k', 'Schreibschrift k']);
  this.executeCharTest('𝓁', ['Schreibschrift l', 'Schreibschrift l', 'Schreibschrift l']);
  this.executeCharTest('𝓂', ['Schreibschrift m', 'Schreibschrift m', 'Schreibschrift m']);
  this.executeCharTest('𝓃', ['Schreibschrift n', 'Schreibschrift n', 'Schreibschrift n']);
  this.executeCharTest('ℴ', ['Schreibschrift o', 'Schreibschrift o', 'Schreibschrift o']);
  this.executeCharTest('𝓅', ['Schreibschrift p', 'Schreibschrift p', 'Schreibschrift p']);
  this.executeCharTest('𝓆', ['Schreibschrift q', 'Schreibschrift q', 'Schreibschrift q']);
  this.executeCharTest('𝓇', ['Schreibschrift r', 'Schreibschrift r', 'Schreibschrift r']);
  this.executeCharTest('𝓈', ['Schreibschrift s', 'Schreibschrift s', 'Schreibschrift s']);
  this.executeCharTest('𝓉', ['Schreibschrift t', 'Schreibschrift t', 'Schreibschrift t']);
  this.executeCharTest('𝓊', ['Schreibschrift u', 'Schreibschrift u', 'Schreibschrift u']);
  this.executeCharTest('𝓋', ['Schreibschrift v', 'Schreibschrift v', 'Schreibschrift v']);
  this.executeCharTest('𝓌', ['Schreibschrift w', 'Schreibschrift w', 'Schreibschrift w']);
  this.executeCharTest('𝓍', ['Schreibschrift x', 'Schreibschrift x', 'Schreibschrift x']);
  this.executeCharTest('𝓎', ['Schreibschrift y', 'Schreibschrift y', 'Schreibschrift y']);
  this.executeCharTest('𝓏', ['Schreibschrift z', 'Schreibschrift z', 'Schreibschrift z']);
  this.executeCharTest('𝖠', ['serifenloses großes A', 'serifenloses großes A', 'serifenloses großes A']);
  this.executeCharTest('𝖡', ['serifenloses großes B', 'serifenloses großes B', 'serifenloses großes B']);
  this.executeCharTest('𝖢', ['serifenloses großes C', 'serifenloses großes C', 'serifenloses großes C']);
  this.executeCharTest('𝖣', ['serifenloses großes D', 'serifenloses großes D', 'serifenloses großes D']);
  this.executeCharTest('𝖤', ['serifenloses großes E', 'serifenloses großes E', 'serifenloses großes E']);
  this.executeCharTest('𝖥', ['serifenloses großes F', 'serifenloses großes F', 'serifenloses großes F']);
  this.executeCharTest('𝖦', ['serifenloses großes G', 'serifenloses großes G', 'serifenloses großes G']);
  this.executeCharTest('𝖧', ['serifenloses großes H', 'serifenloses großes H', 'serifenloses großes H']);
  this.executeCharTest('𝖨', ['serifenloses großes I', 'serifenloses großes I', 'serifenloses großes I']);
  this.executeCharTest('𝖩', ['serifenloses großes J', 'serifenloses großes J', 'serifenloses großes J']);
  this.executeCharTest('𝖪', ['serifenloses großes K', 'serifenloses großes K', 'serifenloses großes K']);
  this.executeCharTest('𝖫', ['serifenloses großes L', 'serifenloses großes L', 'serifenloses großes L']);
  this.executeCharTest('𝖬', ['serifenloses großes M', 'serifenloses großes M', 'serifenloses großes M']);
  this.executeCharTest('𝖭', ['serifenloses großes N', 'serifenloses großes N', 'serifenloses großes N']);
  this.executeCharTest('𝖮', ['serifenloses großes O', 'serifenloses großes O', 'serifenloses großes O']);
  this.executeCharTest('𝖯', ['serifenloses großes P', 'serifenloses großes P', 'serifenloses großes P']);
  this.executeCharTest('𝖰', ['serifenloses großes Q', 'serifenloses großes Q', 'serifenloses großes Q']);
  this.executeCharTest('𝖱', ['serifenloses großes R', 'serifenloses großes R', 'serifenloses großes R']);
  this.executeCharTest('𝖲', ['serifenloses großes S', 'serifenloses großes S', 'serifenloses großes S']);
  this.executeCharTest('𝖳', ['serifenloses großes T', 'serifenloses großes T', 'serifenloses großes T']);
  this.executeCharTest('𝖴', ['serifenloses großes U', 'serifenloses großes U', 'serifenloses großes U']);
  this.executeCharTest('𝖵', ['serifenloses großes V', 'serifenloses großes V', 'serifenloses großes V']);
  this.executeCharTest('𝖶', ['serifenloses großes W', 'serifenloses großes W', 'serifenloses großes W']);
  this.executeCharTest('𝖷', ['serifenloses großes X', 'serifenloses großes X', 'serifenloses großes X']);
  this.executeCharTest('𝖸', ['serifenloses großes Y', 'serifenloses großes Y', 'serifenloses großes Y']);
  this.executeCharTest('𝖹', ['serifenloses großes Z', 'serifenloses großes Z', 'serifenloses großes Z']);
  this.executeCharTest('𝖺', ['serifenloses a', 'serifenloses a', 'serifenloses a']);
  this.executeCharTest('𝖻', ['serifenloses b', 'serifenloses b', 'serifenloses b']);
  this.executeCharTest('𝖼', ['serifenloses c', 'serifenloses c', 'serifenloses c']);
  this.executeCharTest('𝖽', ['serifenloses d', 'serifenloses d', 'serifenloses d']);
  this.executeCharTest('𝖾', ['serifenloses e', 'serifenloses e', 'serifenloses e']);
  this.executeCharTest('𝖿', ['serifenloses f', 'serifenloses f', 'serifenloses f']);
  this.executeCharTest('𝗀', ['serifenloses g', 'serifenloses g', 'serifenloses g']);
  this.executeCharTest('𝗁', ['serifenloses h', 'serifenloses h', 'serifenloses h']);
  this.executeCharTest('𝗂', ['serifenloses i', 'serifenloses i', 'serifenloses i']);
  this.executeCharTest('𝗃', ['serifenloses j', 'serifenloses j', 'serifenloses j']);
  this.executeCharTest('𝗄', ['serifenloses k', 'serifenloses k', 'serifenloses k']);
  this.executeCharTest('𝗅', ['serifenloses l', 'serifenloses l', 'serifenloses l']);
  this.executeCharTest('𝗆', ['serifenloses m', 'serifenloses m', 'serifenloses m']);
  this.executeCharTest('𝗇', ['serifenloses n', 'serifenloses n', 'serifenloses n']);
  this.executeCharTest('𝗈', ['serifenloses o', 'serifenloses o', 'serifenloses o']);
  this.executeCharTest('𝗉', ['serifenloses p', 'serifenloses p', 'serifenloses p']);
  this.executeCharTest('𝗊', ['serifenloses q', 'serifenloses q', 'serifenloses q']);
  this.executeCharTest('𝗋', ['serifenloses r', 'serifenloses r', 'serifenloses r']);
  this.executeCharTest('𝗌', ['serifenloses s', 'serifenloses s', 'serifenloses s']);
  this.executeCharTest('𝗍', ['serifenloses t', 'serifenloses t', 'serifenloses t']);
  this.executeCharTest('𝗎', ['serifenloses u', 'serifenloses u', 'serifenloses u']);
  this.executeCharTest('𝗏', ['serifenloses v', 'serifenloses v', 'serifenloses v']);
  this.executeCharTest('𝗐', ['serifenloses w', 'serifenloses w', 'serifenloses w']);
  this.executeCharTest('𝗑', ['serifenloses x', 'serifenloses x', 'serifenloses x']);
  this.executeCharTest('𝗒', ['serifenloses y', 'serifenloses y', 'serifenloses y']);
  this.executeCharTest('𝗓', ['serifenloses z', 'serifenloses z', 'serifenloses z']);
  this.executeCharTest('𝘈', ['serifenloses kursives großes A', 'serifenloses kursives großes A', 'serifenloses kursives großes A']);
  this.executeCharTest('𝘉', ['serifenloses kursives großes B', 'serifenloses kursives großes B', 'serifenloses kursives großes B']);
  this.executeCharTest('𝘊', ['serifenloses kursives großes C', 'serifenloses kursives großes C', 'serifenloses kursives großes C']);
  this.executeCharTest('𝘋', ['serifenloses kursives großes D', 'serifenloses kursives großes D', 'serifenloses kursives großes D']);
  this.executeCharTest('𝘌', ['serifenloses kursives großes E', 'serifenloses kursives großes E', 'serifenloses kursives großes E']);
  this.executeCharTest('𝘍', ['serifenloses kursives großes F', 'serifenloses kursives großes F', 'serifenloses kursives großes F']);
  this.executeCharTest('𝘎', ['serifenloses kursives großes G', 'serifenloses kursives großes G', 'serifenloses kursives großes G']);
  this.executeCharTest('𝘏', ['serifenloses kursives großes H', 'serifenloses kursives großes H', 'serifenloses kursives großes H']);
  this.executeCharTest('𝘐', ['serifenloses kursives großes I', 'serifenloses kursives großes I', 'serifenloses kursives großes I']);
  this.executeCharTest('𝘑', ['serifenloses kursives großes J', 'serifenloses kursives großes J', 'serifenloses kursives großes J']);
  this.executeCharTest('𝘒', ['serifenloses kursives großes K', 'serifenloses kursives großes K', 'serifenloses kursives großes K']);
  this.executeCharTest('𝘓', ['serifenloses kursives großes L', 'serifenloses kursives großes L', 'serifenloses kursives großes L']);
  this.executeCharTest('𝘔', ['serifenloses kursives großes M', 'serifenloses kursives großes M', 'serifenloses kursives großes M']);
  this.executeCharTest('𝘕', ['serifenloses kursives großes N', 'serifenloses kursives großes N', 'serifenloses kursives großes N']);
  this.executeCharTest('𝘖', ['serifenloses kursives großes O', 'serifenloses kursives großes O', 'serifenloses kursives großes O']);
  this.executeCharTest('𝘗', ['serifenloses kursives großes P', 'serifenloses kursives großes P', 'serifenloses kursives großes P']);
  this.executeCharTest('𝘘', ['serifenloses kursives großes Q', 'serifenloses kursives großes Q', 'serifenloses kursives großes Q']);
  this.executeCharTest('𝘙', ['serifenloses kursives großes R', 'serifenloses kursives großes R', 'serifenloses kursives großes R']);
  this.executeCharTest('𝘚', ['serifenloses kursives großes S', 'serifenloses kursives großes S', 'serifenloses kursives großes S']);
  this.executeCharTest('𝘛', ['serifenloses kursives großes T', 'serifenloses kursives großes T', 'serifenloses kursives großes T']);
  this.executeCharTest('𝘜', ['serifenloses kursives großes U', 'serifenloses kursives großes U', 'serifenloses kursives großes U']);
  this.executeCharTest('𝘝', ['serifenloses kursives großes V', 'serifenloses kursives großes V', 'serifenloses kursives großes V']);
  this.executeCharTest('𝘞', ['serifenloses kursives großes W', 'serifenloses kursives großes W', 'serifenloses kursives großes W']);
  this.executeCharTest('𝘟', ['serifenloses kursives großes X', 'serifenloses kursives großes X', 'serifenloses kursives großes X']);
  this.executeCharTest('𝘠', ['serifenloses kursives großes Y', 'serifenloses kursives großes Y', 'serifenloses kursives großes Y']);
  this.executeCharTest('𝘡', ['serifenloses kursives großes Z', 'serifenloses kursives großes Z', 'serifenloses kursives großes Z']);
  this.executeCharTest('𝘢', ['serifenloses kursives a', 'serifenloses kursives a', 'serifenloses kursives a']);
  this.executeCharTest('𝘣', ['serifenloses kursives b', 'serifenloses kursives b', 'serifenloses kursives b']);
  this.executeCharTest('𝘤', ['serifenloses kursives c', 'serifenloses kursives c', 'serifenloses kursives c']);
  this.executeCharTest('𝘥', ['serifenloses kursives d', 'serifenloses kursives d', 'serifenloses kursives d']);
  this.executeCharTest('𝘦', ['serifenloses kursives e', 'serifenloses kursives e', 'serifenloses kursives e']);
  this.executeCharTest('𝘧', ['serifenloses kursives f', 'serifenloses kursives f', 'serifenloses kursives f']);
  this.executeCharTest('𝘨', ['serifenloses kursives g', 'serifenloses kursives g', 'serifenloses kursives g']);
  this.executeCharTest('𝘩', ['serifenloses kursives h', 'serifenloses kursives h', 'serifenloses kursives h']);
  this.executeCharTest('𝘪', ['serifenloses kursives i', 'serifenloses kursives i', 'serifenloses kursives i']);
  this.executeCharTest('𝘫', ['serifenloses kursives j', 'serifenloses kursives j', 'serifenloses kursives j']);
  this.executeCharTest('𝘬', ['serifenloses kursives k', 'serifenloses kursives k', 'serifenloses kursives k']);
  this.executeCharTest('𝘭', ['serifenloses kursives l', 'serifenloses kursives l', 'serifenloses kursives l']);
  this.executeCharTest('𝘮', ['serifenloses kursives m', 'serifenloses kursives m', 'serifenloses kursives m']);
  this.executeCharTest('𝘯', ['serifenloses kursives n', 'serifenloses kursives n', 'serifenloses kursives n']);
  this.executeCharTest('𝘰', ['serifenloses kursives o', 'serifenloses kursives o', 'serifenloses kursives o']);
  this.executeCharTest('𝘱', ['serifenloses kursives p', 'serifenloses kursives p', 'serifenloses kursives p']);
  this.executeCharTest('𝘲', ['serifenloses kursives q', 'serifenloses kursives q', 'serifenloses kursives q']);
  this.executeCharTest('𝘳', ['serifenloses kursives r', 'serifenloses kursives r', 'serifenloses kursives r']);
  this.executeCharTest('𝘴', ['serifenloses kursives s', 'serifenloses kursives s', 'serifenloses kursives s']);
  this.executeCharTest('𝘵', ['serifenloses kursives t', 'serifenloses kursives t', 'serifenloses kursives t']);
  this.executeCharTest('𝘶', ['serifenloses kursives u', 'serifenloses kursives u', 'serifenloses kursives u']);
  this.executeCharTest('𝘷', ['serifenloses kursives v', 'serifenloses kursives v', 'serifenloses kursives v']);
  this.executeCharTest('𝘸', ['serifenloses kursives w', 'serifenloses kursives w', 'serifenloses kursives w']);
  this.executeCharTest('𝘹', ['serifenloses kursives x', 'serifenloses kursives x', 'serifenloses kursives x']);
  this.executeCharTest('𝘺', ['serifenloses kursives y', 'serifenloses kursives y', 'serifenloses kursives y']);
  this.executeCharTest('𝘻', ['serifenloses kursives z', 'serifenloses kursives z', 'serifenloses kursives z']);
  this.executeCharTest('𝗔', ['serifenloses fettes großes A', 'serifenloses fettes großes A', 'serifenloses fettes großes A']);
  this.executeCharTest('𝗕', ['serifenloses fettes großes B', 'serifenloses fettes großes B', 'serifenloses fettes großes B']);
  this.executeCharTest('𝗖', ['serifenloses fettes großes C', 'serifenloses fettes großes C', 'serifenloses fettes großes C']);
  this.executeCharTest('𝗗', ['serifenloses fettes großes D', 'serifenloses fettes großes D', 'serifenloses fettes großes D']);
  this.executeCharTest('𝗘', ['serifenloses fettes großes E', 'serifenloses fettes großes E', 'serifenloses fettes großes E']);
  this.executeCharTest('𝗙', ['serifenloses fettes großes F', 'serifenloses fettes großes F', 'serifenloses fettes großes F']);
  this.executeCharTest('𝗚', ['serifenloses fettes großes G', 'serifenloses fettes großes G', 'serifenloses fettes großes G']);
  this.executeCharTest('𝗛', ['serifenloses fettes großes H', 'serifenloses fettes großes H', 'serifenloses fettes großes H']);
  this.executeCharTest('𝗜', ['serifenloses fettes großes I', 'serifenloses fettes großes I', 'serifenloses fettes großes I']);
  this.executeCharTest('𝗝', ['serifenloses fettes großes J', 'serifenloses fettes großes J', 'serifenloses fettes großes J']);
  this.executeCharTest('𝗞', ['serifenloses fettes großes K', 'serifenloses fettes großes K', 'serifenloses fettes großes K']);
  this.executeCharTest('𝗟', ['serifenloses fettes großes L', 'serifenloses fettes großes L', 'serifenloses fettes großes L']);
  this.executeCharTest('𝗠', ['serifenloses fettes großes M', 'serifenloses fettes großes M', 'serifenloses fettes großes M']);
  this.executeCharTest('𝗡', ['serifenloses fettes großes N', 'serifenloses fettes großes N', 'serifenloses fettes großes N']);
  this.executeCharTest('𝗢', ['serifenloses fettes großes O', 'serifenloses fettes großes O', 'serifenloses fettes großes O']);
  this.executeCharTest('𝗣', ['serifenloses fettes großes P', 'serifenloses fettes großes P', 'serifenloses fettes großes P']);
  this.executeCharTest('𝗤', ['serifenloses fettes großes Q', 'serifenloses fettes großes Q', 'serifenloses fettes großes Q']);
  this.executeCharTest('𝗥', ['serifenloses fettes großes R', 'serifenloses fettes großes R', 'serifenloses fettes großes R']);
  this.executeCharTest('𝗦', ['serifenloses fettes großes S', 'serifenloses fettes großes S', 'serifenloses fettes großes S']);
  this.executeCharTest('𝗧', ['serifenloses fettes großes T', 'serifenloses fettes großes T', 'serifenloses fettes großes T']);
  this.executeCharTest('𝗨', ['serifenloses fettes großes U', 'serifenloses fettes großes U', 'serifenloses fettes großes U']);
  this.executeCharTest('𝗩', ['serifenloses fettes großes V', 'serifenloses fettes großes V', 'serifenloses fettes großes V']);
  this.executeCharTest('𝗪', ['serifenloses fettes großes W', 'serifenloses fettes großes W', 'serifenloses fettes großes W']);
  this.executeCharTest('𝗫', ['serifenloses fettes großes X', 'serifenloses fettes großes X', 'serifenloses fettes großes X']);
  this.executeCharTest('𝗬', ['serifenloses fettes großes Y', 'serifenloses fettes großes Y', 'serifenloses fettes großes Y']);
  this.executeCharTest('𝗭', ['serifenloses fettes großes Z', 'serifenloses fettes großes Z', 'serifenloses fettes großes Z']);
  this.executeCharTest('𝗮', ['serifenloses fettes a', 'serifenloses fettes a', 'serifenloses fettes a']);
  this.executeCharTest('𝗯', ['serifenloses fettes b', 'serifenloses fettes b', 'serifenloses fettes b']);
  this.executeCharTest('𝗰', ['serifenloses fettes c', 'serifenloses fettes c', 'serifenloses fettes c']);
  this.executeCharTest('𝗱', ['serifenloses fettes d', 'serifenloses fettes d', 'serifenloses fettes d']);
  this.executeCharTest('𝗲', ['serifenloses fettes e', 'serifenloses fettes e', 'serifenloses fettes e']);
  this.executeCharTest('𝗳', ['serifenloses fettes f', 'serifenloses fettes f', 'serifenloses fettes f']);
  this.executeCharTest('𝗴', ['serifenloses fettes g', 'serifenloses fettes g', 'serifenloses fettes g']);
  this.executeCharTest('𝗵', ['serifenloses fettes h', 'serifenloses fettes h', 'serifenloses fettes h']);
  this.executeCharTest('𝗶', ['serifenloses fettes i', 'serifenloses fettes i', 'serifenloses fettes i']);
  this.executeCharTest('𝗷', ['serifenloses fettes j', 'serifenloses fettes j', 'serifenloses fettes j']);
  this.executeCharTest('𝗸', ['serifenloses fettes k', 'serifenloses fettes k', 'serifenloses fettes k']);
  this.executeCharTest('𝗹', ['serifenloses fettes l', 'serifenloses fettes l', 'serifenloses fettes l']);
  this.executeCharTest('𝗺', ['serifenloses fettes m', 'serifenloses fettes m', 'serifenloses fettes m']);
  this.executeCharTest('𝗻', ['serifenloses fettes n', 'serifenloses fettes n', 'serifenloses fettes n']);
  this.executeCharTest('𝗼', ['serifenloses fettes o', 'serifenloses fettes o', 'serifenloses fettes o']);
  this.executeCharTest('𝗽', ['serifenloses fettes p', 'serifenloses fettes p', 'serifenloses fettes p']);
  this.executeCharTest('𝗾', ['serifenloses fettes q', 'serifenloses fettes q', 'serifenloses fettes q']);
  this.executeCharTest('𝗿', ['serifenloses fettes r', 'serifenloses fettes r', 'serifenloses fettes r']);
  this.executeCharTest('𝘀', ['serifenloses fettes s', 'serifenloses fettes s', 'serifenloses fettes s']);
  this.executeCharTest('𝘁', ['serifenloses fettes t', 'serifenloses fettes t', 'serifenloses fettes t']);
  this.executeCharTest('𝘂', ['serifenloses fettes u', 'serifenloses fettes u', 'serifenloses fettes u']);
  this.executeCharTest('𝘃', ['serifenloses fettes v', 'serifenloses fettes v', 'serifenloses fettes v']);
  this.executeCharTest('𝘄', ['serifenloses fettes w', 'serifenloses fettes w', 'serifenloses fettes w']);
  this.executeCharTest('𝘅', ['serifenloses fettes x', 'serifenloses fettes x', 'serifenloses fettes x']);
  this.executeCharTest('𝘆', ['serifenloses fettes y', 'serifenloses fettes y', 'serifenloses fettes y']);
  this.executeCharTest('𝘇', ['serifenloses fettes z', 'serifenloses fettes z', 'serifenloses fettes z']);
  this.executeCharTest('𝘼', ['serifenloses fettkursives großes A', 'serifenloses fettkursives großes A', 'serifenloses fettkursives großes A']);
  this.executeCharTest('𝘽', ['serifenloses fettkursives großes B', 'serifenloses fettkursives großes B', 'serifenloses fettkursives großes B']);
  this.executeCharTest('𝘾', ['serifenloses fettkursives großes C', 'serifenloses fettkursives großes C', 'serifenloses fettkursives großes C']);
  this.executeCharTest('𝘿', ['serifenloses fettkursives großes D', 'serifenloses fettkursives großes D', 'serifenloses fettkursives großes D']);
  this.executeCharTest('𝙀', ['serifenloses fettkursives großes E', 'serifenloses fettkursives großes E', 'serifenloses fettkursives großes E']);
  this.executeCharTest('𝙁', ['serifenloses fettkursives großes F', 'serifenloses fettkursives großes F', 'serifenloses fettkursives großes F']);
  this.executeCharTest('𝙂', ['serifenloses fettkursives großes G', 'serifenloses fettkursives großes G', 'serifenloses fettkursives großes G']);
  this.executeCharTest('𝙃', ['serifenloses fettkursives großes H', 'serifenloses fettkursives großes H', 'serifenloses fettkursives großes H']);
  this.executeCharTest('𝙄', ['serifenloses fettkursives großes I', 'serifenloses fettkursives großes I', 'serifenloses fettkursives großes I']);
  this.executeCharTest('𝙅', ['serifenloses fettkursives großes J', 'serifenloses fettkursives großes J', 'serifenloses fettkursives großes J']);
  this.executeCharTest('𝙆', ['serifenloses fettkursives großes K', 'serifenloses fettkursives großes K', 'serifenloses fettkursives großes K']);
  this.executeCharTest('𝙇', ['serifenloses fettkursives großes L', 'serifenloses fettkursives großes L', 'serifenloses fettkursives großes L']);
  this.executeCharTest('𝙈', ['serifenloses fettkursives großes M', 'serifenloses fettkursives großes M', 'serifenloses fettkursives großes M']);
  this.executeCharTest('𝙉', ['serifenloses fettkursives großes N', 'serifenloses fettkursives großes N', 'serifenloses fettkursives großes N']);
  this.executeCharTest('𝙊', ['serifenloses fettkursives großes O', 'serifenloses fettkursives großes O', 'serifenloses fettkursives großes O']);
  this.executeCharTest('𝙋', ['serifenloses fettkursives großes P', 'serifenloses fettkursives großes P', 'serifenloses fettkursives großes P']);
  this.executeCharTest('𝙌', ['serifenloses fettkursives großes Q', 'serifenloses fettkursives großes Q', 'serifenloses fettkursives großes Q']);
  this.executeCharTest('𝙍', ['serifenloses fettkursives großes R', 'serifenloses fettkursives großes R', 'serifenloses fettkursives großes R']);
  this.executeCharTest('𝙎', ['serifenloses fettkursives großes S', 'serifenloses fettkursives großes S', 'serifenloses fettkursives großes S']);
  this.executeCharTest('𝙏', ['serifenloses fettkursives großes T', 'serifenloses fettkursives großes T', 'serifenloses fettkursives großes T']);
  this.executeCharTest('𝙐', ['serifenloses fettkursives großes U', 'serifenloses fettkursives großes U', 'serifenloses fettkursives großes U']);
  this.executeCharTest('𝙑', ['serifenloses fettkursives großes V', 'serifenloses fettkursives großes V', 'serifenloses fettkursives großes V']);
  this.executeCharTest('𝙒', ['serifenloses fettkursives großes W', 'serifenloses fettkursives großes W', 'serifenloses fettkursives großes W']);
  this.executeCharTest('𝙓', ['serifenloses fettkursives großes X', 'serifenloses fettkursives großes X', 'serifenloses fettkursives großes X']);
  this.executeCharTest('𝙔', ['serifenloses fettkursives großes Y', 'serifenloses fettkursives großes Y', 'serifenloses fettkursives großes Y']);
  this.executeCharTest('𝙕', ['serifenloses fettkursives großes Z', 'serifenloses fettkursives großes Z', 'serifenloses fettkursives großes Z']);
  this.executeCharTest('𝙖', ['serifenloses fettkursives a', 'serifenloses fettkursives a', 'serifenloses fettkursives a']);
  this.executeCharTest('𝙗', ['serifenloses fettkursives b', 'serifenloses fettkursives b', 'serifenloses fettkursives b']);
  this.executeCharTest('𝙘', ['serifenloses fettkursives c', 'serifenloses fettkursives c', 'serifenloses fettkursives c']);
  this.executeCharTest('𝙙', ['serifenloses fettkursives d', 'serifenloses fettkursives d', 'serifenloses fettkursives d']);
  this.executeCharTest('𝙚', ['serifenloses fettkursives e', 'serifenloses fettkursives e', 'serifenloses fettkursives e']);
  this.executeCharTest('𝙛', ['serifenloses fettkursives f', 'serifenloses fettkursives f', 'serifenloses fettkursives f']);
  this.executeCharTest('𝙜', ['serifenloses fettkursives g', 'serifenloses fettkursives g', 'serifenloses fettkursives g']);
  this.executeCharTest('𝙝', ['serifenloses fettkursives h', 'serifenloses fettkursives h', 'serifenloses fettkursives h']);
  this.executeCharTest('𝙞', ['serifenloses fettkursives i', 'serifenloses fettkursives i', 'serifenloses fettkursives i']);
  this.executeCharTest('𝙟', ['serifenloses fettkursives j', 'serifenloses fettkursives j', 'serifenloses fettkursives j']);
  this.executeCharTest('𝙠', ['serifenloses fettkursives k', 'serifenloses fettkursives k', 'serifenloses fettkursives k']);
  this.executeCharTest('𝙡', ['serifenloses fettkursives l', 'serifenloses fettkursives l', 'serifenloses fettkursives l']);
  this.executeCharTest('𝙢', ['serifenloses fettkursives m', 'serifenloses fettkursives m', 'serifenloses fettkursives m']);
  this.executeCharTest('𝙣', ['serifenloses fettkursives n', 'serifenloses fettkursives n', 'serifenloses fettkursives n']);
  this.executeCharTest('𝙤', ['serifenloses fettkursives o', 'serifenloses fettkursives o', 'serifenloses fettkursives o']);
  this.executeCharTest('𝙥', ['serifenloses fettkursives p', 'serifenloses fettkursives p', 'serifenloses fettkursives p']);
  this.executeCharTest('𝙦', ['serifenloses fettkursives q', 'serifenloses fettkursives q', 'serifenloses fettkursives q']);
  this.executeCharTest('𝙧', ['serifenloses fettkursives r', 'serifenloses fettkursives r', 'serifenloses fettkursives r']);
  this.executeCharTest('𝙨', ['serifenloses fettkursives s', 'serifenloses fettkursives s', 'serifenloses fettkursives s']);
  this.executeCharTest('𝙩', ['serifenloses fettkursives t', 'serifenloses fettkursives t', 'serifenloses fettkursives t']);
  this.executeCharTest('𝙪', ['serifenloses fettkursives u', 'serifenloses fettkursives u', 'serifenloses fettkursives u']);
  this.executeCharTest('𝙫', ['serifenloses fettkursives v', 'serifenloses fettkursives v', 'serifenloses fettkursives v']);
  this.executeCharTest('𝙬', ['serifenloses fettkursives w', 'serifenloses fettkursives w', 'serifenloses fettkursives w']);
  this.executeCharTest('𝙭', ['serifenloses fettkursives x', 'serifenloses fettkursives x', 'serifenloses fettkursives x']);
  this.executeCharTest('𝙮', ['serifenloses fettkursives y', 'serifenloses fettkursives y', 'serifenloses fettkursives y']);
  this.executeCharTest('𝙯', ['serifenloses fettkursives z', 'serifenloses fettkursives z', 'serifenloses fettkursives z']);
  this.executeCharTest('Α', ['großes Alpha', 'großes Alpha', 'großes Alpha']);
  this.executeCharTest('Β', ['großes Beta', 'großes Beta', 'großes Beta']);
  this.executeCharTest('Γ', ['großes Gamma', 'großes Gamma', 'großes Gamma']);
  this.executeCharTest('Δ', ['großes Delta', 'großes Delta', 'großes Delta']);
  this.executeCharTest('Ε', ['großes Epsilon', 'großes Epsilon', 'großes Epsilon']);
  this.executeCharTest('Ζ', ['großes Zeta', 'großes Zeta', 'großes Zeta']);
  this.executeCharTest('Η', ['großes Eta', 'großes Eta', 'großes Eta']);
  this.executeCharTest('Θ', ['großes Theta', 'großes Theta', 'großes Theta']);
  this.executeCharTest('Ι', ['großes Iota', 'großes Iota', 'großes Iota']);
  this.executeCharTest('Κ', ['großes Kappa', 'großes Kappa', 'großes Kappa']);
  this.executeCharTest('Λ', ['großes Lambda', 'großes Lambda', 'großes Lambda']);
  this.executeCharTest('Μ', ['großes My', 'großes My', 'großes My']);
  this.executeCharTest('Ν', ['großes Ny', 'großes Ny', 'großes Ny']);
  this.executeCharTest('Ξ', ['großes Xi', 'großes Xi', 'großes Xi']);
  this.executeCharTest('Ο', ['großes Omikron', 'großes Omikron', 'großes Omikron']);
  this.executeCharTest('Π', ['großes Pi', 'großes Pi', 'großes Pi']);
  this.executeCharTest('Ρ', ['großes Rho', 'großes Rho', 'großes Rho']);
  this.executeCharTest('ϴ', ['großes Theta', 'großes Theta', 'großes Theta']);
  this.executeCharTest('Σ', ['großes Sigma', 'großes Sigma', 'großes Sigma']);
  this.executeCharTest('Τ', ['großes Tau', 'großes Tau', 'großes Tau']);
  this.executeCharTest('Υ', ['großes Ypsilon', 'großes Ypsilon', 'großes Ypsilon']);
  this.executeCharTest('Φ', ['großes Phi', 'großes Phi', 'großes Phi']);
  this.executeCharTest('Χ', ['großes Chi', 'großes Chi', 'großes Chi']);
  this.executeCharTest('Ψ', ['großes Psi', 'großes Psi', 'großes Psi']);
  this.executeCharTest('Ω', ['großes Omega', 'großes Omega', 'großes Omega']);
  this.executeCharTest('∇', ['nabla', 'nabla', 'nabla']);
  this.executeCharTest('α', ['alpha', 'alpha', 'alpha']);
  this.executeCharTest('β', ['beta', 'beta', 'beta']);
  this.executeCharTest('γ', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('δ', ['delta', 'delta', 'delta']);
  this.executeCharTest('ε', ['epsilon', 'epsilon', 'epsilon']);
  this.executeCharTest('ζ', ['zeta', 'zeta', 'zeta']);
  this.executeCharTest('η', ['eta', 'eta', 'eta']);
  this.executeCharTest('θ', ['theta', 'theta', 'theta']);
  this.executeCharTest('ι', ['iota', 'iota', 'iota']);
  this.executeCharTest('κ', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('λ', ['lambda', 'lambda', 'lambda']);
  this.executeCharTest('μ', ['my', 'my', 'my']);
  this.executeCharTest('ν', ['ny', 'ny', 'ny']);
  this.executeCharTest('ξ', ['xi', 'xi', 'xi']);
  this.executeCharTest('ο', ['omikron', 'omikron', 'omikron']);
  this.executeCharTest('π', ['pi', 'pi', 'pi']);
  this.executeCharTest('ρ', ['rho', 'rho', 'rho']);
  this.executeCharTest('ς', ['abschließendes sigma', 'abschließendes sigma', 'abschließendes sigma']);
  this.executeCharTest('σ', ['sigma', 'sigma', 'sigma']);
  this.executeCharTest('τ', ['tau', 'tau', 'tau']);
  this.executeCharTest('υ', ['ypsilon', 'ypsilon', 'ypsilon']);
  this.executeCharTest('φ', ['phi', 'phi', 'phi']);
  this.executeCharTest('χ', ['chi', 'chi', 'chi']);
  this.executeCharTest('ψ', ['psi', 'psi', 'psi']);
  this.executeCharTest('ω', ['omega', 'omega', 'omega']);
  this.executeCharTest('∂', ['partielle Ableitung', 'partielle Ableitung', 'partielle Ableitung']);
  this.executeCharTest('ϵ', ['epsilon', 'epsilon', 'epsilon']);
  this.executeCharTest('ϑ', ['theta', 'theta', 'theta']);
  this.executeCharTest('ϰ', ['kappa', 'kappa', 'kappa']);
  this.executeCharTest('ϕ', ['phi', 'phi', 'phi']);
  this.executeCharTest('ϱ', ['rho', 'rho', 'rho']);
  this.executeCharTest('ϖ', ['pi', 'pi', 'pi']);
  this.executeCharTest('𝚨', ['fettes großes Alpha', 'fettes großes Alpha', 'fettes großes Alpha']);
  this.executeCharTest('𝚩', ['fettes großes Beta', 'fettes großes Beta', 'fettes großes Beta']);
  this.executeCharTest('𝚪', ['fettes großes Gamma', 'fettes großes Gamma', 'fettes großes Gamma']);
  this.executeCharTest('𝚫', ['fettes großes Delta', 'fettes großes Delta', 'fettes großes Delta']);
  this.executeCharTest('𝚬', ['fettes großes Epsilon', 'fettes großes Epsilon', 'fettes großes Epsilon']);
  this.executeCharTest('𝚭', ['fettes großes Zeta', 'fettes großes Zeta', 'fettes großes Zeta']);
  this.executeCharTest('𝚮', ['fettes großes Eta', 'fettes großes Eta', 'fettes großes Eta']);
  this.executeCharTest('𝚯', ['fettes großes Theta', 'fettes großes Theta', 'fettes großes Theta']);
  this.executeCharTest('𝚰', ['fettes großes Iota', 'fettes großes Iota', 'fettes großes Iota']);
  this.executeCharTest('𝚱', ['fettes großes Kappa', 'fettes großes Kappa', 'fettes großes Kappa']);
  this.executeCharTest('𝚲', ['fettes großes Lambda', 'fettes großes Lambda', 'fettes großes Lambda']);
  this.executeCharTest('𝚳', ['fettes großes My', 'fettes großes My', 'fettes großes My']);
  this.executeCharTest('𝚴', ['fettes großes Ny', 'fettes großes Ny', 'fettes großes Ny']);
  this.executeCharTest('𝚵', ['fettes großes Xi', 'fettes großes Xi', 'fettes großes Xi']);
  this.executeCharTest('𝚶', ['fettes großes Omikron', 'fettes großes Omikron', 'fettes großes Omikron']);
  this.executeCharTest('𝚷', ['fettes großes Pi', 'fettes großes Pi', 'fettes großes Pi']);
  this.executeCharTest('𝚸', ['fettes großes Rho', 'fettes großes Rho', 'fettes großes Rho']);
  this.executeCharTest('𝚹', ['fettes großes Theta', 'fettes großes Theta', 'fettes großes Theta']);
  this.executeCharTest('𝚺', ['fettes großes Sigma', 'fettes großes Sigma', 'fettes großes Sigma']);
  this.executeCharTest('𝚻', ['fettes großes Tau', 'fettes großes Tau', 'fettes großes Tau']);
  this.executeCharTest('𝚼', ['fettes großes Ypsilon', 'fettes großes Ypsilon', 'fettes großes Ypsilon']);
  this.executeCharTest('𝚽', ['fettes großes Phi', 'fettes großes Phi', 'fettes großes Phi']);
  this.executeCharTest('𝚾', ['fettes großes Chi', 'fettes großes Chi', 'fettes großes Chi']);
  this.executeCharTest('𝚿', ['fettes großes Psi', 'fettes großes Psi', 'fettes großes Psi']);
  this.executeCharTest('𝛀', ['fettes großes Omega', 'fettes großes Omega', 'fettes großes Omega']);
  this.executeCharTest('𝛁', ['fettes nabla', 'fettes nabla', 'fettes nabla']);
  this.executeCharTest('𝛂', ['fettes alpha', 'fettes alpha', 'fettes alpha']);
  this.executeCharTest('𝛃', ['fettes beta', 'fettes beta', 'fettes beta']);
  this.executeCharTest('𝛄', ['fettes gamma', 'fettes gamma', 'fettes gamma']);
  this.executeCharTest('𝛅', ['fettes delta', 'fettes delta', 'fettes delta']);
  this.executeCharTest('𝛆', ['fettes epsilon', 'fettes epsilon', 'fettes epsilon']);
  this.executeCharTest('𝛇', ['fettes zeta', 'fettes zeta', 'fettes zeta']);
  this.executeCharTest('𝛈', ['fettes eta', 'fettes eta', 'fettes eta']);
  this.executeCharTest('𝛉', ['fettes theta', 'fettes theta', 'fettes theta']);
  this.executeCharTest('𝛊', ['fettes iota', 'fettes iota', 'fettes iota']);
  this.executeCharTest('𝛋', ['fettes kappa', 'fettes kappa', 'fettes kappa']);
  this.executeCharTest('𝛌', ['fettes lambda', 'fettes lambda', 'fettes lambda']);
  this.executeCharTest('𝛍', ['fettes my', 'fettes my', 'fettes my']);
  this.executeCharTest('𝛎', ['fettes ny', 'fettes ny', 'fettes ny']);
  this.executeCharTest('𝛏', ['fettes xi', 'fettes xi', 'fettes xi']);
  this.executeCharTest('𝛐', ['fettes omikron', 'fettes omikron', 'fettes omikron']);
  this.executeCharTest('𝛑', ['fettes pi', 'fettes pi', 'fettes pi']);
  this.executeCharTest('𝛒', ['fettes rho', 'fettes rho', 'fettes rho']);
  this.executeCharTest('𝛓', ['fettes abschließendes sigma', 'fettes abschließendes sigma', 'fettes abschließendes sigma']);
  this.executeCharTest('𝛔', ['fettes sigma', 'fettes sigma', 'fettes sigma']);
  this.executeCharTest('𝛕', ['fettes tau', 'fettes tau', 'fettes tau']);
  this.executeCharTest('𝛖', ['fettes ypsilon', 'fettes ypsilon', 'fettes ypsilon']);
  this.executeCharTest('𝛗', ['fettes phi', 'fettes phi', 'fettes phi']);
  this.executeCharTest('𝛘', ['fettes chi', 'fettes chi', 'fettes chi']);
  this.executeCharTest('𝛙', ['fettes psi', 'fettes psi', 'fettes psi']);
  this.executeCharTest('𝛚', ['fettes omega', 'fettes omega', 'fettes omega']);
  this.executeCharTest('𝛛', ['fettes partielle Ableitung', 'fettes partielle Ableitung', 'fettes partielle Ableitung']);
  this.executeCharTest('𝛜', ['fettes epsilon', 'fettes epsilon', 'fettes epsilon']);
  this.executeCharTest('𝛝', ['fettes theta', 'fettes theta', 'fettes theta']);
  this.executeCharTest('𝛞', ['fettes kappa', 'fettes kappa', 'fettes kappa']);
  this.executeCharTest('𝛟', ['fettes phi', 'fettes phi', 'fettes phi']);
  this.executeCharTest('𝛠', ['fettes rho', 'fettes rho', 'fettes rho']);
  this.executeCharTest('𝛡', ['fettes pi', 'fettes pi', 'fettes pi']);
  this.executeCharTest('𝛢', ['kursives großes Alpha', 'kursives großes Alpha', 'kursives großes Alpha']);
  this.executeCharTest('𝛣', ['kursives großes Beta', 'kursives großes Beta', 'kursives großes Beta']);
  this.executeCharTest('𝛤', ['kursives großes Gamma', 'kursives großes Gamma', 'kursives großes Gamma']);
  this.executeCharTest('𝛥', ['kursives großes Delta', 'kursives großes Delta', 'kursives großes Delta']);
  this.executeCharTest('𝛦', ['kursives großes Epsilon', 'kursives großes Epsilon', 'kursives großes Epsilon']);
  this.executeCharTest('𝛧', ['kursives großes Zeta', 'kursives großes Zeta', 'kursives großes Zeta']);
  this.executeCharTest('𝛨', ['kursives großes Eta', 'kursives großes Eta', 'kursives großes Eta']);
  this.executeCharTest('𝛩', ['kursives großes Theta', 'kursives großes Theta', 'kursives großes Theta']);
  this.executeCharTest('𝛪', ['kursives großes Iota', 'kursives großes Iota', 'kursives großes Iota']);
  this.executeCharTest('𝛫', ['kursives großes Kappa', 'kursives großes Kappa', 'kursives großes Kappa']);
  this.executeCharTest('𝛬', ['kursives großes Lambda', 'kursives großes Lambda', 'kursives großes Lambda']);
  this.executeCharTest('𝛭', ['kursives großes My', 'kursives großes My', 'kursives großes My']);
  this.executeCharTest('𝛮', ['kursives großes Ny', 'kursives großes Ny', 'kursives großes Ny']);
  this.executeCharTest('𝛯', ['kursives großes Xi', 'kursives großes Xi', 'kursives großes Xi']);
  this.executeCharTest('𝛰', ['kursives großes Omikron', 'kursives großes Omikron', 'kursives großes Omikron']);
  this.executeCharTest('𝛱', ['kursives großes Pi', 'kursives großes Pi', 'kursives großes Pi']);
  this.executeCharTest('𝛲', ['kursives großes Rho', 'kursives großes Rho', 'kursives großes Rho']);
  this.executeCharTest('𝛳', ['kursives großes Theta', 'kursives großes Theta', 'kursives großes Theta']);
  this.executeCharTest('𝛴', ['kursives großes Sigma', 'kursives großes Sigma', 'kursives großes Sigma']);
  this.executeCharTest('𝛵', ['kursives großes Tau', 'kursives großes Tau', 'kursives großes Tau']);
  this.executeCharTest('𝛶', ['kursives großes Ypsilon', 'kursives großes Ypsilon', 'kursives großes Ypsilon']);
  this.executeCharTest('𝛷', ['kursives großes Phi', 'kursives großes Phi', 'kursives großes Phi']);
  this.executeCharTest('𝛸', ['kursives großes Chi', 'kursives großes Chi', 'kursives großes Chi']);
  this.executeCharTest('𝛹', ['kursives großes Psi', 'kursives großes Psi', 'kursives großes Psi']);
  this.executeCharTest('𝛺', ['kursives großes Omega', 'kursives großes Omega', 'kursives großes Omega']);
  this.executeCharTest('𝛻', ['kursives nabla', 'kursives nabla', 'kursives nabla']);
  this.executeCharTest('𝛼', ['kursives alpha', 'kursives alpha', 'kursives alpha']);
  this.executeCharTest('𝛽', ['kursives beta', 'kursives beta', 'kursives beta']);
  this.executeCharTest('𝛾', ['kursives gamma', 'kursives gamma', 'kursives gamma']);
  this.executeCharTest('𝛿', ['kursives delta', 'kursives delta', 'kursives delta']);
  this.executeCharTest('𝜀', ['kursives epsilon', 'kursives epsilon', 'kursives epsilon']);
  this.executeCharTest('𝜁', ['kursives zeta', 'kursives zeta', 'kursives zeta']);
  this.executeCharTest('𝜂', ['kursives eta', 'kursives eta', 'kursives eta']);
  this.executeCharTest('𝜃', ['kursives theta', 'kursives theta', 'kursives theta']);
  this.executeCharTest('𝜄', ['kursives iota', 'kursives iota', 'kursives iota']);
  this.executeCharTest('𝜅', ['kursives kappa', 'kursives kappa', 'kursives kappa']);
  this.executeCharTest('𝜆', ['kursives lambda', 'kursives lambda', 'kursives lambda']);
  this.executeCharTest('𝜇', ['kursives my', 'kursives my', 'kursives my']);
  this.executeCharTest('𝜈', ['kursives ny', 'kursives ny', 'kursives ny']);
  this.executeCharTest('𝜉', ['kursives xi', 'kursives xi', 'kursives xi']);
  this.executeCharTest('𝜊', ['kursives omikron', 'kursives omikron', 'kursives omikron']);
  this.executeCharTest('𝜋', ['kursives pi', 'kursives pi', 'kursives pi']);
  this.executeCharTest('𝜌', ['kursives rho', 'kursives rho', 'kursives rho']);
  this.executeCharTest('𝜍', ['kursives abschließendes sigma', 'kursives abschließendes sigma', 'kursives abschließendes sigma']);
  this.executeCharTest('𝜎', ['kursives sigma', 'kursives sigma', 'kursives sigma']);
  this.executeCharTest('𝜏', ['kursives tau', 'kursives tau', 'kursives tau']);
  this.executeCharTest('𝜐', ['kursives ypsilon', 'kursives ypsilon', 'kursives ypsilon']);
  this.executeCharTest('𝜑', ['kursives phi', 'kursives phi', 'kursives phi']);
  this.executeCharTest('𝜒', ['kursives chi', 'kursives chi', 'kursives chi']);
  this.executeCharTest('𝜓', ['kursives psi', 'kursives psi', 'kursives psi']);
  this.executeCharTest('𝜔', ['kursives omega', 'kursives omega', 'kursives omega']);
  this.executeCharTest('𝜕', ['kursives partielle Ableitung', 'kursives partielle Ableitung', 'kursives partielle Ableitung']);
  this.executeCharTest('𝜖', ['kursives epsilon', 'kursives epsilon', 'kursives epsilon']);
  this.executeCharTest('𝜗', ['kursives theta', 'kursives theta', 'kursives theta']);
  this.executeCharTest('𝜘', ['kursives kappa', 'kursives kappa', 'kursives kappa']);
  this.executeCharTest('𝜙', ['kursives phi', 'kursives phi', 'kursives phi']);
  this.executeCharTest('𝜚', ['kursives rho', 'kursives rho', 'kursives rho']);
  this.executeCharTest('𝜛', ['kursives pi', 'kursives pi', 'kursives pi']);
  this.executeCharTest('𝜜', ['fettkursives großes Alpha', 'fettkursives großes Alpha', 'fettkursives großes Alpha']);
  this.executeCharTest('𝜝', ['fettkursives großes Beta', 'fettkursives großes Beta', 'fettkursives großes Beta']);
  this.executeCharTest('𝜞', ['fettkursives großes Gamma', 'fettkursives großes Gamma', 'fettkursives großes Gamma']);
  this.executeCharTest('𝜟', ['fettkursives großes Delta', 'fettkursives großes Delta', 'fettkursives großes Delta']);
  this.executeCharTest('𝜠', ['fettkursives großes Epsilon', 'fettkursives großes Epsilon', 'fettkursives großes Epsilon']);
  this.executeCharTest('𝜡', ['fettkursives großes Zeta', 'fettkursives großes Zeta', 'fettkursives großes Zeta']);
  this.executeCharTest('𝜢', ['fettkursives großes Eta', 'fettkursives großes Eta', 'fettkursives großes Eta']);
  this.executeCharTest('𝜣', ['fettkursives großes Theta', 'fettkursives großes Theta', 'fettkursives großes Theta']);
  this.executeCharTest('𝜤', ['fettkursives großes Iota', 'fettkursives großes Iota', 'fettkursives großes Iota']);
  this.executeCharTest('𝜥', ['fettkursives großes Kappa', 'fettkursives großes Kappa', 'fettkursives großes Kappa']);
  this.executeCharTest('𝜦', ['fettkursives großes Lambda', 'fettkursives großes Lambda', 'fettkursives großes Lambda']);
  this.executeCharTest('𝜧', ['fettkursives großes My', 'fettkursives großes My', 'fettkursives großes My']);
  this.executeCharTest('𝜨', ['fettkursives großes Ny', 'fettkursives großes Ny', 'fettkursives großes Ny']);
  this.executeCharTest('𝜩', ['fettkursives großes Xi', 'fettkursives großes Xi', 'fettkursives großes Xi']);
  this.executeCharTest('𝜪', ['fettkursives großes Omikron', 'fettkursives großes Omikron', 'fettkursives großes Omikron']);
  this.executeCharTest('𝜫', ['fettkursives großes Pi', 'fettkursives großes Pi', 'fettkursives großes Pi']);
  this.executeCharTest('𝜬', ['fettkursives großes Rho', 'fettkursives großes Rho', 'fettkursives großes Rho']);
  this.executeCharTest('𝜭', ['fettkursives großes Theta', 'fettkursives großes Theta', 'fettkursives großes Theta']);
  this.executeCharTest('𝜮', ['fettkursives großes Sigma', 'fettkursives großes Sigma', 'fettkursives großes Sigma']);
  this.executeCharTest('𝜯', ['fettkursives großes Tau', 'fettkursives großes Tau', 'fettkursives großes Tau']);
  this.executeCharTest('𝜰', ['fettkursives großes Ypsilon', 'fettkursives großes Ypsilon', 'fettkursives großes Ypsilon']);
  this.executeCharTest('𝜱', ['fettkursives großes Phi', 'fettkursives großes Phi', 'fettkursives großes Phi']);
  this.executeCharTest('𝜲', ['fettkursives großes Chi', 'fettkursives großes Chi', 'fettkursives großes Chi']);
  this.executeCharTest('𝜳', ['fettkursives großes Psi', 'fettkursives großes Psi', 'fettkursives großes Psi']);
  this.executeCharTest('𝜴', ['fettkursives großes Omega', 'fettkursives großes Omega', 'fettkursives großes Omega']);
  this.executeCharTest('𝜵', ['fettkursives nabla', 'fettkursives nabla', 'fettkursives nabla']);
  this.executeCharTest('𝜶', ['fettkursives alpha', 'fettkursives alpha', 'fettkursives alpha']);
  this.executeCharTest('𝜷', ['fettkursives beta', 'fettkursives beta', 'fettkursives beta']);
  this.executeCharTest('𝜸', ['fettkursives gamma', 'fettkursives gamma', 'fettkursives gamma']);
  this.executeCharTest('𝜹', ['fettkursives delta', 'fettkursives delta', 'fettkursives delta']);
  this.executeCharTest('𝜺', ['fettkursives epsilon', 'fettkursives epsilon', 'fettkursives epsilon']);
  this.executeCharTest('𝜻', ['fettkursives zeta', 'fettkursives zeta', 'fettkursives zeta']);
  this.executeCharTest('𝜼', ['fettkursives eta', 'fettkursives eta', 'fettkursives eta']);
  this.executeCharTest('𝜽', ['fettkursives theta', 'fettkursives theta', 'fettkursives theta']);
  this.executeCharTest('𝜾', ['fettkursives iota', 'fettkursives iota', 'fettkursives iota']);
  this.executeCharTest('𝜿', ['fettkursives kappa', 'fettkursives kappa', 'fettkursives kappa']);
  this.executeCharTest('𝝀', ['fettkursives lambda', 'fettkursives lambda', 'fettkursives lambda']);
  this.executeCharTest('𝝁', ['fettkursives my', 'fettkursives my', 'fettkursives my']);
  this.executeCharTest('𝝂', ['fettkursives ny', 'fettkursives ny', 'fettkursives ny']);
  this.executeCharTest('𝝃', ['fettkursives xi', 'fettkursives xi', 'fettkursives xi']);
  this.executeCharTest('𝝄', ['fettkursives omikron', 'fettkursives omikron', 'fettkursives omikron']);
  this.executeCharTest('𝝅', ['fettkursives pi', 'fettkursives pi', 'fettkursives pi']);
  this.executeCharTest('𝝆', ['fettkursives rho', 'fettkursives rho', 'fettkursives rho']);
  this.executeCharTest('𝝇', ['fettkursives abschließendes sigma', 'fettkursives abschließendes sigma', 'fettkursives abschließendes sigma']);
  this.executeCharTest('𝝈', ['fettkursives sigma', 'fettkursives sigma', 'fettkursives sigma']);
  this.executeCharTest('𝝉', ['fettkursives tau', 'fettkursives tau', 'fettkursives tau']);
  this.executeCharTest('𝝊', ['fettkursives ypsilon', 'fettkursives ypsilon', 'fettkursives ypsilon']);
  this.executeCharTest('𝝋', ['fettkursives phi', 'fettkursives phi', 'fettkursives phi']);
  this.executeCharTest('𝝌', ['fettkursives chi', 'fettkursives chi', 'fettkursives chi']);
  this.executeCharTest('𝝍', ['fettkursives psi', 'fettkursives psi', 'fettkursives psi']);
  this.executeCharTest('𝝎', ['fettkursives omega', 'fettkursives omega', 'fettkursives omega']);
  this.executeCharTest('𝝏', ['fettkursives partielle Ableitung', 'fettkursives partielle Ableitung', 'fettkursives partielle Ableitung']);
  this.executeCharTest('𝝐', ['fettkursives epsilon', 'fettkursives epsilon', 'fettkursives epsilon']);
  this.executeCharTest('𝝑', ['fettkursives theta', 'fettkursives theta', 'fettkursives theta']);
  this.executeCharTest('𝝒', ['fettkursives kappa', 'fettkursives kappa', 'fettkursives kappa']);
  this.executeCharTest('𝝓', ['fettkursives phi', 'fettkursives phi', 'fettkursives phi']);
  this.executeCharTest('𝝔', ['fettkursives rho', 'fettkursives rho', 'fettkursives rho']);
  this.executeCharTest('𝝕', ['fettkursives pi', 'fettkursives pi', 'fettkursives pi']);
  this.executeCharTest('𝝖', ['serifenloses fettes großes Alpha', 'serifenloses fettes großes Alpha', 'serifenloses fettes großes Alpha']);
  this.executeCharTest('𝝗', ['serifenloses fettes großes Beta', 'serifenloses fettes großes Beta', 'serifenloses fettes großes Beta']);
  this.executeCharTest('𝝘', ['serifenloses fettes großes Gamma', 'serifenloses fettes großes Gamma', 'serifenloses fettes großes Gamma']);
  this.executeCharTest('𝝙', ['serifenloses fettes großes Delta', 'serifenloses fettes großes Delta', 'serifenloses fettes großes Delta']);
  this.executeCharTest('𝝚', ['serifenloses fettes großes Epsilon', 'serifenloses fettes großes Epsilon', 'serifenloses fettes großes Epsilon']);
  this.executeCharTest('𝝛', ['serifenloses fettes großes Zeta', 'serifenloses fettes großes Zeta', 'serifenloses fettes großes Zeta']);
  this.executeCharTest('𝝜', ['serifenloses fettes großes Eta', 'serifenloses fettes großes Eta', 'serifenloses fettes großes Eta']);
  this.executeCharTest('𝝝', ['serifenloses fettes großes Theta', 'serifenloses fettes großes Theta', 'serifenloses fettes großes Theta']);
  this.executeCharTest('𝝞', ['serifenloses fettes großes Iota', 'serifenloses fettes großes Iota', 'serifenloses fettes großes Iota']);
  this.executeCharTest('𝝟', ['serifenloses fettes großes Kappa', 'serifenloses fettes großes Kappa', 'serifenloses fettes großes Kappa']);
  this.executeCharTest('𝝠', ['serifenloses fettes großes Lambda', 'serifenloses fettes großes Lambda', 'serifenloses fettes großes Lambda']);
  this.executeCharTest('𝝡', ['serifenloses fettes großes My', 'serifenloses fettes großes My', 'serifenloses fettes großes My']);
  this.executeCharTest('𝝢', ['serifenloses fettes großes Ny', 'serifenloses fettes großes Ny', 'serifenloses fettes großes Ny']);
  this.executeCharTest('𝝣', ['serifenloses fettes großes Xi', 'serifenloses fettes großes Xi', 'serifenloses fettes großes Xi']);
  this.executeCharTest('𝝤', ['serifenloses fettes großes Omikron', 'serifenloses fettes großes Omikron', 'serifenloses fettes großes Omikron']);
  this.executeCharTest('𝝥', ['serifenloses fettes großes Pi', 'serifenloses fettes großes Pi', 'serifenloses fettes großes Pi']);
  this.executeCharTest('𝝦', ['serifenloses fettes großes Rho', 'serifenloses fettes großes Rho', 'serifenloses fettes großes Rho']);
  this.executeCharTest('𝝧', ['serifenloses fettes großes Theta', 'serifenloses fettes großes Theta', 'serifenloses fettes großes Theta']);
  this.executeCharTest('𝝨', ['serifenloses fettes großes Sigma', 'serifenloses fettes großes Sigma', 'serifenloses fettes großes Sigma']);
  this.executeCharTest('𝝩', ['serifenloses fettes großes Tau', 'serifenloses fettes großes Tau', 'serifenloses fettes großes Tau']);
  this.executeCharTest('𝝪', ['serifenloses fettes großes Ypsilon', 'serifenloses fettes großes Ypsilon', 'serifenloses fettes großes Ypsilon']);
  this.executeCharTest('𝝫', ['serifenloses fettes großes Phi', 'serifenloses fettes großes Phi', 'serifenloses fettes großes Phi']);
  this.executeCharTest('𝝬', ['serifenloses fettes großes Chi', 'serifenloses fettes großes Chi', 'serifenloses fettes großes Chi']);
  this.executeCharTest('𝝭', ['serifenloses fettes großes Psi', 'serifenloses fettes großes Psi', 'serifenloses fettes großes Psi']);
  this.executeCharTest('𝝮', ['serifenloses fettes großes Omega', 'serifenloses fettes großes Omega', 'serifenloses fettes großes Omega']);
  this.executeCharTest('𝝯', ['serifenloses fettes nabla', 'serifenloses fettes nabla', 'serifenloses fettes nabla']);
  this.executeCharTest('𝝰', ['serifenloses fettes alpha', 'serifenloses fettes alpha', 'serifenloses fettes alpha']);
  this.executeCharTest('𝝱', ['serifenloses fettes beta', 'serifenloses fettes beta', 'serifenloses fettes beta']);
  this.executeCharTest('𝝲', ['serifenloses fettes gamma', 'serifenloses fettes gamma', 'serifenloses fettes gamma']);
  this.executeCharTest('𝝳', ['serifenloses fettes delta', 'serifenloses fettes delta', 'serifenloses fettes delta']);
  this.executeCharTest('𝝴', ['serifenloses fettes epsilon', 'serifenloses fettes epsilon', 'serifenloses fettes epsilon']);
  this.executeCharTest('𝝵', ['serifenloses fettes zeta', 'serifenloses fettes zeta', 'serifenloses fettes zeta']);
  this.executeCharTest('𝝶', ['serifenloses fettes eta', 'serifenloses fettes eta', 'serifenloses fettes eta']);
  this.executeCharTest('𝝷', ['serifenloses fettes theta', 'serifenloses fettes theta', 'serifenloses fettes theta']);
  this.executeCharTest('𝝸', ['serifenloses fettes iota', 'serifenloses fettes iota', 'serifenloses fettes iota']);
  this.executeCharTest('𝝹', ['serifenloses fettes kappa', 'serifenloses fettes kappa', 'serifenloses fettes kappa']);
  this.executeCharTest('𝝺', ['serifenloses fettes lambda', 'serifenloses fettes lambda', 'serifenloses fettes lambda']);
  this.executeCharTest('𝝻', ['serifenloses fettes my', 'serifenloses fettes my', 'serifenloses fettes my']);
  this.executeCharTest('𝝼', ['serifenloses fettes ny', 'serifenloses fettes ny', 'serifenloses fettes ny']);
  this.executeCharTest('𝝽', ['serifenloses fettes xi', 'serifenloses fettes xi', 'serifenloses fettes xi']);
  this.executeCharTest('𝝾', ['serifenloses fettes omikron', 'serifenloses fettes omikron', 'serifenloses fettes omikron']);
  this.executeCharTest('𝝿', ['serifenloses fettes pi', 'serifenloses fettes pi', 'serifenloses fettes pi']);
  this.executeCharTest('𝞀', ['serifenloses fettes rho', 'serifenloses fettes rho', 'serifenloses fettes rho']);
  this.executeCharTest('𝞁', ['serifenloses fettes abschließendes sigma', 'serifenloses fettes abschließendes sigma', 'serifenloses fettes abschließendes sigma']);
  this.executeCharTest('𝞂', ['serifenloses fettes sigma', 'serifenloses fettes sigma', 'serifenloses fettes sigma']);
  this.executeCharTest('𝞃', ['serifenloses fettes tau', 'serifenloses fettes tau', 'serifenloses fettes tau']);
  this.executeCharTest('𝞄', ['serifenloses fettes ypsilon', 'serifenloses fettes ypsilon', 'serifenloses fettes ypsilon']);
  this.executeCharTest('𝞅', ['serifenloses fettes phi', 'serifenloses fettes phi', 'serifenloses fettes phi']);
  this.executeCharTest('𝞆', ['serifenloses fettes chi', 'serifenloses fettes chi', 'serifenloses fettes chi']);
  this.executeCharTest('𝞇', ['serifenloses fettes psi', 'serifenloses fettes psi', 'serifenloses fettes psi']);
  this.executeCharTest('𝞈', ['serifenloses fettes omega', 'serifenloses fettes omega', 'serifenloses fettes omega']);
  this.executeCharTest('𝞉', ['serifenloses fettes partielle Ableitung', 'serifenloses fettes partielle Ableitung', 'serifenloses fettes partielle Ableitung']);
  this.executeCharTest('𝞊', ['serifenloses fettes epsilon', 'serifenloses fettes epsilon', 'serifenloses fettes epsilon']);
  this.executeCharTest('𝞋', ['serifenloses fettes theta', 'serifenloses fettes theta', 'serifenloses fettes theta']);
  this.executeCharTest('𝞌', ['serifenloses fettes kappa', 'serifenloses fettes kappa', 'serifenloses fettes kappa']);
  this.executeCharTest('𝞍', ['serifenloses fettes phi', 'serifenloses fettes phi', 'serifenloses fettes phi']);
  this.executeCharTest('𝞎', ['serifenloses fettes rho', 'serifenloses fettes rho', 'serifenloses fettes rho']);
  this.executeCharTest('𝞏', ['serifenloses fettes pi', 'serifenloses fettes pi', 'serifenloses fettes pi']);
  this.executeCharTest('𝞐', ['serifenloses fettkursives großes Alpha', 'serifenloses fettkursives großes Alpha', 'serifenloses fettkursives großes Alpha']);
  this.executeCharTest('𝞑', ['serifenloses fettkursives großes Beta', 'serifenloses fettkursives großes Beta', 'serifenloses fettkursives großes Beta']);
  this.executeCharTest('𝞒', ['serifenloses fettkursives großes Gamma', 'serifenloses fettkursives großes Gamma', 'serifenloses fettkursives großes Gamma']);
  this.executeCharTest('𝞓', ['serifenloses fettkursives großes Delta', 'serifenloses fettkursives großes Delta', 'serifenloses fettkursives großes Delta']);
  this.executeCharTest('𝞔', ['serifenloses fettkursives großes Epsilon', 'serifenloses fettkursives großes Epsilon', 'serifenloses fettkursives großes Epsilon']);
  this.executeCharTest('𝞕', ['serifenloses fettkursives großes Zeta', 'serifenloses fettkursives großes Zeta', 'serifenloses fettkursives großes Zeta']);
  this.executeCharTest('𝞖', ['serifenloses fettkursives großes Eta', 'serifenloses fettkursives großes Eta', 'serifenloses fettkursives großes Eta']);
  this.executeCharTest('𝞗', ['serifenloses fettkursives großes Theta', 'serifenloses fettkursives großes Theta', 'serifenloses fettkursives großes Theta']);
  this.executeCharTest('𝞘', ['serifenloses fettkursives großes Iota', 'serifenloses fettkursives großes Iota', 'serifenloses fettkursives großes Iota']);
  this.executeCharTest('𝞙', ['serifenloses fettkursives großes Kappa', 'serifenloses fettkursives großes Kappa', 'serifenloses fettkursives großes Kappa']);
  this.executeCharTest('𝞚', ['serifenloses fettkursives großes Lambda', 'serifenloses fettkursives großes Lambda', 'serifenloses fettkursives großes Lambda']);
  this.executeCharTest('𝞛', ['serifenloses fettkursives großes My', 'serifenloses fettkursives großes My', 'serifenloses fettkursives großes My']);
  this.executeCharTest('𝞜', ['serifenloses fettkursives großes Ny', 'serifenloses fettkursives großes Ny', 'serifenloses fettkursives großes Ny']);
  this.executeCharTest('𝞝', ['serifenloses fettkursives großes Xi', 'serifenloses fettkursives großes Xi', 'serifenloses fettkursives großes Xi']);
  this.executeCharTest('𝞞', ['serifenloses fettkursives großes Omikron', 'serifenloses fettkursives großes Omikron', 'serifenloses fettkursives großes Omikron']);
  this.executeCharTest('𝞟', ['serifenloses fettkursives großes Pi', 'serifenloses fettkursives großes Pi', 'serifenloses fettkursives großes Pi']);
  this.executeCharTest('𝞠', ['serifenloses fettkursives großes Rho', 'serifenloses fettkursives großes Rho', 'serifenloses fettkursives großes Rho']);
  this.executeCharTest('𝞡', ['serifenloses fettkursives großes Theta', 'serifenloses fettkursives großes Theta', 'serifenloses fettkursives großes Theta']);
  this.executeCharTest('𝞢', ['serifenloses fettkursives großes Sigma', 'serifenloses fettkursives großes Sigma', 'serifenloses fettkursives großes Sigma']);
  this.executeCharTest('𝞣', ['serifenloses fettkursives großes Tau', 'serifenloses fettkursives großes Tau', 'serifenloses fettkursives großes Tau']);
  this.executeCharTest('𝞤', ['serifenloses fettkursives großes Ypsilon', 'serifenloses fettkursives großes Ypsilon', 'serifenloses fettkursives großes Ypsilon']);
  this.executeCharTest('𝞥', ['serifenloses fettkursives großes Phi', 'serifenloses fettkursives großes Phi', 'serifenloses fettkursives großes Phi']);
  this.executeCharTest('𝞦', ['serifenloses fettkursives großes Chi', 'serifenloses fettkursives großes Chi', 'serifenloses fettkursives großes Chi']);
  this.executeCharTest('𝞧', ['serifenloses fettkursives großes Psi', 'serifenloses fettkursives großes Psi', 'serifenloses fettkursives großes Psi']);
  this.executeCharTest('𝞨', ['serifenloses fettkursives großes Omega', 'serifenloses fettkursives großes Omega', 'serifenloses fettkursives großes Omega']);
  this.executeCharTest('𝞩', ['serifenloses fettkursives nabla', 'serifenloses fettkursives nabla', 'serifenloses fettkursives nabla']);
  this.executeCharTest('𝞪', ['serifenloses fettkursives alpha', 'serifenloses fettkursives alpha', 'serifenloses fettkursives alpha']);
  this.executeCharTest('𝞫', ['serifenloses fettkursives beta', 'serifenloses fettkursives beta', 'serifenloses fettkursives beta']);
  this.executeCharTest('𝞬', ['serifenloses fettkursives gamma', 'serifenloses fettkursives gamma', 'serifenloses fettkursives gamma']);
  this.executeCharTest('𝞭', ['serifenloses fettkursives delta', 'serifenloses fettkursives delta', 'serifenloses fettkursives delta']);
  this.executeCharTest('𝞮', ['serifenloses fettkursives epsilon', 'serifenloses fettkursives epsilon', 'serifenloses fettkursives epsilon']);
  this.executeCharTest('𝞯', ['serifenloses fettkursives zeta', 'serifenloses fettkursives zeta', 'serifenloses fettkursives zeta']);
  this.executeCharTest('𝞰', ['serifenloses fettkursives eta', 'serifenloses fettkursives eta', 'serifenloses fettkursives eta']);
  this.executeCharTest('𝞱', ['serifenloses fettkursives theta', 'serifenloses fettkursives theta', 'serifenloses fettkursives theta']);
  this.executeCharTest('𝞲', ['serifenloses fettkursives iota', 'serifenloses fettkursives iota', 'serifenloses fettkursives iota']);
  this.executeCharTest('𝞳', ['serifenloses fettkursives kappa', 'serifenloses fettkursives kappa', 'serifenloses fettkursives kappa']);
  this.executeCharTest('𝞴', ['serifenloses fettkursives lambda', 'serifenloses fettkursives lambda', 'serifenloses fettkursives lambda']);
  this.executeCharTest('𝞵', ['serifenloses fettkursives my', 'serifenloses fettkursives my', 'serifenloses fettkursives my']);
  this.executeCharTest('𝞶', ['serifenloses fettkursives ny', 'serifenloses fettkursives ny', 'serifenloses fettkursives ny']);
  this.executeCharTest('𝞷', ['serifenloses fettkursives xi', 'serifenloses fettkursives xi', 'serifenloses fettkursives xi']);
  this.executeCharTest('𝞸', ['serifenloses fettkursives omikron', 'serifenloses fettkursives omikron', 'serifenloses fettkursives omikron']);
  this.executeCharTest('𝞹', ['serifenloses fettkursives pi', 'serifenloses fettkursives pi', 'serifenloses fettkursives pi']);
  this.executeCharTest('𝞺', ['serifenloses fettkursives rho', 'serifenloses fettkursives rho', 'serifenloses fettkursives rho']);
  this.executeCharTest('𝞻', ['serifenloses fettkursives abschließendes sigma', 'serifenloses fettkursives abschließendes sigma', 'serifenloses fettkursives abschließendes sigma']);
  this.executeCharTest('𝞼', ['serifenloses fettkursives sigma', 'serifenloses fettkursives sigma', 'serifenloses fettkursives sigma']);
  this.executeCharTest('𝞽', ['serifenloses fettkursives tau', 'serifenloses fettkursives tau', 'serifenloses fettkursives tau']);
  this.executeCharTest('𝞾', ['serifenloses fettkursives ypsilon', 'serifenloses fettkursives ypsilon', 'serifenloses fettkursives ypsilon']);
  this.executeCharTest('𝞿', ['serifenloses fettkursives phi', 'serifenloses fettkursives phi', 'serifenloses fettkursives phi']);
  this.executeCharTest('𝟀', ['serifenloses fettkursives chi', 'serifenloses fettkursives chi', 'serifenloses fettkursives chi']);
  this.executeCharTest('𝟁', ['serifenloses fettkursives psi', 'serifenloses fettkursives psi', 'serifenloses fettkursives psi']);
  this.executeCharTest('𝟂', ['serifenloses fettkursives omega', 'serifenloses fettkursives omega', 'serifenloses fettkursives omega']);
  this.executeCharTest('𝟃', ['serifenloses fettkursives partielle Ableitung', 'serifenloses fettkursives partielle Ableitung', 'serifenloses fettkursives partielle Ableitung']);
  this.executeCharTest('𝟄', ['serifenloses fettkursives epsilon', 'serifenloses fettkursives epsilon', 'serifenloses fettkursives epsilon']);
  this.executeCharTest('𝟅', ['serifenloses fettkursives theta', 'serifenloses fettkursives theta', 'serifenloses fettkursives theta']);
  this.executeCharTest('𝟆', ['serifenloses fettkursives kappa', 'serifenloses fettkursives kappa', 'serifenloses fettkursives kappa']);
  this.executeCharTest('𝟇', ['serifenloses fettkursives phi', 'serifenloses fettkursives phi', 'serifenloses fettkursives phi']);
  this.executeCharTest('𝟈', ['serifenloses fettkursives rho', 'serifenloses fettkursives rho', 'serifenloses fettkursives rho']);
  this.executeCharTest('𝟉', ['serifenloses fettkursives pi', 'serifenloses fettkursives pi', 'serifenloses fettkursives pi']);
  this.executeCharTest('⁰', ['hoch 0', 'hoch 0', 'hoch 0']);
  this.executeCharTest('¹', ['hoch 1', 'hoch 1', 'hoch 1']);
  this.executeCharTest('²', ['hoch 2', 'hoch 2', 'hoch 2']);
  this.executeCharTest('³', ['hoch 3', 'hoch 3', 'hoch 3']);
  this.executeCharTest('⁴', ['hoch 4', 'hoch 4', 'hoch 4']);
  this.executeCharTest('⁵', ['hoch 5', 'hoch 5', 'hoch 5']);
  this.executeCharTest('⁶', ['hoch 6', 'hoch 6', 'hoch 6']);
  this.executeCharTest('⁷', ['hoch 7', 'hoch 7', 'hoch 7']);
  this.executeCharTest('⁸', ['hoch 8', 'hoch 8', 'hoch 8']);
  this.executeCharTest('⁹', ['hoch 9', 'hoch 9', 'hoch 9']);
  this.executeCharTest('₀', ['Index 0', 'Index 0', 'Index 0']);
  this.executeCharTest('₁', ['Index 1', 'Index 1', 'Index 1']);
  this.executeCharTest('₂', ['Index 2', 'Index 2', 'Index 2']);
  this.executeCharTest('₃', ['Index 3', 'Index 3', 'Index 3']);
  this.executeCharTest('₄', ['Index 4', 'Index 4', 'Index 4']);
  this.executeCharTest('₅', ['Index 5', 'Index 5', 'Index 5']);
  this.executeCharTest('₆', ['Index 6', 'Index 6', 'Index 6']);
  this.executeCharTest('₇', ['Index 7', 'Index 7', 'Index 7']);
  this.executeCharTest('₈', ['Index 8', 'Index 8', 'Index 8']);
  this.executeCharTest('₉', ['Index 9', 'Index 9', 'Index 9']);
  this.executeCharTest('⓪', ['eingekreiste 0', 'eingekreiste 0', 'eingekreiste 0']);
  this.executeCharTest('①', ['eingekreiste 1', 'eingekreiste 1', 'eingekreiste 1']);
  this.executeCharTest('②', ['eingekreiste 2', 'eingekreiste 2', 'eingekreiste 2']);
  this.executeCharTest('③', ['eingekreiste 3', 'eingekreiste 3', 'eingekreiste 3']);
  this.executeCharTest('④', ['eingekreiste 4', 'eingekreiste 4', 'eingekreiste 4']);
  this.executeCharTest('⑤', ['eingekreiste 5', 'eingekreiste 5', 'eingekreiste 5']);
  this.executeCharTest('⑥', ['eingekreiste 6', 'eingekreiste 6', 'eingekreiste 6']);
  this.executeCharTest('⑦', ['eingekreiste 7', 'eingekreiste 7', 'eingekreiste 7']);
  this.executeCharTest('⑧', ['eingekreiste 8', 'eingekreiste 8', 'eingekreiste 8']);
  this.executeCharTest('⑨', ['eingekreiste 9', 'eingekreiste 9', 'eingekreiste 9']);
  this.executeCharTest('⑩', ['eingekreiste 10', 'eingekreiste 10', 'eingekreiste 10']);
  this.executeCharTest('⑪', ['eingekreiste 11', 'eingekreiste 11', 'eingekreiste 11']);
  this.executeCharTest('⑫', ['eingekreiste 12', 'eingekreiste 12', 'eingekreiste 12']);
  this.executeCharTest('⑬', ['eingekreiste 13', 'eingekreiste 13', 'eingekreiste 13']);
  this.executeCharTest('⑭', ['eingekreiste 14', 'eingekreiste 14', 'eingekreiste 14']);
  this.executeCharTest('⑮', ['eingekreiste 15', 'eingekreiste 15', 'eingekreiste 15']);
  this.executeCharTest('⑯', ['eingekreiste 16', 'eingekreiste 16', 'eingekreiste 16']);
  this.executeCharTest('⑰', ['eingekreiste 17', 'eingekreiste 17', 'eingekreiste 17']);
  this.executeCharTest('⑱', ['eingekreiste 18', 'eingekreiste 18', 'eingekreiste 18']);
  this.executeCharTest('⑲', ['eingekreiste 19', 'eingekreiste 19', 'eingekreiste 19']);
  this.executeCharTest('⑳', ['eingekreiste 20', 'eingekreiste 20', 'eingekreiste 20']);
  this.executeCharTest('㉑', ['eingekreiste 21', 'eingekreiste 21', 'eingekreiste 21']);
  this.executeCharTest('㉒', ['eingekreiste 22', 'eingekreiste 22', 'eingekreiste 22']);
  this.executeCharTest('㉓', ['eingekreiste 23', 'eingekreiste 23', 'eingekreiste 23']);
  this.executeCharTest('㉔', ['eingekreiste 24', 'eingekreiste 24', 'eingekreiste 24']);
  this.executeCharTest('㉕', ['eingekreiste 25', 'eingekreiste 25', 'eingekreiste 25']);
  this.executeCharTest('㉖', ['eingekreiste 26', 'eingekreiste 26', 'eingekreiste 26']);
  this.executeCharTest('㉗', ['eingekreiste 27', 'eingekreiste 27', 'eingekreiste 27']);
  this.executeCharTest('㉘', ['eingekreiste 28', 'eingekreiste 28', 'eingekreiste 28']);
  this.executeCharTest('㉙', ['eingekreiste 29', 'eingekreiste 29', 'eingekreiste 29']);
  this.executeCharTest('㉚', ['eingekreiste 30', 'eingekreiste 30', 'eingekreiste 30']);
  this.executeCharTest('㉛', ['eingekreiste 31', 'eingekreiste 31', 'eingekreiste 31']);
  this.executeCharTest('㉜', ['eingekreiste 32', 'eingekreiste 32', 'eingekreiste 32']);
  this.executeCharTest('㉝', ['eingekreiste 33', 'eingekreiste 33', 'eingekreiste 33']);
  this.executeCharTest('㉞', ['eingekreiste 34', 'eingekreiste 34', 'eingekreiste 34']);
  this.executeCharTest('㉟', ['eingekreiste 35', 'eingekreiste 35', 'eingekreiste 35']);
  this.executeCharTest('㊱', ['eingekreiste 36', 'eingekreiste 36', 'eingekreiste 36']);
  this.executeCharTest('㊲', ['eingekreiste 37', 'eingekreiste 37', 'eingekreiste 37']);
  this.executeCharTest('㊳', ['eingekreiste 38', 'eingekreiste 38', 'eingekreiste 38']);
  this.executeCharTest('㊴', ['eingekreiste 39', 'eingekreiste 39', 'eingekreiste 39']);
  this.executeCharTest('㊵', ['eingekreiste 40', 'eingekreiste 40', 'eingekreiste 40']);
  this.executeCharTest('㊶', ['eingekreiste 41', 'eingekreiste 41', 'eingekreiste 41']);
  this.executeCharTest('㊷', ['eingekreiste 42', 'eingekreiste 42', 'eingekreiste 42']);
  this.executeCharTest('㊸', ['eingekreiste 43', 'eingekreiste 43', 'eingekreiste 43']);
  this.executeCharTest('㊹', ['eingekreiste 44', 'eingekreiste 44', 'eingekreiste 44']);
  this.executeCharTest('㊺', ['eingekreiste 45', 'eingekreiste 45', 'eingekreiste 45']);
  this.executeCharTest('㊻', ['eingekreiste 46', 'eingekreiste 46', 'eingekreiste 46']);
  this.executeCharTest('㊼', ['eingekreiste 47', 'eingekreiste 47', 'eingekreiste 47']);
  this.executeCharTest('㊽', ['eingekreiste 48', 'eingekreiste 48', 'eingekreiste 48']);
  this.executeCharTest('㊾', ['eingekreiste 49', 'eingekreiste 49', 'eingekreiste 49']);
  this.executeCharTest('㊿', ['eingekreiste 50', 'eingekreiste 50', 'eingekreiste 50']);
  this.executeCharTest('⑴', ['eingeklammerte 1', 'eingeklammerte 1', 'eingeklammerte 1']);
  this.executeCharTest('⑵', ['eingeklammerte 2', 'eingeklammerte 2', 'eingeklammerte 2']);
  this.executeCharTest('⑶', ['eingeklammerte 3', 'eingeklammerte 3', 'eingeklammerte 3']);
  this.executeCharTest('⑷', ['eingeklammerte 4', 'eingeklammerte 4', 'eingeklammerte 4']);
  this.executeCharTest('⑸', ['eingeklammerte 5', 'eingeklammerte 5', 'eingeklammerte 5']);
  this.executeCharTest('⑹', ['eingeklammerte 6', 'eingeklammerte 6', 'eingeklammerte 6']);
  this.executeCharTest('⑺', ['eingeklammerte 7', 'eingeklammerte 7', 'eingeklammerte 7']);
  this.executeCharTest('⑻', ['eingeklammerte 8', 'eingeklammerte 8', 'eingeklammerte 8']);
  this.executeCharTest('⑼', ['eingeklammerte 9', 'eingeklammerte 9', 'eingeklammerte 9']);
  this.executeCharTest('⑽', ['eingeklammerte 10', 'eingeklammerte 10', 'eingeklammerte 10']);
  this.executeCharTest('⑾', ['eingeklammerte 11', 'eingeklammerte 11', 'eingeklammerte 11']);
  this.executeCharTest('⑿', ['eingeklammerte 12', 'eingeklammerte 12', 'eingeklammerte 12']);
  this.executeCharTest('⒀', ['eingeklammerte 13', 'eingeklammerte 13', 'eingeklammerte 13']);
  this.executeCharTest('⒁', ['eingeklammerte 14', 'eingeklammerte 14', 'eingeklammerte 14']);
  this.executeCharTest('⒂', ['eingeklammerte 15', 'eingeklammerte 15', 'eingeklammerte 15']);
  this.executeCharTest('⒃', ['eingeklammerte 16', 'eingeklammerte 16', 'eingeklammerte 16']);
  this.executeCharTest('⒄', ['eingeklammerte 17', 'eingeklammerte 17', 'eingeklammerte 17']);
  this.executeCharTest('⒅', ['eingeklammerte 18', 'eingeklammerte 18', 'eingeklammerte 18']);
  this.executeCharTest('⒆', ['eingeklammerte 19', 'eingeklammerte 19', 'eingeklammerte 19']);
  this.executeCharTest('⒇', ['eingeklammerte 20', 'eingeklammerte 20', 'eingeklammerte 20']);
  this.executeCharTest('🄀', ['0 Punkt', '0 Punkt', '0 Punkt']);
  this.executeCharTest('⒈', ['1 Punkt', '1 Punkt', '1 Punkt']);
  this.executeCharTest('⒉', ['2 Punkt', '2 Punkt', '2 Punkt']);
  this.executeCharTest('⒊', ['3 Punkt', '3 Punkt', '3 Punkt']);
  this.executeCharTest('⒋', ['4 Punkt', '4 Punkt', '4 Punkt']);
  this.executeCharTest('⒌', ['5 Punkt', '5 Punkt', '5 Punkt']);
  this.executeCharTest('⒍', ['6 Punkt', '6 Punkt', '6 Punkt']);
  this.executeCharTest('⒎', ['7 Punkt', '7 Punkt', '7 Punkt']);
  this.executeCharTest('⒏', ['8 Punkt', '8 Punkt', '8 Punkt']);
  this.executeCharTest('⒐', ['9 Punkt', '9 Punkt', '9 Punkt']);
  this.executeCharTest('⒑', ['10 Punkt', '10 Punkt', '10 Punkt']);
  this.executeCharTest('⒒', ['11 Punkt', '11 Punkt', '11 Punkt']);
  this.executeCharTest('⒓', ['12 Punkt', '12 Punkt', '12 Punkt']);
  this.executeCharTest('⒔', ['13 Punkt', '13 Punkt', '13 Punkt']);
  this.executeCharTest('⒕', ['14 Punkt', '14 Punkt', '14 Punkt']);
  this.executeCharTest('⒖', ['15 Punkt', '15 Punkt', '15 Punkt']);
  this.executeCharTest('⒗', ['16 Punkt', '16 Punkt', '16 Punkt']);
  this.executeCharTest('⒘', ['17 Punkt', '17 Punkt', '17 Punkt']);
  this.executeCharTest('⒙', ['18 Punkt', '18 Punkt', '18 Punkt']);
  this.executeCharTest('⒚', ['19 Punkt', '19 Punkt', '19 Punkt']);
  this.executeCharTest('⒛', ['20 Punkt', '20 Punkt', '20 Punkt']);
  this.executeCharTest('⓿', ['schwarz eingekreiste 0', 'schwarz eingekreiste 0', 'schwarz eingekreiste 0']);
  this.executeCharTest('❶', ['schwarz eingekreiste 1', 'schwarz eingekreiste 1', 'schwarz eingekreiste 1']);
  this.executeCharTest('❷', ['schwarz eingekreiste 2', 'schwarz eingekreiste 2', 'schwarz eingekreiste 2']);
  this.executeCharTest('❸', ['schwarz eingekreiste 3', 'schwarz eingekreiste 3', 'schwarz eingekreiste 3']);
  this.executeCharTest('❹', ['schwarz eingekreiste 4', 'schwarz eingekreiste 4', 'schwarz eingekreiste 4']);
  this.executeCharTest('❺', ['schwarz eingekreiste 5', 'schwarz eingekreiste 5', 'schwarz eingekreiste 5']);
  this.executeCharTest('❻', ['schwarz eingekreiste 6', 'schwarz eingekreiste 6', 'schwarz eingekreiste 6']);
  this.executeCharTest('❼', ['schwarz eingekreiste 7', 'schwarz eingekreiste 7', 'schwarz eingekreiste 7']);
  this.executeCharTest('❽', ['schwarz eingekreiste 8', 'schwarz eingekreiste 8', 'schwarz eingekreiste 8']);
  this.executeCharTest('❾', ['schwarz eingekreiste 9', 'schwarz eingekreiste 9', 'schwarz eingekreiste 9']);
  this.executeCharTest('❿', ['schwarz eingekreiste 10', 'schwarz eingekreiste 10', 'schwarz eingekreiste 10']);
  this.executeCharTest('⓫', ['schwarz eingekreiste 11', 'schwarz eingekreiste 11', 'schwarz eingekreiste 11']);
  this.executeCharTest('⓬', ['schwarz eingekreiste 12', 'schwarz eingekreiste 12', 'schwarz eingekreiste 12']);
  this.executeCharTest('⓭', ['schwarz eingekreiste 13', 'schwarz eingekreiste 13', 'schwarz eingekreiste 13']);
  this.executeCharTest('⓮', ['schwarz eingekreiste 14', 'schwarz eingekreiste 14', 'schwarz eingekreiste 14']);
  this.executeCharTest('⓯', ['schwarz eingekreiste 15', 'schwarz eingekreiste 15', 'schwarz eingekreiste 15']);
  this.executeCharTest('⓰', ['schwarz eingekreiste 16', 'schwarz eingekreiste 16', 'schwarz eingekreiste 16']);
  this.executeCharTest('⓱', ['schwarz eingekreiste 17', 'schwarz eingekreiste 17', 'schwarz eingekreiste 17']);
  this.executeCharTest('⓲', ['schwarz eingekreiste 18', 'schwarz eingekreiste 18', 'schwarz eingekreiste 18']);
  this.executeCharTest('⓳', ['schwarz eingekreiste 19', 'schwarz eingekreiste 19', 'schwarz eingekreiste 19']);
  this.executeCharTest('⓴', ['schwarz eingekreiste 20', 'schwarz eingekreiste 20', 'schwarz eingekreiste 20']);
  this.executeCharTest('⓵', ['doppelt eingekreiste 1', 'doppelt eingekreiste 1', 'doppelt eingekreiste 1']);
  this.executeCharTest('⓶', ['doppelt eingekreiste 2', 'doppelt eingekreiste 2', 'doppelt eingekreiste 2']);
  this.executeCharTest('⓷', ['doppelt eingekreiste 3', 'doppelt eingekreiste 3', 'doppelt eingekreiste 3']);
  this.executeCharTest('⓸', ['doppelt eingekreiste 4', 'doppelt eingekreiste 4', 'doppelt eingekreiste 4']);
  this.executeCharTest('⓹', ['doppelt eingekreiste 5', 'doppelt eingekreiste 5', 'doppelt eingekreiste 5']);
  this.executeCharTest('⓺', ['doppelt eingekreiste 6', 'doppelt eingekreiste 6', 'doppelt eingekreiste 6']);
  this.executeCharTest('⓻', ['doppelt eingekreiste 7', 'doppelt eingekreiste 7', 'doppelt eingekreiste 7']);
  this.executeCharTest('⓼', ['doppelt eingekreiste 8', 'doppelt eingekreiste 8', 'doppelt eingekreiste 8']);
  this.executeCharTest('⓽', ['doppelt eingekreiste 9', 'doppelt eingekreiste 9', 'doppelt eingekreiste 9']);
  this.executeCharTest('⓾', ['doppelt eingekreiste 10', 'doppelt eingekreiste 10', 'doppelt eingekreiste 10']);
  this.executeCharTest('🄋', ['eingekreiste serifenlose 0', 'eingekreiste serifenlose 0', 'eingekreiste serifenlose 0']);
  this.executeCharTest('➀', ['eingekreiste serifenlose 1', 'eingekreiste serifenlose 1', 'eingekreiste serifenlose 1']);
  this.executeCharTest('➁', ['eingekreiste serifenlose 2', 'eingekreiste serifenlose 2', 'eingekreiste serifenlose 2']);
  this.executeCharTest('➂', ['eingekreiste serifenlose 3', 'eingekreiste serifenlose 3', 'eingekreiste serifenlose 3']);
  this.executeCharTest('➃', ['eingekreiste serifenlose 4', 'eingekreiste serifenlose 4', 'eingekreiste serifenlose 4']);
  this.executeCharTest('➄', ['eingekreiste serifenlose 5', 'eingekreiste serifenlose 5', 'eingekreiste serifenlose 5']);
  this.executeCharTest('➅', ['eingekreiste serifenlose 6', 'eingekreiste serifenlose 6', 'eingekreiste serifenlose 6']);
  this.executeCharTest('➆', ['eingekreiste serifenlose 7', 'eingekreiste serifenlose 7', 'eingekreiste serifenlose 7']);
  this.executeCharTest('➇', ['eingekreiste serifenlose 8', 'eingekreiste serifenlose 8', 'eingekreiste serifenlose 8']);
  this.executeCharTest('➈', ['eingekreiste serifenlose 9', 'eingekreiste serifenlose 9', 'eingekreiste serifenlose 9']);
  this.executeCharTest('➉', ['eingekreiste serifenlose 10', 'eingekreiste serifenlose 10', 'eingekreiste serifenlose 10']);
  this.executeCharTest('🄌', ['schwarz eingekreiste serifenlose 0', 'schwarz eingekreiste serifenlose 0', 'schwarz eingekreiste serifenlose 0']);
  this.executeCharTest('➊', ['schwarz eingekreiste serifenlose 1', 'schwarz eingekreiste serifenlose 1', 'schwarz eingekreiste serifenlose 1']);
  this.executeCharTest('➋', ['schwarz eingekreiste serifenlose 2', 'schwarz eingekreiste serifenlose 2', 'schwarz eingekreiste serifenlose 2']);
  this.executeCharTest('➌', ['schwarz eingekreiste serifenlose 3', 'schwarz eingekreiste serifenlose 3', 'schwarz eingekreiste serifenlose 3']);
  this.executeCharTest('➍', ['schwarz eingekreiste serifenlose 4', 'schwarz eingekreiste serifenlose 4', 'schwarz eingekreiste serifenlose 4']);
  this.executeCharTest('➎', ['schwarz eingekreiste serifenlose 5', 'schwarz eingekreiste serifenlose 5', 'schwarz eingekreiste serifenlose 5']);
  this.executeCharTest('➏', ['schwarz eingekreiste serifenlose 6', 'schwarz eingekreiste serifenlose 6', 'schwarz eingekreiste serifenlose 6']);
  this.executeCharTest('➐', ['schwarz eingekreiste serifenlose 7', 'schwarz eingekreiste serifenlose 7', 'schwarz eingekreiste serifenlose 7']);
  this.executeCharTest('➑', ['schwarz eingekreiste serifenlose 8', 'schwarz eingekreiste serifenlose 8', 'schwarz eingekreiste serifenlose 8']);
  this.executeCharTest('➒', ['schwarz eingekreiste serifenlose 9', 'schwarz eingekreiste serifenlose 9', 'schwarz eingekreiste serifenlose 9']);
  this.executeCharTest('➓', ['schwarz eingekreiste serifenlose 10', 'schwarz eingekreiste serifenlose 10', 'schwarz eingekreiste serifenlose 10']);
  this.executeCharTest('０', ['0', '0', '0']);
  this.executeCharTest('１', ['1', '1', '1']);
  this.executeCharTest('２', ['2', '2', '2']);
  this.executeCharTest('３', ['3', '3', '3']);
  this.executeCharTest('４', ['4', '4', '4']);
  this.executeCharTest('５', ['5', '5', '5']);
  this.executeCharTest('６', ['6', '6', '6']);
  this.executeCharTest('７', ['7', '7', '7']);
  this.executeCharTest('８', ['8', '8', '8']);
  this.executeCharTest('９', ['9', '9', '9']);
  this.executeCharTest('𝟎', ['fette 0', 'fette 0', 'fette 0']);
  this.executeCharTest('𝟏', ['fette 1', 'fette 1', 'fette 1']);
  this.executeCharTest('𝟐', ['fette 2', 'fette 2', 'fette 2']);
  this.executeCharTest('𝟑', ['fette 3', 'fette 3', 'fette 3']);
  this.executeCharTest('𝟒', ['fette 4', 'fette 4', 'fette 4']);
  this.executeCharTest('𝟓', ['fette 5', 'fette 5', 'fette 5']);
  this.executeCharTest('𝟔', ['fette 6', 'fette 6', 'fette 6']);
  this.executeCharTest('𝟕', ['fette 7', 'fette 7', 'fette 7']);
  this.executeCharTest('𝟖', ['fette 8', 'fette 8', 'fette 8']);
  this.executeCharTest('𝟗', ['fette 9', 'fette 9', 'fette 9']);
  this.executeCharTest('𝟘', ['0 mit Doppelstrich', '0 mit Doppelstrich', '0 mit Doppelstrich']);
  this.executeCharTest('𝟙', ['1 mit Doppelstrich', '1 mit Doppelstrich', '1 mit Doppelstrich']);
  this.executeCharTest('𝟚', ['2 mit Doppelstrich', '2 mit Doppelstrich', '2 mit Doppelstrich']);
  this.executeCharTest('𝟛', ['3 mit Doppelstrich', '3 mit Doppelstrich', '3 mit Doppelstrich']);
  this.executeCharTest('𝟜', ['4 mit Doppelstrich', '4 mit Doppelstrich', '4 mit Doppelstrich']);
  this.executeCharTest('𝟝', ['5 mit Doppelstrich', '5 mit Doppelstrich', '5 mit Doppelstrich']);
  this.executeCharTest('𝟞', ['6 mit Doppelstrich', '6 mit Doppelstrich', '6 mit Doppelstrich']);
  this.executeCharTest('𝟟', ['7 mit Doppelstrich', '7 mit Doppelstrich', '7 mit Doppelstrich']);
  this.executeCharTest('𝟠', ['8 mit Doppelstrich', '8 mit Doppelstrich', '8 mit Doppelstrich']);
  this.executeCharTest('𝟡', ['9 mit Doppelstrich', '9 mit Doppelstrich', '9 mit Doppelstrich']);
  this.executeCharTest('𝟢', ['serifenlose 0', 'serifenlose 0', 'serifenlose 0']);
  this.executeCharTest('𝟣', ['serifenlose 1', 'serifenlose 1', 'serifenlose 1']);
  this.executeCharTest('𝟤', ['serifenlose 2', 'serifenlose 2', 'serifenlose 2']);
  this.executeCharTest('𝟥', ['serifenlose 3', 'serifenlose 3', 'serifenlose 3']);
  this.executeCharTest('𝟦', ['serifenlose 4', 'serifenlose 4', 'serifenlose 4']);
  this.executeCharTest('𝟧', ['serifenlose 5', 'serifenlose 5', 'serifenlose 5']);
  this.executeCharTest('𝟨', ['serifenlose 6', 'serifenlose 6', 'serifenlose 6']);
  this.executeCharTest('𝟩', ['serifenlose 7', 'serifenlose 7', 'serifenlose 7']);
  this.executeCharTest('𝟪', ['serifenlose 8', 'serifenlose 8', 'serifenlose 8']);
  this.executeCharTest('𝟫', ['serifenlose 9', 'serifenlose 9', 'serifenlose 9']);
  this.executeCharTest('𝟬', ['serifenlose fette 0', 'serifenlose fette 0', 'serifenlose fette 0']);
  this.executeCharTest('𝟭', ['serifenlose fette 1', 'serifenlose fette 1', 'serifenlose fette 1']);
  this.executeCharTest('𝟮', ['serifenlose fette 2', 'serifenlose fette 2', 'serifenlose fette 2']);
  this.executeCharTest('𝟯', ['serifenlose fette 3', 'serifenlose fette 3', 'serifenlose fette 3']);
  this.executeCharTest('𝟰', ['serifenlose fette 4', 'serifenlose fette 4', 'serifenlose fette 4']);
  this.executeCharTest('𝟱', ['serifenlose fette 5', 'serifenlose fette 5', 'serifenlose fette 5']);
  this.executeCharTest('𝟲', ['serifenlose fette 6', 'serifenlose fette 6', 'serifenlose fette 6']);
  this.executeCharTest('𝟳', ['serifenlose fette 7', 'serifenlose fette 7', 'serifenlose fette 7']);
  this.executeCharTest('𝟴', ['serifenlose fette 8', 'serifenlose fette 8', 'serifenlose fette 8']);
  this.executeCharTest('𝟵', ['serifenlose fette 9', 'serifenlose fette 9', 'serifenlose fette 9']);
  this.executeCharTest('𝟶', ['nichtproportionale 0', 'nichtproportionale 0', 'nichtproportionale 0']);
  this.executeCharTest('𝟷', ['nichtproportionale 1', 'nichtproportionale 1', 'nichtproportionale 1']);
  this.executeCharTest('𝟸', ['nichtproportionale 2', 'nichtproportionale 2', 'nichtproportionale 2']);
  this.executeCharTest('𝟹', ['nichtproportionale 3', 'nichtproportionale 3', 'nichtproportionale 3']);
  this.executeCharTest('𝟺', ['nichtproportionale 4', 'nichtproportionale 4', 'nichtproportionale 4']);
  this.executeCharTest('𝟻', ['nichtproportionale 5', 'nichtproportionale 5', 'nichtproportionale 5']);
  this.executeCharTest('𝟼', ['nichtproportionale 6', 'nichtproportionale 6', 'nichtproportionale 6']);
  this.executeCharTest('𝟽', ['nichtproportionale 7', 'nichtproportionale 7', 'nichtproportionale 7']);
  this.executeCharTest('𝟾', ['nichtproportionale 8', 'nichtproportionale 8', 'nichtproportionale 8']);
  this.executeCharTest('𝟿', ['nichtproportionale 9', 'nichtproportionale 9', 'nichtproportionale 9']);
  this.executeCharTest('🄁', ['0 Komma', '0 Komma', '0 Komma']);
  this.executeCharTest('🄂', ['1 Komma', '1 Komma', '1 Komma']);
  this.executeCharTest('🄃', ['2 Komma', '2 Komma', '2 Komma']);
  this.executeCharTest('🄄', ['3 Komma', '3 Komma', '3 Komma']);
  this.executeCharTest('🄅', ['4 Komma', '4 Komma', '4 Komma']);
  this.executeCharTest('🄆', ['5 Komma', '5 Komma', '5 Komma']);
  this.executeCharTest('🄇', ['6 Komma', '6 Komma', '6 Komma']);
  this.executeCharTest('🄈', ['7 Komma', '7 Komma', '7 Komma']);
  this.executeCharTest('🄉', ['8 Komma', '8 Komma', '8 Komma']);
  this.executeCharTest('🄊', ['9 Komma', '9 Komma', '9 Komma']);
  this.executeCharTest('Ⓐ', ['eingekreistes großes A', 'eingekreistes großes A', 'eingekreistes großes A']);
  this.executeCharTest('Ⓑ', ['eingekreistes großes B', 'eingekreistes großes B', 'eingekreistes großes B']);
  this.executeCharTest('Ⓒ', ['eingekreistes großes C', 'eingekreistes großes C', 'eingekreistes großes C']);
  this.executeCharTest('Ⓓ', ['eingekreistes großes D', 'eingekreistes großes D', 'eingekreistes großes D']);
  this.executeCharTest('Ⓔ', ['eingekreistes großes E', 'eingekreistes großes E', 'eingekreistes großes E']);
  this.executeCharTest('Ⓕ', ['eingekreistes großes F', 'eingekreistes großes F', 'eingekreistes großes F']);
  this.executeCharTest('Ⓖ', ['eingekreistes großes G', 'eingekreistes großes G', 'eingekreistes großes G']);
  this.executeCharTest('Ⓗ', ['eingekreistes großes H', 'eingekreistes großes H', 'eingekreistes großes H']);
  this.executeCharTest('Ⓘ', ['eingekreistes großes I', 'eingekreistes großes I', 'eingekreistes großes I']);
  this.executeCharTest('Ⓙ', ['eingekreistes großes J', 'eingekreistes großes J', 'eingekreistes großes J']);
  this.executeCharTest('Ⓚ', ['eingekreistes großes K', 'eingekreistes großes K', 'eingekreistes großes K']);
  this.executeCharTest('Ⓛ', ['eingekreistes großes L', 'eingekreistes großes L', 'eingekreistes großes L']);
  this.executeCharTest('Ⓜ', ['eingekreistes großes M', 'eingekreistes großes M', 'eingekreistes großes M']);
  this.executeCharTest('Ⓝ', ['eingekreistes großes N', 'eingekreistes großes N', 'eingekreistes großes N']);
  this.executeCharTest('Ⓞ', ['eingekreistes großes O', 'eingekreistes großes O', 'eingekreistes großes O']);
  this.executeCharTest('Ⓟ', ['eingekreistes großes P', 'eingekreistes großes P', 'eingekreistes großes P']);
  this.executeCharTest('Ⓠ', ['eingekreistes großes Q', 'eingekreistes großes Q', 'eingekreistes großes Q']);
  this.executeCharTest('Ⓡ', ['eingekreistes großes R', 'eingekreistes großes R', 'eingekreistes großes R']);
  this.executeCharTest('Ⓢ', ['eingekreistes großes S', 'eingekreistes großes S', 'eingekreistes großes S']);
  this.executeCharTest('Ⓣ', ['eingekreistes großes T', 'eingekreistes großes T', 'eingekreistes großes T']);
  this.executeCharTest('Ⓤ', ['eingekreistes großes U', 'eingekreistes großes U', 'eingekreistes großes U']);
  this.executeCharTest('Ⓥ', ['eingekreistes großes V', 'eingekreistes großes V', 'eingekreistes großes V']);
  this.executeCharTest('Ⓦ', ['eingekreistes großes W', 'eingekreistes großes W', 'eingekreistes großes W']);
  this.executeCharTest('Ⓧ', ['eingekreistes großes X', 'eingekreistes großes X', 'eingekreistes großes X']);
  this.executeCharTest('Ⓨ', ['eingekreistes großes Y', 'eingekreistes großes Y', 'eingekreistes großes Y']);
  this.executeCharTest('Ⓩ', ['eingekreistes großes Z', 'eingekreistes großes Z', 'eingekreistes großes Z']);
  this.executeCharTest('ⓐ', ['eingekreistes a', 'eingekreistes a', 'eingekreistes a']);
  this.executeCharTest('ⓑ', ['eingekreistes b', 'eingekreistes b', 'eingekreistes b']);
  this.executeCharTest('ⓒ', ['eingekreistes c', 'eingekreistes c', 'eingekreistes c']);
  this.executeCharTest('ⓓ', ['eingekreistes d', 'eingekreistes d', 'eingekreistes d']);
  this.executeCharTest('ⓔ', ['eingekreistes e', 'eingekreistes e', 'eingekreistes e']);
  this.executeCharTest('ⓕ', ['eingekreistes f', 'eingekreistes f', 'eingekreistes f']);
  this.executeCharTest('ⓖ', ['eingekreistes g', 'eingekreistes g', 'eingekreistes g']);
  this.executeCharTest('ⓗ', ['eingekreistes h', 'eingekreistes h', 'eingekreistes h']);
  this.executeCharTest('ⓘ', ['eingekreistes i', 'eingekreistes i', 'eingekreistes i']);
  this.executeCharTest('ⓙ', ['eingekreistes j', 'eingekreistes j', 'eingekreistes j']);
  this.executeCharTest('ⓚ', ['eingekreistes k', 'eingekreistes k', 'eingekreistes k']);
  this.executeCharTest('ⓛ', ['eingekreistes l', 'eingekreistes l', 'eingekreistes l']);
  this.executeCharTest('ⓜ', ['eingekreistes m', 'eingekreistes m', 'eingekreistes m']);
  this.executeCharTest('ⓝ', ['eingekreistes n', 'eingekreistes n', 'eingekreistes n']);
  this.executeCharTest('ⓞ', ['eingekreistes o', 'eingekreistes o', 'eingekreistes o']);
  this.executeCharTest('ⓟ', ['eingekreistes p', 'eingekreistes p', 'eingekreistes p']);
  this.executeCharTest('ⓠ', ['eingekreistes q', 'eingekreistes q', 'eingekreistes q']);
  this.executeCharTest('ⓡ', ['eingekreistes r', 'eingekreistes r', 'eingekreistes r']);
  this.executeCharTest('ⓢ', ['eingekreistes s', 'eingekreistes s', 'eingekreistes s']);
  this.executeCharTest('ⓣ', ['eingekreistes t', 'eingekreistes t', 'eingekreistes t']);
  this.executeCharTest('ⓤ', ['eingekreistes u', 'eingekreistes u', 'eingekreistes u']);
  this.executeCharTest('ⓥ', ['eingekreistes v', 'eingekreistes v', 'eingekreistes v']);
  this.executeCharTest('ⓦ', ['eingekreistes w', 'eingekreistes w', 'eingekreistes w']);
  this.executeCharTest('ⓧ', ['eingekreistes x', 'eingekreistes x', 'eingekreistes x']);
  this.executeCharTest('ⓨ', ['eingekreistes y', 'eingekreistes y', 'eingekreistes y']);
  this.executeCharTest('ⓩ', ['eingekreistes z', 'eingekreistes z', 'eingekreistes z']);
  this.executeCharTest('🄐', ['eingeklammertes großes A', 'eingeklammertes großes A', 'eingeklammertes großes A']);
  this.executeCharTest('🄑', ['eingeklammertes großes B', 'eingeklammertes großes B', 'eingeklammertes großes B']);
  this.executeCharTest('🄒', ['eingeklammertes großes C', 'eingeklammertes großes C', 'eingeklammertes großes C']);
  this.executeCharTest('🄓', ['eingeklammertes großes D', 'eingeklammertes großes D', 'eingeklammertes großes D']);
  this.executeCharTest('🄔', ['eingeklammertes großes E', 'eingeklammertes großes E', 'eingeklammertes großes E']);
  this.executeCharTest('🄕', ['eingeklammertes großes F', 'eingeklammertes großes F', 'eingeklammertes großes F']);
  this.executeCharTest('🄖', ['eingeklammertes großes G', 'eingeklammertes großes G', 'eingeklammertes großes G']);
  this.executeCharTest('🄗', ['eingeklammertes großes H', 'eingeklammertes großes H', 'eingeklammertes großes H']);
  this.executeCharTest('🄘', ['eingeklammertes großes I', 'eingeklammertes großes I', 'eingeklammertes großes I']);
  this.executeCharTest('🄙', ['eingeklammertes großes J', 'eingeklammertes großes J', 'eingeklammertes großes J']);
  this.executeCharTest('🄚', ['eingeklammertes großes K', 'eingeklammertes großes K', 'eingeklammertes großes K']);
  this.executeCharTest('🄛', ['eingeklammertes großes L', 'eingeklammertes großes L', 'eingeklammertes großes L']);
  this.executeCharTest('🄜', ['eingeklammertes großes M', 'eingeklammertes großes M', 'eingeklammertes großes M']);
  this.executeCharTest('🄝', ['eingeklammertes großes N', 'eingeklammertes großes N', 'eingeklammertes großes N']);
  this.executeCharTest('🄞', ['eingeklammertes großes O', 'eingeklammertes großes O', 'eingeklammertes großes O']);
  this.executeCharTest('🄟', ['eingeklammertes großes P', 'eingeklammertes großes P', 'eingeklammertes großes P']);
  this.executeCharTest('🄠', ['eingeklammertes großes Q', 'eingeklammertes großes Q', 'eingeklammertes großes Q']);
  this.executeCharTest('🄡', ['eingeklammertes großes R', 'eingeklammertes großes R', 'eingeklammertes großes R']);
  this.executeCharTest('🄢', ['eingeklammertes großes S', 'eingeklammertes großes S', 'eingeklammertes großes S']);
  this.executeCharTest('🄣', ['eingeklammertes großes T', 'eingeklammertes großes T', 'eingeklammertes großes T']);
  this.executeCharTest('🄤', ['eingeklammertes großes U', 'eingeklammertes großes U', 'eingeklammertes großes U']);
  this.executeCharTest('🄥', ['eingeklammertes großes V', 'eingeklammertes großes V', 'eingeklammertes großes V']);
  this.executeCharTest('🄦', ['eingeklammertes großes W', 'eingeklammertes großes W', 'eingeklammertes großes W']);
  this.executeCharTest('🄧', ['eingeklammertes großes X', 'eingeklammertes großes X', 'eingeklammertes großes X']);
  this.executeCharTest('🄨', ['eingeklammertes großes Y', 'eingeklammertes großes Y', 'eingeklammertes großes Y']);
  this.executeCharTest('🄩', ['eingeklammertes großes Z', 'eingeklammertes großes Z', 'eingeklammertes großes Z']);
  this.executeCharTest('⒜', ['eingeklammertes a', 'eingeklammertes a', 'eingeklammertes a']);
  this.executeCharTest('⒝', ['eingeklammertes b', 'eingeklammertes b', 'eingeklammertes b']);
  this.executeCharTest('⒞', ['eingeklammertes c', 'eingeklammertes c', 'eingeklammertes c']);
  this.executeCharTest('⒟', ['eingeklammertes d', 'eingeklammertes d', 'eingeklammertes d']);
  this.executeCharTest('⒠', ['eingeklammertes e', 'eingeklammertes e', 'eingeklammertes e']);
  this.executeCharTest('⒡', ['eingeklammertes f', 'eingeklammertes f', 'eingeklammertes f']);
  this.executeCharTest('⒢', ['eingeklammertes g', 'eingeklammertes g', 'eingeklammertes g']);
  this.executeCharTest('⒣', ['eingeklammertes h', 'eingeklammertes h', 'eingeklammertes h']);
  this.executeCharTest('⒤', ['eingeklammertes i', 'eingeklammertes i', 'eingeklammertes i']);
  this.executeCharTest('⒥', ['eingeklammertes j', 'eingeklammertes j', 'eingeklammertes j']);
  this.executeCharTest('⒦', ['eingeklammertes k', 'eingeklammertes k', 'eingeklammertes k']);
  this.executeCharTest('⒧', ['eingeklammertes l', 'eingeklammertes l', 'eingeklammertes l']);
  this.executeCharTest('⒨', ['eingeklammertes m', 'eingeklammertes m', 'eingeklammertes m']);
  this.executeCharTest('⒩', ['eingeklammertes n', 'eingeklammertes n', 'eingeklammertes n']);
  this.executeCharTest('⒪', ['eingeklammertes o', 'eingeklammertes o', 'eingeklammertes o']);
  this.executeCharTest('⒫', ['eingeklammertes p', 'eingeklammertes p', 'eingeklammertes p']);
  this.executeCharTest('⒬', ['eingeklammertes q', 'eingeklammertes q', 'eingeklammertes q']);
  this.executeCharTest('⒭', ['eingeklammertes r', 'eingeklammertes r', 'eingeklammertes r']);
  this.executeCharTest('⒮', ['eingeklammertes s', 'eingeklammertes s', 'eingeklammertes s']);
  this.executeCharTest('⒯', ['eingeklammertes t', 'eingeklammertes t', 'eingeklammertes t']);
  this.executeCharTest('⒰', ['eingeklammertes u', 'eingeklammertes u', 'eingeklammertes u']);
  this.executeCharTest('⒱', ['eingeklammertes v', 'eingeklammertes v', 'eingeklammertes v']);
  this.executeCharTest('⒲', ['eingeklammertes w', 'eingeklammertes w', 'eingeklammertes w']);
  this.executeCharTest('⒳', ['eingeklammertes x', 'eingeklammertes x', 'eingeklammertes x']);
  this.executeCharTest('⒴', ['eingeklammertes y', 'eingeklammertes y', 'eingeklammertes y']);
  this.executeCharTest('⒵', ['eingeklammertes z', 'eingeklammertes z', 'eingeklammertes z']);
  this.executeCharTest('🄰', ['umrahmtes großes A', 'umrahmtes großes A', 'umrahmtes großes A']);
  this.executeCharTest('🄱', ['umrahmtes großes B', 'umrahmtes großes B', 'umrahmtes großes B']);
  this.executeCharTest('🄲', ['umrahmtes großes C', 'umrahmtes großes C', 'umrahmtes großes C']);
  this.executeCharTest('🄳', ['umrahmtes großes D', 'umrahmtes großes D', 'umrahmtes großes D']);
  this.executeCharTest('🄴', ['umrahmtes großes E', 'umrahmtes großes E', 'umrahmtes großes E']);
  this.executeCharTest('🄵', ['umrahmtes großes F', 'umrahmtes großes F', 'umrahmtes großes F']);
  this.executeCharTest('🄶', ['umrahmtes großes G', 'umrahmtes großes G', 'umrahmtes großes G']);
  this.executeCharTest('🄷', ['umrahmtes großes H', 'umrahmtes großes H', 'umrahmtes großes H']);
  this.executeCharTest('🄸', ['umrahmtes großes I', 'umrahmtes großes I', 'umrahmtes großes I']);
  this.executeCharTest('🄹', ['umrahmtes großes J', 'umrahmtes großes J', 'umrahmtes großes J']);
  this.executeCharTest('🄺', ['umrahmtes großes K', 'umrahmtes großes K', 'umrahmtes großes K']);
  this.executeCharTest('🄻', ['umrahmtes großes L', 'umrahmtes großes L', 'umrahmtes großes L']);
  this.executeCharTest('🄼', ['umrahmtes großes M', 'umrahmtes großes M', 'umrahmtes großes M']);
  this.executeCharTest('🄽', ['umrahmtes großes N', 'umrahmtes großes N', 'umrahmtes großes N']);
  this.executeCharTest('🄾', ['umrahmtes großes O', 'umrahmtes großes O', 'umrahmtes großes O']);
  this.executeCharTest('🄿', ['umrahmtes großes P', 'umrahmtes großes P', 'umrahmtes großes P']);
  this.executeCharTest('🅀', ['umrahmtes großes Q', 'umrahmtes großes Q', 'umrahmtes großes Q']);
  this.executeCharTest('🅁', ['umrahmtes großes R', 'umrahmtes großes R', 'umrahmtes großes R']);
  this.executeCharTest('🅂', ['umrahmtes großes S', 'umrahmtes großes S', 'umrahmtes großes S']);
  this.executeCharTest('🅃', ['umrahmtes großes T', 'umrahmtes großes T', 'umrahmtes großes T']);
  this.executeCharTest('🅄', ['umrahmtes großes U', 'umrahmtes großes U', 'umrahmtes großes U']);
  this.executeCharTest('🅅', ['umrahmtes großes V', 'umrahmtes großes V', 'umrahmtes großes V']);
  this.executeCharTest('🅆', ['umrahmtes großes W', 'umrahmtes großes W', 'umrahmtes großes W']);
  this.executeCharTest('🅇', ['umrahmtes großes X', 'umrahmtes großes X', 'umrahmtes großes X']);
  this.executeCharTest('🅈', ['umrahmtes großes Y', 'umrahmtes großes Y', 'umrahmtes großes Y']);
  this.executeCharTest('🅉', ['umrahmtes großes Z', 'umrahmtes großes Z', 'umrahmtes großes Z']);
  this.executeCharTest('🅰', ['schwarz umrahmtes großes A', 'schwarz umrahmtes großes A', 'schwarz umrahmtes großes A']);
  this.executeCharTest('🅱', ['schwarz umrahmtes großes B', 'schwarz umrahmtes großes B', 'schwarz umrahmtes großes B']);
  this.executeCharTest('🅲', ['schwarz umrahmtes großes C', 'schwarz umrahmtes großes C', 'schwarz umrahmtes großes C']);
  this.executeCharTest('🅳', ['schwarz umrahmtes großes D', 'schwarz umrahmtes großes D', 'schwarz umrahmtes großes D']);
  this.executeCharTest('🅴', ['schwarz umrahmtes großes E', 'schwarz umrahmtes großes E', 'schwarz umrahmtes großes E']);
  this.executeCharTest('🅵', ['schwarz umrahmtes großes F', 'schwarz umrahmtes großes F', 'schwarz umrahmtes großes F']);
  this.executeCharTest('🅶', ['schwarz umrahmtes großes G', 'schwarz umrahmtes großes G', 'schwarz umrahmtes großes G']);
  this.executeCharTest('🅷', ['schwarz umrahmtes großes H', 'schwarz umrahmtes großes H', 'schwarz umrahmtes großes H']);
  this.executeCharTest('🅸', ['schwarz umrahmtes großes I', 'schwarz umrahmtes großes I', 'schwarz umrahmtes großes I']);
  this.executeCharTest('🅹', ['schwarz umrahmtes großes J', 'schwarz umrahmtes großes J', 'schwarz umrahmtes großes J']);
  this.executeCharTest('🅺', ['schwarz umrahmtes großes K', 'schwarz umrahmtes großes K', 'schwarz umrahmtes großes K']);
  this.executeCharTest('🅻', ['schwarz umrahmtes großes L', 'schwarz umrahmtes großes L', 'schwarz umrahmtes großes L']);
  this.executeCharTest('🅼', ['schwarz umrahmtes großes M', 'schwarz umrahmtes großes M', 'schwarz umrahmtes großes M']);
  this.executeCharTest('🅽', ['schwarz umrahmtes großes N', 'schwarz umrahmtes großes N', 'schwarz umrahmtes großes N']);
  this.executeCharTest('🅾', ['schwarz umrahmtes großes O', 'schwarz umrahmtes großes O', 'schwarz umrahmtes großes O']);
  this.executeCharTest('🅿', ['schwarz umrahmtes großes P', 'schwarz umrahmtes großes P', 'schwarz umrahmtes großes P']);
  this.executeCharTest('🆀', ['schwarz umrahmtes großes Q', 'schwarz umrahmtes großes Q', 'schwarz umrahmtes großes Q']);
  this.executeCharTest('🆁', ['schwarz umrahmtes großes R', 'schwarz umrahmtes großes R', 'schwarz umrahmtes großes R']);
  this.executeCharTest('🆂', ['schwarz umrahmtes großes S', 'schwarz umrahmtes großes S', 'schwarz umrahmtes großes S']);
  this.executeCharTest('🆃', ['schwarz umrahmtes großes T', 'schwarz umrahmtes großes T', 'schwarz umrahmtes großes T']);
  this.executeCharTest('🆄', ['schwarz umrahmtes großes U', 'schwarz umrahmtes großes U', 'schwarz umrahmtes großes U']);
  this.executeCharTest('🆅', ['schwarz umrahmtes großes V', 'schwarz umrahmtes großes V', 'schwarz umrahmtes großes V']);
  this.executeCharTest('🆆', ['schwarz umrahmtes großes W', 'schwarz umrahmtes großes W', 'schwarz umrahmtes großes W']);
  this.executeCharTest('🆇', ['schwarz umrahmtes großes X', 'schwarz umrahmtes großes X', 'schwarz umrahmtes großes X']);
  this.executeCharTest('🆈', ['schwarz umrahmtes großes Y', 'schwarz umrahmtes großes Y', 'schwarz umrahmtes großes Y']);
  this.executeCharTest('🆉', ['schwarz umrahmtes großes Z', 'schwarz umrahmtes großes Z', 'schwarz umrahmtes großes Z']);
  this.executeCharTest('🅐', ['schwarz eingekreistes großes A', 'schwarz eingekreistes großes A', 'schwarz eingekreistes großes A']);
  this.executeCharTest('🅑', ['schwarz eingekreistes großes B', 'schwarz eingekreistes großes B', 'schwarz eingekreistes großes B']);
  this.executeCharTest('🅒', ['schwarz eingekreistes großes C', 'schwarz eingekreistes großes C', 'schwarz eingekreistes großes C']);
  this.executeCharTest('🅓', ['schwarz eingekreistes großes D', 'schwarz eingekreistes großes D', 'schwarz eingekreistes großes D']);
  this.executeCharTest('🅔', ['schwarz eingekreistes großes E', 'schwarz eingekreistes großes E', 'schwarz eingekreistes großes E']);
  this.executeCharTest('🅕', ['schwarz eingekreistes großes F', 'schwarz eingekreistes großes F', 'schwarz eingekreistes großes F']);
  this.executeCharTest('🅖', ['schwarz eingekreistes großes G', 'schwarz eingekreistes großes G', 'schwarz eingekreistes großes G']);
  this.executeCharTest('🅗', ['schwarz eingekreistes großes H', 'schwarz eingekreistes großes H', 'schwarz eingekreistes großes H']);
  this.executeCharTest('🅘', ['schwarz eingekreistes großes I', 'schwarz eingekreistes großes I', 'schwarz eingekreistes großes I']);
  this.executeCharTest('🅙', ['schwarz eingekreistes großes J', 'schwarz eingekreistes großes J', 'schwarz eingekreistes großes J']);
  this.executeCharTest('🅚', ['schwarz eingekreistes großes K', 'schwarz eingekreistes großes K', 'schwarz eingekreistes großes K']);
  this.executeCharTest('🅛', ['schwarz eingekreistes großes L', 'schwarz eingekreistes großes L', 'schwarz eingekreistes großes L']);
  this.executeCharTest('🅜', ['schwarz eingekreistes großes M', 'schwarz eingekreistes großes M', 'schwarz eingekreistes großes M']);
  this.executeCharTest('🅝', ['schwarz eingekreistes großes N', 'schwarz eingekreistes großes N', 'schwarz eingekreistes großes N']);
  this.executeCharTest('🅞', ['schwarz eingekreistes großes O', 'schwarz eingekreistes großes O', 'schwarz eingekreistes großes O']);
  this.executeCharTest('🅟', ['schwarz eingekreistes großes P', 'schwarz eingekreistes großes P', 'schwarz eingekreistes großes P']);
  this.executeCharTest('🅠', ['schwarz eingekreistes großes Q', 'schwarz eingekreistes großes Q', 'schwarz eingekreistes großes Q']);
  this.executeCharTest('🅡', ['schwarz eingekreistes großes R', 'schwarz eingekreistes großes R', 'schwarz eingekreistes großes R']);
  this.executeCharTest('🅢', ['schwarz eingekreistes großes S', 'schwarz eingekreistes großes S', 'schwarz eingekreistes großes S']);
  this.executeCharTest('🅣', ['schwarz eingekreistes großes T', 'schwarz eingekreistes großes T', 'schwarz eingekreistes großes T']);
  this.executeCharTest('🅤', ['schwarz eingekreistes großes U', 'schwarz eingekreistes großes U', 'schwarz eingekreistes großes U']);
  this.executeCharTest('🅥', ['schwarz eingekreistes großes V', 'schwarz eingekreistes großes V', 'schwarz eingekreistes großes V']);
  this.executeCharTest('🅦', ['schwarz eingekreistes großes W', 'schwarz eingekreistes großes W', 'schwarz eingekreistes großes W']);
  this.executeCharTest('🅧', ['schwarz eingekreistes großes X', 'schwarz eingekreistes großes X', 'schwarz eingekreistes großes X']);
  this.executeCharTest('🅨', ['schwarz eingekreistes großes Y', 'schwarz eingekreistes großes Y', 'schwarz eingekreistes großes Y']);
  this.executeCharTest('🅩', ['schwarz eingekreistes großes Z', 'schwarz eingekreistes großes Z', 'schwarz eingekreistes großes Z']);
  this.executeCharTest('¼', ['ein Viertel', 'ein Viertel', 'ein Viertel']);
  this.executeCharTest('½', ['ein Halb', 'ein Halb', 'ein Halb']);
  this.executeCharTest('¾', ['drei Viertel', 'drei Viertel', 'drei Viertel']);
  this.executeCharTest('⅐', ['ein siebtel', 'ein siebtel', 'ein siebtel']);
  this.executeCharTest('⅑', ['ein neuntel', 'ein neuntel', 'ein neuntel']);
  this.executeCharTest('⅒', ['ein zehntel', 'ein zehntel', 'ein zehntel']);
  this.executeCharTest('⅓', ['ein drittel', 'ein drittel', 'ein drittel']);
  this.executeCharTest('⅔', ['zwei drittel', 'zwei drittel', 'zwei drittel']);
  this.executeCharTest('⅕', ['ein fünftel', 'ein fünftel', 'ein fünftel']);
  this.executeCharTest('⅖', ['zwei fünftel', 'zwei fünftel', 'zwei fünftel']);
  this.executeCharTest('⅗', ['drei fünftel', 'drei fünftel', 'drei fünftel']);
  this.executeCharTest('⅘', ['vier fünftel', 'vier fünftel', 'vier fünftel']);
  this.executeCharTest('⅙', ['ein sechstel', 'ein sechstel', 'ein sechstel']);
  this.executeCharTest('⅚', ['fünf sechstel', 'fünf sechstel', 'fünf sechstel']);
  this.executeCharTest('⅛', ['ein achtel', 'ein achtel', 'ein achtel']);
  this.executeCharTest('⅜', ['drei achtel', 'drei achtel', 'drei achtel']);
  this.executeCharTest('⅝', ['fünf achtel', 'fünf achtel', 'fünf achtel']);
  this.executeCharTest('⅞', ['sieben achtel', 'sieben achtel', 'sieben achtel']);
  this.executeCharTest('⅟', ['Bruchzähler eins', 'Bruchzähler eins', 'Bruchzähler eins']);
  this.executeCharTest('↉', ['null drittel', 'null drittel', 'null drittel']);
  this.executeCharTest('㉈', ['eingekreiste Zehn auf schwarzem Quadrat', 'eingekreiste Zehn auf schwarzem Quadrat', 'eingekreiste Zehn auf schwarzem Quadrat']);
  this.executeCharTest('㉉', ['eingekreiste Zwanzig auf schwarzem Quadrat', 'eingekreiste Zwanzig auf schwarzem Quadrat', 'eingekreiste Zwanzig auf schwarzem Quadrat']);
  this.executeCharTest('㉊', ['eingekreiste Dreißig auf schwarzem Quadrat', 'eingekreiste Dreißig auf schwarzem Quadrat', 'eingekreiste Dreißig auf schwarzem Quadrat']);
  this.executeCharTest('㉋', ['eingekreiste Vierzig auf schwarzem Quadrat', 'eingekreiste Vierzig auf schwarzem Quadrat', 'eingekreiste Vierzig auf schwarzem Quadrat']);
  this.executeCharTest('㉌', ['eingekreiste Fünfzig auf schwarzem Quadrat', 'eingekreiste Fünfzig auf schwarzem Quadrat', 'eingekreiste Fünfzig auf schwarzem Quadrat']);
  this.executeCharTest('㉍', ['eingekreiste Sechzig auf schwarzem Quadrat', 'eingekreiste Sechzig auf schwarzem Quadrat', 'eingekreiste Sechzig auf schwarzem Quadrat']);
  this.executeCharTest('㉎', ['eingekreiste Siebzig auf schwarzem Quadrat', 'eingekreiste Siebzig auf schwarzem Quadrat', 'eingekreiste Siebzig auf schwarzem Quadrat']);
  this.executeCharTest('㉏', ['eingekreiste Achtzig auf schwarzem Quadrat', 'eingekreiste Achtzig auf schwarzem Quadrat', 'eingekreiste Achtzig auf schwarzem Quadrat']);
  this.executeCharTest('ᴦ', ['Kapitälchen Gamma', 'Kapitälchen Gamma', 'Kapitälchen Gamma']);
  this.executeCharTest('ᴧ', ['Kapitälchen Lamda', 'Kapitälchen Lamda', 'Kapitälchen Lamda']);
  this.executeCharTest('ᴨ', ['Kapitälchen Pi', 'Kapitälchen Pi', 'Kapitälchen Pi']);
  this.executeCharTest('ᴩ', ['Kapitälchen Rho', 'Kapitälchen Rho', 'Kapitälchen Rho']);
  this.executeCharTest('ᴪ', ['Kapitälchen Psi', 'Kapitälchen Psi', 'Kapitälchen Psi']);
  this.executeCharTest('ᵞ', ['hochgestelltes gamma', 'hochgestelltes gamma', 'hochgestelltes gamma']);
  this.executeCharTest('ᵠ', ['hochgestelltes phi', 'hochgestelltes phi', 'hochgestelltes phi']);
  this.executeCharTest('ᵦ', ['tiefgestelltes beta', 'tiefgestelltes beta', 'tiefgestelltes beta']);
  this.executeCharTest('ᵧ', ['tiefgestelltes gamma', 'tiefgestelltes gamma', 'tiefgestelltes gamma']);
  this.executeCharTest('ᵨ', ['tiefgestelltes rho', 'tiefgestelltes rho', 'tiefgestelltes rho']);
  this.executeCharTest('ᵩ', ['tiefgestelltes phi', 'tiefgestelltes phi', 'tiefgestelltes phi']);
  this.executeCharTest('ᵪ', ['tiefgestelltes chi', 'tiefgestelltes chi', 'tiefgestelltes chi']);
  this.executeCharTest('ϐ', ['beta', 'beta', 'beta']);
  this.executeCharTest('ϗ', ['kai', 'kai', 'kai']);
  this.executeCharTest('϶', ['umgekehrtes epsilon', 'umgekehrtes epsilon', 'umgekehrtes epsilon']);
  this.executeCharTest('𝟊', ['fettes großes Digamma', 'fettes großes Digamma', 'fettes großes Digamma']);
  this.executeCharTest('𝟋', ['fettes digamma', 'fettes digamma', 'fettes digamma']);
  this.executeCharTest('ℵ', ['Alef-Symbol', 'Alef-Symbol', 'Alef-Symbol']);
  this.executeCharTest('ℶ', ['Bet-Symbol', 'Bet-Symbol', 'Bet-Symbol']);
  this.executeCharTest('ℷ', ['Gimel-Symbol', 'Gimel-Symbol', 'Gimel-Symbol']);
  this.executeCharTest('ℸ', ['Dalet-Symbol', 'Dalet-Symbol', 'Dalet-Symbol']);
  this.executeCharTest('ǖ', ['u mit Diärese und Makron', 'u mit Diärese und Makron', 'u mit Diärese und Makron']);
  this.executeCharTest('ǘ', ['u mit Diärese und Akut', 'u mit Diärese und Akut', 'u mit Diärese und Akut']);
  this.executeCharTest('ǚ', ['u mit Diärese und Caron', 'u mit Diärese und Caron', 'u mit Diärese und Caron']);
  this.executeCharTest('ǜ', ['u mit Diärese und Grab', 'u mit Diärese und Grab', 'u mit Diärese und Grab']);
  this.executeCharTest('ǟ', ['a mit Diärese und Makron', 'a mit Diärese und Makron', 'a mit Diärese und Makron']);
  this.executeCharTest('ǡ', ['a mit Dot Above und Makron', 'a mit Dot Above und Makron', 'a mit Dot Above und Makron']);
  this.executeCharTest('ǭ', ['o mit Ogonek und Makron', 'o mit Ogonek und Makron', 'o mit Ogonek und Makron']);
  this.executeCharTest('ǻ', ['a mit Ring oben und akut', 'a mit Ring oben und akut', 'a mit Ring oben und akut']);
  this.executeCharTest('ȫ', ['o mit Diärese und Makron', 'o mit Diärese und Makron', 'o mit Diärese und Makron']);
  this.executeCharTest('ȭ', ['o mit Tilde und Makron', 'o mit Tilde und Makron', 'o mit Tilde und Makron']);
  this.executeCharTest('ȱ', ['o mit Punkt oben und Makron', 'o mit Punkt oben und Makron', 'o mit Punkt oben und Makron']);
  this.executeCharTest('ḉ', ['c mit Cedilla und Akut', 'c mit Cedilla und Akut', 'c mit Cedilla und Akut']);
  this.executeCharTest('ḕ', ['e mit Makron und Grab', 'e mit Makron und Grab', 'e mit Makron und Grab']);
  this.executeCharTest('ḗ', ['e mit Makron und Akut', 'e mit Makron und Akut', 'e mit Makron und Akut']);
  this.executeCharTest('ḝ', ['e mit Cedilla und Breve', 'e mit Cedilla und Breve', 'e mit Cedilla und Breve']);
  this.executeCharTest('ḯ', ['i mit Diärese und Akut', 'i mit Diärese und Akut', 'i mit Diärese und Akut']);
  this.executeCharTest('ḹ', ['l mit Punkt unten und Makron', 'l mit Punkt unten und Makron', 'l mit Punkt unten und Makron']);
  this.executeCharTest('ṍ', ['o mit Tilde und Akut', 'o mit Tilde und Akut', 'o mit Tilde und Akut']);
  this.executeCharTest('ṏ', ['o mit Tilde und Diärese', 'o mit Tilde und Diärese', 'o mit Tilde und Diärese']);
  this.executeCharTest('ṑ', ['o mit Makron und Grab', 'o mit Makron und Grab', 'o mit Makron und Grab']);
  this.executeCharTest('ṓ', ['o mit Makron und Akut', 'o mit Makron und Akut', 'o mit Makron und Akut']);
  this.executeCharTest('ṝ', ['r mit Punkt unten und Makron', 'r mit Punkt unten und Makron', 'r mit Punkt unten und Makron']);
  this.executeCharTest('ṥ', ['s mit Akute und Punkt oben', 's mit Akute und Punkt oben', 's mit Akute und Punkt oben']);
  this.executeCharTest('ṧ', ['s mit Caron und Punkt oben', 's mit Caron und Punkt oben', 's mit Caron und Punkt oben']);
  this.executeCharTest('ṩ', ['s mit Punkt unten und Punkt oben', 's mit Punkt unten und Punkt oben', 's mit Punkt unten und Punkt oben']);
  this.executeCharTest('ṹ', ['u mit Tilde und Akut', 'u mit Tilde und Akut', 'u mit Tilde und Akut']);
  this.executeCharTest('ṻ', ['u mit Makron und Diärese', 'u mit Makron und Diärese', 'u mit Makron und Diärese']);
  this.executeCharTest('ấ', ['a mit Zirkumflex und Akut', 'a mit Zirkumflex und Akut', 'a mit Zirkumflex und Akut']);
  this.executeCharTest('ầ', ['a mit Zirkumflex und Grab', 'a mit Zirkumflex und Grab', 'a mit Zirkumflex und Grab']);
  this.executeCharTest('ẩ', ['a mit Zirkumflex und Haken oben', 'a mit Zirkumflex und Haken oben', 'a mit Zirkumflex und Haken oben']);
  this.executeCharTest('ẫ', ['a mit Zirkumflex und Tilde', 'a mit Zirkumflex und Tilde', 'a mit Zirkumflex und Tilde']);
  this.executeCharTest('ậ', ['a mit Zirkumflex und Punkt darunter', 'a mit Zirkumflex und Punkt darunter', 'a mit Zirkumflex und Punkt darunter']);
  this.executeCharTest('ắ', ['a mit Breve und Akut', 'a mit Breve und Akut', 'a mit Breve und Akut']);
  this.executeCharTest('ằ', ['a mit Breve und Grab', 'a mit Breve und Grab', 'a mit Breve und Grab']);
  this.executeCharTest('ẳ', ['a mit Breve und Haken oben', 'a mit Breve und Haken oben', 'a mit Breve und Haken oben']);
  this.executeCharTest('ẵ', ['a mit Breve und Tilde', 'a mit Breve und Tilde', 'a mit Breve und Tilde']);
  this.executeCharTest('ặ', ['a mit Breve und Dot Below', 'a mit Breve und Dot Below', 'a mit Breve und Dot Below']);
  this.executeCharTest('ế', ['e mit Zirkumflex und Akut', 'e mit Zirkumflex und Akut', 'e mit Zirkumflex und Akut']);
  this.executeCharTest('ề', ['e mit Zirkumflex und Grab', 'e mit Zirkumflex und Grab', 'e mit Zirkumflex und Grab']);
  this.executeCharTest('ể', ['e mit Zirkumflex und Haken oben', 'e mit Zirkumflex und Haken oben', 'e mit Zirkumflex und Haken oben']);
  this.executeCharTest('ễ', ['e mit Zirkumflex und Tilde', 'e mit Zirkumflex und Tilde', 'e mit Zirkumflex und Tilde']);
  this.executeCharTest('ệ', ['e mit Zirkumflex und Punkt darunter', 'e mit Zirkumflex und Punkt darunter', 'e mit Zirkumflex und Punkt darunter']);
  this.executeCharTest('ố', ['o mit Zirkumflex und Akut', 'o mit Zirkumflex und Akut', 'o mit Zirkumflex und Akut']);
  this.executeCharTest('ồ', ['o mit Zirkumflex und Grab', 'o mit Zirkumflex und Grab', 'o mit Zirkumflex und Grab']);
  this.executeCharTest('ổ', ['o mit Zirkumflex und Haken oben', 'o mit Zirkumflex und Haken oben', 'o mit Zirkumflex und Haken oben']);
  this.executeCharTest('ỗ', ['o mit Zirkumflex und Tilde', 'o mit Zirkumflex und Tilde', 'o mit Zirkumflex und Tilde']);
  this.executeCharTest('ộ', ['o mit Zirkumflex und Punkt darunter', 'o mit Zirkumflex und Punkt darunter', 'o mit Zirkumflex und Punkt darunter']);
  this.executeCharTest('ớ', ['o mit Horn und Akut', 'o mit Horn und Akut', 'o mit Horn und Akut']);
  this.executeCharTest('ờ', ['o mit Horn und Grab', 'o mit Horn und Grab', 'o mit Horn und Grab']);
  this.executeCharTest('ở', ['o mit Horn und Haken oben', 'o mit Horn und Haken oben', 'o mit Horn und Haken oben']);
  this.executeCharTest('ỡ', ['o mit Horn und Tilde', 'o mit Horn und Tilde', 'o mit Horn und Tilde']);
  this.executeCharTest('ợ', ['o mit Horn und Punkt', 'o mit Horn und Punkt', 'o mit Horn und Punkt']);
  this.executeCharTest('ứ', ['u mit Horn und Akut', 'u mit Horn und Akut', 'u mit Horn und Akut']);
  this.executeCharTest('ừ', ['u mit Horn und Grab', 'u mit Horn und Grab', 'u mit Horn und Grab']);
  this.executeCharTest('ử', ['u mit Horn und Haken oben', 'u mit Horn und Haken oben', 'u mit Horn und Haken oben']);
  this.executeCharTest('ữ', ['u mit Horn und Tilde', 'u mit Horn und Tilde', 'u mit Horn und Tilde']);
  this.executeCharTest('ự', ['u mit Horn und Punkt', 'u mit Horn und Punkt', 'u mit Horn und Punkt']);
  this.executeCharTest('ø', ['o mit Strich', 'o mit Strich', 'o mit Strich']);
  this.executeCharTest('đ', ['d mit Strich', 'd mit Strich', 'd mit Strich']);
  this.executeCharTest('ħ', ['h mit Strich', 'h mit Strich', 'h mit Strich']);
  this.executeCharTest('ł', ['l mit Strich', 'l mit Strich', 'l mit Strich']);
  this.executeCharTest('ŧ', ['t mit Strich', 't mit Strich', 't mit Strich']);
  this.executeCharTest('ƀ', ['b mit Strich', 'b mit Strich', 'b mit Strich']);
  this.executeCharTest('ƛ', ['lambda mit Strich', 'lambda mit Strich', 'lambda mit Strich']);
  this.executeCharTest('ƶ', ['z mit Strich', 'z mit Strich', 'z mit Strich']);
  this.executeCharTest('ƾ', ['umgekehrter Glottalanschlag mit Strich', 'umgekehrter Glottalanschlag mit Strich', 'umgekehrter Glottalanschlag mit Strich']);
  this.executeCharTest('ǥ', ['g mit Strich', 'g mit Strich', 'g mit Strich']);
  this.executeCharTest('ǿ', ['o mit Strich und Akut', 'o mit Strich und Akut', 'o mit Strich und Akut']);
  this.executeCharTest('ȼ', ['c mit Strich', 'c mit Strich', 'c mit Strich']);
  this.executeCharTest('ɇ', ['e mit Strich', 'e mit Strich', 'e mit Strich']);
  this.executeCharTest('ɉ', ['j mit Strich', 'j mit Strich', 'j mit Strich']);
  this.executeCharTest('ɍ', ['r mit Strich', 'r mit Strich', 'r mit Strich']);
  this.executeCharTest('ɏ', ['y mit Strich', 'y mit Strich', 'y mit Strich']);
  this.executeCharTest('ɟ', ['punktloses j mit Strich', 'punktloses j mit Strich', 'punktloses j mit Strich']);
  this.executeCharTest('ɨ', ['i mit Strich', 'i mit Strich', 'i mit Strich']);
  this.executeCharTest('ʄ', ['punktloses j mit Strich und Haken', 'punktloses j mit Strich und Haken', 'punktloses j mit Strich und Haken']);
  this.executeCharTest('ʡ', ['Glottalanschlag mit Strich', 'Glottalanschlag mit Strich', 'Glottalanschlag mit Strich']);
  this.executeCharTest('ʢ', ['umgekehrter Glottalanschlag mit Strich', 'umgekehrter Glottalanschlag mit Strich', 'umgekehrter Glottalanschlag mit Strich']);
  this.executeCharTest('ᴓ', ['liegendes O mit Strich', 'liegendes O mit Strich', 'liegendes O mit Strich']);
  this.executeCharTest('ᵼ', ['iota mit Strich', 'iota mit Strich', 'iota mit Strich']);
  this.executeCharTest('ᵽ', ['p mit Strich', 'p mit Strich', 'p mit Strich']);
  this.executeCharTest('ᵿ', ['upsilon mit Strich', 'upsilon mit Strich', 'upsilon mit Strich']);
  this.executeCharTest('ẜ', ['lang mit diagonalem Anschlag', 'lang mit diagonalem Anschlag', 'lang mit diagonalem Anschlag']);
  this.executeCharTest('ẝ', ['lang S mit hohem Hub', 'lang S mit hohem Hub', 'lang S mit hohem Hub']);
  this.executeCharTest('ƍ', ['wurde Delta gedreht', 'wurde Delta gedreht', 'wurde Delta gedreht']);
  this.executeCharTest('ẛ', ['lang mit Punkt oben', 'lang mit Punkt oben', 'lang mit Punkt oben']);
  this.executeCharTest('ẟ', ['delta', 'delta', 'delta']);
  this.executeCharTest('ĸ', ['kra', 'kra', 'kra']);
  this.executeCharTest('ſ', ['lang S', 'lang S', 'lang S']);
  this.executeCharTest('ƃ', ['b mit Oberleiste', 'b mit Oberleiste', 'b mit Oberleiste']);
  this.executeCharTest('ƅ', ['ton sechs', 'ton sechs', 'ton sechs']);
  this.executeCharTest('ƈ', ['c mit Haken', 'c mit Haken', 'c mit Haken']);
  this.executeCharTest('ƌ', ['d mit Oberleiste', 'd mit Oberleiste', 'd mit Oberleiste']);
  this.executeCharTest('ƒ', ['f mit Haken', 'f mit Haken', 'f mit Haken']);
  this.executeCharTest('ƕ', ['hv', 'hv', 'hv']);
  this.executeCharTest('ƙ', ['k mit Haken', 'k mit Haken', 'k mit Haken']);
  this.executeCharTest('ƚ', ['l mit Strich', 'l mit Strich', 'l mit Strich']);
  this.executeCharTest('ƞ', ['n mit langem rechtem Bein', 'n mit langem rechtem Bein', 'n mit langem rechtem Bein']);
  this.executeCharTest('ơ', ['o mit Horn', 'o mit Horn', 'o mit Horn']);
  this.executeCharTest('ƣ', ['oi', 'oi', 'oi']);
  this.executeCharTest('ƥ', ['p mit Haken', 'p mit Haken', 'p mit Haken']);
  this.executeCharTest('ƨ', ['ton zwei', 'ton zwei', 'ton zwei']);
  this.executeCharTest('ƪ', ['umgedrehte esh Schleife', 'umgedrehte esh Schleife', 'umgedrehte esh Schleife']);
  this.executeCharTest('ƫ', ['t mit palatal Haken', 't mit palatal Haken', 't mit palatal Haken']);
  this.executeCharTest('ƭ', ['t mit Haken', 't mit Haken', 't mit Haken']);
  this.executeCharTest('ư', ['u mit Horn', 'u mit Horn', 'u mit Horn']);
  this.executeCharTest('ƴ', ['y mit Haken', 'y mit Haken', 'y mit Haken']);
  this.executeCharTest('ƹ', ['umgekehrtes ezh', 'umgekehrtes ezh', 'umgekehrtes ezh']);
  this.executeCharTest('ƺ', ['ezh mit Schwanz', 'ezh mit Schwanz', 'ezh mit Schwanz']);
  this.executeCharTest('ƽ', ['ton fünf', 'ton fünf', 'ton fünf']);
  this.executeCharTest('ƿ', ['wynn', 'wynn', 'wynn']);
  this.executeCharTest('ǆ', ['dz mit Caron', 'dz mit Caron', 'dz mit Caron']);
  this.executeCharTest('ǉ', ['lj', 'lj', 'lj']);
  this.executeCharTest('ǌ', ['nj', 'nj', 'nj']);
  this.executeCharTest('ǣ', ['ae mit Makron', 'ae mit Makron', 'ae mit Makron']);
  this.executeCharTest('ǯ', ['ezh mit Caron', 'ezh mit Caron', 'ezh mit Caron']);
  this.executeCharTest('ǳ', ['dz', 'dz', 'dz']);
  this.executeCharTest('ȝ', ['yogh', 'yogh', 'yogh']);
  this.executeCharTest('ɮ', ['lezh', 'lezh', 'lezh']);
  this.executeCharTest('ʒ', ['ezh', 'ezh', 'ezh']);
  this.executeCharTest('ʓ', ['ezh mit Kringel', 'ezh mit Kringel', 'ezh mit Kringel']);
  this.executeCharTest('ʤ', ['dezh Digraph', 'dezh Digraph', 'dezh Digraph']);
  this.executeCharTest('ǝ', ['gedreht E', 'gedreht E', 'gedreht E']);
  this.executeCharTest('ǽ', ['ae mit Akut', 'ae mit Akut', 'ae mit Akut']);
  this.executeCharTest('ȡ', ['d mit Kringel', 'd mit Kringel', 'd mit Kringel']);
  this.executeCharTest('ȣ', ['ou', 'ou', 'ou']);
  this.executeCharTest('ȥ', ['z mit Haken', 'z mit Haken', 'z mit Haken']);
  this.executeCharTest('ȴ', ['l mit Kringel', 'l mit Kringel', 'l mit Kringel']);
  this.executeCharTest('ȵ', ['n mit Kringel', 'n mit Kringel', 'n mit Kringel']);
  this.executeCharTest('ȶ', ['t mit Kringel', 't mit Kringel', 't mit Kringel']);
  this.executeCharTest('ȸ', ['db', 'db', 'db']);
  this.executeCharTest('ȹ', ['qp Digraph', 'qp Digraph', 'qp Digraph']);
  this.executeCharTest('ȿ', ['s mit Swash Tail', 's mit Swash Tail', 's mit Swash Tail']);
  this.executeCharTest('ɀ', ['z mit Swash Tail', 'z mit Swash Tail', 'z mit Swash Tail']);
  this.executeCharTest('ɂ', ['Glottalanschlag', 'Glottalanschlag', 'Glottalanschlag']);
  this.executeCharTest('ɋ', ['q mit Hakenschwanz', 'q mit Hakenschwanz', 'q mit Hakenschwanz']);
  this.executeCharTest('ɐ', ['gedreht A', 'gedreht A', 'gedreht A']);
  this.executeCharTest('ɑ', ['alpha', 'alpha', 'alpha']);
  this.executeCharTest('ɒ', ['gedrehtes Alpha', 'gedrehtes Alpha', 'gedrehtes Alpha']);
  this.executeCharTest('ɓ', ['b mit Haken', 'b mit Haken', 'b mit Haken']);
  this.executeCharTest('ɔ', ['open O', 'open O', 'open O']);
  this.executeCharTest('ɕ', ['c mit Kringel', 'c mit Kringel', 'c mit Kringel']);
  this.executeCharTest('ɖ', ['d mit Schwanz', 'd mit Schwanz', 'd mit Schwanz']);
  this.executeCharTest('ɗ', ['d mit Haken', 'd mit Haken', 'd mit Haken']);
  this.executeCharTest('ɘ', ['umgedreht E', 'umgedreht E', 'umgedreht E']);
  this.executeCharTest('ə', ['schwa', 'schwa', 'schwa']);
  this.executeCharTest('ɚ', ['schwa mit Haken', 'schwa mit Haken', 'schwa mit Haken']);
  this.executeCharTest('ɛ', ['offenes e', 'offenes e', 'offenes e']);
  this.executeCharTest('ɜ', ['umgedrehtes offenes e', 'umgedrehtes offenes e', 'umgedrehtes offenes e']);
  this.executeCharTest('ɝ', ['umgekehrtes offenes e mit Haken', 'umgekehrtes offenes e mit Haken', 'umgekehrtes offenes e mit Haken']);
  this.executeCharTest('ɞ', ['umgekehrtes geschlossenes epsilon', 'umgekehrtes geschlossenes epsilon', 'umgekehrtes geschlossenes epsilon']);
  this.executeCharTest('ɠ', ['g mit Haken', 'g mit Haken', 'g mit Haken']);
  this.executeCharTest('ɡ', ['g', 'g', 'g']);
  this.executeCharTest('ɣ', ['gamma', 'gamma', 'gamma']);
  this.executeCharTest('ɤ', ['mini gamma', 'mini gamma', 'mini gamma']);
  this.executeCharTest('ɥ', ['gedrehtes h', 'gedrehtes h', 'gedrehtes h']);
  this.executeCharTest('ɦ', ['h mit Haken', 'h mit Haken', 'h mit Haken']);
  this.executeCharTest('ɧ', ['h mit Haken', 'h mit Haken', 'h mit Haken']);
  this.executeCharTest('ɩ', ['iota', 'iota', 'iota']);
  this.executeCharTest('ɫ', ['l mit mittlerer Tilde', 'l mit mittlerer Tilde', 'l mit mittlerer Tilde']);
  this.executeCharTest('ɬ', ['l mit Gurt', 'l mit Gurt', 'l mit Gurt']);
  this.executeCharTest('ɭ', ['l mit Retroflexhaken', 'l mit Retroflexhaken', 'l mit Retroflexhaken']);
  this.executeCharTest('ɯ', ['gedreht M', 'gedreht M', 'gedreht M']);
  this.executeCharTest('ɰ', ['gedrehtes M mit langem Bein', 'gedrehtes M mit langem Bein', 'gedrehtes M mit langem Bein']);
  this.executeCharTest('ɱ', ['m mit Haken', 'm mit Haken', 'm mit Haken']);
  this.executeCharTest('ɲ', ['n mit linkem Haken', 'n mit linkem Haken', 'n mit linkem Haken']);
  this.executeCharTest('ɳ', ['n mit Retroflexhaken', 'n mit Retroflexhaken', 'n mit Retroflexhaken']);
  this.executeCharTest('ɵ', ['o mit balken', 'o mit balken', 'o mit balken']);
  this.executeCharTest('ɷ', ['geschlossenes omega', 'geschlossenes omega', 'geschlossenes omega']);
  this.executeCharTest('ɸ', ['phi', 'phi', 'phi']);
  this.executeCharTest('ɹ', ['gedrehtes r', 'gedrehtes r', 'gedrehtes r']);
  this.executeCharTest('ɺ', ['gedrehtes r mit langem Bein', 'gedrehtes r mit langem Bein', 'gedrehtes r mit langem Bein']);
  this.executeCharTest('ɻ', ['gedrehtes r mit langem Bein und Haken', 'gedrehtes r mit langem Bein und Haken', 'gedrehtes r mit langem Bein und Haken']);
  this.executeCharTest('ɼ', ['r mit langem Bein', 'r mit langem Bein', 'r mit langem Bein']);
  this.executeCharTest('ɽ', ['r mit Endstück', 'r mit Endstück', 'r mit Endstück']);
  this.executeCharTest('ɾ', ['r mit Angelhaken', 'r mit Angelhaken', 'r mit Angelhaken']);
  this.executeCharTest('ɿ', ['umgedrehtes R mit Angelhaken', 'umgedrehtes R mit Angelhaken', 'umgedrehtes R mit Angelhaken']);
  this.executeCharTest('ʂ', ['s mit Haken', 's mit Haken', 's mit Haken']);
  this.executeCharTest('ʃ', ['esh', 'esh', 'esh']);
  this.executeCharTest('ʅ', ['squat umgekehrt', 'squat umgekehrt', 'squat umgekehrt']);
  this.executeCharTest('ʆ', ['esh mit Kringel', 'esh mit Kringel', 'esh mit Kringel']);
  this.executeCharTest('ʇ', ['gedreht T', 'gedreht T', 'gedreht T']);
  this.executeCharTest('ʈ', ['t mit Retroflexhaken', 't mit Retroflexhaken', 't mit Retroflexhaken']);
  this.executeCharTest('ʉ', ['u Bar', 'u Bar', 'u Bar']);
  this.executeCharTest('ʊ', ['upsilon', 'upsilon', 'upsilon']);
  this.executeCharTest('ʋ', ['v mit Haken', 'v mit Haken', 'v mit Haken']);
  this.executeCharTest('ʌ', ['gedrehtes v', 'gedrehtes v', 'gedrehtes v']);
  this.executeCharTest('ʍ', ['gedrehtes w', 'gedrehtes w', 'gedrehtes w']);
  this.executeCharTest('ʎ', ['gedrehtes y', 'gedrehtes y', 'gedrehtes y']);
  this.executeCharTest('ʐ', ['z mit Retroflexhaken', 'z mit Retroflexhaken', 'z mit Retroflexhaken']);
  this.executeCharTest('ʑ', ['z mit Kringel', 'z mit Kringel', 'z mit Kringel']);
  this.executeCharTest('ʕ', ['pharyngales stimmhaft Frikativ', 'pharyngales stimmhaft Frikativ', 'pharyngales stimmhaft Frikativ']);
  this.executeCharTest('ʖ', ['invertierter Glottalanschlag', 'invertierter Glottalanschlag', 'invertierter Glottalanschlag']);
  this.executeCharTest('ʗ', ['gestrecktes C', 'gestrecktes C', 'gestrecktes C']);
  this.executeCharTest('ʘ', ['bilabialer Klick', 'bilabialer Klick', 'bilabialer Klick']);
  this.executeCharTest('ʚ', ['geschlossenes offenes e', 'geschlossenes offenes e', 'geschlossenes offenes e']);
  this.executeCharTest('ʞ', ['gedrehtes k', 'gedrehtes k', 'gedrehtes k']);
  this.executeCharTest('ʠ', ['q mit Haken', 'q mit Haken', 'q mit Haken']);
  this.executeCharTest('ʣ', ['dz Digraph', 'dz Digraph', 'dz Digraph']);
  this.executeCharTest('ʥ', ['dz Digraph mit Kringel', 'dz Digraph mit Kringel', 'dz Digraph mit Kringel']);
  this.executeCharTest('ʦ', ['ts Digraph', 'ts Digraph', 'ts Digraph']);
  this.executeCharTest('ʧ', ['tesh Digraph', 'tesh Digraph', 'tesh Digraph']);
  this.executeCharTest('ʨ', ['tc Digraph mit Kringel', 'tc Digraph mit Kringel', 'tc Digraph mit Kringel']);
  this.executeCharTest('ʩ', ['feng Digraph', 'feng Digraph', 'feng Digraph']);
  this.executeCharTest('ʪ', ['ls Digraph', 'ls Digraph', 'ls Digraph']);
  this.executeCharTest('ʫ', ['lz Digraph', 'lz Digraph', 'lz Digraph']);
  this.executeCharTest('ʬ', ['bilabiales Perkussiv', 'bilabiales Perkussiv', 'bilabiales Perkussiv']);
  this.executeCharTest('ʭ', ['bidentales Perkussiv', 'bidentales Perkussiv', 'bidentales Perkussiv']);
  this.executeCharTest('ʮ', ['gedrehtes h mit Angelhaken', 'gedrehtes h mit Angelhaken', 'gedrehtes h mit Angelhaken']);
  this.executeCharTest('ʯ', ['gedrehtes h mit Angelhaken und Schwanz', 'gedrehtes h mit Angelhaken und Schwanz', 'gedrehtes h mit Angelhaken und Schwanz']);
  this.executeCharTest('ᴂ', ['gedrehtes ae', 'gedrehtes ae', 'gedrehtes ae']);
  this.executeCharTest('ᴈ', ['gedrehtes e', 'gedrehtes e', 'gedrehtes e']);
  this.executeCharTest('ᴉ', ['gedrehtes i', 'gedrehtes i', 'gedrehtes i']);
  this.executeCharTest('ᴑ', ['liegendes O', 'liegendes O', 'liegendes O']);
  this.executeCharTest('ᴒ', ['liegendes geöffnet O', 'liegendes geöffnet O', 'liegendes geöffnet O']);
  this.executeCharTest('ᴔ', ['gedreht Oe', 'gedreht Oe', 'gedreht Oe']);
  this.executeCharTest('ᴖ', ['obere Hälfte O', 'obere Hälfte O', 'obere Hälfte O']);
  this.executeCharTest('ᴗ', ['untere Hälfte O', 'untere Hälfte O', 'untere Hälfte O']);
  this.executeCharTest('ᴝ', ['liegendes U', 'liegendes U', 'liegendes U']);
  this.executeCharTest('ᴞ', ['liegendes u Umlaut', 'liegendes u Umlaut', 'liegendes u Umlaut']);
  this.executeCharTest('ᴟ', ['liegendes m', 'liegendes m', 'liegendes m']);
  this.executeCharTest('ᴤ', ['stimmhaft laryngaler Frikativ', 'stimmhaft laryngaler Frikativ', 'stimmhaft laryngaler Frikativ']);
  this.executeCharTest('ᴥ', ['Ain', 'Ain', 'Ain']);
  this.executeCharTest('ᵫ', ['ue', 'ue', 'ue']);
  this.executeCharTest('ᵬ', ['b mit mittlerer Tilde', 'b mit mittlerer Tilde', 'b mit mittlerer Tilde']);
  this.executeCharTest('ᵭ', ['d mit mittlerer Tilde', 'd mit mittlerer Tilde', 'd mit mittlerer Tilde']);
  this.executeCharTest('ᵮ', ['f mit mittlerer Tilde', 'f mit mittlerer Tilde', 'f mit mittlerer Tilde']);
  this.executeCharTest('ᵯ', ['m mit mittlerer Tilde', 'm mit mittlerer Tilde', 'm mit mittlerer Tilde']);
  this.executeCharTest('ᵰ', ['n mit mittlerer Tilde', 'n mit mittlerer Tilde', 'n mit mittlerer Tilde']);
  this.executeCharTest('ᵱ', ['p mit mittlerer Tilde', 'p mit mittlerer Tilde', 'p mit mittlerer Tilde']);
  this.executeCharTest('ᵲ', ['r mit mittlerer Tilde', 'r mit mittlerer Tilde', 'r mit mittlerer Tilde']);
  this.executeCharTest('ᵳ', ['r mit Angelhaken und mittlerer Tilde', 'r mit Angelhaken und mittlerer Tilde', 'r mit Angelhaken und mittlerer Tilde']);
  this.executeCharTest('ᵴ', ['s mit mittlerer Tilde', 's mit mittlerer Tilde', 's mit mittlerer Tilde']);
  this.executeCharTest('ᵵ', ['t mit mittlerer Tilde', 't mit mittlerer Tilde', 't mit mittlerer Tilde']);
  this.executeCharTest('ᵶ', ['z mit mittlerer Tilde', 'z mit mittlerer Tilde', 'z mit mittlerer Tilde']);
  this.executeCharTest('ᵷ', ['gedreht G', 'gedreht G', 'gedreht G']);
  this.executeCharTest('ᵹ', ['insular G', 'insular G', 'insular G']);
  this.executeCharTest('ᵺ', ['th mit Durchgestrichen', 'th mit Durchgestrichen', 'th mit Durchgestrichen']);
  this.executeCharTest('ᶀ', ['b mit Palatalhaken', 'b mit Palatalhaken', 'b mit Palatalhaken']);
  this.executeCharTest('ᶁ', ['d mit Palatalhaken', 'd mit Palatalhaken', 'd mit Palatalhaken']);
  this.executeCharTest('ᶂ', ['f mit Palatalhaken', 'f mit Palatalhaken', 'f mit Palatalhaken']);
  this.executeCharTest('ᶃ', ['g mit Palatalhaken', 'g mit Palatalhaken', 'g mit Palatalhaken']);
  this.executeCharTest('ᶄ', ['k mit Palatalhaken', 'k mit Palatalhaken', 'k mit Palatalhaken']);
  this.executeCharTest('ᶅ', ['l mit Palatalhaken', 'l mit Palatalhaken', 'l mit Palatalhaken']);
  this.executeCharTest('ᶆ', ['m mit Palatalhaken', 'm mit Palatalhaken', 'm mit Palatalhaken']);
  this.executeCharTest('ᶇ', ['n mit Palatalhaken', 'n mit Palatalhaken', 'n mit Palatalhaken']);
  this.executeCharTest('ᶈ', ['p mit Palatalhaken', 'p mit Palatalhaken', 'p mit Palatalhaken']);
  this.executeCharTest('ᶉ', ['r mit Palatalhaken', 'r mit Palatalhaken', 'r mit Palatalhaken']);
  this.executeCharTest('ᶊ', ['s mit Palatalhaken', 's mit Palatalhaken', 's mit Palatalhaken']);
  this.executeCharTest('ᶋ', ['esh mit Palatalhaken', 'esh mit Palatalhaken', 'esh mit Palatalhaken']);
  this.executeCharTest('ᶌ', ['v mit Palatalhaken', 'v mit Palatalhaken', 'v mit Palatalhaken']);
  this.executeCharTest('ᶍ', ['x mit Palatalhaken', 'x mit Palatalhaken', 'x mit Palatalhaken']);
  this.executeCharTest('ᶎ', ['z mit Palatalhaken', 'z mit Palatalhaken', 'z mit Palatalhaken']);
  this.executeCharTest('ᶏ', ['a mit Retroflexhaken', 'a mit Retroflexhaken', 'a mit Retroflexhaken']);
  this.executeCharTest('ᶐ', ['alpha mit Retroflexhaken', 'alpha mit Retroflexhaken', 'alpha mit Retroflexhaken']);
  this.executeCharTest('ᶑ', ['d mit Haken und Schwanz', 'd mit Haken und Schwanz', 'd mit Haken und Schwanz']);
  this.executeCharTest('ᶒ', ['e mit Retroflexhaken', 'e mit Retroflexhaken', 'e mit Retroflexhaken']);
  this.executeCharTest('ᶓ', ['offenes e mit Retroflexhaken', 'offenes e mit Retroflexhaken', 'offenes e mit Retroflexhaken']);
  this.executeCharTest('ᶔ', ['umgedrehtes offenes e mit Retroflexhaken', 'umgedrehtes offenes e mit Retroflexhaken', 'umgedrehtes offenes e mit Retroflexhaken']);
  this.executeCharTest('ᶕ', ['schwa mit Retroflexhaken', 'schwa mit Retroflexhaken', 'schwa mit Retroflexhaken']);
  this.executeCharTest('ᶖ', ['i mit Retroflexhaken', 'i mit Retroflexhaken', 'i mit Retroflexhaken']);
  this.executeCharTest('ᶗ', ['offenes o mit Retroflexhaken', 'offenes o mit Retroflexhaken', 'offenes o mit Retroflexhaken']);
  this.executeCharTest('ᶘ', ['esh mit Retroflexhaken', 'esh mit Retroflexhaken', 'esh mit Retroflexhaken']);
  this.executeCharTest('ᶙ', ['u mit Retroflexhaken', 'u mit Retroflexhaken', 'u mit Retroflexhaken']);
  this.executeCharTest('ᶚ', ['ezh mit Retroflexhaken', 'ezh mit Retroflexhaken', 'ezh mit Retroflexhaken']);
  this.executeCharTest('ŉ', ['n mit Apostroph davor', 'n mit Apostroph davor', 'n mit Apostroph davor']);
  this.executeCharTest('ŋ', ['eng', 'eng', 'eng']);
  this.executeCharTest('à', ['a mit Grave', 'a mit Grave', 'a mit Grave']);
  this.executeCharTest('á', ['a mit Aigu', 'a mit Aigu', 'a mit Aigu']);
  this.executeCharTest('â', ['a mit Zirkumflex', 'a mit Zirkumflex', 'a mit Zirkumflex']);
  this.executeCharTest('ã', ['a mit Tilde', 'a mit Tilde', 'a mit Tilde']);
  this.executeCharTest('ä', ['a mit Diärese', 'a mit Diärese', 'a mit Diärese']);
  this.executeCharTest('å', ['a mit Ring darüber', 'a mit Ring darüber', 'a mit Ring darüber']);
  this.executeCharTest('ç', ['c mit Cedille', 'c mit Cedille', 'c mit Cedille']);
  this.executeCharTest('è', ['e mit Grave', 'e mit Grave', 'e mit Grave']);
  this.executeCharTest('é', ['e mit Aigu', 'e mit Aigu', 'e mit Aigu']);
  this.executeCharTest('ê', ['e mit Zirkumflex', 'e mit Zirkumflex', 'e mit Zirkumflex']);
  this.executeCharTest('ë', ['e mit Diärese', 'e mit Diärese', 'e mit Diärese']);
  this.executeCharTest('ì', ['i mit Grave', 'i mit Grave', 'i mit Grave']);
  this.executeCharTest('í', ['i mit Aigu', 'i mit Aigu', 'i mit Aigu']);
  this.executeCharTest('î', ['i mit Zirkumflex', 'i mit Zirkumflex', 'i mit Zirkumflex']);
  this.executeCharTest('ï', ['i mit Diärese', 'i mit Diärese', 'i mit Diärese']);
  this.executeCharTest('ñ', ['n mit Tilde', 'n mit Tilde', 'n mit Tilde']);
  this.executeCharTest('ò', ['o mit Grave', 'o mit Grave', 'o mit Grave']);
  this.executeCharTest('ó', ['o mit Aigu', 'o mit Aigu', 'o mit Aigu']);
  this.executeCharTest('ô', ['o mit Zirkumflex', 'o mit Zirkumflex', 'o mit Zirkumflex']);
  this.executeCharTest('õ', ['o mit Tilde', 'o mit Tilde', 'o mit Tilde']);
  this.executeCharTest('ö', ['o mit Diärese', 'o mit Diärese', 'o mit Diärese']);
  this.executeCharTest('ù', ['u mit Grave', 'u mit Grave', 'u mit Grave']);
  this.executeCharTest('ú', ['u mit Aigu', 'u mit Aigu', 'u mit Aigu']);
  this.executeCharTest('û', ['u mit Zirkumflex', 'u mit Zirkumflex', 'u mit Zirkumflex']);
  this.executeCharTest('ü', ['u mit Diärese', 'u mit Diärese', 'u mit Diärese']);
  this.executeCharTest('ý', ['y mit Aigu', 'y mit Aigu', 'y mit Aigu']);
  this.executeCharTest('ÿ', ['y mit Diärese', 'y mit Diärese', 'y mit Diärese']);
  this.executeCharTest('ā', ['a mit Makron', 'a mit Makron', 'a mit Makron']);
  this.executeCharTest('ă', ['a mit Breve', 'a mit Breve', 'a mit Breve']);
  this.executeCharTest('ą', ['a mit Ogonek', 'a mit Ogonek', 'a mit Ogonek']);
  this.executeCharTest('ć', ['c mit Aigu', 'c mit Aigu', 'c mit Aigu']);
  this.executeCharTest('ĉ', ['c mit Zirkumflex', 'c mit Zirkumflex', 'c mit Zirkumflex']);
  this.executeCharTest('ċ', ['c mit Punkt darüber', 'c mit Punkt darüber', 'c mit Punkt darüber']);
  this.executeCharTest('č', ['c mit Caron', 'c mit Caron', 'c mit Caron']);
  this.executeCharTest('ď', ['d mit Caron', 'd mit Caron', 'd mit Caron']);
  this.executeCharTest('ē', ['e mit Makron', 'e mit Makron', 'e mit Makron']);
  this.executeCharTest('ĕ', ['e mit Breve', 'e mit Breve', 'e mit Breve']);
  this.executeCharTest('ė', ['e mit Punkt darüber', 'e mit Punkt darüber', 'e mit Punkt darüber']);
  this.executeCharTest('ę', ['e mit Ogonek', 'e mit Ogonek', 'e mit Ogonek']);
  this.executeCharTest('ě', ['e mit Caron', 'e mit Caron', 'e mit Caron']);
  this.executeCharTest('ĝ', ['g mit Zirkumflex', 'g mit Zirkumflex', 'g mit Zirkumflex']);
  this.executeCharTest('ğ', ['g mit Breve', 'g mit Breve', 'g mit Breve']);
  this.executeCharTest('ġ', ['g mit Punkt darüber', 'g mit Punkt darüber', 'g mit Punkt darüber']);
  this.executeCharTest('ģ', ['g mit Cedilla', 'g mit Cedilla', 'g mit Cedilla']);
  this.executeCharTest('ĥ', ['h mit Zirkumflex', 'h mit Zirkumflex', 'h mit Zirkumflex']);
  this.executeCharTest('ĩ', ['i mit Tilde', 'i mit Tilde', 'i mit Tilde']);
  this.executeCharTest('ī', ['i mit Makron', 'i mit Makron', 'i mit Makron']);
  this.executeCharTest('ĭ', ['i mit Breve', 'i mit Breve', 'i mit Breve']);
  this.executeCharTest('į', ['i mit Ogonek', 'i mit Ogonek', 'i mit Ogonek']);
  this.executeCharTest('ı', ['i ohne punkt', 'i ohne punkt', 'i ohne punkt']);
  this.executeCharTest('ĵ', ['j mit Zirkumflex', 'j mit Zirkumflex', 'j mit Zirkumflex']);
  this.executeCharTest('ķ', ['k mit Cedille', 'k mit Cedille', 'k mit Cedille']);
  this.executeCharTest('ĺ', ['l mit Aigu', 'l mit Aigu', 'l mit Aigu']);
  this.executeCharTest('ļ', ['l mit Cedille', 'l mit Cedille', 'l mit Cedille']);
  this.executeCharTest('ľ', ['l mit Caron', 'l mit Caron', 'l mit Caron']);
  this.executeCharTest('ŀ', ['l mit Punkt in der Mitte', 'l mit Punkt in der Mitte', 'l mit Punkt in der Mitte']);
  this.executeCharTest('ń', ['n mit Aigu', 'n mit Aigu', 'n mit Aigu']);
  this.executeCharTest('ņ', ['n mit Cedille', 'n mit Cedille', 'n mit Cedille']);
  this.executeCharTest('ň', ['n mit Caron', 'n mit Caron', 'n mit Caron']);
  this.executeCharTest('ō', ['o mit Makron', 'o mit Makron', 'o mit Makron']);
  this.executeCharTest('ŏ', ['o mit Breve', 'o mit Breve', 'o mit Breve']);
  this.executeCharTest('ő', ['o mit doppeltem Aigu', 'o mit doppeltem Aigu', 'o mit doppeltem Aigu']);
  this.executeCharTest('ŕ', ['r mit Aigu', 'r mit Aigu', 'r mit Aigu']);
  this.executeCharTest('ŗ', ['r mit Cedille', 'r mit Cedille', 'r mit Cedille']);
  this.executeCharTest('ř', ['r mit Caron', 'r mit Caron', 'r mit Caron']);
  this.executeCharTest('ś', ['s mit Aigu', 's mit Aigu', 's mit Aigu']);
  this.executeCharTest('ŝ', ['s mit Zirkumflex', 's mit Zirkumflex', 's mit Zirkumflex']);
  this.executeCharTest('ş', ['s mit Cedille', 's mit Cedille', 's mit Cedille']);
  this.executeCharTest('š', ['s mit Caron', 's mit Caron', 's mit Caron']);
  this.executeCharTest('ţ', ['t mit Cedille', 't mit Cedille', 't mit Cedille']);
  this.executeCharTest('ť', ['t mit Caron', 't mit Caron', 't mit Caron']);
  this.executeCharTest('ũ', ['u mit Tilde', 'u mit Tilde', 'u mit Tilde']);
  this.executeCharTest('ū', ['u mit Makron', 'u mit Makron', 'u mit Makron']);
  this.executeCharTest('ŭ', ['u mit Breve', 'u mit Breve', 'u mit Breve']);
  this.executeCharTest('ů', ['u mit Ring darüber', 'u mit Ring darüber', 'u mit Ring darüber']);
  this.executeCharTest('ű', ['u mit doppeltem Aigu', 'u mit doppeltem Aigu', 'u mit doppeltem Aigu']);
  this.executeCharTest('ų', ['u mit Ogonek', 'u mit Ogonek', 'u mit Ogonek']);
  this.executeCharTest('ŵ', ['w mit Zirkumflex', 'w mit Zirkumflex', 'w mit Zirkumflex']);
  this.executeCharTest('ŷ', ['y mit Zirkumflex', 'y mit Zirkumflex', 'y mit Zirkumflex']);
  this.executeCharTest('ź', ['z mit Aigu', 'z mit Aigu', 'z mit Aigu']);
  this.executeCharTest('ż', ['z mit Punkt darüber', 'z mit Punkt darüber', 'z mit Punkt darüber']);
  this.executeCharTest('ž', ['z mit Caron', 'z mit Caron', 'z mit Caron']);
  this.executeCharTest('ǎ', ['a mit Caron', 'a mit Caron', 'a mit Caron']);
  this.executeCharTest('ǐ', ['i mit Caron', 'i mit Caron', 'i mit Caron']);
  this.executeCharTest('ǒ', ['o mit Caron', 'o mit Caron', 'o mit Caron']);
  this.executeCharTest('ǔ', ['u mit Caron', 'u mit Caron', 'u mit Caron']);
  this.executeCharTest('ǧ', ['g mit Caron', 'g mit Caron', 'g mit Caron']);
  this.executeCharTest('ǩ', ['k mit Caron', 'k mit Caron', 'k mit Caron']);
  this.executeCharTest('ǫ', ['o mit Ogonek', 'o mit Ogonek', 'o mit Ogonek']);
  this.executeCharTest('ǰ', ['j mit Caron', 'j mit Caron', 'j mit Caron']);
  this.executeCharTest('ǵ', ['g mit Aigu', 'g mit Aigu', 'g mit Aigu']);
  this.executeCharTest('ǹ', ['n mit Grab', 'n mit Grab', 'n mit Grab']);
  this.executeCharTest('ȁ', ['a mit Doppelgrab', 'a mit Doppelgrab', 'a mit Doppelgrab']);
  this.executeCharTest('ȃ', ['a mit umgekehrter Breve', 'a mit umgekehrter Breve', 'a mit umgekehrter Breve']);
  this.executeCharTest('ȅ', ['e mit Doppelgrab', 'e mit Doppelgrab', 'e mit Doppelgrab']);
  this.executeCharTest('ȇ', ['e mit umgekehrter Breve', 'e mit umgekehrter Breve', 'e mit umgekehrter Breve']);
  this.executeCharTest('ȉ', ['i mit Doppelgrab', 'i mit Doppelgrab', 'i mit Doppelgrab']);
  this.executeCharTest('ȋ', ['i mit umgekehrter Breve', 'i mit umgekehrter Breve', 'i mit umgekehrter Breve']);
  this.executeCharTest('ȍ', ['o mit Doppelgrab', 'o mit Doppelgrab', 'o mit Doppelgrab']);
  this.executeCharTest('ȏ', ['o mit umgekehrter Breve', 'o mit umgekehrter Breve', 'o mit umgekehrter Breve']);
  this.executeCharTest('ȑ', ['r mit Doppelgrab', 'r mit Doppelgrab', 'r mit Doppelgrab']);
  this.executeCharTest('ȓ', ['r mit umgekehrter Breve', 'r mit umgekehrter Breve', 'r mit umgekehrter Breve']);
  this.executeCharTest('ȕ', ['u mit Doppelgrab', 'u mit Doppelgrab', 'u mit Doppelgrab']);
  this.executeCharTest('ȗ', ['u mit umgekehrter Breve', 'u mit umgekehrter Breve', 'u mit umgekehrter Breve']);
  this.executeCharTest('ș', ['s mit untenstehendem Komma', 's mit untenstehendem Komma', 's mit untenstehendem Komma']);
  this.executeCharTest('ț', ['t mit untenstehendem Komma', 't mit untenstehendem Komma', 't mit untenstehendem Komma']);
  this.executeCharTest('ȟ', ['h mit Caron', 'h mit Caron', 'h mit Caron']);
  this.executeCharTest('ȧ', ['a mit Punkt oben', 'a mit Punkt oben', 'a mit Punkt oben']);
  this.executeCharTest('ȩ', ['e mit Cedilla', 'e mit Cedilla', 'e mit Cedilla']);
  this.executeCharTest('ȯ', ['o mit Punkt oben', 'o mit Punkt oben', 'o mit Punkt oben']);
  this.executeCharTest('ȳ', ['y mit Makron', 'y mit Makron', 'y mit Makron']);
  this.executeCharTest('ȷ', ['dotless J', 'dotless J', 'dotless J']);
  this.executeCharTest('ḁ', ['a mit Ring unten', 'a mit Ring unten', 'a mit Ring unten']);
  this.executeCharTest('ḃ', ['b mit Punkt oben', 'b mit Punkt oben', 'b mit Punkt oben']);
  this.executeCharTest('ḅ', ['b mit untenstehendem Punkt', 'b mit untenstehendem Punkt', 'b mit untenstehendem Punkt']);
  this.executeCharTest('ḇ', ['b mit Zeile darunter', 'b mit Zeile darunter', 'b mit Zeile darunter']);
  this.executeCharTest('ḋ', ['d mit Punkt oben', 'd mit Punkt oben', 'd mit Punkt oben']);
  this.executeCharTest('ḍ', ['d mit untenstehendem Punkt', 'd mit untenstehendem Punkt', 'd mit untenstehendem Punkt']);
  this.executeCharTest('ḏ', ['d mit Zeile darunter', 'd mit Zeile darunter', 'd mit Zeile darunter']);
  this.executeCharTest('ḑ', ['d mit Cedilla', 'd mit Cedilla', 'd mit Cedilla']);
  this.executeCharTest('ḓ', ['d mit darunterem Zirkumflex', 'd mit darunterem Zirkumflex', 'd mit darunterem Zirkumflex']);
  this.executeCharTest('ḙ', ['e mit darunterem Zirkumflex', 'e mit darunterem Zirkumflex', 'e mit darunterem Zirkumflex']);
  this.executeCharTest('ḛ', ['e mit darunterliegender Tilde', 'e mit darunterliegender Tilde', 'e mit darunterliegender Tilde']);
  this.executeCharTest('ḟ', ['f mit Punkt oben', 'f mit Punkt oben', 'f mit Punkt oben']);
  this.executeCharTest('ḡ', ['g mit Makron', 'g mit Makron', 'g mit Makron']);
  this.executeCharTest('ḣ', ['h mit Punkt oben', 'h mit Punkt oben', 'h mit Punkt oben']);
  this.executeCharTest('ḥ', ['h mit untenstehendem Punkt', 'h mit untenstehendem Punkt', 'h mit untenstehendem Punkt']);
  this.executeCharTest('ḧ', ['h mit Diärese', 'h mit Diärese', 'h mit Diärese']);
  this.executeCharTest('ḩ', ['h mit Cedilla', 'h mit Cedilla', 'h mit Cedilla']);
  this.executeCharTest('ḫ', ['h mit Breve unten', 'h mit Breve unten', 'h mit Breve unten']);
  this.executeCharTest('ḭ', ['i mit darunterliegender Tilde', 'i mit darunterliegender Tilde', 'i mit darunterliegender Tilde']);
  this.executeCharTest('ḱ', ['k mit Akut', 'k mit Akut', 'k mit Akut']);
  this.executeCharTest('ḳ', ['k mit untenstehendem Punkt', 'k mit untenstehendem Punkt', 'k mit untenstehendem Punkt']);
  this.executeCharTest('ḵ', ['k mit Zeile darunter', 'k mit Zeile darunter', 'k mit Zeile darunter']);
  this.executeCharTest('ḷ', ['l mit Punkt unten', 'l mit Punkt unten', 'l mit Punkt unten']);
  this.executeCharTest('ḻ', ['l mit Zeile darunter', 'l mit Zeile darunter', 'l mit Zeile darunter']);
  this.executeCharTest('ḽ', ['l mit darunterem Zirkumflex', 'l mit darunterem Zirkumflex', 'l mit darunterem Zirkumflex']);
  this.executeCharTest('ḿ', ['m mit Akut', 'm mit Akut', 'm mit Akut']);
  this.executeCharTest('ṁ', ['m mit Punkt oben', 'm mit Punkt oben', 'm mit Punkt oben']);
  this.executeCharTest('ṃ', ['m mit untenstehendem Punkt', 'm mit untenstehendem Punkt', 'm mit untenstehendem Punkt']);
  this.executeCharTest('ṅ', ['n mit Punkt oben', 'n mit Punkt oben', 'n mit Punkt oben']);
  this.executeCharTest('ṇ', ['n mit untenstehendem Punkt', 'n mit untenstehendem Punkt', 'n mit untenstehendem Punkt']);
  this.executeCharTest('ṉ', ['n mit Zeile darunter', 'n mit Zeile darunter', 'n mit Zeile darunter']);
  this.executeCharTest('ṋ', ['n mit darunterem Zirkumflex', 'n mit darunterem Zirkumflex', 'n mit darunterem Zirkumflex']);
  this.executeCharTest('ṕ', ['p mit Akut', 'p mit Akut', 'p mit Akut']);
  this.executeCharTest('ṗ', ['p mit Punkt oben', 'p mit Punkt oben', 'p mit Punkt oben']);
  this.executeCharTest('ṙ', ['r mit Punkt oben', 'r mit Punkt oben', 'r mit Punkt oben']);
  this.executeCharTest('ṛ', ['r mit untenstehendem Punkt', 'r mit untenstehendem Punkt', 'r mit untenstehendem Punkt']);
  this.executeCharTest('ṟ', ['r mit Zeile darunter', 'r mit Zeile darunter', 'r mit Zeile darunter']);
  this.executeCharTest('ṡ', ['s mit Punkt oben', 's mit Punkt oben', 's mit Punkt oben']);
  this.executeCharTest('ṣ', ['s mit untenstehendem Punkt', 's mit untenstehendem Punkt', 's mit untenstehendem Punkt']);
  this.executeCharTest('ṫ', ['t mit Punkt oben', 't mit Punkt oben', 't mit Punkt oben']);
  this.executeCharTest('ṭ', ['t mit untenstehendem Punkt', 't mit untenstehendem Punkt', 't mit untenstehendem Punkt']);
  this.executeCharTest('ṯ', ['t mit Zeile darunter', 't mit Zeile darunter', 't mit Zeile darunter']);
  this.executeCharTest('ṱ', ['t mit darunterem Zirkumflex', 't mit darunterem Zirkumflex', 't mit darunterem Zirkumflex']);
  this.executeCharTest('ṳ', ['u mit untenstehender Diärese', 'u mit untenstehender Diärese', 'u mit untenstehender Diärese']);
  this.executeCharTest('ṵ', ['u mit darunterliegender Tilde', 'u mit darunterliegender Tilde', 'u mit darunterliegender Tilde']);
  this.executeCharTest('ṷ', ['u mit darunterem Zirkumflex', 'u mit darunterem Zirkumflex', 'u mit darunterem Zirkumflex']);
  this.executeCharTest('ṽ', ['v mit Tilde', 'v mit Tilde', 'v mit Tilde']);
  this.executeCharTest('ṿ', ['v mit untenstehendem Punkt', 'v mit untenstehendem Punkt', 'v mit untenstehendem Punkt']);
  this.executeCharTest('ẁ', ['w mit Grab', 'w mit Grab', 'w mit Grab']);
  this.executeCharTest('ẃ', ['w mit Akut', 'w mit Akut', 'w mit Akut']);
  this.executeCharTest('ẅ', ['w mit Diärese', 'w mit Diärese', 'w mit Diärese']);
  this.executeCharTest('ẇ', ['w mit Punkt oben', 'w mit Punkt oben', 'w mit Punkt oben']);
  this.executeCharTest('ẉ', ['w mit Punkt unten', 'w mit Punkt unten', 'w mit Punkt unten']);
  this.executeCharTest('ẋ', ['x mit Punkt oben', 'x mit Punkt oben', 'x mit Punkt oben']);
  this.executeCharTest('ẍ', ['x mit Diärese', 'x mit Diärese', 'x mit Diärese']);
  this.executeCharTest('ẏ', ['y mit Punkt oben', 'y mit Punkt oben', 'y mit Punkt oben']);
  this.executeCharTest('ẑ', ['z mit Zirkumflex', 'z mit Zirkumflex', 'z mit Zirkumflex']);
  this.executeCharTest('ẓ', ['z mit untenstehendem Punkt', 'z mit untenstehendem Punkt', 'z mit untenstehendem Punkt']);
  this.executeCharTest('ẕ', ['z mit Zeile darunter', 'z mit Zeile darunter', 'z mit Zeile darunter']);
  this.executeCharTest('ẖ', ['h mit Zeile darunter', 'h mit Zeile darunter', 'h mit Zeile darunter']);
  this.executeCharTest('ẗ', ['t mit Diärese', 't mit Diärese', 't mit Diärese']);
  this.executeCharTest('ẘ', ['w mit Ring oben', 'w mit Ring oben', 'w mit Ring oben']);
  this.executeCharTest('ẙ', ['y mit Ring oben', 'y mit Ring oben', 'y mit Ring oben']);
  this.executeCharTest('ẚ', ['a mit rechtem Halbring', 'a mit rechtem Halbring', 'a mit rechtem Halbring']);
  this.executeCharTest('ạ', ['a mit Punkt unten', 'a mit Punkt unten', 'a mit Punkt unten']);
  this.executeCharTest('ả', ['a mit Haken oben', 'a mit Haken oben', 'a mit Haken oben']);
  this.executeCharTest('ẹ', ['e mit untenstehendem Punkt', 'e mit untenstehendem Punkt', 'e mit untenstehendem Punkt']);
  this.executeCharTest('ẻ', ['e mit Haken oben', 'e mit Haken oben', 'e mit Haken oben']);
  this.executeCharTest('ẽ', ['e mit Tilde', 'e mit Tilde', 'e mit Tilde']);
  this.executeCharTest('ỉ', ['i mit Haken oben', 'i mit Haken oben', 'i mit Haken oben']);
  this.executeCharTest('ị', ['i mit untenstehendem Punkt', 'i mit untenstehendem Punkt', 'i mit untenstehendem Punkt']);
  this.executeCharTest('ọ', ['o mit untenstehendem Punkt', 'o mit untenstehendem Punkt', 'o mit untenstehendem Punkt']);
  this.executeCharTest('ỏ', ['o mit Haken oben', 'o mit Haken oben', 'o mit Haken oben']);
  this.executeCharTest('ụ', ['u mit untenstehendem Punkt', 'u mit untenstehendem Punkt', 'u mit untenstehendem Punkt']);
  this.executeCharTest('ủ', ['u mit Haken oben', 'u mit Haken oben', 'u mit Haken oben']);
  this.executeCharTest('ỳ', ['y mit Grab', 'y mit Grab', 'y mit Grab']);
  this.executeCharTest('ỵ', ['y mit untenstehendem Punkt', 'y mit untenstehendem Punkt', 'y mit untenstehendem Punkt']);
  this.executeCharTest('ỷ', ['y mit Haken oben', 'y mit Haken oben', 'y mit Haken oben']);
  this.executeCharTest('ỹ', ['y mit Tilde', 'y mit Tilde', 'y mit Tilde']);
  this.executeCharTest('ͣ', ['kombinierendes a', 'kombinierendes a', 'kombinierendes a']);
  this.executeCharTest('ͤ', ['kombinierendes e', 'kombinierendes e', 'kombinierendes e']);
  this.executeCharTest('ͥ', ['kombinierendes i', 'kombinierendes i', 'kombinierendes i']);
  this.executeCharTest('ͦ', ['kombinierendes o', 'kombinierendes o', 'kombinierendes o']);
  this.executeCharTest('ͧ', ['kombinierendes u', 'kombinierendes u', 'kombinierendes u']);
  this.executeCharTest('ͨ', ['kombinierendes c', 'kombinierendes c', 'kombinierendes c']);
  this.executeCharTest('ͩ', ['kombinierendes d', 'kombinierendes d', 'kombinierendes d']);
  this.executeCharTest('ͪ', ['kombinierendes h', 'kombinierendes h', 'kombinierendes h']);
  this.executeCharTest('ͫ', ['kombinierendes m', 'kombinierendes m', 'kombinierendes m']);
  this.executeCharTest('ͬ', ['kombinierendes r', 'kombinierendes r', 'kombinierendes r']);
  this.executeCharTest('ͭ', ['kombinierendes t', 'kombinierendes t', 'kombinierendes t']);
  this.executeCharTest('ͮ', ['kombinierendes v', 'kombinierendes v', 'kombinierendes v']);
  this.executeCharTest('ͯ', ['kombinierendes x', 'kombinierendes x', 'kombinierendes x']);
  this.executeCharTest('ᵢ', ['tiefgestelltes i', 'tiefgestelltes i', 'tiefgestelltes i']);
  this.executeCharTest('ᵣ', ['tiefgestelltes r', 'tiefgestelltes r', 'tiefgestelltes r']);
  this.executeCharTest('ᵤ', ['tiefgestelltes u', 'tiefgestelltes u', 'tiefgestelltes u']);
  this.executeCharTest('ᵥ', ['tiefgestelltes v', 'tiefgestelltes v', 'tiefgestelltes v']);
  this.executeCharTest('᷊', ['tiefgestelltes r', 'tiefgestelltes r', 'tiefgestelltes r']);
  this.executeCharTest('ᷓ', ['kombinierendes oberes w', 'kombinierendes oberes w', 'kombinierendes oberes w']);
  this.executeCharTest('ᷔ', ['kombinierendes ae', 'kombinierendes ae', 'kombinierendes ae']);
  this.executeCharTest('ᷕ', ['kombinierendes ao', 'kombinierendes ao', 'kombinierendes ao']);
  this.executeCharTest('ᷖ', ['kombinierendes av', 'kombinierendes av', 'kombinierendes av']);
  this.executeCharTest('ᷗ', ['kombinierendes c mit Cedilla', 'kombinierendes c mit Cedilla', 'kombinierendes c mit Cedilla']);
  this.executeCharTest('ᷘ', ['kombinierendes insulares d', 'kombinierendes insulares d', 'kombinierendes insulares d']);
  this.executeCharTest('ᷙ', ['kombinierendes eth', 'kombinierendes eth', 'kombinierendes eth']);
  this.executeCharTest('ᷚ', ['kombinierendes g', 'kombinierendes g', 'kombinierendes g']);
  this.executeCharTest('ᷛ', ['kombinierendes Kapitälchen g', 'kombinierendes Kapitälchen g', 'kombinierendes Kapitälchen g']);
  this.executeCharTest('ᷜ', ['kombinierendes k', 'kombinierendes k', 'kombinierendes k']);
  this.executeCharTest('ᷝ', ['kombinierendes l', 'kombinierendes l', 'kombinierendes l']);
  this.executeCharTest('ᷞ', ['kombinierendes Kapitälchen L', 'kombinierendes Kapitälchen L', 'kombinierendes Kapitälchen L']);
  this.executeCharTest('ᷟ', ['kombinierendes Kapitälchen M', 'kombinierendes Kapitälchen M', 'kombinierendes Kapitälchen M']);
  this.executeCharTest('ᷠ', ['kombinierendes n', 'kombinierendes n', 'kombinierendes n']);
  this.executeCharTest('ᷡ', ['kombinierendes Kapitälchen N', 'kombinierendes Kapitälchen N', 'kombinierendes Kapitälchen N']);
  this.executeCharTest('ᷢ', ['kombinierendes lateinisches Kapitälchen R', 'kombinierendes lateinisches Kapitälchen R', 'kombinierendes lateinisches Kapitälchen R']);
  this.executeCharTest('ᷣ', ['kombinierendes r rotunda', 'kombinierendes r rotunda', 'kombinierendes r rotunda']);
  this.executeCharTest('ᷤ', ['kombinierendes s', 'kombinierendes s', 'kombinierendes s']);
  this.executeCharTest('ᷥ', ['kombinierendes langes s', 'kombinierendes langes s', 'kombinierendes langes s']);
  this.executeCharTest('ᷦ', ['kombinierendes z', 'kombinierendes z', 'kombinierendes z']);
  this.executeCharTest('ⁱ', ['hochgestelltes i', 'hochgestelltes i', 'hochgestelltes i']);
  this.executeCharTest('ⁿ', ['hochgestelltes n', 'hochgestelltes n', 'hochgestelltes n']);
  this.executeCharTest('ₐ', ['tiefgestelltes a', 'tiefgestelltes a', 'tiefgestelltes a']);
  this.executeCharTest('ₑ', ['tiefgestelltes e', 'tiefgestelltes e', 'tiefgestelltes e']);
  this.executeCharTest('ₒ', ['tiefgestelltes o', 'tiefgestelltes o', 'tiefgestelltes o']);
  this.executeCharTest('ₓ', ['tiefgestelltes x', 'tiefgestelltes x', 'tiefgestelltes x']);
  this.executeCharTest('ₔ', ['tiefgestelltes schwa', 'tiefgestelltes schwa', 'tiefgestelltes schwa']);
  this.executeCharTest('ₕ', ['tiefgestelltes h', 'tiefgestelltes h', 'tiefgestelltes h']);
  this.executeCharTest('ₖ', ['tiefgestelltes k', 'tiefgestelltes k', 'tiefgestelltes k']);
  this.executeCharTest('ₗ', ['tiefgestelltes l', 'tiefgestelltes l', 'tiefgestelltes l']);
  this.executeCharTest('ₘ', ['tiefgestelltes m', 'tiefgestelltes m', 'tiefgestelltes m']);
  this.executeCharTest('ₙ', ['tiefgestelltes n', 'tiefgestelltes n', 'tiefgestelltes n']);
  this.executeCharTest('ₚ', ['tiefgestelltes p', 'tiefgestelltes p', 'tiefgestelltes p']);
  this.executeCharTest('ₛ', ['tiefgestelltes s', 'tiefgestelltes s', 'tiefgestelltes s']);
  this.executeCharTest('ₜ', ['tiefgestelltes t', 'tiefgestelltes t', 'tiefgestelltes t']);
  this.executeCharTest('ⱼ', ['tiefgestelltes j', 'tiefgestelltes j', 'tiefgestelltes j']);
  this.executeCharTest('🄪', ['groß S in stumpfen Klammern', 'groß S in stumpfen Klammern', 'groß S in stumpfen Klammern']);
  this.executeCharTest('🄫', ['eingekreistes kursives groß C', 'eingekreistes kursives groß C', 'eingekreistes kursives groß C']);
  this.executeCharTest('🄬', ['eingekreistes kursives groß R', 'eingekreistes kursives groß R', 'eingekreistes kursives groß R']);
  this.executeCharTest('🆊', ['durchgestrichenes P auf schwarzen Quadrat', 'durchgestrichenes P auf schwarzen Quadrat', 'durchgestrichenes P auf schwarzen Quadrat']);
  this.executeCharTest('Ǖ', ['groß U mit Diärese und Makron', 'groß U mit Diärese und Makron', 'groß U mit Diärese und Makron']);
  this.executeCharTest('Ǘ', ['groß U mit Diärese und Akut', 'groß U mit Diärese und Akut', 'groß U mit Diärese und Akut']);
  this.executeCharTest('Ǚ', ['groß U mit Diärese und Caron', 'groß U mit Diärese und Caron', 'groß U mit Diärese und Caron']);
  this.executeCharTest('Ǜ', ['groß U mit Diärese und Grab', 'groß U mit Diärese und Grab', 'groß U mit Diärese und Grab']);
  this.executeCharTest('Ǟ', ['groß A mit Diärese und Makron', 'groß A mit Diärese und Makron', 'groß A mit Diärese und Makron']);
  this.executeCharTest('Ǡ', ['groß A mit Dot Above und Makron', 'groß A mit Dot Above und Makron', 'groß A mit Dot Above und Makron']);
  this.executeCharTest('Ǭ', ['groß O mit Ogonek und Makron', 'groß O mit Ogonek und Makron', 'groß O mit Ogonek und Makron']);
  this.executeCharTest('Ǻ', ['groß A mit Ring oben und akut', 'groß A mit Ring oben und akut', 'groß A mit Ring oben und akut']);
  this.executeCharTest('Ȫ', ['groß O mit Diärese und Makron', 'groß O mit Diärese und Makron', 'groß O mit Diärese und Makron']);
  this.executeCharTest('Ȭ', ['groß O mit Tilde und Makron', 'groß O mit Tilde und Makron', 'groß O mit Tilde und Makron']);
  this.executeCharTest('Ȱ', ['groß O mit Punkt oben und Makron', 'groß O mit Punkt oben und Makron', 'groß O mit Punkt oben und Makron']);
  this.executeCharTest('Ḉ', ['groß C mit Cedilla und Akut', 'groß C mit Cedilla und Akut', 'groß C mit Cedilla und Akut']);
  this.executeCharTest('Ḕ', ['groß E mit Makron und Grab', 'groß E mit Makron und Grab', 'groß E mit Makron und Grab']);
  this.executeCharTest('Ḗ', ['groß E mit Makron und Akut', 'groß E mit Makron und Akut', 'groß E mit Makron und Akut']);
  this.executeCharTest('Ḝ', ['groß E mit Cedilla und Breve', 'groß E mit Cedilla und Breve', 'groß E mit Cedilla und Breve']);
  this.executeCharTest('Ḯ', ['groß I mit Diärese und Akut', 'groß I mit Diärese und Akut', 'groß I mit Diärese und Akut']);
  this.executeCharTest('Ḹ', ['groß L mit Dot Below und Makron', 'groß L mit Dot Below und Makron', 'groß L mit Dot Below und Makron']);
  this.executeCharTest('Ṍ', ['groß O mit Tilde und Akut', 'groß O mit Tilde und Akut', 'groß O mit Tilde und Akut']);
  this.executeCharTest('Ṏ', ['groß O mit Tilde und Diärese', 'groß O mit Tilde und Diärese', 'groß O mit Tilde und Diärese']);
  this.executeCharTest('Ṑ', ['groß O mit Makron und Grab', 'groß O mit Makron und Grab', 'groß O mit Makron und Grab']);
  this.executeCharTest('Ṓ', ['groß O mit Makron und Akut', 'groß O mit Makron und Akut', 'groß O mit Makron und Akut']);
  this.executeCharTest('Ṝ', ['groß R mit Punkt unten und Makron', 'groß R mit Punkt unten und Makron', 'groß R mit Punkt unten und Makron']);
  this.executeCharTest('Ṥ', ['groß S mit Akute und Punkt oben', 'groß S mit Akute und Punkt oben', 'groß S mit Akute und Punkt oben']);
  this.executeCharTest('Ṧ', ['groß S mit Caron und Punkt oben', 'groß S mit Caron und Punkt oben', 'groß S mit Caron und Punkt oben']);
  this.executeCharTest('Ṩ', ['groß S mit untenstehendem Punkt und oben stehendem Punkt', 'groß S mit untenstehendem Punkt und oben stehendem Punkt', 'groß S mit untenstehendem Punkt und oben stehendem Punkt']);
  this.executeCharTest('Ṹ', ['groß U mit Tilde und Akut', 'groß U mit Tilde und Akut', 'groß U mit Tilde und Akut']);
  this.executeCharTest('Ṻ', ['groß U mit Makron und Diärese', 'groß U mit Makron und Diärese', 'groß U mit Makron und Diärese']);
  this.executeCharTest('Ấ', ['groß A mit Zirkumflex und Akut', 'groß A mit Zirkumflex und Akut', 'groß A mit Zirkumflex und Akut']);
  this.executeCharTest('Ầ', ['groß A mit Zirkumflex und Grab', 'groß A mit Zirkumflex und Grab', 'groß A mit Zirkumflex und Grab']);
  this.executeCharTest('Ẩ', ['groß A mit Zirkumflex und Haken oben', 'groß A mit Zirkumflex und Haken oben', 'groß A mit Zirkumflex und Haken oben']);
  this.executeCharTest('Ẫ', ['groß A mit Circumflex und Tilde', 'groß A mit Circumflex und Tilde', 'groß A mit Circumflex und Tilde']);
  this.executeCharTest('Ậ', ['groß A mit Zirkumflex und Punkt darunter', 'groß A mit Zirkumflex und Punkt darunter', 'groß A mit Zirkumflex und Punkt darunter']);
  this.executeCharTest('Ắ', ['groß A mit Breve und Akut', 'groß A mit Breve und Akut', 'groß A mit Breve und Akut']);
  this.executeCharTest('Ằ', ['groß A mit Breve und Grab', 'groß A mit Breve und Grab', 'groß A mit Breve und Grab']);
  this.executeCharTest('Ẳ', ['groß A mit Breve und Hook oben', 'groß A mit Breve und Hook oben', 'groß A mit Breve und Hook oben']);
  this.executeCharTest('Ẵ', ['groß A mit Breve und Tilde', 'groß A mit Breve und Tilde', 'groß A mit Breve und Tilde']);
  this.executeCharTest('Ặ', ['groß A mit Breve und Dot Below', 'groß A mit Breve und Dot Below', 'groß A mit Breve und Dot Below']);
  this.executeCharTest('Ế', ['groß E mit Zirkumflex und Akut', 'groß E mit Zirkumflex und Akut', 'groß E mit Zirkumflex und Akut']);
  this.executeCharTest('Ề', ['groß E mit Zirkumflex und Grab', 'groß E mit Zirkumflex und Grab', 'groß E mit Zirkumflex und Grab']);
  this.executeCharTest('Ể', ['groß E mit Zirkumflex und Haken oben', 'groß E mit Zirkumflex und Haken oben', 'groß E mit Zirkumflex und Haken oben']);
  this.executeCharTest('Ễ', ['groß E mit Zirkumflex und Tilde', 'groß E mit Zirkumflex und Tilde', 'groß E mit Zirkumflex und Tilde']);
  this.executeCharTest('Ệ', ['groß E mit Zirkumflex und Punkt darunter', 'groß E mit Zirkumflex und Punkt darunter', 'groß E mit Zirkumflex und Punkt darunter']);
  this.executeCharTest('Ố', ['groß O mit Circumflex und Akut', 'groß O mit Circumflex und Akut', 'groß O mit Circumflex und Akut']);
  this.executeCharTest('Ồ', ['groß O mit Zirkumflex und Grab', 'groß O mit Zirkumflex und Grab', 'groß O mit Zirkumflex und Grab']);
  this.executeCharTest('Ổ', ['groß O mit Zirkumflex und Haken oben', 'groß O mit Zirkumflex und Haken oben', 'groß O mit Zirkumflex und Haken oben']);
  this.executeCharTest('Ỗ', ['groß O mit Zirkumflex und Tilde', 'groß O mit Zirkumflex und Tilde', 'groß O mit Zirkumflex und Tilde']);
  this.executeCharTest('Ộ', ['groß O mit Zirkumflex und Punkt darunter', 'groß O mit Zirkumflex und Punkt darunter', 'groß O mit Zirkumflex und Punkt darunter']);
  this.executeCharTest('Ớ', ['groß O mit Horn und Akut', 'groß O mit Horn und Akut', 'groß O mit Horn und Akut']);
  this.executeCharTest('Ờ', ['groß O mit Horn und Grab', 'groß O mit Horn und Grab', 'groß O mit Horn und Grab']);
  this.executeCharTest('Ở', ['groß O mit Horn und Haken oben', 'groß O mit Horn und Haken oben', 'groß O mit Horn und Haken oben']);
  this.executeCharTest('Ỡ', ['groß O mit Horn und Tilde', 'groß O mit Horn und Tilde', 'groß O mit Horn und Tilde']);
  this.executeCharTest('Ợ', ['groß O mit Horn und Punkt', 'groß O mit Horn und Punkt', 'groß O mit Horn und Punkt']);
  this.executeCharTest('Ứ', ['groß U mit Horn und Akut', 'groß U mit Horn und Akut', 'groß U mit Horn und Akut']);
  this.executeCharTest('Ừ', ['groß U mit Horn und Grab', 'groß U mit Horn und Grab', 'groß U mit Horn und Grab']);
  this.executeCharTest('Ử', ['groß U mit Horn und Haken oben', 'groß U mit Horn und Haken oben', 'groß U mit Horn und Haken oben']);
  this.executeCharTest('Ữ', ['groß U mit Horn und Tilde', 'groß U mit Horn und Tilde', 'groß U mit Horn und Tilde']);
  this.executeCharTest('Ự', ['groß U mit Horn und Punkt', 'groß U mit Horn und Punkt', 'groß U mit Horn und Punkt']);
  this.executeCharTest('À', ['groß A mit Gravis', 'groß A mit Gravis', 'groß A mit Gravis']);
  this.executeCharTest('Á', ['groß A mit Aigu', 'groß A mit Aigu', 'groß A mit Aigu']);
  this.executeCharTest('Â', ['groß A mit Zirkumflex', 'groß A mit Zirkumflex', 'groß A mit Zirkumflex']);
  this.executeCharTest('Ã', ['groß A mit Tilde', 'groß A mit Tilde', 'groß A mit Tilde']);
  this.executeCharTest('Ä', ['groß A mit Diärese', 'groß A mit Diärese', 'groß A mit Diärese']);
  this.executeCharTest('Å', ['groß A mit Ring darüber', 'groß A mit Ring darüber', 'groß A mit Ring darüber']);
  this.executeCharTest('Ç', ['groß C mit Cedille', 'groß C mit Cedille', 'groß C mit Cedille']);
  this.executeCharTest('È', ['groß E mit Gravis', 'groß E mit Gravis', 'groß E mit Gravis']);
  this.executeCharTest('É', ['groß E mit Aigu', 'groß E mit Aigu', 'groß E mit Aigu']);
  this.executeCharTest('Ê', ['groß E mit Zirkumflex', 'groß E mit Zirkumflex', 'groß E mit Zirkumflex']);
  this.executeCharTest('Ë', ['groß E mit Diärese', 'groß E mit Diärese', 'groß E mit Diärese']);
  this.executeCharTest('Ì', ['groß I mit Gravis', 'groß I mit Gravis', 'groß I mit Gravis']);
  this.executeCharTest('Í', ['groß I mit Aigu', 'groß I mit Aigu', 'groß I mit Aigu']);
  this.executeCharTest('Î', ['groß I mit Zirkumflex', 'groß I mit Zirkumflex', 'groß I mit Zirkumflex']);
  this.executeCharTest('Ï', ['groß I mit Diärese', 'groß I mit Diärese', 'groß I mit Diärese']);
  this.executeCharTest('Ñ', ['großes n mit Tilde', 'großes n mit Tilde', 'großes n mit Tilde']);
  this.executeCharTest('Ò', ['großes o mit Gravis', 'großes o mit Gravis', 'großes o mit Gravis']);
  this.executeCharTest('Ó', ['groß O mit Aigu', 'groß O mit Aigu', 'groß O mit Aigu']);
  this.executeCharTest('Ô', ['groß O mit Zirkumflex', 'groß O mit Zirkumflex', 'groß O mit Zirkumflex']);
  this.executeCharTest('Õ', ['groß O mit Tilde', 'groß O mit Tilde', 'groß O mit Tilde']);
  this.executeCharTest('Ö', ['groß O mit Diärese', 'groß O mit Diärese', 'groß O mit Diärese']);
  this.executeCharTest('Ù', ['groß U mit Gravis', 'groß U mit Gravis', 'groß U mit Gravis']);
  this.executeCharTest('Ú', ['groß U mit Aigu', 'groß U mit Aigu', 'groß U mit Aigu']);
  this.executeCharTest('Û', ['groß U mit Zirkumflex', 'groß U mit Zirkumflex', 'groß U mit Zirkumflex']);
  this.executeCharTest('Ü', ['groß U mit Diärese', 'groß U mit Diärese', 'groß U mit Diärese']);
  this.executeCharTest('Ý', ['groß Y mit Aigu', 'groß Y mit Aigu', 'groß Y mit Aigu']);
  this.executeCharTest('Ā', ['groß A mit Makron', 'groß A mit Makron', 'groß A mit Makron']);
  this.executeCharTest('Ă', ['groß A mit Breve', 'groß A mit Breve', 'groß A mit Breve']);
  this.executeCharTest('Ą', ['groß A mit Ogonek', 'groß A mit Ogonek', 'groß A mit Ogonek']);
  this.executeCharTest('Ć', ['groß C mit Aigu', 'groß C mit Aigu', 'groß C mit Aigu']);
  this.executeCharTest('Ĉ', ['groß C mit Zirkumflex', 'groß C mit Zirkumflex', 'groß C mit Zirkumflex']);
  this.executeCharTest('Ċ', ['groß C mit Punkt darüber', 'groß C mit Punkt darüber', 'groß C mit Punkt darüber']);
  this.executeCharTest('Č', ['groß C mit Caron', 'groß C mit Caron', 'groß C mit Caron']);
  this.executeCharTest('Ď', ['groß D mit Caron', 'groß D mit Caron', 'groß D mit Caron']);
  this.executeCharTest('Ē', ['groß E mit Makron', 'groß E mit Makron', 'groß E mit Makron']);
  this.executeCharTest('Ĕ', ['groß E mit Breve', 'groß E mit Breve', 'groß E mit Breve']);
  this.executeCharTest('Ė', ['groß E mit Punkt darüber', 'groß E mit Punkt darüber', 'groß E mit Punkt darüber']);
  this.executeCharTest('Ę', ['groß E mit Ogonek', 'groß E mit Ogonek', 'groß E mit Ogonek']);
  this.executeCharTest('Ě', ['groß E mit Caron', 'groß E mit Caron', 'groß E mit Caron']);
  this.executeCharTest('Ĝ', ['groß G mit Zirkumflex', 'groß G mit Zirkumflex', 'groß G mit Zirkumflex']);
  this.executeCharTest('Ğ', ['groß G mit Breve', 'groß G mit Breve', 'groß G mit Breve']);
  this.executeCharTest('Ġ', ['groß G mit Punkt darüber', 'groß G mit Punkt darüber', 'groß G mit Punkt darüber']);
  this.executeCharTest('Ģ', ['groß G mit Cedille', 'groß G mit Cedille', 'groß G mit Cedille']);
  this.executeCharTest('Ĥ', ['groß H mit Zirkumflex', 'groß H mit Zirkumflex', 'groß H mit Zirkumflex']);
  this.executeCharTest('Ĩ', ['groß I mit Tilde', 'groß I mit Tilde', 'groß I mit Tilde']);
  this.executeCharTest('Ī', ['groß I mit Makron', 'groß I mit Makron', 'groß I mit Makron']);
  this.executeCharTest('Ĭ', ['groß I mit Breve', 'groß I mit Breve', 'groß I mit Breve']);
  this.executeCharTest('Į', ['groß I mit Ogonek', 'groß I mit Ogonek', 'groß I mit Ogonek']);
  this.executeCharTest('İ', ['groß I mit Punkt darüber', 'groß I mit Punkt darüber', 'groß I mit Punkt darüber']);
  this.executeCharTest('Ĵ', ['groß J mit Zirkumflex', 'groß J mit Zirkumflex', 'groß J mit Zirkumflex']);
  this.executeCharTest('Ķ', ['groß K mit Cedille', 'groß K mit Cedille', 'groß K mit Cedille']);
  this.executeCharTest('Ĺ', ['groß L mit Aigu', 'groß L mit Aigu', 'groß L mit Aigu']);
  this.executeCharTest('Ļ', ['groß L mit Cedille', 'groß L mit Cedille', 'groß L mit Cedille']);
  this.executeCharTest('Ľ', ['groß L mit Caron', 'groß L mit Caron', 'groß L mit Caron']);
  this.executeCharTest('Ŀ', ['groß L mit Punkt in der Mitte', 'groß L mit Punkt in der Mitte', 'groß L mit Punkt in der Mitte']);
  this.executeCharTest('Ń', ['groß N mit Aigu', 'groß N mit Aigu', 'groß N mit Aigu']);
  this.executeCharTest('Ņ', ['groß N mit Cedille', 'groß N mit Cedille', 'groß N mit Cedille']);
  this.executeCharTest('Ň', ['groß N mit Caron', 'groß N mit Caron', 'groß N mit Caron']);
  this.executeCharTest('Ō', ['groß O mit Makron', 'groß O mit Makron', 'groß O mit Makron']);
  this.executeCharTest('Ŏ', ['groß O mit Breve', 'groß O mit Breve', 'groß O mit Breve']);
  this.executeCharTest('Ő', ['groß O mit doppeltem Aigu', 'groß O mit doppeltem Aigu', 'groß O mit doppeltem Aigu']);
  this.executeCharTest('Ŕ', ['groß R mit Aigu', 'groß R mit Aigu', 'groß R mit Aigu']);
  this.executeCharTest('Ŗ', ['groß R mit Cedille', 'groß R mit Cedille', 'groß R mit Cedille']);
  this.executeCharTest('Ř', ['groß R mit Caron', 'groß R mit Caron', 'groß R mit Caron']);
  this.executeCharTest('Ś', ['groß S mit Aigu', 'groß S mit Aigu', 'groß S mit Aigu']);
  this.executeCharTest('Ŝ', ['groß S mit Zirkumflex', 'groß S mit Zirkumflex', 'groß S mit Zirkumflex']);
  this.executeCharTest('Ş', ['groß S mit Cedille', 'groß S mit Cedille', 'groß S mit Cedille']);
  this.executeCharTest('Š', ['groß S mit Caron', 'groß S mit Caron', 'groß S mit Caron']);
  this.executeCharTest('Ţ', ['groß T mit Cedille', 'groß T mit Cedille', 'groß T mit Cedille']);
  this.executeCharTest('Ť', ['groß T mit Caron', 'groß T mit Caron', 'groß T mit Caron']);
  this.executeCharTest('Ũ', ['groß U mit Tilde', 'groß U mit Tilde', 'groß U mit Tilde']);
  this.executeCharTest('Ū', ['groß U mit Makron', 'groß U mit Makron', 'groß U mit Makron']);
  this.executeCharTest('Ŭ', ['groß U mit Breve', 'groß U mit Breve', 'groß U mit Breve']);
  this.executeCharTest('Ů', ['groß U mit Ring darüber', 'groß U mit Ring darüber', 'groß U mit Ring darüber']);
  this.executeCharTest('Ű', ['groß U mit dopppeltem Aigu', 'groß U mit dopppeltem Aigu', 'groß U mit dopppeltem Aigu']);
  this.executeCharTest('Ų', ['groß U mit Ogonek', 'groß U mit Ogonek', 'groß U mit Ogonek']);
  this.executeCharTest('Ŵ', ['groß W mit Zirkumflex', 'groß W mit Zirkumflex', 'groß W mit Zirkumflex']);
  this.executeCharTest('Ŷ', ['groß Y mit Zirkumflex', 'groß Y mit Zirkumflex', 'groß Y mit Zirkumflex']);
  this.executeCharTest('Ÿ', ['groß Y mit Diärese', 'groß Y mit Diärese', 'groß Y mit Diärese']);
  this.executeCharTest('Ź', ['groß Z mit Aigu', 'groß Z mit Aigu', 'groß Z mit Aigu']);
  this.executeCharTest('Ż', ['groß Z mit Punkt darüber', 'groß Z mit Punkt darüber', 'groß Z mit Punkt darüber']);
  this.executeCharTest('Ž', ['groß Z mit Caron', 'groß Z mit Caron', 'groß Z mit Caron']);
  this.executeCharTest('Ǎ', ['groß A mit Caron', 'groß A mit Caron', 'groß A mit Caron']);
  this.executeCharTest('Ǐ', ['groß I mit Caron', 'groß I mit Caron', 'groß I mit Caron']);
  this.executeCharTest('Ǒ', ['groß O mit Caron', 'groß O mit Caron', 'groß O mit Caron']);
  this.executeCharTest('Ǔ', ['groß U mit Caron', 'groß U mit Caron', 'groß U mit Caron']);
  this.executeCharTest('Ǧ', ['groß G mit Caron', 'groß G mit Caron', 'groß G mit Caron']);
  this.executeCharTest('Ǩ', ['groß K mit Caron', 'groß K mit Caron', 'groß K mit Caron']);
  this.executeCharTest('Ǫ', ['groß O mit Ogonek', 'groß O mit Ogonek', 'groß O mit Ogonek']);
  this.executeCharTest('Ǵ', ['groß G mit Akut', 'groß G mit Akut', 'groß G mit Akut']);
  this.executeCharTest('Ǹ', ['groß N mit Gravis', 'groß N mit Gravis', 'groß N mit Gravis']);
  this.executeCharTest('Ȁ', ['groß A mit Doppelgravis', 'groß A mit Doppelgravis', 'groß A mit Doppelgravis']);
  this.executeCharTest('Ȃ', ['groß A mit umgekehrter Breve', 'groß A mit umgekehrter Breve', 'groß A mit umgekehrter Breve']);
  this.executeCharTest('Ȅ', ['groß E mit Doppelgravis', 'groß E mit Doppelgravis', 'groß E mit Doppelgravis']);
  this.executeCharTest('Ȇ', ['groß E mit umgekehrter Breve', 'groß E mit umgekehrter Breve', 'groß E mit umgekehrter Breve']);
  this.executeCharTest('Ȉ', ['groß I mit Doppelgravis', 'groß I mit Doppelgravis', 'groß I mit Doppelgravis']);
  this.executeCharTest('Ȋ', ['groß I mit umgekehrter Breve', 'groß I mit umgekehrter Breve', 'groß I mit umgekehrter Breve']);
  this.executeCharTest('Ȍ', ['groß O mit Doppelgravis', 'groß O mit Doppelgravis', 'groß O mit Doppelgravis']);
  this.executeCharTest('Ȏ', ['groß O mit umgekehrter Breve', 'groß O mit umgekehrter Breve', 'groß O mit umgekehrter Breve']);
  this.executeCharTest('Ȑ', ['groß R mit Doppelgravis', 'groß R mit Doppelgravis', 'groß R mit Doppelgravis']);
  this.executeCharTest('Ȓ', ['groß R mit umgekehrter Breve', 'groß R mit umgekehrter Breve', 'groß R mit umgekehrter Breve']);
  this.executeCharTest('Ȕ', ['groß U mit Doppelgravis', 'groß U mit Doppelgravis', 'groß U mit Doppelgravis']);
  this.executeCharTest('Ȗ', ['groß U mit umgekehrter Breve', 'groß U mit umgekehrter Breve', 'groß U mit umgekehrter Breve']);
  this.executeCharTest('Ș', ['groß S mit untenstehendem Komma', 'groß S mit untenstehendem Komma', 'groß S mit untenstehendem Komma']);
  this.executeCharTest('Ț', ['groß T mit untenstehendem Komma', 'groß T mit untenstehendem Komma', 'groß T mit untenstehendem Komma']);
  this.executeCharTest('Ȟ', ['groß H mit Caron', 'groß H mit Caron', 'groß H mit Caron']);
  this.executeCharTest('Ȧ', ['groß A mit Punkt oben', 'groß A mit Punkt oben', 'groß A mit Punkt oben']);
  this.executeCharTest('Ȩ', ['groß E mit Cedilla', 'groß E mit Cedilla', 'groß E mit Cedilla']);
  this.executeCharTest('Ȯ', ['groß O mit Punkt oben', 'groß O mit Punkt oben', 'groß O mit Punkt oben']);
  this.executeCharTest('Ȳ', ['groß Y mit Makron', 'groß Y mit Makron', 'groß Y mit Makron']);
  this.executeCharTest('Ḁ', ['groß A mit Ring unten', 'groß A mit Ring unten', 'groß A mit Ring unten']);
  this.executeCharTest('Ḃ', ['groß B mit Punkt oben', 'groß B mit Punkt oben', 'groß B mit Punkt oben']);
  this.executeCharTest('Ḅ', ['groß B mit untenstehendem Punkt', 'groß B mit untenstehendem Punkt', 'groß B mit untenstehendem Punkt']);
  this.executeCharTest('Ḇ', ['groß B mit Zeile darunter', 'groß B mit Zeile darunter', 'groß B mit Zeile darunter']);
  this.executeCharTest('Ḋ', ['groß D mit Punkt oben', 'groß D mit Punkt oben', 'groß D mit Punkt oben']);
  this.executeCharTest('Ḍ', ['groß D mit untenstehendem Punkt', 'groß D mit untenstehendem Punkt', 'groß D mit untenstehendem Punkt']);
  this.executeCharTest('Ḏ', ['groß D mit Zeile darunter', 'groß D mit Zeile darunter', 'groß D mit Zeile darunter']);
  this.executeCharTest('Ḑ', ['groß D mit Cedilla', 'groß D mit Cedilla', 'groß D mit Cedilla']);
  this.executeCharTest('Ḓ', ['groß D mit darunterem Zirkumflex', 'groß D mit darunterem Zirkumflex', 'groß D mit darunterem Zirkumflex']);
  this.executeCharTest('Ḙ', ['groß E mit darunterem Zirkumflex', 'groß E mit darunterem Zirkumflex', 'groß E mit darunterem Zirkumflex']);
  this.executeCharTest('Ḛ', ['groß E mit darunterliegender Tilde', 'groß E mit darunterliegender Tilde', 'groß E mit darunterliegender Tilde']);
  this.executeCharTest('Ḟ', ['groß F mit Punkt oben', 'groß F mit Punkt oben', 'groß F mit Punkt oben']);
  this.executeCharTest('Ḡ', ['groß G mit Makron', 'groß G mit Makron', 'groß G mit Makron']);
  this.executeCharTest('Ḣ', ['groß H mit Punkt oben', 'groß H mit Punkt oben', 'groß H mit Punkt oben']);
  this.executeCharTest('Ḥ', ['groß H mit untenstehendem Punkt', 'groß H mit untenstehendem Punkt', 'groß H mit untenstehendem Punkt']);
  this.executeCharTest('Ḧ', ['groß H mit Diärese', 'groß H mit Diärese', 'groß H mit Diärese']);
  this.executeCharTest('Ḩ', ['groß H mit Cedilla', 'groß H mit Cedilla', 'groß H mit Cedilla']);
  this.executeCharTest('Ḫ', ['groß H mit Breve unten', 'groß H mit Breve unten', 'groß H mit Breve unten']);
  this.executeCharTest('Ḭ', ['groß I mit unten stehender Tilde', 'groß I mit unten stehender Tilde', 'groß I mit unten stehender Tilde']);
  this.executeCharTest('Ḱ', ['groß K mit Akut', 'groß K mit Akut', 'groß K mit Akut']);
  this.executeCharTest('Ḳ', ['groß K mit untenstehendem Punkt', 'groß K mit untenstehendem Punkt', 'groß K mit untenstehendem Punkt']);
  this.executeCharTest('Ḵ', ['groß K mit Zeile', 'groß K mit Zeile', 'groß K mit Zeile']);
  this.executeCharTest('Ḷ', ['groß L mit Punkt unten', 'groß L mit Punkt unten', 'groß L mit Punkt unten']);
  this.executeCharTest('Ḻ', ['groß L mit Zeile darunter', 'groß L mit Zeile darunter', 'groß L mit Zeile darunter']);
  this.executeCharTest('Ḽ', ['groß L mit darunterem Zirkumflex', 'groß L mit darunterem Zirkumflex', 'groß L mit darunterem Zirkumflex']);
  this.executeCharTest('Ḿ', ['groß M mit Akut', 'groß M mit Akut', 'groß M mit Akut']);
  this.executeCharTest('Ṁ', ['groß M mit Punkt oben', 'groß M mit Punkt oben', 'groß M mit Punkt oben']);
  this.executeCharTest('Ṃ', ['groß M mit untenstehendem Punkt', 'groß M mit untenstehendem Punkt', 'groß M mit untenstehendem Punkt']);
  this.executeCharTest('Ṅ', ['groß N mit Punkt oben', 'groß N mit Punkt oben', 'groß N mit Punkt oben']);
  this.executeCharTest('Ṇ', ['groß N mit untenstehendem Punkt', 'groß N mit untenstehendem Punkt', 'groß N mit untenstehendem Punkt']);
  this.executeCharTest('Ṉ', ['groß N mit Zeile darunter', 'groß N mit Zeile darunter', 'groß N mit Zeile darunter']);
  this.executeCharTest('Ṋ', ['groß N mit darunterem Zirkumflex', 'groß N mit darunterem Zirkumflex', 'groß N mit darunterem Zirkumflex']);
  this.executeCharTest('Ṕ', ['groß P mit Akut', 'groß P mit Akut', 'groß P mit Akut']);
  this.executeCharTest('Ṗ', ['groß P mit Punkt oben', 'groß P mit Punkt oben', 'groß P mit Punkt oben']);
  this.executeCharTest('Ṙ', ['groß R mit Punkt oben', 'groß R mit Punkt oben', 'groß R mit Punkt oben']);
  this.executeCharTest('Ṛ', ['groß R mit untenstehendem Punkt', 'groß R mit untenstehendem Punkt', 'groß R mit untenstehendem Punkt']);
  this.executeCharTest('Ṟ', ['groß R mit Zeile darunter', 'groß R mit Zeile darunter', 'groß R mit Zeile darunter']);
  this.executeCharTest('Ṡ', ['groß S mit Punkt oben', 'groß S mit Punkt oben', 'groß S mit Punkt oben']);
  this.executeCharTest('Ṣ', ['groß S mit untenstehendem Punkt', 'groß S mit untenstehendem Punkt', 'groß S mit untenstehendem Punkt']);
  this.executeCharTest('Ṫ', ['groß T mit Punkt oben', 'groß T mit Punkt oben', 'groß T mit Punkt oben']);
  this.executeCharTest('Ṭ', ['groß T mit untenstehendem Punkt', 'groß T mit untenstehendem Punkt', 'groß T mit untenstehendem Punkt']);
  this.executeCharTest('Ṯ', ['groß T mit Zeile darunter', 'groß T mit Zeile darunter', 'groß T mit Zeile darunter']);
  this.executeCharTest('Ṱ', ['groß T mit darunterem Zirkumflex', 'groß T mit darunterem Zirkumflex', 'groß T mit darunterem Zirkumflex']);
  this.executeCharTest('Ṳ', ['groß U mit untenstehender Diärese', 'groß U mit untenstehender Diärese', 'groß U mit untenstehender Diärese']);
  this.executeCharTest('Ṵ', ['groß U mit darunterliegender Tilde', 'groß U mit darunterliegender Tilde', 'groß U mit darunterliegender Tilde']);
  this.executeCharTest('Ṷ', ['groß U mit darunterem Zirkumflex', 'groß U mit darunterem Zirkumflex', 'groß U mit darunterem Zirkumflex']);
  this.executeCharTest('Ṽ', ['groß V mit Tilde', 'groß V mit Tilde', 'groß V mit Tilde']);
  this.executeCharTest('Ṿ', ['groß V mit untenstehendem Punkt', 'groß V mit untenstehendem Punkt', 'groß V mit untenstehendem Punkt']);
  this.executeCharTest('Ẁ', ['groß W mit Gravis', 'groß W mit Gravis', 'groß W mit Gravis']);
  this.executeCharTest('Ẃ', ['groß W mit Akut', 'groß W mit Akut', 'groß W mit Akut']);
  this.executeCharTest('Ẅ', ['groß W mit Diärese', 'groß W mit Diärese', 'groß W mit Diärese']);
  this.executeCharTest('Ẇ', ['groß W mit Punkt oben', 'groß W mit Punkt oben', 'groß W mit Punkt oben']);
  this.executeCharTest('Ẉ', ['groß W mit Punkt unten', 'groß W mit Punkt unten', 'groß W mit Punkt unten']);
  this.executeCharTest('Ẋ', ['groß X mit Punkt oben', 'groß X mit Punkt oben', 'groß X mit Punkt oben']);
  this.executeCharTest('Ẍ', ['groß X mit Diärese', 'groß X mit Diärese', 'groß X mit Diärese']);
  this.executeCharTest('Ẏ', ['groß Y mit Punkt oben', 'groß Y mit Punkt oben', 'groß Y mit Punkt oben']);
  this.executeCharTest('Ẑ', ['groß Z mit Zirkumflex', 'groß Z mit Zirkumflex', 'groß Z mit Zirkumflex']);
  this.executeCharTest('Ẓ', ['groß Z mit untenstehendem Punkt', 'groß Z mit untenstehendem Punkt', 'groß Z mit untenstehendem Punkt']);
  this.executeCharTest('Ẕ', ['groß Z mit Zeile darunter', 'groß Z mit Zeile darunter', 'groß Z mit Zeile darunter']);
  this.executeCharTest('Ạ', ['groß A mit Punkt unten', 'groß A mit Punkt unten', 'groß A mit Punkt unten']);
  this.executeCharTest('Ả', ['groß A mit Haken oben', 'groß A mit Haken oben', 'groß A mit Haken oben']);
  this.executeCharTest('Ẹ', ['groß E mit untenstehendem Punkt', 'groß E mit untenstehendem Punkt', 'groß E mit untenstehendem Punkt']);
  this.executeCharTest('Ẻ', ['groß E mit Haken oben', 'groß E mit Haken oben', 'groß E mit Haken oben']);
  this.executeCharTest('Ẽ', ['groß E mit Tilde', 'groß E mit Tilde', 'groß E mit Tilde']);
  this.executeCharTest('Ỉ', ['groß I mit Haken oben', 'groß I mit Haken oben', 'groß I mit Haken oben']);
  this.executeCharTest('Ị', ['groß I mit untenstehendem Punkt', 'groß I mit untenstehendem Punkt', 'groß I mit untenstehendem Punkt']);
  this.executeCharTest('Ọ', ['groß O mit untenstehendem Punkt', 'groß O mit untenstehendem Punkt', 'groß O mit untenstehendem Punkt']);
  this.executeCharTest('Ỏ', ['groß O mit Haken oben', 'groß O mit Haken oben', 'groß O mit Haken oben']);
  this.executeCharTest('Ụ', ['groß U mit untenstehendem Punkt', 'groß U mit untenstehendem Punkt', 'groß U mit untenstehendem Punkt']);
  this.executeCharTest('Ủ', ['groß U mit Haken oben', 'groß U mit Haken oben', 'groß U mit Haken oben']);
  this.executeCharTest('Ỳ', ['groß Y mit Gravis', 'groß Y mit Gravis', 'groß Y mit Gravis']);
  this.executeCharTest('Ỵ', ['groß Y mit untenstehendem Punkt', 'groß Y mit untenstehendem Punkt', 'groß Y mit untenstehendem Punkt']);
  this.executeCharTest('Ỷ', ['groß Y mit Haken oben', 'groß Y mit Haken oben', 'groß Y mit Haken oben']);
  this.executeCharTest('Ỹ', ['groß Y mit Tilde', 'groß Y mit Tilde', 'groß Y mit Tilde']);
  this.executeCharTest('⊾', ['rechter Winkel mit Bogen', 'rechter Winkel mit Bogen', 'rechter Winkel mit Bogen']);
  this.executeCharTest('⍼', ['rechter Winkel mit nach unten gerichtetem Zickzackpfeil', 'rechter Winkel mit nach unten gerichtetem Zickzackpfeil', 'rechter Winkel mit nach unten gerichtetem Zickzackpfeil']);
  this.executeCharTest('⟀', ['Dreidimensionaler Winkel', 'Dreidimensionaler Winkel', 'Dreidimensionaler Winkel']);
  this.executeCharTest('⦛', ['Gemessene Winkelöffnung links', 'Gemessene Winkelöffnung links', 'Gemessene Winkelöffnung links']);
  this.executeCharTest('⦜', ['Rechtwinklige Variante mit Quadrat', 'Rechtwinklige Variante mit Quadrat', 'Rechtwinklige Variante mit Quadrat']);
  this.executeCharTest('⦝', ['rechter Winkel mit Punkt gemessen', 'rechter Winkel mit Punkt gemessen', 'rechter Winkel mit Punkt gemessen']);
  this.executeCharTest('⦞', ['Winkel mit S nach innen', 'Winkel mit S nach innen', 'Winkel mit S nach innen']);
  this.executeCharTest('⦟', ['Spitzer Winkel', 'Spitzer Winkel', 'Spitzer Winkel']);
  this.executeCharTest('⦠', ['Sphärischer Öffnungswinkel nach links', 'Sphärischer Öffnungswinkel nach links', 'Sphärischer Öffnungswinkel nach links']);
  this.executeCharTest('⦡', ['Sphärischer Winkel, der sich öffnet', 'Sphärischer Winkel, der sich öffnet', 'Sphärischer Winkel, der sich öffnet']);
  this.executeCharTest('⦢', ['Gedrehter Winkel', 'Gedrehter Winkel', 'Gedrehter Winkel']);
  this.executeCharTest('⦣', ['Umgekehrter Winkel', 'Umgekehrter Winkel', 'Umgekehrter Winkel']);
  this.executeCharTest('⦤', ['Winkel mit Underbar', 'Winkel mit Underbar', 'Winkel mit Underbar']);
  this.executeCharTest('⦥', ['Umgekehrter Winkel mit Unterleiste', 'Umgekehrter Winkel mit Unterleiste', 'Umgekehrter Winkel mit Unterleiste']);
  this.executeCharTest('⦦', ['Schräger Winkel, der sich öffnet', 'Schräger Winkel, der sich öffnet', 'Schräger Winkel, der sich öffnet']);
  this.executeCharTest('⦧', ['Schräger Winkel, der sich nach unten öffnet', 'Schräger Winkel, der sich nach unten öffnet', 'Schräger Winkel, der sich nach unten öffnet']);
  this.executeCharTest('⦨', ['Gemessener Winkel mit offenem Arm endet im Pfeil nach oben und rechts', 'Gemessener Winkel mit offenem Arm endet im Pfeil nach oben und rechts', 'Gemessener Winkel mit offenem Arm endet im Pfeil nach oben und rechts']);
  this.executeCharTest('⦩', ['Gemessener Winkel mit offenem Arm und Pfeil nach oben und links', 'Gemessener Winkel mit offenem Arm und Pfeil nach oben und links', 'Gemessener Winkel mit offenem Arm und Pfeil nach oben und links']);
  this.executeCharTest('⦪', ['Gemessener Winkel mit offenem Arm endet im nach unten zeigenden Pfeil und rechts', 'Gemessener Winkel mit offenem Arm endet im nach unten zeigenden Pfeil und rechts', 'Gemessener Winkel mit offenem Arm endet im nach unten zeigenden Pfeil und rechts']);
  this.executeCharTest('⦫', ['Gemessener Winkel mit offenem Arm endet im nach unten zeigenden Pfeil', 'Gemessener Winkel mit offenem Arm endet im nach unten zeigenden Pfeil', 'Gemessener Winkel mit offenem Arm endet im nach unten zeigenden Pfeil']);
  this.executeCharTest('⦬', ['Gemessener Winkel mit offenem Arm endet im Pfeil nach rechts und oben', 'Gemessener Winkel mit offenem Arm endet im Pfeil nach rechts und oben', 'Gemessener Winkel mit offenem Arm endet im Pfeil nach rechts und oben']);
  this.executeCharTest('⦭', ['Gemessener Winkel mit offenem Arm endet im Pfeil nach links und oben', 'Gemessener Winkel mit offenem Arm endet im Pfeil nach links und oben', 'Gemessener Winkel mit offenem Arm endet im Pfeil nach links und oben']);
  this.executeCharTest('⦮', ['Gemessener Winkel mit offenem Arm endet im nach rechts und unten zeigenden Pfeil', 'Gemessener Winkel mit offenem Arm endet im nach rechts und unten zeigenden Pfeil', 'Gemessener Winkel mit offenem Arm endet im nach rechts und unten zeigenden Pfeil']);
  this.executeCharTest('⦯', ['Gemessener Winkel mit offenem Arm und Pfeil nach links und unten', 'Gemessener Winkel mit offenem Arm und Pfeil nach links und unten', 'Gemessener Winkel mit offenem Arm und Pfeil nach links und unten']);
  this.executeCharTest('←', ['Pfeil nach links', 'Pfeil nach links', 'Pfeil nach links']);
  this.executeCharTest('↑', ['Aufwärtspfeil', 'Aufwärtspfeil', 'Aufwärtspfeil']);
  this.executeCharTest('→', ['Pfeil nach rechts', 'Pfeil nach rechts', 'Pfeil nach rechts']);
  this.executeCharTest('↓', ['Pfeil nach unten', 'Pfeil nach unten', 'Pfeil nach unten']);
  this.executeCharTest('↔', ['Linker rechter Pfeil', 'Linker rechter Pfeil', 'Linker rechter Pfeil']);
  this.executeCharTest('↕', ['Pfeil nach oben', 'Pfeil nach oben', 'Pfeil nach oben']);
  this.executeCharTest('↖', ['Nordwestpfeil', 'Nordwestpfeil', 'Nordwestpfeil']);
  this.executeCharTest('↗', ['Nordostpfeil', 'Nordostpfeil', 'Nordostpfeil']);
  this.executeCharTest('↘', ['Südostpfeil', 'Südostpfeil', 'Südostpfeil']);
  this.executeCharTest('↙', ['Südwestpfeil', 'Südwestpfeil', 'Südwestpfeil']);
  this.executeCharTest('↚', ['Pfeil nach links mit Strich', 'Pfeil nach links mit Strich', 'Pfeil nach links mit Strich']);
  this.executeCharTest('↛', ['Pfeil nach rechts mit Strich', 'Pfeil nach rechts mit Strich', 'Pfeil nach rechts mit Strich']);
  this.executeCharTest('↜', ['Wellenpfeil nach links', 'Wellenpfeil nach links', 'Wellenpfeil nach links']);
  this.executeCharTest('↝', ['Wellenpfeil nach rechts', 'Wellenpfeil nach rechts', 'Wellenpfeil nach rechts']);
  this.executeCharTest('↞', ['Pfeil nach links mit zwei Spitzen', 'Pfeil nach links mit zwei Spitzen', 'Pfeil nach links mit zwei Spitzen']);
  this.executeCharTest('↟', ['Aufwärts zwei Pfeil nach unten', 'Aufwärts zwei Pfeil nach unten', 'Aufwärts zwei Pfeil nach unten']);
  this.executeCharTest('↠', ['Pfeil nach rechts mit zwei Köpfen', 'Pfeil nach rechts mit zwei Köpfen', 'Pfeil nach rechts mit zwei Köpfen']);
  this.executeCharTest('↡', ['Abwärts zwei Pfeil nach unten', 'Abwärts zwei Pfeil nach unten', 'Abwärts zwei Pfeil nach unten']);
  this.executeCharTest('↢', ['Pfeil nach links mit Schwanz', 'Pfeil nach links mit Schwanz', 'Pfeil nach links mit Schwanz']);
  this.executeCharTest('↣', ['Pfeil nach rechts mit Schwanz', 'Pfeil nach rechts mit Schwanz', 'Pfeil nach rechts mit Schwanz']);
  this.executeCharTest('↤', ['Pfeil nach links von der Bar', 'Pfeil nach links von der Bar', 'Pfeil nach links von der Bar']);
  this.executeCharTest('↥', ['Pfeil von der Bar nach oben', 'Pfeil von der Bar nach oben', 'Pfeil von der Bar nach oben']);
  this.executeCharTest('↦', ['Pfeil nach rechts von der Bar', 'Pfeil nach rechts von der Bar', 'Pfeil nach rechts von der Bar']);
  this.executeCharTest('↧', ['Pfeil von der Bar nach unten', 'Pfeil von der Bar nach unten', 'Pfeil von der Bar nach unten']);
  this.executeCharTest('↨', ['Pfeil nach unten mit Basis', 'Pfeil nach unten mit Basis', 'Pfeil nach unten mit Basis']);
  this.executeCharTest('↩', ['Pfeil nach links mit Haken', 'Pfeil nach links mit Haken', 'Pfeil nach links mit Haken']);
  this.executeCharTest('↪', ['Pfeil nach rechts mit Haken', 'Pfeil nach rechts mit Haken', 'Pfeil nach rechts mit Haken']);
  this.executeCharTest('↫', ['Pfeil nach links mit Schleife', 'Pfeil nach links mit Schleife', 'Pfeil nach links mit Schleife']);
  this.executeCharTest('↬', ['Pfeil nach rechts mit Schleife', 'Pfeil nach rechts mit Schleife', 'Pfeil nach rechts mit Schleife']);
  this.executeCharTest('↭', ['Linker rechter Wellenpfeil', 'Linker rechter Wellenpfeil', 'Linker rechter Wellenpfeil']);
  this.executeCharTest('↮', ['Linker rechter Pfeil mit Strich', 'Linker rechter Pfeil mit Strich', 'Linker rechter Pfeil mit Strich']);
  this.executeCharTest('↯', ['Zickzack-Pfeil nach unten', 'Zickzack-Pfeil nach unten', 'Zickzack-Pfeil nach unten']);
  this.executeCharTest('↰', ['Aufwärtspfeil mit Spitze nach links', 'Aufwärtspfeil mit Spitze nach links', 'Aufwärtspfeil mit Spitze nach links']);
  this.executeCharTest('↱', ['Aufwärtspfeil mit Spitze nach rechts', 'Aufwärtspfeil mit Spitze nach rechts', 'Aufwärtspfeil mit Spitze nach rechts']);
  this.executeCharTest('↲', ['Pfeil nach unten mit Spitze nach links', 'Pfeil nach unten mit Spitze nach links', 'Pfeil nach unten mit Spitze nach links']);
  this.executeCharTest('↳', ['Abwärtspfeil mit Spitze nach rechts', 'Abwärtspfeil mit Spitze nach rechts', 'Abwärtspfeil mit Spitze nach rechts']);
  this.executeCharTest('↴', ['Pfeil nach rechts mit Ecke nach unten', 'Pfeil nach rechts mit Ecke nach unten', 'Pfeil nach rechts mit Ecke nach unten']);
  this.executeCharTest('↵', ['Pfeil nach unten mit Ecke nach links', 'Pfeil nach unten mit Ecke nach links', 'Pfeil nach unten mit Ecke nach links']);
  this.executeCharTest('↶', ['Gegen den Uhrzeigersinn oberer halbkreisförmiger Pfeil', 'Gegen den Uhrzeigersinn oberer halbkreisförmiger Pfeil', 'Gegen den Uhrzeigersinn oberer halbkreisförmiger Pfeil']);
  this.executeCharTest('↷', ['Halbkreis im Uhrzeigersinn', 'Halbkreis im Uhrzeigersinn', 'Halbkreis im Uhrzeigersinn']);
  this.executeCharTest('↸', ['Nordwestpfeil zur langen Bar', 'Nordwestpfeil zur langen Bar', 'Nordwestpfeil zur langen Bar']);
  this.executeCharTest('↹', ['Pfeil nach links zum Überfahren Pfeil nach rechts zum Überfahren', 'Pfeil nach links zum Überfahren Pfeil nach rechts zum Überfahren', 'Pfeil nach links zum Überfahren Pfeil nach rechts zum Überfahren']);
  this.executeCharTest('↺', ['Offener Kreispfeil gegen den Uhrzeigersinn', 'Offener Kreispfeil gegen den Uhrzeigersinn', 'Offener Kreispfeil gegen den Uhrzeigersinn']);
  this.executeCharTest('↻', ['Kreispfeil im Uhrzeigersinn öffnen', 'Kreispfeil im Uhrzeigersinn öffnen', 'Kreispfeil im Uhrzeigersinn öffnen']);
  this.executeCharTest('⇄', ['Pfeil nach rechts über Pfeil nach links', 'Pfeil nach rechts über Pfeil nach links', 'Pfeil nach rechts über Pfeil nach links']);
  this.executeCharTest('⇅', ['Aufwärtspfeil nach links von Abwärtspfeil', 'Aufwärtspfeil nach links von Abwärtspfeil', 'Aufwärtspfeil nach links von Abwärtspfeil']);
  this.executeCharTest('⇆', ['Pfeil nach links über Pfeil nach rechts', 'Pfeil nach links über Pfeil nach rechts', 'Pfeil nach links über Pfeil nach rechts']);
  this.executeCharTest('⇇', ['Links gepaarte Pfeile', 'Links gepaarte Pfeile', 'Links gepaarte Pfeile']);
  this.executeCharTest('⇈', ['Aufwärts gepaarte Pfeile', 'Aufwärts gepaarte Pfeile', 'Aufwärts gepaarte Pfeile']);
  this.executeCharTest('⇉', ['Rechts gepaarte Pfeile', 'Rechts gepaarte Pfeile', 'Rechts gepaarte Pfeile']);
  this.executeCharTest('⇊', ['Abwärts gepaarte Pfeile', 'Abwärts gepaarte Pfeile', 'Abwärts gepaarte Pfeile']);
  this.executeCharTest('⇍', ['Doppelpfeil nach links mit Strich', 'Doppelpfeil nach links mit Strich', 'Doppelpfeil nach links mit Strich']);
  this.executeCharTest('⇎', ['Links Rechts Doppelpfeil mit Strich', 'Links Rechts Doppelpfeil mit Strich', 'Links Rechts Doppelpfeil mit Strich']);
  this.executeCharTest('⇏', ['Doppelpfeil nach rechts mit Strich', 'Doppelpfeil nach rechts mit Strich', 'Doppelpfeil nach rechts mit Strich']);
  this.executeCharTest('⇐', ['Doppelpfeil nach links', 'Doppelpfeil nach links', 'Doppelpfeil nach links']);
  this.executeCharTest('⇑', ['Doppelpfeil nach oben', 'Doppelpfeil nach oben', 'Doppelpfeil nach oben']);
  this.executeCharTest('⇒', ['Doppelpfeil nach rechts', 'Doppelpfeil nach rechts', 'Doppelpfeil nach rechts']);
  this.executeCharTest('⇓', ['Doppelpfeil nach unten', 'Doppelpfeil nach unten', 'Doppelpfeil nach unten']);
  this.executeCharTest('⇔', ['Linker rechter Doppelpfeil', 'Linker rechter Doppelpfeil', 'Linker rechter Doppelpfeil']);
  this.executeCharTest('⇕', ['Doppelpfeil nach unten', 'Doppelpfeil nach unten', 'Doppelpfeil nach unten']);
  this.executeCharTest('⇖', ['Nordwest-Doppelpfeil', 'Nordwest-Doppelpfeil', 'Nordwest-Doppelpfeil']);
  this.executeCharTest('⇗', ['Nordost-Doppelpfeil', 'Nordost-Doppelpfeil', 'Nordost-Doppelpfeil']);
  this.executeCharTest('⇘', ['Südost Doppelpfeil', 'Südost Doppelpfeil', 'Südost Doppelpfeil']);
  this.executeCharTest('⇙', ['Südwest-Doppelpfeil', 'Südwest-Doppelpfeil', 'Südwest-Doppelpfeil']);
  this.executeCharTest('⇚', ['Dreifacher Pfeil nach links', 'Dreifacher Pfeil nach links', 'Dreifacher Pfeil nach links']);
  this.executeCharTest('⇛', ['Dreifacher Pfeil nach rechts', 'Dreifacher Pfeil nach rechts', 'Dreifacher Pfeil nach rechts']);
  this.executeCharTest('⇜', ['Linker Squiggle-Pfeil', 'Linker Squiggle-Pfeil', 'Linker Squiggle-Pfeil']);
  this.executeCharTest('⇝', ['Nach rechts gekrümmter Pfeil', 'Nach rechts gekrümmter Pfeil', 'Nach rechts gekrümmter Pfeil']);
  this.executeCharTest('⇞', ['Aufwärtspfeil mit Doppelstrich', 'Aufwärtspfeil mit Doppelstrich', 'Aufwärtspfeil mit Doppelstrich']);
  this.executeCharTest('⇟', ['Abwärtspfeil mit Doppelstrich', 'Abwärtspfeil mit Doppelstrich', 'Abwärtspfeil mit Doppelstrich']);
  this.executeCharTest('⇠', ['Pfeil nach links nach links', 'Pfeil nach links nach links', 'Pfeil nach links nach links']);
  this.executeCharTest('⇡', ['Pfeil nach oben gestrichen', 'Pfeil nach oben gestrichen', 'Pfeil nach oben gestrichen']);
  this.executeCharTest('⇢', ['Rechts gestrichener Pfeil', 'Rechts gestrichener Pfeil', 'Rechts gestrichener Pfeil']);
  this.executeCharTest('⇣', ['Abwärts gestrichelter Pfeil', 'Abwärts gestrichelter Pfeil', 'Abwärts gestrichelter Pfeil']);
  this.executeCharTest('⇤', ['Pfeil nach links zur Bar', 'Pfeil nach links zur Bar', 'Pfeil nach links zur Bar']);
  this.executeCharTest('⇥', ['Pfeil nach rechts zur Bar', 'Pfeil nach rechts zur Bar', 'Pfeil nach rechts zur Bar']);
  this.executeCharTest('⇦', ['Weißer Pfeil nach links', 'Weißer Pfeil nach links', 'Weißer Pfeil nach links']);
  this.executeCharTest('⇧', ['Aufwärts weißer Pfeil', 'Aufwärts weißer Pfeil', 'Aufwärts weißer Pfeil']);
  this.executeCharTest('⇨', ['Rechts weißer Pfeil', 'Rechts weißer Pfeil', 'Rechts weißer Pfeil']);
  this.executeCharTest('⇩', ['Abwärts weißer Pfeil', 'Abwärts weißer Pfeil', 'Abwärts weißer Pfeil']);
  this.executeCharTest('⇪', ['Aufwärts weißer Pfeil von der Stange', 'Aufwärts weißer Pfeil von der Stange', 'Aufwärts weißer Pfeil von der Stange']);
  this.executeCharTest('⇫', ['Aufwärts weißer Pfeil auf Sockel', 'Aufwärts weißer Pfeil auf Sockel', 'Aufwärts weißer Pfeil auf Sockel']);
  this.executeCharTest('⇬', ['Aufwärts weißer Pfeil auf Sockel mit horizontaler Stange', 'Aufwärts weißer Pfeil auf Sockel mit horizontaler Stange', 'Aufwärts weißer Pfeil auf Sockel mit horizontaler Stange']);
  this.executeCharTest('⇭', ['Aufwärts weißer Pfeil auf Sockel mit vertikaler Stange', 'Aufwärts weißer Pfeil auf Sockel mit vertikaler Stange', 'Aufwärts weißer Pfeil auf Sockel mit vertikaler Stange']);
  this.executeCharTest('⇮', ['Aufwärts weißer Doppelpfeil', 'Aufwärts weißer Doppelpfeil', 'Aufwärts weißer Doppelpfeil']);
  this.executeCharTest('⇯', ['Aufwärts weißer doppelter Pfeil auf Sockel', 'Aufwärts weißer doppelter Pfeil auf Sockel', 'Aufwärts weißer doppelter Pfeil auf Sockel']);
  this.executeCharTest('⇰', ['Rechts weißer Pfeil von der Wand', 'Rechts weißer Pfeil von der Wand', 'Rechts weißer Pfeil von der Wand']);
  this.executeCharTest('⇱', ['Nordwestpfeil zur Ecke', 'Nordwestpfeil zur Ecke', 'Nordwestpfeil zur Ecke']);
  this.executeCharTest('⇲', ['Südostpfeil zur Ecke', 'Südostpfeil zur Ecke', 'Südostpfeil zur Ecke']);
  this.executeCharTest('⇳', ['Weißer Pfeil nach unten', 'Weißer Pfeil nach unten', 'Weißer Pfeil nach unten']);
  this.executeCharTest('⇴', ['rechter Pfeil mit kleinem Kreis', 'rechter Pfeil mit kleinem Kreis', 'rechter Pfeil mit kleinem Kreis']);
  this.executeCharTest('⇵', ['Abwärtspfeil nach links von Aufwärtspfeil', 'Abwärtspfeil nach links von Aufwärtspfeil', 'Abwärtspfeil nach links von Aufwärtspfeil']);
  this.executeCharTest('⇶', ['Drei nach rechts gerichtete Pfeile', 'Drei nach rechts gerichtete Pfeile', 'Drei nach rechts gerichtete Pfeile']);
  this.executeCharTest('⇷', ['Pfeil nach links mit vertikalem Strich', 'Pfeil nach links mit vertikalem Strich', 'Pfeil nach links mit vertikalem Strich']);
  this.executeCharTest('⇸', ['Pfeil nach rechts mit vertikalem Strich', 'Pfeil nach rechts mit vertikalem Strich', 'Pfeil nach rechts mit vertikalem Strich']);
  this.executeCharTest('⇹', ['Linker rechter Pfeil mit vertikalem Strich', 'Linker rechter Pfeil mit vertikalem Strich', 'Linker rechter Pfeil mit vertikalem Strich']);
  this.executeCharTest('⇺', ['Pfeil nach links mit doppeltem vertikalem Strich', 'Pfeil nach links mit doppeltem vertikalem Strich', 'Pfeil nach links mit doppeltem vertikalem Strich']);
  this.executeCharTest('⇻', ['Pfeil nach rechts mit doppeltem vertikalem Strich', 'Pfeil nach rechts mit doppeltem vertikalem Strich', 'Pfeil nach rechts mit doppeltem vertikalem Strich']);
  this.executeCharTest('⇼', ['Linker rechter Pfeil mit doppeltem vertikalem Strich', 'Linker rechter Pfeil mit doppeltem vertikalem Strich', 'Linker rechter Pfeil mit doppeltem vertikalem Strich']);
  this.executeCharTest('⇽', ['Pfeil nach links mit offenem Kopf', 'Pfeil nach links mit offenem Kopf', 'Pfeil nach links mit offenem Kopf']);
  this.executeCharTest('⇾', ['Pfeil nach rechts mit offenem Kopf', 'Pfeil nach rechts mit offenem Kopf', 'Pfeil nach rechts mit offenem Kopf']);
  this.executeCharTest('⇿', ['Linker rechter Pfeil mit offenem Kopf', 'Linker rechter Pfeil mit offenem Kopf', 'Linker rechter Pfeil mit offenem Kopf']);
  this.executeCharTest('⌁', ['Elektrischer Pfeil', 'Elektrischer Pfeil', 'Elektrischer Pfeil']);
  this.executeCharTest('⌃', ['Pfeil nach oben', 'Pfeil nach oben', 'Pfeil nach oben']);
  this.executeCharTest('⌄', ['Pfeil nach unten', 'Pfeil nach unten', 'Pfeil nach unten']);
  this.executeCharTest('⌤', ['Pfeilspitze zwischen zwei horizontalen Balken', 'Pfeilspitze zwischen zwei horizontalen Balken', 'Pfeilspitze zwischen zwei horizontalen Balken']);
  this.executeCharTest('⎋', ['Gebrochener Kreis mit Nordwestpfeil', 'Gebrochener Kreis mit Nordwestpfeil', 'Gebrochener Kreis mit Nordwestpfeil']);
  this.executeCharTest('➔', ['Schwerer, nach rechts gerichteter Pfeil nach rechts', 'Schwerer, nach rechts gerichteter Pfeil nach rechts', 'Schwerer, nach rechts gerichteter Pfeil nach rechts']);
  this.executeCharTest('➘', ['Schwerer Südostpfeil', 'Schwerer Südostpfeil', 'Schwerer Südostpfeil']);
  this.executeCharTest('➙', ['Schwerer Pfeil nach rechts', 'Schwerer Pfeil nach rechts', 'Schwerer Pfeil nach rechts']);
  this.executeCharTest('➚', ['Schwerer Nordostpfeil', 'Schwerer Nordostpfeil', 'Schwerer Nordostpfeil']);
  this.executeCharTest('➛', ['Zeichnungspunkt Pfeil nach rechts', 'Zeichnungspunkt Pfeil nach rechts', 'Zeichnungspunkt Pfeil nach rechts']);
  this.executeCharTest('➜', ['Schwerer runder Pfeil nach rechts', 'Schwerer runder Pfeil nach rechts', 'Schwerer runder Pfeil nach rechts']);
  this.executeCharTest('➝', ['Dreieckköpfiger Pfeil nach rechts', 'Dreieckköpfiger Pfeil nach rechts', 'Dreieckköpfiger Pfeil nach rechts']);
  this.executeCharTest('➞', ['Schwerer Dreieckspfeil nach rechts', 'Schwerer Dreieckspfeil nach rechts', 'Schwerer Dreieckspfeil nach rechts']);
  this.executeCharTest('➟', ['Dreieckköpfiger Pfeil nach rechts', 'Dreieckköpfiger Pfeil nach rechts', 'Dreieckköpfiger Pfeil nach rechts']);
  this.executeCharTest('➠', ['Schwerer, gestrichelter Dreieckspfeil nach rechts', 'Schwerer, gestrichelter Dreieckspfeil nach rechts', 'Schwerer, gestrichelter Dreieckspfeil nach rechts']);
  this.executeCharTest('➡', ['Schwarzer Pfeil nach rechts', 'Schwarzer Pfeil nach rechts', 'Schwarzer Pfeil nach rechts']);
  this.executeCharTest('➢', ['Dreidimensionale, nach oben beleuchtete Pfeilspitze', 'Dreidimensionale, nach oben beleuchtete Pfeilspitze', 'Dreidimensionale, nach oben beleuchtete Pfeilspitze']);
  this.executeCharTest('➣', ['Dreidimensionale, von unten beleuchtete Pfeilspitze nach rechts', 'Dreidimensionale, von unten beleuchtete Pfeilspitze nach rechts', 'Dreidimensionale, von unten beleuchtete Pfeilspitze nach rechts']);
  this.executeCharTest('➤', ['Schwarze Pfeilspitze nach rechts', 'Schwarze Pfeilspitze nach rechts', 'Schwarze Pfeilspitze nach rechts']);
  this.executeCharTest('➥', ['Schwerer schwarzer Pfeil nach unten und rechts gebogen', 'Schwerer schwarzer Pfeil nach unten und rechts gebogen', 'Schwerer schwarzer Pfeil nach unten und rechts gebogen']);
  this.executeCharTest('➦', ['Schwerer schwarzer Pfeil nach oben und rechts gebogen', 'Schwerer schwarzer Pfeil nach oben und rechts gebogen', 'Schwerer schwarzer Pfeil nach oben und rechts gebogen']);
  this.executeCharTest('➧', ['Schwarzer nach rechts gerichteter Pfeil', 'Schwarzer nach rechts gerichteter Pfeil', 'Schwarzer nach rechts gerichteter Pfeil']);
  this.executeCharTest('➨', ['Schwerer konkaver Spitze-Pfeil nach rechts', 'Schwerer konkaver Spitze-Pfeil nach rechts', 'Schwerer konkaver Spitze-Pfeil nach rechts']);
  this.executeCharTest('➩', ['Rechts geschatteter weißer Pfeil nach rechts', 'Rechts geschatteter weißer Pfeil nach rechts', 'Rechts geschatteter weißer Pfeil nach rechts']);
  this.executeCharTest('➪', ['Links schattierter weißer Pfeil nach rechts', 'Links schattierter weißer Pfeil nach rechts', 'Links schattierter weißer Pfeil nach rechts']);
  this.executeCharTest('➫', ['Zurückgekippter, beschatteter weißer Pfeil nach rechts', 'Zurückgekippter, beschatteter weißer Pfeil nach rechts', 'Zurückgekippter, beschatteter weißer Pfeil nach rechts']);
  this.executeCharTest('➬', ['Vorne geneigter, beschatteter weißer Pfeil nach rechts', 'Vorne geneigter, beschatteter weißer Pfeil nach rechts', 'Vorne geneigter, beschatteter weißer Pfeil nach rechts']);
  this.executeCharTest('➭', ['Schwerer unterer rechter Schatten mit weißem Pfeil nach rechts', 'Schwerer unterer rechter Schatten mit weißem Pfeil nach rechts', 'Schwerer unterer rechter Schatten mit weißem Pfeil nach rechts']);
  this.executeCharTest('➮', ['Schwerer oberer rechter Schatten mit weißem Pfeil nach rechts', 'Schwerer oberer rechter Schatten mit weißem Pfeil nach rechts', 'Schwerer oberer rechter Schatten mit weißem Pfeil nach rechts']);
  this.executeCharTest('➯', ['Gekerbter Pfeil nach rechts unten rechts', 'Gekerbter Pfeil nach rechts unten rechts', 'Gekerbter Pfeil nach rechts unten rechts']);
  this.executeCharTest('➱', ['Weißer Pfeil nach rechts oben gekerbt', 'Weißer Pfeil nach rechts oben gekerbt', 'Weißer Pfeil nach rechts oben gekerbt']);
  this.executeCharTest('➲', ['Eingekreister schwerer weißer Pfeil nach rechts', 'Eingekreister schwerer weißer Pfeil nach rechts', 'Eingekreister schwerer weißer Pfeil nach rechts']);
  this.executeCharTest('➳', ['Pfeil mit weißer Feder nach rechts', 'Pfeil mit weißer Feder nach rechts', 'Pfeil mit weißer Feder nach rechts']);
  this.executeCharTest('➴', ['Schwarz-gefiederter Südostpfeil', 'Schwarz-gefiederter Südostpfeil', 'Schwarz-gefiederter Südostpfeil']);
  this.executeCharTest('➵', ['Pfeil mit schwarzer Feder nach rechts', 'Pfeil mit schwarzer Feder nach rechts', 'Pfeil mit schwarzer Feder nach rechts']);
  this.executeCharTest('➶', ['Schwarzgefiederter Nordostpfeil', 'Schwarzgefiederter Nordostpfeil', 'Schwarzgefiederter Nordostpfeil']);
  this.executeCharTest('➷', ['Schwerer schwarzgefiederter Südostpfeil', 'Schwerer schwarzgefiederter Südostpfeil', 'Schwerer schwarzgefiederter Südostpfeil']);
  this.executeCharTest('➸', ['Schwerer schwarzgefiederter Pfeil nach rechts', 'Schwerer schwarzgefiederter Pfeil nach rechts', 'Schwerer schwarzgefiederter Pfeil nach rechts']);
  this.executeCharTest('➹', ['Schwerer schwarzgefiederter Nordostpfeil', 'Schwerer schwarzgefiederter Nordostpfeil', 'Schwerer schwarzgefiederter Nordostpfeil']);
  this.executeCharTest('➺', ['Teardrop-Barbed-Pfeil nach rechts', 'Teardrop-Barbed-Pfeil nach rechts', 'Teardrop-Barbed-Pfeil nach rechts']);
  this.executeCharTest('➻', ['Schwerer Tropfen-Pfeil nach rechts', 'Schwerer Tropfen-Pfeil nach rechts', 'Schwerer Tropfen-Pfeil nach rechts']);
  this.executeCharTest('➼', ['Keil-Schwanz nach rechts Pfeil', 'Keil-Schwanz nach rechts Pfeil', 'Keil-Schwanz nach rechts Pfeil']);
  this.executeCharTest('➽', ['Schwerer, nach rechts gekeilter Pfeil', 'Schwerer, nach rechts gekeilter Pfeil', 'Schwerer, nach rechts gekeilter Pfeil']);
  this.executeCharTest('➾', ['Offener Pfeil nach rechts', 'Offener Pfeil nach rechts', 'Offener Pfeil nach rechts']);
  this.executeCharTest('⟰', ['Vierfachpfeil nach oben', 'Vierfachpfeil nach oben', 'Vierfachpfeil nach oben']);
  this.executeCharTest('⟱', ['Vierfacher Pfeil nach unten', 'Vierfacher Pfeil nach unten', 'Vierfacher Pfeil nach unten']);
  this.executeCharTest('⟲', ['Kreispfeil gegen den Uhrzeigersinn', 'Kreispfeil gegen den Uhrzeigersinn', 'Kreispfeil gegen den Uhrzeigersinn']);
  this.executeCharTest('⟳', ['Kreispfeil im Uhrzeigersinn', 'Kreispfeil im Uhrzeigersinn', 'Kreispfeil im Uhrzeigersinn']);
  this.executeCharTest('⟴', ['rechter Pfeil mit Circled Plus', 'rechter Pfeil mit Circled Plus', 'rechter Pfeil mit Circled Plus']);
  this.executeCharTest('⟵', ['Langer Pfeil nach links', 'Langer Pfeil nach links', 'Langer Pfeil nach links']);
  this.executeCharTest('⟶', ['Langer Pfeil nach rechts', 'Langer Pfeil nach rechts', 'Langer Pfeil nach rechts']);
  this.executeCharTest('⟷', ['Langer linker rechter Pfeil', 'Langer linker rechter Pfeil', 'Langer linker rechter Pfeil']);
  this.executeCharTest('⟸', ['Langer Doppelpfeil nach links', 'Langer Doppelpfeil nach links', 'Langer Doppelpfeil nach links']);
  this.executeCharTest('⟹', ['Langer Doppelpfeil nach rechts', 'Langer Doppelpfeil nach rechts', 'Langer Doppelpfeil nach rechts']);
  this.executeCharTest('⟺', ['Langer linker rechter Doppelpfeil', 'Langer linker rechter Doppelpfeil', 'Langer linker rechter Doppelpfeil']);
  this.executeCharTest('⟻', ['Langer Pfeil nach links von der Bar', 'Langer Pfeil nach links von der Bar', 'Langer Pfeil nach links von der Bar']);
  this.executeCharTest('⟼', ['Langer Rechtspfeil von der Bar', 'Langer Rechtspfeil von der Bar', 'Langer Rechtspfeil von der Bar']);
  this.executeCharTest('⟽', ['Langer Doppelpfeil nach links von der Bar', 'Langer Doppelpfeil nach links von der Bar', 'Langer Doppelpfeil nach links von der Bar']);
  this.executeCharTest('⟾', ['Langer Doppelpfeil nach rechts von der Bar', 'Langer Doppelpfeil nach rechts von der Bar', 'Langer Doppelpfeil nach rechts von der Bar']);
  this.executeCharTest('⟿', ['Langer nach rechts gerichteter Squiggle-Pfeil', 'Langer nach rechts gerichteter Squiggle-Pfeil', 'Langer nach rechts gerichteter Squiggle-Pfeil']);
  this.executeCharTest('⤀', ['Pfeil nach rechts mit senkrechtem Strich', 'Pfeil nach rechts mit senkrechtem Strich', 'Pfeil nach rechts mit senkrechtem Strich']);
  this.executeCharTest('⤁', ['Zwei Pfeil nach rechts mit doppeltem vertikalem Strich', 'Zwei Pfeil nach rechts mit doppeltem vertikalem Strich', 'Zwei Pfeil nach rechts mit doppeltem vertikalem Strich']);
  this.executeCharTest('⤂', ['Doppelpfeil nach links mit vertikalem Strich', 'Doppelpfeil nach links mit vertikalem Strich', 'Doppelpfeil nach links mit vertikalem Strich']);
  this.executeCharTest('⤃', ['Doppelpfeil nach rechts mit vertikalem Strich', 'Doppelpfeil nach rechts mit vertikalem Strich', 'Doppelpfeil nach rechts mit vertikalem Strich']);
  this.executeCharTest('⤄', ['Linker rechter Doppelpfeil mit vertikalem Strich', 'Linker rechter Doppelpfeil mit vertikalem Strich', 'Linker rechter Doppelpfeil mit vertikalem Strich']);
  this.executeCharTest('⤅', ['Zwei Pfeil nach rechts von der Bar', 'Zwei Pfeil nach rechts von der Bar', 'Zwei Pfeil nach rechts von der Bar']);
  this.executeCharTest('⤆', ['Doppelpfeil nach links von der Bar', 'Doppelpfeil nach links von der Bar', 'Doppelpfeil nach links von der Bar']);
  this.executeCharTest('⤇', ['Doppelter Pfeil nach rechts von der Bar', 'Doppelter Pfeil nach rechts von der Bar', 'Doppelter Pfeil nach rechts von der Bar']);
  this.executeCharTest('⤈', ['Abwärtspfeil mit horizontalem Strich', 'Abwärtspfeil mit horizontalem Strich', 'Abwärtspfeil mit horizontalem Strich']);
  this.executeCharTest('⤉', ['Aufwärtspfeil mit horizontalem Anschlag', 'Aufwärtspfeil mit horizontalem Anschlag', 'Aufwärtspfeil mit horizontalem Anschlag']);
  this.executeCharTest('⤊', ['Dreifachpfeil nach oben', 'Dreifachpfeil nach oben', 'Dreifachpfeil nach oben']);
  this.executeCharTest('⤋', ['Dreifacher Pfeil nach unten', 'Dreifacher Pfeil nach unten', 'Dreifacher Pfeil nach unten']);
  this.executeCharTest('⤌', ['Doppelpfeil nach links', 'Doppelpfeil nach links', 'Doppelpfeil nach links']);
  this.executeCharTest('⤍', ['Doppelpfeil nach rechts', 'Doppelpfeil nach rechts', 'Doppelpfeil nach rechts']);
  this.executeCharTest('⤎', ['Dreifacher Strichpfeil nach links', 'Dreifacher Strichpfeil nach links', 'Dreifacher Strichpfeil nach links']);
  this.executeCharTest('⤏', ['Dreifacher Bindestrich nach rechts', 'Dreifacher Bindestrich nach rechts', 'Dreifacher Bindestrich nach rechts']);
  this.executeCharTest('⤐', ['Dreipoliger Pfeil nach rechts', 'Dreipoliger Pfeil nach rechts', 'Dreipoliger Pfeil nach rechts']);
  this.executeCharTest('⤑', ['Pfeil nach rechts mit gepunktetem Stamm', 'Pfeil nach rechts mit gepunktetem Stamm', 'Pfeil nach rechts mit gepunktetem Stamm']);
  this.executeCharTest('⤒', ['Aufwärtspfeil zur Bar', 'Aufwärtspfeil zur Bar', 'Aufwärtspfeil zur Bar']);
  this.executeCharTest('⤓', ['Abwärtspfeil zur Bar', 'Abwärtspfeil zur Bar', 'Abwärtspfeil zur Bar']);
  this.executeCharTest('⤔', ['Pfeil nach rechts mit Schwanz mit senkrechtem Anschlag', 'Pfeil nach rechts mit Schwanz mit senkrechtem Anschlag', 'Pfeil nach rechts mit Schwanz mit senkrechtem Anschlag']);
  this.executeCharTest('⤕', ['Pfeil nach rechts mit Schwanz mit doppeltem vertikalem Strich', 'Pfeil nach rechts mit Schwanz mit doppeltem vertikalem Strich', 'Pfeil nach rechts mit Schwanz mit doppeltem vertikalem Strich']);
  this.executeCharTest('⤖', ['Nach rechts gerichteter zweiköpfiger Pfeil mit Schwanz', 'Nach rechts gerichteter zweiköpfiger Pfeil mit Schwanz', 'Nach rechts gerichteter zweiköpfiger Pfeil mit Schwanz']);
  this.executeCharTest('⤗', ['Nach rechts gerichteter Doppelpfeil mit Schwanz mit senkrechtem Anschlag', 'Nach rechts gerichteter Doppelpfeil mit Schwanz mit senkrechtem Anschlag', 'Nach rechts gerichteter Doppelpfeil mit Schwanz mit senkrechtem Anschlag']);
  this.executeCharTest('⤘', ['Nach rechts gerichteter Doppelpfeil mit Schwanz mit doppeltem vertikalem Strich', 'Nach rechts gerichteter Doppelpfeil mit Schwanz mit doppeltem vertikalem Strich', 'Nach rechts gerichteter Doppelpfeil mit Schwanz mit doppeltem vertikalem Strich']);
  this.executeCharTest('⤙', ['Pfeil nach links nach links', 'Pfeil nach links nach links', 'Pfeil nach links nach links']);
  this.executeCharTest('⤚', ['Pfeil nach rechts nach rechts', 'Pfeil nach rechts nach rechts', 'Pfeil nach rechts nach rechts']);
  this.executeCharTest('⤛', ['Doppelter Pfeilschwanz nach links', 'Doppelter Pfeilschwanz nach links', 'Doppelter Pfeilschwanz nach links']);
  this.executeCharTest('⤜', ['Doppelter Pfeilschwanz nach rechts', 'Doppelter Pfeilschwanz nach rechts', 'Doppelter Pfeilschwanz nach rechts']);
  this.executeCharTest('⤝', ['Pfeil nach links zu Black Diamond', 'Pfeil nach links zu Black Diamond', 'Pfeil nach links zu Black Diamond']);
  this.executeCharTest('⤞', ['Pfeil nach rechts zu Black Diamond', 'Pfeil nach rechts zu Black Diamond', 'Pfeil nach rechts zu Black Diamond']);
  this.executeCharTest('⤟', ['Pfeil nach links von Bar zu Black Diamond', 'Pfeil nach links von Bar zu Black Diamond', 'Pfeil nach links von Bar zu Black Diamond']);
  this.executeCharTest('⤠', ['Pfeil nach rechts von Bar zu Black Diamond', 'Pfeil nach rechts von Bar zu Black Diamond', 'Pfeil nach rechts von Bar zu Black Diamond']);
  this.executeCharTest('⤡', ['Nordwest- und Südostpfeil', 'Nordwest- und Südostpfeil', 'Nordwest- und Südostpfeil']);
  this.executeCharTest('⤢', ['Nordost- und Südwestpfeil', 'Nordost- und Südwestpfeil', 'Nordost- und Südwestpfeil']);
  this.executeCharTest('⤣', ['Nordwestpfeil mit Haken', 'Nordwestpfeil mit Haken', 'Nordwestpfeil mit Haken']);
  this.executeCharTest('⤤', ['Nordostpfeil mit Haken', 'Nordostpfeil mit Haken', 'Nordostpfeil mit Haken']);
  this.executeCharTest('⤥', ['Südostpfeil mit Haken', 'Südostpfeil mit Haken', 'Südostpfeil mit Haken']);
  this.executeCharTest('⤦', ['Südwestpfeil mit Haken', 'Südwestpfeil mit Haken', 'Südwestpfeil mit Haken']);
  this.executeCharTest('⤧', ['Nordwestpfeil und Nordostpfeil', 'Nordwestpfeil und Nordostpfeil', 'Nordwestpfeil und Nordostpfeil']);
  this.executeCharTest('⤨', ['Nordostpfeil und Südostpfeil', 'Nordostpfeil und Südostpfeil', 'Nordostpfeil und Südostpfeil']);
  this.executeCharTest('⤩', ['Südostpfeil und Südwestpfeil', 'Südostpfeil und Südwestpfeil', 'Südostpfeil und Südwestpfeil']);
  this.executeCharTest('⤪', ['Südwestpfeil und Nordwestpfeil', 'Südwestpfeil und Nordwestpfeil', 'Südwestpfeil und Nordwestpfeil']);
  this.executeCharTest('⤭', ['Südostpfeil Kreuzung Nordostpfeil', 'Südostpfeil Kreuzung Nordostpfeil', 'Südostpfeil Kreuzung Nordostpfeil']);
  this.executeCharTest('⤮', ['Nordostpfeil Kreuzung Südostpfeil', 'Nordostpfeil Kreuzung Südostpfeil', 'Nordostpfeil Kreuzung Südostpfeil']);
  this.executeCharTest('⤯', ['Fallende Diagonale, die Nordostpfeil kreuzt', 'Fallende Diagonale, die Nordostpfeil kreuzt', 'Fallende Diagonale, die Nordostpfeil kreuzt']);
  this.executeCharTest('⤰', ['Steigende Diagonale, die Südostpfeil kreuzt', 'Steigende Diagonale, die Südostpfeil kreuzt', 'Steigende Diagonale, die Südostpfeil kreuzt']);
  this.executeCharTest('⤱', ['Nordostpfeilüberquerung Nordwestpfeil', 'Nordostpfeilüberquerung Nordwestpfeil', 'Nordostpfeilüberquerung Nordwestpfeil']);
  this.executeCharTest('⤲', ['Nordwestpfeilüberquerung Nordostpfeil', 'Nordwestpfeilüberquerung Nordostpfeil', 'Nordwestpfeilüberquerung Nordostpfeil']);
  this.executeCharTest('⤳', ['Wellenpfeil, der direkt nach rechts zeigt', 'Wellenpfeil, der direkt nach rechts zeigt', 'Wellenpfeil, der direkt nach rechts zeigt']);
  this.executeCharTest('⤴', ['Pfeil nach rechts, dann nach oben gekrümmt', 'Pfeil nach rechts, dann nach oben gekrümmt', 'Pfeil nach rechts, dann nach oben gekrümmt']);
  this.executeCharTest('⤵', ['Pfeil nach rechts, dann nach unten gekrümmt', 'Pfeil nach rechts, dann nach unten gekrümmt', 'Pfeil nach rechts, dann nach unten gekrümmt']);
  this.executeCharTest('⤶', ['Pfeil nach unten, dann nach links gekrümmt', 'Pfeil nach unten, dann nach links gekrümmt', 'Pfeil nach unten, dann nach links gekrümmt']);
  this.executeCharTest('⤷', ['Pfeil nach unten, dann nach rechts gekrümmt', 'Pfeil nach unten, dann nach rechts gekrümmt', 'Pfeil nach unten, dann nach rechts gekrümmt']);
  this.executeCharTest('⤸', ['Rechtsseitiger Bogen im Uhrzeigersinn', 'Rechtsseitiger Bogen im Uhrzeigersinn', 'Rechtsseitiger Bogen im Uhrzeigersinn']);
  this.executeCharTest('⤹', ['Bogen der linken Seite gegen den Uhrzeigersinn', 'Bogen der linken Seite gegen den Uhrzeigersinn', 'Bogen der linken Seite gegen den Uhrzeigersinn']);
  this.executeCharTest('⤺', ['Pfeil oben gegen den Uhrzeigersinn', 'Pfeil oben gegen den Uhrzeigersinn', 'Pfeil oben gegen den Uhrzeigersinn']);
  this.executeCharTest('⤻', ['Pfeil unten gegen den Uhrzeigersinn', 'Pfeil unten gegen den Uhrzeigersinn', 'Pfeil unten gegen den Uhrzeigersinn']);
  this.executeCharTest('⤼', ['Pfeil oben im Uhrzeigersinn mit Minus', 'Pfeil oben im Uhrzeigersinn mit Minus', 'Pfeil oben im Uhrzeigersinn mit Minus']);
  this.executeCharTest('⤽', ['Pfeil oben gegen den Uhrzeigersinn mit Plus', 'Pfeil oben gegen den Uhrzeigersinn mit Plus', 'Pfeil oben gegen den Uhrzeigersinn mit Plus']);
  this.executeCharTest('⤾', ['Rechts unten halbkreisförmig im Uhrzeigersinn', 'Rechts unten halbkreisförmig im Uhrzeigersinn', 'Rechts unten halbkreisförmig im Uhrzeigersinn']);
  this.executeCharTest('⤿', ['Linker halbkreisförmiger Pfeil gegen den Uhrzeigersinn', 'Linker halbkreisförmiger Pfeil gegen den Uhrzeigersinn', 'Linker halbkreisförmiger Pfeil gegen den Uhrzeigersinn']);
  this.executeCharTest('⥀', ['Geschlossener Kreispfeil gegen den Uhrzeigersinn', 'Geschlossener Kreispfeil gegen den Uhrzeigersinn', 'Geschlossener Kreispfeil gegen den Uhrzeigersinn']);
  this.executeCharTest('⥁', ['Geschlossener Kreispfeil im Uhrzeigersinn', 'Geschlossener Kreispfeil im Uhrzeigersinn', 'Geschlossener Kreispfeil im Uhrzeigersinn']);
  this.executeCharTest('⥂', ['Pfeil nach rechts über Kurzer Pfeil nach links', 'Pfeil nach rechts über Kurzer Pfeil nach links', 'Pfeil nach rechts über Kurzer Pfeil nach links']);
  this.executeCharTest('⥃', ['Pfeil nach links über Kurzer Pfeil nach rechts', 'Pfeil nach links über Kurzer Pfeil nach rechts', 'Pfeil nach links über Kurzer Pfeil nach rechts']);
  this.executeCharTest('⥄', ['Kurzer Pfeil nach rechts Über Pfeil nach links', 'Kurzer Pfeil nach rechts Über Pfeil nach links', 'Kurzer Pfeil nach rechts Über Pfeil nach links']);
  this.executeCharTest('⥅', ['Pfeil nach rechts mit Plus unten', 'Pfeil nach rechts mit Plus unten', 'Pfeil nach rechts mit Plus unten']);
  this.executeCharTest('⥆', ['Pfeil nach links mit Plus unten', 'Pfeil nach links mit Plus unten', 'Pfeil nach links mit Plus unten']);
  this.executeCharTest('⥇', ['Pfeil nach rechts durch X', 'Pfeil nach rechts durch X', 'Pfeil nach rechts durch X']);
  this.executeCharTest('⥈', ['Linker rechter Pfeil durch kleinen Kreis', 'Linker rechter Pfeil durch kleinen Kreis', 'Linker rechter Pfeil durch kleinen Kreis']);
  this.executeCharTest('⥉', ['Aufwärts zweiköpfiger Pfeil vom kleinen Kreis', 'Aufwärts zweiköpfiger Pfeil vom kleinen Kreis', 'Aufwärts zweiköpfiger Pfeil vom kleinen Kreis']);
  this.executeCharTest('⥰', ['round implies', 'round implies', 'round implies']);
  this.executeCharTest('⥱', ['Gleichheitszeichen über dem Pfeil nach rechts', 'Gleichheitszeichen über dem Pfeil nach rechts', 'Gleichheitszeichen über dem Pfeil nach rechts']);
  this.executeCharTest('⥲', ['Tilde-Operator über dem Pfeil nach rechts', 'Tilde-Operator über dem Pfeil nach rechts', 'Tilde-Operator über dem Pfeil nach rechts']);
  this.executeCharTest('⥳', ['Pfeil nach links über Tilde-Operator', 'Pfeil nach links über Tilde-Operator', 'Pfeil nach links über Tilde-Operator']);
  this.executeCharTest('⥴', ['Pfeil nach rechts über Tilde-Operator', 'Pfeil nach rechts über Tilde-Operator', 'Pfeil nach rechts über Tilde-Operator']);
  this.executeCharTest('⥵', ['Pfeil nach rechts fast gleich', 'Pfeil nach rechts fast gleich', 'Pfeil nach rechts fast gleich']);
  this.executeCharTest('⥶', ['Weniger als oben Pfeil nach links', 'Weniger als oben Pfeil nach links', 'Weniger als oben Pfeil nach links']);
  this.executeCharTest('⥷', ['Pfeil nach links durch weniger als', 'Pfeil nach links durch weniger als', 'Pfeil nach links durch weniger als']);
  this.executeCharTest('⥸', ['Größer als über dem Pfeil nach rechts', 'Größer als über dem Pfeil nach rechts', 'Größer als über dem Pfeil nach rechts']);
  this.executeCharTest('⥹', ['Untersatz über dem Pfeil nach rechts', 'Untersatz über dem Pfeil nach rechts', 'Untersatz über dem Pfeil nach rechts']);
  this.executeCharTest('⥺', ['Pfeil nach links durch Teilmenge', 'Pfeil nach links durch Teilmenge', 'Pfeil nach links durch Teilmenge']);
  this.executeCharTest('⥻', ['Superset über dem Pfeil nach links', 'Superset über dem Pfeil nach links', 'Superset über dem Pfeil nach links']);
  this.executeCharTest('⦳', ['Leeres Set mit Pfeil rechts oben', 'Leeres Set mit Pfeil rechts oben', 'Leeres Set mit Pfeil rechts oben']);
  this.executeCharTest('⦴', ['Leeres Set mit linkem Pfeil oben', 'Leeres Set mit linkem Pfeil oben', 'Leeres Set mit linkem Pfeil oben']);
  this.executeCharTest('⦽', ['Pfeil nach oben durch Kreis', 'Pfeil nach oben durch Kreis', 'Pfeil nach oben durch Kreis']);
  this.executeCharTest('⧪', ['Schwarzer Diamant mit Pfeil nach unten', 'Schwarzer Diamant mit Pfeil nach unten', 'Schwarzer Diamant mit Pfeil nach unten']);
  this.executeCharTest('⧬', ['Weißer Kreis mit Pfeil nach unten', 'Weißer Kreis mit Pfeil nach unten', 'Weißer Kreis mit Pfeil nach unten']);
  this.executeCharTest('⧭', ['Schwarzer Kreis mit Pfeil nach unten', 'Schwarzer Kreis mit Pfeil nach unten', 'Schwarzer Kreis mit Pfeil nach unten']);
  this.executeCharTest('⨗', ['Integral mit Pfeil nach links mit Haken', 'Integral mit Pfeil nach links mit Haken', 'Integral mit Pfeil nach links mit Haken']);
  this.executeCharTest('⬀', ['North East White Arrow', 'North East White Arrow', 'North East White Arrow']);
  this.executeCharTest('⬁', ['Nordwestlicher weißer Pfeil', 'Nordwestlicher weißer Pfeil', 'Nordwestlicher weißer Pfeil']);
  this.executeCharTest('⬂', ['Südostweißer Pfeil', 'Südostweißer Pfeil', 'Südostweißer Pfeil']);
  this.executeCharTest('⬃', ['Südwestweißer Pfeil', 'Südwestweißer Pfeil', 'Südwestweißer Pfeil']);
  this.executeCharTest('⬄', ['Linker rechter weißer Pfeil', 'Linker rechter weißer Pfeil', 'Linker rechter weißer Pfeil']);
  this.executeCharTest('⬅', ['Schwarzer Pfeil nach links', 'Schwarzer Pfeil nach links', 'Schwarzer Pfeil nach links']);
  this.executeCharTest('⬆', ['Aufwärts schwarzer Pfeil', 'Aufwärts schwarzer Pfeil', 'Aufwärts schwarzer Pfeil']);
  this.executeCharTest('⬇', ['Abwärts schwarzer Pfeil', 'Abwärts schwarzer Pfeil', 'Abwärts schwarzer Pfeil']);
  this.executeCharTest('⬈', ['Schwarzer Nordostpfeil', 'Schwarzer Nordostpfeil', 'Schwarzer Nordostpfeil']);
  this.executeCharTest('⬉', ['Nordwestlicher schwarzer Pfeil', 'Nordwestlicher schwarzer Pfeil', 'Nordwestlicher schwarzer Pfeil']);
  this.executeCharTest('⬊', ['Schwarzer Südostpfeil', 'Schwarzer Südostpfeil', 'Schwarzer Südostpfeil']);
  this.executeCharTest('⬋', ['Südwestlicher schwarzer Pfeil', 'Südwestlicher schwarzer Pfeil', 'Südwestlicher schwarzer Pfeil']);
  this.executeCharTest('⬌', ['Linker rechter schwarzer Pfeil', 'Linker rechter schwarzer Pfeil', 'Linker rechter schwarzer Pfeil']);
  this.executeCharTest('⬍', ['Schwarzer Pfeil nach unten', 'Schwarzer Pfeil nach unten', 'Schwarzer Pfeil nach unten']);
  this.executeCharTest('⬎', ['Pfeil nach rechts mit Spitze nach unten', 'Pfeil nach rechts mit Spitze nach unten', 'Pfeil nach rechts mit Spitze nach unten']);
  this.executeCharTest('⬏', ['Pfeil nach rechts mit Spitze nach oben', 'Pfeil nach rechts mit Spitze nach oben', 'Pfeil nach rechts mit Spitze nach oben']);
  this.executeCharTest('⬐', ['Pfeil nach links mit Spitze nach unten', 'Pfeil nach links mit Spitze nach unten', 'Pfeil nach links mit Spitze nach unten']);
  this.executeCharTest('⬑', ['Pfeil nach links mit Spitze nach oben', 'Pfeil nach links mit Spitze nach oben', 'Pfeil nach links mit Spitze nach oben']);
  this.executeCharTest('⬰', ['Linker Pfeil mit kleinem Kreis', 'Linker Pfeil mit kleinem Kreis', 'Linker Pfeil mit kleinem Kreis']);
  this.executeCharTest('⬱', ['Drei nach links gerichtete Pfeile', 'Drei nach links gerichtete Pfeile', 'Drei nach links gerichtete Pfeile']);
  this.executeCharTest('⬲', ['Linker Pfeil mit Circled Plus', 'Linker Pfeil mit Circled Plus', 'Linker Pfeil mit Circled Plus']);
  this.executeCharTest('⬳', ['Langer nach links gerichteter Squiggle-Pfeil', 'Langer nach links gerichteter Squiggle-Pfeil', 'Langer nach links gerichteter Squiggle-Pfeil']);
  this.executeCharTest('⬴', ['Pfeil nach links mit senkrechtem Strich', 'Pfeil nach links mit senkrechtem Strich', 'Pfeil nach links mit senkrechtem Strich']);
  this.executeCharTest('⬵', ['Doppelpfeil nach links mit doppeltem vertikalem Strich', 'Doppelpfeil nach links mit doppeltem vertikalem Strich', 'Doppelpfeil nach links mit doppeltem vertikalem Strich']);
  this.executeCharTest('⬶', ['Doppelpfeil nach links von der Bar', 'Doppelpfeil nach links von der Bar', 'Doppelpfeil nach links von der Bar']);
  this.executeCharTest('⬷', ['Pfeil nach links mit zwei Köpfen', 'Pfeil nach links mit zwei Köpfen', 'Pfeil nach links mit zwei Köpfen']);
  this.executeCharTest('⬸', ['Pfeil nach links mit gepunktetem Stamm', 'Pfeil nach links mit gepunktetem Stamm', 'Pfeil nach links mit gepunktetem Stamm']);
  this.executeCharTest('⬹', ['Pfeil nach links mit Schwanz mit vertikalem Strich', 'Pfeil nach links mit Schwanz mit vertikalem Strich', 'Pfeil nach links mit Schwanz mit vertikalem Strich']);
  this.executeCharTest('⬺', ['Pfeil nach links mit Schwanz mit doppeltem vertikalem Strich', 'Pfeil nach links mit Schwanz mit doppeltem vertikalem Strich', 'Pfeil nach links mit Schwanz mit doppeltem vertikalem Strich']);
  this.executeCharTest('⬻', ['Nach links gerichteter zweiköpfiger Pfeil mit Schwanz', 'Nach links gerichteter zweiköpfiger Pfeil mit Schwanz', 'Nach links gerichteter zweiköpfiger Pfeil mit Schwanz']);
  this.executeCharTest('⬼', ['Nach links gerichteter zweiköpfiger Pfeil mit Schwanz mit vertikalem Strich', 'Nach links gerichteter zweiköpfiger Pfeil mit Schwanz mit vertikalem Strich', 'Nach links gerichteter zweiköpfiger Pfeil mit Schwanz mit vertikalem Strich']);
  this.executeCharTest('⬽', ['Nach links gerichteter zweiköpfiger Pfeil mit Schwanz mit doppeltem vertikalem Strich', 'Nach links gerichteter zweiköpfiger Pfeil mit Schwanz mit doppeltem vertikalem Strich', 'Nach links gerichteter zweiköpfiger Pfeil mit Schwanz mit doppeltem vertikalem Strich']);
  this.executeCharTest('⬾', ['Pfeil nach links durch X', 'Pfeil nach links durch X', 'Pfeil nach links durch X']);
  this.executeCharTest('⬿', ['Wellenpfeil, der direkt nach links zeigt', 'Wellenpfeil, der direkt nach links zeigt', 'Wellenpfeil, der direkt nach links zeigt']);
  this.executeCharTest('⭀', ['Gleichheitszeichen über dem Pfeil nach links', 'Gleichheitszeichen über dem Pfeil nach links', 'Gleichheitszeichen über dem Pfeil nach links']);
  this.executeCharTest('⭁', ['Reverse-Tilde-Operator Über Linkspfeil', 'Reverse-Tilde-Operator Über Linkspfeil', 'Reverse-Tilde-Operator Über Linkspfeil']);
  this.executeCharTest('⭂', ['Pfeil nach links über der Rückseite fast gleich', 'Pfeil nach links über der Rückseite fast gleich', 'Pfeil nach links über der Rückseite fast gleich']);
  this.executeCharTest('⭃', ['Pfeil nach rechts durch mehr als', 'Pfeil nach rechts durch mehr als', 'Pfeil nach rechts durch mehr als']);
  this.executeCharTest('⭄', ['Pfeil nach rechts durch Superset', 'Pfeil nach rechts durch Superset', 'Pfeil nach rechts durch Superset']);
  this.executeCharTest('⭅', ['Vierfachpfeil nach links', 'Vierfachpfeil nach links', 'Vierfachpfeil nach links']);
  this.executeCharTest('⭆', ['Vierfachpfeil nach rechts', 'Vierfachpfeil nach rechts', 'Vierfachpfeil nach rechts']);
  this.executeCharTest('⭇', ['Reverse-Tilde-Operator über dem Pfeil nach rechts', 'Reverse-Tilde-Operator über dem Pfeil nach rechts', 'Reverse-Tilde-Operator über dem Pfeil nach rechts']);
  this.executeCharTest('⭈', ['Pfeil nach rechts oben fast gleich', 'Pfeil nach rechts oben fast gleich', 'Pfeil nach rechts oben fast gleich']);
  this.executeCharTest('⭉', ['Tilde-Operator über dem Pfeil nach links', 'Tilde-Operator über dem Pfeil nach links', 'Tilde-Operator über dem Pfeil nach links']);
  this.executeCharTest('⭊', ['Pfeil nach links oben fast gleich', 'Pfeil nach links oben fast gleich', 'Pfeil nach links oben fast gleich']);
  this.executeCharTest('⭋', ['Pfeil nach links über Reverse-Tilde-Operator', 'Pfeil nach links über Reverse-Tilde-Operator', 'Pfeil nach links über Reverse-Tilde-Operator']);
  this.executeCharTest('⭌', ['Pfeil nach rechts über Reverse-Tilde-Operator', 'Pfeil nach rechts über Reverse-Tilde-Operator', 'Pfeil nach rechts über Reverse-Tilde-Operator']);
  this.executeCharTest('￩', ['Halbbreiter Pfeil nach links', 'Halbbreiter Pfeil nach links', 'Halbbreiter Pfeil nach links']);
  this.executeCharTest('￪', ['Halbbreiter Pfeil nach oben', 'Halbbreiter Pfeil nach oben', 'Halbbreiter Pfeil nach oben']);
  this.executeCharTest('￫', ['Halbbreiter Pfeil nach rechts', 'Halbbreiter Pfeil nach rechts', 'Halbbreiter Pfeil nach rechts']);
  this.executeCharTest('￬', ['Halbbreiter Pfeil nach unten', 'Halbbreiter Pfeil nach unten', 'Halbbreiter Pfeil nach unten']);
  this.executeCharTest('ℓ', ['Skript klein L', 'Skript klein L', 'Skript klein L']);
  this.executeCharTest('℘', ['Skript groß P', 'Skript groß P', 'Skript groß P']);
  this.executeCharTest('ℼ', ['pi mit Doppelstrich', 'pi mit Doppelstrich', 'pi mit Doppelstrich']);
  this.executeCharTest('ℽ', ['gamma mit Doppelstrich', 'gamma mit Doppelstrich', 'gamma mit Doppelstrich']);
  this.executeCharTest('ℾ', ['groß Gamma mit Doppelstrich', 'groß Gamma mit Doppelstrich', 'groß Gamma mit Doppelstrich']);
  this.executeCharTest('ℿ', ['groß Pi mit Doppelstrich', 'groß Pi mit Doppelstrich', 'groß Pi mit Doppelstrich']);
  this.executeCharTest('⅀', ['Summenzeichen mit Doppelstrich', 'Summenzeichen mit Doppelstrich', 'Summenzeichen mit Doppelstrich']);
  this.executeCharTest('ⅅ', ['groß D kursiv mit Doppelstrich', 'groß D kursiv mit Doppelstrich', 'groß D kursiv mit Doppelstrich']);
  this.executeCharTest('ⅆ', ['d kursiv mit Doppelstrich', 'd kursiv mit Doppelstrich', 'd kursiv mit Doppelstrich']);
  this.executeCharTest('ⅇ', ['e kursiv mit Doppelstrich', 'e kursiv mit Doppelstrich', 'e kursiv mit Doppelstrich']);
  this.executeCharTest('ⅈ', ['i kursiv mit Doppelstrich', 'i kursiv mit Doppelstrich', 'i kursiv mit Doppelstrich']);
  this.executeCharTest('ⅉ', ['j kursiv mit Doppelstrich', 'j kursiv mit Doppelstrich', 'j kursiv mit Doppelstrich']);
  this.executeCharTest('𝚤', ['punktloses i kursiv', 'punktloses i kursiv', 'punktloses i kursiv']);
  this.executeCharTest('𝚥', ['punktloses j kursiv', 'punktloses j kursiv', 'punktloses j kursiv']);
  this.executeCharTest('(', ['Klammer auf', 'Klammer auf', 'Klammer auf']);
  this.executeCharTest(')', ['Klammer zu', 'Klammer zu', 'Klammer zu']);
  this.executeCharTest('[', ['eckige Klammer auf', 'eckige Klammer auf', 'eckige Klammer auf']);
  this.executeCharTest(']', ['eckige Klammer zu', 'eckige Klammer zu', 'eckige Klammer zu']);
  this.executeCharTest('{', ['geschwungene Klammer auf', 'geschwungene Klammer auf', 'geschwungene Klammer auf']);
  this.executeCharTest('}', ['geschwungene Klammer zu', 'geschwungene Klammer zu', 'geschwungene Klammer zu']);
  this.executeCharTest('⁅', ['Linke eckige Klammer mit Stachel', 'Linke eckige Klammer mit Stachel', 'Linke eckige Klammer mit Stachel']);
  this.executeCharTest('⁆', ['Rechte eckige Klammer mit Stachel', 'Rechte eckige Klammer mit Stachel', 'Rechte eckige Klammer mit Stachel']);
  this.executeCharTest('⌈', ['linke Aufrundungsklammer', 'linke Aufrundungsklammer', 'linke Aufrundungsklammer']);
  this.executeCharTest('⌉', ['rechte Aufrundungsklammer', 'rechte Aufrundungsklammer', 'rechte Aufrundungsklammer']);
  this.executeCharTest('⌊', ['linke Abrundungsklammer', 'linke Abrundungsklammer', 'linke Abrundungsklammer']);
  this.executeCharTest('⌋', ['rechter Abrundungsklammer', 'rechter Abrundungsklammer', 'rechter Abrundungsklammer']);
  this.executeCharTest('⌌', ['unterer rechter Abschnitt', 'unterer rechter Abschnitt', 'unterer rechter Abschnitt']);
  this.executeCharTest('⌍', ['Unterer linker Abschnitt', 'Unterer linker Abschnitt', 'Unterer linker Abschnitt']);
  this.executeCharTest('⌎', ['Oberer rechter Abschnitt', 'Oberer rechter Abschnitt', 'Oberer rechter Abschnitt']);
  this.executeCharTest('⌏', ['Oberer linker Abschnitt', 'Oberer linker Abschnitt', 'Oberer linker Abschnitt']);
  this.executeCharTest('⌜', ['Obere linke Ecke', 'Obere linke Ecke', 'Obere linke Ecke']);
  this.executeCharTest('⌝', ['Obere rechte Ecke', 'Obere rechte Ecke', 'Obere rechte Ecke']);
  this.executeCharTest('⌞', ['Untere linke Ecke', 'Untere linke Ecke', 'Untere linke Ecke']);
  this.executeCharTest('⌟', ['Rechte untere Ecke', 'Rechte untere Ecke', 'Rechte untere Ecke']);
  this.executeCharTest('⌠', ['Obere Hälfte eines Integrals', 'Obere Hälfte eines Integrals', 'Obere Hälfte eines Integrals']);
  this.executeCharTest('⌡', ['Untere Hälfte eines Integrals', 'Untere Hälfte eines Integrals', 'Untere Hälfte eines Integrals']);
  this.executeCharTest('〈', ['Linke spitze Klammer', 'Linke spitze Klammer', 'Linke spitze Klammer']);
  this.executeCharTest('〉', ['Rechte spitze Klammer', 'Rechte spitze Klammer', 'Rechte spitze Klammer']);
  this.executeCharTest('⎛', ['Oberer Teil der linken Klammer', 'Oberer Teil der linken Klammer', 'Oberer Teil der linken Klammer']);
  this.executeCharTest('⎜', ['Linke Klammerverlängerung', 'Linke Klammerverlängerung', 'Linke Klammerverlängerung']);
  this.executeCharTest('⎝', ['Unterer Teil der linken Klammer', 'Unterer Teil der linken Klammer', 'Unterer Teil der linken Klammer']);
  this.executeCharTest('⎞', ['Oberer Teil der rechten Klammer', 'Oberer Teil der rechten Klammer', 'Oberer Teil der rechten Klammer']);
  this.executeCharTest('⎟', ['Rechte Klammerverlängerung', 'Rechte Klammerverlängerung', 'Rechte Klammerverlängerung']);
  this.executeCharTest('⎠', ['Unterer Teil der rechten Klammer', 'Unterer Teil der rechten Klammer', 'Unterer Teil der rechten Klammer']);
  this.executeCharTest('⎡', ['Oberer Teil der linken eckigen Klammer', 'Oberer Teil der linken eckigen Klammer', 'Oberer Teil der linken eckigen Klammer']);
  this.executeCharTest('⎢', ['Linke eckige Klammerverlängerung', 'Linke eckige Klammerverlängerung', 'Linke eckige Klammerverlängerung']);
  this.executeCharTest('⎣', ['unterer Teil der linken eckigen Klammer', 'unterer Teil der linken eckigen Klammer', 'unterer Teil der linken eckigen Klammer']);
  this.executeCharTest('⎤', ['Oberer Teil der rechten eckigen Klammer', 'Oberer Teil der rechten eckigen Klammer', 'Oberer Teil der rechten eckigen Klammer']);
  this.executeCharTest('⎥', ['Rechte eckige Klammerverlängerung', 'Rechte eckige Klammerverlängerung', 'Rechte eckige Klammerverlängerung']);
  this.executeCharTest('⎦', ['unterer Teil der rechten eckigen Klammer', 'unterer Teil der rechten eckigen Klammer', 'unterer Teil der rechten eckigen Klammer']);
  this.executeCharTest('⎧', ['oberer Teil der linken geschweiften Klammer', 'oberer Teil der linken geschweiften Klammer', 'oberer Teil der linken geschweiften Klammer']);
  this.executeCharTest('⎨', ['Mittelstück der linken geschweiften Klammer', 'Mittelstück der linken geschweiften Klammer', 'Mittelstück der linken geschweiften Klammer']);
  this.executeCharTest('⎩', ['unterer Teil der linken geschweiften Klammer', 'unterer Teil der linken geschweiften Klammer', 'unterer Teil der linken geschweiften Klammer']);
  this.executeCharTest('⎪', ['Zwischenteil einer geschweiften Klammer', 'Zwischenteil einer geschweiften Klammer', 'Zwischenteil einer geschweiften Klammer']);
  this.executeCharTest('⎫', ['oberer Teil der rechten geschweiften Klammer', 'oberer Teil der rechten geschweiften Klammer', 'oberer Teil der rechten geschweiften Klammer']);
  this.executeCharTest('⎬', ['Mittelstück der rechten geschweiften Klammer', 'Mittelstück der rechten geschweiften Klammer', 'Mittelstück der rechten geschweiften Klammer']);
  this.executeCharTest('⎭', ['unterer Teil der rechten geschweiften Klammer', 'unterer Teil der rechten geschweiften Klammer', 'unterer Teil der rechten geschweiften Klammer']);
  this.executeCharTest('⎮', ['Mittelteil eines Integrals', 'Mittelteil eines Integrals', 'Mittelteil eines Integrals']);
  this.executeCharTest('⎯', ['Erweiterung einer Querlinie', 'Erweiterung einer Querlinie', 'Erweiterung einer Querlinie']);
  this.executeCharTest('⎰', ['Geschweiftes Klammerteil oben links oder rechts unten', 'Geschweiftes Klammerteil oben links oder rechts unten', 'Geschweiftes Klammerteil oben links oder rechts unten']);
  this.executeCharTest('⎱', ['Geschweiftes Klammerteil oben rechts oder unten links', 'Geschweiftes Klammerteil oben rechts oder unten links', 'Geschweiftes Klammerteil oben rechts oder unten links']);
  this.executeCharTest('⎲', ['Oberer Teil einer Summe', 'Oberer Teil einer Summe', 'Oberer Teil einer Summe']);
  this.executeCharTest('⎳', ['Unterer Teil einer Summe', 'Unterer Teil einer Summe', 'Unterer Teil einer Summe']);
  this.executeCharTest('⎴', ['Obere eckige Klammer', 'Obere eckige Klammer', 'Obere eckige Klammer']);
  this.executeCharTest('⎵', ['Untere eckige Klammer', 'Untere eckige Klammer', 'Untere eckige Klammer']);
  this.executeCharTest('⎶', ['Untere eckige Klammer auf oberer eckiger Klammer', 'Untere eckige Klammer auf oberer eckiger Klammer', 'Untere eckige Klammer auf oberer eckiger Klammer']);
  this.executeCharTest('⎷', ['Unterer Teil des Radikalsymbols', 'Unterer Teil des Radikalsymbols', 'Unterer Teil des Radikalsymbols']);
  this.executeCharTest('⎸', ['Linke vertikale Boxlinie', 'Linke vertikale Boxlinie', 'Linke vertikale Boxlinie']);
  this.executeCharTest('⎹', ['Rechte vertikale Boxlinie', 'Rechte vertikale Boxlinie', 'Rechte vertikale Boxlinie']);
  this.executeCharTest('⏜', ['Obere Klammer', 'Obere Klammer', 'Obere Klammer']);
  this.executeCharTest('⏝', ['Untere Klammer', 'Untere Klammer', 'Untere Klammer']);
  this.executeCharTest('⏞', ['Obere geschweifte Klammer', 'Obere geschweifte Klammer', 'Obere geschweifte Klammer']);
  this.executeCharTest('⏟', ['Untere geschweifte Klammer', 'Untere geschweifte Klammer', 'Untere geschweifte Klammer']);
  this.executeCharTest('⏠', ['Obere eckige Klammer', 'Obere eckige Klammer', 'Obere eckige Klammer']);
  this.executeCharTest('⏡', ['Untere eckige Klammer', 'Untere eckige Klammer', 'Untere eckige Klammer']);
  this.executeCharTest('❨', ['Mittlere linke Klammerverzierung', 'Mittlere linke Klammerverzierung', 'Mittlere linke Klammerverzierung']);
  this.executeCharTest('❩', ['Mittlere rechte Klammerverzierung', 'Mittlere rechte Klammerverzierung', 'Mittlere rechte Klammerverzierung']);
  this.executeCharTest('❪', ['Mittlere abgeflachte linke Klammerverzierung', 'Mittlere abgeflachte linke Klammerverzierung', 'Mittlere abgeflachte linke Klammerverzierung']);
  this.executeCharTest('❫', ['Mittlere abgeflachte rechte Klammerverzierung', 'Mittlere abgeflachte rechte Klammerverzierung', 'Mittlere abgeflachte rechte Klammerverzierung']);
  this.executeCharTest('❬', ['Mittlere nach links weisende Winkelhalterung', 'Mittlere nach links weisende Winkelhalterung', 'Mittlere nach links weisende Winkelhalterung']);
  this.executeCharTest('❭', ['Mittlere, rechtwinklige Winkelhalterung', 'Mittlere, rechtwinklige Winkelhalterung', 'Mittlere, rechtwinklige Winkelhalterung']);
  this.executeCharTest('❮', ['Schwere nach links weisende Anführungszeichen-Verzierung', 'Schwere nach links weisende Anführungszeichen-Verzierung', 'Schwere nach links weisende Anführungszeichen-Verzierung']);
  this.executeCharTest('❯', ['Schwere nach rechts zeigenden Winkel-Anführungszeichen-Verzierung', 'Schwere nach rechts zeigenden Winkel-Anführungszeichen-Verzierung', 'Schwere nach rechts zeigenden Winkel-Anführungszeichen-Verzierung']);
  this.executeCharTest('❰', ['Schwere nach links weisende Winkelhalterung', 'Schwere nach links weisende Winkelhalterung', 'Schwere nach links weisende Winkelhalterung']);
  this.executeCharTest('❱', ['Schwere, nach rechts weisende Winkelhalterung', 'Schwere, nach rechts weisende Winkelhalterung', 'Schwere, nach rechts weisende Winkelhalterung']);
  this.executeCharTest('❲', ['Leichte linke Schildpatt Bracket Ornament', 'Leichte linke Schildpatt Bracket Ornament', 'Leichte linke Schildpatt Bracket Ornament']);
  this.executeCharTest('❳', ['Leichte rechte Schildpatt-Klammerverzierung', 'Leichte rechte Schildpatt-Klammerverzierung', 'Leichte rechte Schildpatt-Klammerverzierung']);
  this.executeCharTest('❴', ['Mittlere linke geschweifte Klammerverzierung', 'Mittlere linke geschweifte Klammerverzierung', 'Mittlere linke geschweifte Klammerverzierung']);
  this.executeCharTest('❵', ['Mittlere rechte geschweifte Klammerverzierung', 'Mittlere rechte geschweifte Klammerverzierung', 'Mittlere rechte geschweifte Klammerverzierung']);
  this.executeCharTest('⟅', ['Linker S-förmiger Taschenbegrenzer', 'Linker S-förmiger Taschenbegrenzer', 'Linker S-förmiger Taschenbegrenzer']);
  this.executeCharTest('⟆', ['rechter S-förmiger Taschenbegrenzer', 'rechter S-förmiger Taschenbegrenzer', 'rechter S-förmiger Taschenbegrenzer']);
  this.executeCharTest('⟦', ['Mathematische linke weiße eckige Klammer', 'Mathematische linke weiße eckige Klammer', 'Mathematische linke weiße eckige Klammer']);
  this.executeCharTest('⟧', ['Mathematische rechte weiße eckige Klammer', 'Mathematische rechte weiße eckige Klammer', 'Mathematische rechte weiße eckige Klammer']);
  this.executeCharTest('⟨', ['Mathematische linke Winkelklammer', 'Mathematische linke Winkelklammer', 'Mathematische linke Winkelklammer']);
  this.executeCharTest('⟩', ['Mathematische rechtwinklige Klammer', 'Mathematische rechtwinklige Klammer', 'Mathematische rechtwinklige Klammer']);
  this.executeCharTest('⟪', ['Mathematische linke doppelte Winkelklammer', 'Mathematische linke doppelte Winkelklammer', 'Mathematische linke doppelte Winkelklammer']);
  this.executeCharTest('⟫', ['Mathematische rechtwinklige eckige Klammer', 'Mathematische rechtwinklige eckige Klammer', 'Mathematische rechtwinklige eckige Klammer']);
  this.executeCharTest('⟬', ['Mathematische linke Schildkrötenpanzerhalterung', 'Mathematische linke Schildkrötenpanzerhalterung', 'Mathematische linke Schildkrötenpanzerhalterung']);
  this.executeCharTest('⟭', ['Mathematische rechte weiße Schildpatt-Klammer', 'Mathematische rechte weiße Schildpatt-Klammer', 'Mathematische rechte weiße Schildpatt-Klammer']);
  this.executeCharTest('⟮', ['Mathematische linke abgeflachte Klammer', 'Mathematische linke abgeflachte Klammer', 'Mathematische linke abgeflachte Klammer']);
  this.executeCharTest('⟯', ['Mathematische rechte abgeflachte Klammer', 'Mathematische rechte abgeflachte Klammer', 'Mathematische rechte abgeflachte Klammer']);
  this.executeCharTest('⦃', ['Linke weiße geschweifte Klammer', 'Linke weiße geschweifte Klammer', 'Linke weiße geschweifte Klammer']);
  this.executeCharTest('⦄', ['Rechte weiße geschweifte Klammer', 'Rechte weiße geschweifte Klammer', 'Rechte weiße geschweifte Klammer']);
  this.executeCharTest('⦅', ['Linke weiße Klammer', 'Linke weiße Klammer', 'Linke weiße Klammer']);
  this.executeCharTest('⦆', ['Rechte weiße Klammer', 'Rechte weiße Klammer', 'Rechte weiße Klammer']);
  this.executeCharTest('⦇', ['Z-Notation Linke Bildklammer', 'Z-Notation Linke Bildklammer', 'Z-Notation Linke Bildklammer']);
  this.executeCharTest('⦈', ['Z-Notation rechte Bildklammer', 'Z-Notation rechte Bildklammer', 'Z-Notation rechte Bildklammer']);
  this.executeCharTest('⦉', ['Z-Notation Linke Klammer', 'Z-Notation Linke Klammer', 'Z-Notation Linke Klammer']);
  this.executeCharTest('⦊', ['Z Notation Right Binding Bracket', 'Z Notation Right Binding Bracket', 'Z Notation Right Binding Bracket']);
  this.executeCharTest('⦋', ['Linke eckige Klammer mit Unterlenker', 'Linke eckige Klammer mit Unterlenker', 'Linke eckige Klammer mit Unterlenker']);
  this.executeCharTest('⦌', ['Rechte eckige Klammer mit Unterlenker', 'Rechte eckige Klammer mit Unterlenker', 'Rechte eckige Klammer mit Unterlenker']);
  this.executeCharTest('⦍', ['Linke eckige Klammer mit Häkchen in der oberen Ecke', 'Linke eckige Klammer mit Häkchen in der oberen Ecke', 'Linke eckige Klammer mit Häkchen in der oberen Ecke']);
  this.executeCharTest('⦎', ['Rechte eckige Klammer mit Tick in der unteren Ecke', 'Rechte eckige Klammer mit Tick in der unteren Ecke', 'Rechte eckige Klammer mit Tick in der unteren Ecke']);
  this.executeCharTest('⦏', ['Linke eckige Klammer mit Tick in der unteren Ecke', 'Linke eckige Klammer mit Tick in der unteren Ecke', 'Linke eckige Klammer mit Tick in der unteren Ecke']);
  this.executeCharTest('⦐', ['Rechte eckige Klammer mit Tick in der oberen Ecke', 'Rechte eckige Klammer mit Tick in der oberen Ecke', 'Rechte eckige Klammer mit Tick in der oberen Ecke']);
  this.executeCharTest('⦑', ['Linke Winkelklammer mit Punkt', 'Linke Winkelklammer mit Punkt', 'Linke Winkelklammer mit Punkt']);
  this.executeCharTest('⦒', ['Rechtwinklige Klammer mit Punkt', 'Rechtwinklige Klammer mit Punkt', 'Rechtwinklige Klammer mit Punkt']);
  this.executeCharTest('⦓', ['Linker Bogen weniger als Halterung', 'Linker Bogen weniger als Halterung', 'Linker Bogen weniger als Halterung']);
  this.executeCharTest('⦔', ['rechter Bogen größer als Halterung', 'rechter Bogen größer als Halterung', 'rechter Bogen größer als Halterung']);
  this.executeCharTest('⦕', ['Doppelter linker Bogen größer als Halterung', 'Doppelter linker Bogen größer als Halterung', 'Doppelter linker Bogen größer als Halterung']);
  this.executeCharTest('⦖', ['Doppelter rechter Bogen weniger als Halterung', 'Doppelter rechter Bogen weniger als Halterung', 'Doppelter rechter Bogen weniger als Halterung']);
  this.executeCharTest('⦗', ['Linke schwarze Schildkrötenhalterung', 'Linke schwarze Schildkrötenhalterung', 'Linke schwarze Schildkrötenhalterung']);
  this.executeCharTest('⦘', ['Rechte schwarze Schildpatt-Klammer', 'Rechte schwarze Schildpatt-Klammer', 'Rechte schwarze Schildpatt-Klammer']);
  this.executeCharTest('⧘', ['Linker wackeliger Zaun', 'Linker wackeliger Zaun', 'Linker wackeliger Zaun']);
  this.executeCharTest('⧙', ['rechter wackeliger Zaun', 'rechter wackeliger Zaun', 'rechter wackeliger Zaun']);
  this.executeCharTest('⧚', ['Linker doppelter wackeliger Zaun', 'Linker doppelter wackeliger Zaun', 'Linker doppelter wackeliger Zaun']);
  this.executeCharTest('⧛', ['rechter doppelter wackeliger Zaun', 'rechter doppelter wackeliger Zaun', 'rechter doppelter wackeliger Zaun']);
  this.executeCharTest('⧼', ['Nach links zeigender gebogener Winkelhalter', 'Nach links zeigender gebogener Winkelhalter', 'Nach links zeigender gebogener Winkelhalter']);
  this.executeCharTest('⧽', ['Nach rechts zeigender gebogener Winkelhalter', 'Nach rechts zeigender gebogener Winkelhalter', 'Nach rechts zeigender gebogener Winkelhalter']);
  this.executeCharTest('⸢', ['Obere linke halbe Halterung', 'Obere linke halbe Halterung', 'Obere linke halbe Halterung']);
  this.executeCharTest('⸣', ['Obere rechte halbe Klammer', 'Obere rechte halbe Klammer', 'Obere rechte halbe Klammer']);
  this.executeCharTest('⸤', ['Linke halbe halterung unten', 'Linke halbe halterung unten', 'Linke halbe halterung unten']);
  this.executeCharTest('⸥', ['Untere rechte halbe Halterung', 'Untere rechte halbe Halterung', 'Untere rechte halbe Halterung']);
  this.executeCharTest('⸦', ['U-Halterung links seitlich', 'U-Halterung links seitlich', 'U-Halterung links seitlich']);
  this.executeCharTest('⸧', ['U-Halterung rechts seitlich', 'U-Halterung rechts seitlich', 'U-Halterung rechts seitlich']);
  this.executeCharTest('⸨', ['Linke doppelte Klammer', 'Linke doppelte Klammer', 'Linke doppelte Klammer']);
  this.executeCharTest('⸩', ['Rechte doppelte Klammer', 'Rechte doppelte Klammer', 'Rechte doppelte Klammer']);
  this.executeCharTest('〈', ['Linke Winkelklammer', 'Linke Winkelklammer', 'Linke Winkelklammer']);
  this.executeCharTest('〉', ['Rechtwinklige Halterung', 'Rechtwinklige Halterung', 'Rechtwinklige Halterung']);
  this.executeCharTest('《', ['Linke Doppelwinkelhalterung', 'Linke Doppelwinkelhalterung', 'Linke Doppelwinkelhalterung']);
  this.executeCharTest('》', ['Rechte Doppelwinkelhalterung', 'Rechte Doppelwinkelhalterung', 'Rechte Doppelwinkelhalterung']);
  this.executeCharTest('「', ['Linke Eckklammer', 'Linke Eckklammer', 'Linke Eckklammer']);
  this.executeCharTest('」', ['Rechte Eckhalterung', 'Rechte Eckhalterung', 'Rechte Eckhalterung']);
  this.executeCharTest('『', ['Linke weiße Eckhalterung', 'Linke weiße Eckhalterung', 'Linke weiße Eckhalterung']);
  this.executeCharTest('』', ['Rechte weiße Eckhalterung', 'Rechte weiße Eckhalterung', 'Rechte weiße Eckhalterung']);
  this.executeCharTest('【', ['Linke schwarze linsenförmige Halterung', 'Linke schwarze linsenförmige Halterung', 'Linke schwarze linsenförmige Halterung']);
  this.executeCharTest('】', ['Rechte schwarze linsenförmige Halterung', 'Rechte schwarze linsenförmige Halterung', 'Rechte schwarze linsenförmige Halterung']);
  this.executeCharTest('〔', ['Linke Schildpatt-Klammer', 'Linke Schildpatt-Klammer', 'Linke Schildpatt-Klammer']);
  this.executeCharTest('〕', ['Rechte Schildpattlasche', 'Rechte Schildpattlasche', 'Rechte Schildpattlasche']);
  this.executeCharTest('〖', ['Linke weiße linsenförmige Halterung', 'Linke weiße linsenförmige Halterung', 'Linke weiße linsenförmige Halterung']);
  this.executeCharTest('〗', ['Rechte weiße linsenförmige Halterung', 'Rechte weiße linsenförmige Halterung', 'Rechte weiße linsenförmige Halterung']);
  this.executeCharTest('〘', ['Linke weiße Schildpatt-Klammer', 'Linke weiße Schildpatt-Klammer', 'Linke weiße Schildpatt-Klammer']);
  this.executeCharTest('〙', ['Rechte weiße Schildpatt-Klammer', 'Rechte weiße Schildpatt-Klammer', 'Rechte weiße Schildpatt-Klammer']);
  this.executeCharTest('〚', ['Linke weiße eckige Klammer', 'Linke weiße eckige Klammer', 'Linke weiße eckige Klammer']);
  this.executeCharTest('〛', ['Rechte weiße eckige Klammer', 'Rechte weiße eckige Klammer', 'Rechte weiße eckige Klammer']);
  this.executeCharTest('〝', ['Doppelte Anführungszeichen in umgekehrter Reihenfolge', 'Doppelte Anführungszeichen in umgekehrter Reihenfolge', 'Doppelte Anführungszeichen in umgekehrter Reihenfolge']);
  this.executeCharTest('〞', ['Doppelte Anführungszeichen', 'Doppelte Anführungszeichen', 'Doppelte Anführungszeichen']);
  this.executeCharTest('〟', ['Niedriges doppeltes Prime-Anführungszeichen', 'Niedriges doppeltes Prime-Anführungszeichen', 'Niedriges doppeltes Prime-Anführungszeichen']);
  this.executeCharTest('﴾', ['Verzierte linke Klammer', 'Verzierte linke Klammer', 'Verzierte linke Klammer']);
  this.executeCharTest('﴿', ['Verzierte rechte Klammer', 'Verzierte rechte Klammer', 'Verzierte rechte Klammer']);
  this.executeCharTest('︗', ['Präsentationsformular für vertikale linke weiße linsenförmige Halterung', 'Präsentationsformular für vertikale linke weiße linsenförmige Halterung', 'Präsentationsformular für vertikale linke weiße linsenförmige Halterung']);
  this.executeCharTest('︘', ['Präsentationsformular für vertikale rechtwinklige linsenförmige Halterung', 'Präsentationsformular für vertikale rechtwinklige linsenförmige Halterung', 'Präsentationsformular für vertikale rechtwinklige linsenförmige Halterung']);
  this.executeCharTest('︵', ['Präsentationsformular für vertikale linke Klammer', 'Präsentationsformular für vertikale linke Klammer', 'Präsentationsformular für vertikale linke Klammer']);
  this.executeCharTest('︶', ['Präsentationsformular für vertikale rechte Klammer', 'Präsentationsformular für vertikale rechte Klammer', 'Präsentationsformular für vertikale rechte Klammer']);
  this.executeCharTest('︷', ['Präsentationsformular für vertikale linke geschweifte Klammer', 'Präsentationsformular für vertikale linke geschweifte Klammer', 'Präsentationsformular für vertikale linke geschweifte Klammer']);
  this.executeCharTest('︸', ['Präsentationsformular für vertikale, recht geschweifte Klammer', 'Präsentationsformular für vertikale, recht geschweifte Klammer', 'Präsentationsformular für vertikale, recht geschweifte Klammer']);
  this.executeCharTest('︹', ['Präsentationsformular für vertikale linke Schildpattklammer', 'Präsentationsformular für vertikale linke Schildpattklammer', 'Präsentationsformular für vertikale linke Schildpattklammer']);
  this.executeCharTest('︺', ['Präsentationsformular für vertikale rechte Schildpatt-Klammer', 'Präsentationsformular für vertikale rechte Schildpatt-Klammer', 'Präsentationsformular für vertikale rechte Schildpatt-Klammer']);
  this.executeCharTest('︻', ['Präsentationsformular für vertikale linke schwarze linsenförmige Halterung', 'Präsentationsformular für vertikale linke schwarze linsenförmige Halterung', 'Präsentationsformular für vertikale linke schwarze linsenförmige Halterung']);
  this.executeCharTest('︼', ['Präsentationsformular für vertikale rechtwinklige schwarze linsenförmige Halterung', 'Präsentationsformular für vertikale rechtwinklige schwarze linsenförmige Halterung', 'Präsentationsformular für vertikale rechtwinklige schwarze linsenförmige Halterung']);
  this.executeCharTest('︽', ['Präsentationsformular für vertikale linke Doppelwinkelhalterung', 'Präsentationsformular für vertikale linke Doppelwinkelhalterung', 'Präsentationsformular für vertikale linke Doppelwinkelhalterung']);
  this.executeCharTest('︾', ['Präsentationsformular für vertikale rechtwinklige, rechtwinklige Halterung', 'Präsentationsformular für vertikale rechtwinklige, rechtwinklige Halterung', 'Präsentationsformular für vertikale rechtwinklige, rechtwinklige Halterung']);
  this.executeCharTest('︿', ['Präsentationsformular für vertikale linke Winkelhalterung', 'Präsentationsformular für vertikale linke Winkelhalterung', 'Präsentationsformular für vertikale linke Winkelhalterung']);
  this.executeCharTest('﹀', ['Präsentationsformular für vertikale rechtwinklige Halterung', 'Präsentationsformular für vertikale rechtwinklige Halterung', 'Präsentationsformular für vertikale rechtwinklige Halterung']);
  this.executeCharTest('﹁', ['Präsentationsformular für vertikale linke Eckhalterung', 'Präsentationsformular für vertikale linke Eckhalterung', 'Präsentationsformular für vertikale linke Eckhalterung']);
  this.executeCharTest('﹂', ['Präsentationsformular für vertikale rechte Eckhalterung', 'Präsentationsformular für vertikale rechte Eckhalterung', 'Präsentationsformular für vertikale rechte Eckhalterung']);
  this.executeCharTest('﹃', ['Präsentationsformular für vertikale linke weiße Eckhalterung', 'Präsentationsformular für vertikale linke weiße Eckhalterung', 'Präsentationsformular für vertikale linke weiße Eckhalterung']);
  this.executeCharTest('﹄', ['Präsentationsformular für vertikale rechte weiße Eckhalterung', 'Präsentationsformular für vertikale rechte weiße Eckhalterung', 'Präsentationsformular für vertikale rechte weiße Eckhalterung']);
  this.executeCharTest('﹇', ['Präsentationsformular für vertikale linke eckige Klammer', 'Präsentationsformular für vertikale linke eckige Klammer', 'Präsentationsformular für vertikale linke eckige Klammer']);
  this.executeCharTest('﹈', ['Präsentationsformular für vertikale eckige Klammer', 'Präsentationsformular für vertikale eckige Klammer', 'Präsentationsformular für vertikale eckige Klammer']);
  this.executeCharTest('﹙', ['Kleine linke Klammer', 'Kleine linke Klammer', 'Kleine linke Klammer']);
  this.executeCharTest('﹚', ['Kleine rechte Klammer', 'Kleine rechte Klammer', 'Kleine rechte Klammer']);
  this.executeCharTest('﹛', ['Kleine linke geschweifte Klammer', 'Kleine linke geschweifte Klammer', 'Kleine linke geschweifte Klammer']);
  this.executeCharTest('﹜', ['Kleine rechte geschweifte Klammer', 'Kleine rechte geschweifte Klammer', 'Kleine rechte geschweifte Klammer']);
  this.executeCharTest('﹝', ['Kleine linke Schildpatt-Klammer', 'Kleine linke Schildpatt-Klammer', 'Kleine linke Schildpatt-Klammer']);
  this.executeCharTest('﹞', ['Kleine rechte Schildpatt-Klammer', 'Kleine rechte Schildpatt-Klammer', 'Kleine rechte Schildpatt-Klammer']);
  this.executeCharTest('（', ['Linke Klammer in voller Breite', 'Linke Klammer in voller Breite', 'Linke Klammer in voller Breite']);
  this.executeCharTest('）', ['Rechte Klammer mit voller Breite', 'Rechte Klammer mit voller Breite', 'Rechte Klammer mit voller Breite']);
  this.executeCharTest('［', ['Linke eckige Klammer mit voller Breite', 'Linke eckige Klammer mit voller Breite', 'Linke eckige Klammer mit voller Breite']);
  this.executeCharTest('］', ['Rechteckige Klammer mit voller Breite', 'Rechteckige Klammer mit voller Breite', 'Rechteckige Klammer mit voller Breite']);
  this.executeCharTest('｛', ['Linke geschweifte Klammer mit voller Breite', 'Linke geschweifte Klammer mit voller Breite', 'Linke geschweifte Klammer mit voller Breite']);
  this.executeCharTest('｝', ['Rechtwinklige Klammer mit voller Breite', 'Rechtwinklige Klammer mit voller Breite', 'Rechtwinklige Klammer mit voller Breite']);
  this.executeCharTest('｟', ['Linke weiße Klammer mit voller Breite', 'Linke weiße Klammer mit voller Breite', 'Linke weiße Klammer mit voller Breite']);
  this.executeCharTest('｠', ['Rechte breite weiße Klammer', 'Rechte breite weiße Klammer', 'Rechte breite weiße Klammer']);
  this.executeCharTest('｢', ['Halbe breite linke eckklammer', 'Halbe breite linke eckklammer', 'Halbe breite linke eckklammer']);
  this.executeCharTest('｣', ['Halbe breite rechte eckklammer', 'Halbe breite rechte eckklammer', 'Halbe breite rechte eckklammer']);
  this.executeCharTest('─', ['Box Drawings Light Horizontal', 'Box Drawings Light Horizontal', 'Box Drawings Light Horizontal']);
  this.executeCharTest('━', ['Box Drawings Schwere Horizontale', 'Box Drawings Schwere Horizontale', 'Box Drawings Schwere Horizontale']);
  this.executeCharTest('│', ['Box Drawings Light Vertical', 'Box Drawings Light Vertical', 'Box Drawings Light Vertical']);
  this.executeCharTest('┃', ['Box Drawings Schwere Vertikale', 'Box Drawings Schwere Vertikale', 'Box Drawings Schwere Vertikale']);
  this.executeCharTest('┄', ['Box-Zeichnungen Licht Triple Dash Horizontal', 'Box-Zeichnungen Licht Triple Dash Horizontal', 'Box-Zeichnungen Licht Triple Dash Horizontal']);
  this.executeCharTest('┅', ['Box Drawings Heavy Triple Dash Horizontal', 'Box Drawings Heavy Triple Dash Horizontal', 'Box Drawings Heavy Triple Dash Horizontal']);
  this.executeCharTest('┆', ['Box Drawings Light Triple Dash Vertical', 'Box Drawings Light Triple Dash Vertical', 'Box Drawings Light Triple Dash Vertical']);
  this.executeCharTest('┇', ['Box Drawings Heavy Triple Dash Vertical', 'Box Drawings Heavy Triple Dash Vertical', 'Box Drawings Heavy Triple Dash Vertical']);
  this.executeCharTest('┈', ['Box Drawings Light Quadruple Dash Horizontal', 'Box Drawings Light Quadruple Dash Horizontal', 'Box Drawings Light Quadruple Dash Horizontal']);
  this.executeCharTest('┉', ['Box Drawings Heavy Quadruple Dash Horizontal', 'Box Drawings Heavy Quadruple Dash Horizontal', 'Box Drawings Heavy Quadruple Dash Horizontal']);
  this.executeCharTest('┊', ['Box Drawings Light Quadruple Dash Vertical', 'Box Drawings Light Quadruple Dash Vertical', 'Box Drawings Light Quadruple Dash Vertical']);
  this.executeCharTest('┋', ['Box Drawings Heavy Quadruple Dash Vertical', 'Box Drawings Heavy Quadruple Dash Vertical', 'Box Drawings Heavy Quadruple Dash Vertical']);
  this.executeCharTest('┌', ['Box Drawings Light Down und Right', 'Box Drawings Light Down und Right', 'Box Drawings Light Down und Right']);
  this.executeCharTest('┍', ['Box Drawings Down Light und Right Heavy', 'Box Drawings Down Light und Right Heavy', 'Box Drawings Down Light und Right Heavy']);
  this.executeCharTest('┎', ['Box Drawings Down Heavy und Right Light', 'Box Drawings Down Heavy und Right Light', 'Box Drawings Down Heavy und Right Light']);
  this.executeCharTest('┏', ['Box Drawings Heavy Down und Right', 'Box Drawings Heavy Down und Right', 'Box Drawings Heavy Down und Right']);
  this.executeCharTest('┐', ['Box Drawings Light Down und Links', 'Box Drawings Light Down und Links', 'Box Drawings Light Down und Links']);
  this.executeCharTest('┑', ['Box Drawings Down Light und Left Heavy', 'Box Drawings Down Light und Left Heavy', 'Box Drawings Down Light und Left Heavy']);
  this.executeCharTest('┒', ['Box Drawings Down Heavy und Left Light', 'Box Drawings Down Heavy und Left Light', 'Box Drawings Down Heavy und Left Light']);
  this.executeCharTest('┓', ['Box Drawings Heavy Down und Left', 'Box Drawings Heavy Down und Left', 'Box Drawings Heavy Down und Left']);
  this.executeCharTest('└', ['Box-Zeichnungen leuchten auf und richtig', 'Box-Zeichnungen leuchten auf und richtig', 'Box-Zeichnungen leuchten auf und richtig']);
  this.executeCharTest('┕', ['Box Drawings Up Light und Right Heavy', 'Box Drawings Up Light und Right Heavy', 'Box Drawings Up Light und Right Heavy']);
  this.executeCharTest('┖', ['Box Drawings Up Heavy und Right Light', 'Box Drawings Up Heavy und Right Light', 'Box Drawings Up Heavy und Right Light']);
  this.executeCharTest('┗', ['Box Drawings Heavy Up und Right', 'Box Drawings Heavy Up und Right', 'Box Drawings Heavy Up und Right']);
  this.executeCharTest('┘', ['Box-Zeichnungen leuchten und links', 'Box-Zeichnungen leuchten und links', 'Box-Zeichnungen leuchten und links']);
  this.executeCharTest('┙', ['Box Drawings Up Light und Left Heavy', 'Box Drawings Up Light und Left Heavy', 'Box Drawings Up Light und Left Heavy']);
  this.executeCharTest('┚', ['Box Drawings Up Heavy und Left Light', 'Box Drawings Up Heavy und Left Light', 'Box Drawings Up Heavy und Left Light']);
  this.executeCharTest('┛', ['Box Drawings Heavy Up und Links', 'Box Drawings Heavy Up und Links', 'Box Drawings Heavy Up und Links']);
  this.executeCharTest('├', ['Box Drawings Light Vertical und Right', 'Box Drawings Light Vertical und Right', 'Box Drawings Light Vertical und Right']);
  this.executeCharTest('┝', ['Box Drawings Vertical Light und Right Heavy', 'Box Drawings Vertical Light und Right Heavy', 'Box Drawings Vertical Light und Right Heavy']);
  this.executeCharTest('┞', ['Box Drawings Up Heavy und Right Down Light', 'Box Drawings Up Heavy und Right Down Light', 'Box Drawings Up Heavy und Right Down Light']);
  this.executeCharTest('┟', ['Box Drawings Down Heavy und Right Up Light', 'Box Drawings Down Heavy und Right Up Light', 'Box Drawings Down Heavy und Right Up Light']);
  this.executeCharTest('┠', ['Box Drawings Vertical Heavy und Right Light', 'Box Drawings Vertical Heavy und Right Light', 'Box Drawings Vertical Heavy und Right Light']);
  this.executeCharTest('┡', ['Box Drawings Down Light und Right Up Heavy', 'Box Drawings Down Light und Right Up Heavy', 'Box Drawings Down Light und Right Up Heavy']);
  this.executeCharTest('┢', ['Box Drawings Up Light und Right Down Heavy', 'Box Drawings Up Light und Right Down Heavy', 'Box Drawings Up Light und Right Down Heavy']);
  this.executeCharTest('┣', ['Box Drawings Heavy Vertical und Right', 'Box Drawings Heavy Vertical und Right', 'Box Drawings Heavy Vertical und Right']);
  this.executeCharTest('┤', ['Box Drawings Light Vertical und Left', 'Box Drawings Light Vertical und Left', 'Box Drawings Light Vertical und Left']);
  this.executeCharTest('┥', ['Box Drawings Vertical Light und Left Heavy', 'Box Drawings Vertical Light und Left Heavy', 'Box Drawings Vertical Light und Left Heavy']);
  this.executeCharTest('┦', ['Box Drawings Up Heavy und Left Down Light', 'Box Drawings Up Heavy und Left Down Light', 'Box Drawings Up Heavy und Left Down Light']);
  this.executeCharTest('┧', ['Box Drawings Down Heavy und Left Up Light', 'Box Drawings Down Heavy und Left Up Light', 'Box Drawings Down Heavy und Left Up Light']);
  this.executeCharTest('┨', ['Box Drawings Vertical Heavy und Left Light', 'Box Drawings Vertical Heavy und Left Light', 'Box Drawings Vertical Heavy und Left Light']);
  this.executeCharTest('┩', ['Box Drawings Down Light und Left Up Heavy', 'Box Drawings Down Light und Left Up Heavy', 'Box Drawings Down Light und Left Up Heavy']);
  this.executeCharTest('┪', ['Box Drawings Up Light und Left Down Heavy', 'Box Drawings Up Light und Left Down Heavy', 'Box Drawings Up Light und Left Down Heavy']);
  this.executeCharTest('┫', ['Box Drawings Heavy Vertical und Left', 'Box Drawings Heavy Vertical und Left', 'Box Drawings Heavy Vertical und Left']);
  this.executeCharTest('┬', ['Box-Zeichnungen leicht und horizontal', 'Box-Zeichnungen leicht und horizontal', 'Box-Zeichnungen leicht und horizontal']);
  this.executeCharTest('┭', ['Box Drawings Left Heavy und Right Down Light', 'Box Drawings Left Heavy und Right Down Light', 'Box Drawings Left Heavy und Right Down Light']);
  this.executeCharTest('┮', ['Box Drawings Right Heavy und Left Down Light', 'Box Drawings Right Heavy und Left Down Light', 'Box Drawings Right Heavy und Left Down Light']);
  this.executeCharTest('┯', ['Box Drawings Down Light und Horizontal Heavy', 'Box Drawings Down Light und Horizontal Heavy', 'Box Drawings Down Light und Horizontal Heavy']);
  this.executeCharTest('┰', ['Box-Zeichnungen für schweres und horizontales Licht', 'Box-Zeichnungen für schweres und horizontales Licht', 'Box-Zeichnungen für schweres und horizontales Licht']);
  this.executeCharTest('┱', ['Box Drawings Right Light und Left Down Heavy', 'Box Drawings Right Light und Left Down Heavy', 'Box Drawings Right Light und Left Down Heavy']);
  this.executeCharTest('┲', ['Box Drawings Left Light und Right Down Heavy', 'Box Drawings Left Light und Right Down Heavy', 'Box Drawings Left Light und Right Down Heavy']);
  this.executeCharTest('┳', ['Box-Zeichnungen nach unten und horizontal', 'Box-Zeichnungen nach unten und horizontal', 'Box-Zeichnungen nach unten und horizontal']);
  this.executeCharTest('┴', ['Box-Zeichnungen leuchten und horizontal', 'Box-Zeichnungen leuchten und horizontal', 'Box-Zeichnungen leuchten und horizontal']);
  this.executeCharTest('┵', ['Box Drawings Left Heavy und Right Up Light', 'Box Drawings Left Heavy und Right Up Light', 'Box Drawings Left Heavy und Right Up Light']);
  this.executeCharTest('┶', ['Box Drawings Right Heavy und Left Up Light', 'Box Drawings Right Heavy und Left Up Light', 'Box Drawings Right Heavy und Left Up Light']);
  this.executeCharTest('┷', ['Box Drawings Up Light und Horizontal Heavy', 'Box Drawings Up Light und Horizontal Heavy', 'Box Drawings Up Light und Horizontal Heavy']);
  this.executeCharTest('┸', ['Box-Zeichnungen für schweres und horizontales Licht', 'Box-Zeichnungen für schweres und horizontales Licht', 'Box-Zeichnungen für schweres und horizontales Licht']);
  this.executeCharTest('┹', ['Box Drawings Right Light und Left Up Heavy', 'Box Drawings Right Light und Left Up Heavy', 'Box Drawings Right Light und Left Up Heavy']);
  this.executeCharTest('┺', ['Box Drawings Left Light und Right Up Heavy', 'Box Drawings Left Light und Right Up Heavy', 'Box Drawings Left Light und Right Up Heavy']);
  this.executeCharTest('┻', ['Box-Zeichnungen schwer und horizontal', 'Box-Zeichnungen schwer und horizontal', 'Box-Zeichnungen schwer und horizontal']);
  this.executeCharTest('┼', ['Box Drawings Light vertikal und horizontal', 'Box Drawings Light vertikal und horizontal', 'Box Drawings Light vertikal und horizontal']);
  this.executeCharTest('┽', ['Kastenzeichnungen links schweres und rechtes vertikales Licht', 'Kastenzeichnungen links schweres und rechtes vertikales Licht', 'Kastenzeichnungen links schweres und rechtes vertikales Licht']);
  this.executeCharTest('┾', ['Box Drawings Right Heavy und Left Vertical Light', 'Box Drawings Right Heavy und Left Vertical Light', 'Box Drawings Right Heavy und Left Vertical Light']);
  this.executeCharTest('┿', ['Box Drawings Vertical Light und Horizontal Heavy', 'Box Drawings Vertical Light und Horizontal Heavy', 'Box Drawings Vertical Light und Horizontal Heavy']);
  this.executeCharTest('╀', ['Box Drawings Up Heavy und Down Horizontal Light', 'Box Drawings Up Heavy und Down Horizontal Light', 'Box Drawings Up Heavy und Down Horizontal Light']);
  this.executeCharTest('╁', ['Box Drawings Down Heavy und Up Horizontal Light', 'Box Drawings Down Heavy und Up Horizontal Light', 'Box Drawings Down Heavy und Up Horizontal Light']);
  this.executeCharTest('╂', ['Kastenzeichnungen Vertikales schweres und horizontales Licht', 'Kastenzeichnungen Vertikales schweres und horizontales Licht', 'Kastenzeichnungen Vertikales schweres und horizontales Licht']);
  this.executeCharTest('╃', ['Box Drawings Left Up Heavy und Right Down Light', 'Box Drawings Left Up Heavy und Right Down Light', 'Box Drawings Left Up Heavy und Right Down Light']);
  this.executeCharTest('╄', ['Box Drawings Right Up Heavy und Left Down Light', 'Box Drawings Right Up Heavy und Left Down Light', 'Box Drawings Right Up Heavy und Left Down Light']);
  this.executeCharTest('╅', ['Box Drawings Left Down Heavy und Right Up Light', 'Box Drawings Left Down Heavy und Right Up Light', 'Box Drawings Left Down Heavy und Right Up Light']);
  this.executeCharTest('╆', ['Box Drawings Right Down Heavy und Left Up Light', 'Box Drawings Right Down Heavy und Left Up Light', 'Box Drawings Right Down Heavy und Left Up Light']);
  this.executeCharTest('╇', ['Box Drawings Down Light und Up Horizontal Heavy', 'Box Drawings Down Light und Up Horizontal Heavy', 'Box Drawings Down Light und Up Horizontal Heavy']);
  this.executeCharTest('╈', ['Box Drawings Up Light und Down Horizontal Heavy', 'Box Drawings Up Light und Down Horizontal Heavy', 'Box Drawings Up Light und Down Horizontal Heavy']);
  this.executeCharTest('╉', ['Box Drawings Right Light und Left Vertical Heavy', 'Box Drawings Right Light und Left Vertical Heavy', 'Box Drawings Right Light und Left Vertical Heavy']);
  this.executeCharTest('╊', ['Box Drawings Left Light und Right Vertical Heavy', 'Box Drawings Left Light und Right Vertical Heavy', 'Box Drawings Left Light und Right Vertical Heavy']);
  this.executeCharTest('╋', ['Box Drawings Heavy vertikal und horizontal', 'Box Drawings Heavy vertikal und horizontal', 'Box Drawings Heavy vertikal und horizontal']);
  this.executeCharTest('╌', ['Box Drawings Light Double Dash Horizontal', 'Box Drawings Light Double Dash Horizontal', 'Box Drawings Light Double Dash Horizontal']);
  this.executeCharTest('╍', ['Box Drawings Heavy Double Dash Horizontal', 'Box Drawings Heavy Double Dash Horizontal', 'Box Drawings Heavy Double Dash Horizontal']);
  this.executeCharTest('╎', ['Box Drawings Light Double Dash Vertical', 'Box Drawings Light Double Dash Vertical', 'Box Drawings Light Double Dash Vertical']);
  this.executeCharTest('╏', ['Box Drawings Heavy Double Dash Vertical', 'Box Drawings Heavy Double Dash Vertical', 'Box Drawings Heavy Double Dash Vertical']);
  this.executeCharTest('═', ['Box-Zeichnungen doppelt horizontal', 'Box-Zeichnungen doppelt horizontal', 'Box-Zeichnungen doppelt horizontal']);
  this.executeCharTest('║', ['Box Drawings Double Vertical', 'Box Drawings Double Vertical', 'Box Drawings Double Vertical']);
  this.executeCharTest('╒', ['Box Drawings Down Single und Right Double', 'Box Drawings Down Single und Right Double', 'Box Drawings Down Single und Right Double']);
  this.executeCharTest('╓', ['Box Drawings Down Double und Right Single', 'Box Drawings Down Double und Right Single', 'Box Drawings Down Double und Right Single']);
  this.executeCharTest('╔', ['Box Drawings Double Down und Right', 'Box Drawings Double Down und Right', 'Box Drawings Double Down und Right']);
  this.executeCharTest('╕', ['Box Drawings Down Single und Left Double', 'Box Drawings Down Single und Left Double', 'Box Drawings Down Single und Left Double']);
  this.executeCharTest('╖', ['Box Drawings Down Double und Left Single', 'Box Drawings Down Double und Left Single', 'Box Drawings Down Double und Left Single']);
  this.executeCharTest('╗', ['Box Drawings Double Down und Links', 'Box Drawings Double Down und Links', 'Box Drawings Double Down und Links']);
  this.executeCharTest('╘', ['Box Drawings Up Single und Right Double', 'Box Drawings Up Single und Right Double', 'Box Drawings Up Single und Right Double']);
  this.executeCharTest('╙', ['Box Drawings Up Double und Right Single', 'Box Drawings Up Double und Right Single', 'Box Drawings Up Double und Right Single']);
  this.executeCharTest('╚', ['Box-Zeichnungen verdoppeln und rechts', 'Box-Zeichnungen verdoppeln und rechts', 'Box-Zeichnungen verdoppeln und rechts']);
  this.executeCharTest('╛', ['Box Drawings Up Single und Left Double', 'Box Drawings Up Single und Left Double', 'Box Drawings Up Single und Left Double']);
  this.executeCharTest('╜', ['Box Drawings Up Double und Left Single', 'Box Drawings Up Double und Left Single', 'Box Drawings Up Double und Left Single']);
  this.executeCharTest('╝', ['Box-Zeichnungen verdoppeln und links', 'Box-Zeichnungen verdoppeln und links', 'Box-Zeichnungen verdoppeln und links']);
  this.executeCharTest('╞', ['Box Drawings Vertical Single und Right Double', 'Box Drawings Vertical Single und Right Double', 'Box Drawings Vertical Single und Right Double']);
  this.executeCharTest('╟', ['Box Drawings Vertical Double und Right Single', 'Box Drawings Vertical Double und Right Single', 'Box Drawings Vertical Double und Right Single']);
  this.executeCharTest('╠', ['Box Drawings Double Vertical und Right', 'Box Drawings Double Vertical und Right', 'Box Drawings Double Vertical und Right']);
  this.executeCharTest('╡', ['Box Drawings Vertical Single und Left Double', 'Box Drawings Vertical Single und Left Double', 'Box Drawings Vertical Single und Left Double']);
  this.executeCharTest('╢', ['Box Drawings Vertical Double und Left Single', 'Box Drawings Vertical Double und Left Single', 'Box Drawings Vertical Double und Left Single']);
  this.executeCharTest('╣', ['Box Drawings Double Vertical und Left', 'Box Drawings Double Vertical und Left', 'Box Drawings Double Vertical und Left']);
  this.executeCharTest('╤', ['Box Drawings Down Single und Horizontal Double', 'Box Drawings Down Single und Horizontal Double', 'Box Drawings Down Single und Horizontal Double']);
  this.executeCharTest('╥', ['Box Drawings Down Double und Horizontal Single', 'Box Drawings Down Double und Horizontal Single', 'Box Drawings Down Double und Horizontal Single']);
  this.executeCharTest('╦', ['Box Drawings Double Down und Horizontal', 'Box Drawings Double Down und Horizontal', 'Box Drawings Double Down und Horizontal']);
  this.executeCharTest('╧', ['Box Drawings Up Single und Horizontal Double', 'Box Drawings Up Single und Horizontal Double', 'Box Drawings Up Single und Horizontal Double']);
  this.executeCharTest('╨', ['Box Drawings Up Double und Horizontal Single', 'Box Drawings Up Double und Horizontal Single', 'Box Drawings Up Double und Horizontal Single']);
  this.executeCharTest('╩', ['Box-Zeichnungen verdoppeln und horizontal', 'Box-Zeichnungen verdoppeln und horizontal', 'Box-Zeichnungen verdoppeln und horizontal']);
  this.executeCharTest('╪', ['Box Drawings Vertical Single und Horizontal Double', 'Box Drawings Vertical Single und Horizontal Double', 'Box Drawings Vertical Single und Horizontal Double']);
  this.executeCharTest('╫', ['Box Drawings Vertical Double und Horizontal Single', 'Box Drawings Vertical Double und Horizontal Single', 'Box Drawings Vertical Double und Horizontal Single']);
  this.executeCharTest('╬', ['Box-Zeichnungen doppelt vertikal und horizontal', 'Box-Zeichnungen doppelt vertikal und horizontal', 'Box-Zeichnungen doppelt vertikal und horizontal']);
  this.executeCharTest('╭', ['Box Drawings Light Arc Down und Right', 'Box Drawings Light Arc Down und Right', 'Box Drawings Light Arc Down und Right']);
  this.executeCharTest('╮', ['Box Drawings Light Arc Down und Links', 'Box Drawings Light Arc Down und Links', 'Box Drawings Light Arc Down und Links']);
  this.executeCharTest('╯', ['Box Drawings Light Arc Up und links', 'Box Drawings Light Arc Up und links', 'Box Drawings Light Arc Up und links']);
  this.executeCharTest('╰', ['Box Drawings Light Arc Up und rechts', 'Box Drawings Light Arc Up und rechts', 'Box Drawings Light Arc Up und rechts']);
  this.executeCharTest('╱', ['Box Drawings Light Diagonal Oben Rechts Nach Unten Links', 'Box Drawings Light Diagonal Oben Rechts Nach Unten Links', 'Box Drawings Light Diagonal Oben Rechts Nach Unten Links']);
  this.executeCharTest('╲', ['Box Drawings Light Diagonal von oben links nach rechts unten', 'Box Drawings Light Diagonal von oben links nach rechts unten', 'Box Drawings Light Diagonal von oben links nach rechts unten']);
  this.executeCharTest('╳', ['Box Zeichnungen Light Diagonal Cross', 'Box Zeichnungen Light Diagonal Cross', 'Box Zeichnungen Light Diagonal Cross']);
  this.executeCharTest('╴', ['Box-Zeichnungen Light Left', 'Box-Zeichnungen Light Left', 'Box-Zeichnungen Light Left']);
  this.executeCharTest('╵', ['Box-Zeichnungen leuchten auf', 'Box-Zeichnungen leuchten auf', 'Box-Zeichnungen leuchten auf']);
  this.executeCharTest('╶', ['Box-Zeichnungen Light Right', 'Box-Zeichnungen Light Right', 'Box-Zeichnungen Light Right']);
  this.executeCharTest('╷', ['Box Drawings Light Down', 'Box Drawings Light Down', 'Box Drawings Light Down']);
  this.executeCharTest('╸', ['Box Drawings Heavy Left', 'Box Drawings Heavy Left', 'Box Drawings Heavy Left']);
  this.executeCharTest('╹', ['Box Drawings Heavy Up', 'Box Drawings Heavy Up', 'Box Drawings Heavy Up']);
  this.executeCharTest('╺', ['Box Drawings Heavy Right', 'Box Drawings Heavy Right', 'Box Drawings Heavy Right']);
  this.executeCharTest('╻', ['Box Drawings Heavy Down', 'Box Drawings Heavy Down', 'Box Drawings Heavy Down']);
  this.executeCharTest('╼', ['Box Drawings Light Left und Heavy Right', 'Box Drawings Light Left und Heavy Right', 'Box Drawings Light Left und Heavy Right']);
  this.executeCharTest('╽', ['Box Drawings Light Up und Heavy Down', 'Box Drawings Light Up und Heavy Down', 'Box Drawings Light Up und Heavy Down']);
  this.executeCharTest('╾', ['Box Drawings Heavy Left und Light Right', 'Box Drawings Heavy Left und Light Right', 'Box Drawings Heavy Left und Light Right']);
  this.executeCharTest('╿', ['Box Drawings Heavy Up und Light Down', 'Box Drawings Heavy Up und Light Down', 'Box Drawings Heavy Up und Light Down']);
  this.executeCharTest('▀', ['Block der oberen Hälfte', 'Block der oberen Hälfte', 'Block der oberen Hälfte']);
  this.executeCharTest('▁', ['Unterer achter Block', 'Unterer achter Block', 'Unterer achter Block']);
  this.executeCharTest('▂', ['Unterer Viertelblock', 'Unterer Viertelblock', 'Unterer Viertelblock']);
  this.executeCharTest('▃', ['Drei Achtel-Block senken', 'Drei Achtel-Block senken', 'Drei Achtel-Block senken']);
  this.executeCharTest('▄', ['Block der unteren Hälfte', 'Block der unteren Hälfte', 'Block der unteren Hälfte']);
  this.executeCharTest('▅', ['Fünf Achtel Block', 'Fünf Achtel Block', 'Fünf Achtel Block']);
  this.executeCharTest('▆', ['Unterer Dreiviertelblock', 'Unterer Dreiviertelblock', 'Unterer Dreiviertelblock']);
  this.executeCharTest('▇', ['Unterer Sieben Achtel-Block', 'Unterer Sieben Achtel-Block', 'Unterer Sieben Achtel-Block']);
  this.executeCharTest('█', ['Voller Block', 'Voller Block', 'Voller Block']);
  this.executeCharTest('▉', ['Linker Sieben Achtel Block', 'Linker Sieben Achtel Block', 'Linker Sieben Achtel Block']);
  this.executeCharTest('▊', ['Linker Dreiviertelblock', 'Linker Dreiviertelblock', 'Linker Dreiviertelblock']);
  this.executeCharTest('▋', ['Linker Block mit fünf Achteln', 'Linker Block mit fünf Achteln', 'Linker Block mit fünf Achteln']);
  this.executeCharTest('▌', ['Linke halbe Block', 'Linke halbe Block', 'Linke halbe Block']);
  this.executeCharTest('▍', ['Block drei Achtel', 'Block drei Achtel', 'Block drei Achtel']);
  this.executeCharTest('▎', ['Linke einen Viertelblock', 'Linke einen Viertelblock', 'Linke einen Viertelblock']);
  this.executeCharTest('▏', ['Linker achter Block', 'Linker achter Block', 'Linker achter Block']);
  this.executeCharTest('▐', ['Rechte halbe Block', 'Rechte halbe Block', 'Rechte halbe Block']);
  this.executeCharTest('░', ['Lichtschatten', 'Lichtschatten', 'Lichtschatten']);
  this.executeCharTest('▒', ['Mittlere Schatten', 'Mittlere Schatten', 'Mittlere Schatten']);
  this.executeCharTest('▓', ['Dunkler Schatten', 'Dunkler Schatten', 'Dunkler Schatten']);
  this.executeCharTest('▔', ['Oberer achter Block', 'Oberer achter Block', 'Oberer achter Block']);
  this.executeCharTest('▕', ['rechter achter Block', 'rechter achter Block', 'rechter achter Block']);
  this.executeCharTest('▖', ['Quadrant unten links', 'Quadrant unten links', 'Quadrant unten links']);
  this.executeCharTest('▗', ['Quadrant rechts unten', 'Quadrant rechts unten', 'Quadrant rechts unten']);
  this.executeCharTest('▘', ['Quadrant oben links', 'Quadrant oben links', 'Quadrant oben links']);
  this.executeCharTest('▙', ['Quadrant oben links und unten links und rechts unten', 'Quadrant oben links und unten links und rechts unten', 'Quadrant oben links und unten links und rechts unten']);
  this.executeCharTest('▚', ['Quadrant oben links und rechts unten', 'Quadrant oben links und rechts unten', 'Quadrant oben links und rechts unten']);
  this.executeCharTest('▛', ['Quadrant oben links und oben rechts und unten links', 'Quadrant oben links und oben rechts und unten links', 'Quadrant oben links und oben rechts und unten links']);
  this.executeCharTest('▜', ['Quadrant oben links und oben rechts und unten rechts', 'Quadrant oben links und oben rechts und unten rechts', 'Quadrant oben links und oben rechts und unten rechts']);
  this.executeCharTest('▝', ['Quadrant oben rechts', 'Quadrant oben rechts', 'Quadrant oben rechts']);
  this.executeCharTest('▞', ['Quadrant oben rechts und unten links', 'Quadrant oben rechts und unten links', 'Quadrant oben rechts und unten links']);
  this.executeCharTest('▟', ['Quadrant oben rechts und unten links und unten rechts', 'Quadrant oben rechts und unten links und unten rechts', 'Quadrant oben rechts und unten links und unten rechts']);
  this.executeCharTest('■', ['Schwarzes Quadrat', 'Schwarzes Quadrat', 'Schwarzes Quadrat']);
  this.executeCharTest('□', ['Weißes Quadrat', 'Weißes Quadrat', 'Weißes Quadrat']);
  this.executeCharTest('▢', ['Weißes Quadrat mit abgerundeten Ecken', 'Weißes Quadrat mit abgerundeten Ecken', 'Weißes Quadrat mit abgerundeten Ecken']);
  this.executeCharTest('▣', ['Weißes Quadrat, das schwarzes kleines Quadrat enthält', 'Weißes Quadrat, das schwarzes kleines Quadrat enthält', 'Weißes Quadrat, das schwarzes kleines Quadrat enthält']);
  this.executeCharTest('▤', ['Quadrat mit horizontaler Füllung', 'Quadrat mit horizontaler Füllung', 'Quadrat mit horizontaler Füllung']);
  this.executeCharTest('▥', ['Quadrat mit vertikaler Füllung', 'Quadrat mit vertikaler Füllung', 'Quadrat mit vertikaler Füllung']);
  this.executeCharTest('▦', ['Quadrat mit orthogonaler Schraffurfüllung', 'Quadrat mit orthogonaler Schraffurfüllung', 'Quadrat mit orthogonaler Schraffurfüllung']);
  this.executeCharTest('▧', ['Quadrat mit Oben links nach rechts unten füllen', 'Quadrat mit Oben links nach rechts unten füllen', 'Quadrat mit Oben links nach rechts unten füllen']);
  this.executeCharTest('▨', ['Quadrat mit oberer rechter bis unterer linker Füllung', 'Quadrat mit oberer rechter bis unterer linker Füllung', 'Quadrat mit oberer rechter bis unterer linker Füllung']);
  this.executeCharTest('▩', ['Quadrat mit diagonaler Schraffurfüllung', 'Quadrat mit diagonaler Schraffurfüllung', 'Quadrat mit diagonaler Schraffurfüllung']);
  this.executeCharTest('▪', ['Schwarzes kleines Quadrat', 'Schwarzes kleines Quadrat', 'Schwarzes kleines Quadrat']);
  this.executeCharTest('▫', ['Weißes kleines Quadrat', 'Weißes kleines Quadrat', 'Weißes kleines Quadrat']);
  this.executeCharTest('▬', ['Schwarzes Rechteck', 'Schwarzes Rechteck', 'Schwarzes Rechteck']);
  this.executeCharTest('▭', ['Weißes Rechteck', 'Weißes Rechteck', 'Weißes Rechteck']);
  this.executeCharTest('▮', ['Schwarzes vertikales Rechteck', 'Schwarzes vertikales Rechteck', 'Schwarzes vertikales Rechteck']);
  this.executeCharTest('▯', ['Weißes vertikales Rechteck', 'Weißes vertikales Rechteck', 'Weißes vertikales Rechteck']);
  this.executeCharTest('▰', ['Schwarzes Parallelogramm', 'Schwarzes Parallelogramm', 'Schwarzes Parallelogramm']);
  this.executeCharTest('▱', ['Weißes Parallelogramm', 'Weißes Parallelogramm', 'Weißes Parallelogramm']);
  this.executeCharTest('▲', ['Schwarzes nach oben zeigendes Dreieck', 'Schwarzes nach oben zeigendes Dreieck', 'Schwarzes nach oben zeigendes Dreieck']);
  this.executeCharTest('△', ['Weißes nach oben zeigendes Dreieck', 'Weißes nach oben zeigendes Dreieck', 'Weißes nach oben zeigendes Dreieck']);
  this.executeCharTest('▴', ['Schwarzes nach oben zeigendes kleines Dreieck', 'Schwarzes nach oben zeigendes kleines Dreieck', 'Schwarzes nach oben zeigendes kleines Dreieck']);
  this.executeCharTest('▵', ['Weißes nach oben zeigendes kleines Dreieck', 'Weißes nach oben zeigendes kleines Dreieck', 'Weißes nach oben zeigendes kleines Dreieck']);
  this.executeCharTest('▶', ['Schwarzes rechtwinkliges Dreieck', 'Schwarzes rechtwinkliges Dreieck', 'Schwarzes rechtwinkliges Dreieck']);
  this.executeCharTest('▷', ['Weißes rechtwinkliges Dreieck', 'Weißes rechtwinkliges Dreieck', 'Weißes rechtwinkliges Dreieck']);
  this.executeCharTest('▸', ['Schwarzes nach rechts zeigendes kleines Dreieck', 'Schwarzes nach rechts zeigendes kleines Dreieck', 'Schwarzes nach rechts zeigendes kleines Dreieck']);
  this.executeCharTest('▹', ['Weißes nach rechts zeigendes kleines Dreieck', 'Weißes nach rechts zeigendes kleines Dreieck', 'Weißes nach rechts zeigendes kleines Dreieck']);
  this.executeCharTest('►', ['Schwarzer nach rechts zeigender Zeiger', 'Schwarzer nach rechts zeigender Zeiger', 'Schwarzer nach rechts zeigender Zeiger']);
  this.executeCharTest('▻', ['Weißer nach rechts zeigender Zeiger', 'Weißer nach rechts zeigender Zeiger', 'Weißer nach rechts zeigender Zeiger']);
  this.executeCharTest('▼', ['Schwarzes Abwärtsdreieck', 'Schwarzes Abwärtsdreieck', 'Schwarzes Abwärtsdreieck']);
  this.executeCharTest('▽', ['Weißes nach unten zeigendes Dreieck', 'Weißes nach unten zeigendes Dreieck', 'Weißes nach unten zeigendes Dreieck']);
  this.executeCharTest('▾', ['Schwarzes, nach unten zeigendes kleines Dreieck', 'Schwarzes, nach unten zeigendes kleines Dreieck', 'Schwarzes, nach unten zeigendes kleines Dreieck']);
  this.executeCharTest('▿', ['Weißes kleines Dreieck', 'Weißes kleines Dreieck', 'Weißes kleines Dreieck']);
  this.executeCharTest('◀', ['Schwarzes nach links zeigendes Dreieck', 'Schwarzes nach links zeigendes Dreieck', 'Schwarzes nach links zeigendes Dreieck']);
  this.executeCharTest('◁', ['Weißes nach links zeigendes Dreieck', 'Weißes nach links zeigendes Dreieck', 'Weißes nach links zeigendes Dreieck']);
  this.executeCharTest('◂', ['Schwarzes nach links zeigendes kleines Dreieck', 'Schwarzes nach links zeigendes kleines Dreieck', 'Schwarzes nach links zeigendes kleines Dreieck']);
  this.executeCharTest('◃', ['Weißes nach links zeigendes kleines Dreieck', 'Weißes nach links zeigendes kleines Dreieck', 'Weißes nach links zeigendes kleines Dreieck']);
  this.executeCharTest('◄', ['Schwarzer nach links zeigender Zeiger', 'Schwarzer nach links zeigender Zeiger', 'Schwarzer nach links zeigender Zeiger']);
  this.executeCharTest('◅', ['Weißer nach links zeigender Zeiger', 'Weißer nach links zeigender Zeiger', 'Weißer nach links zeigender Zeiger']);
  this.executeCharTest('◆', ['Schwarzer Diamant', 'Schwarzer Diamant', 'Schwarzer Diamant']);
  this.executeCharTest('◇', ['Weißer Diamant', 'Weißer Diamant', 'Weißer Diamant']);
  this.executeCharTest('◈', ['Weißer Diamant mit schwarzem kleinem Diamant', 'Weißer Diamant mit schwarzem kleinem Diamant', 'Weißer Diamant mit schwarzem kleinem Diamant']);
  this.executeCharTest('◉', ['Fischauge', 'Fischauge', 'Fischauge']);
  this.executeCharTest('◊', ['Raute', 'Raute', 'Raute']);
  this.executeCharTest('○', ['Weißer Kreis', 'Weißer Kreis', 'Weißer Kreis']);
  this.executeCharTest('◌', ['Gepunkteter Kreis', 'Gepunkteter Kreis', 'Gepunkteter Kreis']);
  this.executeCharTest('◍', ['Kreis mit vertikaler Füllung', 'Kreis mit vertikaler Füllung', 'Kreis mit vertikaler Füllung']);
  this.executeCharTest('◎', ['Bullseye', 'Bullseye', 'Bullseye']);
  this.executeCharTest('●', ['Schwarzer Kreis', 'Schwarzer Kreis', 'Schwarzer Kreis']);
  this.executeCharTest('◐', ['Kreis mit linker Hälfte schwarz', 'Kreis mit linker Hälfte schwarz', 'Kreis mit linker Hälfte schwarz']);
  this.executeCharTest('◑', ['Kreis mit rechter Hälfte schwarz', 'Kreis mit rechter Hälfte schwarz', 'Kreis mit rechter Hälfte schwarz']);
  this.executeCharTest('◒', ['Kreis mit unterer Hälfte Schwarz', 'Kreis mit unterer Hälfte Schwarz', 'Kreis mit unterer Hälfte Schwarz']);
  this.executeCharTest('◓', ['Kreis mit oberer Hälfte schwarz', 'Kreis mit oberer Hälfte schwarz', 'Kreis mit oberer Hälfte schwarz']);
  this.executeCharTest('◔', ['Kreis mit oberem rechten Quadranten schwarz', 'Kreis mit oberem rechten Quadranten schwarz', 'Kreis mit oberem rechten Quadranten schwarz']);
  this.executeCharTest('◕', ['Kreis mit ganzem oberen linken Quadranten schwarz', 'Kreis mit ganzem oberen linken Quadranten schwarz', 'Kreis mit ganzem oberen linken Quadranten schwarz']);
  this.executeCharTest('◖', ['Linker halber schwarzer Kreis', 'Linker halber schwarzer Kreis', 'Linker halber schwarzer Kreis']);
  this.executeCharTest('◗', ['rechter halber schwarzer Kreis', 'rechter halber schwarzer Kreis', 'rechter halber schwarzer Kreis']);
  this.executeCharTest('◘', ['Inverse Kugel', 'Inverse Kugel', 'Inverse Kugel']);
  this.executeCharTest('◙', ['Inverse weißer Kreis', 'Inverse weißer Kreis', 'Inverse weißer Kreis']);
  this.executeCharTest('◚', ['Umgekehrter weißer Kreis der oberen Hälfte', 'Umgekehrter weißer Kreis der oberen Hälfte', 'Umgekehrter weißer Kreis der oberen Hälfte']);
  this.executeCharTest('◛', ['Inverser weißer Kreis der unteren Hälfte', 'Inverser weißer Kreis der unteren Hälfte', 'Inverser weißer Kreis der unteren Hälfte']);
  this.executeCharTest('◜', ['Kreisbogen des oberen linken Quadranten', 'Kreisbogen des oberen linken Quadranten', 'Kreisbogen des oberen linken Quadranten']);
  this.executeCharTest('◝', ['Kreisbogen im oberen rechten Quadranten', 'Kreisbogen im oberen rechten Quadranten', 'Kreisbogen im oberen rechten Quadranten']);
  this.executeCharTest('◞', ['Kreisbogen des rechten unteren Quadranten', 'Kreisbogen des rechten unteren Quadranten', 'Kreisbogen des rechten unteren Quadranten']);
  this.executeCharTest('◟', ['Kreisbogen des unteren linken Quadranten', 'Kreisbogen des unteren linken Quadranten', 'Kreisbogen des unteren linken Quadranten']);
  this.executeCharTest('◠', ['Oberer Halbkreis', 'Oberer Halbkreis', 'Oberer Halbkreis']);
  this.executeCharTest('◡', ['Unterer Halbkreis', 'Unterer Halbkreis', 'Unterer Halbkreis']);
  this.executeCharTest('◢', ['Schwarzes rechtes Dreieck', 'Schwarzes rechtes Dreieck', 'Schwarzes rechtes Dreieck']);
  this.executeCharTest('◣', ['Schwarzes unteres linkes Dreieck', 'Schwarzes unteres linkes Dreieck', 'Schwarzes unteres linkes Dreieck']);
  this.executeCharTest('◤', ['Schwarzes oberes linkes Dreieck', 'Schwarzes oberes linkes Dreieck', 'Schwarzes oberes linkes Dreieck']);
  this.executeCharTest('◥', ['Schwarzes rechtes Dreieck', 'Schwarzes rechtes Dreieck', 'Schwarzes rechtes Dreieck']);
  this.executeCharTest('◦', ['Weiße Kugel', 'Weiße Kugel', 'Weiße Kugel']);
  this.executeCharTest('◧', ['Quadrat mit linker Hälfte schwarz', 'Quadrat mit linker Hälfte schwarz', 'Quadrat mit linker Hälfte schwarz']);
  this.executeCharTest('◨', ['Quadrat mit rechter Hälfte schwarz', 'Quadrat mit rechter Hälfte schwarz', 'Quadrat mit rechter Hälfte schwarz']);
  this.executeCharTest('◩', ['Quadrat mit der oberen linken Diagonalenhälfte schwarz', 'Quadrat mit der oberen linken Diagonalenhälfte schwarz', 'Quadrat mit der oberen linken Diagonalenhälfte schwarz']);
  this.executeCharTest('◪', ['Quadrat mit unterer rechter diagonaler Hälfte schwarz', 'Quadrat mit unterer rechter diagonaler Hälfte schwarz', 'Quadrat mit unterer rechter diagonaler Hälfte schwarz']);
  this.executeCharTest('◫', ['Weißes Quadrat mit senkrechter Linie', 'Weißes Quadrat mit senkrechter Linie', 'Weißes Quadrat mit senkrechter Linie']);
  this.executeCharTest('◬', ['Weißes nach oben zeigendes Dreieck mit Punkt', 'Weißes nach oben zeigendes Dreieck mit Punkt', 'Weißes nach oben zeigendes Dreieck mit Punkt']);
  this.executeCharTest('◭', ['Aufwärtszeigendes Dreieck mit linker Hälfte schwarz', 'Aufwärtszeigendes Dreieck mit linker Hälfte schwarz', 'Aufwärtszeigendes Dreieck mit linker Hälfte schwarz']);
  this.executeCharTest('◮', ['Aufwärtszeigendes Dreieck mit rechter Hälfte schwarz', 'Aufwärtszeigendes Dreieck mit rechter Hälfte schwarz', 'Aufwärtszeigendes Dreieck mit rechter Hälfte schwarz']);
  this.executeCharTest('◯', ['Großer Kreis', 'Großer Kreis', 'Großer Kreis']);
  this.executeCharTest('◰', ['Weißes Quadrat mit oberem linken Quadranten', 'Weißes Quadrat mit oberem linken Quadranten', 'Weißes Quadrat mit oberem linken Quadranten']);
  this.executeCharTest('◱', ['Weißes Quadrat mit unterem linken Quadranten', 'Weißes Quadrat mit unterem linken Quadranten', 'Weißes Quadrat mit unterem linken Quadranten']);
  this.executeCharTest('◲', ['Weißes Quadrat mit unterem rechten Quadranten', 'Weißes Quadrat mit unterem rechten Quadranten', 'Weißes Quadrat mit unterem rechten Quadranten']);
  this.executeCharTest('◳', ['Weißes Quadrat mit rechtem oberen Quadranten', 'Weißes Quadrat mit rechtem oberen Quadranten', 'Weißes Quadrat mit rechtem oberen Quadranten']);
  this.executeCharTest('◴', ['Weißer Kreis mit oberem linkem Quadranten', 'Weißer Kreis mit oberem linkem Quadranten', 'Weißer Kreis mit oberem linkem Quadranten']);
  this.executeCharTest('◵', ['Weißer Kreis mit unterem linken Quadranten', 'Weißer Kreis mit unterem linken Quadranten', 'Weißer Kreis mit unterem linken Quadranten']);
  this.executeCharTest('◶', ['Weißer Kreis mit unterem rechten Quadranten', 'Weißer Kreis mit unterem rechten Quadranten', 'Weißer Kreis mit unterem rechten Quadranten']);
  this.executeCharTest('◷', ['Weißer Kreis mit rechtem oberen Quadranten', 'Weißer Kreis mit rechtem oberen Quadranten', 'Weißer Kreis mit rechtem oberen Quadranten']);
  this.executeCharTest('◸', ['Oberes linkes Dreieck', 'Oberes linkes Dreieck', 'Oberes linkes Dreieck']);
  this.executeCharTest('◹', ['Oberes rechtes Dreieck', 'Oberes rechtes Dreieck', 'Oberes rechtes Dreieck']);
  this.executeCharTest('◺', ['Unteres linkes Dreieck', 'Unteres linkes Dreieck', 'Unteres linkes Dreieck']);
  this.executeCharTest('◻', ['Weißes mittleres Quadrat', 'Weißes mittleres Quadrat', 'Weißes mittleres Quadrat']);
  this.executeCharTest('◼', ['Schwarzes mittleres Quadrat', 'Schwarzes mittleres Quadrat', 'Schwarzes mittleres Quadrat']);
  this.executeCharTest('◽', ['Weißes mittleres kleines Quadrat', 'Weißes mittleres kleines Quadrat', 'Weißes mittleres kleines Quadrat']);
  this.executeCharTest('◾', ['Schwarzes mittleres kleines Quadrat', 'Schwarzes mittleres kleines Quadrat', 'Schwarzes mittleres kleines Quadrat']);
  this.executeCharTest('◿', ['Unteres rechtes Dreieck', 'Unteres rechtes Dreieck', 'Unteres rechtes Dreieck']);
  this.executeCharTest('⬒', ['Quadrat mit oberer Hälfte schwarz', 'Quadrat mit oberer Hälfte schwarz', 'Quadrat mit oberer Hälfte schwarz']);
  this.executeCharTest('⬓', ['Quadrat mit unterer Hälfte schwarz', 'Quadrat mit unterer Hälfte schwarz', 'Quadrat mit unterer Hälfte schwarz']);
  this.executeCharTest('⬔', ['Quadrat mit oberer rechter diagonaler Hälfte schwarz', 'Quadrat mit oberer rechter diagonaler Hälfte schwarz', 'Quadrat mit oberer rechter diagonaler Hälfte schwarz']);
  this.executeCharTest('⬕', ['Quadrat mit unterer linker diagonaler Hälfte schwarz', 'Quadrat mit unterer linker diagonaler Hälfte schwarz', 'Quadrat mit unterer linker diagonaler Hälfte schwarz']);
  this.executeCharTest('⬖', ['Diamant mit linker Hälfte schwarz', 'Diamant mit linker Hälfte schwarz', 'Diamant mit linker Hälfte schwarz']);
  this.executeCharTest('⬗', ['Diamant mit rechter Hälfte schwarz', 'Diamant mit rechter Hälfte schwarz', 'Diamant mit rechter Hälfte schwarz']);
  this.executeCharTest('⬘', ['Diamant mit oberer Hälfte schwarz', 'Diamant mit oberer Hälfte schwarz', 'Diamant mit oberer Hälfte schwarz']);
  this.executeCharTest('⬙', ['Diamant mit unterer Hälfte schwarz', 'Diamant mit unterer Hälfte schwarz', 'Diamant mit unterer Hälfte schwarz']);
  this.executeCharTest('⬚', ['Gepunktetes Quadrat', 'Gepunktetes Quadrat', 'Gepunktetes Quadrat']);
  this.executeCharTest('⬛', ['Schwarzes großes Quadrat', 'Schwarzes großes Quadrat', 'Schwarzes großes Quadrat']);
  this.executeCharTest('⬜', ['Weißes großes Quadrat', 'Weißes großes Quadrat', 'Weißes großes Quadrat']);
  this.executeCharTest('⬝', ['Schwarzes sehr kleines Quadrat', 'Schwarzes sehr kleines Quadrat', 'Schwarzes sehr kleines Quadrat']);
  this.executeCharTest('⬞', ['Weißes sehr kleines Quadrat', 'Weißes sehr kleines Quadrat', 'Weißes sehr kleines Quadrat']);
  this.executeCharTest('⬟', ['Schwarzes Pentagon', 'Schwarzes Pentagon', 'Schwarzes Pentagon']);
  this.executeCharTest('⬠', ['Weißes Pentagon', 'Weißes Pentagon', 'Weißes Pentagon']);
  this.executeCharTest('⬡', ['Weißes Sechseck', 'Weißes Sechseck', 'Weißes Sechseck']);
  this.executeCharTest('⬢', ['Schwarzes Sechseck', 'Schwarzes Sechseck', 'Schwarzes Sechseck']);
  this.executeCharTest('⬣', ['Horizontales schwarzes Sechseck', 'Horizontales schwarzes Sechseck', 'Horizontales schwarzes Sechseck']);
  this.executeCharTest('⬤', ['Schwarzer großer Kreis', 'Schwarzer großer Kreis', 'Schwarzer großer Kreis']);
  this.executeCharTest('⬥', ['Schwarzer mittlerer Diamant', 'Schwarzer mittlerer Diamant', 'Schwarzer mittlerer Diamant']);
  this.executeCharTest('⬦', ['Weißer mittlerer Diamant', 'Weißer mittlerer Diamant', 'Weißer mittlerer Diamant']);
  this.executeCharTest('⬧', ['Schwarze mittlere Raute', 'Schwarze mittlere Raute', 'Schwarze mittlere Raute']);
  this.executeCharTest('⬨', ['Weiße mittlere Raute', 'Weiße mittlere Raute', 'Weiße mittlere Raute']);
  this.executeCharTest('⬩', ['Schwarzer kleiner Diamant', 'Schwarzer kleiner Diamant', 'Schwarzer kleiner Diamant']);
  this.executeCharTest('⬪', ['Schwarze kleine Raute', 'Schwarze kleine Raute', 'Schwarze kleine Raute']);
  this.executeCharTest('⬫', ['Weiße kleine Raute', 'Weiße kleine Raute', 'Weiße kleine Raute']);
  this.executeCharTest('⬬', ['Schwarze horizontale Ellipse', 'Schwarze horizontale Ellipse', 'Schwarze horizontale Ellipse']);
  this.executeCharTest('⬭', ['Weiße horizontale Ellipse', 'Weiße horizontale Ellipse', 'Weiße horizontale Ellipse']);
  this.executeCharTest('⬮', ['Schwarze vertikale Ellipse', 'Schwarze vertikale Ellipse', 'Schwarze vertikale Ellipse']);
  this.executeCharTest('⬯', ['Weiße vertikale Ellipse', 'Weiße vertikale Ellipse', 'Weiße vertikale Ellipse']);
  this.executeCharTest('⭐', ['Weißer mittlerer Stern', 'Weißer mittlerer Stern', 'Weißer mittlerer Stern']);
  this.executeCharTest('⭑', ['Schwarzer kleiner Stern', 'Schwarzer kleiner Stern', 'Schwarzer kleiner Stern']);
  this.executeCharTest('⭒', ['Weißer kleiner Stern', 'Weißer kleiner Stern', 'Weißer kleiner Stern']);
  this.executeCharTest('⭓', ['Schwarzes nach rechts zeigendes Pentagon', 'Schwarzes nach rechts zeigendes Pentagon', 'Schwarzes nach rechts zeigendes Pentagon']);
  this.executeCharTest('⭔', ['Weißes nach rechts zeigendes Pentagon', 'Weißes nach rechts zeigendes Pentagon', 'Weißes nach rechts zeigendes Pentagon']);
  this.executeCharTest('⭕', ['Schwerer großer Kreis', 'Schwerer großer Kreis', 'Schwerer großer Kreis']);
  this.executeCharTest('⭖', ['Schweres Oval mit innenliegendem Oval', 'Schweres Oval mit innenliegendem Oval', 'Schweres Oval mit innenliegendem Oval']);
  this.executeCharTest('⭗', ['Schwerer Kreis mit Kreis nach innen', 'Schwerer Kreis mit Kreis nach innen', 'Schwerer Kreis mit Kreis nach innen']);
  this.executeCharTest('⭘', ['Schwerer Kreis', 'Schwerer Kreis', 'Schwerer Kreis']);
  this.executeCharTest('⭙', ['Schwerer eingekreister Saltire', 'Schwerer eingekreister Saltire', 'Schwerer eingekreister Saltire']);
  this.executeCharTest('↼', ['Linke Harpune mit Barb nach oben', 'Linke Harpune mit Barb nach oben', 'Linke Harpune mit Barb nach oben']);
  this.executeCharTest('↽', ['Harpune nach links mit Barb nach unten', 'Harpune nach links mit Barb nach unten', 'Harpune nach links mit Barb nach unten']);
  this.executeCharTest('↾', ['Harpune nach oben mit Barb nach rechts', 'Harpune nach oben mit Barb nach rechts', 'Harpune nach oben mit Barb nach rechts']);
  this.executeCharTest('↿', ['Harpune nach oben mit Barb nach links', 'Harpune nach oben mit Barb nach links', 'Harpune nach oben mit Barb nach links']);
  this.executeCharTest('⇀', ['Harpune nach rechts mit Barb nach oben', 'Harpune nach rechts mit Barb nach oben', 'Harpune nach rechts mit Barb nach oben']);
  this.executeCharTest('⇁', ['Harpune nach rechts mit Barb nach unten', 'Harpune nach rechts mit Barb nach unten', 'Harpune nach rechts mit Barb nach unten']);
  this.executeCharTest('⇂', ['Harpune nach unten mit Barb nach rechts', 'Harpune nach unten mit Barb nach rechts', 'Harpune nach unten mit Barb nach rechts']);
  this.executeCharTest('⇃', ['Harpune nach unten mit Barb nach links', 'Harpune nach unten mit Barb nach links', 'Harpune nach unten mit Barb nach links']);
  this.executeCharTest('⇋', ['Harpune nach links über Harpune nach rechts', 'Harpune nach links über Harpune nach rechts', 'Harpune nach links über Harpune nach rechts']);
  this.executeCharTest('⇌', ['Harpune nach rechts über Harpune nach links', 'Harpune nach rechts über Harpune nach links', 'Harpune nach rechts über Harpune nach links']);
  this.executeCharTest('⥊', ['Linke Barb Up Rechte Barb Down Harpoon', 'Linke Barb Up Rechte Barb Down Harpoon', 'Linke Barb Up Rechte Barb Down Harpoon']);
  this.executeCharTest('⥋', ['Linke Barb Down Rechte Barb Up Harpoon', 'Linke Barb Down Rechte Barb Up Harpoon', 'Linke Barb Down Rechte Barb Up Harpoon']);
  this.executeCharTest('⥌', ['Nach oben Barb Rechts Nach links Barb Harpoon', 'Nach oben Barb Rechts Nach links Barb Harpoon', 'Nach oben Barb Rechts Nach links Barb Harpoon']);
  this.executeCharTest('⥍', ['Up Barb Left Abwärts Barb Right Harpoon', 'Up Barb Left Abwärts Barb Right Harpoon', 'Up Barb Left Abwärts Barb Right Harpoon']);
  this.executeCharTest('⥎', ['Linke Barb Up Rechte Barb Up Harpoon', 'Linke Barb Up Rechte Barb Up Harpoon', 'Linke Barb Up Rechte Barb Up Harpoon']);
  this.executeCharTest('⥏', ['Barb nach rechts Barb nach rechts Harpoon', 'Barb nach rechts Barb nach rechts Harpoon', 'Barb nach rechts Barb nach rechts Harpoon']);
  this.executeCharTest('⥐', ['Linke Barb Down Rechte Barb Down Harpoon', 'Linke Barb Down Rechte Barb Down Harpoon', 'Linke Barb Down Rechte Barb Down Harpoon']);
  this.executeCharTest('⥑', ['Up Barb Left Abwärts Barb Left Harpoon', 'Up Barb Left Abwärts Barb Left Harpoon', 'Up Barb Left Abwärts Barb Left Harpoon']);
  this.executeCharTest('⥒', ['Linke Harpune mit Barb Up To Bar', 'Linke Harpune mit Barb Up To Bar', 'Linke Harpune mit Barb Up To Bar']);
  this.executeCharTest('⥓', ['Harpune nach rechts mit Barb bis zur Bar', 'Harpune nach rechts mit Barb bis zur Bar', 'Harpune nach rechts mit Barb bis zur Bar']);
  this.executeCharTest('⥔', ['Harpune nach oben mit Widerhaken rechts', 'Harpune nach oben mit Widerhaken rechts', 'Harpune nach oben mit Widerhaken rechts']);
  this.executeCharTest('⥕', ['Harpune nach unten mit Barb Right to Bar', 'Harpune nach unten mit Barb Right to Bar', 'Harpune nach unten mit Barb Right to Bar']);
  this.executeCharTest('⥖', ['Linke Harpune mit Widerhaken nach unten', 'Linke Harpune mit Widerhaken nach unten', 'Linke Harpune mit Widerhaken nach unten']);
  this.executeCharTest('⥗', ['Harpune nach rechts mit Widerhaken nach unten', 'Harpune nach rechts mit Widerhaken nach unten', 'Harpune nach rechts mit Widerhaken nach unten']);
  this.executeCharTest('⥘', ['Harpune nach oben mit Barb nach links', 'Harpune nach oben mit Barb nach links', 'Harpune nach oben mit Barb nach links']);
  this.executeCharTest('⥙', ['Harpune nach unten mit Barb nach links', 'Harpune nach unten mit Barb nach links', 'Harpune nach unten mit Barb nach links']);
  this.executeCharTest('⥚', ['Linke Harpune mit Barb Up von der Bar', 'Linke Harpune mit Barb Up von der Bar', 'Linke Harpune mit Barb Up von der Bar']);
  this.executeCharTest('⥛', ['Harpune nach rechts mit Barb Up von der Bar', 'Harpune nach rechts mit Barb Up von der Bar', 'Harpune nach rechts mit Barb Up von der Bar']);
  this.executeCharTest('⥜', ['Harpune nach oben mit Barb rechts von der Bar', 'Harpune nach oben mit Barb rechts von der Bar', 'Harpune nach oben mit Barb rechts von der Bar']);
  this.executeCharTest('⥝', ['Harpune nach unten mit Barb rechts von der Bar', 'Harpune nach unten mit Barb rechts von der Bar', 'Harpune nach unten mit Barb rechts von der Bar']);
  this.executeCharTest('⥞', ['Linke Harpune mit Barb Down von der Bar', 'Linke Harpune mit Barb Down von der Bar', 'Linke Harpune mit Barb Down von der Bar']);
  this.executeCharTest('⥟', ['Rechts Harpoon mit Barb Down von der Bar', 'Rechts Harpoon mit Barb Down von der Bar', 'Rechts Harpoon mit Barb Down von der Bar']);
  this.executeCharTest('⥠', ['Harpune nach oben mit Barb links von der Bar', 'Harpune nach oben mit Barb links von der Bar', 'Harpune nach oben mit Barb links von der Bar']);
  this.executeCharTest('⥡', ['Harpune nach unten mit Barb links von der Bar', 'Harpune nach unten mit Barb links von der Bar', 'Harpune nach unten mit Barb links von der Bar']);
  this.executeCharTest('⥢', ['Harpune nach links mit Barb nach oben Harpune nach links mit Barb nach unten', 'Harpune nach links mit Barb nach oben Harpune nach links mit Barb nach unten', 'Harpune nach links mit Barb nach oben Harpune nach links mit Barb nach unten']);
  this.executeCharTest('⥣', ['Harpune nach oben mit Barb links neben Harpune nach oben mit Barb rechts', 'Harpune nach oben mit Barb links neben Harpune nach oben mit Barb rechts', 'Harpune nach oben mit Barb links neben Harpune nach oben mit Barb rechts']);
  this.executeCharTest('⥤', ['Harpune nach rechts mit Barb nach oben Harpoon nach rechts mit Barb nach unten', 'Harpune nach rechts mit Barb nach oben Harpoon nach rechts mit Barb nach unten', 'Harpune nach rechts mit Barb nach oben Harpoon nach rechts mit Barb nach unten']);
  this.executeCharTest('⥥', ['Harpune nach unten mit Barb nach unten Harpune nach unten mit Barb nach rechts', 'Harpune nach unten mit Barb nach unten Harpune nach unten mit Barb nach rechts', 'Harpune nach unten mit Barb nach unten Harpune nach unten mit Barb nach rechts']);
  this.executeCharTest('⥦', ['Linke Harpune mit Barb Up Oben Rechts Harpoon mit Barb Up', 'Linke Harpune mit Barb Up Oben Rechts Harpoon mit Barb Up', 'Linke Harpune mit Barb Up Oben Rechts Harpoon mit Barb Up']);
  this.executeCharTest('⥧', ['Linke Harpune mit Widerhaken nach unten Rechts Harpune mit Widerhaken nach unten', 'Linke Harpune mit Widerhaken nach unten Rechts Harpune mit Widerhaken nach unten', 'Linke Harpune mit Widerhaken nach unten Rechts Harpune mit Widerhaken nach unten']);
  this.executeCharTest('⥨', ['Harpune nach rechts mit Barb nach oben Harpune nach links mit Barb nach oben', 'Harpune nach rechts mit Barb nach oben Harpune nach links mit Barb nach oben', 'Harpune nach rechts mit Barb nach oben Harpune nach links mit Barb nach oben']);
  this.executeCharTest('⥩', ['Harpune nach rechts mit Barb nach unten Harpune nach links mit Barb nach unten', 'Harpune nach rechts mit Barb nach unten Harpune nach links mit Barb nach unten', 'Harpune nach rechts mit Barb nach unten Harpune nach links mit Barb nach unten']);
  this.executeCharTest('⥪', ['Linke Harpune mit Barb Up Above Long Dash', 'Linke Harpune mit Barb Up Above Long Dash', 'Linke Harpune mit Barb Up Above Long Dash']);
  this.executeCharTest('⥫', ['Linke Harpune mit Barb Down Under Long Dash', 'Linke Harpune mit Barb Down Under Long Dash', 'Linke Harpune mit Barb Down Under Long Dash']);
  this.executeCharTest('⥬', ['Harpune nach rechts mit Barb Up Long Long Dash', 'Harpune nach rechts mit Barb Up Long Long Dash', 'Harpune nach rechts mit Barb Up Long Long Dash']);
  this.executeCharTest('⥭', ['Harpune nach rechts mit Widerhaken nach unten', 'Harpune nach rechts mit Widerhaken nach unten', 'Harpune nach rechts mit Widerhaken nach unten']);
  this.executeCharTest('⥮', ['Harpune nach oben mit Barb links neben Harpune nach unten mit Barb rechts', 'Harpune nach oben mit Barb links neben Harpune nach unten mit Barb rechts', 'Harpune nach oben mit Barb links neben Harpune nach unten mit Barb rechts']);
  this.executeCharTest('⥯', ['Harpune nach unten mit Barb links neben Harpune nach oben mit Barb rechts', 'Harpune nach unten mit Barb links neben Harpune nach oben mit Barb rechts', 'Harpune nach unten mit Barb links neben Harpune nach oben mit Barb rechts']);
  this.executeCharTest('⥼', ['linker Fischschwanz', 'linker Fischschwanz', 'linker Fischschwanz']);
  this.executeCharTest('⥽', ['rechter Fischschwanz', 'rechter Fischschwanz', 'rechter Fischschwanz']);
  this.executeCharTest('⥾', ['Fischschwanz', 'Fischschwanz', 'Fischschwanz']);
  this.executeCharTest('⥿', ['Fischschwanz', 'Fischschwanz', 'Fischschwanz']);
  this.executeCharTest('ℏ', ['Planck-Konstante über zwei Pi', 'Planck-Konstante über zwei Pi', 'Planck-Konstante über zwei Pi']);
  this.executeCharTest('℔', ['L B Balkensymbol', 'L B Balkensymbol', 'L B Balkensymbol']);
  this.executeCharTest('№', ['Numero-Zeichen', 'Numero-Zeichen', 'Numero-Zeichen']);
  this.executeCharTest('℗', ['Tonaufnahme Copyright', 'Tonaufnahme Copyright', 'Tonaufnahme Copyright']);
  this.executeCharTest('℞', ['Rezept nehmen', 'Rezept nehmen', 'Rezept nehmen']);
  this.executeCharTest('℟', ['Antwort', 'Antwort', 'Antwort']);
  this.executeCharTest('℠', ['Dienstleistungsmarke', 'Dienstleistungsmarke', 'Dienstleistungsmarke']);
  this.executeCharTest('℡', ['Telefon Zeichen', 'Telefon Zeichen', 'Telefon Zeichen']);
  this.executeCharTest('™', ['Markenzeichen', 'Markenzeichen', 'Markenzeichen']);
  this.executeCharTest('℣', ['Versicle', 'Versicle', 'Versicle']);
  this.executeCharTest('℥', ['Unze-Zeichen', 'Unze-Zeichen', 'Unze-Zeichen']);
  this.executeCharTest('Ω', ['Ohm-Zeichen', 'Ohm-Zeichen', 'Ohm-Zeichen']);
  this.executeCharTest('℧', ['Umgekehrtes Ohm-Zeichen', 'Umgekehrtes Ohm-Zeichen', 'Umgekehrtes Ohm-Zeichen']);
  this.executeCharTest('K', ['Kelvin-Zeichen', 'Kelvin-Zeichen', 'Kelvin-Zeichen']);
  this.executeCharTest('Å', ['Angstrom-Zeichen', 'Angstrom-Zeichen', 'Angstrom-Zeichen']);
  this.executeCharTest('℮', ['Geschätztes Symbol', 'Geschätztes Symbol', 'Geschätztes Symbol']);
  this.executeCharTest('Ⅎ', ['Umgeschlagenes Kapital F', 'Umgeschlagenes Kapital F', 'Umgeschlagenes Kapital F']);
  this.executeCharTest('ℹ', ['Informationsquelle', 'Informationsquelle', 'Informationsquelle']);
  this.executeCharTest('℺', ['Gedrehtes Kapital Q', 'Gedrehtes Kapital Q', 'Gedrehtes Kapital Q']);
  this.executeCharTest('℻', ['Faksimile-Zeichen', 'Faksimile-Zeichen', 'Faksimile-Zeichen']);
  this.executeCharTest('⅁', ['Sans-Serif Capital G', 'Sans-Serif Capital G', 'Sans-Serif Capital G']);
  this.executeCharTest('⅂', ['Sans-Serif Capital L', 'Sans-Serif Capital L', 'Sans-Serif Capital L']);
  this.executeCharTest('⅃', ['Aufgehobenes Sans-Serif-Kapital L', 'Aufgehobenes Sans-Serif-Kapital L', 'Aufgehobenes Sans-Serif-Kapital L']);
  this.executeCharTest('⅄', ['Sans-Serif Capital Y', 'Sans-Serif Capital Y', 'Sans-Serif Capital Y']);
  this.executeCharTest('!', ['Fakultät', 'Fakultät', 'Fakultät']);
  this.executeCharTest('"', ['Anführungszeichen', 'Anführungszeichen', 'Anführungszeichen']);
  this.executeCharTest('#', ['Nummernzeichen', 'Nummernzeichen', 'Nummernzeichen']);
  this.executeCharTest('$', ['Dollar', 'Dollar', 'Dollar']);
  this.executeCharTest('%', ['Prozent', 'Prozent', 'Prozent']);
  this.executeCharTest('&', ['und', 'und', 'und']);
  this.executeCharTest('\'', ['Hochkomma', 'Hochkomma', 'Hochkomma']);
  this.executeCharTest('*', ['times', 'times', 'times']);
  this.executeCharTest('+', ['plus', 'plus', 'plus']);
  this.executeCharTest(',', ['Komma', 'Komma', 'Komma']);
  this.executeCharTest('-', ['minus', 'minus', 'minus']);
  this.executeCharTest('.', ['Punkt', 'Punkt', 'Punkt']);
  this.executeCharTest('/', ['Schrägstrich', 'Schrägstrich', 'Schrägstrich']);
  this.executeCharTest(':', ['Doppelpunkt', 'Doppelpunkt', 'Doppelpunkt']);
  this.executeCharTest(';', ['Strichpunkt', 'Strichpunkt', 'Strichpunkt']);
  this.executeCharTest('<', ['kleiner als', 'kleiner als', 'kleiner als']);
  this.executeCharTest('=', ['ist gleich', 'ist gleich', 'ist gleich']);
  this.executeCharTest('>', ['größer als', 'größer als', 'größer als']);
  this.executeCharTest('?', ['Fragezeichen', 'Fragezeichen', 'Fragezeichen']);
  this.executeCharTest('@', ['Klammeraffe', 'Klammeraffe', 'Klammeraffe']);
  this.executeCharTest('\\', ['Umgekehrter Schrägstrich', 'Umgekehrter Schrägstrich', 'Umgekehrter Schrägstrich']);
  this.executeCharTest('^', ['circumflex', 'circumflex', 'circumflex']);
  this.executeCharTest('_', ['Unterstrich', 'Unterstrich', 'Unterstrich']);
  this.executeCharTest('`', ['Gravis Akzent', 'Gravis Akzent', 'Gravis Akzent']);
  this.executeCharTest('|', ['senkrechter Strich', 'senkrechter Strich', 'senkrechter Strich']);
  this.executeCharTest('~', ['tilde', 'tilde', 'tilde']);
  this.executeCharTest('¡', ['Umgekehrtes Ausrufezeichen', 'Umgekehrtes Ausrufezeichen', 'Umgekehrtes Ausrufezeichen']);
  this.executeCharTest('¢', ['Cent', 'Cent', 'Cent']);
  this.executeCharTest('£', ['Pfund', 'Pfund', 'Pfund']);
  this.executeCharTest('¤', ['währungszeichen', 'währungszeichen', 'währungszeichen']);
  this.executeCharTest('¥', ['yen', 'yen', 'yen']);
  this.executeCharTest('¦', ['gebrochene Linie', 'gebrochene Linie', 'gebrochene Linie']);
  this.executeCharTest('§', ['Abschnitt', 'Abschnitt', 'Abschnitt']);
  this.executeCharTest('¨', ['diaeresis', 'diaeresis', 'diaeresis']);
  this.executeCharTest('©', ['Copyright', 'Copyright', 'Copyright']);
  this.executeCharTest('ª', ['weibliches Ordnungszeichen', 'weibliches Ordnungszeichen', 'weibliches Ordnungszeichen']);
  this.executeCharTest('«', ['Nach links zeigendes doppeltes spitzes Anführungszeichen', 'Nach links zeigendes doppeltes spitzes Anführungszeichen', 'Nach links zeigendes doppeltes spitzes Anführungszeichen']);
  this.executeCharTest('¬', ['nicht', 'nicht', 'nicht']);
  this.executeCharTest('®', ['registered sign', 'registered sign', 'registered sign']);
  this.executeCharTest('¯', ['Überstrich', 'Überstrich', 'Überstrich']);
  this.executeCharTest('°', ['Grad', 'Grad', 'Grad']);
  this.executeCharTest('±', ['plus minus', 'plus minus', 'plus minus']);
  this.executeCharTest('´', ['acute accent', 'acute accent', 'acute accent']);
  this.executeCharTest('µ', ['micro sign', 'micro sign', 'micro sign']);
  this.executeCharTest('¶', ['Paragraf', 'Paragraf', 'Paragraf']);
  this.executeCharTest('·', ['mal', 'mal', 'mal']);
  this.executeCharTest('¸', ['Cedille', 'Cedille', 'Cedille']);
  this.executeCharTest('º', ['Männliches Ordnungszeichen', 'Männliches Ordnungszeichen', 'Männliches Ordnungszeichen']);
  this.executeCharTest('»', ['Nach rechts zeigendes doppeltes spitzes Anführungszeichen', 'Nach rechts zeigendes doppeltes spitzes Anführungszeichen', 'Nach rechts zeigendes doppeltes spitzes Anführungszeichen']);
  this.executeCharTest('¿', ['umgekehrtes Fragezeichen', 'umgekehrtes Fragezeichen', 'umgekehrtes Fragezeichen']);
  this.executeCharTest('×', ['mal', 'mal', 'mal']);
  this.executeCharTest('÷', ['geteilt durch', 'geteilt durch', 'geteilt durch']);
  this.executeCharTest('˘', ['Breve', 'Breve', 'Breve']);
  this.executeCharTest('˙', ['Überpunkt', 'Überpunkt', 'Überpunkt']);
  this.executeCharTest('˚', ['Überring', 'Überring', 'Überring']);
  this.executeCharTest('˛', ['Ogonek', 'Ogonek', 'Ogonek']);
  this.executeCharTest('˜', ['Tilde', 'Tilde', 'Tilde']);
  this.executeCharTest('˝', ['Doppleakutakzent', 'Doppleakutakzent', 'Doppleakutakzent']);
  this.executeCharTest('‐', ['Bindestrich', 'Bindestrich', 'Bindestrich']);
  this.executeCharTest('‑', ['Nicht brechender Bindestrich', 'Nicht brechender Bindestrich', 'Nicht brechender Bindestrich']);
  this.executeCharTest('‒', ['Abbildung Bindestrich', 'Abbildung Bindestrich', 'Abbildung Bindestrich']);
  this.executeCharTest('–', ['En Dash', 'En Dash', 'En Dash']);
  this.executeCharTest('—', ['EM Dash', 'EM Dash', 'EM Dash']);
  this.executeCharTest('―', ['Horizontale Linie', 'Horizontale Linie', 'Horizontale Linie']);
  this.executeCharTest('‖', ['Doppelte vertikale Linie', 'Doppelte vertikale Linie', 'Doppelte vertikale Linie']);
  this.executeCharTest('‗', ['Doppelter Unterstrich', 'Doppelter Unterstrich', 'Doppelter Unterstrich']);
  this.executeCharTest('‘', ['Linkes einfaches Anführungszeichen', 'Linkes einfaches Anführungszeichen', 'Linkes einfaches Anführungszeichen']);
  this.executeCharTest('’', ['Rechtes einfaches Anführungszeichen', 'Rechtes einfaches Anführungszeichen', 'Rechtes einfaches Anführungszeichen']);
  this.executeCharTest('‚', ['Einzelnes rechtes Anführungszeichen', 'Einzelnes rechtes Anführungszeichen', 'Einzelnes rechtes Anführungszeichen']);
  this.executeCharTest('‛', ['Einzelnes linkes Anführungszeichen', 'Einzelnes linkes Anführungszeichen', 'Einzelnes linkes Anführungszeichen']);
  this.executeCharTest('“', ['Linkes doppeltes Anführungszeichen', 'Linkes doppeltes Anführungszeichen', 'Linkes doppeltes Anführungszeichen']);
  this.executeCharTest('”', ['Rechtes doppeltes Anführungszeichen', 'Rechtes doppeltes Anführungszeichen', 'Rechtes doppeltes Anführungszeichen']);
  this.executeCharTest('„', ['Doppeltes rechtes Anführungszeichen', 'Doppeltes rechtes Anführungszeichen', 'Doppeltes rechtes Anführungszeichen']);
  this.executeCharTest('‟', ['Doppeltes linkes Anführungszeichen', 'Doppeltes linkes Anführungszeichen', 'Doppeltes linkes Anführungszeichen']);
  this.executeCharTest('†', ['Dolch', 'Dolch', 'Dolch']);
  this.executeCharTest('‡', ['Doppelter Dolch', 'Doppelter Dolch', 'Doppelter Dolch']);
  this.executeCharTest('•', ['Kugel', 'Kugel', 'Kugel']);
  this.executeCharTest('‣', ['Dreieckige Kugel', 'Dreieckige Kugel', 'Dreieckige Kugel']);
  this.executeCharTest('․', ['Einzelpunkt', 'Einzelpunkt', 'Einzelpunkt']);
  this.executeCharTest('‥', ['zwei Punkte', 'zwei Punkte', 'zwei Punkte']);
  this.executeCharTest('…', ['horizontale Ellipsis', 'horizontale Ellipsis', 'horizontale Ellipsis']);
  this.executeCharTest('‧', ['Trennungspunkt', 'Trennungspunkt', 'Trennungspunkt']);
  this.executeCharTest('‰', ['promille', 'promille', 'promille']);
  this.executeCharTest('‱', ['pro Zehntausend', 'pro Zehntausend', 'pro Zehntausend']);
  this.executeCharTest('′', ['Strich', 'Strich', 'Strich']);
  this.executeCharTest('″', ['zwei Strich', 'zwei Strich', 'zwei Strich']);
  this.executeCharTest('‴', ['drei Strich', 'drei Strich', 'drei Strich']);
  this.executeCharTest('‵', ['strich invertiert', 'strich invertiert', 'strich invertiert']);
  this.executeCharTest('‶', ['zwei Strich invertiert', 'zwei Strich invertiert', 'zwei Strich invertiert']);
  this.executeCharTest('‷', ['drei Strich invertiert', 'drei Strich invertiert', 'drei Strich invertiert']);
  this.executeCharTest('‸', ['Caret', 'Caret', 'Caret']);
  this.executeCharTest('‹', ['Einfacher nach links zeigender Winkel Anführungszeichen', 'Einfacher nach links zeigender Winkel Anführungszeichen', 'Einfacher nach links zeigender Winkel Anführungszeichen']);
  this.executeCharTest('›', ['Einzelne Nach-rechts-Winkel-Anführungszeichen', 'Einzelne Nach-rechts-Winkel-Anführungszeichen', 'Einzelne Nach-rechts-Winkel-Anführungszeichen']);
  this.executeCharTest('※', ['Referenzmarke', 'Referenzmarke', 'Referenzmarke']);
  this.executeCharTest('‼', ['Doppelausrufezeichen', 'Doppelausrufezeichen', 'Doppelausrufezeichen']);
  this.executeCharTest('‽', ['Interrobang', 'Interrobang', 'Interrobang']);
  this.executeCharTest('‾', ['Überschrift', 'Überschrift', 'Überschrift']);
  this.executeCharTest('‿', ['Undertie', 'Undertie', 'Undertie']);
  this.executeCharTest('⁀', ['Zeichen Krawatte', 'Zeichen Krawatte', 'Zeichen Krawatte']);
  this.executeCharTest('⁁', ['Caret-Einfügungspunkt', 'Caret-Einfügungspunkt', 'Caret-Einfügungspunkt']);
  this.executeCharTest('⁂', ['Asterism', 'Asterism', 'Asterism']);
  this.executeCharTest('⁃', ['Bindestrich Kugel', 'Bindestrich Kugel', 'Bindestrich Kugel']);
  this.executeCharTest('⁄', ['Fraktions-Schrägstrich', 'Fraktions-Schrägstrich', 'Fraktions-Schrägstrich']);
  this.executeCharTest('⁇', ['Doppel-Fragezeichen', 'Doppel-Fragezeichen', 'Doppel-Fragezeichen']);
  this.executeCharTest('⁈', ['Fragezeichen für Ausrufezeichen', 'Fragezeichen für Ausrufezeichen', 'Fragezeichen für Ausrufezeichen']);
  this.executeCharTest('⁉', ['Ausrufezeichen', 'Ausrufezeichen', 'Ausrufezeichen']);
  this.executeCharTest('⁋', ['Umgekehrtes Pilcrow-Zeichen', 'Umgekehrtes Pilcrow-Zeichen', 'Umgekehrtes Pilcrow-Zeichen']);
  this.executeCharTest('⁌', ['Schwarze Kugel nach links', 'Schwarze Kugel nach links', 'Schwarze Kugel nach links']);
  this.executeCharTest('⁍', ['Schwarze Kugel nach rechts', 'Schwarze Kugel nach rechts', 'Schwarze Kugel nach rechts']);
  this.executeCharTest('⁎', ['Niedriges Sternchen', 'Niedriges Sternchen', 'Niedriges Sternchen']);
  this.executeCharTest('⁏', ['Umgekehrtes Semikolon', 'Umgekehrtes Semikolon', 'Umgekehrtes Semikolon']);
  this.executeCharTest('⁐', ['Nahansicht', 'Nahansicht', 'Nahansicht']);
  this.executeCharTest('⁑', ['Zwei Sternchen vertikal ausgerichtet', 'Zwei Sternchen vertikal ausgerichtet', 'Zwei Sternchen vertikal ausgerichtet']);
  this.executeCharTest('⁒', ['Kommerzielles Minuszeichen', 'Kommerzielles Minuszeichen', 'Kommerzielles Minuszeichen']);
  this.executeCharTest('⁓', ['Swing Dash', 'Swing Dash', 'Swing Dash']);
  this.executeCharTest('⁔', ['Inverted Undertie', 'Inverted Undertie', 'Inverted Undertie']);
  this.executeCharTest('⁕', ['Blume Interpunktionszeichen', 'Blume Interpunktionszeichen', 'Blume Interpunktionszeichen']);
  this.executeCharTest('⁖', ['Drei Punkt-Interpunktion', 'Drei Punkt-Interpunktion', 'Drei Punkt-Interpunktion']);
  this.executeCharTest('⁗', ['quadruple prime', 'quadruple prime', 'quadruple prime']);
  this.executeCharTest('⁘', ['Vierpunkt-Interpunktion', 'Vierpunkt-Interpunktion', 'Vierpunkt-Interpunktion']);
  this.executeCharTest('⁙', ['Fünf Punkt-Interpunktion', 'Fünf Punkt-Interpunktion', 'Fünf Punkt-Interpunktion']);
  this.executeCharTest('⁚', ['Zwei Punkt-Interpunktion', 'Zwei Punkt-Interpunktion', 'Zwei Punkt-Interpunktion']);
  this.executeCharTest('⁛', ['Vier-Punkt-Markierung', 'Vier-Punkt-Markierung', 'Vier-Punkt-Markierung']);
  this.executeCharTest('⁜', ['Gepunktetes Kreuz', 'Gepunktetes Kreuz', 'Gepunktetes Kreuz']);
  this.executeCharTest('⁝', ['Tricolon', 'Tricolon', 'Tricolon']);
  this.executeCharTest('⁞', ['Vertikale vier Punkte', 'Vertikale vier Punkte', 'Vertikale vier Punkte']);
  this.executeCharTest('⁺', ['Hochgestelltes Pluszeichen', 'Hochgestelltes Pluszeichen', 'Hochgestelltes Pluszeichen']);
  this.executeCharTest('⁻', ['Hochgestelltes Minus', 'Hochgestelltes Minus', 'Hochgestelltes Minus']);
  this.executeCharTest('⁼', ['Hochgestelltes Gleichheitszeichen', 'Hochgestelltes Gleichheitszeichen', 'Hochgestelltes Gleichheitszeichen']);
  this.executeCharTest('⁽', ['Hochgestellte linke Klammer', 'Hochgestellte linke Klammer', 'Hochgestellte linke Klammer']);
  this.executeCharTest('⁾', ['Hochgestellte rechte Klammer', 'Hochgestellte rechte Klammer', 'Hochgestellte rechte Klammer']);
  this.executeCharTest('₊', ['Index Pluszeichen', 'Index Pluszeichen', 'Index Pluszeichen']);
  this.executeCharTest('₋', ['Tiefgestelltes Minus', 'Tiefgestelltes Minus', 'Tiefgestelltes Minus']);
  this.executeCharTest('₌', ['Tiefgestelltes Gleichheitszeichen', 'Tiefgestelltes Gleichheitszeichen', 'Tiefgestelltes Gleichheitszeichen']);
  this.executeCharTest('₍', ['Tiefgestellte linke Klammer', 'Tiefgestellte linke Klammer', 'Tiefgestellte linke Klammer']);
  this.executeCharTest('₎', ['Tiefgestellte rechte Klammer', 'Tiefgestellte rechte Klammer', 'Tiefgestellte rechte Klammer']);
  this.executeCharTest('⅊', ['Grundstücksgrenze', 'Grundstücksgrenze', 'Grundstücksgrenze']);
  this.executeCharTest('⅋', ['Ampersand gedreht', 'Ampersand gedreht', 'Ampersand gedreht']);
  this.executeCharTest('⅌', ['Pro Zeichen', 'Pro Zeichen', 'Pro Zeichen']);
  this.executeCharTest('⅍', ['Aktieselskab', 'Aktieselskab', 'Aktieselskab']);
  this.executeCharTest('ⅎ', ['Gedreht klein F', 'Gedreht klein F', 'Gedreht klein F']);
  this.executeCharTest('∀', ['für alle', 'für alle', 'für alle']);
  this.executeCharTest('∁', ['Komplement', 'Komplement', 'Komplement']);
  this.executeCharTest('∃', ['es gibt', 'es gibt', 'es gibt']);
  this.executeCharTest('∄', ['es gibt nicht', 'es gibt nicht', 'es gibt nicht']);
  this.executeCharTest('∅', ['leere Menge', 'leere Menge', 'leere Menge']);
  this.executeCharTest('∆', ['Differenz', 'Differenz', 'Differenz']);
  this.executeCharTest('∈', ['Element von', 'Element von', 'Element von']);
  this.executeCharTest('∉', ['nicht Element von', 'nicht Element von', 'nicht Element von']);
  this.executeCharTest('∊', ['Element von', 'Element von', 'Element von']);
  this.executeCharTest('∋', ['hat als Element', 'hat als Element', 'hat als Element']);
  this.executeCharTest('∌', ['hat nicht als Element', 'hat nicht als Element', 'hat nicht als Element']);
  this.executeCharTest('∍', ['hat als Element', 'hat als Element', 'hat als Element']);
  this.executeCharTest('∎', ['Ende Beweis', 'Ende Beweis', 'Ende Beweis']);
  this.executeCharTest('∏', ['Produkt', 'Produkt', 'Produkt']);
  this.executeCharTest('∐', ['Koprodukt', 'Koprodukt', 'Koprodukt']);
  this.executeCharTest('∑', ['Summe', 'Summe', 'Summe']);
  this.executeCharTest('−', ['minus', 'minus', 'minus']);
  this.executeCharTest('∓', ['minus plus', 'minus plus', 'minus plus']);
  this.executeCharTest('∔', ['Plus mit Punkt', 'Plus mit Punkt', 'Plus mit Punkt']);
  this.executeCharTest('∕', ['Division', 'Division', 'Division']);
  this.executeCharTest('∖', ['Mengendifferenz', 'Mengendifferenz', 'Mengendifferenz']);
  this.executeCharTest('∗', ['Sternoperator', 'Sternoperator', 'Sternoperator']);
  this.executeCharTest('∘', ['verknüpft mit', 'verknüpft mit', 'verknüpft mit']);
  this.executeCharTest('∙', ['Kreisoperator', 'Kreisoperator', 'Kreisoperator']);
  this.executeCharTest('√', ['Quadratwurzelzeichen', 'Quadratwurzelzeichen', 'Quadratwurzelzeichen']);
  this.executeCharTest('∛', ['Kubikwurzelzeichen', 'Kubikwurzelzeichen', 'Kubikwurzelzeichen']);
  this.executeCharTest('∜', ['vierte Wurzel', 'vierte Wurzel', 'vierte Wurzel']);
  this.executeCharTest('∝', ['proportional zu', 'proportional zu', 'proportional zu']);
  this.executeCharTest('∞', ['unendlich', 'unendlich', 'unendlich']);
  this.executeCharTest('∟', ['rechter Winkel', 'rechter Winkel', 'rechter Winkel']);
  this.executeCharTest('∠', ['Winkel', 'Winkel', 'Winkel']);
  this.executeCharTest('∡', ['gerichteter Winkel', 'gerichteter Winkel', 'gerichteter Winkel']);
  this.executeCharTest('∢', ['Raumwinkel', 'Raumwinkel', 'Raumwinkel']);
  this.executeCharTest('∣', ['teilt', 'teilt', 'teilt']);
  this.executeCharTest('∤', ['teilt nicht', 'teilt nicht', 'teilt nicht']);
  this.executeCharTest('∥', ['parallel zu', 'parallel zu', 'parallel zu']);
  this.executeCharTest('∦', ['nicht parallel zu', 'nicht parallel zu', 'nicht parallel zu']);
  this.executeCharTest('∧', ['und', 'und', 'und']);
  this.executeCharTest('∨', ['oder', 'oder', 'oder']);
  this.executeCharTest('∩', ['Durchschnitt', 'Durchschnitt', 'Durchschnitt']);
  this.executeCharTest('∪', ['Vereinigung', 'Vereinigung', 'Vereinigung']);
  this.executeCharTest('∫', ['Integral', 'Integral', 'Integral']);
  this.executeCharTest('∬', ['Doppelintegral', 'Doppelintegral', 'Doppelintegral']);
  this.executeCharTest('∭', ['Dreifachintegral', 'Dreifachintegral', 'Dreifachintegral']);
  this.executeCharTest('∮', ['Randintegral', 'Randintegral', 'Randintegral']);
  this.executeCharTest('∯', ['Oberflächenintegral', 'Oberflächenintegral', 'Oberflächenintegral']);
  this.executeCharTest('∰', ['Volumenintegral', 'Volumenintegral', 'Volumenintegral']);
  this.executeCharTest('∱', ['Integral im Uhrzeigersinn', 'Integral im Uhrzeigersinn', 'Integral im Uhrzeigersinn']);
  this.executeCharTest('∲', ['Kurvenintegral im Uhrzeigersinn', 'Kurvenintegral im Uhrzeigersinn', 'Kurvenintegral im Uhrzeigersinn']);
  this.executeCharTest('∳', ['Kurvenintegral im Gegenuhrzeigersinn', 'Kurvenintegral im Gegenuhrzeigersinn', 'Kurvenintegral im Gegenuhrzeigersinn']);
  this.executeCharTest('∴', ['folglich', 'folglich', 'folglich']);
  this.executeCharTest('∵', ['weil', 'weil', 'weil']);
  this.executeCharTest('∶', ['Verhältnis', 'Verhältnis', 'Verhältnis']);
  this.executeCharTest('∷', ['Proportion', 'Proportion', 'Proportion']);
  this.executeCharTest('∸', ['Minus mit Punkt', 'Minus mit Punkt', 'Minus mit Punkt']);
  this.executeCharTest('∹', ['Überschuss', 'Überschuss', 'Überschuss']);
  this.executeCharTest('∺', ['geometrische Proportion', 'geometrische Proportion', 'geometrische Proportion']);
  this.executeCharTest('∻', ['homothetisch', 'homothetisch', 'homothetisch']);
  this.executeCharTest('∼', ['Tildeoperator', 'Tildeoperator', 'Tildeoperator']);
  this.executeCharTest('∽', ['Umgekehrte Tilde', 'Umgekehrte Tilde', 'Umgekehrte Tilde']);
  this.executeCharTest('∾', ['Umgekehrtes stummes S', 'Umgekehrtes stummes S', 'Umgekehrtes stummes S']);
  this.executeCharTest('∿', ['Sinuswelle', 'Sinuswelle', 'Sinuswelle']);
  this.executeCharTest('≀', ['Kranzprodukt', 'Kranzprodukt', 'Kranzprodukt']);
  this.executeCharTest('≁', ['durchgestrichene Tilde', 'durchgestrichene Tilde', 'durchgestrichene Tilde']);
  this.executeCharTest('≂', ['Minus über Tilde', 'Minus über Tilde', 'Minus über Tilde']);
  this.executeCharTest('≃', ['asymptotisch gleich', 'asymptotisch gleich', 'asymptotisch gleich']);
  this.executeCharTest('≄', ['nicht asymptotisch gleich', 'nicht asymptotisch gleich', 'nicht asymptotisch gleich']);
  this.executeCharTest('≅', ['ungefähr gleich', 'ungefähr gleich', 'ungefähr gleich']);
  this.executeCharTest('≆', ['ungefähr, aber nicht ganz gleich', 'ungefähr, aber nicht ganz gleich', 'ungefähr, aber nicht ganz gleich']);
  this.executeCharTest('≇', ['weder ungefähr noch ganz gleich', 'weder ungefähr noch ganz gleich', 'weder ungefähr noch ganz gleich']);
  this.executeCharTest('≈', ['beinahe gleich', 'beinahe gleich', 'beinahe gleich']);
  this.executeCharTest('≉', ['nicht beinahe gleich', 'nicht beinahe gleich', 'nicht beinahe gleich']);
  this.executeCharTest('≊', ['beinahe gleich oder gleich', 'beinahe gleich oder gleich', 'beinahe gleich oder gleich']);
  this.executeCharTest('≋', ['dreifache Tilde', 'dreifache Tilde', 'dreifache Tilde']);
  this.executeCharTest('≌', ['alles gleich', 'alles gleich', 'alles gleich']);
  this.executeCharTest('≍', ['äquivalent zu', 'äquivalent zu', 'äquivalent zu']);
  this.executeCharTest('≎', ['geometrisch äquivalent zu', 'geometrisch äquivalent zu', 'geometrisch äquivalent zu']);
  this.executeCharTest('≏', ['Differenz zwischen', 'Differenz zwischen', 'Differenz zwischen']);
  this.executeCharTest('≐', ['nähert sich der Grenze', 'nähert sich der Grenze', 'nähert sich der Grenze']);
  this.executeCharTest('≑', ['geometrisch gleich', 'geometrisch gleich', 'geometrisch gleich']);
  this.executeCharTest('≒', ['Ungefähr gleich oder das Bild von', 'Ungefähr gleich oder das Bild von', 'Ungefähr gleich oder das Bild von']);
  this.executeCharTest('≓', ['Bild von oder ungefähr gleich', 'Bild von oder ungefähr gleich', 'Bild von oder ungefähr gleich']);
  this.executeCharTest('≔', ['definiert als', 'definiert als', 'definiert als']);
  this.executeCharTest('≕', ['definiert als von rechts', 'definiert als von rechts', 'definiert als von rechts']);
  this.executeCharTest('≖', ['ungefähr gleich', 'ungefähr gleich', 'ungefähr gleich']);
  this.executeCharTest('≗', ['ungefähr gleich', 'ungefähr gleich', 'ungefähr gleich']);
  this.executeCharTest('≘', ['entspricht', 'entspricht', 'entspricht']);
  this.executeCharTest('≙', ['entspricht', 'entspricht', 'entspricht']);
  this.executeCharTest('≚', ['gleichwinklig zu', 'gleichwinklig zu', 'gleichwinklig zu']);
  this.executeCharTest('≛', ['gleich mit Stern', 'gleich mit Stern', 'gleich mit Stern']);
  this.executeCharTest('≜', ['gleich mit Delta', 'gleich mit Delta', 'gleich mit Delta']);
  this.executeCharTest('≝', ['definitionsgemäß gleich', 'definitionsgemäß gleich', 'definitionsgemäß gleich']);
  this.executeCharTest('≞', ['gemessen mit', 'gemessen mit', 'gemessen mit']);
  this.executeCharTest('≟', ['vielleicht gleich', 'vielleicht gleich', 'vielleicht gleich']);
  this.executeCharTest('≠', ['ungleich', 'ungleich', 'ungleich']);
  this.executeCharTest('≡', ['kongruent mit', 'kongruent mit', 'kongruent mit']);
  this.executeCharTest('≢', ['nicht kongruent mit', 'nicht kongruent mit', 'nicht kongruent mit']);
  this.executeCharTest('≣', ['genau äquivalent mit', 'genau äquivalent mit', 'genau äquivalent mit']);
  this.executeCharTest('≤', ['kleiner oder gleich', 'kleiner oder gleich', 'kleiner oder gleich']);
  this.executeCharTest('≥', ['größer oder gleich', 'größer oder gleich', 'größer oder gleich']);
  this.executeCharTest('≦', ['kleiner als über gleich', 'kleiner als über gleich', 'kleiner als über gleich']);
  this.executeCharTest('≧', ['größer als über gleich', 'größer als über gleich', 'größer als über gleich']);
  this.executeCharTest('≨', ['kleiner als, aber nicht gleich', 'kleiner als, aber nicht gleich', 'kleiner als, aber nicht gleich']);
  this.executeCharTest('≩', ['größer als, aber nicht gleich', 'größer als, aber nicht gleich', 'größer als, aber nicht gleich']);
  this.executeCharTest('≪', ['viel kleiner als', 'viel kleiner als', 'viel kleiner als']);
  this.executeCharTest('≫', ['viel größer als', 'viel größer als', 'viel größer als']);
  this.executeCharTest('≬', ['zwischen', 'zwischen', 'zwischen']);
  this.executeCharTest('≭', ['nicht äquivalent mit', 'nicht äquivalent mit', 'nicht äquivalent mit']);
  this.executeCharTest('≮', ['nicht kleiner als', 'nicht kleiner als', 'nicht kleiner als']);
  this.executeCharTest('≯', ['nicht größer als', 'nicht größer als', 'nicht größer als']);
  this.executeCharTest('≰', ['weder kleiner als noch gleich', 'weder kleiner als noch gleich', 'weder kleiner als noch gleich']);
  this.executeCharTest('≱', ['weder größer als noch gleich', 'weder größer als noch gleich', 'weder größer als noch gleich']);
  this.executeCharTest('≲', ['kleiner als oder äquivalent', 'kleiner als oder äquivalent', 'kleiner als oder äquivalent']);
  this.executeCharTest('≳', ['größer als oder äquivalent', 'größer als oder äquivalent', 'größer als oder äquivalent']);
  this.executeCharTest('≴', ['weder kleiner als noch äquivalent', 'weder kleiner als noch äquivalent', 'weder kleiner als noch äquivalent']);
  this.executeCharTest('≵', ['weder größer als noch äquivalent', 'weder größer als noch äquivalent', 'weder größer als noch äquivalent']);
  this.executeCharTest('≶', ['kleiner oder größer als', 'kleiner oder größer als', 'kleiner oder größer als']);
  this.executeCharTest('≷', ['größer oder kleiner als', 'größer oder kleiner als', 'größer oder kleiner als']);
  this.executeCharTest('≸', ['weder kleiner noch größer als', 'weder kleiner noch größer als', 'weder kleiner noch größer als']);
  this.executeCharTest('≹', ['weder größer noch kleiner als', 'weder größer noch kleiner als', 'weder größer noch kleiner als']);
  this.executeCharTest('≺', ['vorangehend', 'vorangehend', 'vorangehend']);
  this.executeCharTest('≻', ['nachfolgend', 'nachfolgend', 'nachfolgend']);
  this.executeCharTest('≼', ['vorangehend oder gleich', 'vorangehend oder gleich', 'vorangehend oder gleich']);
  this.executeCharTest('≽', ['nachfolgend oder gleich', 'nachfolgend oder gleich', 'nachfolgend oder gleich']);
  this.executeCharTest('≾', ['vorangehend oder äquivalent', 'vorangehend oder äquivalent', 'vorangehend oder äquivalent']);
  this.executeCharTest('≿', ['nachfolgend oder äquivalent', 'nachfolgend oder äquivalent', 'nachfolgend oder äquivalent']);
  this.executeCharTest('⊀', ['nicht vorangehend', 'nicht vorangehend', 'nicht vorangehend']);
  this.executeCharTest('⊁', ['nicht nachfolgend', 'nicht nachfolgend', 'nicht nachfolgend']);
  this.executeCharTest('⊂', ['echte Teilmenge von', 'echte Teilmenge von', 'echte Teilmenge von']);
  this.executeCharTest('⊃', ['echte Obermenge von', 'echte Obermenge von', 'echte Obermenge von']);
  this.executeCharTest('⊄', ['keine echte Teilmenge von', 'keine echte Teilmenge von', 'keine echte Teilmenge von']);
  this.executeCharTest('⊅', ['kein echte Obermenge von', 'kein echte Obermenge von', 'kein echte Obermenge von']);
  this.executeCharTest('⊆', ['Teilmenge oder gleich', 'Teilmenge oder gleich', 'Teilmenge oder gleich']);
  this.executeCharTest('⊇', ['Obermenge oder gleich', 'Obermenge oder gleich', 'Obermenge oder gleich']);
  this.executeCharTest('⊈', ['weder Teilmenge noch gleich', 'weder Teilmenge noch gleich', 'weder Teilmenge noch gleich']);
  this.executeCharTest('⊉', ['weder Obermenge noch gleich', 'weder Obermenge noch gleich', 'weder Obermenge noch gleich']);
  this.executeCharTest('⊊', ['Teilmenge aber nicht gleich', 'Teilmenge aber nicht gleich', 'Teilmenge aber nicht gleich']);
  this.executeCharTest('⊋', ['Obermenge aber nicht gleich', 'Obermenge aber nicht gleich', 'Obermenge aber nicht gleich']);
  this.executeCharTest('⊌', ['Multimenge', 'Multimenge', 'Multimenge']);
  this.executeCharTest('⊍', ['Multimengenmultiplikation', 'Multimengenmultiplikation', 'Multimengenmultiplikation']);
  this.executeCharTest('⊎', ['Multimengenvereinigung', 'Multimengenvereinigung', 'Multimengenvereinigung']);
  this.executeCharTest('⊏', ['quadratisches Bild von', 'quadratisches Bild von', 'quadratisches Bild von']);
  this.executeCharTest('⊐', ['quadratisches Original von', 'quadratisches Original von', 'quadratisches Original von']);
  this.executeCharTest('⊑', ['quadratisches Bild oder gleich', 'quadratisches Bild oder gleich', 'quadratisches Bild oder gleich']);
  this.executeCharTest('⊒', ['quadratisches Original oder gleich', 'quadratisches Original oder gleich', 'quadratisches Original oder gleich']);
  this.executeCharTest('⊓', ['quadratische Schnittmenge', 'quadratische Schnittmenge', 'quadratische Schnittmenge']);
  this.executeCharTest('⊔', ['quadratische VereinigungTasse', 'quadratische VereinigungTasse', 'quadratische VereinigungTasse']);
  this.executeCharTest('⊕', ['eingekreistes Plus', 'eingekreistes Plus', 'eingekreistes Plus']);
  this.executeCharTest('⊖', ['eingekreistes Minus', 'eingekreistes Minus', 'eingekreistes Minus']);
  this.executeCharTest('⊗', ['eingekreiste Multiplikation', 'eingekreiste Multiplikation', 'eingekreiste Multiplikation']);
  this.executeCharTest('⊘', ['eingekreiste Division', 'eingekreiste Division', 'eingekreiste Division']);
  this.executeCharTest('⊙', ['eingekreister Punktoperator', 'eingekreister Punktoperator', 'eingekreister Punktoperator']);
  this.executeCharTest('⊚', ['eingekreister Ringoperator', 'eingekreister Ringoperator', 'eingekreister Ringoperator']);
  this.executeCharTest('⊛', ['eingekreister Sternoperator', 'eingekreister Sternoperator', 'eingekreister Sternoperator']);
  this.executeCharTest('⊜', ['eingekreistes Gleich', 'eingekreistes Gleich', 'eingekreistes Gleich']);
  this.executeCharTest('⊝', ['eingekreister Gedankenstrich', 'eingekreister Gedankenstrich', 'eingekreister Gedankenstrich']);
  this.executeCharTest('⊞', ['eingerahmtes Plus', 'eingerahmtes Plus', 'eingerahmtes Plus']);
  this.executeCharTest('⊟', ['eingerahmtes Minus', 'eingerahmtes Minus', 'eingerahmtes Minus']);
  this.executeCharTest('⊠', ['eingerahmte Multiplikation', 'eingerahmte Multiplikation', 'eingerahmte Multiplikation']);
  this.executeCharTest('⊡', ['eingerahmter Punktoperator', 'eingerahmter Punktoperator', 'eingerahmter Punktoperator']);
  this.executeCharTest('⊢', ['ergibt', 'ergibt', 'ergibt']);
  this.executeCharTest('⊣', ['ergibt nicht', 'ergibt nicht', 'ergibt nicht']);
  this.executeCharTest('⊤', ['senkrecht von', 'senkrecht von', 'senkrecht von']);
  this.executeCharTest('⊥', ['senkrecht auf', 'senkrecht auf', 'senkrecht auf']);
  this.executeCharTest('⊦', ['Behauptung', 'Behauptung', 'Behauptung']);
  this.executeCharTest('⊧', ['Model', 'Model', 'Model']);
  this.executeCharTest('⊨', ['wahr', 'wahr', 'wahr']);
  this.executeCharTest('⊩', ['erzwingen', 'erzwingen', 'erzwingen']);
  this.executeCharTest('⊪', ['dreifache vertikale Leiste mit rechtem Drehkreuz', 'dreifache vertikale Leiste mit rechtem Drehkreuz', 'dreifache vertikale Leiste mit rechtem Drehkreuz']);
  this.executeCharTest('⊫', ['doppelte vertikale Leiste mit doppeltem rechtem Drehkreuz', 'doppelte vertikale Leiste mit doppeltem rechtem Drehkreuz', 'doppelte vertikale Leiste mit doppeltem rechtem Drehkreuz']);
  this.executeCharTest('⊬', ['beweist nicht', 'beweist nicht', 'beweist nicht']);
  this.executeCharTest('⊭', ['nicht wahr', 'nicht wahr', 'nicht wahr']);
  this.executeCharTest('⊮', ['nicht erzwingen', 'nicht erzwingen', 'nicht erzwingen']);
  this.executeCharTest('⊯', ['negierte doppelte vertikale Leiste mit doppeltem rechten Drehkreuz', 'negierte doppelte vertikale Leiste mit doppeltem rechten Drehkreuz', 'negierte doppelte vertikale Leiste mit doppeltem rechten Drehkreuz']);
  this.executeCharTest('⊰', ['vorangehend in Relation', 'vorangehend in Relation', 'vorangehend in Relation']);
  this.executeCharTest('⊱', ['nachfolgend in Relation', 'nachfolgend in Relation', 'nachfolgend in Relation']);
  this.executeCharTest('⊲', ['normale Untergruppe', 'normale Untergruppe', 'normale Untergruppe']);
  this.executeCharTest('⊳', ['enthält normale Untergruppe', 'enthält normale Untergruppe', 'enthält normale Untergruppe']);
  this.executeCharTest('⊴', ['normale Untergruppe von oder gleich', 'normale Untergruppe von oder gleich', 'normale Untergruppe von oder gleich']);
  this.executeCharTest('⊵', ['enthält normale Untergruppe oder gleich', 'enthält normale Untergruppe oder gleich', 'enthält normale Untergruppe oder gleich']);
  this.executeCharTest('⊶', ['Original von', 'Original von', 'Original von']);
  this.executeCharTest('⊷', ['Bild von', 'Bild von', 'Bild von']);
  this.executeCharTest('⊸', ['Mehrfachzuordnung', 'Mehrfachzuordnung', 'Mehrfachzuordnung']);
  this.executeCharTest('⊹', ['hermitesch konjugierte Matrix', 'hermitesch konjugierte Matrix', 'hermitesch konjugierte Matrix']);
  this.executeCharTest('⊺', ['einschalten', 'einschalten', 'einschalten']);
  this.executeCharTest('⊻', ['Ausschließendes Oder', 'Ausschließendes Oder', 'Ausschließendes Oder']);
  this.executeCharTest('⊼', ['Nand verknüpft mit', 'Nand verknüpft mit', 'Nand verknüpft mit']);
  this.executeCharTest('⊽', ['Nor verknüpft mit', 'Nor verknüpft mit', 'Nor verknüpft mit']);
  this.executeCharTest('⊿', ['rechtwinkliges Dreieck', 'rechtwinkliges Dreieck', 'rechtwinkliges Dreieck']);
  this.executeCharTest('⋀', ['N-stufiges logisches Und', 'N-stufiges logisches Und', 'N-stufiges logisches Und']);
  this.executeCharTest('⋁', ['N-stufiges logisches Oder', 'N-stufiges logisches Oder', 'N-stufiges logisches Oder']);
  this.executeCharTest('⋂', ['N-stufiger Durchschnitt', 'N-stufiger Durchschnitt', 'N-stufiger Durchschnitt']);
  this.executeCharTest('⋃', ['N-stufige Vereinigung', 'N-stufige Vereinigung', 'N-stufige Vereinigung']);
  this.executeCharTest('⋄', ['Rautenoperator', 'Rautenoperator', 'Rautenoperator']);
  this.executeCharTest('⋅', ['mal', 'mal', 'mal']);
  this.executeCharTest('⋆', ['Sternoperator', 'Sternoperator', 'Sternoperator']);
  this.executeCharTest('⋇', ['Divisionsanzahl', 'Divisionsanzahl', 'Divisionsanzahl']);
  this.executeCharTest('⋈', ['Schleife', 'Schleife', 'Schleife']);
  this.executeCharTest('⋉', ['linkes halbdirektes Produkt', 'linkes halbdirektes Produkt', 'linkes halbdirektes Produkt']);
  this.executeCharTest('⋊', ['rechtes halbdirektes Produkt', 'rechtes halbdirektes Produkt', 'rechtes halbdirektes Produkt']);
  this.executeCharTest('⋋', ['linkes halbdirektes Produkt', 'linkes halbdirektes Produkt', 'linkes halbdirektes Produkt']);
  this.executeCharTest('⋌', ['rechtes halbdirektes Produkt', 'rechtes halbdirektes Produkt', 'rechtes halbdirektes Produkt']);
  this.executeCharTest('⋍', ['umgekehrte Tilde gleich', 'umgekehrte Tilde gleich', 'umgekehrte Tilde gleich']);
  this.executeCharTest('⋎', ['geschweiftes logisches Oder', 'geschweiftes logisches Oder', 'geschweiftes logisches Oder']);
  this.executeCharTest('⋏', ['geschweiftes logisches Und', 'geschweiftes logisches Und', 'geschweiftes logisches Und']);
  this.executeCharTest('⋐', ['doppelte Teilmenge', 'doppelte Teilmenge', 'doppelte Teilmenge']);
  this.executeCharTest('⋑', ['doppelte Obermenge', 'doppelte Obermenge', 'doppelte Obermenge']);
  this.executeCharTest('⋒', ['doppelter Durchschnitt', 'doppelter Durchschnitt', 'doppelter Durchschnitt']);
  this.executeCharTest('⋓', ['doppelte Vereinigung', 'doppelte Vereinigung', 'doppelte Vereinigung']);
  this.executeCharTest('⋔', ['echter Durchschnitt', 'echter Durchschnitt', 'echter Durchschnitt']);
  this.executeCharTest('⋕', ['gleich und parallel', 'gleich und parallel', 'gleich und parallel']);
  this.executeCharTest('⋖', ['kleiner als mit Punkt', 'kleiner als mit Punkt', 'kleiner als mit Punkt']);
  this.executeCharTest('⋗', ['größer als mit Punkt', 'größer als mit Punkt', 'größer als mit Punkt']);
  this.executeCharTest('⋘', ['sehr viel kleiner als', 'sehr viel kleiner als', 'sehr viel kleiner als']);
  this.executeCharTest('⋙', ['sehr viel größer als', 'sehr viel größer als', 'sehr viel größer als']);
  this.executeCharTest('⋚', ['kleiner als, gleich oder größer als', 'kleiner als, gleich oder größer als', 'kleiner als, gleich oder größer als']);
  this.executeCharTest('⋛', ['größer als, gleich oder kleiner als', 'größer als, gleich oder kleiner als', 'größer als, gleich oder kleiner als']);
  this.executeCharTest('⋜', ['gleich oder kleiner als', 'gleich oder kleiner als', 'gleich oder kleiner als']);
  this.executeCharTest('⋝', ['gleich oder größer als', 'gleich oder größer als', 'gleich oder größer als']);
  this.executeCharTest('⋞', ['gleich oder vorangehend', 'gleich oder vorangehend', 'gleich oder vorangehend']);
  this.executeCharTest('⋟', ['gleich oder nachfolgend', 'gleich oder nachfolgend', 'gleich oder nachfolgend']);
  this.executeCharTest('⋠', ['weder vorangehend oder gleich', 'weder vorangehend oder gleich', 'weder vorangehend oder gleich']);
  this.executeCharTest('⋡', ['weder nachfolgend oder gleich', 'weder nachfolgend oder gleich', 'weder nachfolgend oder gleich']);
  this.executeCharTest('⋢', ['kein quadratisches Bild oder gleich', 'kein quadratisches Bild oder gleich', 'kein quadratisches Bild oder gleich']);
  this.executeCharTest('⋣', ['kein quadratisches Original oder gleich', 'kein quadratisches Original oder gleich', 'kein quadratisches Original oder gleich']);
  this.executeCharTest('⋤', ['quadratisches Bild oder nicht gleich', 'quadratisches Bild oder nicht gleich', 'quadratisches Bild oder nicht gleich']);
  this.executeCharTest('⋥', ['quadratisches Original oder nicht gleich', 'quadratisches Original oder nicht gleich', 'quadratisches Original oder nicht gleich']);
  this.executeCharTest('⋦', ['kleiner als, aber nicht äquivalent', 'kleiner als, aber nicht äquivalent', 'kleiner als, aber nicht äquivalent']);
  this.executeCharTest('⋧', ['größer als, aber nicht äquivalent', 'größer als, aber nicht äquivalent', 'größer als, aber nicht äquivalent']);
  this.executeCharTest('⋨', ['vorangehend, aber nicht äquivalent', 'vorangehend, aber nicht äquivalent', 'vorangehend, aber nicht äquivalent']);
  this.executeCharTest('⋩', ['nachfolgend, aber nicht äquivalent', 'nachfolgend, aber nicht äquivalent', 'nachfolgend, aber nicht äquivalent']);
  this.executeCharTest('⋪', ['nicht normale Untergruppe von', 'nicht normale Untergruppe von', 'nicht normale Untergruppe von']);
  this.executeCharTest('⋫', ['enthält keine normale Untergruppe', 'enthält keine normale Untergruppe', 'enthält keine normale Untergruppe']);
  this.executeCharTest('⋬', ['keine normale Untergruppe von oder gleich', 'keine normale Untergruppe von oder gleich', 'keine normale Untergruppe von oder gleich']);
  this.executeCharTest('⋭', ['enthält nicht als normale Untergruppe oder gleich', 'enthält nicht als normale Untergruppe oder gleich', 'enthält nicht als normale Untergruppe oder gleich']);
  this.executeCharTest('⋮', ['Vertikale Ellipsis', 'Vertikale Ellipsis', 'Vertikale Ellipsis']);
  this.executeCharTest('⋯', ['Zentrierte horizontale Ellipse', 'Zentrierte horizontale Ellipse', 'Zentrierte horizontale Ellipse']);
  this.executeCharTest('⋰', ['Diagonale Ellipse unten links nach oben rechts', 'Diagonale Ellipse unten links nach oben rechts', 'Diagonale Ellipse unten links nach oben rechts']);
  this.executeCharTest('⋱', ['Diagonale Ellipse, oben links nach unten rechts', 'Diagonale Ellipse, oben links nach unten rechts', 'Diagonale Ellipse, oben links nach unten rechts']);
  this.executeCharTest('⋲', ['Element mit langem horizontalen Strich', 'Element mit langem horizontalen Strich', 'Element mit langem horizontalen Strich']);
  this.executeCharTest('⋳', ['Element mit vertikalem Strich am Ende des horizontalen Strichs', 'Element mit vertikalem Strich am Ende des horizontalen Strichs', 'Element mit vertikalem Strich am Ende des horizontalen Strichs']);
  this.executeCharTest('⋴', ['kleines Element mit vertikalem Strich am Ende des horizontalen Strichs', 'kleines Element mit vertikalem Strich am Ende des horizontalen Strichs', 'kleines Element mit vertikalem Strich am Ende des horizontalen Strichs']);
  this.executeCharTest('⋵', ['Element mit Punkt', 'Element mit Punkt', 'Element mit Punkt']);
  this.executeCharTest('⋶', ['Element mit Überstrich', 'Element mit Überstrich', 'Element mit Überstrich']);
  this.executeCharTest('⋷', ['kleines Element mit Überstrich', 'kleines Element mit Überstrich', 'kleines Element mit Überstrich']);
  this.executeCharTest('⋸', ['Element mit Unterstrich', 'Element mit Unterstrich', 'Element mit Unterstrich']);
  this.executeCharTest('⋹', ['Element mit 2 horizontalen Strichen', 'Element mit 2 horizontalen Strichen', 'Element mit 2 horizontalen Strichen']);
  this.executeCharTest('⋺', ['umgekehrtes Elementzeichen mit langem horizontalen Strich', 'umgekehrtes Elementzeichen mit langem horizontalen Strich', 'umgekehrtes Elementzeichen mit langem horizontalen Strich']);
  this.executeCharTest('⋻', ['umgekehrtes Elementzeichen mit vertikalem Strich am Ende des horizontalen Strichs', 'umgekehrtes Elementzeichen mit vertikalem Strich am Ende des horizontalen Strichs', 'umgekehrtes Elementzeichen mit vertikalem Strich am Ende des horizontalen Strichs']);
  this.executeCharTest('⋼', ['kleines umgekehrtes Elementzeichen mit vertikalem Strich am Ende des horizontalen Strichs', 'kleines umgekehrtes Elementzeichen mit vertikalem Strich am Ende des horizontalen Strichs', 'kleines umgekehrtes Elementzeichen mit vertikalem Strich am Ende des horizontalen Strichs']);
  this.executeCharTest('⋽', ['umgekehrtes Elementzeichen mit Überstrich', 'umgekehrtes Elementzeichen mit Überstrich', 'umgekehrtes Elementzeichen mit Überstrich']);
  this.executeCharTest('⋾', ['kleines umgekehrtes Elementzeichen mit Überstrich', 'kleines umgekehrtes Elementzeichen mit Überstrich', 'kleines umgekehrtes Elementzeichen mit Überstrich']);
  this.executeCharTest('⋿', ['Z-Notation-Bag-Mitgliedschaft', 'Z-Notation-Bag-Mitgliedschaft', 'Z-Notation-Bag-Mitgliedschaft']);
  this.executeCharTest('⌀', ['Durchmesser-Zeichen', 'Durchmesser-Zeichen', 'Durchmesser-Zeichen']);
  this.executeCharTest('⌂', ['Haus', 'Haus', 'Haus']);
  this.executeCharTest('⌅', ['Projektiv', 'Projektiv', 'Projektiv']);
  this.executeCharTest('⌆', ['Perspektive', 'Perspektive', 'Perspektive']);
  this.executeCharTest('⌇', ['Schlangenlinie', 'Schlangenlinie', 'Schlangenlinie']);
  this.executeCharTest('⌐', ['Umgekehrtes Nichtzeichen', 'Umgekehrtes Nichtzeichen', 'Umgekehrtes Nichtzeichen']);
  this.executeCharTest('⌑', ['Quadratische Raute', 'Quadratische Raute', 'Quadratische Raute']);
  this.executeCharTest('⌒', ['Bogen', 'Bogen', 'Bogen']);
  this.executeCharTest('⌓', ['Segment', 'Segment', 'Segment']);
  this.executeCharTest('⌔', ['Sektor', 'Sektor', 'Sektor']);
  this.executeCharTest('➕', ['Schweres Pluszeichen', 'Schweres Pluszeichen', 'Schweres Pluszeichen']);
  this.executeCharTest('➖', ['Schweres Minuszeichen', 'Schweres Minuszeichen', 'Schweres Minuszeichen']);
  this.executeCharTest('➗', ['Heavy Division Sign', 'Heavy Division Sign', 'Heavy Division Sign']);
  this.executeCharTest('➰', ['Curly Loop', 'Curly Loop', 'Curly Loop']);
  this.executeCharTest('➿', ['Doppelte geschweifte Schleife', 'Doppelte geschweifte Schleife', 'Doppelte geschweifte Schleife']);
  this.executeCharTest('⟁', ['Weißes Dreieck, das kleines weißes Dreieck enthält', 'Weißes Dreieck, das kleines weißes Dreieck enthält', 'Weißes Dreieck, das kleines weißes Dreieck enthält']);
  this.executeCharTest('⟂', ['Aufrecht', 'Aufrecht', 'Aufrecht']);
  this.executeCharTest('⟃', ['Subset öffnen', 'Subset öffnen', 'Subset öffnen']);
  this.executeCharTest('⟄', ['Superset öffnen', 'Superset öffnen', 'Superset öffnen']);
  this.executeCharTest('⟇', ['Oder mit innerem Punkt', 'Oder mit innerem Punkt', 'Oder mit innerem Punkt']);
  this.executeCharTest('⟈', ['Umgekehrter Schrägstrich Vorhergehender Teilsatz', 'Umgekehrter Schrägstrich Vorhergehender Teilsatz', 'Umgekehrter Schrägstrich Vorhergehender Teilsatz']);
  this.executeCharTest('⟉', ['Superset Vorgänger Schrägstrich', 'Superset Vorgänger Schrägstrich', 'Superset Vorgänger Schrägstrich']);
  this.executeCharTest('⟊', ['Vertikaler Balken mit horizontalem Hub', 'Vertikaler Balken mit horizontalem Hub', 'Vertikaler Balken mit horizontalem Hub']);
  this.executeCharTest('⟋', ['Mathematische aufsteigende Diagonale', 'Mathematische aufsteigende Diagonale', 'Mathematische aufsteigende Diagonale']);
  this.executeCharTest('⟌', ['Lange Abteilung', 'Lange Abteilung', 'Lange Abteilung']);
  this.executeCharTest('⟍', ['Mathematische fallende Diagonale', 'Mathematische fallende Diagonale', 'Mathematische fallende Diagonale']);
  this.executeCharTest('⟎', ['quadratisches und', 'quadratisches und', 'quadratisches und']);
  this.executeCharTest('⟏', ['quadratisches oder', 'quadratisches oder', 'quadratisches oder']);
  this.executeCharTest('⟐', ['Weißer Diamant mit zentriertem Punkt', 'Weißer Diamant mit zentriertem Punkt', 'Weißer Diamant mit zentriertem Punkt']);
  this.executeCharTest('⟑', ['Und mit Dot', 'Und mit Dot', 'Und mit Dot']);
  this.executeCharTest('⟒', ['Element der Öffnung nach oben', 'Element der Öffnung nach oben', 'Element der Öffnung nach oben']);
  this.executeCharTest('⟓', ['Untere rechte Ecke mit Punkt', 'Untere rechte Ecke mit Punkt', 'Untere rechte Ecke mit Punkt']);
  this.executeCharTest('⟔', ['Obere linke Ecke mit Punkt', 'Obere linke Ecke mit Punkt', 'Obere linke Ecke mit Punkt']);
  this.executeCharTest('⟕', ['Linke äußere Verbindung', 'Linke äußere Verbindung', 'Linke äußere Verbindung']);
  this.executeCharTest('⟖', ['rechter äußerer Join', 'rechter äußerer Join', 'rechter äußerer Join']);
  this.executeCharTest('⟗', ['Volle äußere Verbindung', 'Volle äußere Verbindung', 'Volle äußere Verbindung']);
  this.executeCharTest('⟘', ['Große Up Tack', 'Große Up Tack', 'Große Up Tack']);
  this.executeCharTest('⟙', ['Großes Down Tack', 'Großes Down Tack', 'Großes Down Tack']);
  this.executeCharTest('⟚', ['Linkes und rechtes doppeltes Drehkreuz', 'Linkes und rechtes doppeltes Drehkreuz', 'Linkes und rechtes doppeltes Drehkreuz']);
  this.executeCharTest('⟛', ['Linker und rechter Tack', 'Linker und rechter Tack', 'Linker und rechter Tack']);
  this.executeCharTest('⟜', ['Linke Multimap', 'Linke Multimap', 'Linke Multimap']);
  this.executeCharTest('⟝', ['Long Right Tack', 'Long Right Tack', 'Long Right Tack']);
  this.executeCharTest('⟞', ['Langer linker Tack', 'Langer linker Tack', 'Langer linker Tack']);
  this.executeCharTest('⟟', ['Up Tack mit Kreis oben', 'Up Tack mit Kreis oben', 'Up Tack mit Kreis oben']);
  this.executeCharTest('⟠', ['Raute durch horizontale Regel geteilt', 'Raute durch horizontale Regel geteilt', 'Raute durch horizontale Regel geteilt']);
  this.executeCharTest('⟡', ['Weißer konkavseitiger Diamant', 'Weißer konkavseitiger Diamant', 'Weißer konkavseitiger Diamant']);
  this.executeCharTest('⟢', ['Weißer konkavseitiger Diamant mit Zecke nach links', 'Weißer konkavseitiger Diamant mit Zecke nach links', 'Weißer konkavseitiger Diamant mit Zecke nach links']);
  this.executeCharTest('⟣', ['Weißer konkavseitiger Diamant mit Zecke nach rechts', 'Weißer konkavseitiger Diamant mit Zecke nach rechts', 'Weißer konkavseitiger Diamant mit Zecke nach rechts']);
  this.executeCharTest('⟤', ['Weißes Quadrat mit Zecke nach links', 'Weißes Quadrat mit Zecke nach links', 'Weißes Quadrat mit Zecke nach links']);
  this.executeCharTest('⟥', ['Weißes Quadrat mit Tick nach rechts', 'Weißes Quadrat mit Tick nach rechts', 'Weißes Quadrat mit Tick nach rechts']);
  this.executeCharTest('⤫', ['Steigende diagonale Kreuzung fallende Diagonale', 'Steigende diagonale Kreuzung fallende Diagonale', 'Steigende diagonale Kreuzung fallende Diagonale']);
  this.executeCharTest('⤬', ['Fallende diagonale Kreuzung steigende Diagonale', 'Fallende diagonale Kreuzung steigende Diagonale', 'Fallende diagonale Kreuzung steigende Diagonale']);
  this.executeCharTest('⦀', ['Dreifacher vertikaler Balkenbegrenzer', 'Dreifacher vertikaler Balkenbegrenzer', 'Dreifacher vertikaler Balkenbegrenzer']);
  this.executeCharTest('⦁', ['Z Notationspunkt', 'Z Notationspunkt', 'Z Notationspunkt']);
  this.executeCharTest('⦂', ['Z Notationstyp Doppelpunkt', 'Z Notationstyp Doppelpunkt', 'Z Notationstyp Doppelpunkt']);
  this.executeCharTest('⦙', ['Gepunkteter Zaun', 'Gepunkteter Zaun', 'Gepunkteter Zaun']);
  this.executeCharTest('⦚', ['Vertikale Zickzacklinie', 'Vertikale Zickzacklinie', 'Vertikale Zickzacklinie']);
  this.executeCharTest('⦰', ['Umgekehrter leerer Satz', 'Umgekehrter leerer Satz', 'Umgekehrter leerer Satz']);
  this.executeCharTest('⦱', ['Leeres Set mit Overbar', 'Leeres Set mit Overbar', 'Leeres Set mit Overbar']);
  this.executeCharTest('⦲', ['Leeres Set mit kleinem Kreis oben', 'Leeres Set mit kleinem Kreis oben', 'Leeres Set mit kleinem Kreis oben']);
  this.executeCharTest('⦵', ['Kreis mit horizontaler Leiste', 'Kreis mit horizontaler Leiste', 'Kreis mit horizontaler Leiste']);
  this.executeCharTest('⦶', ['circled vertical bar', 'circled vertical bar', 'circled vertical bar']);
  this.executeCharTest('⦷', ['eingekreiste Parallele', 'eingekreiste Parallele', 'eingekreiste Parallele']);
  this.executeCharTest('⦸', ['eingekreister umgekehrter Schrägstrich', 'eingekreister umgekehrter Schrägstrich', 'eingekreister umgekehrter Schrägstrich']);
  this.executeCharTest('⦹', ['eingekreistes Senkrecht', 'eingekreistes Senkrecht', 'eingekreistes Senkrecht']);
  this.executeCharTest('⦺', ['Kreis geteilt durch horizontale Leiste und obere Hälfte geteilt durch vertikale Leiste', 'Kreis geteilt durch horizontale Leiste und obere Hälfte geteilt durch vertikale Leiste', 'Kreis geteilt durch horizontale Leiste und obere Hälfte geteilt durch vertikale Leiste']);
  this.executeCharTest('⦻', ['Kreis mit überlagertem X', 'Kreis mit überlagertem X', 'Kreis mit überlagertem X']);
  this.executeCharTest('⦼', ['eingekreistes, gegen den Uhrzeigersinn gedrehtes Divisionszeichen', 'eingekreistes, gegen den Uhrzeigersinn gedrehtes Divisionszeichen', 'eingekreistes, gegen den Uhrzeigersinn gedrehtes Divisionszeichen']);
  this.executeCharTest('⦾', ['eingekreiste weiße Kugel', 'eingekreiste weiße Kugel', 'eingekreiste weiße Kugel']);
  this.executeCharTest('⦿', ['eingekreiste Kugel', 'eingekreiste Kugel', 'eingekreiste Kugel']);
  this.executeCharTest('⧀', ['eingekreist weniger als', 'eingekreist weniger als', 'eingekreist weniger als']);
  this.executeCharTest('⧁', ['eingekreist größer als', 'eingekreist größer als', 'eingekreist größer als']);
  this.executeCharTest('⧂', ['Kreis mit kleinem Kreis nach rechts', 'Kreis mit kleinem Kreis nach rechts', 'Kreis mit kleinem Kreis nach rechts']);
  this.executeCharTest('⧃', ['Kreis mit zwei horizontalen Strichen nach rechts', 'Kreis mit zwei horizontalen Strichen nach rechts', 'Kreis mit zwei horizontalen Strichen nach rechts']);
  this.executeCharTest('⧄', ['Quadrat mit Diagonale links unten nach rechts oben', 'Quadrat mit Diagonale links unten nach rechts oben', 'Quadrat mit Diagonale links unten nach rechts oben']);
  this.executeCharTest('⧅', ['Quadrat mit Diagonale links oben nach rechts unten', 'Quadrat mit Diagonale links oben nach rechts unten', 'Quadrat mit Diagonale links oben nach rechts unten']);
  this.executeCharTest('⧆', ['Quadrat Sternchen', 'Quadrat Sternchen', 'Quadrat Sternchen']);
  this.executeCharTest('⧇', ['Quadratischer kleiner Kreis', 'Quadratischer kleiner Kreis', 'Quadratischer kleiner Kreis']);
  this.executeCharTest('⧈', ['Doppelquadrat', 'Doppelquadrat', 'Doppelquadrat']);
  this.executeCharTest('⧉', ['Zwei verbundene Quadrate', 'Zwei verbundene Quadrate', 'Zwei verbundene Quadrate']);
  this.executeCharTest('⧊', ['Dreieck mit Punkt oben', 'Dreieck mit Punkt oben', 'Dreieck mit Punkt oben']);
  this.executeCharTest('⧋', ['Dreieck mit Unterleiste', 'Dreieck mit Unterleiste', 'Dreieck mit Unterleiste']);
  this.executeCharTest('⧌', ['S im Dreieck', 'S im Dreieck', 'S im Dreieck']);
  this.executeCharTest('⧍', ['Dreieck mit Serifen unten', 'Dreieck mit Serifen unten', 'Dreieck mit Serifen unten']);
  this.executeCharTest('⧎', ['Rechtes Dreieck über linkem Dreieck', 'Rechtes Dreieck über linkem Dreieck', 'Rechtes Dreieck über linkem Dreieck']);
  this.executeCharTest('⧏', ['Linkes Dreieck neben vertikaler Leiste', 'Linkes Dreieck neben vertikaler Leiste', 'Linkes Dreieck neben vertikaler Leiste']);
  this.executeCharTest('⧐', ['Vertikaler Balken neben dem rechten Dreieck', 'Vertikaler Balken neben dem rechten Dreieck', 'Vertikaler Balken neben dem rechten Dreieck']);
  this.executeCharTest('⧑', ['Fliege mit linker Hälfte schwarz', 'Fliege mit linker Hälfte schwarz', 'Fliege mit linker Hälfte schwarz']);
  this.executeCharTest('⧒', ['Fliege mit rechter Hälfte schwarz', 'Fliege mit rechter Hälfte schwarz', 'Fliege mit rechter Hälfte schwarz']);
  this.executeCharTest('⧓', ['Schwarze Fliege', 'Schwarze Fliege', 'Schwarze Fliege']);
  this.executeCharTest('⧔', ['Zeiten mit linker Hälfte schwarz', 'Zeiten mit linker Hälfte schwarz', 'Zeiten mit linker Hälfte schwarz']);
  this.executeCharTest('⧕', ['Mal mit rechter Hälfte Schwarz', 'Mal mit rechter Hälfte Schwarz', 'Mal mit rechter Hälfte Schwarz']);
  this.executeCharTest('⧖', ['Weiße Sanduhr', 'Weiße Sanduhr', 'Weiße Sanduhr']);
  this.executeCharTest('⧗', ['Schwarze Sanduhr', 'Schwarze Sanduhr', 'Schwarze Sanduhr']);
  this.executeCharTest('⧜', ['Unvollständige Unendlichkeit', 'Unvollständige Unendlichkeit', 'Unvollständige Unendlichkeit']);
  this.executeCharTest('⧝', ['Krawatte über Unendlichkeit', 'Krawatte über Unendlichkeit', 'Krawatte über Unendlichkeit']);
  this.executeCharTest('⧞', ['Unendlichkeit mit vertikaler Leiste negiert', 'Unendlichkeit mit vertikaler Leiste negiert', 'Unendlichkeit mit vertikaler Leiste negiert']);
  this.executeCharTest('⧟', ['Doppelter Multimap', 'Doppelter Multimap', 'Doppelter Multimap']);
  this.executeCharTest('⧠', ['Quadrat mit konturierter Kontur', 'Quadrat mit konturierter Kontur', 'Quadrat mit konturierter Kontur']);
  this.executeCharTest('⧡', ['Erhöht als', 'Erhöht als', 'Erhöht als']);
  this.executeCharTest('⧢', ['Produkt mischen', 'Produkt mischen', 'Produkt mischen']);
  this.executeCharTest('⧣', ['Gleichheitszeichen und geneigte Parallele', 'Gleichheitszeichen und geneigte Parallele', 'Gleichheitszeichen und geneigte Parallele']);
  this.executeCharTest('⧤', ['Gleichheitszeichen und schräge Parallele zu Tilde oben', 'Gleichheitszeichen und schräge Parallele zu Tilde oben', 'Gleichheitszeichen und schräge Parallele zu Tilde oben']);
  this.executeCharTest('⧥', ['Identisch und schräg parallel', 'Identisch und schräg parallel', 'Identisch und schräg parallel']);
  this.executeCharTest('⧦', ['Gleich Stark', 'Gleich Stark', 'Gleich Stark']);
  this.executeCharTest('⧧', ['Thermodynamisch', 'Thermodynamisch', 'Thermodynamisch']);
  this.executeCharTest('⧨', ['Abwärtszeigendes Dreieck mit linker Hälfte schwarz', 'Abwärtszeigendes Dreieck mit linker Hälfte schwarz', 'Abwärtszeigendes Dreieck mit linker Hälfte schwarz']);
  this.executeCharTest('⧩', ['Abwärtsdreieck mit rechter Hälfte schwarz', 'Abwärtsdreieck mit rechter Hälfte schwarz', 'Abwärtsdreieck mit rechter Hälfte schwarz']);
  this.executeCharTest('⧫', ['Schwarze Raute', 'Schwarze Raute', 'Schwarze Raute']);
  this.executeCharTest('⧮', ['Fehlergesperrtes weißes Quadrat', 'Fehlergesperrtes weißes Quadrat', 'Fehlergesperrtes weißes Quadrat']);
  this.executeCharTest('⧯', ['Fehlerfreies schwarzes Quadrat', 'Fehlerfreies schwarzes Quadrat', 'Fehlerfreies schwarzes Quadrat']);
  this.executeCharTest('⧰', ['Fehlergesperrter weißer Diamant', 'Fehlergesperrter weißer Diamant', 'Fehlergesperrter weißer Diamant']);
  this.executeCharTest('⧱', ['Error-Barred Black Diamond', 'Error-Barred Black Diamond', 'Error-Barred Black Diamond']);
  this.executeCharTest('⧲', ['Fehlergesperrter weißer Kreis', 'Fehlergesperrter weißer Kreis', 'Fehlergesperrter weißer Kreis']);
  this.executeCharTest('⧳', ['Fehlergesperrter schwarzer Kreis', 'Fehlergesperrter schwarzer Kreis', 'Fehlergesperrter schwarzer Kreis']);
  this.executeCharTest('⧴', ['rule delayed', 'rule delayed', 'rule delayed']);
  this.executeCharTest('⧵', ['Umgekehrter Schrägstrich Operator', 'Umgekehrter Schrägstrich Operator', 'Umgekehrter Schrägstrich Operator']);
  this.executeCharTest('⧶', ['Schrägstrich mit Overbar', 'Schrägstrich mit Overbar', 'Schrägstrich mit Overbar']);
  this.executeCharTest('⧷', ['Umgekehrter Schrägstrich mit horizontalem Hub', 'Umgekehrter Schrägstrich mit horizontalem Hub', 'Umgekehrter Schrägstrich mit horizontalem Hub']);
  this.executeCharTest('⧸', ['Großer Schrägstrich', 'Großer Schrägstrich', 'Großer Schrägstrich']);
  this.executeCharTest('⧹', ['Großer umgekehrter Schrägstrich', 'Großer umgekehrter Schrägstrich', 'Großer umgekehrter Schrägstrich']);
  this.executeCharTest('⧺', ['Doppel plus', 'Doppel plus', 'Doppel plus']);
  this.executeCharTest('⧻', ['Triple Plus', 'Triple Plus', 'Triple Plus']);
  this.executeCharTest('⧾', ['Winzig', 'Winzig', 'Winzig']);
  this.executeCharTest('⧿', ['Miny', 'Miny', 'Miny']);
  this.executeCharTest('⨀', ['N-Ary Circled-Punkt-Operator', 'N-Ary Circled-Punkt-Operator', 'N-Ary Circled-Punkt-Operator']);
  this.executeCharTest('⨁', ['N-Ary Circled Plus Operator', 'N-Ary Circled Plus Operator', 'N-Ary Circled Plus Operator']);
  this.executeCharTest('⨂', ['N-Ary Circled-Times-Operator', 'N-Ary Circled-Times-Operator', 'N-Ary Circled-Times-Operator']);
  this.executeCharTest('⨃', ['N-Ary Union-Operator mit Punkt', 'N-Ary Union-Operator mit Punkt', 'N-Ary Union-Operator mit Punkt']);
  this.executeCharTest('⨄', ['N-Ary Union-Operator mit Plus', 'N-Ary Union-Operator mit Plus', 'N-Ary Union-Operator mit Plus']);
  this.executeCharTest('⨅', ['N-Ary Square-Kreuzungsoperator', 'N-Ary Square-Kreuzungsoperator', 'N-Ary Square-Kreuzungsoperator']);
  this.executeCharTest('⨆', ['N-Ary Square Union-Betreiber', 'N-Ary Square Union-Betreiber', 'N-Ary Square Union-Betreiber']);
  this.executeCharTest('⨇', ['Zwei logische und Operator', 'Zwei logische und Operator', 'Zwei logische und Operator']);
  this.executeCharTest('⨈', ['Zwei logisch oder Operator', 'Zwei logisch oder Operator', 'Zwei logisch oder Operator']);
  this.executeCharTest('⨉', ['N-Ary Times-Operator', 'N-Ary Times-Operator', 'N-Ary Times-Operator']);
  this.executeCharTest('⨊', ['Modulo Zwei Summe', 'Modulo Zwei Summe', 'Modulo Zwei Summe']);
  this.executeCharTest('⨋', ['Summation mit Integral', 'Summation mit Integral', 'Summation mit Integral']);
  this.executeCharTest('⨌', ['Vierfach-Integral-Operator', 'Vierfach-Integral-Operator', 'Vierfach-Integral-Operator']);
  this.executeCharTest('⨍', ['Finite Part Integral', 'Finite Part Integral', 'Finite Part Integral']);
  this.executeCharTest('⨎', ['Integral mit Doppelhub', 'Integral mit Doppelhub', 'Integral mit Doppelhub']);
  this.executeCharTest('⨏', ['Integraler Durchschnitt mit Schrägstrich', 'Integraler Durchschnitt mit Schrägstrich', 'Integraler Durchschnitt mit Schrägstrich']);
  this.executeCharTest('⨐', ['Zirkulationsfunktion', 'Zirkulationsfunktion', 'Zirkulationsfunktion']);
  this.executeCharTest('⨑', ['Integration gegen den Uhrzeigersinn', 'Integration gegen den Uhrzeigersinn', 'Integration gegen den Uhrzeigersinn']);
  this.executeCharTest('⨒', ['Linienintegration mit rechteckigem Pfad um die Pole', 'Linienintegration mit rechteckigem Pfad um die Pole', 'Linienintegration mit rechteckigem Pfad um die Pole']);
  this.executeCharTest('⨓', ['Linienintegration mit halbkreisförmigem Pfad um den Pol', 'Linienintegration mit halbkreisförmigem Pfad um den Pol', 'Linienintegration mit halbkreisförmigem Pfad um den Pol']);
  this.executeCharTest('⨔', ['Leitungsintegration ohne Pole', 'Leitungsintegration ohne Pole', 'Leitungsintegration ohne Pole']);
  this.executeCharTest('⨕', ['Integral um einen Punktoperator', 'Integral um einen Punktoperator', 'Integral um einen Punktoperator']);
  this.executeCharTest('⨖', ['Quaternion Integral Operator', 'Quaternion Integral Operator', 'Quaternion Integral Operator']);
  this.executeCharTest('⨘', ['Integriert mit Times Sign', 'Integriert mit Times Sign', 'Integriert mit Times Sign']);
  this.executeCharTest('⨙', ['Integral mit der Kreuzung', 'Integral mit der Kreuzung', 'Integral mit der Kreuzung']);
  this.executeCharTest('⨚', ['Integral mit Union', 'Integral mit Union', 'Integral mit Union']);
  this.executeCharTest('⨛', ['Integral mit Overbar', 'Integral mit Overbar', 'Integral mit Overbar']);
  this.executeCharTest('⨜', ['Integral mit Underbar', 'Integral mit Underbar', 'Integral mit Underbar']);
  this.executeCharTest('⨝', ['Beitreten', 'Beitreten', 'Beitreten']);
  this.executeCharTest('⨞', ['Großes linkes Dreieckbediener', 'Großes linkes Dreieckbediener', 'Großes linkes Dreieckbediener']);
  this.executeCharTest('⨟', ['Z-Notationsschema-Zusammensetzung', 'Z-Notationsschema-Zusammensetzung', 'Z-Notationsschema-Zusammensetzung']);
  this.executeCharTest('⨠', ['Z-Notationsschema-Piping', 'Z-Notationsschema-Piping', 'Z-Notationsschema-Piping']);
  this.executeCharTest('⨡', ['Z-Notationsschema-Projektion', 'Z-Notationsschema-Projektion', 'Z-Notationsschema-Projektion']);
  this.executeCharTest('⨢', ['Pluszeichen mit kleinem Kreis oben', 'Pluszeichen mit kleinem Kreis oben', 'Pluszeichen mit kleinem Kreis oben']);
  this.executeCharTest('⨣', ['Pluszeichen mit Zirkumflex-Akzent oben', 'Pluszeichen mit Zirkumflex-Akzent oben', 'Pluszeichen mit Zirkumflex-Akzent oben']);
  this.executeCharTest('⨤', ['Pluszeichen mit Tilde oben', 'Pluszeichen mit Tilde oben', 'Pluszeichen mit Tilde oben']);
  this.executeCharTest('⨥', ['Pluszeichen mit Punkt unten', 'Pluszeichen mit Punkt unten', 'Pluszeichen mit Punkt unten']);
  this.executeCharTest('⨦', ['Pluszeichen mit Tilde unter', 'Pluszeichen mit Tilde unter', 'Pluszeichen mit Tilde unter']);
  this.executeCharTest('⨧', ['Pluszeichen mit Index Zwei', 'Pluszeichen mit Index Zwei', 'Pluszeichen mit Index Zwei']);
  this.executeCharTest('⨨', ['Pluszeichen mit schwarzem Dreieck', 'Pluszeichen mit schwarzem Dreieck', 'Pluszeichen mit schwarzem Dreieck']);
  this.executeCharTest('⨩', ['Minuszeichen mit Komma oben', 'Minuszeichen mit Komma oben', 'Minuszeichen mit Komma oben']);
  this.executeCharTest('⨪', ['Minuszeichen mit Punkt unten', 'Minuszeichen mit Punkt unten', 'Minuszeichen mit Punkt unten']);
  this.executeCharTest('⨫', ['Minuszeichen mit fallenden Punkten', 'Minuszeichen mit fallenden Punkten', 'Minuszeichen mit fallenden Punkten']);
  this.executeCharTest('⨬', ['Minuszeichen mit steigenden Punkten', 'Minuszeichen mit steigenden Punkten', 'Minuszeichen mit steigenden Punkten']);
  this.executeCharTest('⨭', ['Pluszeichen Im linken Halbkreis', 'Pluszeichen Im linken Halbkreis', 'Pluszeichen Im linken Halbkreis']);
  this.executeCharTest('⨮', ['Pluszeichen Im rechten Halbkreis', 'Pluszeichen Im rechten Halbkreis', 'Pluszeichen Im rechten Halbkreis']);
  this.executeCharTest('⨯', ['Vektor- oder Kreuzprodukt', 'Vektor- oder Kreuzprodukt', 'Vektor- oder Kreuzprodukt']);
  this.executeCharTest('⨰', ['Multiplikationszeichen mit Punkt oben', 'Multiplikationszeichen mit Punkt oben', 'Multiplikationszeichen mit Punkt oben']);
  this.executeCharTest('⨱', ['Multiplikationszeichen mit Unterleiste', 'Multiplikationszeichen mit Unterleiste', 'Multiplikationszeichen mit Unterleiste']);
  this.executeCharTest('⨲', ['Semidirektprodukt mit geschlossenem Boden', 'Semidirektprodukt mit geschlossenem Boden', 'Semidirektprodukt mit geschlossenem Boden']);
  this.executeCharTest('⨳', ['smash product', 'smash product', 'smash product']);
  this.executeCharTest('⨴', ['Multiplikationszeichen im linken Halbkreis', 'Multiplikationszeichen im linken Halbkreis', 'Multiplikationszeichen im linken Halbkreis']);
  this.executeCharTest('⨵', ['Multiplikationszeichen im rechten Halbkreis', 'Multiplikationszeichen im rechten Halbkreis', 'Multiplikationszeichen im rechten Halbkreis']);
  this.executeCharTest('⨶', ['eingekreistes Multiplikationszeichen mit Circumflex-Akzent', 'eingekreistes Multiplikationszeichen mit Circumflex-Akzent', 'eingekreistes Multiplikationszeichen mit Circumflex-Akzent']);
  this.executeCharTest('⨷', ['Multiplikationszeichen im doppelten Kreis', 'Multiplikationszeichen im doppelten Kreis', 'Multiplikationszeichen im doppelten Kreis']);
  this.executeCharTest('⨸', ['circled division sign', 'circled division sign', 'circled division sign']);
  this.executeCharTest('⨹', ['Pluszeichen im Dreieck', 'Pluszeichen im Dreieck', 'Pluszeichen im Dreieck']);
  this.executeCharTest('⨺', ['Minuszeichen im Dreieck', 'Minuszeichen im Dreieck', 'Minuszeichen im Dreieck']);
  this.executeCharTest('⨻', ['Multiplikationszeichen im Dreieck', 'Multiplikationszeichen im Dreieck', 'Multiplikationszeichen im Dreieck']);
  this.executeCharTest('⨼', ['Innenprodukt', 'Innenprodukt', 'Innenprodukt']);
  this.executeCharTest('⨽', ['Produkt für den rechten Innenraum', 'Produkt für den rechten Innenraum', 'Produkt für den rechten Innenraum']);
  this.executeCharTest('⨾', ['Z-Notation relationaler Aufbau', 'Z-Notation relationaler Aufbau', 'Z-Notation relationaler Aufbau']);
  this.executeCharTest('⨿', ['Verschmelzung oder Koprodukt', 'Verschmelzung oder Koprodukt', 'Verschmelzung oder Koprodukt']);
  this.executeCharTest('⩀', ['Schnittpunkt mit Punkt', 'Schnittpunkt mit Punkt', 'Schnittpunkt mit Punkt']);
  this.executeCharTest('⩁', ['Union mit Minuszeichen', 'Union mit Minuszeichen', 'Union mit Minuszeichen']);
  this.executeCharTest('⩂', ['Union mit Overbar', 'Union mit Overbar', 'Union mit Overbar']);
  this.executeCharTest('⩃', ['Kreuzung mit Overbar', 'Kreuzung mit Overbar', 'Kreuzung mit Overbar']);
  this.executeCharTest('⩄', ['Überschneidung mit logischem und', 'Überschneidung mit logischem und', 'Überschneidung mit logischem und']);
  this.executeCharTest('⩅', ['Vereinigung mit logischem Or', 'Vereinigung mit logischem Or', 'Vereinigung mit logischem Or']);
  this.executeCharTest('⩆', ['Vereinigung über dem Schnittpunkt', 'Vereinigung über dem Schnittpunkt', 'Vereinigung über dem Schnittpunkt']);
  this.executeCharTest('⩇', ['Schnittpunkt über Union', 'Schnittpunkt über Union', 'Schnittpunkt über Union']);
  this.executeCharTest('⩈', ['Vereinigung über Stab über Kreuzung', 'Vereinigung über Stab über Kreuzung', 'Vereinigung über Stab über Kreuzung']);
  this.executeCharTest('⩉', ['Schnittpunkt oberhalb der Stange oberhalb der Union', 'Schnittpunkt oberhalb der Stange oberhalb der Union', 'Schnittpunkt oberhalb der Stange oberhalb der Union']);
  this.executeCharTest('⩊', ['Union daneben und mit Union verbunden', 'Union daneben und mit Union verbunden', 'Union daneben und mit Union verbunden']);
  this.executeCharTest('⩋', ['Kreuzung neben und mit Kreuzung verbunden', 'Kreuzung neben und mit Kreuzung verbunden', 'Kreuzung neben und mit Kreuzung verbunden']);
  this.executeCharTest('⩌', ['Geschlossene Vereinigung mit Serifen', 'Geschlossene Vereinigung mit Serifen', 'Geschlossene Vereinigung mit Serifen']);
  this.executeCharTest('⩍', ['Geschlossener Schnittpunkt mit Serifen', 'Geschlossener Schnittpunkt mit Serifen', 'Geschlossener Schnittpunkt mit Serifen']);
  this.executeCharTest('⩎', ['Doppelter Quadratschnitt', 'Doppelter Quadratschnitt', 'Doppelter Quadratschnitt']);
  this.executeCharTest('⩏', ['Double Square Union', 'Double Square Union', 'Double Square Union']);
  this.executeCharTest('⩐', ['Closed Union mit Serifen und Smash-Produkten', 'Closed Union mit Serifen und Smash-Produkten', 'Closed Union mit Serifen und Smash-Produkten']);
  this.executeCharTest('⩑', ['Logisch und mit Punkt oben', 'Logisch und mit Punkt oben', 'Logisch und mit Punkt oben']);
  this.executeCharTest('⩒', ['Logisch oder mit Punkt oben', 'Logisch oder mit Punkt oben', 'Logisch oder mit Punkt oben']);
  this.executeCharTest('⩓', ['double logical and', 'double logical and', 'double logical and']);
  this.executeCharTest('⩔', ['double logical or', 'double logical or', 'double logical or']);
  this.executeCharTest('⩕', ['Zwei durchschneiden logisch und', 'Zwei durchschneiden logisch und', 'Zwei durchschneiden logisch und']);
  this.executeCharTest('⩖', ['Zwei sich überschneidende logische Oder', 'Zwei sich überschneidende logische Oder', 'Zwei sich überschneidende logische Oder']);
  this.executeCharTest('⩗', ['Abfallend groß oder', 'Abfallend groß oder', 'Abfallend groß oder']);
  this.executeCharTest('⩘', ['Abfallend groß und', 'Abfallend groß und', 'Abfallend groß und']);
  this.executeCharTest('⩙', ['Logisch oder Überlappend Logisch Und', 'Logisch oder Überlappend Logisch Und', 'Logisch oder Überlappend Logisch Und']);
  this.executeCharTest('⩚', ['Logisch und mit Middle Stem', 'Logisch und mit Middle Stem', 'Logisch und mit Middle Stem']);
  this.executeCharTest('⩛', ['Logisch oder mit Middle Stem', 'Logisch oder mit Middle Stem', 'Logisch oder mit Middle Stem']);
  this.executeCharTest('⩜', ['Logisch und mit Horizontalstrich', 'Logisch und mit Horizontalstrich', 'Logisch und mit Horizontalstrich']);
  this.executeCharTest('⩝', ['Logisch oder mit Horizontalstrich', 'Logisch oder mit Horizontalstrich', 'Logisch oder mit Horizontalstrich']);
  this.executeCharTest('⩞', ['Logisch und mit Double Overbar', 'Logisch und mit Double Overbar', 'Logisch und mit Double Overbar']);
  this.executeCharTest('⩟', ['Logisch und mit Underbar', 'Logisch und mit Underbar', 'Logisch und mit Underbar']);
  this.executeCharTest('⩠', ['Logisch und mit Double Underbar', 'Logisch und mit Double Underbar', 'Logisch und mit Double Underbar']);
  this.executeCharTest('⩡', ['kleines Vee mit Underbar', 'kleines Vee mit Underbar', 'kleines Vee mit Underbar']);
  this.executeCharTest('⩢', ['Logisch oder mit Double Overbar', 'Logisch oder mit Double Overbar', 'Logisch oder mit Double Overbar']);
  this.executeCharTest('⩣', ['Logisch oder mit doppelter Unterleiste', 'Logisch oder mit doppelter Unterleiste', 'Logisch oder mit doppelter Unterleiste']);
  this.executeCharTest('⩤', ['Z-Notation Domain Antirestriction', 'Z-Notation Domain Antirestriction', 'Z-Notation Domain Antirestriction']);
  this.executeCharTest('⩥', ['Z Notationsbereich Antirestriction', 'Z Notationsbereich Antirestriction', 'Z Notationsbereich Antirestriction']);
  this.executeCharTest('⩦', ['Gleichheitszeichen mit Punkt unten', 'Gleichheitszeichen mit Punkt unten', 'Gleichheitszeichen mit Punkt unten']);
  this.executeCharTest('⩧', ['Identisch mit dem obigen Punkt', 'Identisch mit dem obigen Punkt', 'Identisch mit dem obigen Punkt']);
  this.executeCharTest('⩨', ['Dreifacher Horizontalbalken mit doppeltem vertikalem Hub', 'Dreifacher Horizontalbalken mit doppeltem vertikalem Hub', 'Dreifacher Horizontalbalken mit doppeltem vertikalem Hub']);
  this.executeCharTest('⩩', ['Dreifacher Horizontalbalken mit dreifachem vertikalem Hub', 'Dreifacher Horizontalbalken mit dreifachem vertikalem Hub', 'Dreifacher Horizontalbalken mit dreifachem vertikalem Hub']);
  this.executeCharTest('⩪', ['Tilde-Operator mit Punkt oben', 'Tilde-Operator mit Punkt oben', 'Tilde-Operator mit Punkt oben']);
  this.executeCharTest('⩫', ['Tilde-Operator mit steigenden Punkten', 'Tilde-Operator mit steigenden Punkten', 'Tilde-Operator mit steigenden Punkten']);
  this.executeCharTest('⩬', ['Ähnlich Minus Ähnlich', 'Ähnlich Minus Ähnlich', 'Ähnlich Minus Ähnlich']);
  this.executeCharTest('⩭', ['Kongruent mit Punkt oben', 'Kongruent mit Punkt oben', 'Kongruent mit Punkt oben']);
  this.executeCharTest('⩮', ['Entspricht Asterisk', 'Entspricht Asterisk', 'Entspricht Asterisk']);
  this.executeCharTest('⩯', ['Fast gleichwertig mit dem Circumflex Accent', 'Fast gleichwertig mit dem Circumflex Accent', 'Fast gleichwertig mit dem Circumflex Accent']);
  this.executeCharTest('⩰', ['Ungefähr gleich oder gleich zu', 'Ungefähr gleich oder gleich zu', 'Ungefähr gleich oder gleich zu']);
  this.executeCharTest('⩱', ['Gleichheitszeichen über Pluszeichen', 'Gleichheitszeichen über Pluszeichen', 'Gleichheitszeichen über Pluszeichen']);
  this.executeCharTest('⩲', ['Pluszeichen über Gleichheitszeichen', 'Pluszeichen über Gleichheitszeichen', 'Pluszeichen über Gleichheitszeichen']);
  this.executeCharTest('⩳', ['Gleichheitszeichen über Tilde-Operator', 'Gleichheitszeichen über Tilde-Operator', 'Gleichheitszeichen über Tilde-Operator']);
  this.executeCharTest('⩴', ['Doppelpunkt gleich', 'Doppelpunkt gleich', 'Doppelpunkt gleich']);
  this.executeCharTest('⩵', ['double equal', 'double equal', 'double equal']);
  this.executeCharTest('⩶', ['Drei aufeinander folgende Gleichheitszeichen', 'Drei aufeinander folgende Gleichheitszeichen', 'Drei aufeinander folgende Gleichheitszeichen']);
  this.executeCharTest('⩷', ['Gleichheitszeichen mit zwei Punkten oben und zwei Punkten unten', 'Gleichheitszeichen mit zwei Punkten oben und zwei Punkten unten', 'Gleichheitszeichen mit zwei Punkten oben und zwei Punkten unten']);
  this.executeCharTest('⩸', ['Gleichwertig mit vier Punkten oben', 'Gleichwertig mit vier Punkten oben', 'Gleichwertig mit vier Punkten oben']);
  this.executeCharTest('⩹', ['Weniger als mit Circle Inside', 'Weniger als mit Circle Inside', 'Weniger als mit Circle Inside']);
  this.executeCharTest('⩺', ['Größer als mit Kreis nach innen', 'Größer als mit Kreis nach innen', 'Größer als mit Kreis nach innen']);
  this.executeCharTest('⩻', ['Weniger als mit Fragezeichen oben', 'Weniger als mit Fragezeichen oben', 'Weniger als mit Fragezeichen oben']);
  this.executeCharTest('⩼', ['Größer als mit Fragezeichen oben', 'Größer als mit Fragezeichen oben', 'Größer als mit Fragezeichen oben']);
  this.executeCharTest('⩽', ['Weniger als oder schräg gleich', 'Weniger als oder schräg gleich', 'Weniger als oder schräg gleich']);
  this.executeCharTest('⩾', ['Größer als oder schräg gleich', 'Größer als oder schräg gleich', 'Größer als oder schräg gleich']);
  this.executeCharTest('⩿', ['Weniger als oder schräg gleich mit Punkt nach innen', 'Weniger als oder schräg gleich mit Punkt nach innen', 'Weniger als oder schräg gleich mit Punkt nach innen']);
  this.executeCharTest('⪀', ['Größer als oder schräg gleich mit Punkt nach innen', 'Größer als oder schräg gleich mit Punkt nach innen', 'Größer als oder schräg gleich mit Punkt nach innen']);
  this.executeCharTest('⪁', ['Weniger als oder schräg gleich mit Punkt oben', 'Weniger als oder schräg gleich mit Punkt oben', 'Weniger als oder schräg gleich mit Punkt oben']);
  this.executeCharTest('⪂', ['Größer als oder schräg gleich mit Punkt oben', 'Größer als oder schräg gleich mit Punkt oben', 'Größer als oder schräg gleich mit Punkt oben']);
  this.executeCharTest('⪃', ['Weniger als oder schräg gleich mit Punkt oben rechts', 'Weniger als oder schräg gleich mit Punkt oben rechts', 'Weniger als oder schräg gleich mit Punkt oben rechts']);
  this.executeCharTest('⪄', ['Größer als oder schräg gleich mit Punkt oben links', 'Größer als oder schräg gleich mit Punkt oben links', 'Größer als oder schräg gleich mit Punkt oben links']);
  this.executeCharTest('⪅', ['Weniger als oder ungefähr', 'Weniger als oder ungefähr', 'Weniger als oder ungefähr']);
  this.executeCharTest('⪆', ['Größer als oder ungefähr', 'Größer als oder ungefähr', 'Größer als oder ungefähr']);
  this.executeCharTest('⪇', ['Kleiner als aber nicht gleich', 'Kleiner als aber nicht gleich', 'Kleiner als aber nicht gleich']);
  this.executeCharTest('⪈', ['Größer als aber nicht gleich', 'Größer als aber nicht gleich', 'Größer als aber nicht gleich']);
  this.executeCharTest('⪉', ['Kleiner als aber nicht ungefähr gleich', 'Kleiner als aber nicht ungefähr gleich', 'Kleiner als aber nicht ungefähr gleich']);
  this.executeCharTest('⪊', ['Größer als aber nicht ungefähr gleich', 'Größer als aber nicht ungefähr gleich', 'Größer als aber nicht ungefähr gleich']);
  this.executeCharTest('⪋', ['Weniger als aber größer als oben', 'Weniger als aber größer als oben', 'Weniger als aber größer als oben']);
  this.executeCharTest('⪌', ['Größer als aber weniger als unten und größer als oben', 'Größer als aber weniger als unten und größer als oben', 'Größer als aber weniger als unten und größer als oben']);
  this.executeCharTest('⪍', ['Weniger als oben ähnlich oder gleich', 'Weniger als oben ähnlich oder gleich', 'Weniger als oben ähnlich oder gleich']);
  this.executeCharTest('⪎', ['Größer als oben ähnlich oder gleich', 'Größer als oben ähnlich oder gleich', 'Größer als oben ähnlich oder gleich']);
  this.executeCharTest('⪏', ['Weniger als oben ähnlich oben größer als', 'Weniger als oben ähnlich oben größer als', 'Weniger als oben ähnlich oben größer als']);
  this.executeCharTest('⪐', ['Größer als oben Ähnlich oben', 'Größer als oben Ähnlich oben', 'Größer als oben Ähnlich oben']);
  this.executeCharTest('⪑', ['less than greater than or equal to', 'less than greater than or equal to', 'less than greater than or equal to']);
  this.executeCharTest('⪒', ['greater than less than or equal to', 'greater than less than or equal to', 'greater than less than or equal to']);
  this.executeCharTest('⪓', ['Weniger als oben schräg gleich oben Größer als oben schräg gleich', 'Weniger als oben schräg gleich oben Größer als oben schräg gleich', 'Weniger als oben schräg gleich oben Größer als oben schräg gleich']);
  this.executeCharTest('⪔', ['Größer als oben schräg gleich oben kleiner als oben schräg gleich groß', 'Größer als oben schräg gleich oben kleiner als oben schräg gleich groß', 'Größer als oben schräg gleich oben kleiner als oben schräg gleich groß']);
  this.executeCharTest('⪕', ['Schräg gleich oder kleiner als', 'Schräg gleich oder kleiner als', 'Schräg gleich oder kleiner als']);
  this.executeCharTest('⪖', ['Schräg gleich oder größer als', 'Schräg gleich oder größer als', 'Schräg gleich oder größer als']);
  this.executeCharTest('⪗', ['Schräg gleich oder kleiner als mit innenliegendem Punkt', 'Schräg gleich oder kleiner als mit innenliegendem Punkt', 'Schräg gleich oder kleiner als mit innenliegendem Punkt']);
  this.executeCharTest('⪘', ['Schräg gleich oder größer als mit Punkt nach innen', 'Schräg gleich oder größer als mit Punkt nach innen', 'Schräg gleich oder größer als mit Punkt nach innen']);
  this.executeCharTest('⪙', ['Gleich oder kleiner als', 'Gleich oder kleiner als', 'Gleich oder kleiner als']);
  this.executeCharTest('⪚', ['Gleich oder größer als', 'Gleich oder größer als', 'Gleich oder größer als']);
  this.executeCharTest('⪛', ['Doppelte Linie schräg gleich oder kleiner als', 'Doppelte Linie schräg gleich oder kleiner als', 'Doppelte Linie schräg gleich oder kleiner als']);
  this.executeCharTest('⪜', ['Doppelte Linie schräg gleich oder größer als', 'Doppelte Linie schräg gleich oder größer als', 'Doppelte Linie schräg gleich oder größer als']);
  this.executeCharTest('⪝', ['Äquivalent oder kleiner als', 'Äquivalent oder kleiner als', 'Äquivalent oder kleiner als']);
  this.executeCharTest('⪞', ['Ähnlich oder größer als', 'Ähnlich oder größer als', 'Ähnlich oder größer als']);
  this.executeCharTest('⪟', ['Ähnlich oben Weniger als Gleiches Gleichheitszeichen', 'Ähnlich oben Weniger als Gleiches Gleichheitszeichen', 'Ähnlich oben Weniger als Gleiches Gleichheitszeichen']);
  this.executeCharTest('⪠', ['Ähnlich oben größer als oben Gleichheitszeichen', 'Ähnlich oben größer als oben Gleichheitszeichen', 'Ähnlich oben größer als oben Gleichheitszeichen']);
  this.executeCharTest('⪡', ['Verschachteltes kleiner als', 'Verschachteltes kleiner als', 'Verschachteltes kleiner als']);
  this.executeCharTest('⪢', ['Verschachteltes größer als', 'Verschachteltes größer als', 'Verschachteltes größer als']);
  this.executeCharTest('⪣', ['Doppelt verschachtelt, weniger als mit Unterleiste', 'Doppelt verschachtelt, weniger als mit Unterleiste', 'Doppelt verschachtelt, weniger als mit Unterleiste']);
  this.executeCharTest('⪤', ['less than greater than overlay', 'less than greater than overlay', 'less than greater than overlay']);
  this.executeCharTest('⪥', ['Größer als weniger als', 'Größer als weniger als', 'Größer als weniger als']);
  this.executeCharTest('⪦', ['Weniger als durch Kurve geschlossen', 'Weniger als durch Kurve geschlossen', 'Weniger als durch Kurve geschlossen']);
  this.executeCharTest('⪧', ['Größer als durch Kurve geschlossen', 'Größer als durch Kurve geschlossen', 'Größer als durch Kurve geschlossen']);
  this.executeCharTest('⪨', ['Weniger als dann geschlossen durch Kurve oberhalb der gleichen Neigung', 'Weniger als dann geschlossen durch Kurve oberhalb der gleichen Neigung', 'Weniger als dann geschlossen durch Kurve oberhalb der gleichen Neigung']);
  this.executeCharTest('⪩', ['Größer als geschlossen durch Kurve oberhalb der gleichen Neigung', 'Größer als geschlossen durch Kurve oberhalb der gleichen Neigung', 'Größer als geschlossen durch Kurve oberhalb der gleichen Neigung']);
  this.executeCharTest('⪪', ['kleiner als', 'kleiner als', 'kleiner als']);
  this.executeCharTest('⪫', ['Größer als', 'Größer als', 'Größer als']);
  this.executeCharTest('⪬', ['kleiner als oder gleich', 'kleiner als oder gleich', 'kleiner als oder gleich']);
  this.executeCharTest('⪭', ['Größer als oder gleich', 'Größer als oder gleich', 'Größer als oder gleich']);
  this.executeCharTest('⪮', ['difference between (variant', 'difference between (variant', 'difference between (variant']);
  this.executeCharTest('⪯', ['Stellt über dem einzeiligen Gleichheitszeichen ein', 'Stellt über dem einzeiligen Gleichheitszeichen ein', 'Stellt über dem einzeiligen Gleichheitszeichen ein']);
  this.executeCharTest('⪰', ['Erfolg über dem einzeiligen Gleichheitszeichen', 'Erfolg über dem einzeiligen Gleichheitszeichen', 'Erfolg über dem einzeiligen Gleichheitszeichen']);
  this.executeCharTest('⪱', ['Vorangehende Single-Line ist nicht gleich', 'Vorangehende Single-Line ist nicht gleich', 'Vorangehende Single-Line ist nicht gleich']);
  this.executeCharTest('⪲', ['Erfolg über Single-Line nicht gleich', 'Erfolg über Single-Line nicht gleich', 'Erfolg über Single-Line nicht gleich']);
  this.executeCharTest('⪳', ['Vorangegangenes Gleichheitszeichen', 'Vorangegangenes Gleichheitszeichen', 'Vorangegangenes Gleichheitszeichen']);
  this.executeCharTest('⪴', ['Erfolgreich über Gleichheitszeichen', 'Erfolgreich über Gleichheitszeichen', 'Erfolgreich über Gleichheitszeichen']);
  this.executeCharTest('⪵', ['precedes but not equal to', 'precedes but not equal to', 'precedes but not equal to']);
  this.executeCharTest('⪶', ['succeeds but not equal to', 'succeeds but not equal to', 'succeeds but not equal to']);
  this.executeCharTest('⪷', ['Vorangegangenes fast gleich zu', 'Vorangegangenes fast gleich zu', 'Vorangegangenes fast gleich zu']);
  this.executeCharTest('⪸', ['Erreicht über fast gleich viel', 'Erreicht über fast gleich viel', 'Erreicht über fast gleich viel']);
  this.executeCharTest('⪹', ['Vorangegangene nicht annähernd gleich', 'Vorangegangene nicht annähernd gleich', 'Vorangegangene nicht annähernd gleich']);
  this.executeCharTest('⪺', ['Erreicht oben nicht annähernd gleich', 'Erreicht oben nicht annähernd gleich', 'Erreicht oben nicht annähernd gleich']);
  this.executeCharTest('⪻', ['Doppelter Vorgänger', 'Doppelter Vorgänger', 'Doppelter Vorgänger']);
  this.executeCharTest('⪼', ['Doppelter Erfolg', 'Doppelter Erfolg', 'Doppelter Erfolg']);
  this.executeCharTest('⪽', ['Teilmenge mit Punkt', 'Teilmenge mit Punkt', 'Teilmenge mit Punkt']);
  this.executeCharTest('⪾', ['Superset mit Punkt', 'Superset mit Punkt', 'Superset mit Punkt']);
  this.executeCharTest('⪿', ['Teilmenge mit Pluszeichen unten', 'Teilmenge mit Pluszeichen unten', 'Teilmenge mit Pluszeichen unten']);
  this.executeCharTest('⫀', ['Superset mit Pluszeichen unten', 'Superset mit Pluszeichen unten', 'Superset mit Pluszeichen unten']);
  this.executeCharTest('⫁', ['Teilmenge mit Multiplikationszeichen unten', 'Teilmenge mit Multiplikationszeichen unten', 'Teilmenge mit Multiplikationszeichen unten']);
  this.executeCharTest('⫂', ['Superset mit Multiplikationszeichen unten', 'Superset mit Multiplikationszeichen unten', 'Superset mit Multiplikationszeichen unten']);
  this.executeCharTest('⫃', ['Teilmenge oder gleich mit dem obigen Punkt', 'Teilmenge oder gleich mit dem obigen Punkt', 'Teilmenge oder gleich mit dem obigen Punkt']);
  this.executeCharTest('⫄', ['Superset von oder gleich mit Punkt oben', 'Superset von oder gleich mit Punkt oben', 'Superset von oder gleich mit Punkt oben']);
  this.executeCharTest('⫅', ['Teilmenge des obigen Gleichheitszeichens', 'Teilmenge des obigen Gleichheitszeichens', 'Teilmenge des obigen Gleichheitszeichens']);
  this.executeCharTest('⫆', ['Superset des obigen Gleichheitszeichens', 'Superset des obigen Gleichheitszeichens', 'Superset des obigen Gleichheitszeichens']);
  this.executeCharTest('⫇', ['approximate subset of', 'approximate subset of', 'approximate subset of']);
  this.executeCharTest('⫈', ['approximate superset of', 'approximate superset of', 'approximate superset of']);
  this.executeCharTest('⫉', ['Teilmenge von oben fast gleich', 'Teilmenge von oben fast gleich', 'Teilmenge von oben fast gleich']);
  this.executeCharTest('⫊', ['Superset von oben fast gleichwertig', 'Superset von oben fast gleichwertig', 'Superset von oben fast gleichwertig']);
  this.executeCharTest('⫋', ['Teilmenge von oben nicht gleich', 'Teilmenge von oben nicht gleich', 'Teilmenge von oben nicht gleich']);
  this.executeCharTest('⫌', ['Superset von oben nicht gleich', 'Superset von oben nicht gleich', 'Superset von oben nicht gleich']);
  this.executeCharTest('⫍', ['Platz links Feldbetreiber geöffnet', 'Platz links Feldbetreiber geöffnet', 'Platz links Feldbetreiber geöffnet']);
  this.executeCharTest('⫎', ['Rechteckige Box mit offener Box', 'Rechteckige Box mit offener Box', 'Rechteckige Box mit offener Box']);
  this.executeCharTest('⫏', ['Geschlossener Teilsatz', 'Geschlossener Teilsatz', 'Geschlossener Teilsatz']);
  this.executeCharTest('⫐', ['Superset geschlossen', 'Superset geschlossen', 'Superset geschlossen']);
  this.executeCharTest('⫑', ['Geschlossene Untermenge oder gleich', 'Geschlossene Untermenge oder gleich', 'Geschlossene Untermenge oder gleich']);
  this.executeCharTest('⫒', ['Superset geschlossen oder gleich', 'Superset geschlossen oder gleich', 'Superset geschlossen oder gleich']);
  this.executeCharTest('⫓', ['subset over superset', 'subset over superset', 'subset over superset']);
  this.executeCharTest('⫔', ['superset over subset', 'superset over subset', 'superset over subset']);
  this.executeCharTest('⫕', ['subset over subset', 'subset over subset', 'subset over subset']);
  this.executeCharTest('⫖', ['superset over superset', 'superset over superset', 'superset over superset']);
  this.executeCharTest('⫗', ['Superset neben dem Subset', 'Superset neben dem Subset', 'Superset neben dem Subset']);
  this.executeCharTest('⫘', ['Superset Neben und Joined von Dash mit Subset', 'Superset Neben und Joined von Dash mit Subset', 'Superset Neben und Joined von Dash mit Subset']);
  this.executeCharTest('⫙', ['Element der Öffnung nach unten', 'Element der Öffnung nach unten', 'Element der Öffnung nach unten']);
  this.executeCharTest('⫚', ['Heugabel mit T-Stück', 'Heugabel mit T-Stück', 'Heugabel mit T-Stück']);
  this.executeCharTest('⫛', ['Transversalschnitt', 'Transversalschnitt', 'Transversalschnitt']);
  this.executeCharTest('⫝̸', ['Gabelung', 'Gabelung', 'Gabelung']);
  this.executeCharTest('⫝', ['Nicht Gabeln', 'Nicht Gabeln', 'Nicht Gabeln']);
  this.executeCharTest('⫞', ['Kurzer Linker Tack', 'Kurzer Linker Tack', 'Kurzer Linker Tack']);
  this.executeCharTest('⫟', ['Kurzer Down Tack', 'Kurzer Down Tack', 'Kurzer Down Tack']);
  this.executeCharTest('⫠', ['Short Up Tack', 'Short Up Tack', 'Short Up Tack']);
  this.executeCharTest('⫡', ['Rechtwinklig zu S', 'Rechtwinklig zu S', 'Rechtwinklig zu S']);
  this.executeCharTest('⫢', ['Vertikales Dreifach-Drehkreuz', 'Vertikales Dreifach-Drehkreuz', 'Vertikales Dreifach-Drehkreuz']);
  this.executeCharTest('⫣', ['Doppelter vertikaler Balken linkes Drehkreuz', 'Doppelter vertikaler Balken linkes Drehkreuz', 'Doppelter vertikaler Balken linkes Drehkreuz']);
  this.executeCharTest('⫤', ['double left turnstile vertical bar', 'double left turnstile vertical bar', 'double left turnstile vertical bar']);
  this.executeCharTest('⫥', ['Doppelter vertikaler Balken Doppelter linker Drehkreuz', 'Doppelter vertikaler Balken Doppelter linker Drehkreuz', 'Doppelter vertikaler Balken Doppelter linker Drehkreuz']);
  this.executeCharTest('⫦', ['Long Dash von Left Member von Double Vertical', 'Long Dash von Left Member von Double Vertical', 'Long Dash von Left Member von Double Vertical']);
  this.executeCharTest('⫧', ['Short Down Tack mit Overbar', 'Short Down Tack mit Overbar', 'Short Down Tack mit Overbar']);
  this.executeCharTest('⫨', ['perpendicular over bar', 'perpendicular over bar', 'perpendicular over bar']);
  this.executeCharTest('⫩', ['Short Up Tack Über Short Down Tack', 'Short Up Tack Über Short Down Tack', 'Short Up Tack Über Short Down Tack']);
  this.executeCharTest('⫪', ['Double Down Tack', 'Double Down Tack', 'Double Down Tack']);
  this.executeCharTest('⫫', ['Verdoppeln Sie Tack', 'Verdoppeln Sie Tack', 'Verdoppeln Sie Tack']);
  this.executeCharTest('⫬', ['Doppelstrich nicht unterschreiben', 'Doppelstrich nicht unterschreiben', 'Doppelstrich nicht unterschreiben']);
  this.executeCharTest('⫭', ['Umgekehrter Doppelstrich nicht unterschrieben', 'Umgekehrter Doppelstrich nicht unterschrieben', 'Umgekehrter Doppelstrich nicht unterschrieben']);
  this.executeCharTest('⫮', ['Teilt sich nicht mit umgekehrten Negationsschrägstrich', 'Teilt sich nicht mit umgekehrten Negationsschrägstrich', 'Teilt sich nicht mit umgekehrten Negationsschrägstrich']);
  this.executeCharTest('⫯', ['Vertikale Linie mit Kreis oben', 'Vertikale Linie mit Kreis oben', 'Vertikale Linie mit Kreis oben']);
  this.executeCharTest('⫰', ['Vertikale Linie mit Kreis unten', 'Vertikale Linie mit Kreis unten', 'Vertikale Linie mit Kreis unten']);
  this.executeCharTest('⫱', ['Down Tack mit Kreis unten', 'Down Tack mit Kreis unten', 'Down Tack mit Kreis unten']);
  this.executeCharTest('⫲', ['Parallel zum horizontalen Anschlag', 'Parallel zum horizontalen Anschlag', 'Parallel zum horizontalen Anschlag']);
  this.executeCharTest('⫳', ['Parallel zu Tilde Operator', 'Parallel zu Tilde Operator', 'Parallel zu Tilde Operator']);
  this.executeCharTest('⫴', ['Dreifache vertikale Balken-Binärbeziehung', 'Dreifache vertikale Balken-Binärbeziehung', 'Dreifache vertikale Balken-Binärbeziehung']);
  this.executeCharTest('⫵', ['Dreifacher vertikaler Strich mit horizontalem Hub', 'Dreifacher vertikaler Strich mit horizontalem Hub', 'Dreifacher vertikaler Strich mit horizontalem Hub']);
  this.executeCharTest('⫶', ['Triple Colon Operator', 'Triple Colon Operator', 'Triple Colon Operator']);
  this.executeCharTest('⫷', ['Dreifach verschachtelt weniger als', 'Dreifach verschachtelt weniger als', 'Dreifach verschachtelt weniger als']);
  this.executeCharTest('⫸', ['Dreifach verschachteltes Größeres als', 'Dreifach verschachteltes Größeres als', 'Dreifach verschachteltes Größeres als']);
  this.executeCharTest('⫹', ['Doppellinie schräg, weniger als oder gleich', 'Doppellinie schräg, weniger als oder gleich', 'Doppellinie schräg, weniger als oder gleich']);
  this.executeCharTest('⫺', ['Doppelte Linie schräg größer als oder gleich', 'Doppelte Linie schräg größer als oder gleich', 'Doppelte Linie schräg größer als oder gleich']);
  this.executeCharTest('⫻', ['Dreifache Schrägstrich-Binärbeziehung', 'Dreifache Schrägstrich-Binärbeziehung', 'Dreifache Schrägstrich-Binärbeziehung']);
  this.executeCharTest('⫼', ['Großer dreifacher vertikaler Barbediener', 'Großer dreifacher vertikaler Barbediener', 'Großer dreifacher vertikaler Barbediener']);
  this.executeCharTest('⫽', ['Doppelter Schrägstrich-Operator', 'Doppelter Schrägstrich-Operator', 'Doppelter Schrägstrich-Operator']);
  this.executeCharTest('⫾', ['Weiße vertikale Leiste', 'Weiße vertikale Leiste', 'Weiße vertikale Leiste']);
  this.executeCharTest('⫿', ['N-Ary White Vertical Bar', 'N-Ary White Vertical Bar', 'N-Ary White Vertical Bar']);
  this.executeCharTest('〜', ['Wave Dash', 'Wave Dash', 'Wave Dash']);
  this.executeCharTest('︐', ['Präsentationsformular für vertikales Komma', 'Präsentationsformular für vertikales Komma', 'Präsentationsformular für vertikales Komma']);
  this.executeCharTest('︓', ['Präsentationsformular für vertikalen Doppelpunkt', 'Präsentationsformular für vertikalen Doppelpunkt', 'Präsentationsformular für vertikalen Doppelpunkt']);
  this.executeCharTest('︔', ['Präsentationsformular für vertikales Semikolon', 'Präsentationsformular für vertikales Semikolon', 'Präsentationsformular für vertikales Semikolon']);
  this.executeCharTest('︕', ['Präsentationsformular für vertikales Ausrufezeichen', 'Präsentationsformular für vertikales Ausrufezeichen', 'Präsentationsformular für vertikales Ausrufezeichen']);
  this.executeCharTest('︖', ['Präsentationsformular für vertikales Fragezeichen', 'Präsentationsformular für vertikales Fragezeichen', 'Präsentationsformular für vertikales Fragezeichen']);
  this.executeCharTest('︙', ['Präsentationsformular für vertikale horizontale Ellipsen', 'Präsentationsformular für vertikale horizontale Ellipsen', 'Präsentationsformular für vertikale horizontale Ellipsen']);
  this.executeCharTest('︰', ['Präsentationsformular für vertikalen Zwei-Punkt-Leader', 'Präsentationsformular für vertikalen Zwei-Punkt-Leader', 'Präsentationsformular für vertikalen Zwei-Punkt-Leader']);
  this.executeCharTest('︱', ['Präsentationsformular für Vertical Em Dash', 'Präsentationsformular für Vertical Em Dash', 'Präsentationsformular für Vertical Em Dash']);
  this.executeCharTest('︲', ['Präsentationsformular für Vertical En Dash', 'Präsentationsformular für Vertical En Dash', 'Präsentationsformular für Vertical En Dash']);
  this.executeCharTest('︳', ['Präsentationsformular für Vertical Low Line', 'Präsentationsformular für Vertical Low Line', 'Präsentationsformular für Vertical Low Line']);
  this.executeCharTest('︴', ['Präsentationsformular für Vertical Wavy Low Line', 'Präsentationsformular für Vertical Wavy Low Line', 'Präsentationsformular für Vertical Wavy Low Line']);
  this.executeCharTest('﹅', ['Sesampunkt', 'Sesampunkt', 'Sesampunkt']);
  this.executeCharTest('﹆', ['Weißer Sesam Punkt', 'Weißer Sesam Punkt', 'Weißer Sesam Punkt']);
  this.executeCharTest('﹉', ['Gestrichelte Überlänge', 'Gestrichelte Überlänge', 'Gestrichelte Überlänge']);
  this.executeCharTest('﹊', ['Centreline Overline', 'Centreline Overline', 'Centreline Overline']);
  this.executeCharTest('﹋', ['Wellenförmige Überlänge', 'Wellenförmige Überlänge', 'Wellenförmige Überlänge']);
  this.executeCharTest('﹌', ['Doppelte Wellenlinie', 'Doppelte Wellenlinie', 'Doppelte Wellenlinie']);
  this.executeCharTest('﹍', ['Gestrichelte Low Line', 'Gestrichelte Low Line', 'Gestrichelte Low Line']);
  this.executeCharTest('﹎', ['Mittellinie Low Line', 'Mittellinie Low Line', 'Mittellinie Low Line']);
  this.executeCharTest('﹏', ['Wellenförmige Low Line', 'Wellenförmige Low Line', 'Wellenförmige Low Line']);
  this.executeCharTest('﹐', ['kleines Komma', 'kleines Komma', 'kleines Komma']);
  this.executeCharTest('﹒', ['kleiner Punkt', 'kleiner Punkt', 'kleiner Punkt']);
  this.executeCharTest('﹔', ['kleines Semikolon', 'kleines Semikolon', 'kleines Semikolon']);
  this.executeCharTest('﹕', ['kleiner Doppelpunkt', 'kleiner Doppelpunkt', 'kleiner Doppelpunkt']);
  this.executeCharTest('﹖', ['kleines Fragezeichen', 'kleines Fragezeichen', 'kleines Fragezeichen']);
  this.executeCharTest('﹗', ['kleines Ausrufezeichen', 'kleines Ausrufezeichen', 'kleines Ausrufezeichen']);
  this.executeCharTest('﹘', ['kleiner Em Dash', 'kleiner Em Dash', 'kleiner Em Dash']);
  this.executeCharTest('﹟', ['kleines Nummernzeichen', 'kleines Nummernzeichen', 'kleines Nummernzeichen']);
  this.executeCharTest('﹠', ['kleines kaufmännisches', 'kleines kaufmännisches', 'kleines kaufmännisches']);
  this.executeCharTest('﹡', ['kleines Sternchen', 'kleines Sternchen', 'kleines Sternchen']);
  this.executeCharTest('﹢', ['kleines Pluszeichen', 'kleines Pluszeichen', 'kleines Pluszeichen']);
  this.executeCharTest('﹣', ['kleiner Bindestrich-Minus', 'kleiner Bindestrich-Minus', 'kleiner Bindestrich-Minus']);
  this.executeCharTest('﹤', ['kleines weniger als Zeichen', 'kleines weniger als Zeichen', 'kleines weniger als Zeichen']);
  this.executeCharTest('﹥', ['kleines Größeres als Zeichen', 'kleines Größeres als Zeichen', 'kleines Größeres als Zeichen']);
  this.executeCharTest('﹦', ['kleines Gleichheitszeichen', 'kleines Gleichheitszeichen', 'kleines Gleichheitszeichen']);
  this.executeCharTest('﹨', ['kleiner umgekehrter Schrägstrich', 'kleiner umgekehrter Schrägstrich', 'kleiner umgekehrter Schrägstrich']);
  this.executeCharTest('﹩', ['kleines Dollarzeichen', 'kleines Dollarzeichen', 'kleines Dollarzeichen']);
  this.executeCharTest('﹪', ['kleines Prozentzeichen', 'kleines Prozentzeichen', 'kleines Prozentzeichen']);
  this.executeCharTest('﹫', ['kleine kommerzielle bei', 'kleine kommerzielle bei', 'kleine kommerzielle bei']);
  this.executeCharTest('！', ['vollbreites Ausrufezeichen', 'vollbreites Ausrufezeichen', 'vollbreites Ausrufezeichen']);
  this.executeCharTest('＂', ['vollbreites Anführungszeichen', 'vollbreites Anführungszeichen', 'vollbreites Anführungszeichen']);
  this.executeCharTest('＃', ['vollbreites Nummernzeichen', 'vollbreites Nummernzeichen', 'vollbreites Nummernzeichen']);
  this.executeCharTest('＄', ['vollbreites Dollarzeichen', 'vollbreites Dollarzeichen', 'vollbreites Dollarzeichen']);
  this.executeCharTest('％', ['vollbreites Prozentzeichen', 'vollbreites Prozentzeichen', 'vollbreites Prozentzeichen']);
  this.executeCharTest('＆', ['vollbreites kaufmännisches und', 'vollbreites kaufmännisches und', 'vollbreites kaufmännisches und']);
  this.executeCharTest('＇', ['vollbreites Apostroph', 'vollbreites Apostroph', 'vollbreites Apostroph']);
  this.executeCharTest('＊', ['vollbreiter Stern', 'vollbreiter Stern', 'vollbreiter Stern']);
  this.executeCharTest('＋', ['vollbreites Plus', 'vollbreites Plus', 'vollbreites Plus']);
  this.executeCharTest('，', ['vollbreites Komma', 'vollbreites Komma', 'vollbreites Komma']);
  this.executeCharTest('－', ['vollbreites Minus', 'vollbreites Minus', 'vollbreites Minus']);
  this.executeCharTest('．', ['vollbreiter Punkt', 'vollbreiter Punkt', 'vollbreiter Punkt']);
  this.executeCharTest('／', ['Schrägstrich mit voller Breite', 'Schrägstrich mit voller Breite', 'Schrägstrich mit voller Breite']);
  this.executeCharTest('：', ['vollbreiter Doppelpunkt', 'vollbreiter Doppelpunkt', 'vollbreiter Doppelpunkt']);
  this.executeCharTest('；', ['vollbreites Semikolon', 'vollbreites Semikolon', 'vollbreites Semikolon']);
  this.executeCharTest('＜', ['Weniger als das gesamte Zeichen', 'Weniger als das gesamte Zeichen', 'Weniger als das gesamte Zeichen']);
  this.executeCharTest('＝', ['vollbreites Gleichspannungszeichen', 'vollbreites Gleichspannungszeichen', 'vollbreites Gleichspannungszeichen']);
  this.executeCharTest('＞', ['Fullwidth Mehr als Zeichen', 'Fullwidth Mehr als Zeichen', 'Fullwidth Mehr als Zeichen']);
  this.executeCharTest('？', ['vollbreites Fragezeichen', 'vollbreites Fragezeichen', 'vollbreites Fragezeichen']);
  this.executeCharTest('＠', ['Fullwidth Commercial at', 'Fullwidth Commercial at', 'Fullwidth Commercial at']);
  this.executeCharTest('＼', ['Umgekehrter Schrägstrich mit voller Breite', 'Umgekehrter Schrägstrich mit voller Breite', 'Umgekehrter Schrägstrich mit voller Breite']);
  this.executeCharTest('＾', ['Circumflex-Akzent mit voller Breite', 'Circumflex-Akzent mit voller Breite', 'Circumflex-Akzent mit voller Breite']);
  this.executeCharTest('＿', ['vollbreites Low Line', 'vollbreites Low Line', 'vollbreites Low Line']);
  this.executeCharTest('｀', ['vollbreiter Gravis Akzent', 'vollbreiter Gravis Akzent', 'vollbreiter Gravis Akzent']);
  this.executeCharTest('｜', ['vollbreites Vertikale Linie', 'vollbreites Vertikale Linie', 'vollbreites Vertikale Linie']);
  this.executeCharTest('～', ['vollbreite Tilde', 'vollbreite Tilde', 'vollbreite Tilde']);
  this.executeCharTest('￠', ['vollbreites Cent-Zeichen', 'vollbreites Cent-Zeichen', 'vollbreites Cent-Zeichen']);
  this.executeCharTest('￡', ['vollbreites Pfundzeichen', 'vollbreites Pfundzeichen', 'vollbreites Pfundzeichen']);
  this.executeCharTest('￢', ['vollbreite nicht Symbol', 'vollbreite nicht Symbol', 'vollbreite nicht Symbol']);
  this.executeCharTest('￣', ['vollbreiter Überstrich', 'vollbreiter Überstrich', 'vollbreiter Überstrich']);
  this.executeCharTest('￤', ['vollbreite gestrichelte Linie', 'vollbreite gestrichelte Linie', 'vollbreite gestrichelte Linie']);
  this.executeCharTest('￥', ['vollbreites Yen-Zeichen', 'vollbreites Yen-Zeichen', 'vollbreites Yen-Zeichen']);
  this.executeCharTest('￦', ['vollbreites Won-Zeichen', 'vollbreites Won-Zeichen', 'vollbreites Won-Zeichen']);
  this.executeCharTest('￨', ['Halbbreite bildet leicht vertikal', 'Halbbreite bildet leicht vertikal', 'Halbbreite bildet leicht vertikal']);
  this.executeCharTest('￭', ['Schwarzes Quadrat mit halber Breite', 'Schwarzes Quadrat mit halber Breite', 'Schwarzes Quadrat mit halber Breite']);
  this.executeCharTest('￮', ['Weißer Kreis mit halber Breite', 'Weißer Kreis mit halber Breite', 'Weißer Kreis mit halber Breite']);
  this.executeCharTest(' ', ['Leerzeichen', 'Leerzeichen', 'Leerzeichen']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest('­', ['weicher Trennstrich', 'weicher Trennstrich', 'weicher Trennstrich']);
  this.executeCharTest(' ', ['En Quad', 'En Quad', 'En Quad']);
  this.executeCharTest(' ', ['Em Quad', 'Em Quad', 'Em Quad']);
  this.executeCharTest(' ', ['En Space', 'En Space', 'En Space']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', ['Raum für drei Per-Em', 'Raum für drei Per-Em', 'Raum für drei Per-Em']);
  this.executeCharTest(' ', ['Raum für vier pro Em', 'Raum für vier pro Em', 'Raum für vier pro Em']);
  this.executeCharTest(' ', ['Six-Per-Em Space', 'Six-Per-Em Space', 'Six-Per-Em Space']);
  this.executeCharTest(' ', ['Raum darstellen', 'Raum darstellen', 'Raum darstellen']);
  this.executeCharTest(' ', ['Interpunktionsraum', 'Interpunktionsraum', 'Interpunktionsraum']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest('​', ['​', '​', '​']);
  this.executeCharTest('‌', ['Nullbreite ohne Joiner', 'Nullbreite ohne Joiner', 'Nullbreite ohne Joiner']);
  this.executeCharTest('‍', ['Zero Width Joiner', 'Zero Width Joiner', 'Zero Width Joiner']);
  this.executeCharTest('‎', ['Markierung von links nach rechts', 'Markierung von links nach rechts', 'Markierung von links nach rechts']);
  this.executeCharTest('‏', ['Markierung von rechts nach links', 'Markierung von rechts nach links', 'Markierung von rechts nach links']);
  this.executeCharTest(' ', ['Trennzeichen', 'Trennzeichen', 'Trennzeichen']);
  this.executeCharTest(' ', ['Absatztrennzeichen', 'Absatztrennzeichen', 'Absatztrennzeichen']);
  this.executeCharTest('‪', ['Einbetten von links nach rechts', 'Einbetten von links nach rechts', 'Einbetten von links nach rechts']);
  this.executeCharTest('‫', ['Einbetten von rechts nach links', 'Einbetten von rechts nach links', 'Einbetten von rechts nach links']);
  this.executeCharTest('‬', ['Pop Richtungsformatierung', 'Pop Richtungsformatierung', 'Pop Richtungsformatierung']);
  this.executeCharTest('‭', ['Von links nach rechts überschreiben', 'Von links nach rechts überschreiben', 'Von links nach rechts überschreiben']);
  this.executeCharTest('‮', ['Von rechts nach links überschreiben', 'Von rechts nach links überschreiben', 'Von rechts nach links überschreiben']);
  this.executeCharTest(' ', ['Schmaler No-Break-Bereich', 'Schmaler No-Break-Bereich', 'Schmaler No-Break-Bereich']);
  this.executeCharTest(' ', [' ', ' ', ' ']);
  this.executeCharTest('⁠', ['Word Joiner', 'Word Joiner', 'Word Joiner']);
  this.executeCharTest('⁡', ['von', 'von', 'von']);
  this.executeCharTest('⁢', [' ', ' ', ' ']);
  this.executeCharTest('⁣', ['⁣', '⁣', '⁣']);
  this.executeCharTest('⁤', ['Unsichtbares Plus', 'Unsichtbares Plus', 'Unsichtbares Plus']);
  this.executeCharTest('⁪', ['Symmetrisches Austauschen verhindern', 'Symmetrisches Austauschen verhindern', 'Symmetrisches Austauschen verhindern']);
  this.executeCharTest('⁫', ['Aktivieren Sie das symmetrische Austauschen', 'Aktivieren Sie das symmetrische Austauschen', 'Aktivieren Sie das symmetrische Austauschen']);
  this.executeCharTest('⁮', ['Nationale Ziffernformen', 'Nationale Ziffernformen', 'Nationale Ziffernformen']);
  this.executeCharTest('⁯', ['Nominale Ziffernformen', 'Nominale Ziffernformen', 'Nominale Ziffernformen']);
  this.executeCharTest('﻿', ['Nullbreite Leerzeichen', 'Nullbreite Leerzeichen', 'Nullbreite Leerzeichen']);
  this.executeCharTest('￹', ['Interlinearer Anmerkungsanker', 'Interlinearer Anmerkungsanker', 'Interlinearer Anmerkungsanker']);
  this.executeCharTest('￺', ['Separator für interlineare Anmerkungen', 'Separator für interlineare Anmerkungen', 'Separator für interlineare Anmerkungen']);
  this.executeCharTest('￻', ['Interlinear Annotation Terminator', 'Interlinear Annotation Terminator', 'Interlinear Annotation Terminator']);
  this.executeCharTest('⏨', ['Dezimalexponentensymbol', 'Dezimalexponentensymbol', 'Dezimalexponentensymbol']);
  this.executeCharTest('★', ['Schwarzer Stern', 'Schwarzer Stern', 'Schwarzer Stern']);
  this.executeCharTest('☆', ['weißer Stern', 'weißer Stern', 'weißer Stern']);
  this.executeCharTest('⚪', ['Mittlerer weißer Kreis', 'Mittlerer weißer Kreis', 'Mittlerer weißer Kreis']);
  this.executeCharTest('⚫', ['Mittlerer schwarzer Kreis', 'Mittlerer schwarzer Kreis', 'Mittlerer schwarzer Kreis']);
  this.executeCharTest('✅', ['Weißes schweres Häkchen', 'Weißes schweres Häkchen', 'Weißes schweres Häkchen']);
  this.executeCharTest('✓', ['Häkchen', 'Häkchen', 'Häkchen']);
  this.executeCharTest('✔', ['Schweres Häkchen', 'Schweres Häkchen', 'Schweres Häkchen']);
  this.executeCharTest('✕', ['Multiplikation X', 'Multiplikation X', 'Multiplikation X']);
  this.executeCharTest('✖', ['Schwere Multiplikation X', 'Schwere Multiplikation X', 'Schwere Multiplikation X']);
  this.executeCharTest('✗', ['Stimmzettel X', 'Stimmzettel X', 'Stimmzettel X']);
  this.executeCharTest('✘', ['Schwerer Stimmzettel X', 'Schwerer Stimmzettel X', 'Schwerer Stimmzettel X']);
  this.executeCharTest('✛', ['Center Cross öffnen', 'Center Cross öffnen', 'Center Cross öffnen']);
  this.executeCharTest('✜', ['Schweres offenes Mittelkreuz', 'Schweres offenes Mittelkreuz', 'Schweres offenes Mittelkreuz']);
  this.executeCharTest('✠', ['Malteserkreuz', 'Malteserkreuz', 'Malteserkreuz']);
  this.executeCharTest('✡', ['Davidstern', 'Davidstern', 'Davidstern']);
  this.executeCharTest('✢', ['Vier Teardrop-Spoked Asterisk', 'Vier Teardrop-Spoked Asterisk', 'Vier Teardrop-Spoked Asterisk']);
  this.executeCharTest('✣', ['Vier Ballon-Speichen-Sternchen', 'Vier Ballon-Speichen-Sternchen', 'Vier Ballon-Speichen-Sternchen']);
  this.executeCharTest('✤', ['Schwere Vier-Ballon-Speichen-Sternchen', 'Schwere Vier-Ballon-Speichen-Sternchen', 'Schwere Vier-Ballon-Speichen-Sternchen']);
  this.executeCharTest('✥', ['Vier Club-Spoked Asterisk', 'Vier Club-Spoked Asterisk', 'Vier Club-Spoked Asterisk']);
  this.executeCharTest('✦', ['Schwarzer vierzackiger Stern', 'Schwarzer vierzackiger Stern', 'Schwarzer vierzackiger Stern']);
  this.executeCharTest('✧', ['Weißer vierzackiger Stern', 'Weißer vierzackiger Stern', 'Weißer vierzackiger Stern']);
  this.executeCharTest('✨', ['Funkelt', 'Funkelt', 'Funkelt']);
  this.executeCharTest('✩', ['Stress umrissener weißer Stern', 'Stress umrissener weißer Stern', 'Stress umrissener weißer Stern']);
  this.executeCharTest('✪', ['Eingekreister weißer Stern', 'Eingekreister weißer Stern', 'Eingekreister weißer Stern']);
  this.executeCharTest('✫', ['Open Center Black Star', 'Open Center Black Star', 'Open Center Black Star']);
  this.executeCharTest('✬', ['Schwarzer Center White Star', 'Schwarzer Center White Star', 'Schwarzer Center White Star']);
  this.executeCharTest('✭', ['Schwarzer Stern umrissen', 'Schwarzer Stern umrissen', 'Schwarzer Stern umrissen']);
  this.executeCharTest('✮', ['Schwerer umrissener schwarzer Stern', 'Schwerer umrissener schwarzer Stern', 'Schwerer umrissener schwarzer Stern']);
  this.executeCharTest('✯', ['Sternrad Stern', 'Sternrad Stern', 'Sternrad Stern']);
  this.executeCharTest('✰', ['Beschatteter weißer Stern', 'Beschatteter weißer Stern', 'Beschatteter weißer Stern']);
  this.executeCharTest('✱', ['Schwerer Stern', 'Schwerer Stern', 'Schwerer Stern']);
  this.executeCharTest('✲', ['Öffnen Sie Center Asterisk', 'Öffnen Sie Center Asterisk', 'Öffnen Sie Center Asterisk']);
  this.executeCharTest('✳', ['Acht Speichen-Sternchen', 'Acht Speichen-Sternchen', 'Acht Speichen-Sternchen']);
  this.executeCharTest('✴', ['Achtzackiger schwarzer Stern', 'Achtzackiger schwarzer Stern', 'Achtzackiger schwarzer Stern']);
  this.executeCharTest('✵', ['Achtzackiger Sternradstern', 'Achtzackiger Sternradstern', 'Achtzackiger Sternradstern']);
  this.executeCharTest('✶', ['Sechszackiger schwarzer Stern', 'Sechszackiger schwarzer Stern', 'Sechszackiger schwarzer Stern']);
  this.executeCharTest('✹', ['Zwölf schwarzer Stern', 'Zwölf schwarzer Stern', 'Zwölf schwarzer Stern']);
  this.executeCharTest('✺', ['Sechzehn Spitzen Sternchen', 'Sechzehn Spitzen Sternchen', 'Sechzehn Spitzen Sternchen']);
  this.executeCharTest('✻', ['Teardrop-Spoked Sternchen', 'Teardrop-Spoked Sternchen', 'Teardrop-Spoked Sternchen']);
  this.executeCharTest('✼', ['Open Center Teardrop-Spoked Sternchen', 'Open Center Teardrop-Spoked Sternchen', 'Open Center Teardrop-Spoked Sternchen']);
  this.executeCharTest('✽', ['Schwerer Tropfen-Speichen-Sternchen', 'Schwerer Tropfen-Speichen-Sternchen', 'Schwerer Tropfen-Speichen-Sternchen']);
  this.executeCharTest('✾', ['Sechs Petalled Schwarzweiss-Florette', 'Sechs Petalled Schwarzweiss-Florette', 'Sechs Petalled Schwarzweiss-Florette']);
  this.executeCharTest('✿', ['Schwarze Florette', 'Schwarze Florette', 'Schwarze Florette']);
  this.executeCharTest('❀', ['Weiße Florette', 'Weiße Florette', 'Weiße Florette']);
  this.executeCharTest('❁', ['Acht Petalled umrissene schwarze Florette', 'Acht Petalled umrissene schwarze Florette', 'Acht Petalled umrissene schwarze Florette']);
  this.executeCharTest('❂', ['Eingekreistes offenes Zentrum Achtstern', 'Eingekreistes offenes Zentrum Achtstern', 'Eingekreistes offenes Zentrum Achtstern']);
  this.executeCharTest('❃', ['Schweres, tropfenbesetztes Nadelrad-Sternchen', 'Schweres, tropfenbesetztes Nadelrad-Sternchen', 'Schweres, tropfenbesetztes Nadelrad-Sternchen']);
  this.executeCharTest('❄', ['Schneeflocke', 'Schneeflocke', 'Schneeflocke']);
  this.executeCharTest('❅', ['Feste Trifoliate-Schneeflocke', 'Feste Trifoliate-Schneeflocke', 'Feste Trifoliate-Schneeflocke']);
  this.executeCharTest('❆', ['Schwere Chevron-Schneeflocke', 'Schwere Chevron-Schneeflocke', 'Schwere Chevron-Schneeflocke']);
  this.executeCharTest('❇', ['Funkeln', 'Funkeln', 'Funkeln']);
  this.executeCharTest('❈', ['Schweres Funkeln', 'Schweres Funkeln', 'Schweres Funkeln']);
  this.executeCharTest('❉', ['Ballon-Speichen-Sternchen', 'Ballon-Speichen-Sternchen', 'Ballon-Speichen-Sternchen']);
  this.executeCharTest('❊', ['Acht Teardrop-Spoked Propeller Sternchen', 'Acht Teardrop-Spoked Propeller Sternchen', 'Acht Teardrop-Spoked Propeller Sternchen']);
  this.executeCharTest('❋', ['Schwere Acht Teardrop-Spoked Propeller Sternchen', 'Schwere Acht Teardrop-Spoked Propeller Sternchen', 'Schwere Acht Teardrop-Spoked Propeller Sternchen']);
  this.executeCharTest('❌', ['Cross Mark', 'Cross Mark', 'Cross Mark']);
  this.executeCharTest('❍', ['Beschatteter weißer Kreis', 'Beschatteter weißer Kreis', 'Beschatteter weißer Kreis']);
};


sre.MathspeakCharGermanTest.prototype.testMathspeakFunctions = function() {
  this.executeCharTest('deg', ['Grad', 'Grad', 'Grad']);
  this.executeCharTest('det', ['Determinante von', 'Determinante von', 'Determinante von']);
  this.executeCharTest('dim', ['Dimension', 'Dimension', 'Dimension']);
  this.executeCharTest('hom', ['hom', 'hom', 'hom']);
  this.executeCharTest('Hom', ['hom', 'hom', 'hom']);
  this.executeCharTest('ker', ['Kern', 'Kern', 'Kern']);
  this.executeCharTest('Tr', ['Spur', 'Spur', 'Spur']);
  this.executeCharTest('tr', ['Spur', 'Spur', 'Spur']);
  this.executeCharTest('log', ['Logarithmus', 'Logarithmus', 'Logarithmus']);
  this.executeCharTest('ln', ['natürlicher Logarithmus', 'natürlicher Logarithmus', 'natürlicher Logarithmus']);
  this.executeCharTest('lg', ['Logarithmus zur Basis 10', 'Logarithmus zur Basis 10', 'Logarithmus zur Basis 10']);
  this.executeCharTest('exp', ['exp', 'exp', 'exp']);
  this.executeCharTest('expt', ['exp', 'exp', 'exp']);
  this.executeCharTest('gcd', ['ggt', 'ggt', 'ggt']);
  this.executeCharTest('lcm', ['kgv', 'kgv', 'kgv']);
  this.executeCharTest('arg', ['Argument', 'Argument', 'Argument']);
  this.executeCharTest('im', ['der Imaginärteil der komplexen Zahl', 'der Imaginärteil der komplexen Zahl', 'der Imaginärteil der komplexen Zahl']);
  this.executeCharTest('re', ['der Realteil der komplexen Zahl', 'der Realteil der komplexen Zahl', 'der Realteil der komplexen Zahl']);
  this.executeCharTest('inf', ['Infimum', 'Infimum', 'Infimum']);
  this.executeCharTest('lim', ['Limes', 'Limes', 'Limes']);
  this.executeCharTest('lim inf', ['Limes inferior', 'Limes inferior', 'Limes inferior']);
  this.executeCharTest('liminf', ['Limes inferior', 'Limes inferior', 'Limes inferior']);
  this.executeCharTest('lim sup', ['Limes superior', 'Limes superior', 'Limes superior']);
  this.executeCharTest('limsup', ['Limes superior', 'Limes superior', 'Limes superior']);
  this.executeCharTest('max', ['Maximum', 'Maximum', 'Maximum']);
  this.executeCharTest('min', ['Minimum', 'Minimum', 'Minimum']);
  this.executeCharTest('sup', ['Supremum', 'Supremum', 'Supremum']);
  this.executeCharTest('injlim', ['Colimes', 'Colimes', 'Colimes']);
  this.executeCharTest('inj lim', ['Colimes', 'Colimes', 'Colimes']);
  this.executeCharTest('projlim', ['projektiver Limes', 'projektiver Limes', 'projektiver Limes']);
  this.executeCharTest('proj lim', ['projektiver Limes', 'projektiver Limes', 'projektiver Limes']);
  this.executeCharTest('mod', ['modulo', 'modulo', 'modulo']);
  this.executeCharTest('Pr', ['Wahrscheinlichkeit', 'Wahrscheinlichkeit', 'Wahrscheinlichkeit']);
  this.executeCharTest('cosh', ['Kosinus hyperbolicus', 'Kosinus hyperbolicus', 'Kosinus hyperbolicus']);
  this.executeCharTest('coth', ['Kotangens hyperbolicus', 'Kotangens hyperbolicus', 'Kotangens hyperbolicus']);
  this.executeCharTest('csch', ['Kosekans hyperbolicus', 'Kosekans hyperbolicus', 'Kosekans hyperbolicus']);
  this.executeCharTest('sech', ['Sekans hyperbolicus', 'Sekans hyperbolicus', 'Sekans hyperbolicus']);
  this.executeCharTest('sinh', ['Sinus hyperbolicus', 'Sinus hyperbolicus', 'Sinus hyperbolicus']);
  this.executeCharTest('tanh', ['Tangens hyperbolicus', 'Tangens hyperbolicus', 'Tangens hyperbolicus']);
  this.executeCharTest('arcosh', ['Areakosinus hyperbolicus', 'Areakosinus hyperbolicus', 'Areakosinus hyperbolicus']);
  this.executeCharTest('arccosh', ['Areakosinus hyperbolicus', 'Areakosinus hyperbolicus', 'Areakosinus hyperbolicus']);
  this.executeCharTest('arcoth', ['Areakotangens hyperbolicus', 'Areakotangens hyperbolicus', 'Areakotangens hyperbolicus']);
  this.executeCharTest('arccoth', ['Areakotangens hyperbolicus', 'Areakotangens hyperbolicus', 'Areakotangens hyperbolicus']);
  this.executeCharTest('arcsch', ['Areakosekans hyperbolicus', 'Areakosekans hyperbolicus', 'Areakosekans hyperbolicus']);
  this.executeCharTest('arccsch', ['Areakosekans hyperbolicus', 'Areakosekans hyperbolicus', 'Areakosekans hyperbolicus']);
  this.executeCharTest('arsech', ['Areasekans hyperbolicus', 'Areasekans hyperbolicus', 'Areasekans hyperbolicus']);
  this.executeCharTest('arcsech', ['Areasekans hyperbolicus', 'Areasekans hyperbolicus', 'Areasekans hyperbolicus']);
  this.executeCharTest('arsinh', ['Areasinus hyperbolicus', 'Areasinus hyperbolicus', 'Areasinus hyperbolicus']);
  this.executeCharTest('arcsinh', ['Areasinus hyperbolicus', 'Areasinus hyperbolicus', 'Areasinus hyperbolicus']);
  this.executeCharTest('artanh', ['Areatangens hyperbolicus ', 'Areatangens hyperbolicus ', 'Areatangens hyperbolicus ']);
  this.executeCharTest('arctanh', ['Areatangens hyperbolicus ', 'Areatangens hyperbolicus ', 'Areatangens hyperbolicus ']);
  this.executeCharTest('cos', ['Kosinus', 'Kosinus', 'Kosinus']);
  this.executeCharTest('cosine', ['Kosinus', 'Kosinus', 'Kosinus']);
  this.executeCharTest('cot', ['Kotangens', 'Kotangens', 'Kotangens']);
  this.executeCharTest('csc', ['Kosekans', 'Kosekans', 'Kosekans']);
  this.executeCharTest('sec', ['Sekans', 'Sekans', 'Sekans']);
  this.executeCharTest('sin', ['Sinus', 'Sinus', 'Sinus']);
  this.executeCharTest('sine', ['Sinus', 'Sinus', 'Sinus']);
  this.executeCharTest('tan', ['Tangens', 'Tangens', 'Tangens']);
  this.executeCharTest('arccos', ['Arkuskosinus', 'Arkuskosinus', 'Arkuskosinus']);
  this.executeCharTest('arccot', ['Arkuskotangens', 'Arkuskotangens', 'Arkuskotangens']);
  this.executeCharTest('arccsc', ['Arkuskosekans', 'Arkuskosekans', 'Arkuskosekans']);
  this.executeCharTest('arcsec', ['Arkussekans', 'Arkussekans', 'Arkussekans']);
  this.executeCharTest('arcsin', ['Arkussinus', 'Arkussinus', 'Arkussinus']);
  this.executeCharTest('arctan', ['Arkustangens', 'Arkustangens', 'Arkustangens']);
};


sre.MathspeakCharGermanTest.prototype.testMathspeakUnits = function() {
  this.executeUnitTest('ha', ['Hektar']);
  this.executeUnitTest('W', ['Watt']);
  this.executeUnitTest('w', ['Watt']);
  this.executeUnitTest('kw', ['Kilowatt']);
  this.executeUnitTest('kW', ['Kilowatt']);
  this.executeUnitTest('mw', ['Milliwatt']);
  this.executeUnitTest('mW', ['Milliwatt']);
  this.executeUnitTest('kwh', ['Kilowattstunde']);
  this.executeUnitTest('kWh', ['Kilowattstunde']);
  this.executeUnitTest('J', ['Joule']);
  this.executeUnitTest('N', ['Newton']);
  this.executeUnitTest('A', ['Ampere']);
  this.executeUnitTest('V', ['Volt']);
  this.executeUnitTest('µΩ', ['Mikroohm']);
  this.executeUnitTest('mΩ', ['Milliohm']);
  this.executeUnitTest('Ω', ['Ohm']);
  this.executeUnitTest('Ohm', ['Ohm']);
  this.executeUnitTest('kΩ', ['Kiloohm']);
  this.executeUnitTest('KΩ', ['Kiloohm']);
  this.executeUnitTest('MΩ', ['Megaohm']);
  this.executeUnitTest('GΩ', ['Gigaohm']);
  this.executeUnitTest('ft', ['Fuß']);
  this.executeUnitTest('ft.', ['Fuß']);
  this.executeUnitTest('in', ['Zoll']);
  this.executeUnitTest('in.', ['Zoll']);
  this.executeUnitTest('mi', ['Meile']);
  this.executeUnitTest('mi.', ['Meile']);
  this.executeUnitTest('yd', ['Yard']);
  this.executeUnitTest('yd.', ['Yard']);
  this.executeUnitTest('n.m.', ['nautische Meile']);
  this.executeUnitTest('mm', ['Millimeter']);
  this.executeUnitTest('cm', ['Zentimeter']);
  this.executeUnitTest('m', ['Meter']);
  this.executeUnitTest('km', ['Kilometer']);
  this.executeUnitTest('b', ['Bit']);
  this.executeUnitTest('B', ['Byte']);
  this.executeUnitTest('KB', ['Kilobyte']);
  this.executeUnitTest('MB', ['Megabyte']);
  this.executeUnitTest('GB', ['Gigabyte']);
  this.executeUnitTest('TB', ['Terabyte']);
  this.executeUnitTest('doz', ['Dutzend']);
  this.executeUnitTest('doz.', ['Dutzend']);
  this.executeUnitTest('dz', ['Dutzend']);
  this.executeUnitTest('dz.', ['Dutzend']);
  this.executeUnitTest('kt', ['Knoten']);
  this.executeUnitTest('kt.', ['Knoten']);
  this.executeUnitTest('mph', ['Meilen pro Stunde']);
  this.executeUnitTest('rpm', ['Umdrehungen pro Minute']);
  this.executeUnitTest('kmh', ['Kilometer pro Stunde']);
  this.executeUnitTest('F', ['Farad']);
  this.executeUnitTest('F.', ['Farad']);
  this.executeUnitTest('°F', ['Farad']);
  this.executeUnitTest('C', ['Celsius']);
  this.executeUnitTest('°C', ['Celsius']);
  this.executeUnitTest('K', ['Kelvin']);
  this.executeUnitTest('°K', ['Kelvin']);
  this.executeUnitTest('ns', ['Nanosekunde']);
  this.executeUnitTest('µs', ['Microsekunde']);
  this.executeUnitTest('ms', ['Millisekunde']);
  this.executeUnitTest('s', ['Sekunde']);
  this.executeUnitTest('min', ['Minute']);
  this.executeUnitTest('h', ['Stunde']);
  this.executeUnitTest('hr', ['Stunde']);
  this.executeUnitTest('cu', ['Kubik']);
  this.executeUnitTest('cu.', ['Kubik']);
  this.executeUnitTest('bbl.', ['Fass']);
  this.executeUnitTest('bbl', ['Fass']);
  this.executeUnitTest('fl. oz.', ['Fluid ounce']);
  this.executeUnitTest('fl oz', ['Fluid ounce']);
  this.executeUnitTest('gal', ['Gallone']);
  this.executeUnitTest('gal.', ['Gallone']);
  this.executeUnitTest('pt', ['Pint']);
  this.executeUnitTest('pt.', ['Pint']);
  this.executeUnitTest('qt', ['Quart']);
  this.executeUnitTest('qt.', ['Quart']);
  this.executeUnitTest('tbsp', ['Esslöffel']);
  this.executeUnitTest('tbsp.', ['Esslöffel']);
  this.executeUnitTest('Tbsp', ['Esslöffel']);
  this.executeUnitTest('Tbsp.', ['Esslöffel']);
  this.executeUnitTest('tsp', ['Teelöffel']);
  this.executeUnitTest('tsp.', ['Teelöffel']);
  this.executeUnitTest('cc', ['Kubikzentimeter']);
  this.executeUnitTest('ccm', ['Kubikzentimeter']);
  this.executeUnitTest('kl', ['Kiloliter']);
  this.executeUnitTest('l', ['Liter']);
  this.executeUnitTest('ml', ['Milliliter']);
  this.executeUnitTest('oz', ['Unze']);
  this.executeUnitTest('oz.', ['Unze']);
  this.executeUnitTest('lb', ['Pfund']);
  this.executeUnitTest('lb.', ['Pfund']);
  this.executeUnitTest('LT', ['Long ton']);
  this.executeUnitTest('L.T.', ['Long ton']);
  this.executeUnitTest('g', ['Gramm']);
  this.executeUnitTest('gr', ['Gramm']);
  this.executeUnitTest('kg', ['Kilogramm']);
  this.executeUnitTest('mcg', ['Mikrogramm']);
  this.executeUnitTest('µg', ['Mikrogramm']);
  this.executeUnitTest('mg', ['Milligramm']);
  this.executeUnitTest('t', ['Tonne']);
  this.executeUnitTest('T', ['Tonne']);
};
