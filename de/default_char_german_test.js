// Copyright 2020 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// This work was sponsored by ETH Zurich
//

/**
 * @fileoverview Abstract class for test cases of single characters.
 * @author Volker.Sorge@gmail.com (Volker Sorge)
 */

goog.provide('sre.DefaultCharGermanTest');

goog.require('sre.AbstractCharacterTest');



/**
 * @constructor
 * @extends {sre.AbstractCharacterTest}
 */
sre.DefaultCharGermanTest = function() {
  sre.DefaultCharGermanTest.base(this, 'constructor');

  this.locale = 'de';
  this.domain = 'default';
  
  /**
   * @type {Array.<string>}
   */
  this.styles = ['default'];

  this.setActive('DefaultCharactersGerman');
  // TODO: Remove
  this.actual = true;
};
goog.inherits(sre.DefaultCharGermanTest, sre.AbstractCharacterTest);


sre.DefaultCharGermanTest.prototype.testDefaultChars = function() {
  this.executeCharTest('0', ['zero']);
  this.executeCharTest('1', ['un']);
  this.executeCharTest('2', ['deux']);
  this.executeCharTest('3', ['trois']);
  this.executeCharTest('4', ['quatre']);
  this.executeCharTest('5', ['cinq']);
  this.executeCharTest('6', ['six']);
  this.executeCharTest('7', ['sept']);
  this.executeCharTest('8', ['huit']);
  this.executeCharTest('9', ['neuf']);
  this.executeCharTest('𝐀', ['A majuscule en gras']);
  this.executeCharTest('𝐁', ['B majuscule en gras']);
  this.executeCharTest('𝐂', ['C majuscule en gras']);
  this.executeCharTest('𝐃', ['D majuscule en gras']);
  this.executeCharTest('𝐄', ['E majuscule en gras']);
  this.executeCharTest('𝐅', ['F majuscule en gras']);
  this.executeCharTest('𝐆', ['G majuscule en gras']);
  this.executeCharTest('𝐇', ['H majuscule en gras']);
  this.executeCharTest('𝐈', ['I majuscule en gras']);
  this.executeCharTest('𝐉', ['J majuscule en gras']);
  this.executeCharTest('𝐊', ['K majuscule en gras']);
  this.executeCharTest('𝐋', ['L majuscule en gras']);
  this.executeCharTest('𝐌', ['M majuscule en gras']);
  this.executeCharTest('𝐍', ['N majuscule en gras']);
  this.executeCharTest('𝐎', ['O majuscule en gras']);
  this.executeCharTest('𝐏', ['P majuscule en gras']);
  this.executeCharTest('𝐐', ['Q majuscule en gras']);
  this.executeCharTest('𝐑', ['R majuscule en gras']);
  this.executeCharTest('𝐒', ['S majuscule en gras']);
  this.executeCharTest('𝐓', ['T majuscule en gras']);
  this.executeCharTest('𝐔', ['U majuscule en gras']);
  this.executeCharTest('𝐕', ['V majuscule en gras']);
  this.executeCharTest('𝐖', ['W majuscule en gras']);
  this.executeCharTest('𝐗', ['X majuscule en gras']);
  this.executeCharTest('𝐘', ['Y majuscule en gras']);
  this.executeCharTest('𝐙', ['Z majuscule en gras']);
  this.executeCharTest('𝐚', ['a en gras']);
  this.executeCharTest('𝐛', ['b en gras']);
  this.executeCharTest('𝐜', ['c en gras']);
  this.executeCharTest('𝐝', ['d en gras']);
  this.executeCharTest('𝐞', ['e en gras']);
  this.executeCharTest('𝐟', ['f en gras']);
  this.executeCharTest('𝐠', ['g en gras']);
  this.executeCharTest('𝐡', ['h en gras']);
  this.executeCharTest('𝐢', ['i en gras']);
  this.executeCharTest('𝐣', ['j en gras']);
  this.executeCharTest('𝐤', ['k en gras']);
  this.executeCharTest('𝐥', ['l en gras']);
  this.executeCharTest('𝐦', ['m en gras']);
  this.executeCharTest('𝐧', ['n en gras']);
  this.executeCharTest('𝐨', ['o en gras']);
  this.executeCharTest('𝐩', ['p en gras']);
  this.executeCharTest('𝐪', ['q en gras']);
  this.executeCharTest('𝐫', ['r en gras']);
  this.executeCharTest('𝐬', ['s en gras']);
  this.executeCharTest('𝐭', ['t en gras']);
  this.executeCharTest('𝐮', ['u en gras']);
  this.executeCharTest('𝐯', ['v en gras']);
  this.executeCharTest('𝐰', ['w en gras']);
  this.executeCharTest('𝐱', ['x en gras']);
  this.executeCharTest('𝐲', ['y en gras']);
  this.executeCharTest('𝐳', ['z en gras']);
  this.executeCharTest('𝕬', ['A majuscule en gothique gras']);
  this.executeCharTest('𝕭', ['B majuscule en gothique gras']);
  this.executeCharTest('𝕮', ['C majuscule en gothique gras']);
  this.executeCharTest('𝕯', ['D majuscule en gothique gras']);
  this.executeCharTest('𝕰', ['E majuscule en gothique gras']);
  this.executeCharTest('𝕱', ['F majuscule en gothique gras']);
  this.executeCharTest('𝕲', ['G majuscule en gothique gras']);
  this.executeCharTest('𝕳', ['H majuscule en gothique gras']);
  this.executeCharTest('𝕴', ['I majuscule en gothique gras']);
  this.executeCharTest('𝕵', ['J majuscule en gothique gras']);
  this.executeCharTest('𝕶', ['K majuscule en gothique gras']);
  this.executeCharTest('𝕷', ['L majuscule en gothique gras']);
  this.executeCharTest('𝕸', ['M majuscule en gothique gras']);
  this.executeCharTest('𝕹', ['N majuscule en gothique gras']);
  this.executeCharTest('𝕺', ['O majuscule en gothique gras']);
  this.executeCharTest('𝕻', ['P majuscule en gothique gras']);
  this.executeCharTest('𝕼', ['Q majuscule en gothique gras']);
  this.executeCharTest('𝕽', ['R majuscule en gothique gras']);
  this.executeCharTest('𝕾', ['S majuscule en gothique gras']);
  this.executeCharTest('𝕿', ['T majuscule en gothique gras']);
  this.executeCharTest('𝖀', ['U majuscule en gothique gras']);
  this.executeCharTest('𝖁', ['V majuscule en gothique gras']);
  this.executeCharTest('𝖂', ['W majuscule en gothique gras']);
  this.executeCharTest('𝖃', ['X majuscule en gothique gras']);
  this.executeCharTest('𝖄', ['Y majuscule en gothique gras']);
  this.executeCharTest('𝖅', ['Z majuscule en gothique gras']);
  this.executeCharTest('𝖆', ['a en gothique gras']);
  this.executeCharTest('𝖇', ['b en gothique gras']);
  this.executeCharTest('𝖈', ['c en gothique gras']);
  this.executeCharTest('𝖉', ['d en gothique gras']);
  this.executeCharTest('𝖊', ['e en gothique gras']);
  this.executeCharTest('𝖋', ['f en gothique gras']);
  this.executeCharTest('𝖌', ['g en gothique gras']);
  this.executeCharTest('𝖍', ['h en gothique gras']);
  this.executeCharTest('𝖎', ['i en gothique gras']);
  this.executeCharTest('𝖏', ['j en gothique gras']);
  this.executeCharTest('𝖐', ['k en gothique gras']);
  this.executeCharTest('𝖑', ['l en gothique gras']);
  this.executeCharTest('𝖒', ['m en gothique gras']);
  this.executeCharTest('𝖓', ['n en gothique gras']);
  this.executeCharTest('𝖔', ['o en gothique gras']);
  this.executeCharTest('𝖕', ['p en gothique gras']);
  this.executeCharTest('𝖖', ['q en gothique gras']);
  this.executeCharTest('𝖗', ['r en gothique gras']);
  this.executeCharTest('𝖘', ['s en gothique gras']);
  this.executeCharTest('𝖙', ['t en gothique gras']);
  this.executeCharTest('𝖚', ['u en gothique gras']);
  this.executeCharTest('𝖛', ['v en gothique gras']);
  this.executeCharTest('𝖜', ['w en gothique gras']);
  this.executeCharTest('𝖝', ['x en gothique gras']);
  this.executeCharTest('𝖞', ['y en gothique gras']);
  this.executeCharTest('𝖟', ['z en gothique gras']);
  this.executeCharTest('𝑨', ['A majuscule en italique gras']);
  this.executeCharTest('𝑩', ['B majuscule en italique gras']);
  this.executeCharTest('𝑪', ['C majuscule en italique gras']);
  this.executeCharTest('𝑫', ['D majuscule en italique gras']);
  this.executeCharTest('𝑬', ['E majuscule en italique gras']);
  this.executeCharTest('𝑭', ['F majuscule en italique gras']);
  this.executeCharTest('𝑮', ['G majuscule en italique gras']);
  this.executeCharTest('𝑯', ['H majuscule en italique gras']);
  this.executeCharTest('𝑰', ['I majuscule en italique gras']);
  this.executeCharTest('𝑱', ['J majuscule en italique gras']);
  this.executeCharTest('𝑲', ['K majuscule en italique gras']);
  this.executeCharTest('𝑳', ['L majuscule en italique gras']);
  this.executeCharTest('𝑴', ['M majuscule en italique gras']);
  this.executeCharTest('𝑵', ['N majuscule en italique gras']);
  this.executeCharTest('𝑶', ['O majuscule en italique gras']);
  this.executeCharTest('𝑷', ['P majuscule en italique gras']);
  this.executeCharTest('𝑸', ['Q majuscule en italique gras']);
  this.executeCharTest('𝑹', ['R majuscule en italique gras']);
  this.executeCharTest('𝑺', ['S majuscule en italique gras']);
  this.executeCharTest('𝑻', ['T majuscule en italique gras']);
  this.executeCharTest('𝑼', ['U majuscule en italique gras']);
  this.executeCharTest('𝑽', ['V majuscule en italique gras']);
  this.executeCharTest('𝑾', ['W majuscule en italique gras']);
  this.executeCharTest('𝑿', ['X majuscule en italique gras']);
  this.executeCharTest('𝒀', ['Y majuscule en italique gras']);
  this.executeCharTest('𝒁', ['Z majuscule en italique gras']);
  this.executeCharTest('𝒂', ['a en italique gras']);
  this.executeCharTest('𝒃', ['b en italique gras']);
  this.executeCharTest('𝒄', ['c en italique gras']);
  this.executeCharTest('𝒅', ['d en italique gras']);
  this.executeCharTest('𝒆', ['e en italique gras']);
  this.executeCharTest('𝒇', ['f en italique gras']);
  this.executeCharTest('𝒈', ['g en italique gras']);
  this.executeCharTest('𝒉', ['h en italique gras']);
  this.executeCharTest('𝒊', ['i en italique gras']);
  this.executeCharTest('𝒋', ['j en italique gras']);
  this.executeCharTest('𝒌', ['k en italique gras']);
  this.executeCharTest('𝒍', ['l en italique gras']);
  this.executeCharTest('𝒎', ['m en italique gras']);
  this.executeCharTest('𝒏', ['n en italique gras']);
  this.executeCharTest('𝒐', ['o en italique gras']);
  this.executeCharTest('𝒑', ['p en italique gras']);
  this.executeCharTest('𝒒', ['q en italique gras']);
  this.executeCharTest('𝒓', ['r en italique gras']);
  this.executeCharTest('𝒔', ['s en italique gras']);
  this.executeCharTest('𝒕', ['t en italique gras']);
  this.executeCharTest('𝒖', ['u en italique gras']);
  this.executeCharTest('𝒗', ['v en italique gras']);
  this.executeCharTest('𝒘', ['w en italique gras']);
  this.executeCharTest('𝒙', ['x en italique gras']);
  this.executeCharTest('𝒚', ['y en italique gras']);
  this.executeCharTest('𝒛', ['z en italique gras']);
  this.executeCharTest('𝓐', ['A majuscule de ronde en gras']);
  this.executeCharTest('𝓑', ['B majuscule de ronde en gras']);
  this.executeCharTest('𝓒', ['C majuscule de ronde en gras']);
  this.executeCharTest('𝓓', ['D majuscule de ronde en gras']);
  this.executeCharTest('𝓔', ['E majuscule de ronde en gras']);
  this.executeCharTest('𝓕', ['F majuscule de ronde en gras']);
  this.executeCharTest('𝓖', ['G majuscule de ronde en gras']);
  this.executeCharTest('𝓗', ['H majuscule de ronde en gras']);
  this.executeCharTest('𝓘', ['I majuscule de ronde en gras']);
  this.executeCharTest('𝓙', ['J majuscule de ronde en gras']);
  this.executeCharTest('𝓚', ['K majuscule de ronde en gras']);
  this.executeCharTest('𝓛', ['L majuscule de ronde en gras']);
  this.executeCharTest('𝓜', ['M majuscule de ronde en gras']);
  this.executeCharTest('𝓝', ['N majuscule de ronde en gras']);
  this.executeCharTest('𝓞', ['O majuscule de ronde en gras']);
  this.executeCharTest('𝓟', ['P majuscule de ronde en gras']);
  this.executeCharTest('𝓠', ['Q majuscule de ronde en gras']);
  this.executeCharTest('𝓡', ['R majuscule de ronde en gras']);
  this.executeCharTest('𝓢', ['S majuscule de ronde en gras']);
  this.executeCharTest('𝓣', ['T majuscule de ronde en gras']);
  this.executeCharTest('𝓤', ['U majuscule de ronde en gras']);
  this.executeCharTest('𝓥', ['V majuscule de ronde en gras']);
  this.executeCharTest('𝓦', ['W majuscule de ronde en gras']);
  this.executeCharTest('𝓧', ['X majuscule de ronde en gras']);
  this.executeCharTest('𝓨', ['Y majuscule de ronde en gras']);
  this.executeCharTest('𝓩', ['Z majuscule de ronde en gras']);
  this.executeCharTest('𝓪', ['a de ronde en gras']);
  this.executeCharTest('𝓫', ['b de ronde en gras']);
  this.executeCharTest('𝓬', ['c de ronde en gras']);
  this.executeCharTest('𝓭', ['d de ronde en gras']);
  this.executeCharTest('𝓮', ['e de ronde en gras']);
  this.executeCharTest('𝓯', ['f de ronde en gras']);
  this.executeCharTest('𝓰', ['g de ronde en gras']);
  this.executeCharTest('𝓱', ['h de ronde en gras']);
  this.executeCharTest('𝓲', ['i de ronde en gras']);
  this.executeCharTest('𝓳', ['j de ronde en gras']);
  this.executeCharTest('𝓴', ['k de ronde en gras']);
  this.executeCharTest('𝓵', ['l de ronde en gras']);
  this.executeCharTest('𝓶', ['m de ronde en gras']);
  this.executeCharTest('𝓷', ['n de ronde en gras']);
  this.executeCharTest('𝓸', ['o de ronde en gras']);
  this.executeCharTest('𝓹', ['p de ronde en gras']);
  this.executeCharTest('𝓺', ['q de ronde en gras']);
  this.executeCharTest('𝓻', ['r de ronde en gras']);
  this.executeCharTest('𝓼', ['s de ronde en gras']);
  this.executeCharTest('𝓽', ['t de ronde en gras']);
  this.executeCharTest('𝓾', ['u de ronde en gras']);
  this.executeCharTest('𝓿', ['v de ronde en gras']);
  this.executeCharTest('𝔀', ['w de ronde en gras']);
  this.executeCharTest('𝔁', ['x de ronde en gras']);
  this.executeCharTest('𝔂', ['y de ronde en gras']);
  this.executeCharTest('𝔃', ['z de ronde en gras']);
  this.executeCharTest('𝔸', ['A majuscule ajouré']);
  this.executeCharTest('𝔹', ['B majuscule ajouré']);
  this.executeCharTest('ℂ', ['C majuscule ajouré']);
  this.executeCharTest('𝔻', ['D majuscule ajouré']);
  this.executeCharTest('𝔼', ['E majuscule ajouré']);
  this.executeCharTest('𝔽', ['F majuscule ajouré']);
  this.executeCharTest('𝔾', ['G majuscule ajouré']);
  this.executeCharTest('ℍ', ['H majuscule ajouré']);
  this.executeCharTest('𝕀', ['I majuscule ajouré']);
  this.executeCharTest('𝕁', ['J majuscule ajouré']);
  this.executeCharTest('𝕂', ['K majuscule ajouré']);
  this.executeCharTest('𝕃', ['L majuscule ajouré']);
  this.executeCharTest('𝕄', ['M majuscule ajouré']);
  this.executeCharTest('ℕ', ['N majuscule ajouré']);
  this.executeCharTest('𝕆', ['O majuscule ajouré']);
  this.executeCharTest('ℙ', ['P majuscule ajouré']);
  this.executeCharTest('ℚ', ['Q majuscule ajouré']);
  this.executeCharTest('ℝ', ['R majuscule ajouré']);
  this.executeCharTest('𝕊', ['S majuscule ajouré']);
  this.executeCharTest('𝕋', ['T majuscule ajouré']);
  this.executeCharTest('𝕌', ['U majuscule ajouré']);
  this.executeCharTest('𝕍', ['V majuscule ajouré']);
  this.executeCharTest('𝕎', ['W majuscule ajouré']);
  this.executeCharTest('𝕏', ['X majuscule ajouré']);
  this.executeCharTest('𝕐', ['Y majuscule ajouré']);
  this.executeCharTest('ℤ', ['Z majuscule ajouré']);
  this.executeCharTest('𝕒', ['a ajouré']);
  this.executeCharTest('𝕓', ['b ajouré']);
  this.executeCharTest('𝕔', ['c ajouré']);
  this.executeCharTest('𝕕', ['d ajouré']);
  this.executeCharTest('𝕖', ['e ajouré']);
  this.executeCharTest('𝕗', ['f ajouré']);
  this.executeCharTest('𝕘', ['g ajouré']);
  this.executeCharTest('𝕙', ['h ajouré']);
  this.executeCharTest('𝕚', ['i ajouré']);
  this.executeCharTest('𝕛', ['j ajouré']);
  this.executeCharTest('𝕜', ['k ajouré']);
  this.executeCharTest('𝕝', ['l ajouré']);
  this.executeCharTest('𝕞', ['m ajouré']);
  this.executeCharTest('𝕟', ['n ajouré']);
  this.executeCharTest('𝕠', ['o ajouré']);
  this.executeCharTest('𝕡', ['p ajouré']);
  this.executeCharTest('𝕢', ['q ajouré']);
  this.executeCharTest('𝕣', ['r ajouré']);
  this.executeCharTest('𝕤', ['s ajouré']);
  this.executeCharTest('𝕥', ['t ajouré']);
  this.executeCharTest('𝕦', ['u ajouré']);
  this.executeCharTest('𝕧', ['v ajouré']);
  this.executeCharTest('𝕨', ['w ajouré']);
  this.executeCharTest('𝕩', ['x ajouré']);
  this.executeCharTest('𝕪', ['y ajouré']);
  this.executeCharTest('𝕫', ['z ajouré']);
  this.executeCharTest('𝔄', ['A majuscule en gothique']);
  this.executeCharTest('𝔅', ['B majuscule en gothique']);
  this.executeCharTest('ℭ', ['C majuscule en gothique']);
  this.executeCharTest('𝔇', ['D majuscule en gothique']);
  this.executeCharTest('𝔈', ['E majuscule en gothique']);
  this.executeCharTest('𝔉', ['F majuscule en gothique']);
  this.executeCharTest('𝔊', ['G majuscule en gothique']);
  this.executeCharTest('ℌ', ['H majuscule en gothique']);
  this.executeCharTest('ℑ', ['I majuscule en gothique']);
  this.executeCharTest('𝔍', ['J majuscule en gothique']);
  this.executeCharTest('𝔎', ['K majuscule en gothique']);
  this.executeCharTest('𝔏', ['L majuscule en gothique']);
  this.executeCharTest('𝔐', ['M majuscule en gothique']);
  this.executeCharTest('𝔑', ['N majuscule en gothique']);
  this.executeCharTest('𝔒', ['O majuscule en gothique']);
  this.executeCharTest('𝔓', ['P majuscule en gothique']);
  this.executeCharTest('𝔔', ['Q majuscule en gothique']);
  this.executeCharTest('ℜ', ['R majuscule en gothique']);
  this.executeCharTest('𝔖', ['S majuscule en gothique']);
  this.executeCharTest('𝔗', ['T majuscule en gothique']);
  this.executeCharTest('𝔘', ['U majuscule en gothique']);
  this.executeCharTest('𝔙', ['V majuscule en gothique']);
  this.executeCharTest('𝔚', ['W majuscule en gothique']);
  this.executeCharTest('𝔛', ['X majuscule en gothique']);
  this.executeCharTest('𝔜', ['Y majuscule en gothique']);
  this.executeCharTest('ℨ', ['Z majuscule en gothique']);
  this.executeCharTest('𝔞', ['a en gothique']);
  this.executeCharTest('𝔟', ['b en gothique']);
  this.executeCharTest('𝔠', ['c en gothique']);
  this.executeCharTest('𝔡', ['d en gothique']);
  this.executeCharTest('𝔢', ['e en gothique']);
  this.executeCharTest('𝔣', ['f en gothique']);
  this.executeCharTest('𝔤', ['g en gothique']);
  this.executeCharTest('𝔥', ['h en gothique']);
  this.executeCharTest('𝔦', ['i en gothique']);
  this.executeCharTest('𝔧', ['j en gothique']);
  this.executeCharTest('𝔨', ['k en gothique']);
  this.executeCharTest('𝔩', ['l en gothique']);
  this.executeCharTest('𝔪', ['m en gothique']);
  this.executeCharTest('𝔫', ['n en gothique']);
  this.executeCharTest('𝔬', ['o en gothique']);
  this.executeCharTest('𝔭', ['p en gothique']);
  this.executeCharTest('𝔮', ['q en gothique']);
  this.executeCharTest('𝔯', ['r en gothique']);
  this.executeCharTest('𝔰', ['s en gothique']);
  this.executeCharTest('𝔱', ['t en gothique']);
  this.executeCharTest('𝔲', ['u en gothique']);
  this.executeCharTest('𝔳', ['v en gothique']);
  this.executeCharTest('𝔴', ['w en gothique']);
  this.executeCharTest('𝔵', ['x en gothique']);
  this.executeCharTest('𝔶', ['y en gothique']);
  this.executeCharTest('𝔷', ['z en gothique']);
  this.executeCharTest('Ａ', ['A majuscule']);
  this.executeCharTest('Ｂ', ['B majuscule']);
  this.executeCharTest('Ｃ', ['C majuscule']);
  this.executeCharTest('Ｄ', ['D majuscule']);
  this.executeCharTest('Ｅ', ['E majuscule']);
  this.executeCharTest('Ｆ', ['F majuscule']);
  this.executeCharTest('Ｇ', ['G majuscule']);
  this.executeCharTest('Ｈ', ['H majuscule']);
  this.executeCharTest('Ｉ', ['I majuscule']);
  this.executeCharTest('Ｊ', ['J majuscule']);
  this.executeCharTest('Ｋ', ['K majuscule']);
  this.executeCharTest('Ｌ', ['L majuscule']);
  this.executeCharTest('Ｍ', ['M majuscule']);
  this.executeCharTest('Ｎ', ['N majuscule']);
  this.executeCharTest('Ｏ', ['O majuscule']);
  this.executeCharTest('Ｐ', ['P majuscule']);
  this.executeCharTest('Ｑ', ['Q majuscule']);
  this.executeCharTest('Ｒ', ['R majuscule']);
  this.executeCharTest('Ｓ', ['S majuscule']);
  this.executeCharTest('Ｔ', ['T majuscule']);
  this.executeCharTest('Ｕ', ['U majuscule']);
  this.executeCharTest('Ｖ', ['V majuscule']);
  this.executeCharTest('Ｗ', ['W majuscule']);
  this.executeCharTest('Ｘ', ['X majuscule']);
  this.executeCharTest('Ｙ', ['Y majuscule']);
  this.executeCharTest('Ｚ', ['Z majuscule']);
  this.executeCharTest('ａ', ['a']);
  this.executeCharTest('ｂ', ['b']);
  this.executeCharTest('ｃ', ['c']);
  this.executeCharTest('ｄ', ['d']);
  this.executeCharTest('ｅ', ['e']);
  this.executeCharTest('ｆ', ['f']);
  this.executeCharTest('ｇ', ['g']);
  this.executeCharTest('ｈ', ['h']);
  this.executeCharTest('ｉ', ['i']);
  this.executeCharTest('ｊ', ['j']);
  this.executeCharTest('ｋ', ['k']);
  this.executeCharTest('ｌ', ['l']);
  this.executeCharTest('ｍ', ['m']);
  this.executeCharTest('ｎ', ['n']);
  this.executeCharTest('ｏ', ['o']);
  this.executeCharTest('ｐ', ['p']);
  this.executeCharTest('ｑ', ['q']);
  this.executeCharTest('ｒ', ['r']);
  this.executeCharTest('ｓ', ['s']);
  this.executeCharTest('ｔ', ['t']);
  this.executeCharTest('ｕ', ['u']);
  this.executeCharTest('ｖ', ['v']);
  this.executeCharTest('ｗ', ['w']);
  this.executeCharTest('ｘ', ['x']);
  this.executeCharTest('ｙ', ['y']);
  this.executeCharTest('ｚ', ['z']);
  this.executeCharTest('𝐴', ['A majuscule en italique']);
  this.executeCharTest('𝐵', ['B majuscule en italique']);
  this.executeCharTest('𝐶', ['C majuscule en italique']);
  this.executeCharTest('𝐷', ['D majuscule en italique']);
  this.executeCharTest('𝐸', ['E majuscule en italique']);
  this.executeCharTest('𝐹', ['F majuscule en italique']);
  this.executeCharTest('𝐺', ['G majuscule en italique']);
  this.executeCharTest('𝐻', ['H majuscule en italique']);
  this.executeCharTest('𝐼', ['I majuscule en italique']);
  this.executeCharTest('𝐽', ['J majuscule en italique']);
  this.executeCharTest('𝐾', ['K majuscule en italique']);
  this.executeCharTest('𝐿', ['L majuscule en italique']);
  this.executeCharTest('𝑀', ['M majuscule en italique']);
  this.executeCharTest('𝑁', ['N majuscule en italique']);
  this.executeCharTest('𝑂', ['O majuscule en italique']);
  this.executeCharTest('𝑃', ['P majuscule en italique']);
  this.executeCharTest('𝑄', ['Q majuscule en italique']);
  this.executeCharTest('𝑅', ['R majuscule en italique']);
  this.executeCharTest('𝑆', ['S majuscule en italique']);
  this.executeCharTest('𝑇', ['T majuscule en italique']);
  this.executeCharTest('𝑈', ['U majuscule en italique']);
  this.executeCharTest('𝑉', ['V majuscule en italique']);
  this.executeCharTest('𝑊', ['W majuscule en italique']);
  this.executeCharTest('𝑋', ['X majuscule en italique']);
  this.executeCharTest('𝑌', ['Y majuscule en italique']);
  this.executeCharTest('𝑍', ['Z majuscule en italique']);
  this.executeCharTest('𝑎', ['a en italique']);
  this.executeCharTest('𝑏', ['b en italique']);
  this.executeCharTest('𝑐', ['c en italique']);
  this.executeCharTest('𝑑', ['d en italique']);
  this.executeCharTest('𝑒', ['e en italique']);
  this.executeCharTest('𝑓', ['f en italique']);
  this.executeCharTest('𝑔', ['g en italique']);
  this.executeCharTest('ℎ', ['constante de planck']);
  this.executeCharTest('𝑖', ['i en italique']);
  this.executeCharTest('𝑗', ['j en italique']);
  this.executeCharTest('𝑘', ['k en italique']);
  this.executeCharTest('𝑙', ['l en italique']);
  this.executeCharTest('𝑚', ['m en italique']);
  this.executeCharTest('𝑛', ['n en italique']);
  this.executeCharTest('𝑜', ['o en italique']);
  this.executeCharTest('𝑝', ['p en italique']);
  this.executeCharTest('𝑞', ['q en italique']);
  this.executeCharTest('𝑟', ['r en italique']);
  this.executeCharTest('𝑠', ['s en italique']);
  this.executeCharTest('𝑡', ['t en italique']);
  this.executeCharTest('𝑢', ['u en italique']);
  this.executeCharTest('𝑣', ['v en italique']);
  this.executeCharTest('𝑤', ['w en italique']);
  this.executeCharTest('𝑥', ['x en italique']);
  this.executeCharTest('𝑦', ['y en italique']);
  this.executeCharTest('𝑧', ['z en italique']);
  this.executeCharTest('𝙰', ['A majuscule en chasse fixe']);
  this.executeCharTest('𝙱', ['B majuscule en chasse fixe']);
  this.executeCharTest('𝙲', ['C majuscule en chasse fixe']);
  this.executeCharTest('𝙳', ['D majuscule en chasse fixe']);
  this.executeCharTest('𝙴', ['E majuscule en chasse fixe']);
  this.executeCharTest('𝙵', ['F majuscule en chasse fixe']);
  this.executeCharTest('𝙶', ['G majuscule en chasse fixe']);
  this.executeCharTest('𝙷', ['H majuscule en chasse fixe']);
  this.executeCharTest('𝙸', ['I majuscule en chasse fixe']);
  this.executeCharTest('𝙹', ['J majuscule en chasse fixe']);
  this.executeCharTest('𝙺', ['K majuscule en chasse fixe']);
  this.executeCharTest('𝙻', ['L majuscule en chasse fixe']);
  this.executeCharTest('𝙼', ['M majuscule en chasse fixe']);
  this.executeCharTest('𝙽', ['N majuscule en chasse fixe']);
  this.executeCharTest('𝙾', ['O majuscule en chasse fixe']);
  this.executeCharTest('𝙿', ['P majuscule en chasse fixe']);
  this.executeCharTest('𝚀', ['Q majuscule en chasse fixe']);
  this.executeCharTest('𝚁', ['R majuscule en chasse fixe']);
  this.executeCharTest('𝚂', ['S majuscule en chasse fixe']);
  this.executeCharTest('𝚃', ['T majuscule en chasse fixe']);
  this.executeCharTest('𝚄', ['U majuscule en chasse fixe']);
  this.executeCharTest('𝚅', ['V majuscule en chasse fixe']);
  this.executeCharTest('𝚆', ['W majuscule en chasse fixe']);
  this.executeCharTest('𝚇', ['X majuscule en chasse fixe']);
  this.executeCharTest('𝚈', ['Y majuscule en chasse fixe']);
  this.executeCharTest('𝚉', ['Z majuscule en chasse fixe']);
  this.executeCharTest('𝚊', ['a en chasse fixe']);
  this.executeCharTest('𝚋', ['b en chasse fixe']);
  this.executeCharTest('𝚌', ['c en chasse fixe']);
  this.executeCharTest('𝚍', ['d en chasse fixe']);
  this.executeCharTest('𝚎', ['e en chasse fixe']);
  this.executeCharTest('𝚏', ['f en chasse fixe']);
  this.executeCharTest('𝚐', ['g en chasse fixe']);
  this.executeCharTest('𝚑', ['h en chasse fixe']);
  this.executeCharTest('𝚒', ['i en chasse fixe']);
  this.executeCharTest('𝚓', ['j en chasse fixe']);
  this.executeCharTest('𝚔', ['k en chasse fixe']);
  this.executeCharTest('𝚕', ['l en chasse fixe']);
  this.executeCharTest('𝚖', ['m en chasse fixe']);
  this.executeCharTest('𝚗', ['n en chasse fixe']);
  this.executeCharTest('𝚘', ['o en chasse fixe']);
  this.executeCharTest('𝚙', ['p en chasse fixe']);
  this.executeCharTest('𝚚', ['q en chasse fixe']);
  this.executeCharTest('𝚛', ['r en chasse fixe']);
  this.executeCharTest('𝚜', ['s en chasse fixe']);
  this.executeCharTest('𝚝', ['t en chasse fixe']);
  this.executeCharTest('𝚞', ['u en chasse fixe']);
  this.executeCharTest('𝚟', ['v en chasse fixe']);
  this.executeCharTest('𝚠', ['w en chasse fixe']);
  this.executeCharTest('𝚡', ['x en chasse fixe']);
  this.executeCharTest('𝚢', ['y en chasse fixe']);
  this.executeCharTest('𝚣', ['z en chasse fixe']);
  this.executeCharTest('A', ['A majuscule']);
  this.executeCharTest('B', ['B majuscule']);
  this.executeCharTest('C', ['C majuscule']);
  this.executeCharTest('D', ['D majuscule']);
  this.executeCharTest('E', ['E majuscule']);
  this.executeCharTest('F', ['F majuscule']);
  this.executeCharTest('G', ['G majuscule']);
  this.executeCharTest('H', ['H majuscule']);
  this.executeCharTest('I', ['I majuscule']);
  this.executeCharTest('J', ['J majuscule']);
  this.executeCharTest('K', ['K majuscule']);
  this.executeCharTest('L', ['L majuscule']);
  this.executeCharTest('M', ['M majuscule']);
  this.executeCharTest('N', ['N majuscule']);
  this.executeCharTest('O', ['O majuscule']);
  this.executeCharTest('P', ['P majuscule']);
  this.executeCharTest('Q', ['Q majuscule']);
  this.executeCharTest('R', ['R majuscule']);
  this.executeCharTest('S', ['S majuscule']);
  this.executeCharTest('T', ['T majuscule']);
  this.executeCharTest('U', ['U majuscule']);
  this.executeCharTest('V', ['V majuscule']);
  this.executeCharTest('W', ['W majuscule']);
  this.executeCharTest('X', ['X majuscule']);
  this.executeCharTest('Y', ['Y majuscule']);
  this.executeCharTest('Z', ['Z majuscule']);
  this.executeCharTest('a', ['a']);
  this.executeCharTest('b', ['b']);
  this.executeCharTest('c', ['c']);
  this.executeCharTest('d', ['d']);
  this.executeCharTest('e', ['e']);
  this.executeCharTest('f', ['f']);
  this.executeCharTest('g', ['g']);
  this.executeCharTest('h', ['h']);
  this.executeCharTest('i', ['i']);
  this.executeCharTest('j', ['j']);
  this.executeCharTest('k', ['k']);
  this.executeCharTest('l', ['l']);
  this.executeCharTest('m', ['m']);
  this.executeCharTest('n', ['n']);
  this.executeCharTest('o', ['o']);
  this.executeCharTest('p', ['p']);
  this.executeCharTest('q', ['q']);
  this.executeCharTest('r', ['r']);
  this.executeCharTest('s', ['s']);
  this.executeCharTest('t', ['t']);
  this.executeCharTest('u', ['u']);
  this.executeCharTest('v', ['v']);
  this.executeCharTest('w', ['w']);
  this.executeCharTest('x', ['x']);
  this.executeCharTest('y', ['y']);
  this.executeCharTest('z', ['z']);
  this.executeCharTest('𝒜', ['A majuscule de ronde']);
  this.executeCharTest('ℬ', ['B majuscule de ronde']);
  this.executeCharTest('𝒞', ['C majuscule de ronde']);
  this.executeCharTest('𝒟', ['D majuscule de ronde']);
  this.executeCharTest('ℰ', ['E majuscule de ronde']);
  this.executeCharTest('ℱ', ['F majuscule de ronde']);
  this.executeCharTest('𝒢', ['G majuscule de ronde']);
  this.executeCharTest('ℋ', ['H majuscule de ronde']);
  this.executeCharTest('ℐ', ['I majuscule de ronde']);
  this.executeCharTest('𝒥', ['J majuscule de ronde']);
  this.executeCharTest('𝒦', ['K majuscule de ronde']);
  this.executeCharTest('ℒ', ['L majuscule de ronde']);
  this.executeCharTest('ℳ', ['M majuscule de ronde']);
  this.executeCharTest('𝒩', ['N majuscule de ronde']);
  this.executeCharTest('𝒪', ['O majuscule de ronde']);
  this.executeCharTest('𝒫', ['P majuscule de ronde']);
  this.executeCharTest('𝒬', ['Q majuscule de ronde']);
  this.executeCharTest('ℛ', ['R majuscule de ronde']);
  this.executeCharTest('𝒮', ['S majuscule de ronde']);
  this.executeCharTest('𝒯', ['T majuscule de ronde']);
  this.executeCharTest('𝒰', ['U majuscule de ronde']);
  this.executeCharTest('𝒱', ['V majuscule de ronde']);
  this.executeCharTest('𝒲', ['W majuscule de ronde']);
  this.executeCharTest('𝒳', ['X majuscule de ronde']);
  this.executeCharTest('𝒴', ['Y majuscule de ronde']);
  this.executeCharTest('𝒵', ['Z majuscule de ronde']);
  this.executeCharTest('𝒶', ['a de ronde']);
  this.executeCharTest('𝒷', ['b de ronde']);
  this.executeCharTest('𝒸', ['c de ronde']);
  this.executeCharTest('𝒹', ['d de ronde']);
  this.executeCharTest('ℯ', ['e de ronde']);
  this.executeCharTest('𝒻', ['f de ronde']);
  this.executeCharTest('ℊ', ['g de ronde']);
  this.executeCharTest('𝒽', ['h de ronde']);
  this.executeCharTest('𝒾', ['i de ronde']);
  this.executeCharTest('𝒿', ['j de ronde']);
  this.executeCharTest('𝓀', ['k de ronde']);
  this.executeCharTest('𝓁', ['l de ronde']);
  this.executeCharTest('𝓂', ['m de ronde']);
  this.executeCharTest('𝓃', ['n de ronde']);
  this.executeCharTest('ℴ', ['o de ronde']);
  this.executeCharTest('𝓅', ['p de ronde']);
  this.executeCharTest('𝓆', ['q de ronde']);
  this.executeCharTest('𝓇', ['r de ronde']);
  this.executeCharTest('𝓈', ['s de ronde']);
  this.executeCharTest('𝓉', ['t de ronde']);
  this.executeCharTest('𝓊', ['u de ronde']);
  this.executeCharTest('𝓋', ['v de ronde']);
  this.executeCharTest('𝓌', ['w de ronde']);
  this.executeCharTest('𝓍', ['x de ronde']);
  this.executeCharTest('𝓎', ['y de ronde']);
  this.executeCharTest('𝓏', ['z de ronde']);
  this.executeCharTest('𝖠', ['A majuscule sans empattement']);
  this.executeCharTest('𝖡', ['B majuscule sans empattement']);
  this.executeCharTest('𝖢', ['C majuscule sans empattement']);
  this.executeCharTest('𝖣', ['D majuscule sans empattement']);
  this.executeCharTest('𝖤', ['E majuscule sans empattement']);
  this.executeCharTest('𝖥', ['F majuscule sans empattement']);
  this.executeCharTest('𝖦', ['G majuscule sans empattement']);
  this.executeCharTest('𝖧', ['H majuscule sans empattement']);
  this.executeCharTest('𝖨', ['I majuscule sans empattement']);
  this.executeCharTest('𝖩', ['J majuscule sans empattement']);
  this.executeCharTest('𝖪', ['K majuscule sans empattement']);
  this.executeCharTest('𝖫', ['L majuscule sans empattement']);
  this.executeCharTest('𝖬', ['M majuscule sans empattement']);
  this.executeCharTest('𝖭', ['N majuscule sans empattement']);
  this.executeCharTest('𝖮', ['O majuscule sans empattement']);
  this.executeCharTest('𝖯', ['P majuscule sans empattement']);
  this.executeCharTest('𝖰', ['Q majuscule sans empattement']);
  this.executeCharTest('𝖱', ['R majuscule sans empattement']);
  this.executeCharTest('𝖲', ['S majuscule sans empattement']);
  this.executeCharTest('𝖳', ['T majuscule sans empattement']);
  this.executeCharTest('𝖴', ['U majuscule sans empattement']);
  this.executeCharTest('𝖵', ['V majuscule sans empattement']);
  this.executeCharTest('𝖶', ['W majuscule sans empattement']);
  this.executeCharTest('𝖷', ['X majuscule sans empattement']);
  this.executeCharTest('𝖸', ['Y majuscule sans empattement']);
  this.executeCharTest('𝖹', ['Z majuscule sans empattement']);
  this.executeCharTest('𝖺', ['a sans empattement']);
  this.executeCharTest('𝖻', ['b sans empattement']);
  this.executeCharTest('𝖼', ['c sans empattement']);
  this.executeCharTest('𝖽', ['d sans empattement']);
  this.executeCharTest('𝖾', ['e sans empattement']);
  this.executeCharTest('𝖿', ['f sans empattement']);
  this.executeCharTest('𝗀', ['g sans empattement']);
  this.executeCharTest('𝗁', ['h sans empattement']);
  this.executeCharTest('𝗂', ['i sans empattement']);
  this.executeCharTest('𝗃', ['j sans empattement']);
  this.executeCharTest('𝗄', ['k sans empattement']);
  this.executeCharTest('𝗅', ['l sans empattement']);
  this.executeCharTest('𝗆', ['m sans empattement']);
  this.executeCharTest('𝗇', ['n sans empattement']);
  this.executeCharTest('𝗈', ['o sans empattement']);
  this.executeCharTest('𝗉', ['p sans empattement']);
  this.executeCharTest('𝗊', ['q sans empattement']);
  this.executeCharTest('𝗋', ['r sans empattement']);
  this.executeCharTest('𝗌', ['s sans empattement']);
  this.executeCharTest('𝗍', ['t sans empattement']);
  this.executeCharTest('𝗎', ['u sans empattement']);
  this.executeCharTest('𝗏', ['v sans empattement']);
  this.executeCharTest('𝗐', ['w sans empattement']);
  this.executeCharTest('𝗑', ['x sans empattement']);
  this.executeCharTest('𝗒', ['y sans empattement']);
  this.executeCharTest('𝗓', ['z sans empattement']);
  this.executeCharTest('𝘈', ['A majuscule en italique sans empattement']);
  this.executeCharTest('𝘉', ['B majuscule en italique sans empattement']);
  this.executeCharTest('𝘊', ['C majuscule en italique sans empattement']);
  this.executeCharTest('𝘋', ['D majuscule en italique sans empattement']);
  this.executeCharTest('𝘌', ['E majuscule en italique sans empattement']);
  this.executeCharTest('𝘍', ['F majuscule en italique sans empattement']);
  this.executeCharTest('𝘎', ['G majuscule en italique sans empattement']);
  this.executeCharTest('𝘏', ['H majuscule en italique sans empattement']);
  this.executeCharTest('𝘐', ['I majuscule en italique sans empattement']);
  this.executeCharTest('𝘑', ['J majuscule en italique sans empattement']);
  this.executeCharTest('𝘒', ['K majuscule en italique sans empattement']);
  this.executeCharTest('𝘓', ['L majuscule en italique sans empattement']);
  this.executeCharTest('𝘔', ['M majuscule en italique sans empattement']);
  this.executeCharTest('𝘕', ['N majuscule en italique sans empattement']);
  this.executeCharTest('𝘖', ['O majuscule en italique sans empattement']);
  this.executeCharTest('𝘗', ['P majuscule en italique sans empattement']);
  this.executeCharTest('𝘘', ['Q majuscule en italique sans empattement']);
  this.executeCharTest('𝘙', ['R majuscule en italique sans empattement']);
  this.executeCharTest('𝘚', ['S majuscule en italique sans empattement']);
  this.executeCharTest('𝘛', ['T majuscule en italique sans empattement']);
  this.executeCharTest('𝘜', ['U majuscule en italique sans empattement']);
  this.executeCharTest('𝘝', ['V majuscule en italique sans empattement']);
  this.executeCharTest('𝘞', ['W majuscule en italique sans empattement']);
  this.executeCharTest('𝘟', ['X majuscule en italique sans empattement']);
  this.executeCharTest('𝘠', ['Y majuscule en italique sans empattement']);
  this.executeCharTest('𝘡', ['Z majuscule en italique sans empattement']);
  this.executeCharTest('𝘢', ['a en italique sans empattement']);
  this.executeCharTest('𝘣', ['b en italique sans empattement']);
  this.executeCharTest('𝘤', ['c en italique sans empattement']);
  this.executeCharTest('𝘥', ['d en italique sans empattement']);
  this.executeCharTest('𝘦', ['e en italique sans empattement']);
  this.executeCharTest('𝘧', ['f en italique sans empattement']);
  this.executeCharTest('𝘨', ['g en italique sans empattement']);
  this.executeCharTest('𝘩', ['h en italique sans empattement']);
  this.executeCharTest('𝘪', ['i en italique sans empattement']);
  this.executeCharTest('𝘫', ['j en italique sans empattement']);
  this.executeCharTest('𝘬', ['k en italique sans empattement']);
  this.executeCharTest('𝘭', ['l en italique sans empattement']);
  this.executeCharTest('𝘮', ['m en italique sans empattement']);
  this.executeCharTest('𝘯', ['n en italique sans empattement']);
  this.executeCharTest('𝘰', ['o en italique sans empattement']);
  this.executeCharTest('𝘱', ['p en italique sans empattement']);
  this.executeCharTest('𝘲', ['q en italique sans empattement']);
  this.executeCharTest('𝘳', ['r en italique sans empattement']);
  this.executeCharTest('𝘴', ['s en italique sans empattement']);
  this.executeCharTest('𝘵', ['t en italique sans empattement']);
  this.executeCharTest('𝘶', ['u en italique sans empattement']);
  this.executeCharTest('𝘷', ['v en italique sans empattement']);
  this.executeCharTest('𝘸', ['w en italique sans empattement']);
  this.executeCharTest('𝘹', ['x en italique sans empattement']);
  this.executeCharTest('𝘺', ['y en italique sans empattement']);
  this.executeCharTest('𝘻', ['z en italique sans empattement']);
  this.executeCharTest('𝗔', ['A majuscule en gras sans empattement']);
  this.executeCharTest('𝗕', ['B majuscule en gras sans empattement']);
  this.executeCharTest('𝗖', ['C majuscule en gras sans empattement']);
  this.executeCharTest('𝗗', ['D majuscule en gras sans empattement']);
  this.executeCharTest('𝗘', ['E majuscule en gras sans empattement']);
  this.executeCharTest('𝗙', ['F majuscule en gras sans empattement']);
  this.executeCharTest('𝗚', ['G majuscule en gras sans empattement']);
  this.executeCharTest('𝗛', ['H majuscule en gras sans empattement']);
  this.executeCharTest('𝗜', ['I majuscule en gras sans empattement']);
  this.executeCharTest('𝗝', ['J majuscule en gras sans empattement']);
  this.executeCharTest('𝗞', ['K majuscule en gras sans empattement']);
  this.executeCharTest('𝗟', ['L majuscule en gras sans empattement']);
  this.executeCharTest('𝗠', ['M majuscule en gras sans empattement']);
  this.executeCharTest('𝗡', ['N majuscule en gras sans empattement']);
  this.executeCharTest('𝗢', ['O majuscule en gras sans empattement']);
  this.executeCharTest('𝗣', ['P majuscule en gras sans empattement']);
  this.executeCharTest('𝗤', ['Q majuscule en gras sans empattement']);
  this.executeCharTest('𝗥', ['R majuscule en gras sans empattement']);
  this.executeCharTest('𝗦', ['S majuscule en gras sans empattement']);
  this.executeCharTest('𝗧', ['T majuscule en gras sans empattement']);
  this.executeCharTest('𝗨', ['U majuscule en gras sans empattement']);
  this.executeCharTest('𝗩', ['V majuscule en gras sans empattement']);
  this.executeCharTest('𝗪', ['W majuscule en gras sans empattement']);
  this.executeCharTest('𝗫', ['X majuscule en gras sans empattement']);
  this.executeCharTest('𝗬', ['Y majuscule en gras sans empattement']);
  this.executeCharTest('𝗭', ['Z majuscule en gras sans empattement']);
  this.executeCharTest('𝗮', ['a en gras sans empattement']);
  this.executeCharTest('𝗯', ['b en gras sans empattement']);
  this.executeCharTest('𝗰', ['c en gras sans empattement']);
  this.executeCharTest('𝗱', ['d en gras sans empattement']);
  this.executeCharTest('𝗲', ['e en gras sans empattement']);
  this.executeCharTest('𝗳', ['f en gras sans empattement']);
  this.executeCharTest('𝗴', ['g en gras sans empattement']);
  this.executeCharTest('𝗵', ['h en gras sans empattement']);
  this.executeCharTest('𝗶', ['i en gras sans empattement']);
  this.executeCharTest('𝗷', ['j en gras sans empattement']);
  this.executeCharTest('𝗸', ['k en gras sans empattement']);
  this.executeCharTest('𝗹', ['l en gras sans empattement']);
  this.executeCharTest('𝗺', ['m en gras sans empattement']);
  this.executeCharTest('𝗻', ['n en gras sans empattement']);
  this.executeCharTest('𝗼', ['o en gras sans empattement']);
  this.executeCharTest('𝗽', ['p en gras sans empattement']);
  this.executeCharTest('𝗾', ['q en gras sans empattement']);
  this.executeCharTest('𝗿', ['r en gras sans empattement']);
  this.executeCharTest('𝘀', ['s en gras sans empattement']);
  this.executeCharTest('𝘁', ['t en gras sans empattement']);
  this.executeCharTest('𝘂', ['u en gras sans empattement']);
  this.executeCharTest('𝘃', ['v en gras sans empattement']);
  this.executeCharTest('𝘄', ['w en gras sans empattement']);
  this.executeCharTest('𝘅', ['x en gras sans empattement']);
  this.executeCharTest('𝘆', ['y en gras sans empattement']);
  this.executeCharTest('𝘇', ['z en gras sans empattement']);
  this.executeCharTest('𝘼', ['A majuscule en italique gras sans empattement']);
  this.executeCharTest('𝘽', ['B majuscule en italique gras sans empattement']);
  this.executeCharTest('𝘾', ['C majuscule en italique gras sans empattement']);
  this.executeCharTest('𝘿', ['D majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙀', ['E majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙁', ['F majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙂', ['G majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙃', ['H majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙄', ['I majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙅', ['J majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙆', ['K majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙇', ['L majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙈', ['M majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙉', ['N majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙊', ['O majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙋', ['P majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙌', ['Q majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙍', ['R majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙎', ['S majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙏', ['T majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙐', ['U majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙑', ['V majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙒', ['W majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙓', ['X majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙔', ['Y majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙕', ['Z majuscule en italique gras sans empattement']);
  this.executeCharTest('𝙖', ['a en italique gras sans empattement']);
  this.executeCharTest('𝙗', ['b en italique gras sans empattement']);
  this.executeCharTest('𝙘', ['c en italique gras sans empattement']);
  this.executeCharTest('𝙙', ['d en italique gras sans empattement']);
  this.executeCharTest('𝙚', ['e en italique gras sans empattement']);
  this.executeCharTest('𝙛', ['f en italique gras sans empattement']);
  this.executeCharTest('𝙜', ['g en italique gras sans empattement']);
  this.executeCharTest('𝙝', ['h en italique gras sans empattement']);
  this.executeCharTest('𝙞', ['i en italique gras sans empattement']);
  this.executeCharTest('𝙟', ['j en italique gras sans empattement']);
  this.executeCharTest('𝙠', ['k en italique gras sans empattement']);
  this.executeCharTest('𝙡', ['l en italique gras sans empattement']);
  this.executeCharTest('𝙢', ['m en italique gras sans empattement']);
  this.executeCharTest('𝙣', ['n en italique gras sans empattement']);
  this.executeCharTest('𝙤', ['o en italique gras sans empattement']);
  this.executeCharTest('𝙥', ['p en italique gras sans empattement']);
  this.executeCharTest('𝙦', ['q en italique gras sans empattement']);
  this.executeCharTest('𝙧', ['r en italique gras sans empattement']);
  this.executeCharTest('𝙨', ['s en italique gras sans empattement']);
  this.executeCharTest('𝙩', ['t en italique gras sans empattement']);
  this.executeCharTest('𝙪', ['u en italique gras sans empattement']);
  this.executeCharTest('𝙫', ['v en italique gras sans empattement']);
  this.executeCharTest('𝙬', ['w en italique gras sans empattement']);
  this.executeCharTest('𝙭', ['x en italique gras sans empattement']);
  this.executeCharTest('𝙮', ['y en italique gras sans empattement']);
  this.executeCharTest('𝙯', ['z en italique gras sans empattement']);
  this.executeCharTest('Α', ['Alpha majuscule']);
  this.executeCharTest('Β', ['Bêta majuscule']);
  this.executeCharTest('Γ', ['Gamma majuscule']);
  this.executeCharTest('Δ', ['Delta majuscule']);
  this.executeCharTest('Ε', ['Epsilon majuscule']);
  this.executeCharTest('Ζ', ['Zêta majuscule']);
  this.executeCharTest('Η', ['Êta majuscule']);
  this.executeCharTest('Θ', ['Thêta majuscule']);
  this.executeCharTest('Ι', ['Iota majuscule']);
  this.executeCharTest('Κ', ['Kappa majuscule']);
  this.executeCharTest('Λ', ['Lambda majuscule']);
  this.executeCharTest('Μ', ['Mû majuscule']);
  this.executeCharTest('Ν', ['Nû majuscule']);
  this.executeCharTest('Ξ', ['Xi majuscule']);
  this.executeCharTest('Ο', ['Omicron majuscule']);
  this.executeCharTest('Π', ['Pi majuscule']);
  this.executeCharTest('Ρ', ['Rhô majuscule']);
  this.executeCharTest('ϴ', ['Thêta majuscule']);
  this.executeCharTest('Σ', ['Sigma majuscule']);
  this.executeCharTest('Τ', ['Tau majuscule']);
  this.executeCharTest('Υ', ['Upsilon majuscule']);
  this.executeCharTest('Φ', ['Phi majuscule']);
  this.executeCharTest('Χ', ['Chi majuscule']);
  this.executeCharTest('Ψ', ['Psi majuscule']);
  this.executeCharTest('Ω', ['Oméga majuscule']);
  this.executeCharTest('∇', ['nabla']);
  this.executeCharTest('α', ['alpha']);
  this.executeCharTest('β', ['bêta']);
  this.executeCharTest('γ', ['gamma']);
  this.executeCharTest('δ', ['delta']);
  this.executeCharTest('ε', ['epsilon']);
  this.executeCharTest('ζ', ['zêta']);
  this.executeCharTest('η', ['êta']);
  this.executeCharTest('θ', ['thêta']);
  this.executeCharTest('ι', ['iota']);
  this.executeCharTest('κ', ['kappa']);
  this.executeCharTest('λ', ['lambda']);
  this.executeCharTest('μ', ['mû']);
  this.executeCharTest('ν', ['nû']);
  this.executeCharTest('ξ', ['xi']);
  this.executeCharTest('ο', ['omicron']);
  this.executeCharTest('π', ['pi']);
  this.executeCharTest('ρ', ['rhô']);
  this.executeCharTest('ς', ['sigma final']);
  this.executeCharTest('σ', ['sigma']);
  this.executeCharTest('τ', ['tau']);
  this.executeCharTest('υ', ['upsilon']);
  this.executeCharTest('φ', ['phi']);
  this.executeCharTest('χ', ['chi']);
  this.executeCharTest('ψ', ['psi']);
  this.executeCharTest('ω', ['oméga']);
  this.executeCharTest('∂', ['dérivée partielle']);
  this.executeCharTest('ϵ', ['epsilon']);
  this.executeCharTest('ϑ', ['thêta']);
  this.executeCharTest('ϰ', ['kappa']);
  this.executeCharTest('ϕ', ['phi']);
  this.executeCharTest('ϱ', ['rhô']);
  this.executeCharTest('ϖ', ['pi']);
  this.executeCharTest('𝚨', ['Alpha majuscule en gras']);
  this.executeCharTest('𝚩', ['Bêta majuscule en gras']);
  this.executeCharTest('𝚪', ['Gamma majuscule en gras']);
  this.executeCharTest('𝚫', ['Delta majuscule en gras']);
  this.executeCharTest('𝚬', ['Epsilon majuscule en gras']);
  this.executeCharTest('𝚭', ['Zêta majuscule en gras']);
  this.executeCharTest('𝚮', ['Êta majuscule en gras']);
  this.executeCharTest('𝚯', ['Thêta majuscule en gras']);
  this.executeCharTest('𝚰', ['Iota majuscule en gras']);
  this.executeCharTest('𝚱', ['Kappa majuscule en gras']);
  this.executeCharTest('𝚲', ['Lambda majuscule en gras']);
  this.executeCharTest('𝚳', ['Mû majuscule en gras']);
  this.executeCharTest('𝚴', ['Nû majuscule en gras']);
  this.executeCharTest('𝚵', ['Xi majuscule en gras']);
  this.executeCharTest('𝚶', ['Omicron majuscule en gras']);
  this.executeCharTest('𝚷', ['Pi majuscule en gras']);
  this.executeCharTest('𝚸', ['Rhô majuscule en gras']);
  this.executeCharTest('𝚹', ['Thêta majuscule en gras']);
  this.executeCharTest('𝚺', ['Sigma majuscule en gras']);
  this.executeCharTest('𝚻', ['Tau majuscule en gras']);
  this.executeCharTest('𝚼', ['Upsilon majuscule en gras']);
  this.executeCharTest('𝚽', ['Phi majuscule en gras']);
  this.executeCharTest('𝚾', ['Chi majuscule en gras']);
  this.executeCharTest('𝚿', ['Psi majuscule en gras']);
  this.executeCharTest('𝛀', ['Oméga majuscule en gras']);
  this.executeCharTest('𝛁', ['nabla en gras']);
  this.executeCharTest('𝛂', ['alpha en gras']);
  this.executeCharTest('𝛃', ['bêta en gras']);
  this.executeCharTest('𝛄', ['gamma en gras']);
  this.executeCharTest('𝛅', ['delta en gras']);
  this.executeCharTest('𝛆', ['epsilon en gras']);
  this.executeCharTest('𝛇', ['zêta en gras']);
  this.executeCharTest('𝛈', ['êta en gras']);
  this.executeCharTest('𝛉', ['thêta en gras']);
  this.executeCharTest('𝛊', ['iota en gras']);
  this.executeCharTest('𝛋', ['kappa en gras']);
  this.executeCharTest('𝛌', ['lambda en gras']);
  this.executeCharTest('𝛍', ['mû en gras']);
  this.executeCharTest('𝛎', ['nû en gras']);
  this.executeCharTest('𝛏', ['xi en gras']);
  this.executeCharTest('𝛐', ['omicron en gras']);
  this.executeCharTest('𝛑', ['pi en gras']);
  this.executeCharTest('𝛒', ['rhô en gras']);
  this.executeCharTest('𝛓', ['sigma final en gras']);
  this.executeCharTest('𝛔', ['sigma en gras']);
  this.executeCharTest('𝛕', ['tau en gras']);
  this.executeCharTest('𝛖', ['upsilon en gras']);
  this.executeCharTest('𝛗', ['phi en gras']);
  this.executeCharTest('𝛘', ['chi en gras']);
  this.executeCharTest('𝛙', ['psi en gras']);
  this.executeCharTest('𝛚', ['oméga en gras']);
  this.executeCharTest('𝛛', ['dérivée partielle en gras']);
  this.executeCharTest('𝛜', ['epsilon en gras']);
  this.executeCharTest('𝛝', ['thêta en gras']);
  this.executeCharTest('𝛞', ['kappa en gras']);
  this.executeCharTest('𝛟', ['phi en gras']);
  this.executeCharTest('𝛠', ['rhô en gras']);
  this.executeCharTest('𝛡', ['pi en gras']);
  this.executeCharTest('𝛢', ['Alpha majuscule en italique']);
  this.executeCharTest('𝛣', ['Bêta majuscule en italique']);
  this.executeCharTest('𝛤', ['Gamma majuscule en italique']);
  this.executeCharTest('𝛥', ['Delta majuscule en italique']);
  this.executeCharTest('𝛦', ['Epsilon majuscule en italique']);
  this.executeCharTest('𝛧', ['Zêta majuscule en italique']);
  this.executeCharTest('𝛨', ['Êta majuscule en italique']);
  this.executeCharTest('𝛩', ['Thêta majuscule en italique']);
  this.executeCharTest('𝛪', ['Iota majuscule en italique']);
  this.executeCharTest('𝛫', ['Kappa majuscule en italique']);
  this.executeCharTest('𝛬', ['Lambda majuscule en italique']);
  this.executeCharTest('𝛭', ['Mû majuscule en italique']);
  this.executeCharTest('𝛮', ['Nû majuscule en italique']);
  this.executeCharTest('𝛯', ['Xi majuscule en italique']);
  this.executeCharTest('𝛰', ['Omicron majuscule en italique']);
  this.executeCharTest('𝛱', ['Pi majuscule en italique']);
  this.executeCharTest('𝛲', ['Rhô majuscule en italique']);
  this.executeCharTest('𝛳', ['Thêta majuscule en italique']);
  this.executeCharTest('𝛴', ['Sigma majuscule en italique']);
  this.executeCharTest('𝛵', ['Tau majuscule en italique']);
  this.executeCharTest('𝛶', ['Upsilon majuscule en italique']);
  this.executeCharTest('𝛷', ['Phi majuscule en italique']);
  this.executeCharTest('𝛸', ['Chi majuscule en italique']);
  this.executeCharTest('𝛹', ['Psi majuscule en italique']);
  this.executeCharTest('𝛺', ['Oméga majuscule en italique']);
  this.executeCharTest('𝛻', ['nabla en italique']);
  this.executeCharTest('𝛼', ['alpha en italique']);
  this.executeCharTest('𝛽', ['bêta en italique']);
  this.executeCharTest('𝛾', ['gamma en italique']);
  this.executeCharTest('𝛿', ['delta en italique']);
  this.executeCharTest('𝜀', ['epsilon en italique']);
  this.executeCharTest('𝜁', ['zêta en italique']);
  this.executeCharTest('𝜂', ['êta en italique']);
  this.executeCharTest('𝜃', ['thêta en italique']);
  this.executeCharTest('𝜄', ['iota en italique']);
  this.executeCharTest('𝜅', ['kappa en italique']);
  this.executeCharTest('𝜆', ['lambda en italique']);
  this.executeCharTest('𝜇', ['mû en italique']);
  this.executeCharTest('𝜈', ['nû en italique']);
  this.executeCharTest('𝜉', ['xi en italique']);
  this.executeCharTest('𝜊', ['omicron en italique']);
  this.executeCharTest('𝜋', ['pi en italique']);
  this.executeCharTest('𝜌', ['rhô en italique']);
  this.executeCharTest('𝜍', ['sigma final en italique']);
  this.executeCharTest('𝜎', ['sigma en italique']);
  this.executeCharTest('𝜏', ['tau en italique']);
  this.executeCharTest('𝜐', ['upsilon en italique']);
  this.executeCharTest('𝜑', ['phi en italique']);
  this.executeCharTest('𝜒', ['chi en italique']);
  this.executeCharTest('𝜓', ['psi en italique']);
  this.executeCharTest('𝜔', ['oméga en italique']);
  this.executeCharTest('𝜕', ['dérivée partielle en italique']);
  this.executeCharTest('𝜖', ['epsilon en italique']);
  this.executeCharTest('𝜗', ['thêta en italique']);
  this.executeCharTest('𝜘', ['kappa en italique']);
  this.executeCharTest('𝜙', ['phi en italique']);
  this.executeCharTest('𝜚', ['rhô en italique']);
  this.executeCharTest('𝜛', ['pi en italique']);
  this.executeCharTest('𝜜', ['Alpha majuscule en italique gras']);
  this.executeCharTest('𝜝', ['Bêta majuscule en italique gras']);
  this.executeCharTest('𝜞', ['Gamma majuscule en italique gras']);
  this.executeCharTest('𝜟', ['Delta majuscule en italique gras']);
  this.executeCharTest('𝜠', ['Epsilon majuscule en italique gras']);
  this.executeCharTest('𝜡', ['Zêta majuscule en italique gras']);
  this.executeCharTest('𝜢', ['Êta majuscule en italique gras']);
  this.executeCharTest('𝜣', ['Thêta majuscule en italique gras']);
  this.executeCharTest('𝜤', ['Iota majuscule en italique gras']);
  this.executeCharTest('𝜥', ['Kappa majuscule en italique gras']);
  this.executeCharTest('𝜦', ['Lambda majuscule en italique gras']);
  this.executeCharTest('𝜧', ['Mû majuscule en italique gras']);
  this.executeCharTest('𝜨', ['Nû majuscule en italique gras']);
  this.executeCharTest('𝜩', ['Xi majuscule en italique gras']);
  this.executeCharTest('𝜪', ['Omicron majuscule en italique gras']);
  this.executeCharTest('𝜫', ['Pi majuscule en italique gras']);
  this.executeCharTest('𝜬', ['Rhô majuscule en italique gras']);
  this.executeCharTest('𝜭', ['Thêta majuscule en italique gras']);
  this.executeCharTest('𝜮', ['Sigma majuscule en italique gras']);
  this.executeCharTest('𝜯', ['Tau majuscule en italique gras']);
  this.executeCharTest('𝜰', ['Upsilon majuscule en italique gras']);
  this.executeCharTest('𝜱', ['Phi majuscule en italique gras']);
  this.executeCharTest('𝜲', ['Chi majuscule en italique gras']);
  this.executeCharTest('𝜳', ['Psi majuscule en italique gras']);
  this.executeCharTest('𝜴', ['Oméga majuscule en italique gras']);
  this.executeCharTest('𝜵', ['nabla en italique gras']);
  this.executeCharTest('𝜶', ['alpha en italique gras']);
  this.executeCharTest('𝜷', ['bêta en italique gras']);
  this.executeCharTest('𝜸', ['gamma en italique gras']);
  this.executeCharTest('𝜹', ['delta en italique gras']);
  this.executeCharTest('𝜺', ['epsilon en italique gras']);
  this.executeCharTest('𝜻', ['zêta en italique gras']);
  this.executeCharTest('𝜼', ['êta en italique gras']);
  this.executeCharTest('𝜽', ['thêta en italique gras']);
  this.executeCharTest('𝜾', ['iota en italique gras']);
  this.executeCharTest('𝜿', ['kappa en italique gras']);
  this.executeCharTest('𝝀', ['lambda en italique gras']);
  this.executeCharTest('𝝁', ['mû en italique gras']);
  this.executeCharTest('𝝂', ['nû en italique gras']);
  this.executeCharTest('𝝃', ['xi en italique gras']);
  this.executeCharTest('𝝄', ['omicron en italique gras']);
  this.executeCharTest('𝝅', ['pi en italique gras']);
  this.executeCharTest('𝝆', ['rhô en italique gras']);
  this.executeCharTest('𝝇', ['sigma final en italique gras']);
  this.executeCharTest('𝝈', ['sigma en italique gras']);
  this.executeCharTest('𝝉', ['tau en italique gras']);
  this.executeCharTest('𝝊', ['upsilon en italique gras']);
  this.executeCharTest('𝝋', ['phi en italique gras']);
  this.executeCharTest('𝝌', ['chi en italique gras']);
  this.executeCharTest('𝝍', ['psi en italique gras']);
  this.executeCharTest('𝝎', ['oméga en italique gras']);
  this.executeCharTest('𝝏', ['dérivée partielle en italique gras']);
  this.executeCharTest('𝝐', ['epsilon en italique gras']);
  this.executeCharTest('𝝑', ['thêta en italique gras']);
  this.executeCharTest('𝝒', ['kappa en italique gras']);
  this.executeCharTest('𝝓', ['phi en italique gras']);
  this.executeCharTest('𝝔', ['rhô en italique gras']);
  this.executeCharTest('𝝕', ['pi en italique gras']);
  this.executeCharTest('𝝖', ['Alpha majuscule en gras sans empattement']);
  this.executeCharTest('𝝗', ['Bêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝘', ['Gamma majuscule en gras sans empattement']);
  this.executeCharTest('𝝙', ['Delta majuscule en gras sans empattement']);
  this.executeCharTest('𝝚', ['Epsilon majuscule en gras sans empattement']);
  this.executeCharTest('𝝛', ['Zêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝜', ['Êta majuscule en gras sans empattement']);
  this.executeCharTest('𝝝', ['Thêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝞', ['Iota majuscule en gras sans empattement']);
  this.executeCharTest('𝝟', ['Kappa majuscule en gras sans empattement']);
  this.executeCharTest('𝝠', ['Lambda majuscule en gras sans empattement']);
  this.executeCharTest('𝝡', ['Mû majuscule en gras sans empattement']);
  this.executeCharTest('𝝢', ['Nû majuscule en gras sans empattement']);
  this.executeCharTest('𝝣', ['Xi majuscule en gras sans empattement']);
  this.executeCharTest('𝝤', ['Omicron majuscule en gras sans empattement']);
  this.executeCharTest('𝝥', ['Pi majuscule en gras sans empattement']);
  this.executeCharTest('𝝦', ['Rhô majuscule en gras sans empattement']);
  this.executeCharTest('𝝧', ['Thêta majuscule en gras sans empattement']);
  this.executeCharTest('𝝨', ['Sigma majuscule en gras sans empattement']);
  this.executeCharTest('𝝩', ['Tau majuscule en gras sans empattement']);
  this.executeCharTest('𝝪', ['Upsilon majuscule en gras sans empattement']);
  this.executeCharTest('𝝫', ['Phi majuscule en gras sans empattement']);
  this.executeCharTest('𝝬', ['Chi majuscule en gras sans empattement']);
  this.executeCharTest('𝝭', ['Psi majuscule en gras sans empattement']);
  this.executeCharTest('𝝮', ['Oméga majuscule en gras sans empattement']);
  this.executeCharTest('𝝯', ['nabla en gras sans empattement']);
  this.executeCharTest('𝝰', ['alpha en gras sans empattement']);
  this.executeCharTest('𝝱', ['bêta en gras sans empattement']);
  this.executeCharTest('𝝲', ['gamma en gras sans empattement']);
  this.executeCharTest('𝝳', ['delta en gras sans empattement']);
  this.executeCharTest('𝝴', ['epsilon en gras sans empattement']);
  this.executeCharTest('𝝵', ['zêta en gras sans empattement']);
  this.executeCharTest('𝝶', ['êta en gras sans empattement']);
  this.executeCharTest('𝝷', ['thêta en gras sans empattement']);
  this.executeCharTest('𝝸', ['iota en gras sans empattement']);
  this.executeCharTest('𝝹', ['kappa en gras sans empattement']);
  this.executeCharTest('𝝺', ['lambda en gras sans empattement']);
  this.executeCharTest('𝝻', ['mû en gras sans empattement']);
  this.executeCharTest('𝝼', ['nû en gras sans empattement']);
  this.executeCharTest('𝝽', ['xi en gras sans empattement']);
  this.executeCharTest('𝝾', ['omicron en gras sans empattement']);
  this.executeCharTest('𝝿', ['pi en gras sans empattement']);
  this.executeCharTest('𝞀', ['rhô en gras sans empattement']);
  this.executeCharTest('𝞁', ['sigma final en gras sans empattement']);
  this.executeCharTest('𝞂', ['sigma en gras sans empattement']);
  this.executeCharTest('𝞃', ['tau en gras sans empattement']);
  this.executeCharTest('𝞄', ['upsilon en gras sans empattement']);
  this.executeCharTest('𝞅', ['phi en gras sans empattement']);
  this.executeCharTest('𝞆', ['chi en gras sans empattement']);
  this.executeCharTest('𝞇', ['psi en gras sans empattement']);
  this.executeCharTest('𝞈', ['oméga en gras sans empattement']);
  this.executeCharTest('𝞉', ['dérivée partielle en gras sans empattement']);
  this.executeCharTest('𝞊', ['epsilon en gras sans empattement']);
  this.executeCharTest('𝞋', ['thêta en gras sans empattement']);
  this.executeCharTest('𝞌', ['kappa en gras sans empattement']);
  this.executeCharTest('𝞍', ['phi en gras sans empattement']);
  this.executeCharTest('𝞎', ['rhô en gras sans empattement']);
  this.executeCharTest('𝞏', ['pi en gras sans empattement']);
  this.executeCharTest('𝞐', ['Alpha majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞑', ['Bêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞒', ['Gamma majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞓', ['Delta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞔', ['Epsilon majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞕', ['Zêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞖', ['Êta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞗', ['Thêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞘', ['Iota majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞙', ['Kappa majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞚', ['Lambda majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞛', ['Mû majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞜', ['Nû majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞝', ['Xi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞞', ['Omicron majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞟', ['Pi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞠', ['Rhô majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞡', ['Thêta majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞢', ['Sigma majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞣', ['Tau majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞤', ['Upsilon majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞥', ['Phi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞦', ['Chi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞧', ['Psi majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞨', ['Oméga majuscule en italique gras sans empattement']);
  this.executeCharTest('𝞩', ['nabla en italique gras sans empattement']);
  this.executeCharTest('𝞪', ['alpha en italique gras sans empattement']);
  this.executeCharTest('𝞫', ['bêta en italique gras sans empattement']);
  this.executeCharTest('𝞬', ['gamma en italique gras sans empattement']);
  this.executeCharTest('𝞭', ['delta en italique gras sans empattement']);
  this.executeCharTest('𝞮', ['epsilon en italique gras sans empattement']);
  this.executeCharTest('𝞯', ['zêta en italique gras sans empattement']);
  this.executeCharTest('𝞰', ['êta en italique gras sans empattement']);
  this.executeCharTest('𝞱', ['thêta en italique gras sans empattement']);
  this.executeCharTest('𝞲', ['iota en italique gras sans empattement']);
  this.executeCharTest('𝞳', ['kappa en italique gras sans empattement']);
  this.executeCharTest('𝞴', ['lambda en italique gras sans empattement']);
  this.executeCharTest('𝞵', ['mû en italique gras sans empattement']);
  this.executeCharTest('𝞶', ['nû en italique gras sans empattement']);
  this.executeCharTest('𝞷', ['xi en italique gras sans empattement']);
  this.executeCharTest('𝞸', ['omicron en italique gras sans empattement']);
  this.executeCharTest('𝞹', ['pi en italique gras sans empattement']);
  this.executeCharTest('𝞺', ['rhô en italique gras sans empattement']);
  this.executeCharTest('𝞻', ['sigma final en italique gras sans empattement']);
  this.executeCharTest('𝞼', ['sigma en italique gras sans empattement']);
  this.executeCharTest('𝞽', ['tau en italique gras sans empattement']);
  this.executeCharTest('𝞾', ['upsilon en italique gras sans empattement']);
  this.executeCharTest('𝞿', ['phi en italique gras sans empattement']);
  this.executeCharTest('𝟀', ['chi en italique gras sans empattement']);
  this.executeCharTest('𝟁', ['psi en italique gras sans empattement']);
  this.executeCharTest('𝟂', ['oméga en italique gras sans empattement']);
  this.executeCharTest('𝟃', ['dérivée partielle en italique gras sans empattement']);
  this.executeCharTest('𝟄', ['epsilon en italique gras sans empattement']);
  this.executeCharTest('𝟅', ['thêta en italique gras sans empattement']);
  this.executeCharTest('𝟆', ['kappa en italique gras sans empattement']);
  this.executeCharTest('𝟇', ['phi en italique gras sans empattement']);
  this.executeCharTest('𝟈', ['rhô en italique gras sans empattement']);
  this.executeCharTest('𝟉', ['pi en italique gras sans empattement']);
  this.executeCharTest('⁰', ['exposant zero']);
  this.executeCharTest('¹', ['exposant un']);
  this.executeCharTest('²', ['au carré']);
  this.executeCharTest('³', ['cubique']);
  this.executeCharTest('⁴', ['exposant quatre']);
  this.executeCharTest('⁵', ['exposant cinq']);
  this.executeCharTest('⁶', ['exposant six']);
  this.executeCharTest('⁷', ['exposant sept']);
  this.executeCharTest('⁸', ['exposant huit']);
  this.executeCharTest('⁹', ['exposant neuf']);
  this.executeCharTest('₀', ['indice zero']);
  this.executeCharTest('₁', ['indice un']);
  this.executeCharTest('₂', ['indice deux']);
  this.executeCharTest('₃', ['indice trois']);
  this.executeCharTest('₄', ['indice quatre']);
  this.executeCharTest('₅', ['indice cinq']);
  this.executeCharTest('₆', ['indice six']);
  this.executeCharTest('₇', ['indice sept']);
  this.executeCharTest('₈', ['indice huit']);
  this.executeCharTest('₉', ['indice neuf']);
  this.executeCharTest('⓪', ['zero encerclé']);
  this.executeCharTest('①', ['un encerclé']);
  this.executeCharTest('②', ['deux encerclé']);
  this.executeCharTest('③', ['trois encerclé']);
  this.executeCharTest('④', ['quatre encerclé']);
  this.executeCharTest('⑤', ['cinq encerclé']);
  this.executeCharTest('⑥', ['six encerclé']);
  this.executeCharTest('⑦', ['sept encerclé']);
  this.executeCharTest('⑧', ['huit encerclé']);
  this.executeCharTest('⑨', ['neuf encerclé']);
  this.executeCharTest('⑩', ['dix encerclé']);
  this.executeCharTest('⑪', ['onze encerclé']);
  this.executeCharTest('⑫', ['douze encerclé']);
  this.executeCharTest('⑬', ['treize encerclé']);
  this.executeCharTest('⑭', ['quatorze encerclé']);
  this.executeCharTest('⑮', ['quinze encerclé']);
  this.executeCharTest('⑯', ['seize encerclé']);
  this.executeCharTest('⑰', ['dix-sept encerclé']);
  this.executeCharTest('⑱', ['dix-huit encerclé']);
  this.executeCharTest('⑲', ['dix-neuf encerclé']);
  this.executeCharTest('⑳', ['vingt encerclé']);
  this.executeCharTest('㉑', ['vingt-et-un encerclé']);
  this.executeCharTest('㉒', ['vingt-deux encerclé']);
  this.executeCharTest('㉓', ['vingt-trois encerclé']);
  this.executeCharTest('㉔', ['vingt-quatre encerclé']);
  this.executeCharTest('㉕', ['vingt-cinq encerclé']);
  this.executeCharTest('㉖', ['vingt-six encerclé']);
  this.executeCharTest('㉗', ['vingt-sept encerclé']);
  this.executeCharTest('㉘', ['vingt-huit encerclé']);
  this.executeCharTest('㉙', ['vingt-neuf encerclé']);
  this.executeCharTest('㉚', ['trente encerclé']);
  this.executeCharTest('㉛', ['trente-et-un encerclé']);
  this.executeCharTest('㉜', ['trente-deux encerclé']);
  this.executeCharTest('㉝', ['trente-trois encerclé']);
  this.executeCharTest('㉞', ['trente-quatre encerclé']);
  this.executeCharTest('㉟', ['trente-cinq encerclé']);
  this.executeCharTest('㊱', ['trente-six encerclé']);
  this.executeCharTest('㊲', ['trente-sept encerclé']);
  this.executeCharTest('㊳', ['trente-huit encerclé']);
  this.executeCharTest('㊴', ['trente-neuf encerclé']);
  this.executeCharTest('㊵', ['quarante encerclé']);
  this.executeCharTest('㊶', ['quarante-et-un encerclé']);
  this.executeCharTest('㊷', ['quarante-deux encerclé']);
  this.executeCharTest('㊸', ['quarante-trois encerclé']);
  this.executeCharTest('㊹', ['quarante-quatre encerclé']);
  this.executeCharTest('㊺', ['quarante-cinq encerclé']);
  this.executeCharTest('㊻', ['quarante-six encerclé']);
  this.executeCharTest('㊼', ['quarante-sept encerclé']);
  this.executeCharTest('㊽', ['quarante-huit encerclé']);
  this.executeCharTest('㊾', ['quarante-neuf encerclé']);
  this.executeCharTest('㊿', ['cinquante encerclé']);
  this.executeCharTest('⑴', ['un entre parenthèses']);
  this.executeCharTest('⑵', ['deux entre parenthèses']);
  this.executeCharTest('⑶', ['trois entre parenthèses']);
  this.executeCharTest('⑷', ['quatre entre parenthèses']);
  this.executeCharTest('⑸', ['cinq entre parenthèses']);
  this.executeCharTest('⑹', ['six entre parenthèses']);
  this.executeCharTest('⑺', ['sept entre parenthèses']);
  this.executeCharTest('⑻', ['huit entre parenthèses']);
  this.executeCharTest('⑼', ['neuf entre parenthèses']);
  this.executeCharTest('⑽', ['dix entre parenthèses']);
  this.executeCharTest('⑾', ['onze entre parenthèses']);
  this.executeCharTest('⑿', ['douze entre parenthèses']);
  this.executeCharTest('⒀', ['treize entre parenthèses']);
  this.executeCharTest('⒁', ['quatorze entre parenthèses']);
  this.executeCharTest('⒂', ['quinze entre parenthèses']);
  this.executeCharTest('⒃', ['seize entre parenthèses']);
  this.executeCharTest('⒄', ['dix-sept entre parenthèses']);
  this.executeCharTest('⒅', ['dix-huit entre parenthèses']);
  this.executeCharTest('⒆', ['dix-neuf entre parenthèses']);
  this.executeCharTest('⒇', ['vingt entre parenthèses']);
  this.executeCharTest('🄀', ['zero un point']);
  this.executeCharTest('⒈', ['un un point']);
  this.executeCharTest('⒉', ['deux un point']);
  this.executeCharTest('⒊', ['trois un point']);
  this.executeCharTest('⒋', ['quatre un point']);
  this.executeCharTest('⒌', ['cinq un point']);
  this.executeCharTest('⒍', ['six un point']);
  this.executeCharTest('⒎', ['sept un point']);
  this.executeCharTest('⒏', ['huit un point']);
  this.executeCharTest('⒐', ['neuf un point']);
  this.executeCharTest('⒑', ['dix un point']);
  this.executeCharTest('⒒', ['onze un point']);
  this.executeCharTest('⒓', ['douze un point']);
  this.executeCharTest('⒔', ['treize un point']);
  this.executeCharTest('⒕', ['quatorze un point']);
  this.executeCharTest('⒖', ['quinze un point']);
  this.executeCharTest('⒗', ['seize un point']);
  this.executeCharTest('⒘', ['dix-sept un point']);
  this.executeCharTest('⒙', ['dix-huit un point']);
  this.executeCharTest('⒚', ['dix-neuf un point']);
  this.executeCharTest('⒛', ['vingt un point']);
  this.executeCharTest('⓿', ['zero encerclé noir']);
  this.executeCharTest('❶', ['un encerclé noir']);
  this.executeCharTest('❷', ['deux encerclé noir']);
  this.executeCharTest('❸', ['trois encerclé noir']);
  this.executeCharTest('❹', ['quatre encerclé noir']);
  this.executeCharTest('❺', ['cinq encerclé noir']);
  this.executeCharTest('❻', ['six encerclé noir']);
  this.executeCharTest('❼', ['sept encerclé noir']);
  this.executeCharTest('❽', ['huit encerclé noir']);
  this.executeCharTest('❾', ['neuf encerclé noir']);
  this.executeCharTest('❿', ['dix encerclé noir']);
  this.executeCharTest('⓫', ['onze encerclé noir']);
  this.executeCharTest('⓬', ['douze encerclé noir']);
  this.executeCharTest('⓭', ['treize encerclé noir']);
  this.executeCharTest('⓮', ['quatorze encerclé noir']);
  this.executeCharTest('⓯', ['quinze encerclé noir']);
  this.executeCharTest('⓰', ['seize encerclé noir']);
  this.executeCharTest('⓱', ['dix-sept encerclé noir']);
  this.executeCharTest('⓲', ['dix-huit encerclé noir']);
  this.executeCharTest('⓳', ['dix-neuf encerclé noir']);
  this.executeCharTest('⓴', ['vingt encerclé noir']);
  this.executeCharTest('⓵', ['un encerclé double']);
  this.executeCharTest('⓶', ['deux encerclé double']);
  this.executeCharTest('⓷', ['trois encerclé double']);
  this.executeCharTest('⓸', ['quatre encerclé double']);
  this.executeCharTest('⓹', ['cinq encerclé double']);
  this.executeCharTest('⓺', ['six encerclé double']);
  this.executeCharTest('⓻', ['sept encerclé double']);
  this.executeCharTest('⓼', ['huit encerclé double']);
  this.executeCharTest('⓽', ['neuf encerclé double']);
  this.executeCharTest('⓾', ['dix encerclé double']);
  this.executeCharTest('🄋', ['zero sans empattement encerclé']);
  this.executeCharTest('➀', ['un sans empattement encerclé']);
  this.executeCharTest('➁', ['deux sans empattement encerclé']);
  this.executeCharTest('➂', ['trois sans empattement encerclé']);
  this.executeCharTest('➃', ['quatre sans empattement encerclé']);
  this.executeCharTest('➄', ['cinq sans empattement encerclé']);
  this.executeCharTest('➅', ['six sans empattement encerclé']);
  this.executeCharTest('➆', ['sept sans empattement encerclé']);
  this.executeCharTest('➇', ['huit sans empattement encerclé']);
  this.executeCharTest('➈', ['neuf sans empattement encerclé']);
  this.executeCharTest('➉', ['dix sans empattement encerclé']);
  this.executeCharTest('🄌', ['zero sans empattement encerclé noir']);
  this.executeCharTest('➊', ['un sans empattement encerclé noir']);
  this.executeCharTest('➋', ['deux sans empattement encerclé noir']);
  this.executeCharTest('➌', ['trois sans empattement encerclé noir']);
  this.executeCharTest('➍', ['quatre sans empattement encerclé noir']);
  this.executeCharTest('➎', ['cinq sans empattement encerclé noir']);
  this.executeCharTest('➏', ['six sans empattement encerclé noir']);
  this.executeCharTest('➐', ['sept sans empattement encerclé noir']);
  this.executeCharTest('➑', ['huit sans empattement encerclé noir']);
  this.executeCharTest('➒', ['neuf sans empattement encerclé noir']);
  this.executeCharTest('➓', ['dix sans empattement encerclé noir']);
  this.executeCharTest('０', ['zero']);
  this.executeCharTest('１', ['un']);
  this.executeCharTest('２', ['deux']);
  this.executeCharTest('３', ['trois']);
  this.executeCharTest('４', ['quatre']);
  this.executeCharTest('５', ['cinq']);
  this.executeCharTest('６', ['six']);
  this.executeCharTest('７', ['sept']);
  this.executeCharTest('８', ['huit']);
  this.executeCharTest('９', ['neuf']);
  this.executeCharTest('𝟎', ['zero en gras']);
  this.executeCharTest('𝟏', ['un en gras']);
  this.executeCharTest('𝟐', ['deux en gras']);
  this.executeCharTest('𝟑', ['trois en gras']);
  this.executeCharTest('𝟒', ['quatre en gras']);
  this.executeCharTest('𝟓', ['cinq en gras']);
  this.executeCharTest('𝟔', ['six en gras']);
  this.executeCharTest('𝟕', ['sept en gras']);
  this.executeCharTest('𝟖', ['huit en gras']);
  this.executeCharTest('𝟗', ['neuf en gras']);
  this.executeCharTest('𝟘', ['zero ajouré']);
  this.executeCharTest('𝟙', ['un ajouré']);
  this.executeCharTest('𝟚', ['deux ajouré']);
  this.executeCharTest('𝟛', ['trois ajouré']);
  this.executeCharTest('𝟜', ['quatre ajouré']);
  this.executeCharTest('𝟝', ['cinq ajouré']);
  this.executeCharTest('𝟞', ['six ajouré']);
  this.executeCharTest('𝟟', ['sept ajouré']);
  this.executeCharTest('𝟠', ['huit ajouré']);
  this.executeCharTest('𝟡', ['neuf ajouré']);
  this.executeCharTest('𝟢', ['zero sans empattement']);
  this.executeCharTest('𝟣', ['un sans empattement']);
  this.executeCharTest('𝟤', ['deux sans empattement']);
  this.executeCharTest('𝟥', ['trois sans empattement']);
  this.executeCharTest('𝟦', ['quatre sans empattement']);
  this.executeCharTest('𝟧', ['cinq sans empattement']);
  this.executeCharTest('𝟨', ['six sans empattement']);
  this.executeCharTest('𝟩', ['sept sans empattement']);
  this.executeCharTest('𝟪', ['huit sans empattement']);
  this.executeCharTest('𝟫', ['neuf sans empattement']);
  this.executeCharTest('𝟬', ['zero en gras sans empattement']);
  this.executeCharTest('𝟭', ['un en gras sans empattement']);
  this.executeCharTest('𝟮', ['deux en gras sans empattement']);
  this.executeCharTest('𝟯', ['trois en gras sans empattement']);
  this.executeCharTest('𝟰', ['quatre en gras sans empattement']);
  this.executeCharTest('𝟱', ['cinq en gras sans empattement']);
  this.executeCharTest('𝟲', ['six en gras sans empattement']);
  this.executeCharTest('𝟳', ['sept en gras sans empattement']);
  this.executeCharTest('𝟴', ['huit en gras sans empattement']);
  this.executeCharTest('𝟵', ['neuf en gras sans empattement']);
  this.executeCharTest('𝟶', ['zero en chasse fixe']);
  this.executeCharTest('𝟷', ['un en chasse fixe']);
  this.executeCharTest('𝟸', ['deux en chasse fixe']);
  this.executeCharTest('𝟹', ['trois en chasse fixe']);
  this.executeCharTest('𝟺', ['quatre en chasse fixe']);
  this.executeCharTest('𝟻', ['cinq en chasse fixe']);
  this.executeCharTest('𝟼', ['six en chasse fixe']);
  this.executeCharTest('𝟽', ['sept en chasse fixe']);
  this.executeCharTest('𝟾', ['huit en chasse fixe']);
  this.executeCharTest('𝟿', ['neuf en chasse fixe']);
  this.executeCharTest('🄁', ['zero virgule']);
  this.executeCharTest('🄂', ['un virgule']);
  this.executeCharTest('🄃', ['deux virgule']);
  this.executeCharTest('🄄', ['trois virgule']);
  this.executeCharTest('🄅', ['quatre virgule']);
  this.executeCharTest('🄆', ['cinq virgule']);
  this.executeCharTest('🄇', ['six virgule']);
  this.executeCharTest('🄈', ['sept virgule']);
  this.executeCharTest('🄉', ['huit virgule']);
  this.executeCharTest('🄊', ['neuf virgule']);
  this.executeCharTest('Ⓐ', ['A majuscule encerclé']);
  this.executeCharTest('Ⓑ', ['B majuscule encerclé']);
  this.executeCharTest('Ⓒ', ['C majuscule encerclé']);
  this.executeCharTest('Ⓓ', ['D majuscule encerclé']);
  this.executeCharTest('Ⓔ', ['E majuscule encerclé']);
  this.executeCharTest('Ⓕ', ['F majuscule encerclé']);
  this.executeCharTest('Ⓖ', ['G majuscule encerclé']);
  this.executeCharTest('Ⓗ', ['H majuscule encerclé']);
  this.executeCharTest('Ⓘ', ['I majuscule encerclé']);
  this.executeCharTest('Ⓙ', ['J majuscule encerclé']);
  this.executeCharTest('Ⓚ', ['K majuscule encerclé']);
  this.executeCharTest('Ⓛ', ['L majuscule encerclé']);
  this.executeCharTest('Ⓜ', ['M majuscule encerclé']);
  this.executeCharTest('Ⓝ', ['N majuscule encerclé']);
  this.executeCharTest('Ⓞ', ['O majuscule encerclé']);
  this.executeCharTest('Ⓟ', ['P majuscule encerclé']);
  this.executeCharTest('Ⓠ', ['Q majuscule encerclé']);
  this.executeCharTest('Ⓡ', ['R majuscule encerclé']);
  this.executeCharTest('Ⓢ', ['S majuscule encerclé']);
  this.executeCharTest('Ⓣ', ['T majuscule encerclé']);
  this.executeCharTest('Ⓤ', ['U majuscule encerclé']);
  this.executeCharTest('Ⓥ', ['V majuscule encerclé']);
  this.executeCharTest('Ⓦ', ['W majuscule encerclé']);
  this.executeCharTest('Ⓧ', ['X majuscule encerclé']);
  this.executeCharTest('Ⓨ', ['Y majuscule encerclé']);
  this.executeCharTest('Ⓩ', ['Z majuscule encerclé']);
  this.executeCharTest('ⓐ', ['a encerclé']);
  this.executeCharTest('ⓑ', ['b encerclé']);
  this.executeCharTest('ⓒ', ['c encerclé']);
  this.executeCharTest('ⓓ', ['d encerclé']);
  this.executeCharTest('ⓔ', ['e encerclé']);
  this.executeCharTest('ⓕ', ['f encerclé']);
  this.executeCharTest('ⓖ', ['g encerclé']);
  this.executeCharTest('ⓗ', ['h encerclé']);
  this.executeCharTest('ⓘ', ['i encerclé']);
  this.executeCharTest('ⓙ', ['j encerclé']);
  this.executeCharTest('ⓚ', ['k encerclé']);
  this.executeCharTest('ⓛ', ['l encerclé']);
  this.executeCharTest('ⓜ', ['m encerclé']);
  this.executeCharTest('ⓝ', ['n encerclé']);
  this.executeCharTest('ⓞ', ['o encerclé']);
  this.executeCharTest('ⓟ', ['p encerclé']);
  this.executeCharTest('ⓠ', ['q encerclé']);
  this.executeCharTest('ⓡ', ['r encerclé']);
  this.executeCharTest('ⓢ', ['s encerclé']);
  this.executeCharTest('ⓣ', ['t encerclé']);
  this.executeCharTest('ⓤ', ['u encerclé']);
  this.executeCharTest('ⓥ', ['v encerclé']);
  this.executeCharTest('ⓦ', ['w encerclé']);
  this.executeCharTest('ⓧ', ['x encerclé']);
  this.executeCharTest('ⓨ', ['y encerclé']);
  this.executeCharTest('ⓩ', ['z encerclé']);
  this.executeCharTest('🄐', ['A majuscule entre parenthèses']);
  this.executeCharTest('🄑', ['B majuscule entre parenthèses']);
  this.executeCharTest('🄒', ['C majuscule entre parenthèses']);
  this.executeCharTest('🄓', ['D majuscule entre parenthèses']);
  this.executeCharTest('🄔', ['E majuscule entre parenthèses']);
  this.executeCharTest('🄕', ['F majuscule entre parenthèses']);
  this.executeCharTest('🄖', ['G majuscule entre parenthèses']);
  this.executeCharTest('🄗', ['H majuscule entre parenthèses']);
  this.executeCharTest('🄘', ['I majuscule entre parenthèses']);
  this.executeCharTest('🄙', ['J majuscule entre parenthèses']);
  this.executeCharTest('🄚', ['K majuscule entre parenthèses']);
  this.executeCharTest('🄛', ['L majuscule entre parenthèses']);
  this.executeCharTest('🄜', ['M majuscule entre parenthèses']);
  this.executeCharTest('🄝', ['N majuscule entre parenthèses']);
  this.executeCharTest('🄞', ['O majuscule entre parenthèses']);
  this.executeCharTest('🄟', ['P majuscule entre parenthèses']);
  this.executeCharTest('🄠', ['Q majuscule entre parenthèses']);
  this.executeCharTest('🄡', ['R majuscule entre parenthèses']);
  this.executeCharTest('🄢', ['S majuscule entre parenthèses']);
  this.executeCharTest('🄣', ['T majuscule entre parenthèses']);
  this.executeCharTest('🄤', ['U majuscule entre parenthèses']);
  this.executeCharTest('🄥', ['V majuscule entre parenthèses']);
  this.executeCharTest('🄦', ['W majuscule entre parenthèses']);
  this.executeCharTest('🄧', ['X majuscule entre parenthèses']);
  this.executeCharTest('🄨', ['Y majuscule entre parenthèses']);
  this.executeCharTest('🄩', ['Z majuscule entre parenthèses']);
  this.executeCharTest('⒜', ['a entre parenthèses']);
  this.executeCharTest('⒝', ['b entre parenthèses']);
  this.executeCharTest('⒞', ['c entre parenthèses']);
  this.executeCharTest('⒟', ['d entre parenthèses']);
  this.executeCharTest('⒠', ['e entre parenthèses']);
  this.executeCharTest('⒡', ['f entre parenthèses']);
  this.executeCharTest('⒢', ['g entre parenthèses']);
  this.executeCharTest('⒣', ['h entre parenthèses']);
  this.executeCharTest('⒤', ['i entre parenthèses']);
  this.executeCharTest('⒥', ['j entre parenthèses']);
  this.executeCharTest('⒦', ['k entre parenthèses']);
  this.executeCharTest('⒧', ['l entre parenthèses']);
  this.executeCharTest('⒨', ['m entre parenthèses']);
  this.executeCharTest('⒩', ['n entre parenthèses']);
  this.executeCharTest('⒪', ['o entre parenthèses']);
  this.executeCharTest('⒫', ['p entre parenthèses']);
  this.executeCharTest('⒬', ['q entre parenthèses']);
  this.executeCharTest('⒭', ['r entre parenthèses']);
  this.executeCharTest('⒮', ['s entre parenthèses']);
  this.executeCharTest('⒯', ['t entre parenthèses']);
  this.executeCharTest('⒰', ['u entre parenthèses']);
  this.executeCharTest('⒱', ['v entre parenthèses']);
  this.executeCharTest('⒲', ['w entre parenthèses']);
  this.executeCharTest('⒳', ['x entre parenthèses']);
  this.executeCharTest('⒴', ['y entre parenthèses']);
  this.executeCharTest('⒵', ['z entre parenthèses']);
  this.executeCharTest('🄰', ['A majuscule encadré']);
  this.executeCharTest('🄱', ['B majuscule encadré']);
  this.executeCharTest('🄲', ['C majuscule encadré']);
  this.executeCharTest('🄳', ['D majuscule encadré']);
  this.executeCharTest('🄴', ['E majuscule encadré']);
  this.executeCharTest('🄵', ['F majuscule encadré']);
  this.executeCharTest('🄶', ['G majuscule encadré']);
  this.executeCharTest('🄷', ['H majuscule encadré']);
  this.executeCharTest('🄸', ['I majuscule encadré']);
  this.executeCharTest('🄹', ['J majuscule encadré']);
  this.executeCharTest('🄺', ['K majuscule encadré']);
  this.executeCharTest('🄻', ['L majuscule encadré']);
  this.executeCharTest('🄼', ['M majuscule encadré']);
  this.executeCharTest('🄽', ['N majuscule encadré']);
  this.executeCharTest('🄾', ['O majuscule encadré']);
  this.executeCharTest('🄿', ['P majuscule encadré']);
  this.executeCharTest('🅀', ['Q majuscule encadré']);
  this.executeCharTest('🅁', ['R majuscule encadré']);
  this.executeCharTest('🅂', ['S majuscule encadré']);
  this.executeCharTest('🅃', ['T majuscule encadré']);
  this.executeCharTest('🅄', ['U majuscule encadré']);
  this.executeCharTest('🅅', ['V majuscule encadré']);
  this.executeCharTest('🅆', ['W majuscule encadré']);
  this.executeCharTest('🅇', ['X majuscule encadré']);
  this.executeCharTest('🅈', ['Y majuscule encadré']);
  this.executeCharTest('🅉', ['Z majuscule encadré']);
  this.executeCharTest('🅰', ['A majuscule encadré inverse']);
  this.executeCharTest('🅱', ['B majuscule encadré inverse']);
  this.executeCharTest('🅲', ['C majuscule encadré inverse']);
  this.executeCharTest('🅳', ['D majuscule encadré inverse']);
  this.executeCharTest('🅴', ['E majuscule encadré inverse']);
  this.executeCharTest('🅵', ['F majuscule encadré inverse']);
  this.executeCharTest('🅶', ['G majuscule encadré inverse']);
  this.executeCharTest('🅷', ['H majuscule encadré inverse']);
  this.executeCharTest('🅸', ['I majuscule encadré inverse']);
  this.executeCharTest('🅹', ['J majuscule encadré inverse']);
  this.executeCharTest('🅺', ['K majuscule encadré inverse']);
  this.executeCharTest('🅻', ['L majuscule encadré inverse']);
  this.executeCharTest('🅼', ['M majuscule encadré inverse']);
  this.executeCharTest('🅽', ['N majuscule encadré inverse']);
  this.executeCharTest('🅾', ['O majuscule encadré inverse']);
  this.executeCharTest('🅿', ['P majuscule encadré inverse']);
  this.executeCharTest('🆀', ['Q majuscule encadré inverse']);
  this.executeCharTest('🆁', ['R majuscule encadré inverse']);
  this.executeCharTest('🆂', ['S majuscule encadré inverse']);
  this.executeCharTest('🆃', ['T majuscule encadré inverse']);
  this.executeCharTest('🆄', ['U majuscule encadré inverse']);
  this.executeCharTest('🆅', ['V majuscule encadré inverse']);
  this.executeCharTest('🆆', ['W majuscule encadré inverse']);
  this.executeCharTest('🆇', ['X majuscule encadré inverse']);
  this.executeCharTest('🆈', ['Y majuscule encadré inverse']);
  this.executeCharTest('🆉', ['Z majuscule encadré inverse']);
  this.executeCharTest('🅐', ['A majuscule encerclé noir']);
  this.executeCharTest('🅑', ['B majuscule encerclé noir']);
  this.executeCharTest('🅒', ['C majuscule encerclé noir']);
  this.executeCharTest('🅓', ['D majuscule encerclé noir']);
  this.executeCharTest('🅔', ['E majuscule encerclé noir']);
  this.executeCharTest('🅕', ['F majuscule encerclé noir']);
  this.executeCharTest('🅖', ['G majuscule encerclé noir']);
  this.executeCharTest('🅗', ['H majuscule encerclé noir']);
  this.executeCharTest('🅘', ['I majuscule encerclé noir']);
  this.executeCharTest('🅙', ['J majuscule encerclé noir']);
  this.executeCharTest('🅚', ['K majuscule encerclé noir']);
  this.executeCharTest('🅛', ['L majuscule encerclé noir']);
  this.executeCharTest('🅜', ['M majuscule encerclé noir']);
  this.executeCharTest('🅝', ['N majuscule encerclé noir']);
  this.executeCharTest('🅞', ['O majuscule encerclé noir']);
  this.executeCharTest('🅟', ['P majuscule encerclé noir']);
  this.executeCharTest('🅠', ['Q majuscule encerclé noir']);
  this.executeCharTest('🅡', ['R majuscule encerclé noir']);
  this.executeCharTest('🅢', ['S majuscule encerclé noir']);
  this.executeCharTest('🅣', ['T majuscule encerclé noir']);
  this.executeCharTest('🅤', ['U majuscule encerclé noir']);
  this.executeCharTest('🅥', ['V majuscule encerclé noir']);
  this.executeCharTest('🅦', ['W majuscule encerclé noir']);
  this.executeCharTest('🅧', ['X majuscule encerclé noir']);
  this.executeCharTest('🅨', ['Y majuscule encerclé noir']);
  this.executeCharTest('🅩', ['Z majuscule encerclé noir']);
  this.executeCharTest('ᴦ', ['petite gamma majuscule']);
  this.executeCharTest('ᴧ', ['petite lambda majuscule']);
  this.executeCharTest('ᴨ', ['petite pi majuscule']);
  this.executeCharTest('ᴩ', ['petite rhô majuscule']);
  this.executeCharTest('ᴪ', ['petite psi majuscule']);
  this.executeCharTest('ᵞ', ['gamma suscript']);
  this.executeCharTest('ᵠ', ['phi suscript']);
  this.executeCharTest('ᵦ', ['bêta souscrit']);
  this.executeCharTest('ᵧ', ['gamma souscrit']);
  this.executeCharTest('ᵨ', ['rhô souscrit']);
  this.executeCharTest('ᵩ', ['phi souscrit']);
  this.executeCharTest('ᵪ', ['khi souscrit']);
  this.executeCharTest('ϐ', ['bêta grec']);
  this.executeCharTest('ϗ', ['ligature kai']);
  this.executeCharTest('϶', ['epsilon lunaire réfléchi']);
  this.executeCharTest('𝟊', ['Digamma en gras']);
  this.executeCharTest('𝟋', ['digamma en gras']);
  this.executeCharTest('ℵ', ['alef']);
  this.executeCharTest('ℶ', ['bèt']);
  this.executeCharTest('ℷ', ['guimel']);
  this.executeCharTest('ℸ', ['dalèt']);
  this.executeCharTest('ǖ', ['u trémaa et macron']);
  this.executeCharTest('ǘ', ['u trémaa et accent aigu']);
  this.executeCharTest('ǚ', ['u trémaa et caron']);
  this.executeCharTest('ǜ', ['u trémaa et accent grave']);
  this.executeCharTest('ǟ', ['a trémaa et macron']);
  this.executeCharTest('ǡ', ['a point en chef et macron']);
  this.executeCharTest('ǭ', ['o ogonek et macron']);
  this.executeCharTest('ǻ', ['a rond en chef et accent aigu']);
  this.executeCharTest('ȫ', ['o tréma et macron']);
  this.executeCharTest('ȭ', ['o tilde et macron']);
  this.executeCharTest('ȱ', ['o point en chef et macron']);
  this.executeCharTest('ḉ', ['c cédille et accent aigu']);
  this.executeCharTest('ḕ', ['e macron et accent grave']);
  this.executeCharTest('ḗ', ['e macron et accent aigu']);
  this.executeCharTest('ḝ', ['e cédille et brève']);
  this.executeCharTest('ḯ', ['i tréma et accent aigu']);
  this.executeCharTest('ḹ', ['l point souscrit et macron']);
  this.executeCharTest('ṍ', ['o tilde et accent aigu']);
  this.executeCharTest('ṏ', ['o tilde et tréma']);
  this.executeCharTest('ṑ', ['o macron et accent grave']);
  this.executeCharTest('ṓ', ['o macron et accent aigu']);
  this.executeCharTest('ṝ', ['r point souscrit et macron']);
  this.executeCharTest('ṥ', ['s accent aigu et point en chef']);
  this.executeCharTest('ṧ', ['s caron et point en chef']);
  this.executeCharTest('ṩ', ['s point souscrit et point en chef']);
  this.executeCharTest('ṹ', ['u tilde et accent aigu']);
  this.executeCharTest('ṻ', ['u macron et tréma']);
  this.executeCharTest('ấ', ['a accent circonflexe et accent aigu']);
  this.executeCharTest('ầ', ['a accent circonflexe et accent grave']);
  this.executeCharTest('ẩ', ['a accent circonflexe et crochet en chef']);
  this.executeCharTest('ẫ', ['a accent circonflexe et tilde']);
  this.executeCharTest('ậ', ['a accent circonflexe et point souscrit']);
  this.executeCharTest('ắ', ['a brève et accent aigu']);
  this.executeCharTest('ằ', ['a brève et accent grave']);
  this.executeCharTest('ẳ', ['a brève et crochet en chef']);
  this.executeCharTest('ẵ', ['a brève et tilde']);
  this.executeCharTest('ặ', ['a brève et point souscrit']);
  this.executeCharTest('ế', ['e accent circonflexe et accent aigu']);
  this.executeCharTest('ề', ['e accent circonflexe et accent grave']);
  this.executeCharTest('ể', ['e accent circonflexe et crochet en chef']);
  this.executeCharTest('ễ', ['e accent circonflexe et tilde']);
  this.executeCharTest('ệ', ['e accent circonflexe et point souscrit']);
  this.executeCharTest('ố', ['o accent circonflexe et accent aigu']);
  this.executeCharTest('ồ', ['o accent circonflexe et accent grave']);
  this.executeCharTest('ổ', ['o accent circonflexe et crochet en chef']);
  this.executeCharTest('ỗ', ['o accent circonflexe et tilde']);
  this.executeCharTest('ộ', ['o accent circonflexe et point souscrit']);
  this.executeCharTest('ớ', ['o cornu accent aigu']);
  this.executeCharTest('ờ', ['o cornu accent grave']);
  this.executeCharTest('ở', ['o cornu crochet en chef']);
  this.executeCharTest('ỡ', ['o cornu tilde']);
  this.executeCharTest('ợ', ['o cornu point souscrit']);
  this.executeCharTest('ứ', ['u cornu accent aigu']);
  this.executeCharTest('ừ', ['u cornu accent grave']);
  this.executeCharTest('ử', ['u cornu crochet en chef']);
  this.executeCharTest('ữ', ['u cornu tilde']);
  this.executeCharTest('ự', ['u cornu point souscrit']);
  this.executeCharTest('ø', ['o barré']);
  this.executeCharTest('đ', ['d barré']);
  this.executeCharTest('ħ', ['h barré']);
  this.executeCharTest('ł', ['l barré']);
  this.executeCharTest('ŧ', ['t barré']);
  this.executeCharTest('ƀ', ['b barré']);
  this.executeCharTest('ƛ', ['lambda barré']);
  this.executeCharTest('ƶ', ['z barré']);
  this.executeCharTest('ƾ', ['coup de glotte barré culbuté']);
  this.executeCharTest('ǥ', ['g barré']);
  this.executeCharTest('ǿ', ['o barré accent aigu']);
  this.executeCharTest('ȼ', ['c barré']);
  this.executeCharTest('ɇ', ['e barré']);
  this.executeCharTest('ɉ', ['j barré']);
  this.executeCharTest('ɍ', ['r barré']);
  this.executeCharTest('ɏ', ['y barré']);
  this.executeCharTest('ɟ', ['j sans point barré']);
  this.executeCharTest('ɨ', ['i barré']);
  this.executeCharTest('ʄ', ['j sans point barré crosse']);
  this.executeCharTest('ʡ', ['coup de glotte barré']);
  this.executeCharTest('ʢ', ['coup de glotte barré réfléchi']);
  this.executeCharTest('ᴓ', ['o couché barré obliquement']);
  this.executeCharTest('ᵼ', ['iota barré']);
  this.executeCharTest('ᵽ', ['p barré']);
  this.executeCharTest('ᵿ', ['upsilon barré']);
  this.executeCharTest('ẜ', ['s long à barre diagonale']);
  this.executeCharTest('ẝ', ['s long à barre haute']);
  this.executeCharTest('ƍ', ['delta culbutée']);
  this.executeCharTest('ẛ', ['s long point en chef']);
  this.executeCharTest('ẟ', ['delta']);
  this.executeCharTest('ĸ', ['kra']);
  this.executeCharTest('ſ', ['s long']);
  this.executeCharTest('ƃ', ['b potence']);
  this.executeCharTest('ƅ', ['sixiéme ton']);
  this.executeCharTest('ƈ', ['c crosse']);
  this.executeCharTest('ƌ', ['d potence']);
  this.executeCharTest('ƒ', ['f cursif']);
  this.executeCharTest('ƕ', ['hv (Hwair)']);
  this.executeCharTest('ƙ', ['k crosse']);
  this.executeCharTest('ƚ', ['l rayé']);
  this.executeCharTest('ƞ', ['n à long jambage de droite']);
  this.executeCharTest('ơ', ['o cornu']);
  this.executeCharTest('ƣ', ['gha']);
  this.executeCharTest('ƥ', ['p crosse']);
  this.executeCharTest('ƨ', ['deuxiéme ton']);
  this.executeCharTest('ƪ', ['ech réfléchi bouclé']);
  this.executeCharTest('ƫ', ['t hameçon palatal']);
  this.executeCharTest('ƭ', ['t crosse']);
  this.executeCharTest('ư', ['u cornu']);
  this.executeCharTest('ƴ', ['y crosse']);
  this.executeCharTest('ƹ', ['ej réfléchi']);
  this.executeCharTest('ƺ', ['ej hameçon']);
  this.executeCharTest('ƽ', ['cinquiéme tun']);
  this.executeCharTest('ƿ', ['wynn']);
  this.executeCharTest('ǆ', ['dz caron']);
  this.executeCharTest('ǉ', ['lj']);
  this.executeCharTest('ǌ', ['nj']);
  this.executeCharTest('ǣ', ['ae macron']);
  this.executeCharTest('ǯ', ['ej caron']);
  this.executeCharTest('ǳ', ['dz']);
  this.executeCharTest('ȝ', ['yogh']);
  this.executeCharTest('ɮ', ['lej']);
  this.executeCharTest('ʒ', ['ej']);
  this.executeCharTest('ʓ', ['ej bouclé']);
  this.executeCharTest('ʤ', ['digramme Dej']);
  this.executeCharTest('ǝ', ['e culbuté']);
  this.executeCharTest('ǽ', ['ae accent aigu (ash)']);
  this.executeCharTest('ȡ', ['d bouclé']);
  this.executeCharTest('ȣ', ['ou']);
  this.executeCharTest('ȥ', ['z crochet']);
  this.executeCharTest('ȴ', ['l bouclé']);
  this.executeCharTest('ȵ', ['n bouclé']);
  this.executeCharTest('ȶ', ['t bouclé']);
  this.executeCharTest('ȸ', ['Ligature minuscule latine Db']);
  this.executeCharTest('ȹ', ['Ligature minuscule latine Qp']);
  this.executeCharTest('ȿ', ['s à paraphe']);
  this.executeCharTest('ɀ', ['z à paraphe']);
  this.executeCharTest('ɂ', ['coup de glotte']);
  this.executeCharTest('ɋ', ['q avec hameçon']);
  this.executeCharTest('ɐ', ['a culbuté']);
  this.executeCharTest('ɑ', ['alpha']);
  this.executeCharTest('ɒ', ['alpha culbuté']);
  this.executeCharTest('ɓ', ['b crosse']);
  this.executeCharTest('ɔ', ['o ouvert']);
  this.executeCharTest('ɕ', ['c bouclé']);
  this.executeCharTest('ɖ', ['d hameçon rétroflexe']);
  this.executeCharTest('ɗ', ['d crosse']);
  this.executeCharTest('ɘ', ['e réfléchi']);
  this.executeCharTest('ə', ['schwa']);
  this.executeCharTest('ɚ', ['schwa crochet']);
  this.executeCharTest('ɛ', ['e ouvert']);
  this.executeCharTest('ɜ', ['epsilon réfléchi']);
  this.executeCharTest('ɝ', ['epsilon réfléchi crochet']);
  this.executeCharTest('ɞ', ['epsilon réfléchi fermé']);
  this.executeCharTest('ɠ', ['g crosse']);
  this.executeCharTest('ɡ', ['g cursif']);
  this.executeCharTest('ɣ', ['gamma']);
  this.executeCharTest('ɤ', ['petit gamma']);
  this.executeCharTest('ɥ', ['h culbuté']);
  this.executeCharTest('ɦ', ['h crosse']);
  this.executeCharTest('ɧ', ['eng crosse']);
  this.executeCharTest('ɩ', ['iota']);
  this.executeCharTest('ɫ', ['l tilde médian']);
  this.executeCharTest('ɬ', ['l sanglé']);
  this.executeCharTest('ɭ', ['l hameçon rétroflexe']);
  this.executeCharTest('ɯ', ['m culbuté']);
  this.executeCharTest('ɰ', ['m hampé culbuté']);
  this.executeCharTest('ɱ', ['m hameçon']);
  this.executeCharTest('ɲ', ['n hameçon à gauche']);
  this.executeCharTest('ɳ', ['n hameçon rétroflexe']);
  this.executeCharTest('ɵ', ['o barré']);
  this.executeCharTest('ɷ', ['oméga fermé']);
  this.executeCharTest('ɸ', ['phi']);
  this.executeCharTest('ɹ', ['r culbuté']);
  this.executeCharTest('ɺ', ['r prolongé culbuté']);
  this.executeCharTest('ɻ', ['r crosse culbuté']);
  this.executeCharTest('ɼ', ['r prolongé']);
  this.executeCharTest('ɽ', ['r hameçon rétroflexe']);
  this.executeCharTest('ɾ', ['r sans obit']);
  this.executeCharTest('ɿ', ['r sans obit réfléchi']);
  this.executeCharTest('ʂ', ['s hameçon rétroflexe']);
  this.executeCharTest('ʃ', ['ech']);
  this.executeCharTest('ʅ', ['r sans obit réfléchi hameçon rétroflexe']);
  this.executeCharTest('ʆ', ['ech bouclé']);
  this.executeCharTest('ʇ', ['t culbuté']);
  this.executeCharTest('ʈ', ['t hameçon rétroflexe']);
  this.executeCharTest('ʉ', ['u barré']);
  this.executeCharTest('ʊ', ['upsilon']);
  this.executeCharTest('ʋ', ['v de ronde']);
  this.executeCharTest('ʌ', ['v culbuté']);
  this.executeCharTest('ʍ', ['w culbuté']);
  this.executeCharTest('ʎ', ['y culbuté']);
  this.executeCharTest('ʐ', ['z hameçon rétroflexe']);
  this.executeCharTest('ʑ', ['z bouclé']);
  this.executeCharTest('ʕ', ['coup de glotte réfléchi']);
  this.executeCharTest('ʖ', ['coup de glotte culbuté']);
  this.executeCharTest('ʗ', ['C étiré']);
  this.executeCharTest('ʘ', ['clic bilabial']);
  this.executeCharTest('ʚ', ['epsilon fermé']);
  this.executeCharTest('ʞ', ['k culbuté']);
  this.executeCharTest('ʠ', ['q crosse']);
  this.executeCharTest('ʣ', ['digramme Dz']);
  this.executeCharTest('ʥ', ['digramme Dz bouclé']);
  this.executeCharTest('ʦ', ['digramme Ts']);
  this.executeCharTest('ʧ', ['digramme Tech']);
  this.executeCharTest('ʨ', ['digramme Tc bouclé']);
  this.executeCharTest('ʩ', ['digramme Feng']);
  this.executeCharTest('ʪ', ['digramme Ls']);
  this.executeCharTest('ʫ', ['digramme Lz']);
  this.executeCharTest('ʬ', ['percussion bilabiale']);
  this.executeCharTest('ʭ', ['percussion bidentale']);
  this.executeCharTest('ʮ', ['h culbuté crosse réfléchie']);
  this.executeCharTest('ʯ', ['h culbuté crosse réfléchie et hameçon rétroflexe']);
  this.executeCharTest('ᴂ', ['ae culbuté']);
  this.executeCharTest('ᴈ', ['epsilon culbuté']);
  this.executeCharTest('ᴉ', ['i culbuté']);
  this.executeCharTest('ᴑ', ['o couché']);
  this.executeCharTest('ᴒ', ['o ouvert couché']);
  this.executeCharTest('ᴔ', ['oe culbuté']);
  this.executeCharTest('ᴖ', ['moitié supérieure de o']);
  this.executeCharTest('ᴗ', ['moitié inférieure de o']);
  this.executeCharTest('ᴝ', ['u couché']);
  this.executeCharTest('ᴞ', ['u tréma couché']);
  this.executeCharTest('ᴟ', ['m couché']);
  this.executeCharTest('ᴤ', ['fricative pharyngale voisée']);
  this.executeCharTest('ᴥ', ['aïn']);
  this.executeCharTest('ᵫ', ['ue']);
  this.executeCharTest('ᵬ', ['b tilde médian']);
  this.executeCharTest('ᵭ', ['d tilde médian']);
  this.executeCharTest('ᵮ', ['f tilde médian']);
  this.executeCharTest('ᵯ', ['m tilde médian']);
  this.executeCharTest('ᵰ', ['n tilde médian']);
  this.executeCharTest('ᵱ', ['p tilde médian']);
  this.executeCharTest('ᵲ', ['r tilde médian']);
  this.executeCharTest('ᵳ', ['r sans obit tilde médian']);
  this.executeCharTest('ᵴ', ['s tilde médian']);
  this.executeCharTest('ᵵ', ['t tilde médian']);
  this.executeCharTest('ᵶ', ['z tilde médian']);
  this.executeCharTest('ᵷ', ['g culbuté']);
  this.executeCharTest('ᵹ', ['g insulaire']);
  this.executeCharTest('ᵺ', ['th barré diagonalement']);
  this.executeCharTest('ᶀ', ['b hameçon palatal']);
  this.executeCharTest('ᶁ', ['d hameçon palatal']);
  this.executeCharTest('ᶂ', ['f hameçon palatal']);
  this.executeCharTest('ᶃ', ['g hameçon palatal']);
  this.executeCharTest('ᶄ', ['k hameçon palatal']);
  this.executeCharTest('ᶅ', ['l hameçon palatal']);
  this.executeCharTest('ᶆ', ['m hameçon palatal']);
  this.executeCharTest('ᶇ', ['n hameçon palatal']);
  this.executeCharTest('ᶈ', ['p hameçon palatal']);
  this.executeCharTest('ᶉ', ['r hameçon palatal']);
  this.executeCharTest('ᶊ', ['s hameçon palatal']);
  this.executeCharTest('ᶋ', ['ech hameçon palatal']);
  this.executeCharTest('ᶌ', ['v hameçon palatal']);
  this.executeCharTest('ᶍ', ['x hameçon palatal']);
  this.executeCharTest('ᶎ', ['z hameçon palatal']);
  this.executeCharTest('ᶏ', ['a hameçon rétroflexe']);
  this.executeCharTest('ᶐ', ['alpha hameçon rétroflexe']);
  this.executeCharTest('ᶑ', ['d crosse et hameçon rétroflexe']);
  this.executeCharTest('ᶒ', ['e hameçon rétroflexe']);
  this.executeCharTest('ᶓ', ['epsilon hameçon rétroflexe']);
  this.executeCharTest('ᶔ', ['epsilon réfléchi hameçon rétroflexe']);
  this.executeCharTest('ᶕ', ['schwa hameçon rétroflexe']);
  this.executeCharTest('ᶖ', ['i hameçon rétroflexe']);
  this.executeCharTest('ᶗ', ['o ouvert hameçon rétroflexe']);
  this.executeCharTest('ᶘ', ['ech hameçon rétroflexe']);
  this.executeCharTest('ᶙ', ['u hameçon rétroflexe']);
  this.executeCharTest('ᶚ', ['ej hameçon rétroflexe']);
  this.executeCharTest('ŉ', ['n précédée d\'une apostrophe']);
  this.executeCharTest('ŋ', ['eng']);
  this.executeCharTest('à', ['a accent grave']);
  this.executeCharTest('á', ['a accent aigu']);
  this.executeCharTest('â', ['a accent circonflexe']);
  this.executeCharTest('ã', ['a tilde']);
  this.executeCharTest('ä', ['a tréma']);
  this.executeCharTest('å', ['a rond en chef']);
  this.executeCharTest('ç', ['c cédille']);
  this.executeCharTest('è', ['e accent grave']);
  this.executeCharTest('é', ['e accent aigu']);
  this.executeCharTest('ê', ['e accent circonflexe']);
  this.executeCharTest('ë', ['e tréma']);
  this.executeCharTest('ì', ['i accent grave']);
  this.executeCharTest('í', ['i accent aigu']);
  this.executeCharTest('î', ['i accent circonflexe']);
  this.executeCharTest('ï', ['i tréma']);
  this.executeCharTest('ñ', ['n tilde']);
  this.executeCharTest('ò', ['o accent grave']);
  this.executeCharTest('ó', ['o accent aigu']);
  this.executeCharTest('ô', ['o accent circonflexe']);
  this.executeCharTest('õ', ['o tilde']);
  this.executeCharTest('ö', ['o tréma']);
  this.executeCharTest('ù', ['u accent grave']);
  this.executeCharTest('ú', ['u accent aigu']);
  this.executeCharTest('û', ['u accent circonflexe']);
  this.executeCharTest('ü', ['u tréma']);
  this.executeCharTest('ý', ['y accent aigu']);
  this.executeCharTest('ÿ', ['y tréma']);
  this.executeCharTest('ā', ['a macron']);
  this.executeCharTest('ă', ['a brève']);
  this.executeCharTest('ą', ['a ogonek']);
  this.executeCharTest('ć', ['c accent aigu']);
  this.executeCharTest('ĉ', ['c accent circonflexe']);
  this.executeCharTest('ċ', ['c point en chef']);
  this.executeCharTest('č', ['c caron']);
  this.executeCharTest('ď', ['d caron']);
  this.executeCharTest('ē', ['e macron']);
  this.executeCharTest('ĕ', ['e brève']);
  this.executeCharTest('ė', ['e point en chef']);
  this.executeCharTest('ę', ['e ogonek']);
  this.executeCharTest('ě', ['e caron']);
  this.executeCharTest('ĝ', ['g accent circonflexe']);
  this.executeCharTest('ğ', ['g brève']);
  this.executeCharTest('ġ', ['g point en chef']);
  this.executeCharTest('ģ', ['g cédille']);
  this.executeCharTest('ĥ', ['h accent circonflexe']);
  this.executeCharTest('ĩ', ['i tilde']);
  this.executeCharTest('ī', ['i macron']);
  this.executeCharTest('ĭ', ['i brève']);
  this.executeCharTest('į', ['i ogonek']);
  this.executeCharTest('ı', ['i sans point']);
  this.executeCharTest('ĵ', ['j accent circonflexe']);
  this.executeCharTest('ķ', ['k cédille']);
  this.executeCharTest('ĺ', ['l accent aigu']);
  this.executeCharTest('ļ', ['l cédille']);
  this.executeCharTest('ľ', ['l caron']);
  this.executeCharTest('ŀ', ['l point médian']);
  this.executeCharTest('ń', ['n accent aigu']);
  this.executeCharTest('ņ', ['n cédille']);
  this.executeCharTest('ň', ['n caron']);
  this.executeCharTest('ō', ['o macron']);
  this.executeCharTest('ŏ', ['o brève']);
  this.executeCharTest('ő', ['o avec double accent aigu']);
  this.executeCharTest('ŕ', ['r accent aigu']);
  this.executeCharTest('ŗ', ['r cédille']);
  this.executeCharTest('ř', ['r caron']);
  this.executeCharTest('ś', ['s accent aigu']);
  this.executeCharTest('ŝ', ['s accent circonflexe']);
  this.executeCharTest('ş', ['s cédille']);
  this.executeCharTest('š', ['s caron']);
  this.executeCharTest('ţ', ['t cédille']);
  this.executeCharTest('ť', ['t caron']);
  this.executeCharTest('ũ', ['u tilde']);
  this.executeCharTest('ū', ['u macron']);
  this.executeCharTest('ŭ', ['u brève']);
  this.executeCharTest('ů', ['u rond en chef']);
  this.executeCharTest('ű', ['u avec double accent aigu']);
  this.executeCharTest('ų', ['u ogonek']);
  this.executeCharTest('ŵ', ['w accent circonflexe']);
  this.executeCharTest('ŷ', ['y accent circonflexe']);
  this.executeCharTest('ź', ['z accent aigu']);
  this.executeCharTest('ż', ['z point en chef']);
  this.executeCharTest('ž', ['z caron']);
  this.executeCharTest('ǎ', ['a caron']);
  this.executeCharTest('ǐ', ['i caron']);
  this.executeCharTest('ǒ', ['o caron']);
  this.executeCharTest('ǔ', ['u caron']);
  this.executeCharTest('ǧ', ['g caron']);
  this.executeCharTest('ǩ', ['k caron']);
  this.executeCharTest('ǫ', ['o ogonek']);
  this.executeCharTest('ǰ', ['j caron']);
  this.executeCharTest('ǵ', ['g accent aigu']);
  this.executeCharTest('ǹ', ['n grave']);
  this.executeCharTest('ȁ', ['a double accent grave']);
  this.executeCharTest('ȃ', ['a brève renversée']);
  this.executeCharTest('ȅ', ['e double accent grave']);
  this.executeCharTest('ȇ', ['e brève renversée']);
  this.executeCharTest('ȉ', ['i double accent grave']);
  this.executeCharTest('ȋ', ['i brève renversée']);
  this.executeCharTest('ȍ', ['o double accent grave']);
  this.executeCharTest('ȏ', ['o brève renversée']);
  this.executeCharTest('ȑ', ['r double accent grave']);
  this.executeCharTest('ȓ', ['r brève renversée']);
  this.executeCharTest('ȕ', ['u double accent grave']);
  this.executeCharTest('ȗ', ['u brève renversée']);
  this.executeCharTest('ș', ['s virgule souscrite *']);
  this.executeCharTest('ț', ['t virgule souscrite *']);
  this.executeCharTest('ȟ', ['h caron']);
  this.executeCharTest('ȧ', ['a point en chef']);
  this.executeCharTest('ȩ', ['e cédille']);
  this.executeCharTest('ȯ', ['o point en chef']);
  this.executeCharTest('ȳ', ['y macron']);
  this.executeCharTest('ȷ', ['j sans point']);
  this.executeCharTest('ḁ', ['a à rond souscrit']);
  this.executeCharTest('ḃ', ['b point en chef']);
  this.executeCharTest('ḅ', ['b point souscrit']);
  this.executeCharTest('ḇ', ['b ligne souscrite']);
  this.executeCharTest('ḋ', ['d point en chef']);
  this.executeCharTest('ḍ', ['d point souscrit']);
  this.executeCharTest('ḏ', ['d ligne souscrite']);
  this.executeCharTest('ḑ', ['d cédille']);
  this.executeCharTest('ḓ', ['d accent circonflexe souscrit']);
  this.executeCharTest('ḙ', ['e accent circonflexe souscrit']);
  this.executeCharTest('ḛ', ['e tilde souscrit']);
  this.executeCharTest('ḟ', ['f point en chef']);
  this.executeCharTest('ḡ', ['g macron']);
  this.executeCharTest('ḣ', ['h point en chef']);
  this.executeCharTest('ḥ', ['h point souscrit']);
  this.executeCharTest('ḧ', ['h tréma']);
  this.executeCharTest('ḩ', ['h cédille']);
  this.executeCharTest('ḫ', ['h brève souscrit']);
  this.executeCharTest('ḭ', ['i tilde souscrit']);
  this.executeCharTest('ḱ', ['k accent aigu']);
  this.executeCharTest('ḳ', ['k point souscrit']);
  this.executeCharTest('ḵ', ['k ligne souscrite']);
  this.executeCharTest('ḷ', ['l point souscrit']);
  this.executeCharTest('ḻ', ['l ligne souscrite']);
  this.executeCharTest('ḽ', ['l accent circonflexe souscrit']);
  this.executeCharTest('ḿ', ['m accent aigu']);
  this.executeCharTest('ṁ', ['m point en chef']);
  this.executeCharTest('ṃ', ['m point souscrit']);
  this.executeCharTest('ṅ', ['n point en chef']);
  this.executeCharTest('ṇ', ['n point souscrit']);
  this.executeCharTest('ṉ', ['n ligne souscrite']);
  this.executeCharTest('ṋ', ['n accent circonflexe souscrit']);
  this.executeCharTest('ṕ', ['p accent aigu']);
  this.executeCharTest('ṗ', ['p point en chef']);
  this.executeCharTest('ṙ', ['r point en chef']);
  this.executeCharTest('ṛ', ['r point souscrit']);
  this.executeCharTest('ṟ', ['r ligne souscrite']);
  this.executeCharTest('ṡ', ['s point en chef']);
  this.executeCharTest('ṣ', ['s point souscrit']);
  this.executeCharTest('ṫ', ['t point en chef']);
  this.executeCharTest('ṭ', ['t point souscrit']);
  this.executeCharTest('ṯ', ['t ligne souscrite']);
  this.executeCharTest('ṱ', ['t accent circonflexe souscrit']);
  this.executeCharTest('ṳ', ['u tréma souscrit']);
  this.executeCharTest('ṵ', ['u tilde souscrit']);
  this.executeCharTest('ṷ', ['u accent circonflexe souscrit']);
  this.executeCharTest('ṽ', ['v tilde']);
  this.executeCharTest('ṿ', ['v point souscrit']);
  this.executeCharTest('ẁ', ['w accent grave']);
  this.executeCharTest('ẃ', ['w accent aigu']);
  this.executeCharTest('ẅ', ['w tréma']);
  this.executeCharTest('ẇ', ['w point en chef']);
  this.executeCharTest('ẉ', ['w point souscrit']);
  this.executeCharTest('ẋ', ['x point en chef']);
  this.executeCharTest('ẍ', ['x tréma']);
  this.executeCharTest('ẏ', ['y point en chef']);
  this.executeCharTest('ẑ', ['z accent circonflexe']);
  this.executeCharTest('ẓ', ['z point souscrit']);
  this.executeCharTest('ẕ', ['z ligne souscrite']);
  this.executeCharTest('ẖ', ['h ligne souscrite']);
  this.executeCharTest('ẗ', ['t tréma']);
  this.executeCharTest('ẘ', ['w rond en chef']);
  this.executeCharTest('ẙ', ['y rond en chef']);
  this.executeCharTest('ẚ', ['a demi rond à droite']);
  this.executeCharTest('ạ', ['a point souscrit']);
  this.executeCharTest('ả', ['a crochet en chef']);
  this.executeCharTest('ẹ', ['e point souscrit']);
  this.executeCharTest('ẻ', ['e crochet en chef']);
  this.executeCharTest('ẽ', ['e tilde']);
  this.executeCharTest('ỉ', ['i crochet en chef']);
  this.executeCharTest('ị', ['i point souscrit']);
  this.executeCharTest('ọ', ['o point souscrit']);
  this.executeCharTest('ỏ', ['o crochet en chef']);
  this.executeCharTest('ụ', ['u point souscrit']);
  this.executeCharTest('ủ', ['u crochet en chef']);
  this.executeCharTest('ỳ', ['y accent grave']);
  this.executeCharTest('ỵ', ['y point souscrit']);
  this.executeCharTest('ỷ', ['y crochet en chef']);
  this.executeCharTest('ỹ', ['y tilde']);
  this.executeCharTest('ͣ', ['diacritique a']);
  this.executeCharTest('ͤ', ['diacritique e']);
  this.executeCharTest('ͥ', ['diacritique i']);
  this.executeCharTest('ͦ', ['diacritique o']);
  this.executeCharTest('ͧ', ['diacritique u']);
  this.executeCharTest('ͨ', ['diacritique c']);
  this.executeCharTest('ͩ', ['diacritique d']);
  this.executeCharTest('ͪ', ['diacritique h']);
  this.executeCharTest('ͫ', ['diacritique m']);
  this.executeCharTest('ͬ', ['diacritique r']);
  this.executeCharTest('ͭ', ['diacritique t']);
  this.executeCharTest('ͮ', ['diacritique v']);
  this.executeCharTest('ͯ', ['diacritique x']);
  this.executeCharTest('ᵢ', ['i souscrit']);
  this.executeCharTest('ᵣ', ['r souscrit']);
  this.executeCharTest('ᵤ', ['u souscrit']);
  this.executeCharTest('ᵥ', ['v souscrit']);
  this.executeCharTest('᷊', ['diacritique r souscrite']);
  this.executeCharTest('ᷓ', ['diacritique a ouvert aplati suscrit']);
  this.executeCharTest('ᷔ', ['diacritique ae']);
  this.executeCharTest('ᷕ', ['diacritique ao']);
  this.executeCharTest('ᷖ', ['diacritique av']);
  this.executeCharTest('ᷗ', ['diacritique c cédille']);
  this.executeCharTest('ᷘ', ['diacritique d insulaire']);
  this.executeCharTest('ᷙ', ['diacritique eth']);
  this.executeCharTest('ᷚ', ['diacritique g']);
  this.executeCharTest('ᷛ', ['diacritique petite g majuscule']);
  this.executeCharTest('ᷜ', ['diacritique k']);
  this.executeCharTest('ᷝ', ['diacritique l']);
  this.executeCharTest('ᷞ', ['diacritique petite l majuscule']);
  this.executeCharTest('ᷟ', ['diacritique petite m majuscule']);
  this.executeCharTest('ᷠ', ['diacritique n']);
  this.executeCharTest('ᷡ', ['diacritique petite n majuscule']);
  this.executeCharTest('ᷢ', ['diacritique petite r majuscule']);
  this.executeCharTest('ᷣ', ['diacritique r rotunda']);
  this.executeCharTest('ᷤ', ['diacritique s']);
  this.executeCharTest('ᷥ', ['diacritique s long']);
  this.executeCharTest('ᷦ', ['diacritique z']);
  this.executeCharTest('ⁱ', ['exposant i']);
  this.executeCharTest('ⁿ', ['exposant n']);
  this.executeCharTest('ₐ', ['indice a']);
  this.executeCharTest('ₑ', ['indice e']);
  this.executeCharTest('ₒ', ['indice o']);
  this.executeCharTest('ₓ', ['indice x']);
  this.executeCharTest('ₔ', ['indice schwa']);
  this.executeCharTest('ₕ', ['souscrite h']);
  this.executeCharTest('ₖ', ['souscrite k']);
  this.executeCharTest('ₗ', ['souscrite l']);
  this.executeCharTest('ₘ', ['souscrite m']);
  this.executeCharTest('ₙ', ['souscrite n']);
  this.executeCharTest('ₚ', ['souscrite p']);
  this.executeCharTest('ₛ', ['souscrite s']);
  this.executeCharTest('ₜ', ['souscrite t']);
  this.executeCharTest('ⱼ', ['j souscrite']);
  this.executeCharTest('🄪', ['s majuscule en écaille crochetée']);
  this.executeCharTest('🄫', ['c majuscule en italique cerclée']);
  this.executeCharTest('🄬', ['r majuscule en italique cerclée']);
  this.executeCharTest('🆊', ['P majuscule encadrée et en inversion avec croix']);
  this.executeCharTest('Ǖ', ['U majuscule trémaa et macron']);
  this.executeCharTest('Ǘ', ['U majuscule trémaa et accent aigu']);
  this.executeCharTest('Ǚ', ['U majuscule trémaa et caron']);
  this.executeCharTest('Ǜ', ['U majuscule trémaa et accent grave']);
  this.executeCharTest('Ǟ', ['A majuscule trémaa et macron']);
  this.executeCharTest('Ǡ', ['A majuscule point en chef et macron']);
  this.executeCharTest('Ǭ', ['O majuscule ogonek et macron']);
  this.executeCharTest('Ǻ', ['A majuscule rond en chef et accent aigu']);
  this.executeCharTest('Ȫ', ['O majuscule tréma et macron']);
  this.executeCharTest('Ȭ', ['O majuscule tilde et macron']);
  this.executeCharTest('Ȱ', ['O majuscule point en chef et macron']);
  this.executeCharTest('Ḉ', ['C cédille et accent aigu majuscule']);
  this.executeCharTest('Ḕ', ['E macron et accent grave majuscule']);
  this.executeCharTest('Ḗ', ['E macron et accent aigu majuscule']);
  this.executeCharTest('Ḝ', ['E cédille et brève majuscule']);
  this.executeCharTest('Ḯ', ['I tréma et accent aigu majuscule']);
  this.executeCharTest('Ḹ', ['L point souscrit et macron majuscule']);
  this.executeCharTest('Ṍ', ['O tilde et accent aigu majuscule']);
  this.executeCharTest('Ṏ', ['O tilde et tréma majuscule']);
  this.executeCharTest('Ṑ', ['O macron et accent grave majuscule']);
  this.executeCharTest('Ṓ', ['O macron et accent aigu majuscule']);
  this.executeCharTest('Ṝ', ['R point souscrit et macron majuscule']);
  this.executeCharTest('Ṥ', ['S accent aigu et point en chef majuscule']);
  this.executeCharTest('Ṧ', ['S caron et point en chef majuscule']);
  this.executeCharTest('Ṩ', ['S point souscrit et point en chef majuscule']);
  this.executeCharTest('Ṹ', ['U tilde et accent aigu majuscule']);
  this.executeCharTest('Ṻ', ['U macron et tréma majuscule']);
  this.executeCharTest('Ấ', ['A accent circonflexe et accent aigu majuscule']);
  this.executeCharTest('Ầ', ['A accent circonflexe et accent grave majuscule']);
  this.executeCharTest('Ẩ', ['A accent circonflexe et crochet en chef majuscule']);
  this.executeCharTest('Ẫ', ['A accent circonflexe et tilde majuscule']);
  this.executeCharTest('Ậ', ['A accent circonflexe et point souscrit majuscule']);
  this.executeCharTest('Ắ', ['A brève et accent aigu majuscule']);
  this.executeCharTest('Ằ', ['A brève et accent grave majuscule']);
  this.executeCharTest('Ẳ', ['A brève et crochet en chef majuscule']);
  this.executeCharTest('Ẵ', ['A brève et tilde majuscule']);
  this.executeCharTest('Ặ', ['A brève et point souscrit majuscule']);
  this.executeCharTest('Ế', ['E accent circonflexe et accent aigu majuscule']);
  this.executeCharTest('Ề', ['E accent circonflexe et accent grave majuscule']);
  this.executeCharTest('Ể', ['E accent circonflexe et crochet en chef majuscule']);
  this.executeCharTest('Ễ', ['E accent circonflexe et tilde majuscule']);
  this.executeCharTest('Ệ', ['E accent circonflexe et point souscrit majuscule']);
  this.executeCharTest('Ố', ['O accent circonflexe et accent aigu majuscule']);
  this.executeCharTest('Ồ', ['O accent circonflexe et accent grave majuscule']);
  this.executeCharTest('Ổ', ['O accent circonflexe et crochet en chef majuscule']);
  this.executeCharTest('Ỗ', ['O accent circonflexe et tilde majuscule']);
  this.executeCharTest('Ộ', ['O accent circonflexe et point souscrit majuscule']);
  this.executeCharTest('Ớ', ['O cornu accent aigu majuscule']);
  this.executeCharTest('Ờ', ['O cornu accent grave majuscule']);
  this.executeCharTest('Ở', ['O cornu crochet en chef majuscule']);
  this.executeCharTest('Ỡ', ['O cornu tilde majuscule']);
  this.executeCharTest('Ợ', ['O cornu point souscrit majuscule']);
  this.executeCharTest('Ứ', ['U cornu accent aigu majuscule']);
  this.executeCharTest('Ừ', ['U cornu accent grave majuscule']);
  this.executeCharTest('Ử', ['U cornu crochet en chef majuscule']);
  this.executeCharTest('Ữ', ['U cornu tilde majuscule']);
  this.executeCharTest('Ự', ['U cornu point souscrit majuscule']);
  this.executeCharTest('À', ['A accent grave majuscule']);
  this.executeCharTest('Á', ['A accent aigu majuscule']);
  this.executeCharTest('Â', ['A accent circonflexe majuscule']);
  this.executeCharTest('Ã', ['A tilde majuscule']);
  this.executeCharTest('Ä', ['A tréma majuscule']);
  this.executeCharTest('Å', ['angstrom']);
  this.executeCharTest('Ç', ['C cédille majuscule']);
  this.executeCharTest('È', ['E accent grave majuscule']);
  this.executeCharTest('É', ['E accent aigu majuscule']);
  this.executeCharTest('Ê', ['E accent circonflexe majuscule']);
  this.executeCharTest('Ë', ['E tréma majuscule']);
  this.executeCharTest('Ì', ['I accent grave majuscule']);
  this.executeCharTest('Í', ['I accent aigu majuscule']);
  this.executeCharTest('Î', ['I accent circonflexe majuscule']);
  this.executeCharTest('Ï', ['I tréma majuscule']);
  this.executeCharTest('Ñ', ['N tilde majuscule']);
  this.executeCharTest('Ò', ['O accent grave majuscule']);
  this.executeCharTest('Ó', ['O accent aigu majuscule']);
  this.executeCharTest('Ô', ['O accent circonflexe majuscule']);
  this.executeCharTest('Õ', ['O tilde majuscule']);
  this.executeCharTest('Ö', ['O tréma majuscule']);
  this.executeCharTest('Ù', ['U accent grave majuscule']);
  this.executeCharTest('Ú', ['U accent aigu majuscule']);
  this.executeCharTest('Û', ['U accent circonflexe majuscule']);
  this.executeCharTest('Ü', ['U tréma majuscule']);
  this.executeCharTest('Ý', ['Y accent aigu majuscule']);
  this.executeCharTest('Ā', ['A macron majuscule']);
  this.executeCharTest('Ă', ['A brève majuscule']);
  this.executeCharTest('Ą', ['A ogonek majuscule']);
  this.executeCharTest('Ć', ['C accent aigu majuscule']);
  this.executeCharTest('Ĉ', ['C accent circonflexe majuscule']);
  this.executeCharTest('Ċ', ['C point en chef majuscule']);
  this.executeCharTest('Č', ['C caron majuscule']);
  this.executeCharTest('Ď', ['D caron majuscule']);
  this.executeCharTest('Ē', ['E macron majuscule']);
  this.executeCharTest('Ĕ', ['E brève majuscule']);
  this.executeCharTest('Ė', ['E point en chef majuscule']);
  this.executeCharTest('Ę', ['E ogonek majuscule']);
  this.executeCharTest('Ě', ['E caron majuscule']);
  this.executeCharTest('Ĝ', ['G accent circonflexe majuscule']);
  this.executeCharTest('Ğ', ['G brève majuscule']);
  this.executeCharTest('Ġ', ['G point en chef majuscule']);
  this.executeCharTest('Ģ', ['G cédille majuscule']);
  this.executeCharTest('Ĥ', ['H accent circonflexe majuscule']);
  this.executeCharTest('Ĩ', ['I tilde majuscule']);
  this.executeCharTest('Ī', ['I macron majuscule']);
  this.executeCharTest('Ĭ', ['I brève majuscule']);
  this.executeCharTest('Į', ['I ogonek majuscule']);
  this.executeCharTest('İ', ['I point en chef majuscule']);
  this.executeCharTest('Ĵ', ['J accent circonflexe majuscule']);
  this.executeCharTest('Ķ', ['K cédille majuscule']);
  this.executeCharTest('Ĺ', ['L accent aigu majuscule']);
  this.executeCharTest('Ļ', ['L cédille majuscule']);
  this.executeCharTest('Ľ', ['L caron majuscule']);
  this.executeCharTest('Ŀ', ['L point médian majuscule']);
  this.executeCharTest('Ń', ['N accent aigu majuscule']);
  this.executeCharTest('Ņ', ['N cédille majuscule']);
  this.executeCharTest('Ň', ['N caron majuscule']);
  this.executeCharTest('Ō', ['O macron majuscule']);
  this.executeCharTest('Ŏ', ['O brève majuscule']);
  this.executeCharTest('Ő', ['O avec double accent aigu majuscule']);
  this.executeCharTest('Ŕ', ['R accent aigu majuscule']);
  this.executeCharTest('Ŗ', ['R cédille majuscule']);
  this.executeCharTest('Ř', ['R caron majuscule']);
  this.executeCharTest('Ś', ['S accent aigu majuscule']);
  this.executeCharTest('Ŝ', ['S accent circonflexe majuscule']);
  this.executeCharTest('Ş', ['S cédille majuscule']);
  this.executeCharTest('Š', ['S caron majuscule']);
  this.executeCharTest('Ţ', ['T cédille majuscule']);
  this.executeCharTest('Ť', ['T caron majuscule']);
  this.executeCharTest('Ũ', ['U tilde majuscule']);
  this.executeCharTest('Ū', ['U macron majuscule']);
  this.executeCharTest('Ŭ', ['U brève majuscule']);
  this.executeCharTest('Ů', ['U rond en chef majuscule']);
  this.executeCharTest('Ű', ['U avec double accent aigu majuscule']);
  this.executeCharTest('Ų', ['U ogonek majuscule']);
  this.executeCharTest('Ŵ', ['W accent circonflexe majuscule']);
  this.executeCharTest('Ŷ', ['Y accent circonflexe majuscule']);
  this.executeCharTest('Ÿ', ['Y tréma majuscule']);
  this.executeCharTest('Ź', ['Z accent aigu majuscule']);
  this.executeCharTest('Ż', ['Z point en chef majuscule']);
  this.executeCharTest('Ž', ['Z caron majuscule']);
  this.executeCharTest('Ǎ', ['A caron majuscule']);
  this.executeCharTest('Ǐ', ['I caron majuscule']);
  this.executeCharTest('Ǒ', ['O caron majuscule']);
  this.executeCharTest('Ǔ', ['U caron majuscule']);
  this.executeCharTest('Ǧ', ['G caron majuscule']);
  this.executeCharTest('Ǩ', ['K caron majuscule']);
  this.executeCharTest('Ǫ', ['O ogonek majuscule']);
  this.executeCharTest('Ǵ', ['G accent aigu majuscule']);
  this.executeCharTest('Ǹ', ['N grave majuscule']);
  this.executeCharTest('Ȁ', ['A double accent grave majuscule']);
  this.executeCharTest('Ȃ', ['A brève renversée majuscule']);
  this.executeCharTest('Ȅ', ['E double accent grave majuscule']);
  this.executeCharTest('Ȇ', ['E brève renversée majuscule']);
  this.executeCharTest('Ȉ', ['I double accent grave majuscule']);
  this.executeCharTest('Ȋ', ['I brève renversée majuscule']);
  this.executeCharTest('Ȍ', ['O double accent grave majuscule']);
  this.executeCharTest('Ȏ', ['O brève renversée majuscule']);
  this.executeCharTest('Ȑ', ['R double accent grave majuscule']);
  this.executeCharTest('Ȓ', ['R brève renversée majuscule']);
  this.executeCharTest('Ȕ', ['U double accent grave majuscule']);
  this.executeCharTest('Ȗ', ['U brève renversée majuscule']);
  this.executeCharTest('Ș', ['S virgule souscrite * majuscule']);
  this.executeCharTest('Ț', ['T virgule souscrite * majuscule']);
  this.executeCharTest('Ȟ', ['H caron majuscule']);
  this.executeCharTest('Ȧ', ['A point en chef majuscule']);
  this.executeCharTest('Ȩ', ['E cédille majuscule']);
  this.executeCharTest('Ȯ', ['O point en chef majuscule']);
  this.executeCharTest('Ȳ', ['Y macron majuscule']);
  this.executeCharTest('Ḁ', ['A à rond souscrit majuscule']);
  this.executeCharTest('Ḃ', ['B point en chef majuscule']);
  this.executeCharTest('Ḅ', ['B point souscrit majuscule']);
  this.executeCharTest('Ḇ', ['B ligne souscrite majuscule']);
  this.executeCharTest('Ḋ', ['D point en chef majuscule']);
  this.executeCharTest('Ḍ', ['D point souscrit majuscule']);
  this.executeCharTest('Ḏ', ['D ligne souscrite majuscule']);
  this.executeCharTest('Ḑ', ['D cédille majuscule']);
  this.executeCharTest('Ḓ', ['D accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ḙ', ['E accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ḛ', ['E tilde souscrit majuscule']);
  this.executeCharTest('Ḟ', ['F point en chef majuscule']);
  this.executeCharTest('Ḡ', ['G macron majuscule']);
  this.executeCharTest('Ḣ', ['H point en chef majuscule']);
  this.executeCharTest('Ḥ', ['H point souscrit majuscule']);
  this.executeCharTest('Ḧ', ['H tréma majuscule']);
  this.executeCharTest('Ḩ', ['H cédille majuscule']);
  this.executeCharTest('Ḫ', ['H brève souscrit majuscule']);
  this.executeCharTest('Ḭ', ['I tilde souscrit majuscule']);
  this.executeCharTest('Ḱ', ['K accent aigu majuscule']);
  this.executeCharTest('Ḳ', ['K point souscrit majuscule']);
  this.executeCharTest('Ḵ', ['K ligne souscrite majuscule']);
  this.executeCharTest('Ḷ', ['L point souscrit majuscule']);
  this.executeCharTest('Ḻ', ['L ligne souscrite majuscule']);
  this.executeCharTest('Ḽ', ['L accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ḿ', ['M accent aigu majuscule']);
  this.executeCharTest('Ṁ', ['M point en chef majuscule']);
  this.executeCharTest('Ṃ', ['M point souscrit majuscule']);
  this.executeCharTest('Ṅ', ['N point en chef majuscule']);
  this.executeCharTest('Ṇ', ['N point souscrit majuscule']);
  this.executeCharTest('Ṉ', ['N ligne souscrite majuscule']);
  this.executeCharTest('Ṋ', ['N accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ṕ', ['P accent aigu majuscule']);
  this.executeCharTest('Ṗ', ['P point en chef majuscule']);
  this.executeCharTest('Ṙ', ['R point en chef majuscule']);
  this.executeCharTest('Ṛ', ['R point souscrit majuscule']);
  this.executeCharTest('Ṟ', ['R ligne souscrite majuscule']);
  this.executeCharTest('Ṡ', ['S point en chef majuscule']);
  this.executeCharTest('Ṣ', ['S point souscrit majuscule']);
  this.executeCharTest('Ṫ', ['T point en chef majuscule']);
  this.executeCharTest('Ṭ', ['T point souscrit majuscule']);
  this.executeCharTest('Ṯ', ['T ligne souscrite majuscule']);
  this.executeCharTest('Ṱ', ['T accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ṳ', ['U tréma souscrit majuscule']);
  this.executeCharTest('Ṵ', ['U tilde souscrit majuscule']);
  this.executeCharTest('Ṷ', ['U accent circonflexe souscrit majuscule']);
  this.executeCharTest('Ṽ', ['V tilde majuscule']);
  this.executeCharTest('Ṿ', ['V point souscrit majuscule']);
  this.executeCharTest('Ẁ', ['W accent grave majuscule']);
  this.executeCharTest('Ẃ', ['W accent aigu majuscule']);
  this.executeCharTest('Ẅ', ['W tréma majuscule']);
  this.executeCharTest('Ẇ', ['W point en chef majuscule']);
  this.executeCharTest('Ẉ', ['W point souscrit majuscule']);
  this.executeCharTest('Ẋ', ['X point en chef majuscule']);
  this.executeCharTest('Ẍ', ['X tréma majuscule']);
  this.executeCharTest('Ẏ', ['Y point en chef majuscule']);
  this.executeCharTest('Ẑ', ['Z accent circonflexe majuscule']);
  this.executeCharTest('Ẓ', ['Z point souscrit majuscule']);
  this.executeCharTest('Ẕ', ['Z ligne souscrite majuscule']);
  this.executeCharTest('Ạ', ['A point souscrit majuscule']);
  this.executeCharTest('Ả', ['A crochet en chef majuscule']);
  this.executeCharTest('Ẹ', ['E point souscrit majuscule']);
  this.executeCharTest('Ẻ', ['E crochet en chef majuscule']);
  this.executeCharTest('Ẽ', ['E tilde majuscule']);
  this.executeCharTest('Ỉ', ['I crochet en chef majuscule']);
  this.executeCharTest('Ị', ['I point souscrit majuscule']);
  this.executeCharTest('Ọ', ['O point souscrit majuscule']);
  this.executeCharTest('Ỏ', ['O crochet en chef majuscule']);
  this.executeCharTest('Ụ', ['U point souscrit majuscule']);
  this.executeCharTest('Ủ', ['U crochet en chef majuscule']);
  this.executeCharTest('Ỳ', ['Y accent grave majuscule']);
  this.executeCharTest('Ỵ', ['Y point souscrit majuscule']);
  this.executeCharTest('Ỷ', ['Y crochet en chef majuscule']);
  this.executeCharTest('Ỹ', ['Y tilde majuscule']);
  this.executeCharTest('⊾', ['angle droit avec arc']);
  this.executeCharTest('⍼', ['angle droit avec flèche en zigzag vers le bas']);
  this.executeCharTest('⟀', ['angle tridimensionnel']);
  this.executeCharTest('⦛', ['angle mesuré s\'ouvrant vers la gauche']);
  this.executeCharTest('⦜', ['variante d\'angle avec carré']);
  this.executeCharTest('⦝', ['angle droit mesuré pointé']);
  this.executeCharTest('⦞', ['angle avec s inscrit']);
  this.executeCharTest('⦟', ['angle aigu']);
  this.executeCharTest('⦠', ['angle sphérique s\'ouvrant vers la gauche']);
  this.executeCharTest('⦡', ['angle sphérique s\'ouvrant vers le haut']);
  this.executeCharTest('⦢', ['angle culbuté']);
  this.executeCharTest('⦣', ['angle réfléchi']);
  this.executeCharTest('⦤', ['angle à barre souscrite']);
  this.executeCharTest('⦥', ['angle à barre souscrite réfléchie']);
  this.executeCharTest('⦦', ['angle oblique s\'ouvrant vers le haut']);
  this.executeCharTest('⦧', ['angle oblique s\'ouvrant vers le bas']);
  this.executeCharTest('⦨', ['angle calculé à bras vers l\'est et bras fléché vers le nord est']);
  this.executeCharTest('⦩', ['angle calculé à bras vers l\'ouest et bras fléché vers le nord ouest']);
  this.executeCharTest('⦪', ['angle calculé à bras vers l\'est et bras fléché vers le sud est']);
  this.executeCharTest('⦫', ['angle calculé à bras vers l\'ouest et bras fléché vers le sud ouest']);
  this.executeCharTest('⦬', ['angle calculé à bras vers le nord et bras fléché vers le nord est']);
  this.executeCharTest('⦭', ['angle calculé à bras vers le nord et bras fléché vers le nord ouest']);
  this.executeCharTest('⦮', ['angle calculé à bras vers le sud et bras fléché vers le sud est']);
  this.executeCharTest('⦯', ['angle calculé à bras vers le sud et bras fléché vers le sud ouest']);
  this.executeCharTest('←', ['flèche gauche']);
  this.executeCharTest('↑', ['flèche vers le haut']);
  this.executeCharTest('→', ['flèche droite']);
  this.executeCharTest('↓', ['flèche vers le bas']);
  this.executeCharTest('↔', ['flèche bilatérale']);
  this.executeCharTest('↕', ['flèche haut et bas']);
  this.executeCharTest('↖', ['flèche nord ouest']);
  this.executeCharTest('↗', ['flèche nord est']);
  this.executeCharTest('↘', ['flèche sud est']);
  this.executeCharTest('↙', ['flèche sud ouest']);
  this.executeCharTest('↚', ['flèche barrée gauche']);
  this.executeCharTest('↛', ['flèche barrée droite']);
  this.executeCharTest('↜', ['flèche ondulée gauche']);
  this.executeCharTest('↝', ['flèche ondulée droite']);
  this.executeCharTest('↞', ['flèche à deux pointes gauche']);
  this.executeCharTest('↟', ['flèche à deux pointes vers le haut']);
  this.executeCharTest('↠', ['flèche à deux pointes droite']);
  this.executeCharTest('↡', ['flèche à deux pointes vers le bas']);
  this.executeCharTest('↢', ['flèche empennée gauche']);
  this.executeCharTest('↣', ['flèche empennée droite']);
  this.executeCharTest('↤', ['flèche d\'un taquet gauche']);
  this.executeCharTest('↥', ['flèche d\'un taquet vers le haut']);
  this.executeCharTest('↦', ['flèche d\'un taquet droite']);
  this.executeCharTest('↧', ['flèche d\'un taquet vers le bas']);
  this.executeCharTest('↨', ['flèche haut bas sur base']);
  this.executeCharTest('↩', ['flèche avec crochet gauche']);
  this.executeCharTest('↪', ['flèche avec crochet droite']);
  this.executeCharTest('↫', ['flèche avec boucle gauche']);
  this.executeCharTest('↬', ['flèche avec boucle droite']);
  this.executeCharTest('↭', ['flèche ondulée bilatérale']);
  this.executeCharTest('↮', ['flèche barrée bilatérale']);
  this.executeCharTest('↯', ['flèche vers le bas en zigzag']);
  this.executeCharTest('↰', ['flèche vers le haut avec pointe gauche']);
  this.executeCharTest('↱', ['flèche vers le haut avec pointe droite']);
  this.executeCharTest('↲', ['flèche vers le bas avec pointe gauche']);
  this.executeCharTest('↳', ['flèche vers le bas avec pointe droite']);
  this.executeCharTest('↴', ['flèche vers le bas avec coin droit']);
  this.executeCharTest('↵', ['flèche vers le bas avec coin gauche']);
  this.executeCharTest('↶', ['flèche semi circulaire en sens positif']);
  this.executeCharTest('↷', ['flèche semi circulaire en sens négatif']);
  this.executeCharTest('↸', ['flèche nord ouest vers une barre horizontale longue']);
  this.executeCharTest('↹', ['flèche gauche vers un taquet sur flèche droite vers un taquet']);
  this.executeCharTest('↺', ['flèche en sens positif à cercle ouvert']);
  this.executeCharTest('↻', ['flèche en sens négatif à cercle ouvert']);
  this.executeCharTest('⇄', ['flèche vers le haut par dessus flèche gauche']);
  this.executeCharTest('⇅', ['flèche vers le haut à gauche d\'une flèche vers le bas']);
  this.executeCharTest('⇆', ['flèche gauche par dessus flèche droite']);
  this.executeCharTest('⇇', ['paire de flèches gauche']);
  this.executeCharTest('⇈', ['paire de flèches vers le haut']);
  this.executeCharTest('⇉', ['paire de flèches droite']);
  this.executeCharTest('⇊', ['paire de flèches vers le bas']);
  this.executeCharTest('⇍', ['double flèche barrée gauche']);
  this.executeCharTest('⇎', ['double flèche barrée bilatérale']);
  this.executeCharTest('⇏', ['double flèche barrée droite']);
  this.executeCharTest('⇐', ['double flèche gauche']);
  this.executeCharTest('⇑', ['double flèche vers le haut']);
  this.executeCharTest('⇒', ['double flèche droite']);
  this.executeCharTest('⇓', ['double flèche vers le bas']);
  this.executeCharTest('⇔', ['double flèche bilatérale']);
  this.executeCharTest('⇕', ['double flèche haut bas']);
  this.executeCharTest('⇖', ['double flèche nord ouest']);
  this.executeCharTest('⇗', ['double flèche nord est']);
  this.executeCharTest('⇘', ['double flèche sud est']);
  this.executeCharTest('⇙', ['double flèche sud ouest']);
  this.executeCharTest('⇚', ['triple flèche gauche']);
  this.executeCharTest('⇛', ['triple flèche droite']);
  this.executeCharTest('⇜', ['flèche en tire bouchon gauche']);
  this.executeCharTest('⇝', ['flèche en tire bouchon droite']);
  this.executeCharTest('⇞', ['flèche vers le haut avec double barre']);
  this.executeCharTest('⇟', ['flèche vers le bas avec double barre']);
  this.executeCharTest('⇠', ['flèche pointillée gauche']);
  this.executeCharTest('⇡', ['flèche pointillée vers le haut']);
  this.executeCharTest('⇢', ['flèche pointillée droite']);
  this.executeCharTest('⇣', ['flèche pointillée vers le bas']);
  this.executeCharTest('⇤', ['flèche gauche vers un taquet']);
  this.executeCharTest('⇥', ['flèche droite vers un taquet']);
  this.executeCharTest('⇦', ['flèche blanche gauche']);
  this.executeCharTest('⇧', ['flèche blanche vers le haut']);
  this.executeCharTest('⇨', ['flèche blanche droite']);
  this.executeCharTest('⇩', ['flèche blanche vers le bas']);
  this.executeCharTest('⇪', ['flèche blanche vers le haut à partir d\'un taquet']);
  this.executeCharTest('⇫', ['flèche blanche vers le haut sur socle']);
  this.executeCharTest('⇬', ['flèche blanche vers le haut sur socle et trait horizontal']);
  this.executeCharTest('⇭', ['flèche blanche vers le haut sur socle et barre verticale']);
  this.executeCharTest('⇮', ['double flèche blanche vers le haut']);
  this.executeCharTest('⇯', ['double flèche blanche vers le haut sur socle']);
  this.executeCharTest('⇰', ['flèche blanche vers la droite appuyée sur mur']);
  this.executeCharTest('⇱', ['flèche nord ouest en encoignure']);
  this.executeCharTest('⇲', ['flèche sud est en encoignure']);
  this.executeCharTest('⇳', ['flèche blanche vers le haut et le bas']);
  this.executeCharTest('⇴', ['flèche vers la droite à petit cercle']);
  this.executeCharTest('⇵', ['flèche descendante à gauche d\'une flèche montante']);
  this.executeCharTest('⇶', ['trois flèches vers la droite']);
  this.executeCharTest('⇷', ['flèche vers la gauche barrée verticalement']);
  this.executeCharTest('⇸', ['flèche vers la droite barrée verticalement']);
  this.executeCharTest('⇹', ['flèche vers la droite et la gauche barrée verticalement']);
  this.executeCharTest('⇺', ['flèche vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⇻', ['flèche vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⇼', ['flèche bilatérale barrée deux fois verticalement']);
  this.executeCharTest('⇽', ['flèche à tête creuse gauche']);
  this.executeCharTest('⇾', ['flèche à tête creuse droite']);
  this.executeCharTest('⇿', ['flèche à tête creuse bilatérale']);
  this.executeCharTest('⌁', ['flèche électrique']);
  this.executeCharTest('⌃', ['pointe de flèche vers le haut']);
  this.executeCharTest('⌄', ['pointe de flèche vers le bas']);
  this.executeCharTest('⌤', ['pointe de flèche vers le haut entre deux traits horizontaux']);
  this.executeCharTest('⎋', ['cercle brisé à flèche nord ouest (échappement)']);
  this.executeCharTest('➔', ['flèche grasse vers la droite à pointe large']);
  this.executeCharTest('➘', ['flèche grasse sud est']);
  this.executeCharTest('➙', ['flèche grasse vers la droite grasse']);
  this.executeCharTest('➚', ['flèche grasse nord est']);
  this.executeCharTest('➛', ['flèche de traçage vers la droite']);
  this.executeCharTest('➜', ['flèche grasse à pointe arrondie vers la droite']);
  this.executeCharTest('➝', ['flèche à pointe en triangle vers la droite']);
  this.executeCharTest('➞', ['flèche grasse à pointe en triangle vers la droite']);
  this.executeCharTest('➟', ['flèche avec pointillés à pointe en triangle vers la droite']);
  this.executeCharTest('➠', ['flèche grasse avec pointillés à pointe en triangle vers la droite']);
  this.executeCharTest('➡', ['flèche noire vers la droite']);
  this.executeCharTest('➢', ['pointe de flèche vers la droite en trompe l\'œil éclairée par le haut']);
  this.executeCharTest('➣', ['pointe de flèche vers la droite en trompe l\'œil éclairée par le bas']);
  this.executeCharTest('➤', ['pointe de flèche noire vers la droite']);
  this.executeCharTest('➥', ['flèche noire grasse courbée vers le bas et vers la droite']);
  this.executeCharTest('➦', ['flèche noire courbée vers le haut et vers la droite']);
  this.executeCharTest('➧', ['flèche noire trapue vers la droite']);
  this.executeCharTest('➨', ['flèche noire grasse à pointe concave vers la droite']);
  this.executeCharTest('➩', ['flèche blanche vers la droite ombrée à l\'avant']);
  this.executeCharTest('➪', ['flèche blanche vers la droite ombrée à l\'arrière']);
  this.executeCharTest('➫', ['flèche blanche vers la droite penchée vers l\'arrière et ombrée']);
  this.executeCharTest('➬', ['flèche blanche vers la droite penchée vers l\'avant et ombrée']);
  this.executeCharTest('➭', ['flèche blanche grasse vers la droite à ombre inférieure droite']);
  this.executeCharTest('➮', ['flèche blanche grasse vers la droite à ombre supérieure droite']);
  this.executeCharTest('➯', ['flèche encochée blanche vers la droite ombrée à l\'avant et par dessous']);
  this.executeCharTest('➱', ['flèche encochée blanche vers la droite ombrée à l\'avant et par dessus']);
  this.executeCharTest('➲', ['flèche blanche grasse vers la droite à contour circulaire']);
  this.executeCharTest('➳', ['flèche empennée blanche vers la droite']);
  this.executeCharTest('➴', ['flèche empennée noir sud est']);
  this.executeCharTest('➵', ['flèche empennée noir vers la droite']);
  this.executeCharTest('➶', ['flèche empennée noir nord est']);
  this.executeCharTest('➷', ['flèche empennée gras noire sud est']);
  this.executeCharTest('➸', ['flèche empennée gras noire vers la droite']);
  this.executeCharTest('➹', ['flèche empennée gras noire nord est']);
  this.executeCharTest('➺', ['flèche vers la droite à pointe larmée']);
  this.executeCharTest('➻', ['flèche vers la droite à hampe larmée']);
  this.executeCharTest('➼', ['flèche vers la droite à queue en forme de coin']);
  this.executeCharTest('➽', ['flèche grasse vers la droite à queue en forme de coin']);
  this.executeCharTest('➾', ['flèche vers la droite à contour ouvert']);
  this.executeCharTest('⟰', ['quadruple flèche vers le haut']);
  this.executeCharTest('⟱', ['quadruple flèche vers le bas']);
  this.executeCharTest('⟲', ['flèche sens antihoraire entrouverte']);
  this.executeCharTest('⟳', ['flèche sens horaire entrouverte']);
  this.executeCharTest('⟴', ['flèche vers la droite à signe plus cerclé']);
  this.executeCharTest('⟵', ['longue flèche gauche']);
  this.executeCharTest('⟶', ['longue flèche droite']);
  this.executeCharTest('⟷', ['longue flèche bilatérale']);
  this.executeCharTest('⟸', ['longue double flèche gauche']);
  this.executeCharTest('⟹', ['longue double flèche droite']);
  this.executeCharTest('⟺', ['longue double flèche bilatérale']);
  this.executeCharTest('⟻', ['longue flèche d\'un taquet vers la gauche']);
  this.executeCharTest('⟼', ['longue flèche d\'un taquet droite']);
  this.executeCharTest('⟽', ['longue double flèche d\'un taquet vers la gauche']);
  this.executeCharTest('⟾', ['longue double flèche d\'un taquet vers la droite']);
  this.executeCharTest('⟿', ['longue flèche en tire bouchon droite']);
  this.executeCharTest('⤀', ['flèche à deux pointes vers la droite barrée verticalement']);
  this.executeCharTest('⤁', ['flèche à deux pointes vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⤂', ['double flèche vers la gauche barrée verticalement']);
  this.executeCharTest('⤃', ['double flèche vers la droite barrée verticalement']);
  this.executeCharTest('⤄', ['flèche bilatérale double barrée verticalement']);
  this.executeCharTest('⤅', ['flèche à deux têtes d\'un taquet droite']);
  this.executeCharTest('⤆', ['double flèche d\'un taquet vers la gauche']);
  this.executeCharTest('⤇', ['double flèche d\'un taquet vers la droite']);
  this.executeCharTest('⤈', ['flèche vers le bas barrée horizontalement']);
  this.executeCharTest('⤉', ['flèche vers le haut barrée horizontalement']);
  this.executeCharTest('⤊', ['triple flèche vers le haut']);
  this.executeCharTest('⤋', ['triple flèche vers le bas']);
  this.executeCharTest('⤌', ['flèche à deux traits gauche']);
  this.executeCharTest('⤍', ['flèche à deux traits droite']);
  this.executeCharTest('⤎', ['flèche à trois traits gauche']);
  this.executeCharTest('⤏', ['flèche à trois traits droite']);
  this.executeCharTest('⤐', ['flèche à trois traits et à deux têtes droite']);
  this.executeCharTest('⤑', ['flèche à fût pointillé droite']);
  this.executeCharTest('⤒', ['flèche jusqu\'à taquet vers le haut']);
  this.executeCharTest('⤓', ['flèche jusqu\'à taquet vers le bas']);
  this.executeCharTest('⤔', ['flèche empennée vers la droite barrée verticalement']);
  this.executeCharTest('⤕', ['flèche empennée vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⤖', ['flèche empennée à deux têtes droite']);
  this.executeCharTest('⤗', ['flèche empennée à deux têtes vers la droite barrée verticalement']);
  this.executeCharTest('⤘', ['flèche empennée à deux têtes vers la droite barrée deux fois verticalement']);
  this.executeCharTest('⤙', ['empenne gauche']);
  this.executeCharTest('⤚', ['empenne vers la droite']);
  this.executeCharTest('⤛', ['double empenne gauche']);
  this.executeCharTest('⤜', ['double empenne droite']);
  this.executeCharTest('⤝', ['flèche vers un losange noir à gauche']);
  this.executeCharTest('⤞', ['flèche vers un losange noir à droite']);
  this.executeCharTest('⤟', ['flèche d\'un taquet vers un losange noir à gauche']);
  this.executeCharTest('⤠', ['flèche d\'un taquet vers un losange noir à droite']);
  this.executeCharTest('⤡', ['flèche nord ouest et sud est']);
  this.executeCharTest('⤢', ['flèche nord est et sud ouest']);
  this.executeCharTest('⤣', ['flèche nord ouest à crochet']);
  this.executeCharTest('⤤', ['flèche nord est à crochet']);
  this.executeCharTest('⤥', ['flèche sud est à crochet']);
  this.executeCharTest('⤦', ['flèche sud ouest à crochet']);
  this.executeCharTest('⤧', ['flèches nord ouest et nord est']);
  this.executeCharTest('⤨', ['flèches nord est et sud est']);
  this.executeCharTest('⤩', ['flèches sud est et sud ouest']);
  this.executeCharTest('⤪', ['flèches sud ouest et nord ouest']);
  this.executeCharTest('⤭', ['flèche sud est sur flèche nord est']);
  this.executeCharTest('⤮', ['flèche nord est sur flèche sud est']);
  this.executeCharTest('⤯', ['diagonale descendante sur flèche nord est']);
  this.executeCharTest('⤰', ['diagonale montante sur flèche sud est']);
  this.executeCharTest('⤱', ['flèche nord est sur flèche nord ouest']);
  this.executeCharTest('⤲', ['flèche nord ouest sur flèche nord est']);
  this.executeCharTest('⤳', ['flèche bossue droite']);
  this.executeCharTest('⤴', ['flèche courbe vers la droite puis le haut']);
  this.executeCharTest('⤵', ['flèche courbe vers la droite puis le bas']);
  this.executeCharTest('⤶', ['flèche courbe vers le bas puis la gauche']);
  this.executeCharTest('⤷', ['flèche courbe vers le bas puis la droite']);
  this.executeCharTest('⤸', ['côté droit d\'arc fléché sens horaire']);
  this.executeCharTest('⤹', ['côté gauche d\'arc fléché sens antihoraire']);
  this.executeCharTest('⤺', ['arc supérieur fléché sens antihoraire']);
  this.executeCharTest('⤻', ['arc inférieur fléché sens antihoraire']);
  this.executeCharTest('⤼', ['arc fléché sens horaire et signe moins souscrit']);
  this.executeCharTest('⤽', ['arc fléché sens antihoraire et signe plus souscrit']);
  this.executeCharTest('⤾', ['demi cercle fléché inférieur droit sens horaire']);
  this.executeCharTest('⤿', ['demi cercle fléché inférieur gauche sens antihoraire']);
  this.executeCharTest('⥀', ['cercle fléché sens antihoraire']);
  this.executeCharTest('⥁', ['cercle fléché sens horaire']);
  this.executeCharTest('⥂', ['flèche vers la droite surmontant fléchette vers la gauche']);
  this.executeCharTest('⥃', ['flèche vers la gauche surmontant fléchette vers la droite']);
  this.executeCharTest('⥄', ['fléchette vers la droite surmontant flèche vers la gauche']);
  this.executeCharTest('⥅', ['flèche droite surmontant signe moins']);
  this.executeCharTest('⥆', ['flèche vers la gauche surmontant signe plus']);
  this.executeCharTest('⥇', ['flèche vers la droite au travers un x']);
  this.executeCharTest('⥈', ['petit cercle traversé d\'une flèche bilatérale']);
  this.executeCharTest('⥉', ['petit cercle surmonté d\'une flèche montante à deux têtes']);
  this.executeCharTest('⥰', ['flèche en épingle à cheveu droite']);
  this.executeCharTest('⥱', ['flèche droite surmontée d\'un égal']);
  this.executeCharTest('⥲', ['flèche droite surmontée d\'un tilde']);
  this.executeCharTest('⥳', ['tilde surmonté d\'une flèche gauche']);
  this.executeCharTest('⥴', ['tilde surmonté d\'une flèche droite']);
  this.executeCharTest('⥵', ['presque égal à surmonté d\'une flèche droite']);
  this.executeCharTest('⥶', ['inférieur à surmonté d\'une flèche gauche']);
  this.executeCharTest('⥷', ['flèche vers la gauche à travers un inférieur à']);
  this.executeCharTest('⥸', ['flèche droite surmontée d\'un supérieur à']);
  this.executeCharTest('⥹', ['flèche droite surmontée d\'un sous ensemble de']);
  this.executeCharTest('⥺', ['flèche vers la gauche au travers d\'un sous ensemble de']);
  this.executeCharTest('⥻', ['flèche gauche surmontée d\'un sur ensemble de']);
  this.executeCharTest('⦳', ['ensemble vide flèche droite en chef']);
  this.executeCharTest('⦴', ['ensemble vide flèche gauche en chef']);
  this.executeCharTest('⦽', ['cercle traversé d\'une flèche montante']);
  this.executeCharTest('⧪', ['losange noir à flèche vers le bas']);
  this.executeCharTest('⧬', ['cercle blanc à flèche vers le bas']);
  this.executeCharTest('⧭', ['cercle noir à flèche vers le bas']);
  this.executeCharTest('⨗', ['intégrale à crosse fléchée gauche']);
  this.executeCharTest('⬀', ['flèche blanche nord est']);
  this.executeCharTest('⬁', ['flèche blanche nord ouest']);
  this.executeCharTest('⬂', ['flèche blanche sud est']);
  this.executeCharTest('⬃', ['flèche blanche sud ouest']);
  this.executeCharTest('⬄', ['flèche blanche bilatérale']);
  this.executeCharTest('⬅', ['flèche noire vers la gauche']);
  this.executeCharTest('⬆', ['flèche noire vers le haut']);
  this.executeCharTest('⬇', ['flèche noire vers le bas']);
  this.executeCharTest('⬈', ['flèche noire nord est']);
  this.executeCharTest('⬉', ['flèche noire nord ouest']);
  this.executeCharTest('⬊', ['flèche noire sud est']);
  this.executeCharTest('⬋', ['flèche noire sud ouest']);
  this.executeCharTest('⬌', ['flèche noire bilatérale']);
  this.executeCharTest('⬍', ['flèche noire haut et bas']);
  this.executeCharTest('⬎', ['flèche vers la droite à pointe pliée vers le bas']);
  this.executeCharTest('⬏', ['flèche vers la droite à pointe pliée vers le haut']);
  this.executeCharTest('⬐', ['flèche vers la gauche à pointe pliée vers le bas']);
  this.executeCharTest('⬑', ['flèche vers la gauche à pointe pliée vers le haut']);
  this.executeCharTest('⬰', ['flèche vers la gauche à petit cercle']);
  this.executeCharTest('⬱', ['trois flèches vers la gauche']);
  this.executeCharTest('⬲', ['flèche vers la gauche à signe plus cerclé']);
  this.executeCharTest('⬳', ['longue flèche vers la gauche en tire bouchon']);
  this.executeCharTest('⬴', ['flèche à deux pointes vers la gauche barrée verticalement']);
  this.executeCharTest('⬵', ['flèche à deux pointes vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⬶', ['flèche à deux têtes d\'un taquet vers la gauche']);
  this.executeCharTest('⬷', ['flèche à trois traits et à deux têtes vers la gauche']);
  this.executeCharTest('⬸', ['flèche vers la gauche à fût pointillé']);
  this.executeCharTest('⬹', ['flèche empennée vers la gauche barrée verticalement']);
  this.executeCharTest('⬺', ['flèche empennée vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⬻', ['flèche empennée à deux têtes vers la gauche']);
  this.executeCharTest('⬼', ['flèche empennée à deux têtes vers la gauche barrée verticalement']);
  this.executeCharTest('⬽', ['flèche empennée à deux têtes vers la gauche barrée deux fois verticalement']);
  this.executeCharTest('⬾', ['flèche vers la gauche au travers un x']);
  this.executeCharTest('⬿', ['flèche vers la gauche bossue']);
  this.executeCharTest('⭀', ['flèche vers la gauche surmontée d\'un égal']);
  this.executeCharTest('⭁', ['flèche vers la gauche surmontée d\'un tilde']);
  this.executeCharTest('⭂', ['presque égal à réfléchi surmonté d\'une flèche vers la gauche']);
  this.executeCharTest('⭃', ['flèche vers la droite à travers un inférieur à']);
  this.executeCharTest('⭄', ['flèche vers la droite au travers d\'un sous ensemble de']);
  this.executeCharTest('⭅', ['quadruple flèche vers la gauche']);
  this.executeCharTest('⭆', ['quadruple flèche vers la droite']);
  this.executeCharTest('⭇', ['flèche vers la droite surmontée d\'un opérateur tilde réfléchi']);
  this.executeCharTest('⭈', ['presque égal à réfléchi surmonté d\'une flèche vers la droite']);
  this.executeCharTest('⭉', ['flèche vers la gauche surmontée de l\'opérateur tilde']);
  this.executeCharTest('⭊', ['flèche vers la gauche par dessus presque égal à']);
  this.executeCharTest('⭋', ['tilde réfléchi surmonté d\'une flèche vers la gauche']);
  this.executeCharTest('⭌', ['ilde surmonté d\'une flèche vers la droite']);
  this.executeCharTest('￩', ['flèche vers la gauche demi chasse']);
  this.executeCharTest('￪', ['flèche vers le haut demi chasse']);
  this.executeCharTest('￫', ['flèche vers la droite demi chasse']);
  this.executeCharTest('￬', ['flèche vers le bas demi chasse']);
  this.executeCharTest('ℓ', ['l minuscule en script']);
  this.executeCharTest('℘', ['fonction elliptique de weierstrass']);
  this.executeCharTest('ℼ', ['pi ajouré']);
  this.executeCharTest('ℽ', ['gamma ajouré']);
  this.executeCharTest('ℾ', ['Gamma majuscule ajouré']);
  this.executeCharTest('ℿ', ['Pi majuscule ajouré']);
  this.executeCharTest('⅀', ['sommation de la famille ajouré']);
  this.executeCharTest('ⅅ', ['D majuscule']);
  this.executeCharTest('ⅆ', ['d ajouré en italique']);
  this.executeCharTest('ⅇ', ['e ajouré en italique']);
  this.executeCharTest('ⅈ', ['i ajouré en italique']);
  this.executeCharTest('ⅉ', ['j ajouré en italique']);
  this.executeCharTest('𝚤', ['dotless i']);
  this.executeCharTest('𝚥', ['dotless j']);
  this.executeCharTest('(', ['parenthèse gauche']);
  this.executeCharTest(')', ['parenthèse droite']);
  this.executeCharTest('[', ['crochet gauche']);
  this.executeCharTest(']', ['crochet droit']);
  this.executeCharTest('{', ['accolade gauche']);
  this.executeCharTest('}', ['accolade droite']);
  this.executeCharTest('⁅', ['crochet gauche avec pique']);
  this.executeCharTest('⁆', ['crochet droit avec pique']);
  this.executeCharTest('⌈', ['plafond à gauche']);
  this.executeCharTest('⌉', ['plafond à droite']);
  this.executeCharTest('⌊', ['plancher à gauche']);
  this.executeCharTest('⌋', ['plancher à droite']);
  this.executeCharTest('⌌', ['repère sud est']);
  this.executeCharTest('⌍', ['repère sud ouest']);
  this.executeCharTest('⌎', ['repère nord est']);
  this.executeCharTest('⌏', ['repère nord ouest']);
  this.executeCharTest('⌜', ['coin nord ouest']);
  this.executeCharTest('⌝', ['coin nord est']);
  this.executeCharTest('⌞', ['coin sud ouest']);
  this.executeCharTest('⌟', ['coin sud est']);
  this.executeCharTest('⌠', ['moitié supérieure d\'intégrale']);
  this.executeCharTest('⌡', ['moitié inférieure d\'intégrale']);
  this.executeCharTest('〈', ['chevron gauche']);
  this.executeCharTest('〉', ['chevron droite']);
  this.executeCharTest('⎛', ['arc supérieur de parenthèse gauche']);
  this.executeCharTest('⎜', ['rallonge de parenthèse gauche']);
  this.executeCharTest('⎝', ['arc inférieur de parenthèse gauche']);
  this.executeCharTest('⎞', ['arc supérieur de parenthèse droite']);
  this.executeCharTest('⎟', ['rallonge de parenthèse droite']);
  this.executeCharTest('⎠', ['arc inférieur de parenthèse droite']);
  this.executeCharTest('⎡', ['coin supérieur de crochet gauche']);
  this.executeCharTest('⎢', ['rallonge de crochet gauche']);
  this.executeCharTest('⎣', ['coin inférieur de crochet gauche']);
  this.executeCharTest('⎤', ['coin supérieur de crochet droit']);
  this.executeCharTest('⎥', ['rallonge de crochet droit']);
  this.executeCharTest('⎦', ['coin inférieur de crochet droit']);
  this.executeCharTest('⎧', ['arc supérieur d\'accolade gauche']);
  this.executeCharTest('⎨', ['milieu d\'accolade gauche']);
  this.executeCharTest('⎩', ['arc inférieur d\'accolade gauche']);
  this.executeCharTest('⎪', ['rallonge d\'accolade']);
  this.executeCharTest('⎫', ['arc supérieur d\'accolade droite']);
  this.executeCharTest('⎬', ['milieu d\'accolade droite']);
  this.executeCharTest('⎭', ['arc inférieur d\'accolade droite']);
  this.executeCharTest('⎮', ['rallonge d\'intégrale']);
  this.executeCharTest('⎯', ['rallonge de ligne horizontale']);
  this.executeCharTest('⎰', ['moitié supérieure gauche ou inférieure droite d\'accolade']);
  this.executeCharTest('⎱', ['moitié supérieure droite ou inférieure gauche d\'accolade']);
  this.executeCharTest('⎲', ['haut du signe de somme']);
  this.executeCharTest('⎳', ['bas du signe de somme']);
  this.executeCharTest('⎴', ['crochet vertical supérieur']);
  this.executeCharTest('⎵', ['crochet vertical inférieur']);
  this.executeCharTest('⎶', ['crochet verticaux en défilé']);
  this.executeCharTest('⎷', ['bas du radical']);
  this.executeCharTest('⎸', ['filet vertical gauche']);
  this.executeCharTest('⎹', ['filet vertical droit']);
  this.executeCharTest('⏜', ['parenthèse supérieure']);
  this.executeCharTest('⏝', ['parenthèse inférieure']);
  this.executeCharTest('⏞', ['accolade supérieure']);
  this.executeCharTest('⏟', ['accolade inférieure']);
  this.executeCharTest('⏠', ['crochet en écaille supérieur']);
  this.executeCharTest('⏡', ['crochet en écaille inférieur']);
  this.executeCharTest('❨', ['parenthèse de fantaisie gauche demi grasse']);
  this.executeCharTest('❩', ['parenthèse de fantaisie droite demi grasse']);
  this.executeCharTest('❪', ['parenthèse de fantaisie gauche demi grasse aplatie']);
  this.executeCharTest('❫', ['parenthèse de fantaisie droite demi grasse aplatie']);
  this.executeCharTest('❬', ['chevron de fantaisie vers la gauche demi gras']);
  this.executeCharTest('❭', ['chevron de fantaisie vers la droite demi gras']);
  this.executeCharTest('❮', ['guillemet de fantaisie vers la gauche gras']);
  this.executeCharTest('❯', ['guillemet de fantaisie vers la droite gras']);
  this.executeCharTest('❰', ['crochet de fantaisie vers la gauche gras']);
  this.executeCharTest('❱', ['crochet de fantaisie vers la droite gras']);
  this.executeCharTest('❲', ['crochet de fantaisie gauche maigre en écaille']);
  this.executeCharTest('❳', ['crochet de fantaisie droit maigre en écaille']);
  this.executeCharTest('❴', ['accolade de fantaisie gauche moyenne']);
  this.executeCharTest('❵', ['accolade de fantaisie droite moyenne']);
  this.executeCharTest('⟅', ['délimiteur de sac en s gauche']);
  this.executeCharTest('⟆', ['délimiteur de sac en s droite']);
  this.executeCharTest('⟦', ['crochet blanc gauche']);
  this.executeCharTest('⟧', ['crochet blanc droit']);
  this.executeCharTest('⟨', ['chevron mathématique gauche']);
  this.executeCharTest('⟩', ['chevron droit']);
  this.executeCharTest('⟪', ['double chevron gauche']);
  this.executeCharTest('⟫', ['double chevron droit']);
  this.executeCharTest('⟬', ['crochet gauche en écaille blanche']);
  this.executeCharTest('⟭', ['crochet droit en écaille blanche']);
  this.executeCharTest('⟮', ['parenthèse gauche aplatie']);
  this.executeCharTest('⟯', ['parenthèse droite aplatie']);
  this.executeCharTest('⦃', ['accolade gauche ajourée']);
  this.executeCharTest('⦄', ['accolade droite ajourée']);
  this.executeCharTest('⦅', ['parenthèse gauche ajourée']);
  this.executeCharTest('⦆', ['parenthèse droite ajourée']);
  this.executeCharTest('⦇', ['parenthèse image de gauche en notation z']);
  this.executeCharTest('⦈', ['parenthèse image de droite en notation z']);
  this.executeCharTest('⦉', ['z notation left binding bracket']);
  this.executeCharTest('⦊', ['z notation right binding bracket']);
  this.executeCharTest('⦋', ['crochet gauche avec barre souscrite']);
  this.executeCharTest('⦌', ['crochet droit avec barre souscrite']);
  this.executeCharTest('⦍', ['crochet gauche avec trait dans le coin supérieur']);
  this.executeCharTest('⦎', ['crochet droit avec trait dans le coin inférieur']);
  this.executeCharTest('⦏', ['crochet gauche avec trait dans le coin inférieur']);
  this.executeCharTest('⦐', ['crochet droit avec trait dans le coin supérieur']);
  this.executeCharTest('⦑', ['chevron gauche pointé']);
  this.executeCharTest('⦒', ['chevron droit pointé']);
  this.executeCharTest('⦓', ['parenthèse arc gauche et inférieur à']);
  this.executeCharTest('⦔', ['parenthèse arc droite et supérieur à']);
  this.executeCharTest('⦕', ['parenthèse double arc droite et supérieur à']);
  this.executeCharTest('⦖', ['parenthèse double arc gauche et inférieur à']);
  this.executeCharTest('⦗', ['crochet noir gauche en écaille']);
  this.executeCharTest('⦘', ['crochet noir droite en écaille']);
  this.executeCharTest('⧘', ['clôture dentelée gauche']);
  this.executeCharTest('⧙', ['clôture dentelée droite']);
  this.executeCharTest('⧚', ['double clôture dentelée gauche']);
  this.executeCharTest('⧛', ['right double wiggly fence']);
  this.executeCharTest('⧼', ['chevron vers la gauche courbé']);
  this.executeCharTest('⧽', ['chevron vers la droite courbé']);
  this.executeCharTest('⸢', ['anglet supérieur gauche']);
  this.executeCharTest('⸣', ['anglet supérieur droit']);
  this.executeCharTest('⸤', ['anglet inférieur gauche']);
  this.executeCharTest('⸥', ['anglet inférieur droit']);
  this.executeCharTest('⸦', ['crampillon couché gauche']);
  this.executeCharTest('⸧', ['crampillon couché droit']);
  this.executeCharTest('⸨', ['double parenthèse gauche']);
  this.executeCharTest('⸩', ['double parenthèse droite']);
  this.executeCharTest('〈', ['chevron gauche']);
  this.executeCharTest('〉', ['chevron droit']);
  this.executeCharTest('《', ['double chevron gauche']);
  this.executeCharTest('》', ['double chevron droit']);
  this.executeCharTest('「', ['anglet gauche']);
  this.executeCharTest('」', ['anglet droit']);
  this.executeCharTest('『', ['anglet ajouré gauche']);
  this.executeCharTest('』', ['anglet ajouré droit']);
  this.executeCharTest('【', ['crochet noir lenticulaire gauche']);
  this.executeCharTest('】', ['crochet noir lenticulaire droit']);
  this.executeCharTest('〔', ['crochet gauche en écaille']);
  this.executeCharTest('〕', ['crochet droit en écaille']);
  this.executeCharTest('〖', ['crochet blanc lenticulaire gauche']);
  this.executeCharTest('〗', ['crochet blanc lenticulaire droit']);
  this.executeCharTest('〘', ['crochet blanc gauche en écaille']);
  this.executeCharTest('〙', ['crochet blanc droit en écaille']);
  this.executeCharTest('〚', ['crochet blanc gauche']);
  this.executeCharTest('〛', ['crochet blanc droit']);
  this.executeCharTest('〝', ['guillemet double prime réfléchi']);
  this.executeCharTest('〞', ['guillemet double prime']);
  this.executeCharTest('〟', ['guillemet double prime inférieur']);
  this.executeCharTest('﴾', ['parenthèse gauche ornée']);
  this.executeCharTest('﴿', ['parenthèse droite ornée']);
  this.executeCharTest('︗', ['forme de présentation de crochet blanc lenticulaire gauche vertical']);
  this.executeCharTest('︘', ['forme de présentation de crochet blanc lenticulaire droit vertical']);
  this.executeCharTest('︵', ['forme de présentation de parenthèse gauche verticale']);
  this.executeCharTest('︶', ['forme de présentation de parenthèse droite verticale']);
  this.executeCharTest('︷', ['forme de présentation d\'accolade gauche verticale']);
  this.executeCharTest('︸', ['forme de présentation d\'accolade droite verticale']);
  this.executeCharTest('︹', ['forme de présentation de crochet gauche vertical en écaille']);
  this.executeCharTest('︺', ['forme de présentation de crochet droit vertical en écaille']);
  this.executeCharTest('︻', ['forme de présentation de crochet gauche lenticulaire noir vertical']);
  this.executeCharTest('︼', ['forme de présentation de crochet droit lenticulaire noir vertical']);
  this.executeCharTest('︽', ['forme de présentation de crochet double gauche vertical']);
  this.executeCharTest('︾', ['forme de présentation de crochet double droit vertical']);
  this.executeCharTest('︿', ['over angle bracket']);
  this.executeCharTest('﹀', ['under angle bracket']);
  this.executeCharTest('﹁', ['forme de présentation de crochet vertical gauche en coin']);
  this.executeCharTest('﹂', ['forme de présentation de crochet vertical droit en coin']);
  this.executeCharTest('﹃', ['forme de présentation de crochet blanc vertical gauche en coin']);
  this.executeCharTest('﹄', ['forme de présentation de crochet blanc vertical droit en coin']);
  this.executeCharTest('﹇', ['forme de présentation de crochet gauche vertical']);
  this.executeCharTest('﹈', ['forme de présentation de crochet droit vertical']);
  this.executeCharTest('﹙', ['parenthèse gauche minuscule']);
  this.executeCharTest('﹚', ['parenthèse droite minuscule']);
  this.executeCharTest('﹛', ['accolade gauche minuscule']);
  this.executeCharTest('﹜', ['accolade droite minuscule']);
  this.executeCharTest('﹝', ['crochet gauche en écaille minuscule']);
  this.executeCharTest('﹞', ['crochet droit en écaille minuscule']);
  this.executeCharTest('（', ['parenthèse gauche pleine chasse']);
  this.executeCharTest('）', ['parenthèse droite pleine chasse']);
  this.executeCharTest('［', ['crochet gauche pleine chasse']);
  this.executeCharTest('］', ['crochet droit pleine chasse']);
  this.executeCharTest('｛', ['accolade gauche pleine chasse']);
  this.executeCharTest('｝', ['accolade droite pleine chasse']);
  this.executeCharTest('｟', ['parenthèse gauche ajourée pleine chasse *']);
  this.executeCharTest('｠', ['parenthèse droite ajourée pleine chasse *']);
  this.executeCharTest('｢', ['crochet gauche en coin demi chasse']);
  this.executeCharTest('｣', ['crochet droit en coin demi chasse']);
  this.executeCharTest('─', ['filet horizontal fin']);
  this.executeCharTest('━', ['filet horizontal gras']);
  this.executeCharTest('│', ['filet vertical fin']);
  this.executeCharTest('┃', ['filet vertical gras']);
  this.executeCharTest('┄', ['filet brisé triple horizontal fin']);
  this.executeCharTest('┅', ['filet brisé triple horizontal gras']);
  this.executeCharTest('┆', ['filet brisé triple vertical fin']);
  this.executeCharTest('┇', ['filet brisé triple vertical gras']);
  this.executeCharTest('┈', ['filet brisé quadruple horizontal fin']);
  this.executeCharTest('┉', ['filet brisé quadruple horizontal gras']);
  this.executeCharTest('┊', ['filet brisé quadruple vertical fin']);
  this.executeCharTest('┋', ['filet brisé quadruple vertical gras']);
  this.executeCharTest('┌', ['filet fin vers le bas et vers la droite']);
  this.executeCharTest('┍', ['filet fin vers le bas et gras vers la droite']);
  this.executeCharTest('┎', ['filet gras vers le bas et fin vers la droite']);
  this.executeCharTest('┏', ['filet gras vers le bas et vers la droite']);
  this.executeCharTest('┐', ['filet fin vers le bas et vers la gauche']);
  this.executeCharTest('┑', ['filet fin vers le bas et gras vers la gauche']);
  this.executeCharTest('┒', ['filet gras vers le bas et fin vers la gauche']);
  this.executeCharTest('┓', ['filet gras vers le bas et vers la gauche']);
  this.executeCharTest('└', ['filet fin vers le haut et vers la droite']);
  this.executeCharTest('┕', ['filet fin vers le haut et gras vers la droite']);
  this.executeCharTest('┖', ['filet gras vers le haut et fin vers la droite']);
  this.executeCharTest('┗', ['filet gras vers le haut et vers la droite']);
  this.executeCharTest('┘', ['filet fin vers le haut et vers la gauche']);
  this.executeCharTest('┙', ['filet fin vers le haut et gras vers la gauche']);
  this.executeCharTest('┚', ['filet gras vers le haut et fin vers la gauche']);
  this.executeCharTest('┛', ['filet gras vers le haut et vers la gauche']);
  this.executeCharTest('├', ['filet fin vertical et vers la droite']);
  this.executeCharTest('┝', ['filet fin vertical et gras vers la droite']);
  this.executeCharTest('┞', ['filet gras vers le haut et fin vers la droite et vers le bas']);
  this.executeCharTest('┟', ['filet gras vers le bas et fin vers la droite et vers le haut']);
  this.executeCharTest('┠', ['filet gras vertical et fin vers la droite']);
  this.executeCharTest('┡', ['filet fin vers le bas et gras vers la droite et vers le haut']);
  this.executeCharTest('┢', ['filet fin vers le haut et gras vers la droite et vers le bas']);
  this.executeCharTest('┣', ['filet gras vertical et vers la droite']);
  this.executeCharTest('┤', ['filet fin vertical et vers la gauche']);
  this.executeCharTest('┥', ['filet fin vertical et gras vers la gauche']);
  this.executeCharTest('┦', ['filet gras vers le haut et fin vers la gauche et vers le bas']);
  this.executeCharTest('┧', ['filet gras vers le bas et fin vers la gauche et vers le haut']);
  this.executeCharTest('┨', ['filet gras vertical et fin vers la gauche']);
  this.executeCharTest('┩', ['filet fin vers le bas et gras vers la gauche et vers le haut']);
  this.executeCharTest('┪', ['filet fin vers le haut et gras vers la gauche et vers le bas']);
  this.executeCharTest('┫', ['filet gras vertical et vers la gauche']);
  this.executeCharTest('┬', ['filet fin vers le bas et horizontal']);
  this.executeCharTest('┭', ['filet gras vers la gauche et fin vers la droite et vers le bas']);
  this.executeCharTest('┮', ['filet gras vers la droite et fin vers la gauche et vers le bas']);
  this.executeCharTest('┯', ['filet fin vers le bas et gras horizontal']);
  this.executeCharTest('┰', ['filet gras vers le bas et fin horizontal']);
  this.executeCharTest('┱', ['filet fin vers la droite et gras vers la gauche et vers le bas']);
  this.executeCharTest('┲', ['filet fin vers la gauche et gras vers la droite et vers le bas']);
  this.executeCharTest('┳', ['filet gras vers le bas et horizontal']);
  this.executeCharTest('┴', ['filet fin vers le haut et horizontal']);
  this.executeCharTest('┵', ['filet gras vers la gauche et fin vers la droite et vers le haut']);
  this.executeCharTest('┶', ['filet gras vers la droite et fin vers la gauche et vers le haut']);
  this.executeCharTest('┷', ['filet fin vers le haut et gras horizontal']);
  this.executeCharTest('┸', ['filet gras vers le haut et fin horizontal']);
  this.executeCharTest('┹', ['filet fin vers la droite et gras vers la gauche et vers le haut']);
  this.executeCharTest('┺', ['filet fin vers la gauche et gras vers la droite et vers le haut']);
  this.executeCharTest('┻', ['filet gras vers le haut et horizontal']);
  this.executeCharTest('┼', ['filet fin vertical et horizontal']);
  this.executeCharTest('┽', ['filet gras vers la gauche et fin vers la droite et vertical']);
  this.executeCharTest('┾', ['filet gras vers la droite et fin vers la gauche et vertical']);
  this.executeCharTest('┿', ['filet vertical fin et horizontal gras']);
  this.executeCharTest('╀', ['filet gras vers le haut et fin vers le bas et horizontal']);
  this.executeCharTest('╁', ['filet gras vers le bas et fin vers le haut et horizontal']);
  this.executeCharTest('╂', ['filet vertical gras et horizontal fin']);
  this.executeCharTest('╃', ['filet gras vers la gauche et vers le haut et fin vers la droite et vers le bas']);
  this.executeCharTest('╄', ['filet gras vers la droite et vers le haut et fin vers la gauche et vers le bas']);
  this.executeCharTest('╅', ['filet gras vers la gauche et vers le bas et fin vers la droite et vers le haut']);
  this.executeCharTest('╆', ['filet gras vers la droite et vers le bas et fin vers la gauche et vers le haut']);
  this.executeCharTest('╇', ['filet fin vers le bas et gras vers le haut et horizontal']);
  this.executeCharTest('╈', ['filet fin vers le haut et gras vers le bas et horizontal']);
  this.executeCharTest('╉', ['filet fin vers la droite et gras vers la gauche et vertical']);
  this.executeCharTest('╊', ['filet fin vers la gauche et gras vers la droite et vertical']);
  this.executeCharTest('╋', ['filet vertical et horizontal gras']);
  this.executeCharTest('╌', ['filet brisé double horizontal fin']);
  this.executeCharTest('╍', ['filet brisé double horizontal gras']);
  this.executeCharTest('╎', ['filet brisé double vertical fin']);
  this.executeCharTest('╏', ['filet brisé double vertical gras']);
  this.executeCharTest('═', ['filet double horizontal']);
  this.executeCharTest('║', ['filet double vertical']);
  this.executeCharTest('╒', ['filet simple le bas et double vers la droite']);
  this.executeCharTest('╓', ['filet double vers le bas et simple vers la droite']);
  this.executeCharTest('╔', ['filet double vers le bas et vers la droite']);
  this.executeCharTest('╕', ['filet simple vers le bas et double vers la gauche']);
  this.executeCharTest('╖', ['filet double vers le bas et simple vers la gauche']);
  this.executeCharTest('╗', ['filet double vers le bas et vers la gauche']);
  this.executeCharTest('╘', ['filet simple vers le haut et double vers la droite']);
  this.executeCharTest('╙', ['filet double vers le haut et simple vers la droite']);
  this.executeCharTest('╚', ['filet double vers le haut et vers la droite']);
  this.executeCharTest('╛', ['filet simple vers le haut et double vers la gauche']);
  this.executeCharTest('╜', ['filet double vers le haut et simple vers la gauche']);
  this.executeCharTest('╝', ['filet double vers le haut et vers la gauche']);
  this.executeCharTest('╞', ['filet vertical simple et droit double']);
  this.executeCharTest('╟', ['filet vertical double et droit simple']);
  this.executeCharTest('╠', ['filet double vertical et vers la droite']);
  this.executeCharTest('╡', ['filet vertical simple et gauche double']);
  this.executeCharTest('╢', ['filet vertical double et gauche simple']);
  this.executeCharTest('╣', ['filet double vertical et vers la gauche']);
  this.executeCharTest('╤', ['filet vers le bas simple et horizontal double']);
  this.executeCharTest('╥', ['filet vers le bas double et horizontal simple']);
  this.executeCharTest('╦', ['filet double vers le bas et horizontal']);
  this.executeCharTest('╧', ['filet vers le haut simple et horizontal double']);
  this.executeCharTest('╨', ['filet vers le haut double et horizontal simple']);
  this.executeCharTest('╩', ['filet double vers le haut et horizontal']);
  this.executeCharTest('╪', ['filet vertical simple et horizontal double']);
  this.executeCharTest('╫', ['filet vertical double et horizontal simple']);
  this.executeCharTest('╬', ['filet double vertical et horizontall']);
  this.executeCharTest('╭', ['filet fin arc vers le bas et vers la droite']);
  this.executeCharTest('╮', ['filet fin arc vers le bas et vers la gauche']);
  this.executeCharTest('╯', ['filet fin arc vers le haut et vers la gauche']);
  this.executeCharTest('╰', ['filet fin arc vers le haut et vers la droite']);
  this.executeCharTest('╱', ['filet diagonal fin du coin supérieur droit au coin inférieur gauche']);
  this.executeCharTest('╲', ['filet diagonal fin du coin supérieur gauche vers le coin inférieur droit']);
  this.executeCharTest('╳', ['filet diagonal fin en croix']);
  this.executeCharTest('╴', ['filet fin vers la gauche']);
  this.executeCharTest('╵', ['filet fin vers le haut']);
  this.executeCharTest('╶', ['filet fin vers la droite']);
  this.executeCharTest('╷', ['filet fin vers le bas']);
  this.executeCharTest('╸', ['filet gras vers la gauche']);
  this.executeCharTest('╹', ['filet gras vers le haut']);
  this.executeCharTest('╺', ['filet gras vers la droite']);
  this.executeCharTest('╻', ['filet gras vers le bas']);
  this.executeCharTest('╼', ['filet fin vers la gauche et gras vers la droite']);
  this.executeCharTest('╽', ['filet fin vers le haut et gras vers le bas']);
  this.executeCharTest('╾', ['filet gras vers la gauche et fin vers la droite']);
  this.executeCharTest('╿', ['filet gras vers le haut et fin vers le bas']);
  this.executeCharTest('▀', ['moitié supérieure de pavé']);
  this.executeCharTest('▁', ['huitième inférieur de pavé']);
  this.executeCharTest('▂', ['quart inférieur de pavé']);
  this.executeCharTest('▃', ['trois huitièmes inférieurs de pavé']);
  this.executeCharTest('▄', ['moitié inférieure de pavé']);
  this.executeCharTest('▅', ['cinq huitièmes inférieurs de pavé']);
  this.executeCharTest('▆', ['trois quarts inférieurs de pavé']);
  this.executeCharTest('▇', ['sept huitièmes inférieurs de pavé']);
  this.executeCharTest('█', ['pavé plein']);
  this.executeCharTest('▉', ['sept huitièmes gauches de pavé']);
  this.executeCharTest('▊', ['trois quarts gauches de pavé']);
  this.executeCharTest('▋', ['cinq huitièmes gauches de pavé']);
  this.executeCharTest('▌', ['moitié gauche de pavé']);
  this.executeCharTest('▍', ['trois huitièmes gauches de pavé']);
  this.executeCharTest('▎', ['un quart gauche de pavé']);
  this.executeCharTest('▏', ['un huitième gauche de pavé']);
  this.executeCharTest('▐', ['moitié droite de pavé']);
  this.executeCharTest('░', ['ombre légère']);
  this.executeCharTest('▒', ['ombre moyenne']);
  this.executeCharTest('▓', ['ombre foncée']);
  this.executeCharTest('▔', ['huitième supérieur de pavé']);
  this.executeCharTest('▕', ['huitième droit de pavé']);
  this.executeCharTest('▖', ['quadrant inférieur gauche']);
  this.executeCharTest('▗', ['quadrant inférieur droit']);
  this.executeCharTest('▘', ['quadrant supérieur gauche']);
  this.executeCharTest('▙', ['quadrant supérieur gauche inférieur gauche et inférieur droit']);
  this.executeCharTest('▚', ['quadrant supérieur gauche et inférieur droit']);
  this.executeCharTest('▛', ['quadrant supérieur gauche supérieur droit et inférieur gauche']);
  this.executeCharTest('▜', ['quadrant supérieur gauche supérieur droit et inférieur droit']);
  this.executeCharTest('▝', ['quadrant supérieur droit']);
  this.executeCharTest('▞', ['quadrant supérieur droit et inférieur gauche']);
  this.executeCharTest('▟', ['quadrant supérieur droit inférieur gauche et inférieur droit']);
  this.executeCharTest('■', ['petit carré noir']);
  this.executeCharTest('□', ['carré blanc']);
  this.executeCharTest('▢', ['carré blanc aux coins arrondis']);
  this.executeCharTest('▣', ['petit carré noir inscrit dans un carré blanc']);
  this.executeCharTest('▤', ['carré hachuré horizontalement']);
  this.executeCharTest('▥', ['carré hachuré verticalement']);
  this.executeCharTest('▦', ['carré quadrillé']);
  this.executeCharTest('▧', ['carré hachuré du haut à gauche vers le bas à droite']);
  this.executeCharTest('▨', ['carré hachuré du haut à droite vers le bas à gauche']);
  this.executeCharTest('▩', ['carré quadrillé en diagonale']);
  this.executeCharTest('▪', ['petit carré noir']);
  this.executeCharTest('▫', ['petit carré blanc']);
  this.executeCharTest('▬', ['rectangle noir']);
  this.executeCharTest('▭', ['rectangle blanc']);
  this.executeCharTest('▮', ['rectangle vertical noir']);
  this.executeCharTest('▯', ['white vertical rectangle']);
  this.executeCharTest('▰', ['parallélogramme noir']);
  this.executeCharTest('▱', ['parallélogramme blanc']);
  this.executeCharTest('▲', ['petit triangle noir pointant vers le haut']);
  this.executeCharTest('△', ['triangle blanc pointant vers le haut']);
  this.executeCharTest('▴', ['petit triangle noir pointant vers le haut']);
  this.executeCharTest('▵', ['petit triangle blanc pointant vers le haut']);
  this.executeCharTest('▶', ['petit triangle noir pointant vers la droite']);
  this.executeCharTest('▷', ['triangle blanc pointant vers la droite']);
  this.executeCharTest('▸', ['petit triangle noir pointant vers la droite']);
  this.executeCharTest('▹', ['petit triangle blanc pointant vers la droite']);
  this.executeCharTest('►', ['pointeur noir vers la droite']);
  this.executeCharTest('▻', ['pointeur blanc vers la droite']);
  this.executeCharTest('▼', ['petit triangle noir pointant vers le bas']);
  this.executeCharTest('▽', ['triangle blanc pointant vers le bas']);
  this.executeCharTest('▾', ['petit triangle noir pointant vers le bas']);
  this.executeCharTest('▿', ['petit triangle blanc pointant vers le bas']);
  this.executeCharTest('◀', ['petit triangle noir pointant vers la gauche']);
  this.executeCharTest('◁', ['petit triangle blanc pointant vers la gauche']);
  this.executeCharTest('◂', ['petit triangle noir pointant vers la gauche']);
  this.executeCharTest('◃', ['petit triangle blanc pointant vers la gauche']);
  this.executeCharTest('◄', ['pointeur noir vers la gauche']);
  this.executeCharTest('◅', ['pointeur blanc vers la gauche']);
  this.executeCharTest('◆', ['losange noir']);
  this.executeCharTest('◇', ['losange blanc']);
  this.executeCharTest('◈', ['losange blanc évidé']);
  this.executeCharTest('◉', ['cercle blanc évidé']);
  this.executeCharTest('◊', ['losange']);
  this.executeCharTest('○', ['cercle blanc']);
  this.executeCharTest('◌', ['cercle en pointillés']);
  this.executeCharTest('◍', ['cercle hachuré verticalement']);
  this.executeCharTest('◎', ['deux cercles concentriques']);
  this.executeCharTest('●', ['cercle noir']);
  this.executeCharTest('◐', ['cercle avec moitié gauche noire']);
  this.executeCharTest('◑', ['cercle avec moitié droite noire']);
  this.executeCharTest('◒', ['cercle avec moitié inférieure']);
  this.executeCharTest('◓', ['cercle avec moitié supérieure']);
  this.executeCharTest('◔', ['cercle avec quadrant supérieur droit noir']);
  this.executeCharTest('◕', ['disque avec quadrant supérieur gauche blanc']);
  this.executeCharTest('◖', ['demi disque gauche noir']);
  this.executeCharTest('◗', ['demi disque droite noir']);
  this.executeCharTest('◘', ['point noir au blanc']);
  this.executeCharTest('◙', ['cercle noir au blanc']);
  this.executeCharTest('◚', ['demi cercle supérieur noir au  blanc']);
  this.executeCharTest('◛', ['demi cercle inférieur noir au  blanc']);
  this.executeCharTest('◜', ['arc de cercle dans le quadrant supérieur gauchearc de cercle dans le quadrant supérieur gauche']);
  this.executeCharTest('◝', ['arc de cercle dans le quadrant supérieur droit']);
  this.executeCharTest('◞', ['arc de cercle dans le quadrant inférieur droit']);
  this.executeCharTest('◟', ['arc de cercle dans le quadrant inférieur gauche']);
  this.executeCharTest('◠', ['demi cercle supérieur']);
  this.executeCharTest('◡', ['demi cercle inférieur']);
  this.executeCharTest('◢', ['coin triangulaire noir inférieur droit']);
  this.executeCharTest('◣', ['coin triangulaire noir inférieur gauche']);
  this.executeCharTest('◤', ['coin triangulaire noir supérieur gauche']);
  this.executeCharTest('◥', ['coin triangulaire noir supérieur droit']);
  this.executeCharTest('◦', ['opérateur rond']);
  this.executeCharTest('◧', ['carré à moitié gauche noire']);
  this.executeCharTest('◨', ['carré à moitié droite noire']);
  this.executeCharTest('◩', ['carré à moitié supérieure gauche noire']);
  this.executeCharTest('◪', ['carré à moitié inférieure droite noire']);
  this.executeCharTest('◫', ['carré blanc à ligne bissectrice verticale']);
  this.executeCharTest('◬', ['triangle blanc pointant vers le haut pointé']);
  this.executeCharTest('◭', ['triangle pointe vers le haut À moitié gauche noire']);
  this.executeCharTest('◮', ['triangle pointe vers le haut À moitié droite noire']);
  this.executeCharTest('◯', ['grand cercle']);
  this.executeCharTest('◰', ['carré blanc à quartier supérieur gauche']);
  this.executeCharTest('◱', ['carré blanc à quartier inférieur gauche']);
  this.executeCharTest('◲', ['carré blanc à quartier inférieur droit']);
  this.executeCharTest('◳', ['carré blanc à quartier supérieur droit']);
  this.executeCharTest('◴', ['cercle blanc à quartier supérieur gauche']);
  this.executeCharTest('◵', ['cercle blanc à quartier inférieur gauche']);
  this.executeCharTest('◶', ['cercle blanc à quartier inférieur droit']);
  this.executeCharTest('◷', ['cercle blanc à quartier supérieur droit']);
  this.executeCharTest('◸', ['triangle rectangle supérieur gauche']);
  this.executeCharTest('◹', ['triangle rectangle supérieur droit']);
  this.executeCharTest('◺', ['triangle rectangle inférieur gauche']);
  this.executeCharTest('◻', ['carré moyen blanc']);
  this.executeCharTest('◼', ['carré moyen noir']);
  this.executeCharTest('◽', ['carré moyen blanc']);
  this.executeCharTest('◾', ['carré moyen noir']);
  this.executeCharTest('◿', ['triangle rectangle inférieur droit']);
  this.executeCharTest('⬒', ['carré à moitié supérieure noire']);
  this.executeCharTest('⬓', ['carré à moitié inférieure noire']);
  this.executeCharTest('⬔', ['carré à moitié diagonale supérieure droite noire']);
  this.executeCharTest('⬕', ['carré à moitié diagonale inférieure droite noire']);
  this.executeCharTest('⬖', ['losange à moitié gauche noire']);
  this.executeCharTest('⬗', ['losange à moitié droite noire']);
  this.executeCharTest('⬘', ['losange à moitié supérieure noire']);
  this.executeCharTest('⬙', ['losange à moitié inférieure noire']);
  this.executeCharTest('⬚', ['carré en pointillés']);
  this.executeCharTest('⬛', ['grand carré noir']);
  this.executeCharTest('⬜', ['grand carré blanc']);
  this.executeCharTest('⬝', ['très petit carré noir']);
  this.executeCharTest('⬞', ['très petit carré blanc']);
  this.executeCharTest('⬟', ['pentagone noir']);
  this.executeCharTest('⬠', ['pentagone blanc']);
  this.executeCharTest('⬡', ['hexagone blanc']);
  this.executeCharTest('⬢', ['hexagone noir']);
  this.executeCharTest('⬣', ['hexagone noir posé sur un côté']);
  this.executeCharTest('⬤', ['grand cercle noir']);
  this.executeCharTest('⬥', ['losange moyen noir']);
  this.executeCharTest('⬦', ['losange moyen blanc']);
  this.executeCharTest('⬧', ['rhombe moyen noir']);
  this.executeCharTest('⬨', ['rhombe moyen blanc']);
  this.executeCharTest('⬩', ['petit losange noir']);
  this.executeCharTest('⬪', ['petit rhombe noir']);
  this.executeCharTest('⬫', ['petit rhombe blanc']);
  this.executeCharTest('⬬', ['ellipse horizontale noire']);
  this.executeCharTest('⬭', ['ellipse horizontale blanche']);
  this.executeCharTest('⬮', ['ellipse verticale noire']);
  this.executeCharTest('⬯', ['ellipse verticale blanche']);
  this.executeCharTest('⭐', ['étoile blanche moyenne']);
  this.executeCharTest('⭑', ['petite étoile noire']);
  this.executeCharTest('⭒', ['petite étoile blanche']);
  this.executeCharTest('⭓', ['pentagone noir pointant vers la droite']);
  this.executeCharTest('⭔', ['pentagone blanc pointant vers la droite']);
  this.executeCharTest('⭕', ['grand cercle gras']);
  this.executeCharTest('⭖', ['ovale gras avec ovale inscrit']);
  this.executeCharTest('⭗', ['cercle gras avec cercle inscrit']);
  this.executeCharTest('⭘', ['cercle gras']);
  this.executeCharTest('⭙', ['sautoir cerclé gras']);
  this.executeCharTest('↼', ['harpon gauche avec dent dressée']);
  this.executeCharTest('↽', ['harpon gauche avec dent baissée']);
  this.executeCharTest('↾', ['harpon vers le haut avec dent droite']);
  this.executeCharTest('↿', ['harpon vers le haut avec dent gauche']);
  this.executeCharTest('⇀', ['harpon droit avec dent dressée']);
  this.executeCharTest('⇁', ['harpon droit avec dent baissée']);
  this.executeCharTest('⇂', ['harpon vers le bas avec dent droite']);
  this.executeCharTest('⇃', ['harpon vers le bas avec dent gauche']);
  this.executeCharTest('⇋', ['harpon gauche par dessus harpon droit']);
  this.executeCharTest('⇌', ['harpon droit par dessus harpon gauche']);
  this.executeCharTest('⥊', ['javelot à dents gauche dressée et droite baissée']);
  this.executeCharTest('⥋', ['javelot à dents gauche baissée et droite dressée']);
  this.executeCharTest('⥌', ['crampon à dents supérieure droite et inférieure gauche']);
  this.executeCharTest('⥍', ['crampon à dents supérieure gauche et inférieure droite']);
  this.executeCharTest('⥎', ['javelot à dents droite et gauche dressées']);
  this.executeCharTest('⥏', ['javelot à dents supérieure et inférieure droites']);
  this.executeCharTest('⥐', ['javelot à dents droite et gauche baissées']);
  this.executeCharTest('⥑', ['javelot à dents supérieure et inférieure gauches']);
  this.executeCharTest('⥒', ['harpon gauche à dent dressée contre taquet']);
  this.executeCharTest('⥓', ['harpon droit à dent dressée contre taquet']);
  this.executeCharTest('⥔', ['harpon vers le haut à dent droite contre taquet']);
  this.executeCharTest('⥕', ['harpon vers le bas à dent droite contre taquet']);
  this.executeCharTest('⥖', ['harpon gauche à dent baissée contre taquet']);
  this.executeCharTest('⥗', ['harpon droit à dent baissée contre taquet']);
  this.executeCharTest('⥘', ['harpon vers le haut à dent gauche contre taquet']);
  this.executeCharTest('⥙', ['harpon vers le bas à dent gauche contre taquet']);
  this.executeCharTest('⥚', ['harpon gauche à dent dressée depuis taquet']);
  this.executeCharTest('⥛', ['harpon droit à dent dressée depuis taquet']);
  this.executeCharTest('⥜', ['harpon vers le haut à dent droite depuis taquet']);
  this.executeCharTest('⥝', ['harpon vers le bas à dent droite depuis taquet']);
  this.executeCharTest('⥞', ['harpon gauche à dent baissée depuis taquet']);
  this.executeCharTest('⥟', ['harpon droit à dent baissée depuis taquet']);
  this.executeCharTest('⥠', ['harpon vers le haut à dent gauche depuis taquet']);
  this.executeCharTest('⥡', ['harpon vers le bas à dent gauche depuis taquet']);
  this.executeCharTest('⥢', ['harpon gauche à dent dressée sur harpon gauche à dent baissée']);
  this.executeCharTest('⥣', ['harpon vers le haut à dent gauche à côté de harpon vers le haut à dent droite']);
  this.executeCharTest('⥤', ['harpon droit à dent dressée par dessus harpon droit à dent baissée']);
  this.executeCharTest('⥥', ['harpon vers le bas à dent gauche à côté de harpon vers le bas à dent droite']);
  this.executeCharTest('⥦', ['harpon à dent gauche dressée par dessus harpon à dent droite dressée']);
  this.executeCharTest('⥧', ['harpon à dent gauche baissée par dessus harpon à dent droite baissée']);
  this.executeCharTest('⥨', ['harpon à dent droite dressée par dessus harpon à dent gauche dressée']);
  this.executeCharTest('⥩', ['harpon à dent droite baissée par dessus harpon à dent gauche baissée']);
  this.executeCharTest('⥪', ['harpon à dent gauche dressée par dessus long trait']);
  this.executeCharTest('⥫', ['long trait par dessus harpon à dent gauche baissée']);
  this.executeCharTest('⥬', ['harpon à dent droite dressée par dessus long trait']);
  this.executeCharTest('⥭', ['long trait par dessus harpon à dent droite baissée']);
  this.executeCharTest('⥮', ['harpon vers le haut à dent gauche à côté de harpon vers le bas à dent droite']);
  this.executeCharTest('⥯', ['harpon vers le bas à dent gauche à côté de harpon vers le haut à dent droite']);
  this.executeCharTest('⥼', ['ancre gauche']);
  this.executeCharTest('⥽', ['ancre droite']);
  this.executeCharTest('⥾', ['ancre vers le haut']);
  this.executeCharTest('⥿', ['ancre vers le bas']);
  this.executeCharTest('ℏ', ['constante de planck sur deux pi']);
  this.executeCharTest('℔', ['symbole l b barré']);
  this.executeCharTest('№', ['symbole numéro']);
  this.executeCharTest('℗', ['copyright de programme sonore']);
  this.executeCharTest('℞', ['ordonnances']);
  this.executeCharTest('℟', ['répons']);
  this.executeCharTest('℠', ['symbole anglais marque de service']);
  this.executeCharTest('℡', ['signe de téléphone']);
  this.executeCharTest('™', ['symbole anglais marque de commerce']);
  this.executeCharTest('℣', ['versicule']);
  this.executeCharTest('℥', ['symbole once']);
  this.executeCharTest('Ω', ['ohm']);
  this.executeCharTest('℧', ['ohm culbuté']);
  this.executeCharTest('K', ['degré kelvin']);
  this.executeCharTest('Å', ['angstroms']);
  this.executeCharTest('℮', ['symbole estimé']);
  this.executeCharTest('Ⅎ', ['f culbuté majuscule']);
  this.executeCharTest('ℹ', ['bureau d\'information']);
  this.executeCharTest('℺', ['Q majuscule couché']);
  this.executeCharTest('℻', ['symbole télécopie']);
  this.executeCharTest('⅁', ['G culbuté majuscule sans empattement']);
  this.executeCharTest('⅂', ['L culbuté majuscule sans empattement']);
  this.executeCharTest('⅃', ['L réfléchi majuscule sans empattement']);
  this.executeCharTest('⅄', ['Y culbuté majuscule sans empattement']);
  this.executeCharTest('!', ['factorielle']);
  this.executeCharTest('"', ['petit guillemet']);
  this.executeCharTest('#', ['dièse']);
  this.executeCharTest('$', ['dollars']);
  this.executeCharTest('%', ['pourcent']);
  this.executeCharTest('&', ['esperluette']);
  this.executeCharTest('\'', ['prime']);
  this.executeCharTest('*', ['astérisque']);
  this.executeCharTest('+', ['plus']);
  this.executeCharTest(',', ['virgule']);
  this.executeCharTest('-', ['moins']);
  this.executeCharTest('.', ['point']);
  this.executeCharTest('/', ['barre oblique']);
  this.executeCharTest(':', ['deux points']);
  this.executeCharTest(';', ['point virgule']);
  this.executeCharTest('<', ['inférieur à']);
  this.executeCharTest('=', ['égale']);
  this.executeCharTest('>', ['supérieur à']);
  this.executeCharTest('?', ['point d\'interrogation']);
  this.executeCharTest('@', ['arobase']);
  this.executeCharTest('\\', ['barre oblique inversée']);
  this.executeCharTest('^', ['circonflexe']);
  this.executeCharTest('_', ['tiret bas']);
  this.executeCharTest('`', ['accent grave']);
  this.executeCharTest('|', ['barre verticale']);
  this.executeCharTest('~', ['tilde']);
  this.executeCharTest('¡', ['point d\'exclamation renversé']);
  this.executeCharTest('¢', ['centimes']);
  this.executeCharTest('£', ['livres']);
  this.executeCharTest('¤', ['symbole monétaire']);
  this.executeCharTest('¥', ['yen']);
  this.executeCharTest('¦', ['barre déjointe']);
  this.executeCharTest('§', ['paragraphe']);
  this.executeCharTest('¨', ['tréma']);
  this.executeCharTest('©', ['copyright']);
  this.executeCharTest('ª', ['indicateur ordinal féminin']);
  this.executeCharTest('«', ['guillemet chevron pointant gauche']);
  this.executeCharTest('¬', ['négation']);
  this.executeCharTest('®', ['symbole marque déposée']);
  this.executeCharTest('¯', ['macron']);
  this.executeCharTest('°', ['degrés']);
  this.executeCharTest('±', ['plus ou moins']);
  this.executeCharTest('´', ['accent aigu']);
  this.executeCharTest('µ', ['symbole micro']);
  this.executeCharTest('¶', ['fin de paragraphe']);
  this.executeCharTest('·', ['point médian']);
  this.executeCharTest('¸', ['cédille']);
  this.executeCharTest('º', ['indicateur ordinal masculin']);
  this.executeCharTest('»', ['guillemet chevron pointant droite']);
  this.executeCharTest('¿', ['point d\'interrogation renversé']);
  this.executeCharTest('×', ['multiplié par']);
  this.executeCharTest('÷', ['divisé par']);
  this.executeCharTest('˘', ['brève']);
  this.executeCharTest('˙', ['point en chef']);
  this.executeCharTest('˚', ['rond en chef']);
  this.executeCharTest('˛', ['ogonek']);
  this.executeCharTest('˜', ['tilde']);
  this.executeCharTest('˝', ['double accent aigu']);
  this.executeCharTest('‐', ['trait d\'union']);
  this.executeCharTest('‑', ['trait d\'union insécable']);
  this.executeCharTest('‒', ['tiret numérique']);
  this.executeCharTest('–', ['trait d\'union insécable']);
  this.executeCharTest('—', ['tiret numérique']);
  this.executeCharTest('―', ['barre horizontalle']);
  this.executeCharTest('‖', ['double ligne verticale']);
  this.executeCharTest('‗', ['double trait souscrit']);
  this.executeCharTest('‘', ['guillemet apostrophe culbuté']);
  this.executeCharTest('’', ['guillemet apostrophe']);
  this.executeCharTest('‚', ['guillemet virgule inférieur']);
  this.executeCharTest('‛', ['guillemet virgule supérieur culbuté']);
  this.executeCharTest('“', ['guillemet apostrophe double culbuté']);
  this.executeCharTest('”', ['guillemet apostrophe double']);
  this.executeCharTest('„', ['guillemet double prime']);
  this.executeCharTest('‟', ['guillemet virgule double supérieur culbuté']);
  this.executeCharTest('†', ['obèle']);
  this.executeCharTest('‡', ['double obèle']);
  this.executeCharTest('•', ['puce']);
  this.executeCharTest('‣', ['puce triangulaire']);
  this.executeCharTest('․', ['point de conduite simple']);
  this.executeCharTest('‥', ['point de conduite double']);
  this.executeCharTest('…', ['points de suspension']);
  this.executeCharTest('‧', ['point de coupure de mot']);
  this.executeCharTest('‰', ['symbole pour mille']);
  this.executeCharTest('‱', ['symbole pour dix mille']);
  this.executeCharTest('′', ['prime']);
  this.executeCharTest('″', ['double prime']);
  this.executeCharTest('‴', ['triple prime']);
  this.executeCharTest('‵', ['prime réfléchi']);
  this.executeCharTest('‶', ['double prime réfléchi']);
  this.executeCharTest('‷', ['triple prime réfléchi']);
  this.executeCharTest('‸', ['chevron d\'insertion']);
  this.executeCharTest('‹', ['guillemet simple gauche']);
  this.executeCharTest('›', ['guillemet simple droite']);
  this.executeCharTest('※', ['marque de référence']);
  this.executeCharTest('‼', ['double point d\'exclamation']);
  this.executeCharTest('‽', ['point exclarrogatif']);
  this.executeCharTest('‾', ['tiret en chef']);
  this.executeCharTest('‿', ['tirant souscrit']);
  this.executeCharTest('⁀', ['tirant en chef']);
  this.executeCharTest('⁁', ['lambda d\'insertion']);
  this.executeCharTest('⁂', ['astérisme']);
  this.executeCharTest('⁃', ['puce trait d\'union']);
  this.executeCharTest('⁄', ['barre de fraction']);
  this.executeCharTest('⁇', ['double point d\'interrogation']);
  this.executeCharTest('⁈', ['point d\'interrogation exclamation']);
  this.executeCharTest('⁉', ['point d\'exclamation interrogation']);
  this.executeCharTest('⁋', ['pied de mouche réfléchi']);
  this.executeCharTest('⁌', ['puce noire tronquée à droite']);
  this.executeCharTest('⁍', ['puce noire tronquée à gauche']);
  this.executeCharTest('⁎', ['astérisque baissé']);
  this.executeCharTest('⁏', ['point virgule réfléchi']);
  this.executeCharTest('⁐', ['resserrer']);
  this.executeCharTest('⁑', ['deux astérisques alignés verticalement']);
  this.executeCharTest('⁒', ['moins commercial']);
  this.executeCharTest('⁓', ['tiret ondé']);
  this.executeCharTest('⁔', ['dos d\'âne souscrit']);
  this.executeCharTest('⁕', ['point fleur']);
  this.executeCharTest('⁖', ['trois points']);
  this.executeCharTest('⁗', ['quadruple prime']);
  this.executeCharTest('⁘', ['quatre points en losange']);
  this.executeCharTest('⁙', ['cinq points en quinconce']);
  this.executeCharTest('⁚', ['deux points en capitale']);
  this.executeCharTest('⁛', ['quatre points en croix']);
  this.executeCharTest('⁜', ['croix pointée']);
  this.executeCharTest('⁝', ['trois points vertical']);
  this.executeCharTest('⁞', ['quatre points vertical']);
  this.executeCharTest('⁺', ['exposant signe plus']);
  this.executeCharTest('⁻', ['exposant signe moins']);
  this.executeCharTest('⁼', ['exposant signe égal']);
  this.executeCharTest('⁽', ['exposant parenthèse gauche']);
  this.executeCharTest('⁾', ['exposant parenthèse droite']);
  this.executeCharTest('₊', ['indice signe plus']);
  this.executeCharTest('₋', ['indice signe moins']);
  this.executeCharTest('₌', ['indice signe égal']);
  this.executeCharTest('₍', ['indice parenthèse gauche']);
  this.executeCharTest('₎', ['indice parenthèse droite']);
  this.executeCharTest('⅊', ['limite de propriété']);
  this.executeCharTest('⅋', ['perluète culbutée']);
  this.executeCharTest('⅌', ['symbole per']);
  this.executeCharTest('⅍', ['aktieselskab']);
  this.executeCharTest('ⅎ', ['minuscule f culbuté']);
  this.executeCharTest('∀', ['pour tous']);
  this.executeCharTest('∁', ['complément']);
  this.executeCharTest('∃', ['il existe']);
  this.executeCharTest('∄', ['il n\'existe pas']);
  this.executeCharTest('∅', ['ensemble vide']);
  this.executeCharTest('∆', ['incrément']);
  this.executeCharTest('∈', ['appartient à']);
  this.executeCharTest('∉', ['n\'appartient pas à']);
  this.executeCharTest('∊', ['appartient à']);
  this.executeCharTest('∋', ['contient comme élément']);
  this.executeCharTest('∌', ['ne contient pas comme élément']);
  this.executeCharTest('∍', ['contient comme élément']);
  this.executeCharTest('∎', ['ce qu\'il fallait démontrer']);
  this.executeCharTest('∏', ['produit']);
  this.executeCharTest('∐', ['coproduit']);
  this.executeCharTest('∑', ['sommation']);
  this.executeCharTest('−', ['moins']);
  this.executeCharTest('∓', ['moins ou plus']);
  this.executeCharTest('∔', ['plus pointé']);
  this.executeCharTest('∕', ['division']);
  this.executeCharTest('∖', ['différence d\'ensembles']);
  this.executeCharTest('∗', ['opérateur astérisque']);
  this.executeCharTest('∘', ['opérateur rond']);
  this.executeCharTest('∙', ['point médian']);
  this.executeCharTest('√', ['racine carrée']);
  this.executeCharTest('∛', ['racine cubique']);
  this.executeCharTest('∜', ['racine quatrième']);
  this.executeCharTest('∝', ['proportionnel à']);
  this.executeCharTest('∞', ['infini']);
  this.executeCharTest('∟', ['angle droit']);
  this.executeCharTest('∠', ['angle']);
  this.executeCharTest('∡', ['angle mesuré']);
  this.executeCharTest('∢', ['angle sphérique']);
  this.executeCharTest('∣', ['est un diviseur de']);
  this.executeCharTest('∤', ['n\'est pas un diviseur de']);
  this.executeCharTest('∥', ['parallèle à']);
  this.executeCharTest('∦', ['non parallèle à']);
  this.executeCharTest('∧', ['et logique']);
  this.executeCharTest('∨', ['ou logique']);
  this.executeCharTest('∩', ['intersection']);
  this.executeCharTest('∪', ['union']);
  this.executeCharTest('∫', ['intégrale']);
  this.executeCharTest('∬', ['intégrale double']);
  this.executeCharTest('∭', ['intégrale triple']);
  this.executeCharTest('∮', ['intégrale de contour']);
  this.executeCharTest('∯', ['intégrale de surface']);
  this.executeCharTest('∰', ['intégrale de volume']);
  this.executeCharTest('∱', ['intégrale en sens négatif']);
  this.executeCharTest('∲', ['intégrale de contour en sens négatif']);
  this.executeCharTest('∳', ['intégrale de contour en sens positif']);
  this.executeCharTest('∴', ['par conséquent']);
  this.executeCharTest('∵', ['parce que']);
  this.executeCharTest('∶', ['rapport']);
  this.executeCharTest('∷', ['proportion']);
  this.executeCharTest('∸', ['moins pointé']);
  this.executeCharTest('∹', ['excès']);
  this.executeCharTest('∺', ['proportion géométrique']);
  this.executeCharTest('∻', ['homothétique']);
  this.executeCharTest('∼', ['opérateur tilde']);
  this.executeCharTest('∽', ['opérateur tilde renversé']);
  this.executeCharTest('∾', ['s couché renversé']);
  this.executeCharTest('∿', ['sinusoïde']);
  this.executeCharTest('≀', ['produit couronne']);
  this.executeCharTest('≁', ['non tilde']);
  this.executeCharTest('≂', ['moins tilde']);
  this.executeCharTest('≃', ['asymptotiquement égal à']);
  this.executeCharTest('≄', ['non asymptotiquement égal à']);
  this.executeCharTest('≅', ['approximativement égal à']);
  this.executeCharTest('≆', ['approximativement mais non strictement égal à']);
  this.executeCharTest('≇', ['ni approximativement ni strictement égal à']);
  this.executeCharTest('≈', ['presque égal à']);
  this.executeCharTest('≉', ['non presque égal à']);
  this.executeCharTest('≊', ['presque égal ou égal à']);
  this.executeCharTest('≋', ['triple tilde']);
  this.executeCharTest('≌', ['entièrement égal à']);
  this.executeCharTest('≍', ['équivalent à']);
  this.executeCharTest('≎', ['géométriquement équivalent à']);
  this.executeCharTest('≏', ['différence entre']);
  this.executeCharTest('≐', ['tend vers la limite']);
  this.executeCharTest('≑', ['géométriquement égal à']);
  this.executeCharTest('≒', ['approximativement égal à ou image de']);
  this.executeCharTest('≓', ['image de ou approximativement égal à']);
  this.executeCharTest('≔', ['deux points égal']);
  this.executeCharTest('≕', ['égal deux points']);
  this.executeCharTest('≖', ['rond dans égal']);
  this.executeCharTest('≗', ['égal avec rond en chef']);
  this.executeCharTest('≘', ['correspond à']);
  this.executeCharTest('≙', ['estime']);
  this.executeCharTest('≚', ['équiangulaire à']);
  this.executeCharTest('≛', ['égal avec étoile en chef']);
  this.executeCharTest('≜', ['égal delta']);
  this.executeCharTest('≝', ['égal par définition à']);
  this.executeCharTest('≞', ['mesuré par']);
  this.executeCharTest('≟', ['égalité en doute']);
  this.executeCharTest('≠', ['pas égal à']);
  this.executeCharTest('≡', ['identique à']);
  this.executeCharTest('≢', ['non identique à']);
  this.executeCharTest('≣', ['strictement équivalent à']);
  this.executeCharTest('≤', ['plus petit ou égal à']);
  this.executeCharTest('≥', ['plus grand ou égal à']);
  this.executeCharTest('≦', ['plus petit que par dessus égal à']);
  this.executeCharTest('≧', ['plus grand que par dessus égal à']);
  this.executeCharTest('≨', ['plus petit mais pas égal à']);
  this.executeCharTest('≩', ['plus grand mais pas égal à']);
  this.executeCharTest('≪', ['beaucoup plus petit que']);
  this.executeCharTest('≫', ['beaucoup plus grand que']);
  this.executeCharTest('≬', ['entre']);
  this.executeCharTest('≭', ['non équivalent à']);
  this.executeCharTest('≮', ['pas plus petit que']);
  this.executeCharTest('≯', ['pas plus grand que']);
  this.executeCharTest('≰', ['ni plus petit ni égal à']);
  this.executeCharTest('≱', ['ni plus grand ni égal à']);
  this.executeCharTest('≲', ['plus petit ou équivalent à']);
  this.executeCharTest('≳', ['plus grand ou équivalent à']);
  this.executeCharTest('≴', ['ni plus petit ni équivalent à']);
  this.executeCharTest('≵', ['ni plus grand ni équivalent à']);
  this.executeCharTest('≶', ['plus petit ou plus grand que']);
  this.executeCharTest('≷', ['plus grand ou plus petit que']);
  this.executeCharTest('≸', ['ni plus petit ni plus grand que']);
  this.executeCharTest('≹', ['ni plus grand ni plus petit que']);
  this.executeCharTest('≺', ['précède']);
  this.executeCharTest('≻', ['suit']);
  this.executeCharTest('≼', ['précède ou est égal à']);
  this.executeCharTest('≽', ['suit ou est égal à']);
  this.executeCharTest('≾', ['précède ou est équivalent à']);
  this.executeCharTest('≿', ['suit ou est équivalent à']);
  this.executeCharTest('⊀', ['ne précède pas']);
  this.executeCharTest('⊁', ['ne suit pas']);
  this.executeCharTest('⊂', ['sous ensemble de']);
  this.executeCharTest('⊃', ['sur ensemble de']);
  this.executeCharTest('⊄', ['pas un sous ensemble de']);
  this.executeCharTest('⊅', ['pas un sur ensemble de']);
  this.executeCharTest('⊆', ['sous ensemble ou égal à']);
  this.executeCharTest('⊇', ['sur ensemble ou égal à']);
  this.executeCharTest('⊈', ['ni un sous ensemble ni égal à']);
  this.executeCharTest('⊉', ['ni un sur ensemble ni égal à']);
  this.executeCharTest('⊊', ['sous ensemble mais pas égal à']);
  this.executeCharTest('⊋', ['sur ensemble mais pas égal à']);
  this.executeCharTest('⊌', ['multiensemble']);
  this.executeCharTest('⊍', ['multiplication de multiensemble']);
  this.executeCharTest('⊎', ['union de multiensemble']);
  this.executeCharTest('⊏', ['image carrée de']);
  this.executeCharTest('⊐', ['original carré de']);
  this.executeCharTest('⊑', ['image carrée ou égal à']);
  this.executeCharTest('⊒', ['original carré ou égal à']);
  this.executeCharTest('⊓', ['chapeau carré']);
  this.executeCharTest('⊔', ['coupe carrée']);
  this.executeCharTest('⊕', ['plus cerclé']);
  this.executeCharTest('⊖', ['moins cerclé']);
  this.executeCharTest('⊗', ['multiplié par cerclé']);
  this.executeCharTest('⊘', ['barre oblique de division cerclée']);
  this.executeCharTest('⊙', ['opérateur point cerclé']);
  this.executeCharTest('⊚', ['opérateur rond cerclé']);
  this.executeCharTest('⊛', ['opérateur astérisque cerclé']);
  this.executeCharTest('⊜', ['égal cerclé']);
  this.executeCharTest('⊝', ['tiret cerclé']);
  this.executeCharTest('⊞', ['plus encadré']);
  this.executeCharTest('⊟', ['moins encadré']);
  this.executeCharTest('⊠', ['multiplié par encadré']);
  this.executeCharTest('⊡', ['opérateur point encadré']);
  this.executeCharTest('⊢', ['taquet droit']);
  this.executeCharTest('⊣', ['taquet gauche']);
  this.executeCharTest('⊤', ['taquet vers le bas']);
  this.executeCharTest('⊥', ['taquet vers le haut']);
  this.executeCharTest('⊦', ['assertion']);
  this.executeCharTest('⊧', ['modélise']);
  this.executeCharTest('⊨', ['vrai']);
  this.executeCharTest('⊩', ['oblige']);
  this.executeCharTest('⊪', ['barre verticale triple avec tourniquet à droite']);
  this.executeCharTest('⊫', ['barre verticale double avec tourniquet à droite double']);
  this.executeCharTest('⊬', ['ne prouve pas']);
  this.executeCharTest('⊭', ['pas vrai']);
  this.executeCharTest('⊮', ['n\'oblige pas']);
  this.executeCharTest('⊯', ['non barre verticale double avec tourniquet à droite double']);
  this.executeCharTest('⊰', ['précède sous relation']);
  this.executeCharTest('⊱', ['suit sous relation']);
  this.executeCharTest('⊲', ['sous groupe normal de']);
  this.executeCharTest('⊳', ['contient comme sous groupe normal']);
  this.executeCharTest('⊴', ['sous groupe normal ou égal à']);
  this.executeCharTest('⊵', ['contient comme sous groupe normal ou égal à']);
  this.executeCharTest('⊶', ['original de']);
  this.executeCharTest('⊷', ['image de']);
  this.executeCharTest('⊸', ['multijection']);
  this.executeCharTest('⊹', ['matrice hermitienne conjuguée']);
  this.executeCharTest('⊺', ['intercale']);
  this.executeCharTest('⊻', ['ou exclusif']);
  this.executeCharTest('⊼', ['non et']);
  this.executeCharTest('⊽', ['non ou']);
  this.executeCharTest('⊿', ['triangle rectangle']);
  this.executeCharTest('⋀', ['et logique de la famille']);
  this.executeCharTest('⋁', ['ou logique de la famille']);
  this.executeCharTest('⋂', ['intersection de la famille']);
  this.executeCharTest('⋃', ['réunion de la famille']);
  this.executeCharTest('⋄', ['opérateur losange']);
  this.executeCharTest('⋅', ['opérateur point']);
  this.executeCharTest('⋆', ['opérateur étoile']);
  this.executeCharTest('⋇', ['divisé multiplié']);
  this.executeCharTest('⋈', ['nœud papillon']);
  this.executeCharTest('⋉', ['produit semi direct à gauche de facteur normal']);
  this.executeCharTest('⋊', ['produit semi direct à droite de facteur normal']);
  this.executeCharTest('⋋', ['produit semi direct à gauche']);
  this.executeCharTest('⋌', ['produit semi direct à droite']);
  this.executeCharTest('⋍', ['moins tilde renversé']);
  this.executeCharTest('⋎', ['ou logique recourbé']);
  this.executeCharTest('⋏', ['et logique recourbé']);
  this.executeCharTest('⋐', ['sous ensemble double']);
  this.executeCharTest('⋑', ['sur ensemble double']);
  this.executeCharTest('⋒', ['intersection double']);
  this.executeCharTest('⋓', ['union double']);
  this.executeCharTest('⋔', ['fourche']);
  this.executeCharTest('⋕', ['égal et parallèle à']);
  this.executeCharTest('⋖', ['plus petit que pointé']);
  this.executeCharTest('⋗', ['plus grand que pointé']);
  this.executeCharTest('⋘', ['considérablement plus petit que']);
  this.executeCharTest('⋙', ['considérablement plus grand que']);
  this.executeCharTest('⋚', ['plus petit ou égal ou plus grand que']);
  this.executeCharTest('⋛', ['plus grand ou égal ou plus petit que']);
  this.executeCharTest('⋜', ['égal ou plus petit que']);
  this.executeCharTest('⋝', ['égal à deux lignes ou supérieur à']);
  this.executeCharTest('⋞', ['égal ou précède']);
  this.executeCharTest('⋟', ['égal ou suit']);
  this.executeCharTest('⋠', ['ni précédant ni égal à']);
  this.executeCharTest('⋡', ['ni suivant ni égal à']);
  this.executeCharTest('⋢', ['ni image carrée ni égal à']);
  this.executeCharTest('⋣', ['ni original carré ni égal à']);
  this.executeCharTest('⋤', ['image carré ou différent de']);
  this.executeCharTest('⋥', ['original carré ou différent de']);
  this.executeCharTest('⋦', ['plus petit mais non équivalent à']);
  this.executeCharTest('⋧', ['plus grand mais non équivalent à']);
  this.executeCharTest('⋨', ['précédant mais non équivalent à']);
  this.executeCharTest('⋩', ['suivant mais non équivalent à']);
  this.executeCharTest('⋪', ['pas un sous groupe normal de']);
  this.executeCharTest('⋫', ['ne contient pas comme sous groupe normal']);
  this.executeCharTest('⋬', ['ni sous groupe normal ni égal à']);
  this.executeCharTest('⋭', ['ni égal ni contenant comme sous  groupe normal']);
  this.executeCharTest('⋮', ['trois points suspendus']);
  this.executeCharTest('⋯', ['trois points médians']);
  this.executeCharTest('⋰', ['trois points diagonaux vers le coin haut à droite']);
  this.executeCharTest('⋱', ['trois points diagonaux vers le coin bas à droite']);
  this.executeCharTest('⋲', ['appartient à avec long trait horizontal']);
  this.executeCharTest('⋳', ['appartient à avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋴', ['petit appartient à avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋵', ['appartient à avec point en chef']);
  this.executeCharTest('⋶', ['appartient à avec trait en chef']);
  this.executeCharTest('⋷', ['petit appartient à avec trait en chef']);
  this.executeCharTest('⋸', ['appartient à avec trait souscrit']);
  this.executeCharTest('⋹', ['appartient à avec deux traits horizontaux']);
  this.executeCharTest('⋺', ['contient avec long trait horizontal']);
  this.executeCharTest('⋻', ['contient avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋼', ['petit contient avec barre verticale au bout du trait horizontal']);
  this.executeCharTest('⋽', ['contient avec trait en chef']);
  this.executeCharTest('⋾', ['petit contient avec trait en chef']);
  this.executeCharTest('⋿', ['appartient à un sac en notation z']);
  this.executeCharTest('⌀', ['diamètre']);
  this.executeCharTest('⌂', ['maison']);
  this.executeCharTest('⌅', ['projective']);
  this.executeCharTest('⌆', ['perspective']);
  this.executeCharTest('⌇', ['ligne ondulée']);
  this.executeCharTest('⌐', ['négation réfléchi']);
  this.executeCharTest('⌑', ['pastille carrée']);
  this.executeCharTest('⌒', ['arc']);
  this.executeCharTest('⌓', ['segment']);
  this.executeCharTest('⌔', ['secteur']);
  this.executeCharTest('➕', ['plus gras']);
  this.executeCharTest('➖', ['moins gras']);
  this.executeCharTest('➗', ['division gras']);
  this.executeCharTest('➰', ['boucle recourbée']);
  this.executeCharTest('➿', ['double boucle recourbée']);
  this.executeCharTest('⟁', ['petit triangle blanc inscrit dans triangle blanc']);
  this.executeCharTest('⟂', ['perpendiculaire à']);
  this.executeCharTest('⟃', ['sous ensemble ouvert']);
  this.executeCharTest('⟄', ['sur ensemble ouvert']);
  this.executeCharTest('⟇', ['ou avec point inscrit']);
  this.executeCharTest('⟈', ['sous ensemble précédé d\'une barre oblique inversée']);
  this.executeCharTest('⟉', ['sur ensemble suivi d\'une barre oblique']);
  this.executeCharTest('⟊', ['barre verticale À une traverse']);
  this.executeCharTest('⟋', ['diagonale mathématique ascendante']);
  this.executeCharTest('⟌', ['grande division']);
  this.executeCharTest('⟍', ['diagonale mathématique descendante']);
  this.executeCharTest('⟎', ['et logique encadré']);
  this.executeCharTest('⟏', ['ou logique encadré']);
  this.executeCharTest('⟐', ['losange blanc à point centré']);
  this.executeCharTest('⟑', ['et pointé']);
  this.executeCharTest('⟒', ['appartient À ouvert vers le haut']);
  this.executeCharTest('⟓', ['coin inférieur droit pointé']);
  this.executeCharTest('⟔', ['coin supérieur gauche pointé']);
  this.executeCharTest('⟕', ['jointure externe gauche']);
  this.executeCharTest('⟖', ['jointure externe droite']);
  this.executeCharTest('⟗', ['jointure externe complète']);
  this.executeCharTest('⟘', ['grand taquet vers le haut']);
  this.executeCharTest('⟙', ['grand taquet vers le bas']);
  this.executeCharTest('⟚', ['double tourniquet bilatéral']);
  this.executeCharTest('⟛', ['tourniquet bilatéral']);
  this.executeCharTest('⟜', ['multijection gauche']);
  this.executeCharTest('⟝', ['long taquet droit']);
  this.executeCharTest('⟞', ['long taquet gauche']);
  this.executeCharTest('⟟', ['taquet vers le haut surmonté d\'un cercle']);
  this.executeCharTest('⟠', ['losange coupé']);
  this.executeCharTest('⟡', ['losange concave blanc']);
  this.executeCharTest('⟢', ['losange concave blanc avec trait à gauche']);
  this.executeCharTest('⟣', ['losange concave blanc avec trait à droite']);
  this.executeCharTest('⟤', ['carré blanc avec trait à gauche']);
  this.executeCharTest('⟥', ['carré blanc avec trait à droite']);
  this.executeCharTest('⤫', ['diagonale montante sur diagonale descendante']);
  this.executeCharTest('⤬', ['diagonale descendante sur diagonale montante']);
  this.executeCharTest('⦀', ['délimiteur triple barre verticale']);
  this.executeCharTest('⦁', ['boulet']);
  this.executeCharTest('⦂', ['deux points de la notation z']);
  this.executeCharTest('⦙', ['clôture pointillée']);
  this.executeCharTest('⦚', ['ligne verticale en zigzag']);
  this.executeCharTest('⦰', ['ensemble vide réfléchi']);
  this.executeCharTest('⦱', ['ensemble vide barre en chef']);
  this.executeCharTest('⦲', ['ensemble vide petit cercle en chef']);
  this.executeCharTest('⦵', ['cercle à barre horizontale']);
  this.executeCharTest('⦶', ['barre verticale cerclée']);
  this.executeCharTest('⦷', ['parallèles cerclées']);
  this.executeCharTest('⦸', ['barre oblique inversée cerclée']);
  this.executeCharTest('⦹', ['perpendiculaire cerclé']);
  this.executeCharTest('⦺', ['cercle divisé par une barre horizontale et une barre verticale dans la moitié supérieure']);
  this.executeCharTest('⦻', ['cercle superposé d\'un x']);
  this.executeCharTest('⦼', ['division pivoté en sens antihoraire cerclé']);
  this.executeCharTest('⦾', ['puce blanche cerclée']);
  this.executeCharTest('⦿', ['puce cerclée']);
  this.executeCharTest('⧀', ['inférieur à cerclé']);
  this.executeCharTest('⧁', ['supérieur à cerclé']);
  this.executeCharTest('⧂', ['cercle avec petit cercle à droite']);
  this.executeCharTest('⧃', ['cercle avec deux petits traits horizontaux à droite']);
  this.executeCharTest('⧄', ['oblique encadrée']);
  this.executeCharTest('⧅', ['oblique inversée encadrée']);
  this.executeCharTest('⧆', ['astérisque encadré']);
  this.executeCharTest('⧇', ['petite cercle encadré']);
  this.executeCharTest('⧈', ['carré encadré']);
  this.executeCharTest('⧉', ['carrés se chevauchant']);
  this.executeCharTest('⧊', ['triangle pointé en chef']);
  this.executeCharTest('⧋', ['triangle à barre souscrite']);
  this.executeCharTest('⧌', ['s inscrit dans triangle']);
  this.executeCharTest('⧍', ['triangle à empattements inférieurs']);
  this.executeCharTest('⧎', ['triangle droit par dessus triangle gauche']);
  this.executeCharTest('⧏', ['triangle gauche à gauche d\'une barre verticale']);
  this.executeCharTest('⧐', ['triangle droit à droite d\'une barre verticale']);
  this.executeCharTest('⧑', ['nœud papillon à aile gauche noire']);
  this.executeCharTest('⧒', ['nœud papillon à aile droite noire']);
  this.executeCharTest('⧓', ['nœud papillon noir']);
  this.executeCharTest('⧔', ['multiplication à moitié gauche noircie']);
  this.executeCharTest('⧕', ['multiplication à moitié droite noircie']);
  this.executeCharTest('⧖', ['sablier blanc']);
  this.executeCharTest('⧗', ['sablier noir']);
  this.executeCharTest('⧜', ['infini incomplet']);
  this.executeCharTest('⧝', ['lorgnon']);
  this.executeCharTest('⧞', ['infini nié par une barre verticale']);
  this.executeCharTest('⧟', ['multijection à deux têtes']);
  this.executeCharTest('⧠', ['carré ombré']);
  this.executeCharTest('⧡', ['augmente avec']);
  this.executeCharTest('⧢', ['produit de permutation']);
  this.executeCharTest('⧣', ['égale à et parallèle à incliné']);
  this.executeCharTest('⧤', ['égale à et parallèle à incliné surmontés d\'un tilde']);
  this.executeCharTest('⧥', ['identique à et parallèle à incliné']);
  this.executeCharTest('⧦', ['gleich stark']);
  this.executeCharTest('⧧', ['thermodynamique']);
  this.executeCharTest('⧨', ['triangle pointe vers le bas à moitié gauche noire']);
  this.executeCharTest('⧩', ['triangle pointe vers le bas à moitié droite noire']);
  this.executeCharTest('⧫', ['losange fuselé noir']);
  this.executeCharTest('⧮', ['barre d\'erreur à carré blanc']);
  this.executeCharTest('⧯', ['barre d\'erreur à carré noir']);
  this.executeCharTest('⧰', ['barre d\'erreur à losange blanc']);
  this.executeCharTest('⧱', ['barre d\'erreur à losange noir']);
  this.executeCharTest('⧲', ['barre d\'erreur à cercle blanc']);
  this.executeCharTest('⧳', ['barre d\'erreur à cercle noir']);
  this.executeCharTest('⧴', ['règle différée']);
  this.executeCharTest('⧵', ['opérateur barre oblique inversée']);
  this.executeCharTest('⧶', ['barre oblique avec barre en chef']);
  this.executeCharTest('⧷', ['barre oblique inversée à traverse horizontale']);
  this.executeCharTest('⧸', ['grande barre oblique']);
  this.executeCharTest('⧹', ['grande barre oblique inversée']);
  this.executeCharTest('⧺', ['double plus']);
  this.executeCharTest('⧻', ['triple plus']);
  this.executeCharTest('⧾', ['tiny']);
  this.executeCharTest('⧿', ['miny']);
  this.executeCharTest('⨀', ['opérateur point cerclé n aire']);
  this.executeCharTest('⨁', ['opérateur plus cerclé n aire']);
  this.executeCharTest('⨂', ['opérateur multiplié par cerclé n aire']);
  this.executeCharTest('⨃', ['opérateur union n aire pointé']);
  this.executeCharTest('⨄', ['opérateur union n aire avec plus']);
  this.executeCharTest('⨅', ['opérateur intersection carré n aire']);
  this.executeCharTest('⨆', ['opérateur union carré n aire']);
  this.executeCharTest('⨇', ['opérateur deux et logiques']);
  this.executeCharTest('⨈', ['opérateur deux ou logiques']);
  this.executeCharTest('⨉', ['opérateur multiplié par n aire']);
  this.executeCharTest('⨊', ['sommation modulo deux']);
  this.executeCharTest('⨋', ['sommation avec intégrale']);
  this.executeCharTest('⨌', ['intégrale quadruple']);
  this.executeCharTest('⨍', ['intégrale à partie finie']);
  this.executeCharTest('⨎', ['intégrale à deux barres horizontales']);
  this.executeCharTest('⨏', ['moyenne d\'intégrale à barre oblique inversée']);
  this.executeCharTest('⨐', ['fonction de circulation']);
  this.executeCharTest('⨑', ['intégrale en sens positif']);
  this.executeCharTest('⨒', ['intégrale de ligne à chemin rectangulaire autour du pôle']);
  this.executeCharTest('⨓', ['intégrale de ligne à chemin semi circulaire autour du pôle']);
  this.executeCharTest('⨔', ['intégrale de ligne évitant le pôle']);
  this.executeCharTest('⨕', ['intégrale autour d\'un opérateur point']);
  this.executeCharTest('⨖', ['intégrale quaternion']);
  this.executeCharTest('⨘', ['intégrale au signe multiplié par']);
  this.executeCharTest('⨙', ['intégrale à signe intersection']);
  this.executeCharTest('⨚', ['intégrale à signe union']);
  this.executeCharTest('⨛', ['intégrale à barre en chef']);
  this.executeCharTest('⨜', ['intégrale à barre souscrite']);
  this.executeCharTest('⨝', ['jointure']);
  this.executeCharTest('⨞', ['gros opérateur triangle gauche']);
  this.executeCharTest('⨟', ['composition de schémas en notation z']);
  this.executeCharTest('⨠', ['tubage de schémas en notation z']);
  this.executeCharTest('⨡', ['projection de schémas en notation z']);
  this.executeCharTest('⨢', ['plus surmonté d\'un petit cercle']);
  this.executeCharTest('⨣', ['plus surmonté d\'un circonflexe']);
  this.executeCharTest('⨤', ['plus surmonté d\'un tilde']);
  this.executeCharTest('⨥', ['plus à point souscrit']);
  this.executeCharTest('⨦', ['plus à tilde souscrit']);
  this.executeCharTest('⨧', ['plus à chiffre deux souscrit']);
  this.executeCharTest('⨨', ['plus à triangle noir']);
  this.executeCharTest('⨩', ['moins surmonté d\'une virgule']);
  this.executeCharTest('⨪', ['moins à point souscrit']);
  this.executeCharTest('⨫', ['moins à points descendants']);
  this.executeCharTest('⨬', ['moins à points ascendants']);
  this.executeCharTest('⨭', ['plus dans demi cercle gauche']);
  this.executeCharTest('⨮', ['plus dans demi cercle droit']);
  this.executeCharTest('⨯', ['produit vectoriel']);
  this.executeCharTest('⨰', ['multiplication à point en chef']);
  this.executeCharTest('⨱', ['multiplication à barre souscrite']);
  this.executeCharTest('⨲', ['produit semi direct fermé en bas']);
  this.executeCharTest('⨳', ['produit fusionné']);
  this.executeCharTest('⨴', ['multiplication dans demi cercle gauche']);
  this.executeCharTest('⨵', ['multiplication dans demi cercle droit']);
  this.executeCharTest('⨶', ['multiplication cerclé circonflexe']);
  this.executeCharTest('⨷', ['multiplication doublement cerclé']);
  this.executeCharTest('⨸', ['division cerclé']);
  this.executeCharTest('⨹', ['plus dans triangle']);
  this.executeCharTest('⨺', ['moins dans triangle']);
  this.executeCharTest('⨻', ['multiplication dans triangle']);
  this.executeCharTest('⨼', ['produit interieur']);
  this.executeCharTest('⨽', ['produit intérieur à droite']);
  this.executeCharTest('⨾', ['composition relationnelle en notation z']);
  this.executeCharTest('⨿', ['amalgamation ou coproduit']);
  this.executeCharTest('⩀', ['intersection pointée']);
  this.executeCharTest('⩁', ['union à signe moins']);
  this.executeCharTest('⩂', ['union à barre en chef']);
  this.executeCharTest('⩃', ['intersection à barre en chef']);
  this.executeCharTest('⩄', ['intersection avec et logique']);
  this.executeCharTest('⩅', ['union avec ou logique']);
  this.executeCharTest('⩆', ['union par dessus intersection']);
  this.executeCharTest('⩇', ['intersection par dessus union']);
  this.executeCharTest('⩈', ['union par dessus bar par dessus intersection']);
  this.executeCharTest('⩉', ['intersection par dessus trait par dessus union']);
  this.executeCharTest('⩊', ['deux unions soudées côte à côte']);
  this.executeCharTest('⩋', ['deux intersections soudées côte à côte']);
  this.executeCharTest('⩌', ['union fermée à empattements']);
  this.executeCharTest('⩍', ['intersection fermée à empattements']);
  this.executeCharTest('⩎', ['deux intersections carrées emboîtées']);
  this.executeCharTest('⩏', ['deux unions carrées emboîtées']);
  this.executeCharTest('⩐', ['union fermée à empattements et produit fusionné']);
  this.executeCharTest('⩑', ['et logique à point en chef']);
  this.executeCharTest('⩒', ['ou logique à point en chef']);
  this.executeCharTest('⩓', ['double et logique']);
  this.executeCharTest('⩔', ['double ou logique']);
  this.executeCharTest('⩕', ['deux et logiques entrecroisés']);
  this.executeCharTest('⩖', ['deux ou logiques entrecroisés']);
  this.executeCharTest('⩗', ['grand ou pentu']);
  this.executeCharTest('⩘', ['grand et pentu']);
  this.executeCharTest('⩙', ['et et ou logiques entrecroisés']);
  this.executeCharTest('⩚', ['et logique à hampe médiane']);
  this.executeCharTest('⩛', ['ou logique à hampe médiane']);
  this.executeCharTest('⩜', ['et logique à tiret horizontal']);
  this.executeCharTest('⩝', ['ou logique à tiret horizontal']);
  this.executeCharTest('⩞', ['et logique à deux barres en chef']);
  this.executeCharTest('⩟', ['et logique à barre souscrite']);
  this.executeCharTest('⩠', ['et logique à deux barres souscrites']);
  this.executeCharTest('⩡', ['petit v à barre souscrite']);
  this.executeCharTest('⩢', ['ou logique à deux barres en chef']);
  this.executeCharTest('⩣', ['ou logique à deux barres souscrites']);
  this.executeCharTest('⩤', ['antirestriction de domaine en notation z']);
  this.executeCharTest('⩥', ['antirestriction de codomaine en notation z']);
  this.executeCharTest('⩦', ['égal point souscrit']);
  this.executeCharTest('⩧', ['identique à surmonté d\'un point']);
  this.executeCharTest('⩨', ['deux barres verticales à trois traverses']);
  this.executeCharTest('⩩', ['trois barres verticales à trois traverses']);
  this.executeCharTest('⩪', ['opérateur tilde point en chef']);
  this.executeCharTest('⩫', ['opérateur tilde à points ascendants']);
  this.executeCharTest('⩬', ['similaire à moins similaire à']);
  this.executeCharTest('⩭', ['congruent point en chef']);
  this.executeCharTest('⩮', ['Égal astérisque en chef']);
  this.executeCharTest('⩯', ['presque égal à circonflexe']);
  this.executeCharTest('⩰', ['approximativement égal à ou égal à']);
  this.executeCharTest('⩱', ['plus signe égal en chef']);
  this.executeCharTest('⩲', ['égal à signe plus en chef']);
  this.executeCharTest('⩳', ['tilde signe égal en chef']);
  this.executeCharTest('⩴', ['double deux points égal à']);
  this.executeCharTest('⩵', ['deux signes égal à consécutifs']);
  this.executeCharTest('⩶', ['trois signes égal à consécutifs']);
  this.executeCharTest('⩷', ['égal à deux points en chef deux points souscrits']);
  this.executeCharTest('⩸', ['équivalent quatre points en chef']);
  this.executeCharTest('⩹', ['inférieur à avec cercle inscrit']);
  this.executeCharTest('⩺', ['supérieur à avec cercle inscrit']);
  this.executeCharTest('⩻', ['inférieur à point d\'interrogation en chef']);
  this.executeCharTest('⩼', ['supérieur à point d\'interrogation en chef']);
  this.executeCharTest('⩽', ['plus petit ou égal à pentu']);
  this.executeCharTest('⩾', ['supérieur à ou égal à pentu']);
  this.executeCharTest('⩿', ['inférieur à ou égal à pentu point inscrit']);
  this.executeCharTest('⪀', ['supérieur à ou égal à pentu point inscrit']);
  this.executeCharTest('⪁', ['inférieur à ou égal à pentu point en chef']);
  this.executeCharTest('⪂', ['supérieur à ou égal à pentu point en chef']);
  this.executeCharTest('⪃', ['inférieur à ou égal à pentu point en chef droit']);
  this.executeCharTest('⪄', ['supérieur à ou égal à pentu point en chef gauche']);
  this.executeCharTest('⪅', ['inférieur à ou approximatif']);
  this.executeCharTest('⪆', ['supérieur à ou approximatif']);
  this.executeCharTest('⪇', ['inférieur à et pas égal à une ligne']);
  this.executeCharTest('⪈', ['supérieur à et pas égal à une ligne']);
  this.executeCharTest('⪉', ['inférieur à et non approximatif']);
  this.executeCharTest('⪊', ['supérieur à et non approximatif']);
  this.executeCharTest('⪋', ['inférieur à par dessus égal à deux lignes par dessus supérieur à']);
  this.executeCharTest('⪌', ['supérieur à par dessus égal à deux lignes par dessus inférieur à']);
  this.executeCharTest('⪍', ['inférieur à par dessus similaire à ou égal à']);
  this.executeCharTest('⪎', ['supérieur à par dessus similaire à ou égal à']);
  this.executeCharTest('⪏', ['inférieur à par dessus similaire à par dessus supérieur à']);
  this.executeCharTest('⪐', ['supérieur à par dessus similaire à par dessus inférieur à']);
  this.executeCharTest('⪑', ['inférieur à par dessus supérieur à par dessus égal à deux lignes']);
  this.executeCharTest('⪒', ['supérieur à par dessus inférieur à par dessus égal à deux lignes']);
  this.executeCharTest('⪓', ['inférieur à par dessus égal à pentu par dessus supérieur à par dessus égal à pentu']);
  this.executeCharTest('⪔', ['supérieur à par dessus égal à pentu par dessus inférieur à par dessus égal à pentu']);
  this.executeCharTest('⪕', ['Égal à incliné ou inférieur à']);
  this.executeCharTest('⪖', ['Égal à incliné ou supérieur à']);
  this.executeCharTest('⪗', ['égal à pentu ou inférieur à point inscrit']);
  this.executeCharTest('⪘', ['égal à pentu ou supérieur à point inscrit']);
  this.executeCharTest('⪙', ['égal à deux lignes ou inférieur à']);
  this.executeCharTest('⪚', ['égal à deux lignes ou supérieur à']);
  this.executeCharTest('⪛', ['inférieur à ou égal à à deux lignes inclinées']);
  this.executeCharTest('⪜', ['supérieur à ou égal à à deux lignes inclinées']);
  this.executeCharTest('⪝', ['similaire à ou inférieur à']);
  this.executeCharTest('⪞', ['similaire à ou supérieur à']);
  this.executeCharTest('⪟', ['similaire à par dessus inférieur à par dessus signe égal']);
  this.executeCharTest('⪠', ['similaire à par dessus supérieur à par dessus signe égal']);
  this.executeCharTest('⪡', ['deux inférieur à emboîtés']);
  this.executeCharTest('⪢', ['deux supérieur à emboîtés']);
  this.executeCharTest('⪣', ['deux inférieur à emboîtés avec barre souscrite']);
  this.executeCharTest('⪤', ['deux supérieur à entrecroisés']);
  this.executeCharTest('⪥', ['supérieur à à côté de inférieur à']);
  this.executeCharTest('⪦', ['inférieur à fermé d\'un arc']);
  this.executeCharTest('⪧', ['supérieur à fermé d\'un arc']);
  this.executeCharTest('⪨', ['inférieur à fermé d\'un arc par dessus égal à pentu']);
  this.executeCharTest('⪩', ['supérieur à fermé d\'un arc par dessus égal à pentu']);
  this.executeCharTest('⪪', ['plus petit que en fourche']);
  this.executeCharTest('⪫', ['plus grand que en fourche']);
  this.executeCharTest('⪬', ['plus petit ou égal que en fourche']);
  this.executeCharTest('⪭', ['plus grand ou égal que en fourche']);
  this.executeCharTest('⪮', ['égal et dos d\'âne']);
  this.executeCharTest('⪯', ['précède par dessus signe égal à une ligne']);
  this.executeCharTest('⪰', ['suit par dessus signe égal à une ligne']);
  this.executeCharTest('⪱', ['précède par dessus pas égal à une ligne']);
  this.executeCharTest('⪲', ['suit par dessus pas égal à une ligne']);
  this.executeCharTest('⪳', ['précède par dessus signe égal']);
  this.executeCharTest('⪴', ['suit par dessus signe égal']);
  this.executeCharTest('⪵', ['précède par dessus pas égal à']);
  this.executeCharTest('⪶', ['suit par dessus pas égal à']);
  this.executeCharTest('⪷', ['précède par dessus presque égal à']);
  this.executeCharTest('⪸', ['suit par dessus presque égal à']);
  this.executeCharTest('⪹', ['précède par dessus non presque égal à']);
  this.executeCharTest('⪺', ['suit par dessus non presque égal à']);
  this.executeCharTest('⪻', ['double précède']);
  this.executeCharTest('⪼', ['double suit']);
  this.executeCharTest('⪽', ['sous ensemble pointé']);
  this.executeCharTest('⪾', ['sur ensemble pointé']);
  this.executeCharTest('⪿', ['sous ensemble plus souscrit']);
  this.executeCharTest('⫀', ['sur ensemble plus souscrit']);
  this.executeCharTest('⫁', ['sous ensemble à signe de multiplication souscrit']);
  this.executeCharTest('⫂', ['sur ensemble à signe de multiplication souscrit']);
  this.executeCharTest('⫃', ['sous ensemble de ou égal à point en chef']);
  this.executeCharTest('⫄', ['sur ensemble de ou égal à point en chef']);
  this.executeCharTest('⫅', ['sous ensemble de par dessus signe égal']);
  this.executeCharTest('⫆', ['sur ensemble de par dessus signe égal']);
  this.executeCharTest('⫇', ['sous ensemble de par dessus opérateur tilde']);
  this.executeCharTest('⫈', ['sur ensemble de par dessus opérateur tilde']);
  this.executeCharTest('⫉', ['sous ensemble de par dessus presque égal à']);
  this.executeCharTest('⫊', ['sur ensemble de par dessus presque égal à']);
  this.executeCharTest('⫋', ['sous ensemble de par dessus pas égal à']);
  this.executeCharTest('⫌', ['sur ensemble de par dessus pas égal à']);
  this.executeCharTest('⫍', ['opérateur boîte carrée ouverte gauche']);
  this.executeCharTest('⫎', ['opérateur boîte carrée ouverte droite']);
  this.executeCharTest('⫏', ['sous ensemble clos']);
  this.executeCharTest('⫐', ['sur ensemble clos']);
  this.executeCharTest('⫑', ['sous ensemble clos ou égal à']);
  this.executeCharTest('⫒', ['sur ensemble clos ou égal à']);
  this.executeCharTest('⫓', ['sous ensemble par dessus sur ensemble']);
  this.executeCharTest('⫔', ['sur ensemble par dessus sous ensemble']);
  this.executeCharTest('⫕', ['sous ensemble par dessus sous ensemble']);
  this.executeCharTest('⫖', ['sur ensemble par dessus sur ensemble']);
  this.executeCharTest('⫗', ['sur ensemble à côté de sous ensemble']);
  this.executeCharTest('⫘', ['sur ensemble chaîné à sous ensemble']);
  this.executeCharTest('⫙', ['appartient à ouvert vers le bas']);
  this.executeCharTest('⫚', ['fourche surmontée d\'un t']);
  this.executeCharTest('⫛', ['intersection transversale']);
  this.executeCharTest('⫝̸', ['bifurcation (non indépendant)']);
  this.executeCharTest('⫝', ['non bifurcation (indépendant)']);
  this.executeCharTest('⫞', ['taquet gauche court']);
  this.executeCharTest('⫟', ['taquet court vers le bas']);
  this.executeCharTest('⫠', ['taquet court vers le haut']);
  this.executeCharTest('⫡', ['perpendiculaire à s']);
  this.executeCharTest('⫢', ['triple tourniquet droit à barre verticale']);
  this.executeCharTest('⫣', ['tourniquet gauche à double barre verticale']);
  this.executeCharTest('⫤', ['double tourniquet gauche à barre verticale']);
  this.executeCharTest('⫥', ['double tourniquet gauche à double barre verticale']);
  this.executeCharTest('⫦', ['double barre verticale gauche à traverse']);
  this.executeCharTest('⫧', ['taquet court vers le bas avec barre en chef']);
  this.executeCharTest('⫨', ['taquet court vers le haut avec barre souscrite']);
  this.executeCharTest('⫩', ['taquet court vers le haut par dessus taquet court vers le bas']);
  this.executeCharTest('⫪', ['double taquet vers le bas']);
  this.executeCharTest('⫫', ['double taquet vers le haut']);
  this.executeCharTest('⫬', ['négation à deux traits']);
  this.executeCharTest('⫭', ['négation à deux traits réfléchi']);
  this.executeCharTest('⫮', ['n\'est pas un diviseur de à barre de négation réfléchie']);
  this.executeCharTest('⫯', ['ligne verticale cercle en chef']);
  this.executeCharTest('⫰', ['ligne verticale cercle souscrit']);
  this.executeCharTest('⫱', ['taquet vers le bas surmontant un cercle']);
  this.executeCharTest('⫲', ['parallèlle à vertical à une traverse']);
  this.executeCharTest('⫳', ['parallèle à avec opérateur tilde']);
  this.executeCharTest('⫴', ['relation binaire triple barre verticale']);
  this.executeCharTest('⫵', ['triple barre verticale à une traverse']);
  this.executeCharTest('⫶', ['opérateur trois points']);
  this.executeCharTest('⫷', ['trois inférieur à emboîtés']);
  this.executeCharTest('⫸', ['trois supérieur à emboîtés']);
  this.executeCharTest('⫹', ['inférieur à ou égal à et deux lignes inclinées']);
  this.executeCharTest('⫺', ['supérieur à ou égal à et deux lignes inclinées']);
  this.executeCharTest('⫻', ['relation binaire triple oblique']);
  this.executeCharTest('⫼', ['grand opérateur à trois barres verticales']);
  this.executeCharTest('⫽', ['opérateur double oblique']);
  this.executeCharTest('⫾', ['barre verticale blanche']);
  this.executeCharTest('⫿', ['barre verticale blanche n aire']);
  this.executeCharTest('〜', ['trait d\'union en esse']);
  this.executeCharTest('︐', ['forme de présentation de virgule verticale']);
  this.executeCharTest('︓', ['forme de présentation de deux points vertical']);
  this.executeCharTest('︔', ['forme de présentation de point virgule vertical']);
  this.executeCharTest('︕', ['forme de présentation de point d\'exclamation vertical']);
  this.executeCharTest('︖', ['forme de présentation de point d\'interrogation vertical']);
  this.executeCharTest('︙', ['forme de présentation de points de suspension verticaux']);
  this.executeCharTest('︰', ['forme de présentation de point de conduite double vertical']);
  this.executeCharTest('︱', ['forme de présentation de tiret cadratin vertical']);
  this.executeCharTest('︲', ['forme de présentation de tiret demi cadratin vertical']);
  this.executeCharTest('︳', ['forme de présentation de tiret bas vertical']);
  this.executeCharTest('︴', ['forme de présentation de tiret bas ondulé vertical']);
  this.executeCharTest('﹅', ['point sésame']);
  this.executeCharTest('﹆', ['point sésame ajouré']);
  this.executeCharTest('﹉', ['tiret haut en pointillés']);
  this.executeCharTest('﹊', ['tiret haut à point central']);
  this.executeCharTest('﹋', ['tiret haut ondulé']);
  this.executeCharTest('﹌', ['tiret haut double ondulé']);
  this.executeCharTest('﹍', ['tiret bas avec pointillés']);
  this.executeCharTest('﹎', ['tiret bas à point central']);
  this.executeCharTest('﹏', ['tiret bas ondulé']);
  this.executeCharTest('﹐', ['virgule minuscule']);
  this.executeCharTest('﹒', ['point minuscule']);
  this.executeCharTest('﹔', ['point virgule minuscule']);
  this.executeCharTest('﹕', ['deux points minuscule']);
  this.executeCharTest('﹖', ['point d\'interrogation minuscule']);
  this.executeCharTest('﹗', ['point d\'exclamation minuscule']);
  this.executeCharTest('﹘', ['trait d\'union cadratin minuscule']);
  this.executeCharTest('﹟', ['croisillon minuscule']);
  this.executeCharTest('﹠', ['perluète minuscule']);
  this.executeCharTest('﹡', ['astérisque minuscule']);
  this.executeCharTest('﹢', ['plus minuscule']);
  this.executeCharTest('﹣', ['tiret minuscule']);
  this.executeCharTest('﹤', ['inférieur à minuscule']);
  this.executeCharTest('﹥', ['supérieur à minuscule']);
  this.executeCharTest('﹦', ['égal à minuscule']);
  this.executeCharTest('﹨', ['integer divide']);
  this.executeCharTest('﹩', ['symbole dollar minuscule']);
  this.executeCharTest('﹪', ['symbole pour cent minuscule']);
  this.executeCharTest('﹫', ['arrobe minuscule']);
  this.executeCharTest('！', ['point d\'exclamation']);
  this.executeCharTest('＂', ['guillemet']);
  this.executeCharTest('＃', ['croisillon']);
  this.executeCharTest('＄', ['symbole dollar']);
  this.executeCharTest('％', ['symbole pour cent']);
  this.executeCharTest('＆', ['perluète']);
  this.executeCharTest('＇', ['apostrophe']);
  this.executeCharTest('＊', ['astérisque']);
  this.executeCharTest('＋', ['plus']);
  this.executeCharTest('，', ['virgule']);
  this.executeCharTest('－', ['tiret']);
  this.executeCharTest('．', ['point']);
  this.executeCharTest('／', ['barre oblique']);
  this.executeCharTest('：', ['deux points colon']);
  this.executeCharTest('；', ['point virgule']);
  this.executeCharTest('＜', ['inférieur à']);
  this.executeCharTest('＝', ['égal à']);
  this.executeCharTest('＞', ['supérieur à']);
  this.executeCharTest('？', ['point d\'interrogation']);
  this.executeCharTest('＠', ['arrobe']);
  this.executeCharTest('＼', ['barre oblique inversée']);
  this.executeCharTest('＾', ['accent circonflexe']);
  this.executeCharTest('＿', ['tiret bas']);
  this.executeCharTest('｀', ['accent grave']);
  this.executeCharTest('｜', ['barre verticale']);
  this.executeCharTest('～', ['tilde']);
  this.executeCharTest('￠', ['symbole centime']);
  this.executeCharTest('￡', ['symbole livre']);
  this.executeCharTest('￢', ['négation']);
  this.executeCharTest('￣', ['macron *']);
  this.executeCharTest('￤', ['ligne brisée']);
  this.executeCharTest('￥', ['symbole yen']);
  this.executeCharTest('￦', ['symbole won']);
  this.executeCharTest('￨', ['ligne verticale mince']);
  this.executeCharTest('￭', ['carré noir']);
  this.executeCharTest('￮', ['cercle blanc']);
  this.executeCharTest(' ', ['espace']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest('­', ['trait d\'union conditionnel']);
  this.executeCharTest(' ', ['demi cadratin']);
  this.executeCharTest(' ', ['cadratin']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest(' ', ['sixième de cadratin']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest(' ', [' ']);
  this.executeCharTest('​', ['​']);
  this.executeCharTest('‌', ['antiliant sans chasse']);
  this.executeCharTest('‍', ['liant sans chasse']);
  this.executeCharTest('‎', ['marque gauche à droite']);
  this.executeCharTest('‏', ['marque droite à gauche']);
  this.executeCharTest(' ', ['séparateur de lignes']);
  this.executeCharTest(' ', ['séparateur de paragraphes']);
  this.executeCharTest('‪', ['enchâssement gauche à droite']);
  this.executeCharTest('‫', ['enchâssement droite à gauche']);
  this.executeCharTest('‬', ['dépilement de formatage directionnel']);
  this.executeCharTest('‭', ['forçage gauche à droite']);
  this.executeCharTest('‮', ['forçage droite à gauche']);
  this.executeCharTest(' ', ['espace insécable étroite']);
  this.executeCharTest(' ', ['espace moyenne mathématique']);
  this.executeCharTest('⁠', ['⁠']);
  this.executeCharTest('⁡', ['de']);
  this.executeCharTest('⁢', [' ']);
  this.executeCharTest('⁣', ['⁣']);
  this.executeCharTest('⁤', ['plus invisible']);
  this.executeCharTest('⁪', ['inhibiteur d\'échange symétrique']);
  this.executeCharTest('⁫', ['activateur d\'échange symétrique']);
  this.executeCharTest('⁮', ['sélecteur de formes numérales nationales']);
  this.executeCharTest('⁯', ['sélecteur de formes numérales de référence']);
  this.executeCharTest('﻿', ['espace ultrafine']);
  this.executeCharTest('￹', ['ancre d\'annotation interlinéaire']);
  this.executeCharTest('￺', ['séparateur d\'annotation interlinéaire']);
  this.executeCharTest('￻', ['terminateur d\'annotation interlinéaire']);
  this.executeCharTest('⏨', ['symbole exposant décimal']);
  this.executeCharTest('★', ['étoile noire']);
  this.executeCharTest('☆', ['étoile blanche']);
  this.executeCharTest('⚪', ['cercle moyen blanc']);
  this.executeCharTest('⚫', ['cercle moyen noir']);
  this.executeCharTest('✅', ['signe de vérification blanc gras']);
  this.executeCharTest('✓', ['signe de vérification']);
  this.executeCharTest('✔', ['gros signe de vérification']);
  this.executeCharTest('✕', ['x de multiplication']);
  this.executeCharTest('✖', ['gros x de multiplication']);
  this.executeCharTest('✗', ['x de bulletin de vote']);
  this.executeCharTest('✘', ['gros x de bulletin de vote']);
  this.executeCharTest('✛', ['croix percée d\'un carré']);
  this.executeCharTest('✜', ['grosse croix percée d\'un carré']);
  this.executeCharTest('✠', ['croix de malte']);
  this.executeCharTest('✡', ['Étoile de david']);
  this.executeCharTest('✢', ['croix larmée']);
  this.executeCharTest('✣', ['croix pommetée']);
  this.executeCharTest('✤', ['grosse croix pommetée']);
  this.executeCharTest('✥', ['croix tréflée']);
  this.executeCharTest('✦', ['Étoile noire à quatre branches']);
  this.executeCharTest('✧', ['Étoile blanche à quatre branches']);
  this.executeCharTest('✨', ['scintillements']);
  this.executeCharTest('✩', ['Étoile blanche à contour accentué']);
  this.executeCharTest('✪', ['Étoile blanche cerclée']);
  this.executeCharTest('✫', ['molette noire']);
  this.executeCharTest('✬', ['molette blanche']);
  this.executeCharTest('✭', ['Étoile noire avec contour']);
  this.executeCharTest('✮', ['Étoile noire avec gros contour']);
  this.executeCharTest('✯', ['Étoile rayonnante']);
  this.executeCharTest('✰', ['Étoile blanche ombrée']);
  this.executeCharTest('✱', ['gros astérisque']);
  this.executeCharTest('✲', ['astérisque percé']);
  this.executeCharTest('✳', ['astérisque à huit branches']);
  this.executeCharTest('✴', ['Étoile noire à huit branches']);
  this.executeCharTest('✵', ['Étoile rayonnante à huit branches']);
  this.executeCharTest('✶', ['étoile noire à six branches']);
  this.executeCharTest('✹', ['Étoile noire à douze branches']);
  this.executeCharTest('✺', ['astérisque à seize branches']);
  this.executeCharTest('✻', ['astérisque larmé']);
  this.executeCharTest('✼', ['astérisque larmé percé']);
  this.executeCharTest('✽', ['gros astérisque larmé']);
  this.executeCharTest('✾', ['sixtefeuille blanche et noire']);
  this.executeCharTest('✿', ['quintefeuille noire']);
  this.executeCharTest('❀', ['quintefeuille blanche']);
  this.executeCharTest('❁', ['double quartefeuille noire avec contour']);
  this.executeCharTest('❂', ['Étoile cerclée percée à huit branches']);
  this.executeCharTest('❃', ['gros astérisque rayonnant larmé']);
  this.executeCharTest('❄', ['flocon de neige']);
  this.executeCharTest('❅', ['flocon de neige à trois folioles transpercé']);
  this.executeCharTest('❆', ['gros flocon de neige à chevrons']);
  this.executeCharTest('❇', ['Étincellement']);
  this.executeCharTest('❈', ['gros étincellement']);
  this.executeCharTest('❉', ['astérisque pommeté']);
  this.executeCharTest('❊', ['astérisque hélice à huit branches larmées']);
  this.executeCharTest('❋', ['gros astérisque hélice à huit branches larmées']);
  this.executeCharTest('❌', ['croix grasse']);
  this.executeCharTest('❍', ['cercle blanc ombré']);
  this.executeCharTest('¼', ['un quart']);
  this.executeCharTest('½', ['un demi']);
  this.executeCharTest('¾', ['trois quarts']);
  this.executeCharTest('⅐', ['un septième']);
  this.executeCharTest('⅑', ['un neuvième']);
  this.executeCharTest('⅒', ['un dixième']);
  this.executeCharTest('⅓', ['un tiers']);
  this.executeCharTest('⅔', ['deux tiers']);
  this.executeCharTest('⅕', ['un cinquième']);
  this.executeCharTest('⅖', ['deux cinquièmes']);
  this.executeCharTest('⅗', ['trois cinquièmes']);
  this.executeCharTest('⅘', ['quatre cinquièmes']);
  this.executeCharTest('⅙', ['un sixième']);
  this.executeCharTest('⅚', ['cinq sixièmes']);
  this.executeCharTest('⅛', ['un huitième']);
  this.executeCharTest('⅜', ['trois huitièmes']);
  this.executeCharTest('⅝', ['cinq huitièmes']);
  this.executeCharTest('⅞', ['sept huitièmes']);
  this.executeCharTest('⅟', ['numérateur un']);
  this.executeCharTest('↉', ['zero tiers']);
  this.executeCharTest('㉈', ['dix cerclé sur carré noir']);
  this.executeCharTest('㉉', ['vingt cerclé sur carré noir']);
  this.executeCharTest('㉊', ['trente cerclé sur carré noir']);
  this.executeCharTest('㉋', ['quarante cerclé sur carré noir']);
  this.executeCharTest('㉌', ['cinquante cerclé sur carré noir']);
  this.executeCharTest('㉍', ['soixante cerclé sur carré noir']);
  this.executeCharTest('㉎', ['soixante dix cerclé sur carré noir']);
  this.executeCharTest('㉏', ['quatre vingts cerclé sur carré noir']);
};


sre.DefaultCharGermanTest.prototype.testDefaultFunctions = function() {
  this.executeCharTest('deg', ['degree']);
  this.executeCharTest('det', ['déterminant']);
  this.executeCharTest('dim', ['dimension']);
  this.executeCharTest('hom', ['hom']);
  this.executeCharTest('Hom', ['hom']);
  this.executeCharTest('ker', ['kernel']);
  this.executeCharTest('Tr', ['trace']);
  this.executeCharTest('tr', ['trace']);
  this.executeCharTest('log', ['log']);
  this.executeCharTest('ln', ['logarithme népérien']);
  this.executeCharTest('lg', ['log base 10']);
  this.executeCharTest('exp', ['exp']);
  this.executeCharTest('expt', ['exp']);
  this.executeCharTest('gcd', ['gcd']);
  this.executeCharTest('lcm', ['lcm']);
  this.executeCharTest('arg', ['arg']);
  this.executeCharTest('im', ['imaginary']);
  this.executeCharTest('re', ['real']);
  this.executeCharTest('inf', ['inf']);
  this.executeCharTest('lim', ['limite']);
  this.executeCharTest('lim inf', ['liminf']);
  this.executeCharTest('liminf', ['liminf']);
  this.executeCharTest('lim sup', ['limsup']);
  this.executeCharTest('limsup', ['limsup']);
  this.executeCharTest('max', ['max']);
  this.executeCharTest('min', ['min']);
  this.executeCharTest('sup', ['sup']);
  this.executeCharTest('injlim', ['colimit']);
  this.executeCharTest('inj lim', ['colimit']);
  this.executeCharTest('projlim', ['projective limit']);
  this.executeCharTest('proj lim', ['projective limit']);
  this.executeCharTest('mod', ['mod']);
  this.executeCharTest('Pr', ['probability']);
  this.executeCharTest('cosh', ['cosinus hyperbolique']);
  this.executeCharTest('coth', ['cotangente hyperbolique']);
  this.executeCharTest('csch', ['cosécante hyperbolique']);
  this.executeCharTest('sech', ['sécante hyperbolique']);
  this.executeCharTest('sinh', ['sinus hyperbolique']);
  this.executeCharTest('tanh', ['tangente hyperbolique']);
  this.executeCharTest('arcosh', ['arc cosinus hyperbolique']);
  this.executeCharTest('arccosh', ['arc cosinus hyperbolique']);
  this.executeCharTest('arcoth', ['arc cotangente hyperbolique']);
  this.executeCharTest('arccoth', ['arc cotangente hyperbolique']);
  this.executeCharTest('arcsch', ['arc cosécante hyperbolique']);
  this.executeCharTest('arccsch', ['arc cosécante hyperbolique']);
  this.executeCharTest('arsech', ['arc sécante hyperbolique']);
  this.executeCharTest('arcsech', ['arc sécante hyperbolique']);
  this.executeCharTest('arsinh', ['arc sinus hyperbolique']);
  this.executeCharTest('arcsinh', ['arc sinus hyperbolique']);
  this.executeCharTest('artanh', ['arc tangente hyperbolique']);
  this.executeCharTest('arctanh', ['arc tangente hyperbolique']);
  this.executeCharTest('cos', ['cosinus']);
  this.executeCharTest('cosine', ['cosinus']);
  this.executeCharTest('cot', ['cotangente']);
  this.executeCharTest('csc', ['cosécante']);
  this.executeCharTest('sec', ['sécante']);
  this.executeCharTest('sin', ['sinus']);
  this.executeCharTest('sine', ['sinus']);
  this.executeCharTest('tan', ['tangente']);
  this.executeCharTest('arccos', ['cosinus hyperbolique']);
  this.executeCharTest('arccot', ['cotangente hyperbolique']);
  this.executeCharTest('arccsc', ['cosécante hyperbolique']);
  this.executeCharTest('arcsec', ['sécante hyperbolique']);
  this.executeCharTest('arcsin', ['sinus hyperbolique']);
  this.executeCharTest('arctan', ['tangente hyperbolique']);
};


sre.DefaultCharGermanTest.prototype.testDefaultUnits = function() {
  this.executeUnitTest('W', ['watts']);
  this.executeUnitTest('w', ['watts']);
  this.executeUnitTest('kw', ['kilowatt']);
  this.executeUnitTest('kW', ['kilowatt']);
  this.executeUnitTest('mw', ['milliwatt']);
  this.executeUnitTest('mW', ['milliwatt']);
  this.executeUnitTest('kwh', ['kilowatt hour']);
  this.executeUnitTest('kWh', ['kilowatt hour']);
  this.executeUnitTest('J', ['joules']);
  this.executeUnitTest('N', ['newtons']);
  this.executeUnitTest('A', ['ampères']);
  this.executeUnitTest('V', ['volts']);
  this.executeUnitTest('µΩ', ['microohm']);
  this.executeUnitTest('mΩ', ['milliohm']);
  this.executeUnitTest('Ω', ['ohms']);
  this.executeUnitTest('Ohm', ['ohms']);
  this.executeUnitTest('kΩ', ['kilohm']);
  this.executeUnitTest('KΩ', ['kilohm']);
  this.executeUnitTest('MΩ', ['megaohm']);
  this.executeUnitTest('GΩ', ['gigaohm']);
  this.executeUnitTest('mm', ['millimeter']);
  this.executeUnitTest('cm', ['centimeter']);
  this.executeUnitTest('m', ['mètres']);
  this.executeUnitTest('km', ['kilometer']);
  this.executeUnitTest('ft', ['pieds']);
  this.executeUnitTest('ft.', ['pieds']);
  this.executeUnitTest('in', ['pouces']);
  this.executeUnitTest('in.', ['pouces']);
  this.executeUnitTest('mi', ['miles']);
  this.executeUnitTest('mi.', ['miles']);
  this.executeUnitTest('yd', ['yards']);
  this.executeUnitTest('yd.', ['yards']);
  this.executeUnitTest('n.m.', ['nautical mile']);
  this.executeUnitTest('b', ['bit']);
  this.executeUnitTest('B', ['byte']);
  this.executeUnitTest('KB', ['kilobyte']);
  this.executeUnitTest('MB', ['megabyte']);
  this.executeUnitTest('GB', ['gigabyte']);
  this.executeUnitTest('TB', ['terabyte']);
  this.executeUnitTest('doz', ['dozen']);
  this.executeUnitTest('doz.', ['dozen']);
  this.executeUnitTest('dz', ['dozen']);
  this.executeUnitTest('dz.', ['dozen']);
  this.executeUnitTest('sq', ['square']);
  this.executeUnitTest('sq.', ['square']);
  this.executeUnitTest('ha', ['hectare']);
  this.executeUnitTest('kt', ['knot']);
  this.executeUnitTest('kt.', ['knot']);
  this.executeUnitTest('mph', ['miles par heure']);
  this.executeUnitTest('rpm', ['revolutions per minute']);
  this.executeUnitTest('kmh', ['kilometers per hour']);
  this.executeUnitTest('F', ['farads']);
  this.executeUnitTest('F.', ['farads']);
  this.executeUnitTest('°F', ['farads']);
  this.executeUnitTest('C', ['coulombs']);
  this.executeUnitTest('°C', ['coulombs']);
  this.executeUnitTest('K', ['kelvins']);
  this.executeUnitTest('°K', ['kelvins']);
  this.executeUnitTest('ns', ['nanosecond']);
  this.executeUnitTest('µs', ['microsecond']);
  this.executeUnitTest('ms', ['millisecond']);
  this.executeUnitTest('s', ['secondes']);
  this.executeUnitTest('min', ['minute']);
  this.executeUnitTest('h', ['hour']);
  this.executeUnitTest('hr', ['hour']);
  this.executeUnitTest('bbl.', ['barils']);
  this.executeUnitTest('bbl', ['barils']);
  this.executeUnitTest('cu', ['cubic']);
  this.executeUnitTest('cu.', ['cubic']);
  this.executeUnitTest('fl. oz.', ['fluid ounce']);
  this.executeUnitTest('gal', ['gallons']);
  this.executeUnitTest('gal.', ['gallons']);
  this.executeUnitTest('pt', ['pintes']);
  this.executeUnitTest('pt.', ['pintes']);
  this.executeUnitTest('qt', ['quarts']);
  this.executeUnitTest('qt.', ['quarts']);
  this.executeUnitTest('tbsp', ['cuillères de table']);
  this.executeUnitTest('tbsp.', ['cuillères de table']);
  this.executeUnitTest('tsp', ['cuillèes à thé']);
  this.executeUnitTest('tsp.', ['cuillèes à thé']);
  this.executeUnitTest('cc', ['cubic centimeter']);
  this.executeUnitTest('kl', ['kiloliter']);
  this.executeUnitTest('l', ['litres']);
  this.executeUnitTest('ml', ['milliliter']);
  this.executeUnitTest('lb', ['livres']);
  this.executeUnitTest('lb.', ['livres']);
  this.executeUnitTest('LT', ['long ton']);
  this.executeUnitTest('L.T.', ['long ton']);
  this.executeUnitTest('oz', ['onces']);
  this.executeUnitTest('oz.', ['onces']);
  this.executeUnitTest('g', ['grains']);
  this.executeUnitTest('gr', ['grains']);
  this.executeUnitTest('kg', ['kilogram']);
  this.executeUnitTest('mcg', ['microgram']);
  this.executeUnitTest('µg', ['microgram']);
  this.executeUnitTest('mg', ['milligram']);
  this.executeUnitTest('t', ['tonnes']);
  this.executeUnitTest('T', ['tonnes']);
};
